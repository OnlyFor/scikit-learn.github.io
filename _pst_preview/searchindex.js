Search.setIndex({"docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5"], "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst"], "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5"], "terms": {"thi": [0, 2, 7, 11, 30, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 376, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 487, 488, 489, 490, 492, 494, 495, 498, 501, 502, 503, 504, 506, 507, 508, 510, 513, 514, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 711, 712, 714, 716, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 740, 741, 742, 743, 744, 745, 746, 747, 752, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 772, 773, 778, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 922, 926, 927, 932, 933, 935, 937, 938, 943, 945, 950, 951, 952, 953, 954, 955, 957, 960, 961, 962, 964, 965, 968, 969, 978, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wa": [0, 45, 49, 55, 57, 67, 78, 107, 108, 116, 121, 126, 160, 163, 177, 188, 195, 200, 227, 247, 260, 272, 274, 276, 278, 280, 286, 287, 297, 317, 325, 329, 330, 334, 340, 341, 361, 363, 369, 370, 374, 382, 384, 385, 387, 391, 392, 401, 405, 406, 409, 411, 412, 414, 417, 418, 422, 426, 438, 445, 446, 447, 448, 450, 451, 452, 454, 455, 459, 462, 465, 469, 473, 474, 479, 487, 488, 489, 490, 520, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 669, 681, 682, 690, 691, 693, 694, 697, 718, 733, 734, 787, 788, 791, 801, 802, 803, 806, 807, 817, 829, 831, 843, 850, 853, 855, 858, 862, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 895, 898, 899, 903, 904, 937, 938, 961, 982, 983, 984, 993, 994, 997, 1000, 1004, 1007, 1010, 1013, 1019, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "start": [0, 45, 48, 51, 53, 54, 61, 66, 91, 96, 102, 105, 111, 121, 131, 147, 153, 155, 174, 177, 184, 186, 196, 200, 203, 204, 212, 223, 224, 225, 231, 241, 243, 247, 255, 257, 269, 280, 288, 300, 333, 335, 339, 361, 369, 370, 374, 375, 376, 380, 387, 388, 389, 391, 392, 393, 399, 401, 405, 412, 414, 418, 419, 423, 424, 445, 447, 455, 459, 461, 543, 615, 622, 637, 650, 658, 664, 671, 672, 673, 681, 682, 683, 695, 699, 785, 786, 793, 801, 802, 803, 806, 807, 817, 848, 849, 850, 852, 854, 862, 948, 978, 983, 990, 993, 998, 999, 1008, 1014, 1018, 1019, 1027, 1028, 1038, 1040, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "2007": [0, 76, 211, 382, 414, 423, 445, 457, 459, 465, 467, 571, 661, 696, 722, 738, 741, 762, 763, 799, 986, 990, 992, 994], "googl": [0, 58, 399, 414, 447, 1012, 1024, 1035], "summer": [0, 45, 54, 86, 184, 1035], "code": [0, 2, 30, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 381, 385, 386, 388, 390, 391, 396, 399, 401, 402, 405, 406, 409, 411, 414, 421, 422, 447, 448, 452, 454, 464, 501, 531, 535, 536, 542, 543, 547, 548, 550, 551, 553, 571, 577, 586, 587, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 687, 688, 690, 691, 834, 835, 836, 873, 880, 962, 991, 995, 1004, 1006, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1020, 1028, 1035, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "david": [0, 43, 75, 95, 117, 148, 158, 202, 207, 225, 260, 281, 283, 325, 361, 362, 363, 382, 414, 421, 424, 467, 537, 541, 572, 573, 627, 628, 633, 729, 801, 903, 984, 990, 998, 1007, 1018, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "cournapeau": [0, 43, 1035, 1038], "later": [0, 52, 91, 142, 147, 156, 179, 196, 200, 202, 260, 297, 313, 363, 370, 393, 399, 400, 405, 409, 852, 875, 876, 884, 886, 986, 1004, 1023, 1028, 1038, 1041, 1043, 1047], "year": [0, 45, 54, 166, 177, 184, 194, 195, 196, 223, 224, 241, 384, 386, 391, 399, 418, 422, 805, 810, 812, 885, 990, 994, 1014, 1018, 1026], "matthieu": [0, 43, 1035, 1039, 1050], "brucher": [0, 43, 1035], "work": [0, 3, 45, 50, 54, 58, 71, 82, 83, 86, 90, 105, 114, 145, 152, 166, 177, 185, 186, 194, 195, 196, 212, 227, 240, 257, 266, 268, 278, 297, 306, 307, 326, 330, 332, 333, 335, 351, 362, 363, 370, 375, 376, 381, 382, 385, 387, 388, 389, 390, 391, 392, 393, 395, 400, 401, 402, 411, 412, 413, 414, 415, 416, 419, 421, 422, 423, 426, 427, 428, 429, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 465, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 509, 513, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 713, 746, 778, 782, 783, 784, 785, 792, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 943, 947, 962, 983, 984, 986, 988, 989, 990, 991, 993, 994, 996, 997, 1000, 1001, 1004, 1007, 1008, 1013, 1014, 1018, 1019, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "part": [0, 46, 54, 70, 74, 99, 108, 118, 128, 131, 145, 148, 151, 155, 161, 168, 169, 170, 174, 184, 192, 202, 257, 259, 269, 275, 277, 294, 315, 322, 325, 327, 363, 376, 382, 384, 387, 389, 393, 395, 400, 401, 405, 411, 413, 414, 418, 419, 421, 422, 424, 451, 454, 498, 499, 500, 526, 536, 542, 547, 579, 589, 590, 591, 618, 630, 797, 871, 889, 891, 892, 893, 894, 895, 896, 897, 983, 984, 986, 991, 995, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1028, 1030, 1035, 1043, 1044, 1046, 1048, 1050], "hi": [0, 415, 994, 1028], "thesi": [0, 384, 414, 421], "In": [0, 7, 37, 45, 46, 48, 50, 52, 53, 54, 55, 56, 65, 66, 67, 73, 75, 77, 86, 87, 91, 93, 95, 96, 98, 104, 105, 108, 109, 111, 112, 114, 116, 117, 118, 121, 123, 124, 128, 130, 133, 135, 136, 140, 142, 145, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 166, 173, 174, 176, 177, 179, 183, 184, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 211, 212, 214, 218, 223, 224, 225, 226, 227, 228, 231, 240, 241, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 269, 271, 274, 277, 278, 280, 281, 282, 283, 285, 286, 289, 290, 292, 294, 295, 297, 300, 303, 306, 307, 309, 318, 320, 321, 322, 325, 326, 327, 329, 330, 331, 333, 334, 336, 340, 342, 349, 353, 357, 361, 362, 363, 365, 369, 370, 374, 375, 376, 380, 381, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 399, 400, 401, 402, 404, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 442, 445, 446, 447, 448, 449, 452, 453, 454, 457, 467, 468, 469, 474, 477, 480, 498, 501, 508, 513, 514, 516, 528, 539, 541, 543, 545, 546, 547, 549, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 596, 607, 611, 614, 615, 616, 635, 637, 638, 639, 641, 648, 649, 650, 652, 653, 654, 656, 658, 660, 663, 664, 666, 668, 670, 671, 673, 674, 679, 680, 681, 684, 685, 689, 690, 691, 701, 704, 708, 717, 723, 725, 730, 732, 733, 738, 739, 742, 744, 746, 758, 760, 761, 785, 787, 789, 792, 798, 800, 801, 802, 803, 806, 807, 809, 817, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 848, 849, 850, 852, 853, 854, 856, 857, 858, 863, 871, 873, 879, 880, 884, 885, 887, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 903, 906, 907, 908, 911, 914, 916, 921, 925, 927, 943, 983, 984, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1018, 1019, 1026, 1027, 1028, 1032, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "2010": [0, 85, 105, 115, 196, 285, 286, 412, 414, 416, 418, 419, 427, 480, 541, 709, 713, 724, 725, 744, 831, 863, 864, 986, 990, 994, 998, 1008, 1012, 1035], "fabian": [0, 43, 210, 228, 244, 312, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1052], "pedregosa": [0, 43, 210, 228, 244, 312, 1035, 1036, 1037, 1038, 1039, 1041], "gael": [0, 42, 53, 71, 77, 78, 84, 90, 91, 104, 105, 118, 130, 212, 213, 244, 255, 268, 1012, 1014, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "varoquaux": [0, 42, 53, 70, 71, 77, 78, 83, 84, 89, 90, 91, 104, 105, 110, 118, 123, 124, 130, 134, 206, 212, 213, 220, 221, 244, 246, 253, 255, 268, 322, 353, 354, 402, 1012, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "alexandr": [0, 42, 43, 64, 65, 69, 80, 85, 92, 105, 128, 130, 135, 208, 210, 211, 212, 214, 216, 217, 250, 253, 286, 293, 312, 402, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "gramfort": [0, 42, 64, 65, 69, 80, 85, 92, 105, 128, 130, 135, 208, 210, 211, 212, 214, 216, 217, 250, 253, 286, 293, 312, 402, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "vincent": [0, 43, 85, 105, 182, 186, 1018, 1035, 1037, 1039, 1040, 1042, 1045, 1050, 1051, 1052], "michel": [0, 43, 85, 105, 1035, 1037, 1038, 1040, 1042, 1049, 1050], "inria": [0, 46, 50, 69, 75, 90, 92, 95, 112, 118, 148, 158, 185, 202, 207, 208, 210, 214, 216, 217, 228, 244, 245, 250, 253, 260, 281, 283, 286, 293, 312, 325, 357, 361, 362, 363, 663, 1035], "took": [0, 45, 80, 288], "leadership": 0, "made": [0, 54, 67, 107, 117, 123, 133, 142, 148, 166, 186, 195, 196, 223, 241, 260, 272, 284, 326, 330, 349, 366, 374, 382, 384, 387, 391, 401, 402, 406, 414, 421, 422, 426, 448, 451, 452, 454, 464, 501, 508, 593, 594, 596, 635, 636, 661, 670, 690, 691, 739, 787, 803, 806, 807, 817, 821, 822, 823, 843, 846, 847, 995, 1000, 1010, 1013, 1018, 1025, 1027, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1048, 1049], "first": [0, 2, 45, 46, 48, 49, 52, 54, 58, 61, 65, 66, 69, 70, 71, 73, 77, 93, 94, 96, 99, 102, 103, 104, 105, 107, 108, 109, 112, 116, 120, 121, 123, 124, 125, 133, 136, 142, 143, 147, 149, 150, 151, 152, 153, 154, 156, 158, 160, 163, 164, 165, 166, 173, 174, 177, 179, 180, 181, 184, 185, 186, 187, 191, 194, 195, 196, 198, 200, 202, 204, 206, 212, 219, 220, 221, 224, 225, 231, 232, 237, 244, 247, 254, 255, 257, 258, 259, 261, 263, 264, 268, 272, 275, 280, 282, 283, 287, 289, 291, 292, 297, 299, 300, 302, 305, 309, 310, 311, 315, 317, 320, 322, 325, 326, 327, 330, 331, 339, 342, 345, 346, 349, 351, 361, 362, 363, 365, 366, 369, 370, 375, 376, 381, 382, 384, 385, 386, 389, 391, 392, 393, 395, 399, 401, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 426, 448, 451, 452, 455, 464, 465, 469, 477, 488, 492, 493, 495, 496, 497, 499, 502, 505, 507, 509, 513, 514, 515, 533, 538, 539, 543, 546, 558, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 587, 589, 593, 594, 595, 596, 598, 606, 615, 616, 622, 626, 629, 636, 637, 638, 639, 651, 657, 664, 671, 673, 679, 681, 693, 700, 703, 704, 705, 707, 717, 721, 740, 746, 767, 768, 786, 798, 801, 802, 806, 807, 808, 809, 810, 815, 817, 824, 825, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 851, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 871, 879, 883, 884, 885, 887, 888, 895, 896, 908, 911, 914, 915, 916, 917, 919, 921, 922, 926, 927, 928, 945, 947, 961, 965, 968, 980, 983, 984, 988, 989, 990, 991, 993, 994, 995, 996, 997, 1001, 1004, 1005, 1008, 1009, 1010, 1018, 1019, 1025, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "public": [0, 115, 381, 387, 389, 391, 392, 399, 400, 401, 402, 418, 421, 473, 669, 676, 690, 691, 697, 904, 990, 998, 1035, 1040, 1041, 1046, 1047, 1048, 1051], "releas": [0, 56, 93, 108, 140, 146, 147, 160, 177, 190, 191, 196, 197, 200, 223, 224, 225, 252, 257, 262, 263, 264, 275, 276, 292, 297, 302, 326, 375, 385, 387, 388, 390, 395, 399, 401, 422, 448, 451, 452, 469, 472, 495, 496, 501, 506, 507, 509, 517, 520, 526, 529, 543, 546, 566, 567, 569, 570, 572, 604, 607, 633, 635, 637, 639, 645, 651, 653, 657, 663, 674, 685, 693, 706, 707, 722, 736, 752, 792, 799, 803, 804, 806, 807, 809, 817, 825, 828, 829, 832, 848, 850, 867, 871, 876, 879, 880, 881, 885, 886, 887, 903, 904, 906, 911, 914, 915, 938, 962, 1010, 1015, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "februari": [0, 416, 478, 994, 1036, 1040, 1052], "1st": [0, 45, 98, 124, 187, 224, 325, 884, 885], "sinc": [0, 45, 46, 52, 54, 65, 73, 75, 87, 91, 93, 104, 107, 108, 109, 129, 152, 168, 174, 177, 179, 184, 195, 196, 198, 200, 205, 223, 225, 227, 240, 251, 255, 256, 257, 268, 271, 276, 280, 282, 283, 289, 290, 297, 299, 300, 302, 303, 326, 332, 333, 343, 346, 349, 357, 361, 362, 363, 370, 375, 382, 385, 387, 388, 389, 391, 392, 395, 399, 400, 401, 405, 406, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 431, 442, 446, 450, 451, 452, 454, 455, 458, 461, 474, 483, 501, 531, 532, 541, 542, 543, 544, 545, 551, 552, 554, 555, 556, 557, 558, 560, 562, 564, 566, 567, 568, 569, 572, 574, 593, 594, 596, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 637, 638, 643, 649, 650, 656, 660, 663, 664, 671, 673, 679, 680, 681, 682, 684, 697, 712, 714, 739, 745, 746, 754, 755, 786, 793, 806, 807, 809, 827, 828, 829, 834, 835, 836, 837, 841, 842, 843, 844, 845, 848, 853, 856, 863, 864, 871, 896, 897, 901, 902, 906, 908, 911, 914, 916, 943, 951, 983, 986, 987, 988, 990, 991, 995, 996, 997, 998, 1000, 1002, 1004, 1008, 1009, 1010, 1018, 1019, 1028, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sever": [0, 45, 50, 53, 54, 65, 67, 70, 73, 75, 93, 94, 95, 99, 111, 125, 145, 158, 161, 163, 166, 174, 177, 179, 184, 185, 192, 195, 200, 207, 212, 223, 227, 242, 243, 246, 247, 248, 254, 268, 275, 280, 285, 300, 302, 316, 320, 332, 357, 361, 362, 374, 381, 382, 384, 387, 389, 392, 399, 401, 412, 414, 415, 418, 420, 421, 422, 424, 452, 454, 469, 492, 504, 513, 514, 543, 560, 561, 564, 565, 568, 569, 570, 575, 593, 594, 596, 615, 650, 651, 657, 693, 694, 695, 696, 697, 698, 801, 802, 803, 806, 807, 817, 834, 835, 841, 842, 843, 844, 845, 865, 866, 873, 890, 914, 915, 916, 917, 929, 983, 986, 991, 994, 995, 997, 1002, 1004, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1051, 1052], "have": [0, 2, 25, 45, 46, 48, 49, 50, 52, 53, 54, 55, 64, 65, 66, 67, 75, 77, 80, 81, 84, 85, 88, 91, 93, 95, 98, 100, 102, 103, 107, 108, 114, 116, 121, 123, 125, 126, 133, 134, 142, 149, 151, 152, 153, 155, 158, 173, 174, 177, 179, 180, 184, 185, 186, 191, 194, 195, 196, 197, 198, 200, 202, 207, 223, 224, 225, 227, 241, 247, 250, 252, 257, 258, 260, 261, 267, 268, 269, 271, 274, 280, 281, 283, 286, 287, 294, 297, 300, 302, 303, 306, 307, 320, 325, 326, 327, 329, 331, 332, 336, 339, 340, 341, 346, 352, 353, 354, 357, 361, 362, 369, 370, 374, 375, 376, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 497, 499, 500, 501, 513, 514, 519, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 704, 709, 710, 717, 720, 725, 730, 735, 740, 746, 760, 761, 762, 763, 786, 789, 790, 796, 799, 801, 802, 803, 806, 807, 808, 809, 814, 817, 821, 825, 827, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 926, 928, 930, 932, 943, 969, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "appear": [0, 49, 84, 86, 145, 195, 198, 275, 277, 278, 306, 307, 315, 317, 321, 339, 353, 361, 362, 363, 382, 385, 387, 392, 401, 416, 419, 493, 494, 560, 572, 573, 584, 615, 632, 633, 635, 702, 705, 707, 717, 721, 723, 786, 793, 804, 821, 841, 842, 843, 844, 845, 908, 911, 945, 990, 996, 1000, 1035, 1043, 1047, 1048], "follow": [0, 25, 45, 48, 60, 66, 67, 71, 75, 83, 92, 93, 95, 101, 105, 108, 109, 126, 128, 137, 142, 145, 155, 160, 172, 184, 190, 194, 195, 196, 197, 198, 202, 204, 207, 211, 212, 221, 223, 224, 238, 241, 251, 257, 258, 260, 272, 280, 287, 289, 290, 297, 320, 326, 327, 329, 330, 332, 333, 334, 346, 357, 361, 362, 363, 365, 369, 370, 374, 375, 381, 382, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 431, 433, 434, 435, 436, 437, 438, 446, 448, 450, 451, 452, 453, 454, 458, 466, 468, 469, 470, 473, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 520, 539, 543, 545, 546, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 636, 638, 639, 651, 657, 663, 664, 675, 676, 685, 697, 699, 704, 710, 714, 718, 723, 792, 822, 843, 848, 849, 850, 852, 854, 856, 857, 858, 865, 869, 870, 871, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 895, 904, 906, 907, 911, 914, 915, 916, 917, 921, 922, 942, 962, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1019, 1028, 1032, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "an": [0, 2, 25, 29, 37, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 65, 66, 67, 72, 73, 74, 75, 77, 78, 79, 81, 82, 84, 86, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 123, 128, 129, 130, 131, 132, 133, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 173, 177, 179, 180, 181, 184, 185, 186, 188, 189, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 206, 207, 211, 218, 223, 224, 225, 227, 228, 230, 231, 237, 239, 240, 241, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 260, 264, 266, 267, 269, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 295, 299, 300, 303, 306, 307, 308, 311, 313, 320, 325, 326, 327, 330, 331, 332, 334, 335, 336, 339, 343, 345, 346, 348, 349, 351, 352, 353, 361, 362, 363, 365, 368, 369, 370, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 435, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 580, 581, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 624, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 714, 716, 717, 723, 725, 726, 731, 733, 734, 738, 739, 741, 746, 747, 749, 750, 752, 754, 755, 757, 760, 762, 763, 767, 768, 770, 771, 772, 773, 774, 777, 779, 780, 781, 782, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 921, 923, 924, 926, 927, 929, 930, 933, 937, 938, 939, 941, 942, 943, 945, 947, 950, 951, 952, 953, 954, 955, 957, 958, 959, 962, 964, 965, 968, 969, 975, 978, 980, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "approxim": [0, 2, 23, 45, 46, 67, 72, 84, 91, 116, 132, 133, 137, 146, 154, 155, 177, 180, 195, 203, 219, 223, 224, 237, 241, 245, 248, 249, 250, 253, 256, 272, 280, 285, 294, 295, 301, 302, 309, 320, 322, 323, 325, 329, 332, 361, 363, 367, 368, 370, 379, 384, 396, 399, 401, 412, 413, 415, 417, 418, 419, 421, 424, 426, 427, 428, 438, 454, 474, 475, 478, 479, 480, 481, 487, 488, 489, 496, 501, 507, 526, 529, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 564, 565, 587, 594, 615, 616, 624, 643, 644, 645, 646, 647, 662, 663, 664, 677, 679, 681, 682, 684, 692, 697, 762, 763, 768, 801, 804, 821, 827, 831, 832, 846, 847, 850, 854, 856, 857, 858, 862, 866, 867, 872, 876, 878, 879, 883, 895, 906, 911, 912, 942, 943, 968, 987, 988, 989, 990, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1006, 1008, 1009, 1010, 1013, 1014, 1015, 1028, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "3": [0, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 114, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 195, 196, 197, 200, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 250, 254, 255, 256, 257, 258, 260, 262, 264, 266, 267, 268, 270, 271, 272, 275, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 341, 342, 343, 345, 346, 348, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 366, 367, 369, 370, 375, 376, 381, 382, 384, 385, 387, 388, 389, 392, 393, 399, 400, 401, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 509, 510, 511, 512, 515, 517, 520, 521, 522, 523, 524, 526, 528, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 712, 714, 715, 718, 721, 722, 726, 727, 728, 729, 730, 732, 733, 734, 735, 737, 738, 739, 740, 741, 745, 747, 748, 749, 750, 752, 754, 755, 756, 757, 758, 760, 761, 772, 773, 779, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 932, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 957, 958, 960, 961, 962, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 983, 984, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 1000, 1001, 1004, 1005, 1007, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1023, 1024, 1026, 1027, 1031, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1047, 1048, 1050, 1052, 1053], "month": [0, 45, 54, 184, 196, 326, 382, 387, 391, 402, 1035], "cycl": [0, 16, 45, 80, 82, 88, 100, 128, 208, 267, 272, 287, 289, 332, 333, 387, 391, 406, 419, 584, 585, 632, 806, 807, 922, 983, 984, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "thrive": [0, 387], "intern": [0, 45, 66, 108, 118, 133, 148, 153, 156, 158, 168, 177, 180, 190, 192, 205, 223, 300, 302, 319, 326, 340, 363, 370, 375, 382, 384, 389, 393, 396, 399, 401, 406, 409, 411, 412, 414, 418, 419, 421, 422, 423, 424, 425, 442, 444, 449, 470, 473, 516, 539, 540, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 598, 599, 615, 616, 643, 645, 648, 651, 657, 673, 677, 681, 683, 701, 713, 735, 738, 762, 763, 787, 832, 846, 847, 862, 863, 864, 866, 867, 871, 885, 887, 901, 902, 904, 906, 907, 908, 911, 914, 915, 916, 917, 962, 990, 991, 992, 994, 997, 1000, 1004, 1006, 1009, 1010, 1015, 1018, 1035, 1038, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ha": [0, 45, 46, 49, 52, 53, 54, 57, 65, 69, 73, 75, 82, 88, 93, 94, 95, 98, 111, 116, 117, 121, 128, 140, 147, 151, 153, 155, 158, 160, 165, 176, 179, 184, 185, 186, 191, 195, 196, 197, 198, 200, 216, 220, 223, 224, 225, 229, 240, 241, 243, 250, 254, 256, 257, 260, 261, 264, 266, 267, 269, 271, 272, 275, 278, 279, 280, 283, 284, 286, 291, 292, 299, 303, 306, 307, 308, 310, 317, 320, 321, 323, 325, 329, 330, 331, 332, 333, 335, 338, 341, 349, 353, 354, 356, 361, 369, 370, 374, 375, 376, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 395, 396, 399, 400, 401, 402, 405, 409, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 439, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 498, 499, 502, 503, 513, 514, 521, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 624, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 700, 716, 718, 725, 745, 767, 778, 782, 783, 784, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 824, 825, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 925, 926, 927, 945, 963, 979, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1019, 1023, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "been": [0, 45, 50, 57, 66, 82, 91, 98, 117, 133, 140, 142, 177, 179, 184, 186, 195, 247, 250, 252, 257, 258, 278, 280, 286, 329, 330, 331, 332, 333, 335, 336, 340, 361, 370, 375, 381, 382, 384, 385, 386, 387, 389, 391, 393, 395, 396, 399, 400, 401, 402, 406, 409, 412, 413, 414, 416, 418, 419, 421, 424, 439, 442, 474, 476, 477, 479, 483, 492, 528, 539, 541, 554, 555, 572, 573, 586, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 638, 639, 663, 664, 671, 672, 673, 678, 680, 681, 682, 683, 725, 782, 783, 784, 797, 803, 806, 807, 809, 817, 825, 830, 831, 855, 903, 906, 984, 986, 987, 989, 990, 991, 994, 995, 997, 1000, 1004, 1006, 1008, 1009, 1014, 1018, 1019, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "lead": [0, 48, 65, 67, 70, 75, 90, 93, 99, 109, 148, 152, 153, 155, 176, 177, 195, 196, 197, 202, 207, 212, 214, 223, 227, 255, 257, 260, 280, 281, 283, 287, 305, 306, 317, 320, 322, 325, 326, 331, 349, 357, 362, 365, 370, 374, 375, 381, 386, 395, 396, 400, 401, 409, 412, 413, 414, 416, 418, 419, 420, 421, 423, 457, 467, 470, 473, 501, 520, 532, 540, 543, 544, 545, 548, 552, 556, 562, 563, 564, 565, 568, 569, 570, 571, 611, 635, 651, 652, 655, 657, 658, 659, 665, 666, 667, 668, 684, 696, 700, 750, 801, 806, 807, 834, 846, 847, 851, 870, 877, 887, 898, 899, 904, 906, 914, 915, 916, 917, 983, 988, 990, 991, 993, 994, 995, 997, 998, 1000, 1002, 1004, 1007, 1008, 1010, 1018, 1019, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052], "The": [0, 2, 16, 25, 27, 30, 31, 33, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 66, 67, 69, 70, 71, 73, 75, 77, 78, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 122, 125, 126, 128, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 196, 197, 198, 200, 202, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 231, 232, 240, 241, 242, 245, 246, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 271, 272, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 346, 347, 349, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 367, 368, 369, 370, 374, 375, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 399, 400, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 436, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 756, 757, 758, 759, 760, 761, 762, 763, 766, 768, 769, 770, 771, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 937, 938, 939, 940, 941, 942, 943, 945, 946, 950, 951, 954, 957, 959, 960, 961, 962, 963, 964, 965, 968, 976, 977, 978, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decis": [0, 2, 40, 45, 57, 65, 67, 70, 73, 79, 94, 96, 98, 132, 141, 144, 145, 146, 147, 153, 161, 162, 165, 166, 170, 177, 181, 183, 187, 195, 205, 206, 215, 232, 233, 236, 250, 251, 253, 258, 261, 283, 286, 297, 308, 311, 315, 320, 321, 322, 325, 337, 342, 345, 346, 347, 348, 349, 350, 351, 355, 358, 359, 361, 374, 383, 384, 387, 401, 413, 414, 421, 442, 474, 505, 509, 524, 541, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 598, 599, 636, 637, 638, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 703, 705, 707, 708, 712, 725, 730, 731, 739, 743, 744, 746, 760, 786, 792, 793, 798, 803, 806, 807, 817, 832, 834, 835, 837, 848, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 988, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1007, 1008, 1009, 1013, 1014, 1015, 1016, 1018, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1051, 1052], "make": [0, 2, 45, 48, 49, 52, 54, 56, 58, 61, 62, 65, 66, 67, 77, 78, 81, 82, 94, 99, 100, 105, 110, 133, 142, 148, 152, 155, 158, 161, 174, 177, 179, 184, 187, 194, 195, 196, 197, 202, 207, 209, 212, 215, 216, 217, 219, 223, 224, 225, 227, 229, 241, 244, 252, 254, 256, 257, 258, 260, 266, 268, 271, 272, 275, 280, 282, 283, 289, 290, 291, 299, 309, 317, 320, 321, 326, 333, 335, 349, 359, 361, 362, 363, 370, 374, 375, 376, 381, 382, 385, 386, 388, 389, 390, 392, 393, 395, 399, 401, 405, 406, 409, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 426, 445, 446, 447, 448, 450, 452, 454, 456, 457, 458, 463, 464, 465, 467, 493, 508, 519, 520, 527, 528, 532, 537, 539, 546, 556, 557, 560, 561, 566, 567, 588, 589, 612, 613, 636, 654, 660, 661, 676, 696, 700, 734, 741, 746, 772, 773, 785, 801, 802, 803, 805, 808, 814, 818, 819, 822, 823, 828, 829, 836, 837, 840, 873, 882, 885, 886, 890, 894, 896, 897, 898, 899, 912, 920, 926, 927, 937, 943, 949, 955, 980, 983, 984, 986, 988, 990, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1019, 1024, 1026, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "process": [0, 2, 19, 37, 45, 46, 57, 60, 66, 69, 70, 73, 83, 84, 85, 86, 88, 95, 104, 107, 109, 111, 115, 117, 125, 129, 130, 132, 142, 151, 153, 155, 160, 161, 168, 169, 170, 194, 202, 205, 225, 227, 233, 235, 236, 256, 257, 258, 260, 266, 267, 272, 280, 282, 283, 292, 297, 315, 320, 323, 331, 335, 339, 343, 353, 355, 362, 363, 365, 374, 375, 376, 382, 386, 387, 389, 391, 393, 396, 399, 400, 401, 409, 414, 415, 416, 418, 419, 420, 421, 422, 423, 427, 453, 454, 480, 501, 509, 528, 539, 540, 541, 542, 543, 566, 567, 568, 593, 594, 596, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 637, 638, 644, 648, 669, 677, 690, 691, 708, 727, 745, 785, 801, 803, 806, 807, 817, 827, 828, 829, 838, 839, 855, 869, 873, 875, 876, 877, 886, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 960, 962, 983, 986, 990, 994, 997, 1004, 1006, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1027, 1028, 1030, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "structur": [0, 2, 44, 50, 54, 55, 56, 58, 61, 62, 74, 78, 79, 81, 82, 84, 90, 91, 92, 93, 94, 100, 104, 118, 138, 159, 178, 192, 243, 244, 247, 252, 257, 272, 275, 286, 305, 325, 330, 333, 337, 349, 353, 364, 365, 366, 374, 382, 384, 387, 389, 392, 399, 401, 402, 405, 412, 414, 416, 417, 418, 419, 421, 422, 423, 424, 446, 447, 450, 451, 455, 456, 457, 458, 459, 462, 467, 468, 477, 501, 508, 509, 513, 516, 518, 519, 526, 535, 540, 546, 549, 568, 615, 616, 617, 621, 622, 623, 694, 701, 714, 718, 832, 854, 859, 886, 898, 899, 902, 914, 915, 916, 917, 920, 942, 943, 965, 968, 991, 993, 994, 997, 999, 1000, 1004, 1007, 1010, 1013, 1014, 1015, 1022, 1027, 1028, 1035, 1036, 1038, 1039, 1041, 1045], "i": [0, 2, 8, 30, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 347, 348, 349, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 370, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 943, 945, 948, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 975, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "laid": [0, 194, 387], "out": [0, 2, 44, 45, 48, 50, 51, 53, 54, 56, 58, 66, 69, 78, 88, 93, 107, 108, 135, 141, 146, 148, 149, 156, 157, 170, 192, 194, 197, 207, 223, 225, 227, 231, 241, 260, 266, 268, 278, 280, 283, 288, 292, 297, 299, 325, 326, 332, 341, 343, 345, 346, 349, 357, 361, 373, 382, 384, 385, 387, 389, 390, 391, 393, 399, 401, 414, 417, 419, 421, 422, 424, 430, 440, 441, 447, 448, 450, 451, 452, 454, 477, 487, 488, 489, 490, 504, 520, 521, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 593, 594, 596, 609, 612, 613, 639, 644, 645, 646, 647, 656, 660, 671, 673, 678, 680, 681, 693, 694, 697, 706, 731, 745, 746, 803, 805, 806, 807, 808, 810, 811, 812, 813, 817, 832, 841, 842, 843, 844, 845, 850, 855, 858, 862, 863, 864, 872, 876, 883, 895, 898, 899, 921, 956, 958, 963, 984, 988, 989, 993, 994, 995, 997, 1002, 1004, 1014, 1015, 1016, 1018, 1021, 1023, 1026, 1028, 1030, 1035, 1037, 1039, 1041, 1043, 1044, 1047, 1048, 1051], "peopl": [0, 2, 47, 107, 195, 259, 283, 361, 362, 375, 376, 382, 384, 386, 387, 391, 402, 420, 498, 499, 646, 843, 1013, 1024], "ar": [0, 2, 16, 25, 30, 31, 32, 37, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 71, 73, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 102, 104, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 124, 126, 128, 130, 133, 135, 138, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 173, 174, 176, 177, 179, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 211, 212, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 232, 234, 241, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 264, 267, 268, 269, 271, 274, 275, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 299, 300, 302, 305, 306, 310, 313, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 338, 340, 341, 342, 343, 347, 349, 351, 353, 357, 358, 361, 362, 363, 365, 369, 370, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 400, 401, 402, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 435, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 513, 514, 515, 517, 520, 521, 522, 523, 524, 525, 528, 529, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 714, 716, 717, 718, 720, 721, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 752, 754, 755, 757, 758, 760, 761, 765, 766, 767, 769, 771, 772, 773, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 930, 931, 932, 935, 937, 942, 943, 944, 947, 948, 950, 951, 954, 957, 958, 960, 962, 965, 968, 969, 973, 974, 975, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "current": [0, 2, 7, 49, 84, 142, 184, 195, 241, 320, 329, 375, 376, 382, 385, 387, 388, 389, 392, 396, 399, 401, 402, 411, 412, 414, 418, 421, 422, 423, 424, 445, 451, 455, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 537, 540, 546, 558, 559, 562, 563, 564, 565, 567, 569, 570, 571, 581, 596, 598, 615, 622, 631, 632, 651, 663, 672, 676, 680, 681, 682, 683, 792, 801, 802, 851, 855, 863, 864, 882, 894, 904, 914, 915, 916, 917, 920, 961, 969, 983, 988, 990, 994, 997, 998, 1004, 1014, 1017, 1026, 1043, 1047, 1049, 1050, 1051], "": [0, 2, 45, 46, 47, 48, 49, 51, 52, 53, 54, 57, 58, 60, 61, 64, 67, 73, 76, 77, 78, 80, 81, 82, 84, 85, 86, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 107, 108, 114, 115, 118, 120, 124, 125, 126, 128, 129, 130, 133, 136, 137, 138, 140, 142, 144, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 170, 172, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 198, 200, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 221, 223, 225, 227, 229, 230, 232, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 254, 256, 257, 258, 260, 266, 268, 269, 271, 275, 280, 281, 282, 283, 284, 287, 291, 293, 294, 300, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 323, 326, 329, 331, 332, 333, 334, 335, 336, 339, 340, 346, 347, 348, 349, 350, 353, 354, 355, 356, 359, 361, 362, 363, 366, 367, 368, 369, 370, 374, 375, 376, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 393, 394, 395, 396, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 426, 428, 435, 439, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 465, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 494, 496, 501, 503, 505, 509, 515, 516, 524, 530, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 698, 705, 706, 707, 713, 716, 721, 725, 739, 745, 762, 763, 783, 784, 801, 802, 803, 805, 806, 807, 812, 817, 821, 822, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 924, 926, 927, 930, 943, 945, 951, 952, 954, 978, 982, 983, 985, 986, 988, 990, 991, 992, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1018, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mainten": [0, 387, 395, 399, 405, 408, 990, 1014, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j\u00e9r\u00e9mie": [0, 42, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "du": [0, 42, 43, 1035, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "boisberrang": [0, 42, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jori": [0, 42, 1042, 1043, 1044, 1047, 1048], "van": [0, 42, 381, 416, 474, 479, 539, 632, 697, 701, 984, 991, 994, 1000, 1018, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "den": [0, 42, 1036, 1037, 1042, 1043, 1044, 1047, 1048], "bossch": [0, 42, 1042, 1043, 1044, 1048], "lo\u00efc": [0, 42, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "est\u00e8v": [0, 42, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "thoma": [0, 42, 135, 250, 320, 375, 377, 402, 902, 990, 1004, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j": [0, 42, 52, 58, 75, 76, 78, 81, 99, 107, 115, 116, 117, 142, 145, 146, 157, 180, 191, 196, 235, 246, 259, 266, 279, 280, 285, 291, 304, 310, 313, 324, 334, 369, 375, 381, 382, 384, 391, 393, 399, 412, 413, 414, 416, 418, 419, 421, 422, 424, 425, 442, 445, 449, 451, 458, 459, 474, 479, 503, 518, 521, 522, 523, 525, 533, 536, 539, 541, 542, 543, 545, 546, 552, 558, 564, 565, 598, 599, 637, 638, 642, 649, 650, 653, 654, 671, 672, 674, 685, 693, 694, 695, 697, 698, 699, 701, 710, 713, 715, 719, 721, 723, 726, 727, 728, 730, 759, 760, 762, 763, 778, 782, 792, 793, 796, 797, 835, 836, 843, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 877, 886, 887, 914, 915, 983, 984, 988, 990, 991, 992, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1028, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "fan": [0, 42, 375, 402, 1009, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "olivi": [0, 42, 56, 58, 75, 86, 99, 212, 223, 241, 244, 281, 283, 361, 362, 363, 402, 902, 1007, 1012, 1014, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "grisel": [0, 42, 56, 58, 75, 86, 99, 212, 223, 241, 244, 281, 283, 361, 362, 363, 402, 1012, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "yaroslav": [0, 42, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051, 1052], "halchenko": [0, 42, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1051], "tim": [0, 42, 147, 162, 1035, 1040, 1041, 1044, 1045, 1046, 1048, 1050, 1051, 1052], "head": [0, 42, 54, 66, 108, 147, 162, 184, 195, 211, 212, 241, 264, 271, 326, 329, 334, 387, 395, 419, 1018, 1040, 1041, 1050, 1051, 1052], "nicola": [0, 42, 177, 324, 663, 990, 1007, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "hug": [0, 42, 177, 324, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "adrin": [0, 42, 103, 358, 402, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "jalali": [0, 42, 103, 358, 402, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "julien": [0, 42, 663, 990, 1018, 1035, 1038, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052], "jerphanion": [0, 42, 1047, 1048, 1049, 1050, 1051, 1052], "guillaum": [0, 42, 46, 48, 109, 112, 133, 163, 179, 184, 185, 186, 188, 211, 212, 225, 244, 320, 1018, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lemaitr": [0, 42, 46, 48, 109, 112, 133, 163, 179, 184, 185, 186, 188, 211, 212, 225, 244, 320, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "christian": [0, 42, 60, 223, 224, 225, 241, 361, 362, 382, 1018, 1028, 1035, 1036, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lorentzen": [0, 42, 223, 224, 225, 241, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jan": [0, 42, 64, 65, 66, 67, 179, 180, 182, 183, 184, 185, 186, 188, 224, 256, 297, 885, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1051], "hendrik": [0, 42, 64, 65, 66, 67, 179, 180, 182, 183, 184, 185, 186, 188, 256, 1035, 1038, 1039, 1040, 1041], "metzen": [0, 42, 64, 65, 66, 67, 179, 180, 182, 183, 184, 185, 186, 188, 256, 1035, 1038, 1039, 1040, 1041], "andrea": [0, 42, 70, 111, 133, 146, 214, 255, 321, 322, 340, 357, 358, 402, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "mueller": [0, 42, 111, 133, 146, 214, 255, 340, 357, 358, 1018, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "vlad": [0, 42, 128, 258, 318, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "nicula": [0, 42, 128, 258, 318, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "joel": [0, 42, 109, 402, 422, 540, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "nothman": [0, 42, 109, 402, 422, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "hanmin": [0, 42, 321, 1042, 1043, 1044, 1045, 1046], "qin": [0, 42, 321, 384, 422, 1042, 1043, 1044, 1045, 1046], "omar": [0, 42, 1045, 1050, 1051, 1052, 1053], "salman": [0, 42, 1050, 1051, 1052, 1053], "bertrand": [0, 42, 1035, 1041, 1042, 1047, 1048], "thirion": [0, 42, 1035, 1041, 1042, 1048], "tom": [0, 42, 215, 231, 300, 302, 322, 323, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "dupr\u00e9": [0, 42, 322, 323, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "la": [0, 42, 215, 231, 300, 302, 322, 323, 326, 384, 1018, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tour": [0, 42, 215, 231, 300, 302, 322, 323, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "nell": [0, 42, 77, 246, 253, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047], "yao": [0, 42, 384, 398, 1041, 1042, 1043, 1044, 1051, 1052], "xiao": [0, 42, 398, 1043, 1045, 1048, 1049, 1050, 1051, 1052], "roman": [0, 42, 223, 241, 632, 920, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "yurchak": [0, 42, 223, 241, 422, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "meekail": [0, 42, 1049, 1050, 1051, 1052], "zain": [0, 42, 1049, 1050, 1051, 1052], "pleas": [0, 2, 53, 58, 66, 108, 109, 147, 149, 150, 156, 159, 160, 163, 166, 174, 184, 195, 196, 197, 204, 227, 251, 252, 253, 255, 257, 260, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 300, 310, 318, 326, 329, 330, 331, 332, 333, 334, 335, 336, 340, 353, 369, 375, 381, 382, 385, 387, 388, 389, 391, 395, 399, 400, 401, 405, 406, 409, 411, 414, 421, 422, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 608, 615, 616, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 895, 898, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 994, 998, 1004, 1008, 1009, 1013, 1014, 1017, 1019, 1026, 1028, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "do": [0, 30, 45, 51, 54, 65, 67, 80, 93, 99, 105, 111, 124, 132, 134, 137, 146, 149, 151, 155, 156, 158, 163, 174, 184, 190, 195, 196, 197, 220, 223, 227, 241, 243, 245, 257, 258, 260, 272, 275, 278, 281, 283, 299, 300, 302, 306, 332, 336, 343, 346, 349, 353, 354, 357, 361, 362, 363, 369, 370, 374, 375, 376, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 401, 402, 413, 414, 415, 416, 417, 418, 421, 422, 423, 433, 455, 466, 508, 541, 543, 547, 549, 557, 560, 586, 587, 593, 594, 596, 637, 638, 650, 651, 657, 660, 661, 664, 671, 673, 681, 741, 767, 782, 786, 820, 823, 838, 839, 843, 870, 871, 873, 880, 884, 886, 891, 892, 894, 895, 896, 897, 914, 915, 916, 917, 925, 968, 983, 986, 988, 990, 991, 994, 995, 997, 998, 1002, 1004, 1009, 1010, 1013, 1014, 1017, 1018, 1019, 1026, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "email": [0, 361, 387, 399, 422, 841, 996, 1018], "directli": [0, 47, 60, 67, 83, 84, 94, 108, 147, 152, 177, 187, 207, 211, 223, 229, 241, 251, 285, 318, 320, 333, 336, 363, 370, 374, 385, 387, 388, 389, 391, 393, 400, 401, 402, 411, 412, 413, 414, 415, 416, 417, 418, 422, 424, 447, 457, 467, 469, 474, 479, 532, 572, 573, 574, 575, 602, 616, 625, 637, 648, 651, 652, 657, 658, 665, 666, 667, 668, 669, 682, 686, 689, 695, 778, 782, 785, 796, 797, 803, 806, 807, 817, 849, 851, 865, 866, 867, 873, 883, 885, 888, 895, 962, 983, 990, 992, 997, 999, 1001, 1004, 1009, 1010, 1014, 1020, 1023, 1024, 1035, 1043, 1044, 1046, 1047, 1048, 1051, 1052], "ask": [0, 190, 191, 280, 386, 387, 391, 392, 395, 401, 402, 423, 848, 849, 850, 852, 854, 856, 857, 858, 1017, 1051], "assist": [0, 387, 399, 1004, 1017, 1018], "report": [0, 2, 45, 49, 54, 71, 107, 112, 174, 187, 211, 278, 288, 297, 329, 338, 370, 382, 386, 388, 389, 390, 393, 395, 399, 401, 405, 409, 414, 418, 616, 654, 663, 669, 690, 691, 705, 718, 733, 734, 742, 787, 788, 791, 835, 844, 863, 864, 901, 919, 937, 990, 997, 1002, 1013, 1014, 1017, 1036, 1039, 1042, 1043, 1045, 1046, 1048, 1050, 1051], "issu": [0, 2, 45, 65, 115, 121, 223, 241, 285, 327, 375, 381, 385, 390, 391, 392, 395, 396, 399, 401, 402, 404, 405, 406, 409, 411, 414, 416, 417, 422, 454, 457, 467, 478, 487, 488, 489, 539, 544, 548, 578, 593, 594, 596, 616, 632, 696, 700, 773, 877, 882, 894, 933, 983, 984, 991, 1002, 1004, 1009, 1013, 1014, 1017, 1027, 1028, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1052], "instead": [0, 45, 46, 47, 54, 61, 86, 91, 93, 94, 95, 108, 133, 145, 150, 158, 160, 174, 177, 179, 184, 223, 225, 238, 241, 247, 260, 272, 276, 277, 281, 282, 299, 305, 320, 329, 330, 331, 332, 333, 349, 351, 353, 361, 363, 369, 370, 374, 375, 381, 382, 385, 386, 387, 388, 389, 391, 392, 395, 396, 399, 400, 401, 406, 409, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 425, 437, 442, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 461, 464, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 514, 515, 538, 539, 540, 542, 543, 544, 545, 546, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 599, 612, 613, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 635, 637, 640, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 697, 699, 712, 714, 746, 750, 754, 755, 778, 782, 783, 784, 786, 787, 801, 802, 803, 804, 805, 807, 809, 810, 812, 815, 817, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 867, 868, 869, 871, 872, 873, 878, 879, 884, 885, 886, 896, 897, 900, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 919, 920, 932, 938, 943, 951, 962, 969, 983, 984, 986, 990, 991, 993, 994, 995, 998, 999, 1004, 1008, 1009, 1010, 1013, 1024, 1026, 1028, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 48, 54, 61, 64, 65, 67, 75, 82, 87, 88, 91, 93, 95, 96, 100, 102, 103, 105, 106, 116, 121, 123, 124, 128, 133, 134, 138, 142, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 158, 160, 163, 168, 173, 174, 175, 177, 179, 184, 185, 186, 190, 192, 195, 196, 198, 200, 202, 203, 204, 207, 214, 224, 225, 226, 227, 229, 240, 241, 243, 245, 252, 254, 257, 260, 261, 262, 264, 267, 268, 269, 274, 275, 277, 279, 280, 281, 282, 283, 285, 287, 289, 290, 291, 294, 295, 297, 300, 306, 307, 309, 313, 320, 326, 327, 329, 330, 331, 332, 333, 334, 335, 340, 349, 353, 357, 361, 362, 363, 365, 366, 367, 368, 370, 374, 375, 376, 379, 380, 381, 382, 384, 385, 386, 387, 389, 391, 393, 394, 395, 399, 400, 401, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 438, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 493, 496, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 614, 615, 616, 619, 624, 627, 628, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 706, 711, 713, 716, 718, 747, 767, 778, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 942, 943, 963, 965, 968, 978, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1021, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "what": [0, 2, 45, 50, 53, 54, 78, 83, 90, 91, 121, 129, 133, 151, 194, 195, 212, 229, 231, 239, 252, 257, 264, 317, 361, 363, 365, 370, 375, 382, 385, 387, 388, 389, 391, 393, 395, 400, 401, 402, 404, 414, 420, 421, 422, 508, 541, 593, 594, 596, 651, 657, 701, 891, 892, 894, 895, 896, 897, 914, 915, 916, 917, 993, 994, 995, 997, 1010, 1014, 1019, 1035, 1042], "best": [0, 45, 47, 49, 53, 54, 55, 60, 64, 66, 67, 78, 84, 92, 93, 99, 107, 108, 109, 110, 114, 120, 128, 132, 135, 136, 137, 145, 148, 152, 154, 155, 156, 158, 163, 166, 177, 179, 180, 185, 190, 195, 202, 207, 211, 212, 219, 237, 238, 239, 243, 246, 250, 255, 256, 260, 267, 268, 272, 274, 278, 279, 280, 281, 284, 287, 288, 291, 292, 294, 299, 304, 309, 321, 326, 331, 332, 349, 352, 353, 361, 362, 363, 368, 374, 375, 381, 384, 386, 387, 390, 393, 400, 401, 405, 406, 412, 413, 414, 418, 419, 421, 422, 423, 424, 437, 448, 451, 452, 454, 456, 457, 458, 464, 467, 470, 477, 487, 488, 489, 543, 550, 551, 557, 559, 561, 562, 563, 564, 565, 567, 569, 570, 571, 573, 575, 598, 599, 602, 607, 615, 616, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 693, 694, 695, 698, 699, 708, 713, 724, 725, 726, 727, 728, 732, 733, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 787, 788, 789, 791, 794, 795, 796, 797, 798, 800, 801, 802, 803, 806, 807, 817, 829, 831, 834, 839, 840, 849, 857, 863, 864, 907, 909, 912, 914, 915, 916, 917, 983, 988, 989, 990, 991, 994, 997, 998, 1000, 1008, 1010, 1013, 1014, 1018, 1019, 1024, 1028, 1035, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "wai": [0, 2, 37, 45, 58, 67, 88, 98, 108, 111, 147, 154, 159, 161, 177, 186, 195, 197, 198, 224, 227, 228, 238, 241, 252, 253, 256, 257, 260, 261, 275, 280, 287, 289, 320, 321, 332, 334, 335, 370, 374, 375, 376, 381, 383, 386, 389, 390, 395, 396, 401, 402, 405, 406, 409, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 429, 448, 449, 456, 457, 458, 464, 465, 467, 468, 474, 501, 560, 561, 568, 577, 594, 604, 605, 616, 637, 671, 672, 681, 682, 683, 704, 709, 711, 722, 740, 741, 758, 759, 761, 767, 778, 782, 792, 799, 827, 835, 852, 873, 879, 884, 890, 916, 917, 965, 968, 983, 984, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1013, 1014, 1017, 1018, 1019, 1027, 1028, 1035, 1037, 1043, 1048, 1049], "question": [0, 168, 194, 280, 357, 386, 387, 392, 395, 418, 421, 835, 908, 911, 990, 993, 994, 1000, 1018], "faq": [0, 395, 418, 697, 991, 1004], "how": [0, 45, 46, 48, 49, 50, 51, 54, 61, 62, 65, 66, 67, 71, 72, 75, 88, 89, 90, 91, 95, 98, 106, 107, 108, 111, 114, 116, 121, 137, 142, 143, 146, 150, 151, 152, 153, 155, 156, 158, 161, 163, 174, 184, 186, 192, 195, 196, 197, 198, 200, 204, 212, 213, 219, 224, 225, 226, 227, 230, 231, 237, 241, 247, 248, 252, 255, 257, 259, 260, 261, 263, 272, 275, 276, 278, 280, 281, 282, 287, 289, 290, 292, 293, 294, 299, 300, 302, 303, 304, 306, 307, 317, 325, 327, 330, 331, 332, 335, 336, 346, 347, 349, 352, 353, 357, 361, 362, 365, 369, 374, 375, 376, 382, 385, 386, 388, 389, 390, 392, 395, 400, 401, 402, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 428, 438, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 509, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 627, 628, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 709, 725, 761, 796, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 978, 983, 984, 988, 989, 990, 991, 993, 994, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1010, 1012, 1014, 1018, 1019, 1021, 1023, 1028, 1030, 1035, 1037, 1040, 1046, 1049, 1050, 1051], "you": [0, 30, 56, 57, 61, 64, 108, 124, 150, 151, 154, 156, 174, 177, 191, 196, 211, 224, 225, 227, 252, 257, 264, 269, 275, 280, 281, 287, 295, 306, 329, 330, 333, 335, 336, 339, 342, 361, 370, 374, 375, 376, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 395, 396, 400, 401, 405, 406, 409, 411, 413, 414, 415, 416, 418, 421, 422, 423, 425, 426, 431, 442, 448, 449, 451, 452, 454, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 505, 508, 509, 514, 515, 537, 538, 539, 541, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 587, 593, 594, 595, 596, 599, 612, 613, 615, 616, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 704, 705, 789, 802, 804, 805, 806, 807, 808, 810, 812, 818, 819, 821, 822, 823, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 856, 857, 863, 864, 865, 866, 869, 870, 871, 872, 873, 878, 879, 880, 885, 886, 891, 892, 894, 895, 896, 897, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 943, 960, 962, 983, 984, 989, 990, 994, 995, 998, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1019, 1020, 1021, 1023, 1026, 1028, 1035, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "can": [0, 11, 19, 25, 37, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 60, 61, 64, 65, 66, 67, 70, 71, 72, 75, 78, 80, 81, 84, 86, 87, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 124, 129, 131, 132, 133, 135, 137, 138, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 172, 173, 174, 176, 177, 179, 184, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 208, 211, 212, 214, 216, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 231, 239, 240, 241, 243, 244, 245, 250, 251, 252, 253, 254, 256, 257, 260, 261, 264, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 289, 291, 292, 294, 295, 297, 299, 300, 302, 304, 305, 306, 307, 309, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 346, 347, 349, 352, 353, 357, 361, 362, 363, 367, 368, 369, 370, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 395, 396, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 437, 439, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 477, 487, 488, 489, 492, 501, 504, 508, 513, 514, 517, 526, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 639, 640, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 694, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 709, 712, 714, 716, 717, 723, 725, 726, 727, 728, 730, 731, 733, 734, 736, 737, 741, 742, 743, 744, 746, 747, 750, 756, 759, 760, 761, 762, 763, 767, 783, 784, 786, 787, 788, 789, 791, 792, 793, 798, 799, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 863, 864, 865, 866, 869, 870, 871, 873, 874, 875, 879, 880, 881, 884, 885, 886, 891, 898, 899, 904, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 918, 919, 922, 924, 926, 930, 932, 937, 940, 942, 943, 949, 951, 952, 954, 957, 960, 962, 964, 965, 968, 975, 978, 979, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "contribut": [0, 55, 61, 156, 184, 207, 227, 289, 325, 384, 385, 389, 390, 391, 395, 401, 402, 405, 419, 420, 421, 452, 454, 558, 559, 564, 565, 730, 733, 760, 988, 994, 997, 1002, 1009, 1013, 1014, 1017, 1018, 1026, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "help": [0, 41, 45, 50, 52, 57, 93, 107, 111, 133, 138, 196, 207, 241, 243, 281, 283, 297, 318, 346, 349, 362, 363, 370, 374, 375, 385, 388, 389, 390, 391, 392, 393, 395, 396, 401, 402, 404, 409, 414, 415, 418, 422, 424, 438, 541, 582, 632, 655, 659, 670, 690, 691, 697, 719, 842, 914, 915, 916, 917, 984, 988, 989, 991, 993, 994, 996, 998, 1004, 1005, 1010, 1012, 1013, 1014, 1017, 1018, 1028, 1041, 1042, 1043, 1046, 1049], "arturo": [0, 75, 95, 148, 158, 202, 207, 260, 281, 283, 325, 361, 362, 363, 398, 1049, 1050, 1051, 1052], "amor": [0, 75, 95, 148, 158, 202, 207, 260, 281, 283, 325, 361, 362, 363, 398, 1049, 1050, 1051, 1052], "luci": [0, 286, 377, 398, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liu": [0, 286, 377, 398, 568, 730, 760, 994, 1000, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "activ": [0, 192, 231, 266, 272, 281, 337, 338, 363, 381, 382, 385, 387, 388, 393, 395, 399, 401, 402, 405, 406, 415, 501, 507, 531, 637, 640, 642, 655, 656, 658, 659, 660, 668, 669, 670, 687, 688, 689, 690, 691, 718, 723, 801, 862, 863, 864, 902, 960, 990, 991, 992, 993, 997, 998, 999, 1007, 1015, 1017, 1046], "who": [0, 107, 375, 382, 387, 394, 402, 405, 848, 849, 850, 852, 854, 856, 857, 858, 1013, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "also": [0, 2, 25, 30, 45, 48, 52, 54, 58, 60, 61, 64, 65, 66, 67, 71, 84, 86, 91, 95, 96, 98, 102, 107, 108, 114, 116, 120, 121, 128, 135, 137, 142, 145, 148, 150, 152, 153, 154, 155, 156, 158, 161, 163, 173, 174, 175, 177, 179, 181, 184, 191, 192, 195, 196, 197, 198, 200, 203, 204, 206, 212, 215, 216, 219, 223, 224, 225, 227, 228, 232, 240, 241, 243, 253, 255, 257, 260, 261, 272, 278, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 297, 299, 300, 308, 311, 313, 315, 320, 321, 322, 324, 325, 329, 330, 331, 332, 336, 343, 345, 346, 347, 349, 351, 353, 361, 362, 363, 365, 366, 369, 370, 374, 375, 376, 380, 381, 382, 384, 385, 386, 387, 389, 390, 393, 395, 396, 399, 400, 401, 402, 405, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 442, 443, 444, 446, 447, 450, 451, 452, 453, 455, 457, 467, 468, 470, 472, 487, 489, 497, 501, 503, 508, 513, 537, 538, 540, 541, 546, 551, 554, 556, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 615, 616, 627, 637, 638, 640, 648, 649, 650, 651, 652, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 677, 681, 683, 686, 689, 692, 696, 699, 700, 704, 715, 718, 727, 733, 734, 742, 747, 767, 783, 784, 787, 788, 791, 801, 802, 803, 806, 807, 817, 820, 823, 828, 829, 830, 831, 832, 833, 835, 845, 848, 849, 850, 852, 853, 854, 856, 857, 858, 862, 863, 864, 866, 868, 869, 874, 875, 879, 883, 886, 891, 895, 908, 911, 914, 915, 916, 917, 926, 945, 951, 958, 962, 983, 984, 986, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1013, 1014, 1018, 1019, 1021, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "triag": [0, 387, 390, 402], "pr": [0, 165, 375, 387, 390, 395, 422, 745, 994, 1017, 1045, 1047], "gener": [0, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 103, 107, 108, 109, 110, 111, 112, 115, 117, 120, 121, 122, 123, 124, 128, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 174, 175, 177, 180, 181, 182, 183, 184, 187, 190, 191, 194, 195, 196, 197, 198, 200, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 374, 375, 379, 380, 382, 384, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 409, 412, 413, 414, 418, 420, 422, 423, 424, 426, 430, 435, 437, 442, 445, 448, 451, 452, 454, 457, 459, 463, 464, 465, 467, 469, 470, 472, 474, 477, 479, 487, 488, 489, 493, 496, 497, 500, 501, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 543, 545, 546, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 619, 620, 623, 624, 625, 627, 628, 632, 633, 634, 635, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 690, 691, 694, 695, 696, 697, 698, 699, 700, 706, 709, 711, 722, 726, 727, 728, 741, 747, 761, 782, 785, 789, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 837, 838, 839, 840, 846, 847, 849, 851, 852, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 892, 894, 895, 896, 897, 898, 899, 906, 907, 908, 909, 911, 912, 915, 917, 918, 919, 920, 937, 938, 942, 943, 946, 947, 959, 963, 965, 968, 983, 984, 986, 988, 989, 991, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1013, 1015, 1016, 1017, 1018, 1019, 1022, 1026, 1027, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "juan": [0, 377, 1035, 1046, 1047, 1048, 1049, 1050], "carlo": [0, 255, 377, 421, 424, 616, 646, 647, 986, 999, 1035, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "alfaro": [0, 377, 1046, 1047, 1048, 1049, 1050], "jim\u00e9nez": [0, 377, 1043, 1046, 1047, 1048, 1049, 1050], "maxwel": [0, 377, 1045, 1048, 1049, 1050, 1051], "martin": [0, 377, 726, 727, 728, 990, 994, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "loyola": [0, 377, 1048, 1049], "sylvain": [0, 377, 1039, 1044, 1045, 1046, 1047, 1048, 1049], "mari\u00e9": [0, 377, 1044, 1045, 1046, 1047, 1048, 1049], "norbert": [0, 377, 1037, 1047, 1048, 1049], "prein": [0, 377, 1047, 1048, 1049], "reshama": [0, 372, 377, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "shaikh": [0, 372, 377, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "albert": [0, 250, 377, 1042, 1043, 1044, 1047, 1048], "maren": [0, 377, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "westermann": [0, 377, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "around": [0, 45, 66, 75, 90, 120, 142, 145, 155, 185, 196, 200, 257, 260, 283, 318, 338, 340, 341, 349, 352, 353, 361, 362, 363, 370, 382, 384, 387, 393, 399, 414, 418, 419, 422, 476, 477, 520, 549, 625, 645, 654, 673, 709, 746, 801, 809, 825, 852, 854, 856, 857, 858, 886, 990, 991, 993, 994, 1000, 1004, 1008, 1013, 1014, 1017, 1018, 1021, 1026, 1028, 1039, 1040], "lauren": [0, 371, 697, 701, 991, 1047, 1050], "burk": [0, 371, 1050], "fran\u00e7oi": [0, 371, 1038], "goupil": [0, 371], "longer": [0, 45, 73, 91, 145, 196, 208, 317, 332, 387, 389, 414, 418, 421, 422, 454, 541, 568, 989, 993, 994, 996, 999, 1009, 1017, 1018, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mathieu": [0, 43, 64, 86, 133, 214, 224, 244, 258, 281, 361, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "blondel": [0, 43, 64, 86, 133, 214, 224, 244, 258, 281, 361, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1048], "lar": [0, 2, 43, 56, 131, 177, 192, 195, 201, 208, 209, 212, 216, 217, 228, 293, 361, 362, 363, 384, 476, 477, 483, 506, 536, 542, 544, 547, 548, 550, 551, 553, 656, 657, 658, 659, 660, 661, 668, 669, 670, 683, 687, 688, 689, 690, 691, 1015, 1016, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048], "buitinck": [0, 43, 56, 361, 362, 363, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "noel": [0, 43, 142, 143, 144, 1035, 1036, 1037, 1038, 1039, 1047], "daw": [0, 43, 142, 143, 144, 1035, 1036, 1037, 1038, 1039], "dubourg": [0, 43, 182, 186, 1018, 1035, 1039], "edouard": [0, 43, 1035], "duchesnai": [0, 43, 1035], "alexand": [0, 43, 414, 419, 540, 872, 1037, 1038, 1039, 1041, 1042, 1043, 1047, 1048, 1049, 1052], "fabisch": [0, 43, 1037, 1038, 1039, 1041], "virgil": [0, 43, 50, 1035, 1036, 1038], "fritsch": [0, 43, 50, 1035, 1036, 1038], "satrajit": [0, 43, 1035, 1036], "ghosh": [0, 43, 414, 1035, 1036, 1052], "angel": [0, 43], "soler": [0, 43], "gollonet": [0, 43], "chri": [0, 43, 1035, 1038, 1043, 1044, 1045, 1046, 1049], "gorgolewski": [0, 43, 1035, 1038], "jaqu": [0, 43, 70, 83, 89, 91, 110, 123, 124, 206, 219, 220, 221, 245, 354, 357, 1035, 1036, 1037, 1038], "grobler": [0, 43, 70, 83, 89, 91, 110, 123, 124, 206, 219, 220, 221, 245, 354, 357, 1035, 1036, 1037, 1038], "brian": [0, 43, 84, 713, 994, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049], "holt": [0, 43, 1035], "arnaud": [0, 43, 1036, 1037, 1038, 1039, 1040, 1041], "joli": [0, 43, 1036, 1037, 1038, 1039, 1040, 1041], "thoui": [0, 43, 1035], "rai": [0, 43, 962, 994, 1035, 1045, 1047, 1048], "jone": [0, 43, 382, 1035], "kyle": [0, 43, 132, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047], "kastner": [0, 43, 132, 1037, 1038, 1039, 1046, 1047], "manoj": [0, 43, 80, 177, 205, 1038, 1039, 1040, 1041, 1042], "kumar": [0, 43, 80, 177, 205, 382, 414, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "robert": [0, 43, 86, 109, 177, 211, 297, 384, 419, 533, 540, 633, 661, 726, 727, 728, 739, 872, 984, 990, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1050], "layton": [0, 43, 86, 1035, 1036, 1037, 1038, 1040], "wei": [0, 43, 1008, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1048, 1051], "li": [0, 43, 341, 382, 644, 647, 701, 730, 760, 899, 983, 986, 994, 997, 1004, 1006, 1009, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "paolo": [0, 43, 1035, 1039, 1045, 1053], "losi": [0, 43, 1035], "gill": [0, 43, 145, 146, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "loupp": [0, 43, 145, 146, 421, 560, 561, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "jarrod": [0, 43, 1044, 1051, 1052], "millman": [0, 43, 1044, 1051, 1052], "passo": [0, 43, 1035, 1036], "peter": [0, 43, 52, 57, 101, 154, 156, 157, 281, 361, 362, 414, 453, 455, 462, 654, 796, 797, 990, 994, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052], "prettenhof": [0, 43, 52, 57, 154, 156, 157, 281, 361, 362, 1035, 1036, 1037, 1038, 1039, 1040], "venkat": [0, 43], "raghav": [0, 43, 284, 320, 1039, 1040, 1041, 1042, 1043, 1047], "rajagopalan": [0, 43, 1043, 1047], "jacob": [0, 43, 1040, 1041, 1042], "schreiber": [0, 43, 1040, 1041, 1042], "\u675c\u4e16\u6a4b": [0, 43], "shiqiao": [0, 43, 1035, 1036], "jake": [0, 43, 52, 186, 224, 243, 269, 305, 313, 1012, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049], "vanderpla": [0, 43, 52, 186, 224, 243, 269, 305, 313, 1012, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "ward": [0, 2, 43, 55, 62, 74, 77, 78, 79, 82, 84, 90, 91, 92, 94, 100, 192, 198, 247, 422, 446, 450, 468, 535, 859, 1015, 1035, 1038, 1040], "farlei": [0, 43, 1035], "ron": [0, 43, 268, 1035], "weiss": [0, 43, 268, 414, 696, 1035], "respons": [0, 25, 177, 196, 219, 223, 226, 257, 290, 361, 384, 393, 401, 414, 415, 421, 451, 469, 487, 488, 489, 636, 637, 638, 679, 680, 703, 705, 707, 746, 801, 802, 995, 1001, 1019, 1052], "chiara": [0, 378, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "marmo": [0, 378, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "If": [0, 45, 52, 54, 57, 67, 71, 80, 87, 93, 108, 118, 131, 140, 150, 155, 158, 163, 188, 191, 195, 204, 223, 238, 240, 241, 257, 260, 280, 287, 295, 305, 313, 320, 325, 326, 349, 353, 357, 358, 361, 362, 363, 369, 370, 374, 375, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 401, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 435, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 519, 520, 524, 527, 528, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 716, 717, 718, 719, 721, 722, 723, 730, 731, 732, 733, 734, 735, 736, 740, 742, 745, 746, 749, 750, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 815, 817, 820, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 935, 941, 943, 945, 947, 951, 953, 957, 960, 962, 963, 965, 968, 969, 975, 978, 979, 980, 981, 983, 984, 986, 988, 989, 990, 991, 992, 994, 997, 998, 1000, 1001, 1004, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1026, 1027, 1028, 1035, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 44, 45, 48, 49, 50, 52, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 69, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 124, 125, 126, 127, 130, 132, 133, 135, 136, 137, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 165, 166, 168, 169, 170, 173, 174, 176, 178, 179, 180, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 216, 217, 219, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 235, 238, 240, 241, 243, 244, 245, 246, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 338, 339, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 360, 363, 365, 367, 368, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 394, 396, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 420, 421, 424, 425, 426, 427, 428, 430, 432, 433, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 498, 499, 501, 503, 504, 506, 508, 511, 513, 514, 516, 519, 520, 521, 524, 525, 527, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 741, 742, 743, 745, 746, 747, 749, 750, 752, 754, 755, 757, 759, 760, 761, 762, 763, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 927, 929, 932, 933, 938, 940, 942, 943, 947, 950, 951, 952, 954, 957, 961, 962, 963, 965, 966, 968, 970, 971, 972, 978, 983, 984, 986, 987, 989, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scientif": [0, 71, 168, 169, 170, 255, 381, 385, 399, 405, 414, 457, 467, 506, 1018, 1020], "we": [0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64, 65, 66, 67, 69, 71, 73, 75, 78, 79, 80, 82, 85, 87, 88, 91, 93, 94, 95, 96, 100, 102, 103, 104, 107, 108, 109, 110, 112, 114, 116, 117, 118, 121, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 138, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 163, 165, 166, 168, 172, 173, 174, 176, 177, 179, 181, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 209, 211, 212, 214, 216, 218, 220, 223, 224, 225, 226, 227, 229, 231, 232, 235, 236, 237, 238, 239, 241, 243, 244, 247, 248, 250, 251, 253, 254, 255, 257, 258, 260, 261, 263, 264, 266, 267, 268, 269, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 294, 297, 299, 300, 302, 303, 305, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 376, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 399, 400, 401, 402, 406, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 455, 474, 475, 476, 477, 478, 479, 480, 481, 506, 528, 536, 537, 539, 542, 550, 551, 554, 566, 567, 568, 574, 575, 587, 588, 594, 616, 622, 632, 637, 638, 643, 645, 656, 660, 663, 664, 671, 673, 678, 679, 680, 681, 682, 697, 716, 723, 725, 730, 750, 760, 768, 785, 809, 825, 827, 848, 849, 850, 852, 854, 855, 856, 857, 858, 869, 878, 879, 880, 886, 891, 892, 894, 895, 896, 897, 899, 902, 906, 910, 958, 960, 983, 984, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "would": [0, 25, 45, 47, 50, 54, 66, 67, 71, 83, 91, 93, 96, 107, 114, 116, 117, 121, 126, 133, 142, 155, 177, 179, 184, 185, 195, 196, 197, 198, 200, 207, 213, 223, 224, 225, 238, 241, 250, 257, 260, 268, 276, 280, 281, 286, 288, 290, 297, 300, 306, 317, 320, 321, 325, 326, 332, 335, 341, 349, 353, 357, 358, 361, 363, 369, 370, 374, 382, 383, 387, 388, 389, 393, 395, 396, 399, 400, 401, 402, 406, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 437, 451, 470, 473, 487, 488, 489, 494, 532, 537, 539, 541, 546, 549, 557, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 575, 588, 589, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 705, 707, 713, 717, 718, 725, 760, 782, 786, 789, 793, 803, 805, 817, 831, 839, 840, 849, 857, 864, 891, 892, 894, 895, 896, 897, 898, 899, 904, 906, 907, 909, 912, 914, 915, 916, 917, 951, 954, 983, 984, 987, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1009, 1013, 1014, 1018, 1019, 1024, 1026, 1028, 1032, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "appreci": [0, 387], "citat": [0, 381, 384, 399], "paper": [0, 177, 200, 280, 384, 393, 399, 414, 416, 447, 454, 483, 509, 539, 546, 568, 646, 663, 671, 672, 676, 681, 684, 697, 792, 843, 852, 855, 898, 899, 990, 994, 997, 1000, 1009, 1028, 1035, 1042, 1043], "machin": [0, 2, 39, 45, 47, 49, 50, 54, 67, 101, 110, 120, 148, 169, 173, 174, 177, 179, 184, 193, 197, 213, 218, 235, 238, 263, 280, 283, 286, 297, 314, 320, 325, 327, 331, 334, 345, 350, 353, 357, 361, 363, 374, 375, 380, 381, 382, 384, 385, 387, 390, 393, 394, 399, 400, 401, 404, 409, 413, 414, 418, 419, 421, 422, 424, 442, 444, 453, 476, 477, 483, 507, 509, 515, 521, 522, 523, 535, 537, 539, 546, 549, 560, 561, 562, 563, 564, 565, 569, 570, 571, 598, 599, 615, 616, 619, 624, 627, 639, 643, 644, 646, 648, 649, 650, 655, 656, 659, 660, 661, 662, 663, 664, 681, 687, 688, 697, 713, 718, 729, 739, 745, 747, 789, 792, 801, 831, 832, 846, 847, 852, 855, 862, 863, 864, 866, 884, 886, 892, 906, 907, 908, 909, 911, 912, 916, 917, 962, 983, 984, 986, 987, 990, 991, 992, 994, 995, 997, 1000, 1001, 1002, 1004, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1028, 1029, 1030, 1032, 1035, 1037, 1047, 1048, 1049, 1050, 1052], "python": [0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 374, 376, 381, 385, 387, 388, 389, 390, 391, 392, 395, 396, 399, 401, 405, 415, 422, 501, 513, 514, 586, 704, 814, 880, 962, 994, 1004, 1009, 1010, 1014, 1017, 1018, 1019, 1020, 1022, 1028, 1030, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "et": [0, 2, 52, 114, 115, 142, 157, 211, 313, 382, 384, 412, 414, 416, 419, 421, 422, 423, 456, 503, 524, 525, 533, 540, 546, 549, 568, 687, 688, 724, 725, 841, 843, 863, 864, 899, 942, 943, 990, 991, 994, 1000, 1004, 1006, 1009, 1010, 1043, 1051], "al": [0, 2, 52, 114, 115, 142, 157, 211, 313, 382, 384, 412, 414, 416, 419, 421, 422, 423, 456, 503, 524, 525, 533, 540, 546, 549, 568, 687, 688, 724, 725, 841, 843, 863, 864, 899, 942, 943, 990, 991, 994, 1000, 1004, 1006, 1009, 1010, 1043, 1048, 1051, 1052], "jmlr": [0, 414, 671, 672, 681, 709, 990, 1009], "12": [0, 45, 47, 54, 61, 73, 78, 80, 81, 91, 93, 94, 95, 110, 111, 120, 126, 151, 152, 153, 156, 158, 177, 182, 183, 184, 191, 195, 196, 198, 203, 207, 209, 223, 231, 238, 241, 243, 246, 247, 250, 251, 253, 254, 261, 264, 268, 269, 279, 280, 282, 283, 286, 292, 303, 324, 325, 326, 334, 357, 361, 363, 384, 385, 392, 400, 402, 405, 407, 408, 414, 418, 422, 448, 452, 454, 462, 487, 488, 489, 490, 501, 537, 539, 546, 575, 651, 652, 657, 665, 666, 667, 669, 674, 676, 686, 690, 691, 694, 697, 698, 729, 734, 801, 802, 804, 821, 824, 837, 858, 874, 975, 983, 984, 986, 990, 992, 995, 1004, 1008, 1009, 1015, 1019, 1024, 1033, 1036, 1038, 1042, 1043, 1045, 1046, 1051, 1052], "pp": [0, 101, 177, 279, 384, 414, 416, 422, 425, 426, 449, 453, 457, 467, 516, 538, 539, 546, 595, 640, 648, 669, 690, 691, 725, 730, 734, 744, 760, 773, 787, 841, 843, 845, 862, 882, 894, 987, 994, 996, 997, 1007], "2825": 0, "2830": 0, "2011": [0, 85, 196, 244, 393, 419, 422, 540, 543, 545, 546, 552, 595, 632, 643, 663, 734, 984, 998, 1008, 1012, 1035], "bibtex": 0, "entri": [0, 57, 108, 112, 158, 163, 191, 195, 196, 276, 329, 362, 370, 391, 393, 395, 400, 401, 412, 413, 414, 419, 421, 424, 468, 477, 501, 536, 537, 542, 550, 551, 566, 567, 593, 596, 599, 616, 625, 637, 643, 645, 652, 656, 658, 660, 661, 664, 666, 668, 669, 670, 678, 680, 687, 688, 690, 691, 704, 709, 712, 714, 717, 720, 721, 723, 730, 733, 734, 735, 738, 739, 742, 747, 760, 762, 763, 787, 789, 792, 793, 796, 797, 816, 830, 846, 847, 854, 855, 856, 857, 858, 877, 883, 895, 980, 983, 984, 990, 994, 997, 1004, 1009, 1014, 1019, 1042, 1045, 1046, 1048, 1052], "articl": [0, 58, 107, 361, 382, 386, 387, 395, 418, 427, 480, 710, 990, 994, 1028, 1048], "titl": [0, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 61, 62, 64, 65, 66, 67, 69, 71, 75, 76, 77, 79, 82, 83, 84, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 114, 115, 117, 118, 120, 121, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 143, 144, 145, 148, 150, 151, 152, 155, 156, 158, 159, 162, 165, 166, 170, 172, 173, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 195, 202, 203, 205, 207, 208, 210, 211, 212, 215, 216, 222, 223, 225, 227, 228, 229, 231, 232, 237, 240, 241, 243, 244, 245, 250, 254, 255, 256, 258, 259, 260, 266, 267, 268, 269, 270, 271, 272, 274, 275, 279, 280, 281, 283, 284, 285, 289, 290, 294, 302, 303, 306, 307, 308, 309, 311, 312, 313, 320, 324, 325, 326, 327, 340, 343, 345, 346, 347, 348, 349, 352, 353, 358, 359, 361, 366, 367, 368, 386, 387, 391, 395, 415, 994, 1017, 1024], "p": [0, 2, 52, 55, 64, 66, 67, 79, 99, 116, 117, 120, 126, 135, 154, 173, 177, 182, 200, 235, 240, 241, 243, 245, 254, 269, 280, 286, 287, 313, 381, 382, 384, 385, 392, 395, 412, 413, 414, 416, 417, 419, 421, 423, 424, 425, 427, 447, 449, 451, 452, 455, 460, 461, 462, 474, 476, 479, 480, 483, 503, 533, 539, 543, 545, 546, 552, 554, 555, 556, 558, 560, 561, 562, 563, 564, 566, 569, 570, 571, 595, 597, 598, 599, 600, 601, 603, 604, 605, 609, 610, 611, 612, 613, 614, 620, 621, 632, 645, 648, 693, 695, 697, 699, 704, 710, 720, 728, 745, 756, 790, 792, 805, 811, 812, 813, 816, 831, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 862, 866, 867, 882, 894, 900, 916, 917, 918, 987, 988, 990, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1008, 1009, 1023, 1026, 1035, 1036, 1038, 1041, 1043, 1050, 1051, 1052], "ython": 0, "f": [0, 2, 45, 46, 48, 52, 53, 54, 56, 57, 58, 61, 66, 69, 71, 75, 81, 85, 86, 87, 90, 91, 93, 96, 102, 105, 108, 112, 121, 131, 142, 145, 148, 149, 150, 152, 153, 155, 158, 163, 164, 169, 171, 173, 176, 177, 179, 185, 186, 188, 192, 194, 195, 196, 197, 198, 200, 207, 209, 212, 223, 224, 225, 227, 233, 237, 241, 244, 254, 256, 257, 260, 264, 271, 278, 280, 281, 282, 283, 286, 287, 289, 290, 292, 300, 303, 315, 316, 317, 322, 325, 326, 329, 331, 333, 335, 336, 338, 339, 348, 353, 357, 361, 362, 363, 370, 382, 387, 388, 389, 391, 393, 399, 413, 415, 419, 421, 422, 423, 424, 492, 513, 514, 536, 537, 542, 543, 571, 586, 587, 588, 592, 597, 600, 601, 603, 604, 605, 609, 610, 611, 612, 613, 614, 622, 632, 637, 640, 663, 701, 718, 727, 730, 733, 734, 760, 787, 788, 791, 792, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 830, 831, 833, 863, 864, 868, 877, 880, 881, 885, 886, 887, 913, 921, 926, 927, 978, 986, 989, 998, 1001, 1002, 1004, 1008, 1015, 1037, 1043, 1044, 1045, 1047, 1049], "g": [0, 25, 45, 48, 49, 51, 53, 57, 64, 65, 66, 67, 71, 91, 93, 103, 107, 118, 121, 135, 142, 145, 146, 154, 155, 163, 179, 180, 181, 182, 184, 186, 187, 188, 191, 194, 205, 208, 223, 224, 225, 227, 241, 244, 248, 256, 257, 266, 280, 284, 285, 291, 299, 306, 320, 325, 341, 356, 357, 363, 370, 374, 379, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 399, 401, 406, 409, 411, 413, 414, 416, 418, 419, 421, 422, 423, 424, 426, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 508, 533, 536, 538, 539, 542, 543, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 598, 599, 602, 609, 615, 616, 622, 627, 628, 635, 638, 639, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 691, 695, 697, 702, 725, 732, 742, 744, 767, 789, 792, 804, 805, 806, 807, 809, 810, 812, 821, 825, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 853, 855, 856, 857, 858, 862, 863, 864, 866, 869, 871, 872, 873, 876, 878, 879, 882, 884, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 942, 943, 954, 962, 983, 984, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1008, 1009, 1010, 1014, 1017, 1018, 1023, 1028, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "A": [0, 2, 19, 25, 41, 55, 57, 58, 59, 65, 67, 70, 74, 76, 77, 78, 79, 82, 83, 84, 86, 87, 91, 92, 94, 97, 98, 99, 100, 102, 105, 112, 114, 117, 121, 126, 129, 130, 131, 135, 143, 144, 149, 150, 152, 162, 166, 168, 169, 170, 174, 175, 176, 179, 182, 184, 186, 187, 188, 192, 195, 196, 207, 211, 224, 227, 233, 237, 238, 241, 244, 257, 260, 269, 280, 281, 283, 287, 294, 297, 315, 320, 322, 325, 329, 331, 334, 339, 340, 341, 343, 349, 354, 361, 362, 363, 367, 369, 370, 374, 376, 381, 382, 384, 385, 387, 389, 390, 392, 395, 399, 400, 401, 402, 404, 406, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 493, 495, 496, 497, 499, 502, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 525, 527, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 622, 625, 632, 633, 634, 635, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 709, 710, 715, 716, 717, 721, 722, 724, 726, 727, 728, 729, 730, 735, 740, 741, 744, 746, 747, 748, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 768, 770, 771, 778, 779, 780, 781, 782, 785, 792, 794, 795, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 941, 942, 943, 950, 951, 952, 953, 954, 979, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1019, 1020, 1026, 1027, 1028, 1030, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "v": [0, 2, 30, 45, 50, 54, 55, 57, 58, 60, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 85, 87, 93, 96, 107, 112, 113, 116, 118, 119, 120, 128, 130, 131, 135, 146, 148, 149, 150, 155, 156, 157, 168, 173, 179, 192, 193, 198, 201, 212, 221, 222, 223, 224, 227, 228, 232, 238, 247, 254, 267, 268, 271, 272, 273, 276, 295, 297, 311, 327, 329, 346, 362, 370, 375, 379, 384, 385, 387, 393, 395, 401, 411, 412, 413, 416, 417, 419, 422, 437, 446, 450, 457, 467, 468, 469, 470, 475, 478, 479, 480, 481, 482, 487, 488, 489, 501, 517, 529, 535, 536, 542, 546, 550, 551, 555, 557, 559, 561, 563, 565, 567, 569, 570, 573, 575, 586, 594, 598, 599, 605, 611, 616, 635, 636, 639, 640, 644, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 683, 684, 693, 700, 704, 706, 709, 722, 740, 741, 743, 758, 759, 761, 792, 799, 803, 808, 815, 817, 828, 832, 834, 835, 836, 839, 840, 841, 849, 857, 859, 862, 864, 866, 867, 870, 873, 879, 880, 881, 886, 887, 890, 900, 906, 907, 908, 909, 911, 912, 915, 917, 921, 988, 989, 990, 991, 994, 995, 996, 999, 1002, 1004, 1008, 1009, 1011, 1015, 1030, 1035, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050], "b": [0, 2, 49, 51, 64, 66, 97, 103, 116, 135, 144, 145, 151, 155, 156, 166, 168, 180, 181, 182, 187, 191, 205, 207, 208, 223, 224, 229, 241, 258, 260, 279, 283, 285, 290, 294, 299, 332, 341, 370, 382, 384, 387, 391, 392, 393, 412, 413, 414, 417, 418, 419, 422, 442, 487, 503, 505, 546, 571, 593, 594, 595, 596, 612, 613, 615, 616, 633, 651, 652, 653, 654, 663, 674, 677, 679, 681, 685, 692, 693, 710, 724, 734, 735, 796, 797, 814, 815, 853, 879, 880, 881, 882, 885, 886, 894, 921, 928, 943, 944, 957, 959, 984, 986, 990, 991, 992, 994, 997, 999, 1004, 1008, 1009, 1023, 1035, 1043, 1046, 1048, 1049, 1050], "o": [0, 58, 60, 67, 69, 76, 87, 93, 98, 99, 101, 102, 118, 120, 125, 130, 160, 177, 187, 211, 216, 221, 223, 238, 256, 266, 280, 282, 289, 320, 321, 325, 330, 333, 336, 342, 353, 365, 374, 382, 384, 387, 405, 414, 416, 419, 421, 425, 427, 449, 452, 453, 455, 478, 480, 504, 539, 609, 632, 671, 672, 697, 834, 862, 877, 918, 962, 963, 986, 988, 990, 991, 994, 995, 997, 998, 1008, 1009, 1010, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "m": [0, 45, 49, 52, 60, 66, 67, 82, 96, 97, 101, 102, 103, 116, 117, 128, 142, 166, 184, 205, 223, 241, 280, 284, 313, 336, 342, 345, 356, 361, 374, 375, 381, 382, 384, 385, 391, 393, 401, 405, 412, 413, 414, 416, 419, 421, 423, 425, 449, 450, 451, 455, 462, 478, 479, 505, 518, 533, 537, 539, 541, 546, 644, 650, 654, 669, 676, 690, 691, 694, 698, 713, 721, 730, 745, 760, 762, 763, 801, 802, 852, 877, 943, 973, 974, 984, 986, 988, 990, 991, 992, 994, 995, 996, 997, 998, 1002, 1004, 1008, 1010, 1018, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "r": [0, 2, 49, 51, 52, 53, 55, 57, 64, 65, 66, 67, 77, 81, 103, 112, 114, 115, 116, 117, 121, 128, 135, 138, 142, 145, 146, 151, 155, 156, 157, 166, 173, 180, 181, 182, 186, 187, 188, 190, 191, 195, 205, 207, 208, 212, 223, 230, 233, 241, 248, 253, 256, 266, 269, 272, 279, 280, 283, 285, 286, 287, 290, 293, 295, 299, 302, 303, 307, 311, 313, 326, 333, 351, 353, 363, 370, 382, 384, 388, 391, 399, 401, 412, 413, 414, 416, 417, 418, 419, 421, 422, 431, 437, 442, 451, 456, 458, 470, 474, 479, 483, 487, 488, 489, 503, 509, 518, 525, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 593, 594, 595, 596, 611, 614, 615, 616, 632, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 690, 691, 697, 701, 721, 726, 727, 728, 732, 734, 785, 789, 792, 803, 817, 820, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 863, 864, 877, 882, 894, 901, 902, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 919, 960, 984, 986, 988, 990, 991, 994, 995, 996, 997, 998, 1001, 1002, 1004, 1008, 1009, 1010, 1013, 1028, 1035, 1039, 1042, 1045, 1046, 1047, 1048, 1050, 1052], "d": [0, 2, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 70, 71, 75, 76, 80, 86, 87, 88, 98, 99, 101, 107, 108, 118, 123, 126, 128, 131, 135, 137, 179, 187, 223, 231, 239, 241, 248, 251, 253, 254, 255, 256, 269, 279, 280, 288, 299, 306, 307, 313, 317, 338, 339, 342, 349, 353, 354, 363, 381, 382, 384, 389, 393, 399, 413, 414, 416, 417, 419, 421, 422, 424, 425, 449, 451, 452, 457, 465, 468, 493, 498, 508, 531, 539, 541, 562, 563, 570, 571, 586, 587, 595, 619, 620, 624, 627, 628, 649, 650, 653, 674, 675, 676, 685, 693, 694, 697, 698, 702, 704, 710, 713, 726, 727, 728, 730, 760, 768, 782, 785, 792, 815, 841, 843, 845, 846, 847, 862, 873, 877, 879, 880, 882, 894, 899, 916, 917, 921, 986, 988, 990, 991, 992, 993, 994, 996, 1002, 1004, 1006, 1009, 1010, 1024, 1025, 1026, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051], "perrot": [0, 1035], "e": [0, 25, 45, 49, 51, 52, 54, 57, 65, 66, 67, 71, 73, 91, 93, 95, 99, 107, 114, 116, 117, 118, 120, 121, 124, 131, 133, 142, 145, 152, 154, 155, 158, 159, 168, 173, 176, 177, 187, 194, 195, 196, 200, 203, 207, 212, 213, 223, 224, 225, 227, 241, 243, 244, 256, 257, 276, 280, 281, 283, 285, 286, 294, 295, 297, 299, 306, 313, 322, 325, 329, 331, 357, 363, 367, 368, 369, 370, 374, 375, 376, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 399, 400, 401, 405, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 442, 444, 446, 448, 449, 450, 452, 454, 455, 459, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 501, 503, 505, 506, 507, 508, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 593, 594, 595, 596, 598, 599, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 622, 627, 628, 635, 638, 639, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 693, 695, 697, 699, 702, 704, 706, 709, 710, 713, 714, 732, 733, 734, 735, 742, 745, 746, 759, 767, 771, 789, 792, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 816, 817, 821, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 862, 863, 864, 866, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 901, 902, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 937, 942, 943, 945, 948, 949, 951, 954, 962, 969, 980, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1014, 1017, 1018, 1026, 1027, 1028, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "journal": [0, 117, 196, 280, 286, 297, 381, 382, 384, 413, 414, 416, 421, 457, 467, 478, 539, 546, 632, 640, 650, 694, 697, 698, 710, 720, 735, 738, 739, 762, 763, 790, 831, 836, 882, 894, 983, 984, 988, 990, 991, 992, 995, 1001, 1006, 1008, 1009], "research": [0, 177, 194, 280, 286, 297, 382, 384, 399, 414, 506, 518, 640, 650, 697, 739, 831, 836, 983, 991, 995, 997, 1009, 1013, 1014, 1018], "volum": [0, 104, 115, 177, 184, 382, 384, 414, 416, 478, 539, 773, 990, 1009, 1018], "page": [0, 53, 58, 66, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 177, 184, 195, 196, 197, 204, 243, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369, 374, 382, 384, 387, 389, 391, 393, 395, 402, 414, 416, 478, 521, 522, 523, 633, 649, 836, 901, 943, 984, 990, 994, 995, 1019, 1028, 1033, 1035, 1039, 1040], "want": [0, 30, 45, 53, 61, 64, 65, 66, 93, 102, 108, 177, 191, 195, 223, 224, 225, 257, 260, 272, 280, 294, 297, 303, 317, 343, 346, 361, 370, 374, 375, 376, 385, 386, 388, 389, 391, 392, 393, 399, 400, 401, 402, 405, 406, 409, 413, 414, 415, 416, 421, 422, 423, 505, 508, 509, 515, 540, 554, 659, 660, 661, 663, 664, 671, 673, 679, 680, 681, 768, 852, 855, 871, 878, 899, 906, 983, 990, 993, 994, 995, 998, 1000, 1004, 1005, 1009, 1013, 1014, 1019, 1027, 1035, 1049], "its": [0, 2, 7, 25, 45, 50, 53, 54, 55, 60, 66, 67, 73, 75, 93, 103, 104, 114, 116, 118, 121, 124, 125, 126, 133, 140, 142, 148, 151, 153, 155, 158, 168, 177, 179, 184, 186, 195, 196, 198, 200, 202, 212, 236, 240, 241, 245, 250, 257, 259, 260, 262, 264, 266, 271, 272, 279, 283, 285, 287, 289, 300, 302, 306, 307, 322, 332, 341, 346, 353, 359, 361, 362, 365, 369, 370, 375, 376, 380, 381, 382, 383, 387, 388, 389, 391, 392, 395, 399, 400, 401, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 430, 445, 447, 449, 451, 455, 459, 461, 465, 468, 469, 470, 472, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 502, 508, 528, 536, 538, 539, 542, 543, 545, 546, 547, 549, 555, 558, 560, 561, 562, 563, 564, 565, 569, 570, 571, 588, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 649, 650, 676, 677, 679, 690, 691, 692, 693, 697, 701, 704, 713, 729, 733, 734, 740, 741, 745, 782, 785, 787, 801, 802, 803, 827, 834, 835, 837, 848, 849, 850, 852, 853, 854, 856, 857, 858, 865, 866, 870, 875, 878, 879, 881, 898, 899, 902, 906, 907, 914, 916, 926, 927, 932, 938, 962, 964, 983, 986, 989, 990, 991, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1007, 1008, 1009, 1010, 1013, 1018, 1019, 1021, 1023, 1026, 1027, 1028, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "api": [0, 53, 88, 94, 139, 147, 192, 249, 251, 257, 261, 262, 277, 282, 289, 290, 300, 336, 362, 363, 376, 380, 381, 387, 388, 390, 391, 396, 397, 399, 400, 402, 405, 409, 419, 421, 422, 424, 428, 431, 432, 433, 436, 438, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 501, 509, 513, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 568, 569, 571, 572, 573, 574, 575, 584, 585, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 663, 676, 682, 693, 694, 695, 696, 697, 707, 801, 802, 806, 807, 809, 825, 832, 850, 852, 854, 855, 858, 862, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 904, 910, 911, 960, 962, 978, 983, 992, 993, 994, 997, 1004, 1008, 1013, 1014, 1015, 1018, 1019, 1023, 1025, 1030, 1032, 1033, 1034, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "design": [0, 2, 55, 61, 116, 142, 163, 182, 194, 195, 204, 271, 320, 326, 369, 376, 381, 387, 392, 399, 400, 401, 402, 404, 414, 421, 423, 520, 533, 637, 638, 653, 670, 674, 681, 685, 690, 803, 821, 822, 841, 843, 984, 990, 991, 994, 995, 1004, 1013, 1014, 1018, 1021, 1037, 1044], "mai": [0, 2, 25, 49, 60, 65, 77, 82, 84, 94, 108, 121, 128, 152, 153, 158, 177, 183, 185, 187, 195, 198, 200, 203, 207, 212, 227, 229, 248, 257, 260, 283, 285, 287, 288, 315, 325, 339, 349, 353, 357, 361, 362, 363, 370, 374, 375, 376, 379, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 395, 399, 401, 402, 405, 406, 409, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 437, 444, 445, 446, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 464, 467, 470, 474, 477, 487, 488, 489, 492, 493, 494, 501, 513, 514, 520, 539, 540, 543, 545, 546, 549, 552, 553, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 579, 586, 599, 602, 607, 615, 616, 622, 625, 639, 640, 642, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 681, 682, 683, 684, 686, 689, 691, 693, 694, 696, 697, 698, 700, 702, 710, 716, 717, 720, 721, 723, 724, 726, 727, 728, 730, 742, 760, 767, 789, 790, 803, 805, 806, 807, 808, 817, 818, 819, 822, 823, 827, 831, 834, 839, 840, 841, 842, 843, 845, 848, 849, 850, 852, 854, 856, 857, 858, 864, 865, 866, 869, 871, 881, 883, 884, 885, 886, 887, 889, 895, 898, 899, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 919, 924, 946, 947, 962, 983, 984, 986, 988, 990, 991, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1019, 1025, 1026, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "consid": [0, 45, 53, 54, 55, 61, 65, 77, 93, 104, 108, 117, 124, 128, 132, 152, 155, 172, 176, 177, 191, 196, 223, 225, 257, 280, 283, 287, 291, 300, 303, 306, 307, 320, 331, 346, 353, 354, 357, 361, 370, 374, 375, 376, 379, 386, 387, 389, 393, 395, 399, 401, 402, 406, 411, 414, 419, 420, 421, 422, 423, 424, 425, 426, 443, 449, 451, 455, 462, 479, 513, 514, 526, 538, 546, 554, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 593, 594, 596, 598, 612, 613, 625, 636, 637, 638, 651, 657, 663, 664, 665, 667, 676, 684, 693, 694, 695, 697, 698, 699, 701, 705, 707, 710, 712, 714, 720, 730, 734, 738, 760, 790, 792, 798, 848, 849, 850, 852, 854, 856, 857, 858, 861, 863, 864, 869, 879, 880, 887, 901, 902, 911, 912, 914, 915, 916, 917, 978, 983, 989, 990, 991, 992, 994, 995, 997, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1014, 1019, 1026, 1038, 1039, 1043, 1047, 1048, 1050, 1051, 1052], "softwar": [0, 177, 374, 384, 387, 395, 399, 401, 422, 632, 640, 663, 984, 1018], "from": [0, 2, 37, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 376, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1025, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "2013": [0, 200, 384, 414, 418, 419, 541, 730, 760, 986, 994, 1012, 1036, 1037], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 48, 55, 57, 58, 78, 84, 85, 104, 105, 117, 145, 177, 197, 215, 218, 227, 232, 233, 285, 286, 287, 297, 316, 324, 357, 384, 385, 393, 395, 412, 413, 414, 418, 419, 421, 424, 479, 521, 522, 523, 543, 545, 552, 560, 561, 562, 563, 570, 571, 595, 612, 613, 615, 616, 620, 624, 627, 628, 639, 653, 654, 663, 674, 677, 679, 685, 692, 694, 697, 698, 710, 720, 729, 730, 735, 760, 790, 843, 877, 914, 915, 916, 917, 983, 988, 990, 991, 994, 996, 997, 998, 1002, 1006, 1008, 1010, 1027, 1038, 1043, 1047, 1048, 1049, 1050, 1052], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 414, 422, 841, 996, 1012], "languag": [0, 363, 392, 409, 419, 422, 1008, 1013, 1014, 1018, 1020], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 44, 47, 49, 52, 54, 55, 56, 57, 60, 62, 65, 67, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 94, 97, 98, 99, 100, 103, 106, 108, 109, 111, 115, 117, 124, 126, 127, 128, 131, 132, 136, 138, 140, 142, 144, 145, 147, 148, 151, 152, 154, 155, 160, 161, 162, 164, 166, 168, 169, 170, 174, 178, 179, 180, 181, 183, 184, 186, 188, 190, 192, 195, 196, 201, 202, 205, 206, 207, 208, 212, 213, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 250, 253, 254, 255, 257, 259, 260, 261, 264, 266, 267, 268, 269, 270, 272, 274, 278, 280, 282, 283, 284, 285, 288, 294, 297, 299, 300, 304, 306, 308, 309, 310, 311, 313, 316, 317, 319, 321, 322, 323, 327, 329, 331, 333, 334, 335, 339, 340, 342, 343, 345, 346, 348, 353, 354, 361, 366, 367, 368, 369, 373, 375, 379, 380, 381, 383, 384, 387, 389, 390, 393, 394, 395, 396, 400, 405, 406, 409, 411, 412, 413, 416, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 518, 519, 520, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 622, 623, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 715, 716, 718, 722, 723, 725, 729, 731, 732, 733, 734, 735, 738, 740, 741, 742, 744, 745, 758, 759, 761, 765, 767, 768, 773, 787, 788, 789, 791, 792, 793, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 930, 931, 932, 940, 942, 943, 957, 960, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1024, 1026, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mine": [0, 280, 362, 382, 414, 425, 449, 516, 568, 725, 738, 744, 787, 990, 994, 1000, 1006], "108": [0, 49, 216, 1015, 1036], "122": [0, 54, 144, 184, 191, 196, 255, 393, 995], "high": [0, 37, 45, 50, 52, 53, 65, 67, 70, 75, 78, 82, 87, 93, 95, 100, 103, 107, 111, 116, 117, 130, 131, 145, 147, 148, 149, 150, 155, 156, 159, 161, 169, 170, 177, 179, 185, 191, 194, 196, 197, 198, 207, 218, 224, 225, 227, 237, 243, 244, 245, 250, 254, 266, 272, 278, 282, 286, 287, 295, 306, 307, 315, 317, 322, 324, 325, 326, 327, 335, 341, 346, 348, 349, 361, 362, 367, 368, 374, 382, 384, 387, 392, 395, 396, 399, 400, 412, 413, 414, 418, 420, 421, 422, 423, 424, 449, 452, 454, 455, 457, 474, 487, 488, 489, 558, 559, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 649, 675, 676, 684, 694, 697, 698, 730, 735, 746, 750, 760, 793, 796, 811, 813, 846, 847, 851, 880, 881, 885, 887, 908, 910, 911, 914, 915, 916, 917, 963, 983, 988, 989, 990, 991, 993, 994, 997, 998, 1000, 1002, 1004, 1006, 1009, 1010, 1011, 1013, 1014, 1019, 1020, 1022, 1028, 1035, 1036, 1038, 1039, 1043, 1046, 1047, 1048, 1049, 1050], "qualiti": [0, 13, 27, 47, 61, 64, 75, 84, 86, 87, 96, 131, 151, 158, 195, 229, 274, 278, 287, 288, 289, 353, 387, 395, 399, 401, 409, 410, 414, 416, 419, 457, 467, 474, 479, 562, 563, 564, 565, 569, 570, 747, 817, 898, 899, 914, 915, 916, 917, 943, 989, 991, 999, 1006, 1010, 1013, 1014, 1018, 1023, 1024, 1030], "png": [0, 71, 918], "svg": [0, 1021], "logo": [0, 418, 810], "avail": [0, 2, 46, 52, 53, 55, 79, 94, 95, 131, 150, 154, 158, 177, 179, 184, 188, 194, 195, 196, 212, 223, 231, 241, 244, 257, 260, 277, 278, 283, 284, 287, 305, 306, 307, 313, 325, 329, 330, 331, 332, 334, 335, 341, 343, 370, 374, 381, 382, 384, 385, 386, 387, 388, 392, 396, 400, 401, 405, 409, 412, 414, 415, 418, 419, 420, 421, 422, 423, 425, 452, 455, 456, 457, 458, 474, 475, 476, 477, 478, 479, 480, 481, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 513, 540, 554, 560, 561, 562, 563, 564, 565, 569, 570, 574, 575, 593, 596, 598, 599, 615, 616, 632, 637, 638, 652, 656, 658, 660, 662, 666, 668, 670, 673, 675, 676, 677, 678, 679, 680, 681, 694, 701, 704, 736, 737, 803, 806, 807, 817, 828, 829, 834, 835, 836, 837, 838, 839, 840, 852, 863, 864, 866, 873, 882, 885, 890, 894, 899, 950, 955, 962, 984, 988, 991, 993, 994, 995, 996, 997, 1000, 1004, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018, 1019, 1023, 1028, 1030, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051], "doc": [0, 45, 49, 60, 361, 363, 375, 385, 387, 391, 392, 395, 401, 405, 408, 409, 422, 593, 594, 596, 782, 785, 796, 797, 829, 1028, 1035, 1039, 1049], "sourc": [0, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 381, 384, 386, 387, 388, 390, 391, 393, 395, 396, 399, 400, 405, 409, 412, 415, 419, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 991, 1004, 1010, 1013, 1015, 1018, 1027, 1028, 1045, 1049], "directori": [0, 2, 49, 302, 381, 385, 387, 389, 393, 395, 401, 405, 415, 446, 450, 455, 491, 504, 866, 867, 1049], "driven": [0, 198, 1018], "howev": [0, 45, 46, 48, 54, 55, 64, 65, 67, 75, 85, 87, 91, 93, 98, 109, 112, 114, 118, 120, 133, 135, 145, 147, 148, 152, 155, 156, 163, 174, 177, 179, 184, 185, 196, 197, 204, 212, 223, 227, 244, 247, 248, 250, 256, 257, 260, 280, 287, 294, 297, 299, 300, 305, 316, 320, 331, 353, 357, 361, 362, 370, 374, 375, 376, 381, 382, 384, 385, 386, 387, 389, 393, 395, 399, 401, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 445, 448, 452, 454, 456, 459, 464, 501, 513, 537, 556, 572, 586, 587, 588, 594, 611, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 635, 637, 638, 643, 648, 660, 661, 677, 692, 697, 700, 705, 767, 769, 803, 806, 807, 817, 829, 833, 834, 845, 863, 864, 869, 878, 879, 884, 908, 909, 911, 922, 963, 983, 984, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1008, 1009, 1010, 1019, 1023, 1026, 1044, 1045, 1047, 1048, 1051], "institut": [0, 384, 997], "privat": [0, 391, 401, 402, 922, 1018, 1035, 1043, 1045, 1046, 1048, 1049], "grant": [0, 260, 387], "assur": [0, 401, 801, 802, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sustain": 0, "like": [0, 2, 45, 53, 54, 60, 90, 93, 96, 98, 107, 123, 126, 131, 135, 137, 140, 142, 144, 149, 155, 158, 159, 179, 185, 195, 203, 223, 272, 280, 283, 284, 287, 288, 294, 309, 318, 320, 325, 326, 329, 341, 349, 353, 361, 362, 370, 374, 376, 379, 381, 382, 385, 386, 387, 389, 391, 394, 395, 396, 399, 400, 401, 406, 409, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 520, 524, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 931, 932, 945, 948, 957, 958, 962, 965, 966, 967, 979, 981, 983, 986, 988, 989, 990, 991, 994, 996, 997, 998, 1000, 1001, 1004, 1009, 1010, 1013, 1014, 1018, 1019, 1026, 1028, 1032, 1035, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "thank": [0, 45, 58, 65, 93, 121, 197, 200, 223, 289, 361, 362, 386, 395, 1013, 1018, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "funder": 0, "probabl": [0, 2, 5, 30, 54, 57, 63, 67, 68, 73, 93, 112, 125, 126, 141, 158, 164, 172, 178, 179, 180, 181, 192, 195, 215, 235, 238, 239, 243, 247, 251, 253, 254, 280, 282, 283, 286, 287, 290, 318, 320, 324, 329, 331, 341, 343, 356, 357, 374, 382, 383, 389, 393, 399, 401, 414, 418, 419, 422, 423, 424, 440, 441, 442, 443, 444, 451, 452, 454, 509, 517, 520, 528, 532, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 575, 598, 599, 615, 618, 619, 627, 632, 636, 637, 638, 663, 664, 676, 681, 697, 703, 705, 707, 708, 711, 712, 714, 717, 721, 725, 730, 731, 733, 743, 744, 745, 746, 760, 786, 788, 791, 792, 793, 798, 801, 802, 803, 806, 807, 817, 831, 832, 835, 837, 838, 841, 842, 843, 844, 845, 848, 851, 856, 862, 863, 887, 899, 900, 901, 902, 903, 906, 908, 911, 914, 916, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1014, 1015, 1016, 1028, 1030, 1035, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049], "stefani": [0, 1048, 1050, 1051, 1052, 1053], "senger": [0, 1051, 1052, 1053], "member": [0, 361, 362, 382, 387, 390, 402, 414, 429, 447, 451, 453, 456, 458, 497, 560, 561, 562, 563, 568, 569, 570, 571, 586, 663, 664, 671, 672, 673, 681, 682, 683, 709, 710, 720, 722, 735, 740, 741, 761, 790, 799, 803, 906, 990, 997, 1019, 1035, 1047, 1050], "consortium": [0, 1018], "foundat": [0, 163, 387, 413, 997], "maintain": [0, 93, 228, 241, 243, 257, 280, 375, 386, 390, 393, 394, 395, 399, 401, 405, 414, 421, 445, 447, 875, 876, 882, 883, 886, 891, 894, 895, 897, 990, 991, 1004, 1013, 1014, 1019, 1030, 1050], "improv": [0, 30, 45, 64, 65, 72, 114, 115, 118, 133, 138, 142, 143, 148, 151, 153, 154, 155, 157, 158, 163, 173, 191, 195, 200, 209, 223, 231, 241, 281, 283, 297, 300, 303, 318, 325, 335, 352, 353, 362, 370, 375, 385, 390, 392, 393, 395, 396, 399, 401, 402, 409, 419, 421, 423, 454, 455, 536, 537, 539, 542, 543, 544, 546, 547, 548, 551, 559, 562, 563, 564, 565, 566, 567, 569, 570, 615, 616, 648, 657, 669, 671, 672, 673, 677, 678, 679, 680, 681, 683, 690, 692, 697, 733, 734, 788, 791, 792, 855, 863, 864, 880, 882, 894, 914, 915, 917, 943, 988, 990, 991, 994, 997, 998, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1026, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "through": [0, 2, 48, 54, 73, 147, 177, 187, 195, 227, 243, 255, 257, 275, 280, 283, 305, 324, 325, 347, 354, 363, 369, 384, 385, 387, 389, 394, 396, 401, 402, 405, 406, 414, 417, 419, 421, 423, 424, 431, 437, 451, 469, 472, 477, 540, 546, 562, 563, 566, 569, 570, 571, 586, 598, 599, 602, 652, 656, 658, 660, 663, 664, 666, 668, 670, 673, 681, 682, 693, 696, 725, 809, 825, 882, 894, 898, 899, 914, 915, 916, 917, 949, 952, 983, 984, 991, 994, 996, 997, 998, 1000, 1002, 1004, 1008, 1009, 1010, 1018, 1019, 1026, 1028, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052], "financi": [0, 53, 414, 421, 990], "nvidia": [0, 399], "2022": [0, 375, 421, 710, 1004, 1049, 1050], "microsoft": [0, 53, 385, 388, 405], "m\u00fcller": [0, 70, 321, 322, 402, 419, 540, 872, 998, 1004, 1008, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "2020": [0, 382, 1045, 1046, 1047, 1048], "quansight": 0, "lab": [0, 382, 473, 541, 904, 1018, 1046], "2023": [0, 399, 413, 1050, 1051], "2021": [0, 385, 387, 676, 1047, 1048], "columbia": 0, "univers": [0, 187, 361, 382, 384, 390, 414, 419, 422, 595, 792, 841, 845, 901, 990, 992, 994, 996], "2016": [0, 248, 381, 414, 983, 1040, 1041], "sydnei": 0, "2017": [0, 280, 381, 413, 414, 425, 449, 994, 1041, 1042], "receiv": [0, 2, 60, 168, 192, 251, 257, 263, 273, 275, 277, 287, 341, 363, 370, 387, 389, 395, 401, 418, 421, 509, 663, 707, 711, 713, 731, 786, 792, 793, 822, 832, 834, 835, 873, 911, 995, 998, 999, 1008, 1015, 1045, 1046], "alfr": 0, "sloan": 0, "posit": [0, 2, 45, 47, 49, 52, 53, 57, 64, 65, 67, 105, 138, 158, 160, 165, 194, 195, 207, 208, 218, 223, 224, 225, 227, 241, 246, 254, 260, 277, 280, 283, 287, 289, 290, 320, 330, 331, 335, 361, 369, 374, 382, 386, 387, 389, 394, 396, 401, 402, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 426, 443, 444, 447, 451, 452, 454, 469, 472, 499, 503, 505, 509, 513, 514, 515, 530, 532, 534, 535, 536, 538, 540, 541, 542, 547, 550, 551, 553, 554, 555, 562, 566, 567, 568, 569, 597, 598, 599, 600, 601, 603, 604, 605, 611, 615, 616, 625, 636, 637, 648, 651, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 674, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 692, 695, 703, 705, 707, 712, 714, 717, 718, 720, 721, 723, 725, 728, 731, 733, 734, 735, 739, 740, 742, 743, 744, 745, 746, 747, 748, 756, 758, 762, 770, 786, 787, 788, 791, 792, 793, 801, 802, 806, 807, 829, 846, 847, 848, 850, 852, 854, 856, 858, 859, 869, 870, 873, 879, 882, 885, 890, 894, 898, 899, 901, 902, 906, 907, 910, 911, 912, 914, 916, 923, 941, 943, 959, 961, 985, 986, 990, 992, 994, 995, 997, 998, 999, 1001, 1004, 1009, 1024, 1026, 1028, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "It": [0, 30, 45, 48, 49, 50, 54, 57, 61, 65, 73, 75, 78, 91, 93, 96, 109, 114, 116, 118, 128, 131, 132, 137, 142, 145, 147, 148, 151, 153, 155, 158, 163, 177, 184, 185, 186, 190, 191, 195, 196, 197, 203, 207, 211, 212, 220, 223, 227, 237, 240, 241, 243, 244, 250, 255, 257, 260, 275, 276, 278, 280, 281, 283, 286, 287, 297, 300, 306, 307, 308, 310, 311, 313, 320, 324, 325, 327, 329, 335, 345, 349, 353, 357, 361, 362, 363, 370, 374, 375, 376, 380, 382, 384, 385, 387, 389, 391, 392, 393, 395, 396, 399, 400, 401, 405, 406, 409, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 442, 443, 446, 447, 448, 449, 450, 452, 453, 454, 457, 464, 467, 472, 473, 474, 479, 483, 490, 492, 501, 513, 520, 529, 538, 540, 541, 543, 545, 546, 554, 555, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 594, 601, 607, 611, 612, 613, 616, 619, 620, 624, 625, 627, 628, 632, 635, 636, 637, 638, 646, 647, 648, 651, 652, 655, 657, 658, 659, 660, 663, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 679, 681, 682, 683, 686, 687, 688, 689, 692, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 709, 713, 714, 715, 721, 727, 738, 746, 747, 751, 762, 763, 766, 769, 785, 787, 792, 803, 805, 806, 807, 809, 815, 816, 817, 825, 827, 830, 833, 842, 843, 848, 849, 850, 852, 855, 856, 857, 858, 862, 863, 864, 868, 869, 870, 874, 875, 876, 880, 883, 885, 895, 898, 899, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 930, 943, 951, 952, 962, 965, 968, 970, 971, 972, 973, 974, 975, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1013, 1018, 1019, 1025, 1026, 1027, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "provid": [0, 2, 30, 31, 46, 49, 52, 54, 64, 67, 69, 73, 75, 80, 93, 98, 117, 128, 144, 149, 150, 158, 161, 163, 179, 185, 195, 196, 202, 209, 211, 212, 215, 224, 227, 232, 244, 248, 251, 252, 257, 271, 280, 281, 282, 286, 310, 313, 317, 320, 324, 329, 330, 332, 334, 347, 353, 354, 357, 361, 362, 365, 366, 369, 370, 374, 376, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 395, 396, 399, 400, 401, 404, 405, 406, 409, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 428, 435, 442, 445, 447, 448, 449, 451, 452, 454, 455, 457, 464, 465, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 498, 499, 501, 503, 506, 537, 538, 539, 540, 543, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 598, 599, 606, 610, 615, 616, 632, 637, 638, 639, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 695, 699, 704, 716, 739, 745, 746, 768, 778, 782, 792, 796, 798, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 821, 822, 823, 824, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 863, 864, 866, 869, 871, 872, 873, 876, 877, 878, 881, 883, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 932, 937, 951, 953, 970, 971, 972, 983, 984, 986, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1019, 1023, 1026, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "2012": [0, 117, 413, 421, 560, 561, 568, 644, 747, 983, 987, 994, 1012, 1035], "full": [0, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 374, 375, 376, 380, 382, 385, 387, 389, 392, 395, 399, 401, 402, 405, 411, 414, 416, 418, 419, 422, 428, 431, 437, 438, 446, 450, 452, 454, 464, 493, 494, 497, 501, 502, 505, 506, 507, 508, 509, 510, 512, 515, 540, 542, 546, 564, 565, 572, 573, 637, 653, 655, 659, 674, 685, 726, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 801, 802, 814, 843, 932, 983, 990, 993, 996, 997, 1001, 1004, 1007, 1014, 1026, 1035, 1039, 1041, 1043, 1045, 1046, 1048, 1049, 1051, 1052], "time": [0, 2, 37, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 376, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 395, 399, 401, 402, 406, 411, 412, 413, 414, 416, 417, 419, 421, 422, 425, 442, 446, 448, 449, 450, 451, 452, 455, 457, 460, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 477, 501, 504, 506, 524, 528, 539, 541, 543, 545, 552, 567, 572, 573, 574, 575, 595, 615, 624, 632, 633, 634, 635, 639, 644, 645, 648, 651, 655, 657, 659, 665, 667, 669, 671, 672, 678, 681, 682, 683, 690, 691, 695, 697, 699, 706, 746, 749, 750, 752, 794, 798, 801, 802, 803, 805, 806, 807, 808, 810, 812, 817, 818, 819, 822, 824, 827, 828, 829, 830, 831, 832, 834, 836, 841, 842, 843, 844, 845, 846, 847, 854, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 876, 879, 881, 885, 890, 898, 899, 903, 904, 908, 911, 912, 920, 945, 960, 983, 984, 986, 987, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1018, 1019, 1024, 1026, 1027, 1028, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "host": [0, 148, 335, 361, 382, 387, 391, 395, 396, 899, 962, 1028, 1051], "other": [0, 2, 25, 45, 49, 53, 54, 64, 67, 69, 70, 72, 75, 78, 82, 90, 95, 104, 106, 108, 109, 121, 130, 131, 133, 135, 145, 147, 148, 151, 152, 155, 156, 158, 159, 165, 172, 190, 191, 192, 194, 195, 196, 197, 200, 202, 216, 223, 227, 241, 243, 244, 245, 247, 250, 251, 252, 254, 256, 257, 260, 261, 268, 271, 275, 277, 280, 281, 282, 289, 290, 297, 305, 306, 307, 319, 320, 324, 325, 327, 329, 330, 332, 336, 338, 349, 353, 356, 359, 361, 362, 365, 369, 370, 374, 379, 380, 382, 383, 384, 385, 387, 389, 391, 392, 393, 395, 396, 400, 401, 402, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 442, 448, 449, 451, 452, 453, 454, 455, 457, 462, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 501, 502, 508, 538, 539, 540, 543, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 599, 602, 607, 615, 616, 617, 618, 625, 632, 633, 635, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 697, 701, 704, 709, 723, 767, 778, 782, 789, 796, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 861, 863, 864, 866, 867, 869, 871, 872, 873, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 887, 894, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 937, 951, 983, 984, 986, 987, 988, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1026, 1027, 1030, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1052], "event": [0, 45, 57, 223, 241, 283, 413, 414, 593, 594, 641, 841, 931, 990, 995, 996, 1013, 1018, 1041], "pari": [0, 384, 415, 471, 768, 874, 1005, 1049], "saclai": 0, "center": [0, 2, 36, 45, 48, 49, 50, 55, 64, 66, 72, 73, 75, 76, 78, 80, 81, 83, 86, 87, 88, 91, 93, 94, 97, 98, 99, 101, 102, 117, 125, 133, 134, 137, 153, 154, 155, 156, 177, 191, 196, 204, 215, 217, 223, 224, 234, 235, 246, 247, 250, 251, 260, 266, 269, 270, 275, 281, 291, 305, 308, 310, 316, 320, 322, 323, 333, 340, 347, 349, 350, 351, 356, 362, 363, 382, 383, 384, 392, 414, 416, 417, 419, 420, 421, 427, 445, 447, 448, 451, 452, 453, 454, 457, 459, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 506, 517, 529, 539, 540, 546, 549, 555, 611, 614, 615, 616, 637, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 683, 695, 699, 701, 801, 871, 872, 875, 884, 886, 896, 897, 906, 907, 988, 990, 991, 993, 1001, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1052], "scienc": [0, 76, 116, 177, 187, 297, 381, 384, 399, 414, 445, 459, 543, 545, 552, 693, 694, 698, 853, 984, 986, 990, 991, 994, 997, 1006, 1014, 1018, 1022, 1043], "one": [0, 2, 30, 45, 49, 50, 51, 54, 56, 57, 58, 65, 66, 67, 71, 72, 73, 75, 78, 85, 91, 93, 95, 96, 98, 99, 102, 104, 108, 117, 123, 124, 125, 128, 131, 133, 137, 147, 148, 153, 155, 158, 159, 163, 166, 176, 177, 179, 186, 187, 190, 194, 195, 196, 197, 198, 200, 202, 203, 207, 212, 213, 215, 216, 217, 219, 223, 225, 232, 233, 238, 241, 245, 250, 257, 258, 260, 268, 271, 276, 277, 278, 280, 281, 283, 284, 287, 288, 289, 290, 297, 299, 300, 305, 318, 321, 322, 325, 326, 329, 331, 332, 333, 341, 348, 349, 358, 361, 362, 363, 365, 369, 370, 374, 375, 376, 381, 382, 383, 384, 386, 387, 389, 391, 392, 393, 394, 395, 396, 399, 401, 402, 404, 405, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 465, 467, 469, 474, 479, 492, 493, 495, 496, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 519, 539, 544, 545, 546, 548, 552, 556, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 586, 588, 589, 593, 594, 595, 596, 615, 616, 620, 621, 625, 632, 635, 637, 638, 639, 640, 648, 652, 653, 654, 655, 659, 662, 663, 664, 666, 671, 673, 674, 676, 678, 679, 680, 681, 683, 685, 693, 697, 700, 704, 708, 714, 716, 725, 733, 734, 738, 742, 754, 755, 758, 767, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 806, 807, 809, 810, 811, 813, 815, 817, 821, 822, 825, 827, 829, 830, 832, 833, 834, 835, 836, 838, 839, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 862, 866, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 885, 886, 887, 890, 892, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 922, 932, 935, 945, 952, 965, 983, 984, 986, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1018, 1019, 1023, 1025, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "2014": [0, 90, 381, 419, 421, 424, 535, 612, 613, 627, 628, 663, 697, 863, 864, 942, 943, 991, 998, 1018, 1038], "2015": [0, 196, 381, 713, 726, 727, 728, 863, 864, 994, 1001, 1018, 1039, 1040], "50": [0, 45, 48, 51, 52, 54, 56, 57, 64, 71, 72, 76, 88, 90, 97, 98, 103, 104, 107, 108, 120, 126, 128, 131, 137, 142, 145, 148, 155, 158, 161, 162, 177, 180, 182, 183, 184, 185, 194, 195, 196, 203, 207, 218, 223, 226, 230, 231, 235, 237, 239, 241, 243, 247, 248, 253, 254, 256, 264, 275, 280, 282, 283, 293, 300, 318, 320, 324, 331, 333, 339, 341, 343, 347, 356, 362, 382, 384, 387, 392, 418, 421, 422, 423, 426, 447, 478, 484, 485, 505, 509, 526, 528, 531, 538, 544, 549, 558, 559, 574, 598, 599, 611, 613, 614, 620, 622, 663, 664, 671, 672, 673, 675, 681, 682, 683, 697, 718, 796, 803, 817, 835, 855, 906, 915, 989, 990, 994, 995, 997, 1000, 1004, 1017, 1021, 1035, 1052], "2018": [0, 223, 241, 422, 455, 983, 994, 1018, 1042, 1043], "nyu": [0, 205, 855], "moor": [0, 739, 994, 1018, 1052], "environ": [0, 3, 53, 66, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 184, 195, 196, 197, 204, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369, 374, 382, 384, 385, 387, 389, 393, 395, 399, 405, 409, 411, 415, 504, 1014, 1018, 1042, 1043, 1052], "student": [0, 130, 280, 991, 1014, 1018], "t\u00e9l\u00e9com": 0, "paristech": [0, 64, 65, 80, 250], "rv": [0, 284, 320, 807, 815, 817, 983, 1035, 1036, 1039, 1040, 1041, 1042, 1043], "thierri": [0, 266, 268, 1018, 1041, 1042, 1049], "guillemot": [0, 266, 268, 1041, 1042], "labex": 0, "digicosm": 0, "goix": [0, 1039, 1041, 1042, 1043, 1044], "mathurin": [0, 1046, 1048, 1049], "massia": [0, 1046, 1048, 1049], "2019": [0, 196, 385, 414, 457, 467, 697, 991, 994, 1001, 1004, 1043, 1044, 1045], "dure": [0, 45, 46, 53, 54, 88, 93, 96, 109, 112, 121, 133, 146, 152, 153, 158, 160, 174, 179, 184, 195, 196, 198, 212, 224, 231, 278, 282, 300, 331, 332, 353, 374, 376, 385, 387, 389, 392, 401, 402, 414, 415, 419, 421, 422, 424, 425, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 464, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 633, 634, 635, 637, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 705, 793, 801, 802, 803, 806, 807, 817, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 897, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 984, 986, 990, 991, 997, 1004, 1006, 1010, 1023, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "phd": [0, 414, 421, 1014, 1018], "chan": [0, 844, 886], "zuckerberg": 0, "initi": [0, 48, 53, 58, 74, 80, 81, 83, 95, 96, 98, 101, 102, 117, 156, 164, 165, 166, 180, 185, 192, 195, 203, 216, 238, 243, 244, 248, 265, 267, 268, 280, 300, 331, 340, 349, 362, 370, 375, 382, 387, 389, 395, 396, 399, 401, 414, 419, 421, 423, 424, 426, 447, 448, 452, 453, 454, 455, 456, 457, 458, 464, 465, 466, 467, 483, 517, 520, 536, 537, 538, 542, 543, 545, 548, 550, 551, 552, 553, 558, 559, 564, 565, 598, 612, 613, 615, 616, 624, 625, 632, 645, 650, 651, 652, 653, 657, 658, 663, 665, 666, 667, 668, 671, 672, 673, 674, 676, 681, 682, 683, 685, 686, 689, 695, 696, 697, 699, 700, 801, 802, 836, 855, 862, 863, 864, 902, 929, 942, 943, 963, 968, 969, 986, 990, 991, 993, 998, 999, 1000, 1008, 1010, 1013, 1015, 1025, 1027, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "were": [0, 45, 71, 107, 108, 111, 116, 117, 148, 152, 155, 158, 174, 177, 184, 191, 223, 224, 227, 251, 260, 289, 291, 317, 318, 325, 330, 331, 333, 334, 335, 336, 341, 353, 361, 363, 369, 370, 381, 382, 384, 387, 388, 391, 399, 401, 406, 412, 415, 421, 422, 469, 472, 473, 501, 566, 567, 593, 596, 607, 806, 807, 822, 830, 903, 904, 983, 986, 994, 995, 1010, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "program": [0, 88, 177, 362, 370, 375, 376, 384, 385, 387, 389, 393, 399, 513, 640, 675, 896, 897, 990, 1009, 1010, 1013, 1014, 1017, 1035, 1037], "immanuel": [0, 1035, 1036, 1040], "bayer": [0, 1035, 1036, 1040], "kemal": [0, 61, 62, 1037, 1038], "eren": [0, 61, 62, 1037, 1038], "tr\u00e9segni": [0, 1037], "hamzeh": [0, 1038, 1039], "alsalhi": [0, 1038, 1039], "issam": [0, 315, 1041], "laradji": [0, 315, 1041], "maheshakya": [0, 1038, 1039, 1040], "wijewardena": [0, 1038, 1039, 1040], "xue": [0, 1039, 1040, 1041, 1043, 1044, 1047], "nelson": [0, 1041, 1042, 1047], "yenchen": [0, 1041], "lin": [0, 539, 663, 1009, 1040, 1041, 1042, 1043], "neurodebian": 0, "debian": [0, 374, 385, 393], "packag": [0, 84, 91, 190, 257, 300, 375, 380, 381, 384, 385, 387, 388, 389, 391, 393, 396, 399, 401, 405, 416, 421, 422, 457, 483, 651, 652, 984, 990, 993, 997, 1004, 1010, 1018, 1022, 1035, 1041, 1043, 1044, 1045], "dr": [0, 177, 384, 414, 1049], "jame": [0, 384, 418, 836, 995, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052], "haxbi": 0, "dartmouth": 0, "colleg": [0, 194], "organ": [0, 52, 54, 107, 116, 361, 381, 386, 387, 402, 854, 1013], "kindli": 0, "axa": 0, "some": [0, 44, 45, 46, 49, 50, 54, 60, 64, 65, 67, 75, 82, 88, 91, 93, 94, 96, 100, 105, 108, 111, 114, 116, 117, 121, 128, 143, 144, 148, 152, 155, 156, 158, 159, 160, 163, 164, 173, 179, 181, 184, 185, 186, 187, 188, 190, 191, 192, 195, 196, 197, 198, 200, 202, 204, 206, 207, 211, 212, 213, 217, 218, 223, 224, 227, 231, 232, 237, 240, 241, 243, 245, 250, 254, 257, 260, 267, 268, 269, 274, 275, 280, 281, 282, 283, 286, 288, 297, 299, 303, 306, 311, 316, 317, 320, 325, 330, 331, 332, 333, 334, 335, 336, 345, 346, 348, 349, 357, 359, 361, 362, 363, 369, 370, 374, 375, 376, 380, 381, 382, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 442, 448, 449, 452, 454, 456, 458, 464, 468, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 501, 504, 513, 514, 520, 528, 529, 538, 539, 541, 543, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 586, 587, 593, 595, 596, 599, 611, 614, 615, 616, 637, 638, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 694, 695, 697, 698, 702, 703, 705, 706, 707, 712, 713, 720, 725, 730, 731, 742, 743, 744, 750, 758, 760, 761, 767, 786, 788, 791, 792, 793, 798, 801, 804, 805, 810, 812, 821, 822, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 926, 927, 951, 962, 983, 984, 986, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1024, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "particip": [0, 386, 387, 402, 1018], "could": [0, 45, 50, 54, 55, 67, 75, 80, 91, 108, 109, 128, 131, 143, 144, 152, 155, 158, 174, 179, 184, 191, 194, 195, 196, 223, 224, 227, 232, 241, 247, 255, 256, 257, 274, 280, 299, 308, 311, 332, 345, 346, 361, 365, 376, 387, 393, 395, 401, 405, 409, 413, 418, 421, 422, 426, 479, 538, 543, 612, 613, 634, 676, 805, 810, 812, 983, 984, 990, 991, 1001, 1002, 1004, 1009, 1014, 1027, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "attend": 0, "psf": [0, 387], "dataia": 0, "possibl": [0, 30, 45, 54, 58, 66, 67, 75, 87, 93, 108, 114, 128, 145, 148, 158, 160, 179, 195, 196, 197, 198, 223, 240, 241, 255, 257, 280, 281, 282, 283, 285, 286, 287, 289, 290, 299, 329, 349, 357, 361, 362, 370, 374, 375, 376, 380, 381, 382, 385, 387, 388, 389, 390, 391, 393, 395, 399, 400, 401, 405, 406, 409, 412, 413, 414, 415, 417, 418, 419, 421, 422, 424, 426, 428, 437, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 714, 726, 727, 728, 732, 746, 760, 782, 787, 789, 792, 801, 802, 803, 805, 806, 807, 809, 815, 816, 817, 821, 822, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 924, 926, 927, 930, 935, 962, 965, 968, 983, 986, 989, 990, 991, 993, 994, 995, 996, 997, 1002, 1004, 1009, 1010, 1014, 1018, 1019, 1026, 1027, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051], "tinyclu": 0, "french": [0, 241, 326], "associ": [0, 52, 64, 65, 116, 142, 179, 194, 195, 227, 269, 326, 338, 340, 361, 395, 414, 416, 418, 419, 421, 422, 432, 451, 454, 474, 475, 476, 477, 478, 479, 480, 481, 498, 499, 500, 529, 562, 566, 569, 610, 611, 635, 650, 663, 664, 671, 673, 679, 680, 681, 694, 700, 704, 735, 743, 829, 849, 857, 871, 883, 895, 903, 912, 914, 916, 932, 993, 994, 997, 1004, 1007, 1018, 1027, 1035, 1047, 1051], "fond": [0, 1018], "de": [0, 53, 64, 65, 66, 67, 111, 146, 163, 179, 180, 182, 183, 184, 185, 186, 188, 214, 255, 256, 326, 340, 357, 384, 640, 693, 768, 990, 991, 1014, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 45, 47, 54, 80, 82, 88, 93, 100, 104, 109, 142, 150, 155, 163, 174, 177, 184, 190, 196, 197, 212, 223, 224, 225, 241, 244, 255, 274, 277, 280, 281, 283, 289, 297, 349, 357, 362, 369, 374, 382, 384, 387, 392, 393, 395, 399, 402, 414, 416, 419, 422, 424, 498, 499, 505, 509, 515, 651, 652, 906, 984, 990, 991, 994, 999, 1000, 1001, 1014, 1018, 1024, 1026, 1027, 1035, 1052], "our": [0, 45, 46, 48, 52, 53, 54, 80, 91, 94, 107, 108, 116, 117, 121, 128, 129, 142, 143, 149, 152, 153, 155, 156, 172, 177, 179, 184, 186, 192, 194, 195, 196, 197, 198, 223, 227, 241, 245, 247, 257, 274, 280, 283, 286, 287, 303, 317, 320, 326, 330, 332, 343, 346, 352, 354, 357, 361, 362, 363, 370, 375, 385, 386, 391, 392, 395, 399, 400, 401, 402, 406, 414, 418, 421, 422, 424, 425, 449, 455, 568, 649, 697, 713, 725, 730, 742, 760, 848, 849, 850, 852, 854, 856, 857, 858, 983, 984, 990, 991, 994, 1000, 1004, 1007, 1008, 1009, 1014, 1017, 1018, 1019, 1026, 1027, 1028, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "via": [0, 2, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 379, 384, 385, 388, 389, 391, 395, 399, 400, 401, 402, 405, 406, 409, 412, 413, 414, 415, 417, 418, 419, 423, 424, 442, 506, 540, 544, 546, 548, 551, 564, 565, 602, 616, 621, 626, 629, 632, 643, 644, 645, 646, 661, 671, 673, 676, 678, 681, 692, 694, 697, 698, 714, 803, 826, 827, 828, 829, 834, 835, 836, 838, 844, 852, 863, 865, 866, 867, 886, 887, 983, 988, 990, 991, 993, 994, 995, 1001, 1002, 1008, 1009, 1014, 1015, 1018, 1019, 1030, 1035, 1039, 1040, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numfocu": 0, "all": [0, 2, 4, 30, 45, 46, 48, 49, 52, 55, 57, 60, 64, 65, 67, 73, 76, 77, 78, 80, 81, 86, 90, 91, 92, 93, 98, 102, 112, 118, 125, 128, 130, 131, 140, 147, 148, 150, 151, 155, 158, 165, 166, 177, 184, 185, 187, 192, 194, 195, 196, 198, 202, 207, 209, 215, 216, 217, 223, 224, 225, 226, 227, 232, 234, 238, 240, 241, 243, 244, 250, 256, 257, 260, 261, 264, 267, 269, 271, 278, 281, 282, 283, 284, 286, 287, 288, 290, 292, 297, 300, 303, 305, 317, 320, 321, 325, 329, 330, 331, 332, 334, 335, 336, 338, 340, 341, 342, 346, 349, 353, 354, 357, 358, 361, 362, 363, 366, 369, 370, 374, 375, 376, 380, 382, 383, 384, 385, 387, 389, 391, 392, 393, 395, 396, 399, 400, 401, 402, 406, 411, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 436, 437, 438, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 513, 514, 520, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 710, 714, 718, 719, 720, 721, 722, 723, 725, 726, 727, 730, 732, 733, 734, 736, 737, 739, 740, 741, 742, 746, 749, 750, 752, 754, 755, 757, 760, 765, 773, 778, 782, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 817, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 927, 928, 932, 934, 935, 936, 937, 948, 951, 952, 957, 962, 969, 978, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1025, 1026, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "handl": [0, 2, 45, 50, 108, 148, 152, 158, 159, 163, 200, 207, 256, 257, 282, 287, 289, 297, 299, 300, 307, 326, 329, 336, 361, 363, 369, 374, 379, 381, 385, 387, 388, 389, 396, 399, 401, 421, 422, 424, 501, 549, 582, 586, 587, 593, 594, 596, 615, 640, 651, 652, 657, 663, 664, 665, 666, 667, 673, 680, 681, 683, 686, 725, 792, 870, 879, 880, 906, 907, 911, 918, 944, 951, 954, 991, 994, 995, 996, 997, 1000, 1002, 1009, 1010, 1013, 1014, 1018, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "non": [0, 2, 25, 44, 46, 47, 50, 51, 52, 54, 55, 64, 65, 67, 72, 73, 75, 87, 95, 100, 108, 112, 116, 118, 129, 130, 131, 133, 144, 152, 160, 161, 163, 170, 173, 174, 176, 183, 185, 191, 192, 194, 195, 196, 197, 198, 201, 202, 207, 209, 213, 216, 217, 219, 222, 224, 225, 229, 233, 234, 236, 237, 238, 239, 241, 246, 247, 251, 252, 253, 254, 256, 260, 266, 268, 270, 272, 273, 274, 275, 280, 289, 297, 300, 304, 306, 313, 315, 318, 320, 322, 323, 324, 325, 330, 331, 332, 333, 335, 336, 342, 343, 344, 346, 349, 351, 352, 353, 354, 357, 358, 359, 361, 362, 363, 369, 370, 374, 375, 379, 382, 383, 387, 388, 389, 392, 393, 395, 396, 399, 401, 402, 413, 414, 415, 418, 420, 421, 422, 423, 424, 426, 442, 446, 450, 451, 455, 457, 461, 467, 468, 469, 470, 472, 473, 493, 501, 502, 508, 509, 513, 531, 537, 540, 541, 543, 545, 549, 552, 554, 556, 557, 558, 562, 563, 564, 565, 566, 567, 569, 570, 571, 577, 593, 594, 596, 597, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 635, 636, 640, 643, 648, 655, 657, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 677, 681, 682, 683, 690, 691, 692, 693, 694, 695, 696, 697, 699, 703, 704, 707, 711, 712, 717, 720, 722, 724, 725, 730, 731, 732, 739, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 786, 789, 792, 793, 794, 795, 798, 801, 802, 803, 804, 808, 810, 811, 812, 813, 815, 821, 828, 832, 835, 854, 856, 857, 858, 861, 866, 867, 869, 870, 871, 874, 878, 879, 880, 881, 882, 883, 885, 886, 893, 894, 895, 896, 897, 899, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 925, 926, 927, 941, 943, 947, 949, 957, 983, 984, 985, 986, 987, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1026, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "profit": [0, 1052], "which": [0, 2, 45, 48, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 67, 73, 75, 77, 78, 81, 82, 84, 87, 91, 93, 94, 95, 96, 103, 105, 107, 108, 109, 112, 114, 116, 117, 121, 124, 126, 130, 132, 133, 138, 142, 145, 146, 147, 148, 152, 154, 155, 158, 159, 161, 162, 163, 164, 165, 166, 168, 172, 174, 176, 177, 179, 180, 184, 185, 186, 190, 191, 194, 195, 196, 198, 200, 202, 203, 207, 212, 216, 223, 224, 225, 227, 229, 231, 237, 239, 240, 241, 243, 244, 245, 247, 250, 251, 254, 255, 256, 257, 258, 260, 261, 266, 267, 271, 272, 274, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 294, 295, 297, 299, 300, 305, 306, 307, 316, 320, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 338, 340, 341, 342, 349, 353, 357, 359, 361, 362, 363, 365, 369, 370, 374, 375, 376, 379, 381, 382, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 464, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 492, 528, 536, 537, 538, 539, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 584, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 622, 624, 627, 632, 633, 634, 635, 637, 638, 639, 645, 647, 648, 649, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 666, 668, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 714, 721, 722, 724, 725, 727, 729, 730, 738, 739, 740, 741, 746, 747, 750, 760, 762, 782, 783, 784, 785, 786, 787, 793, 801, 802, 803, 806, 807, 808, 809, 811, 813, 817, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 863, 866, 870, 873, 877, 879, 880, 881, 884, 885, 886, 887, 888, 890, 898, 899, 901, 902, 903, 906, 908, 911, 912, 914, 915, 916, 917, 918, 922, 935, 938, 942, 943, 945, 950, 951, 952, 954, 962, 963, 966, 969, 975, 978, 983, 984, 985, 986, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1019, 1021, 1023, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "manag": [0, 2, 121, 264, 373, 381, 385, 388, 389, 391, 395, 399, 401, 402, 421, 455, 473, 631, 904, 962, 988, 1010, 1013, 1014, 1018, 1028, 1030, 1048, 1051], "board": 0, "scipi": [0, 2, 47, 55, 58, 60, 79, 84, 85, 91, 92, 114, 115, 118, 129, 131, 135, 154, 179, 195, 198, 209, 213, 225, 267, 271, 272, 277, 280, 288, 292, 300, 305, 310, 318, 330, 331, 336, 338, 339, 374, 381, 382, 385, 387, 389, 393, 396, 399, 400, 401, 405, 408, 414, 419, 422, 455, 456, 457, 458, 462, 467, 468, 501, 508, 513, 537, 539, 540, 546, 549, 586, 587, 590, 591, 593, 594, 615, 616, 653, 654, 658, 662, 663, 664, 668, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 685, 689, 692, 696, 697, 700, 764, 767, 782, 783, 784, 785, 796, 797, 807, 815, 817, 832, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 869, 878, 879, 884, 885, 886, 889, 893, 896, 897, 906, 908, 909, 911, 912, 940, 944, 945, 949, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 983, 984, 990, 992, 995, 997, 998, 1004, 1008, 1009, 1012, 1014, 1022, 1024, 1027, 1028, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "mission": [0, 362, 1018], "foster": [0, 1043], "comput": [0, 2, 27, 45, 47, 48, 52, 54, 55, 61, 66, 75, 77, 79, 80, 84, 90, 92, 95, 96, 98, 99, 107, 109, 115, 116, 117, 118, 129, 137, 145, 149, 150, 153, 154, 155, 156, 157, 158, 176, 177, 179, 184, 186, 187, 190, 195, 196, 197, 198, 200, 203, 204, 207, 208, 209, 210, 211, 212, 223, 225, 227, 231, 237, 240, 241, 244, 247, 251, 253, 254, 256, 260, 261, 263, 276, 278, 280, 281, 282, 283, 287, 289, 291, 300, 302, 304, 306, 307, 309, 310, 313, 320, 329, 333, 334, 339, 341, 349, 353, 357, 361, 362, 363, 369, 375, 376, 381, 382, 384, 387, 392, 393, 394, 396, 399, 400, 401, 404, 405, 409, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 462, 464, 466, 467, 468, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 521, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 587, 590, 591, 594, 595, 596, 598, 599, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 729, 730, 731, 733, 734, 735, 738, 740, 742, 743, 744, 746, 747, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 871, 872, 875, 876, 881, 882, 883, 884, 885, 886, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 911, 913, 914, 915, 916, 917, 940, 941, 942, 943, 959, 960, 967, 969, 975, 983, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1018, 1023, 1024, 1027, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "particular": [0, 45, 52, 55, 67, 75, 77, 78, 98, 108, 114, 126, 133, 136, 152, 155, 158, 159, 183, 190, 195, 196, 223, 225, 231, 255, 277, 281, 283, 289, 300, 309, 313, 320, 329, 330, 333, 362, 363, 370, 374, 375, 381, 382, 385, 386, 387, 389, 391, 392, 393, 395, 396, 400, 401, 405, 414, 415, 418, 419, 421, 422, 423, 424, 451, 474, 478, 501, 549, 568, 614, 658, 663, 668, 677, 679, 689, 692, 717, 732, 789, 838, 853, 925, 927, 984, 986, 988, 990, 994, 997, 998, 999, 1000, 1002, 1004, 1014, 1018, 1027, 1035, 1038, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052], "As": [0, 30, 45, 48, 61, 65, 69, 78, 81, 91, 93, 95, 96, 104, 118, 121, 133, 142, 143, 149, 152, 153, 154, 156, 158, 162, 172, 179, 184, 191, 195, 197, 198, 200, 202, 205, 207, 212, 214, 223, 227, 231, 241, 248, 257, 269, 275, 277, 278, 280, 281, 283, 293, 299, 305, 321, 332, 341, 349, 362, 363, 365, 367, 368, 370, 374, 375, 382, 385, 386, 387, 389, 391, 392, 399, 400, 401, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 451, 498, 559, 567, 571, 624, 637, 660, 661, 677, 679, 692, 739, 762, 768, 848, 849, 850, 852, 854, 885, 983, 988, 990, 991, 993, 994, 995, 997, 1001, 1004, 1008, 1009, 1010, 1013, 1014, 1018, 1019, 1023, 1026, 1028, 1035, 1041, 1046, 1051], "fiscal": 0, "home": [0, 2, 7, 49, 53, 88, 144, 163, 183, 185, 187, 188, 215, 232, 267, 275, 318, 334, 354, 366, 382, 385, 395, 405, 491, 504, 684, 1018], "ensur": [0, 61, 79, 95, 118, 126, 142, 148, 149, 158, 198, 223, 244, 275, 283, 317, 369, 370, 374, 375, 387, 389, 391, 392, 393, 402, 405, 406, 413, 414, 415, 418, 426, 474, 538, 539, 546, 616, 632, 701, 710, 786, 792, 793, 827, 899, 926, 927, 943, 949, 960, 990, 991, 994, 1004, 1010, 1023, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "monei": [0, 241, 1018], "when": [0, 2, 45, 50, 51, 52, 54, 61, 64, 65, 66, 67, 73, 77, 78, 81, 94, 98, 105, 107, 108, 109, 114, 116, 117, 121, 128, 131, 132, 133, 135, 145, 148, 151, 152, 153, 155, 158, 159, 163, 164, 165, 174, 179, 190, 194, 195, 196, 197, 198, 202, 203, 207, 212, 214, 216, 220, 223, 225, 227, 228, 239, 250, 251, 252, 256, 257, 264, 267, 269, 276, 279, 280, 281, 282, 283, 287, 289, 290, 297, 300, 302, 303, 306, 307, 308, 320, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 336, 340, 341, 343, 349, 352, 353, 357, 361, 362, 363, 365, 370, 374, 375, 376, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 430, 437, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 520, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 583, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 706, 707, 709, 710, 712, 713, 717, 718, 721, 731, 732, 733, 734, 736, 738, 739, 742, 750, 752, 755, 758, 759, 761, 765, 767, 771, 772, 773, 775, 778, 782, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 799, 801, 802, 803, 806, 807, 808, 809, 817, 821, 822, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 892, 893, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 925, 926, 927, 933, 937, 941, 942, 943, 944, 946, 947, 952, 955, 962, 963, 983, 984, 986, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1019, 1025, 1026, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "need": [0, 30, 45, 50, 53, 71, 84, 86, 91, 93, 95, 118, 130, 140, 148, 152, 154, 155, 156, 158, 163, 177, 179, 184, 190, 191, 195, 211, 225, 240, 241, 244, 250, 253, 255, 257, 260, 261, 266, 267, 271, 272, 278, 280, 282, 283, 285, 297, 299, 300, 302, 325, 329, 336, 341, 349, 361, 362, 370, 374, 375, 376, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 400, 401, 402, 404, 405, 406, 409, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 430, 442, 446, 450, 454, 470, 508, 546, 556, 577, 587, 588, 593, 594, 595, 596, 632, 640, 643, 644, 645, 647, 654, 671, 673, 676, 681, 684, 697, 725, 726, 727, 728, 785, 789, 801, 802, 803, 806, 807, 817, 818, 819, 827, 835, 838, 846, 847, 863, 866, 869, 873, 878, 879, 883, 901, 908, 911, 951, 983, 984, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1014, 1018, 1025, 1026, 1027, 1028, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "keep": [0, 47, 54, 67, 80, 112, 131, 133, 148, 158, 176, 190, 194, 195, 196, 197, 198, 207, 223, 224, 225, 231, 241, 271, 275, 278, 324, 325, 332, 339, 349, 361, 362, 365, 370, 374, 375, 379, 387, 391, 400, 401, 413, 414, 415, 416, 417, 418, 419, 437, 455, 470, 487, 488, 489, 490, 498, 499, 539, 545, 546, 549, 552, 559, 561, 563, 565, 567, 570, 573, 575, 600, 603, 605, 608, 616, 639, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 682, 683, 684, 713, 821, 839, 840, 849, 857, 863, 864, 902, 907, 909, 912, 915, 917, 990, 995, 999, 1002, 1004, 1014, 1017, 1018, 1019, 1024, 1026, 1028, 1030, 1035, 1040, 1043, 1044, 1048, 1049, 1051], "while": [0, 2, 25, 45, 48, 49, 51, 53, 58, 61, 64, 67, 73, 75, 77, 81, 82, 86, 93, 100, 104, 107, 110, 112, 126, 132, 133, 142, 145, 148, 149, 153, 158, 160, 163, 177, 180, 185, 187, 188, 190, 194, 195, 196, 197, 200, 202, 204, 207, 212, 217, 223, 225, 227, 239, 250, 253, 254, 257, 258, 267, 268, 272, 274, 275, 279, 280, 281, 283, 287, 288, 289, 290, 291, 293, 302, 320, 321, 322, 325, 326, 327, 329, 332, 335, 336, 346, 349, 361, 363, 369, 370, 375, 379, 380, 381, 382, 383, 385, 386, 387, 389, 391, 392, 393, 395, 396, 399, 401, 402, 409, 413, 414, 417, 418, 419, 421, 422, 423, 424, 425, 426, 449, 469, 472, 473, 488, 490, 501, 526, 537, 557, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 580, 587, 593, 594, 595, 596, 599, 602, 607, 611, 639, 648, 651, 652, 654, 661, 662, 663, 664, 681, 682, 683, 684, 713, 734, 758, 778, 782, 792, 798, 801, 803, 804, 805, 808, 809, 810, 811, 812, 813, 817, 818, 819, 821, 825, 827, 828, 829, 830, 831, 833, 841, 852, 854, 856, 857, 858, 865, 866, 867, 868, 869, 882, 894, 899, 904, 906, 907, 914, 915, 916, 917, 922, 947, 983, 984, 986, 987, 988, 990, 991, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1006, 1009, 1010, 1013, 1014, 1019, 1025, 1026, 1027, 1028, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "complianc": [0, 158], "tax": 0, "regul": 0, "mostli": [0, 2, 84, 107, 223, 241, 325, 395, 399, 401, 419, 421, 422, 526, 783, 784, 1009, 1013, 1018, 1043, 1044, 1045, 1051], "go": [0, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 382, 385, 387, 389, 391, 392, 396, 402, 405, 415, 419, 421, 423, 448, 566, 567, 725, 885, 946, 947, 1004, 1010, 1013, 1014, 1019, 1028, 1046], "toward": [0, 66, 67, 101, 118, 149, 155, 162, 179, 197, 202, 227, 228, 248, 260, 357, 387, 401, 414, 453, 457, 467, 681, 683, 700, 880, 993, 1008, 1010, 1012, 1014], "cover": [0, 90, 200, 223, 241, 370, 379, 382, 387, 400, 640, 725, 798, 994, 995, 1012], "travel": 0, "expens": [0, 94, 148, 163, 179, 194, 196, 251, 277, 289, 349, 353, 361, 362, 363, 376, 393, 401, 414, 415, 418, 421, 422, 454, 473, 513, 803, 806, 807, 817, 829, 904, 906, 991, 993, 1004, 1009, 1013, 1018, 1028, 1039], "well": [0, 8, 45, 50, 53, 61, 64, 65, 67, 73, 77, 86, 91, 95, 96, 100, 107, 114, 121, 142, 143, 145, 148, 153, 155, 161, 163, 177, 184, 186, 194, 195, 196, 197, 200, 207, 211, 221, 223, 224, 225, 227, 231, 243, 244, 245, 248, 250, 254, 257, 260, 268, 280, 287, 289, 291, 295, 297, 300, 303, 305, 306, 307, 327, 330, 331, 332, 333, 334, 335, 336, 353, 357, 361, 362, 363, 370, 382, 384, 386, 387, 391, 393, 395, 396, 399, 400, 401, 402, 413, 414, 416, 418, 419, 421, 423, 425, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 464, 465, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 705, 726, 727, 728, 789, 792, 796, 799, 801, 802, 803, 806, 807, 817, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 941, 942, 962, 983, 984, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1004, 1007, 1008, 1010, 1011, 1013, 1014, 1018, 1027, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1046, 1053], "budget": [0, 152, 841, 842, 843, 844, 845, 983], "1": [0, 1, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 376, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 400, 401, 402, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 937, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1031, 1033, 1037], "note": [0, 30, 45, 46, 48, 49, 52, 53, 55, 60, 61, 66, 67, 71, 75, 91, 104, 108, 109, 116, 118, 120, 121, 126, 131, 145, 146, 148, 151, 155, 156, 160, 177, 179, 186, 190, 194, 195, 196, 197, 198, 200, 211, 212, 216, 223, 224, 225, 227, 231, 237, 239, 241, 243, 244, 245, 247, 250, 251, 253, 255, 256, 257, 258, 260, 267, 275, 276, 280, 283, 286, 287, 288, 299, 300, 302, 306, 307, 316, 320, 321, 324, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 343, 349, 353, 361, 369, 374, 375, 381, 384, 385, 387, 388, 389, 391, 393, 394, 399, 400, 401, 405, 406, 410, 413, 414, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 437, 439, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 492, 495, 501, 503, 509, 514, 520, 524, 532, 535, 538, 539, 543, 544, 545, 546, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 602, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 640, 641, 643, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 704, 705, 708, 712, 713, 718, 720, 725, 726, 727, 728, 732, 733, 734, 736, 738, 742, 745, 750, 758, 759, 762, 767, 768, 772, 774, 778, 782, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 827, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 919, 922, 932, 933, 942, 943, 954, 957, 962, 969, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019, 1026, 1027, 1028, 1030, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "regard": [0, 11, 46, 48, 52, 54, 91, 93, 108, 124, 133, 169, 179, 184, 196, 197, 212, 220, 225, 245, 256, 260, 282, 289, 290, 303, 362, 382, 383, 387, 388, 392, 399, 401, 409, 414, 419, 421, 422, 424, 448, 452, 457, 464, 467, 506, 619, 624, 661, 663, 706, 747, 802, 809, 825, 830, 848, 849, 987, 990, 994, 996, 997, 999, 1001, 1008, 1009, 1010, 1021, 1028, 1042, 1045], "might": [0, 45, 46, 54, 70, 80, 82, 98, 100, 107, 151, 161, 174, 185, 191, 195, 196, 197, 200, 223, 241, 250, 280, 282, 303, 316, 331, 353, 359, 370, 374, 375, 381, 385, 387, 388, 389, 391, 392, 393, 395, 399, 401, 402, 405, 409, 413, 415, 418, 419, 420, 421, 422, 424, 439, 448, 493, 501, 506, 508, 513, 520, 528, 541, 560, 561, 562, 566, 567, 569, 584, 585, 587, 615, 616, 632, 655, 659, 660, 661, 663, 664, 681, 683, 697, 761, 798, 806, 807, 830, 855, 871, 886, 899, 918, 920, 922, 926, 927, 943, 963, 983, 984, 986, 988, 990, 991, 993, 994, 996, 997, 1001, 1002, 1004, 1009, 1010, 1028, 1036, 1038, 1043, 1044, 1046, 1049, 1050, 1051, 1052], "pai": [0, 241, 387], "dn": [0, 997], "continu": [0, 2, 54, 58, 60, 80, 126, 152, 179, 192, 196, 203, 224, 231, 241, 244, 247, 260, 261, 263, 267, 271, 272, 317, 319, 325, 326, 331, 332, 369, 375, 382, 385, 389, 390, 391, 392, 395, 399, 401, 402, 405, 414, 419, 421, 473, 497, 597, 600, 601, 604, 605, 612, 613, 614, 637, 651, 652, 657, 658, 662, 665, 666, 667, 668, 730, 746, 760, 815, 817, 869, 871, 873, 875, 876, 885, 886, 887, 903, 904, 915, 957, 983, 990, 991, 994, 995, 997, 998, 1004, 1010, 1014, 1015, 1018, 1019, 1026, 1032, 1035, 1037, 1038, 1043, 1048, 1049, 1050, 1052], "integr": [0, 80, 108, 174, 187, 212, 317, 331, 375, 385, 389, 390, 391, 393, 395, 401, 405, 419, 424, 451, 720, 759, 790, 969, 993, 1001, 1018, 1022, 1036, 1038, 1039, 1047, 1048, 1052], "servic": [0, 45, 251, 260, 387, 391, 1018, 1043], "azur": [0, 387], "cirru": [0, 387], "cl": [0, 49, 53, 57, 394, 401, 916], "circlecl": 0, "free": [0, 46, 67, 93, 184, 185, 191, 222, 271, 320, 381, 386, 387, 388, 395, 399, 405, 422, 457, 614, 676, 862, 912, 983, 986, 990, 994, 1014, 1043], "cpu": [0, 99, 281, 300, 334, 374, 375, 385, 393, 401, 405, 411, 422, 501, 637, 652, 656, 658, 660, 663, 664, 666, 668, 670, 671, 673, 681, 684, 803, 817, 827, 828, 829, 850, 858, 899, 962, 994, 1019, 1023, 1028, 1040, 1049, 1050, 1052], "server": [0, 177, 374, 384, 385, 501, 1017, 1043], "anaconda": [0, 375, 385, 391], "inc": [0, 107, 279, 984, 1006, 1018], "storag": [0, 363, 401, 663, 664, 671, 672, 673, 681, 682, 683, 906, 997, 1009, 1038, 1043], "thei": [0, 8, 25, 30, 31, 45, 54, 66, 75, 88, 95, 118, 130, 140, 143, 149, 150, 152, 154, 156, 158, 159, 173, 176, 177, 179, 180, 184, 195, 196, 207, 209, 212, 218, 223, 224, 241, 244, 247, 250, 256, 257, 260, 274, 277, 280, 281, 283, 289, 297, 300, 302, 316, 320, 325, 331, 333, 353, 361, 362, 367, 368, 370, 374, 375, 376, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 395, 396, 399, 400, 401, 402, 406, 412, 414, 415, 416, 417, 419, 421, 423, 424, 426, 445, 447, 451, 458, 459, 472, 501, 513, 514, 538, 540, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 593, 596, 602, 615, 624, 634, 648, 651, 652, 657, 663, 664, 665, 666, 667, 675, 677, 681, 683, 686, 692, 766, 767, 769, 772, 778, 793, 803, 817, 835, 841, 842, 843, 844, 845, 863, 866, 868, 874, 885, 886, 908, 911, 914, 915, 916, 917, 921, 983, 984, 986, 988, 990, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1018, 1019, 1023, 1025, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "stage": [0, 48, 66, 109, 142, 147, 153, 156, 385, 391, 401, 411, 414, 421, 453, 558, 559, 564, 565, 566, 567, 593, 594, 596, 607, 991, 1004, 1012, 1043, 1047], "nightli": [0, 375, 390, 391], "build": [0, 2, 7, 17, 35, 45, 48, 58, 71, 81, 93, 105, 111, 132, 142, 151, 153, 160, 166, 174, 176, 189, 190, 192, 195, 231, 285, 288, 297, 299, 300, 317, 318, 321, 326, 327, 363, 370, 374, 375, 376, 383, 389, 390, 391, 392, 393, 401, 405, 408, 414, 418, 421, 422, 447, 495, 506, 508, 529, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 590, 591, 593, 594, 596, 632, 633, 635, 696, 718, 719, 804, 808, 812, 821, 826, 828, 867, 884, 886, 914, 915, 916, 917, 919, 939, 983, 984, 991, 994, 998, 1000, 1004, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1026, 1027, 1035, 1038, 1040, 1041, 1042, 1044, 1047], "To": [1, 45, 49, 57, 66, 67, 71, 84, 93, 95, 114, 116, 118, 121, 133, 142, 152, 155, 156, 165, 168, 177, 184, 185, 188, 190, 191, 194, 195, 200, 204, 207, 211, 223, 224, 225, 227, 231, 241, 254, 255, 257, 260, 262, 264, 271, 275, 277, 278, 280, 282, 283, 285, 287, 297, 299, 317, 320, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 359, 362, 365, 370, 374, 375, 380, 381, 385, 387, 388, 389, 391, 392, 393, 395, 399, 401, 402, 405, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 451, 453, 454, 455, 466, 469, 472, 497, 501, 507, 508, 512, 513, 514, 536, 542, 543, 544, 546, 548, 549, 550, 551, 562, 563, 564, 565, 569, 570, 574, 602, 616, 632, 637, 651, 652, 657, 658, 661, 663, 664, 665, 666, 667, 668, 689, 705, 717, 732, 767, 789, 797, 806, 807, 828, 835, 866, 877, 882, 896, 897, 906, 907, 911, 914, 915, 916, 917, 933, 943, 962, 981, 983, 984, 986, 989, 990, 991, 992, 994, 995, 996, 997, 1000, 1001, 1004, 1008, 1009, 1010, 1018, 1019, 1023, 1025, 1026, 1028, 1035, 1038, 1040, 1041, 1042, 1044, 1046], "remov": [1, 2, 46, 56, 57, 58, 92, 93, 107, 112, 177, 190, 191, 195, 198, 281, 320, 327, 329, 330, 331, 336, 361, 362, 365, 370, 379, 382, 386, 387, 388, 389, 391, 392, 396, 401, 405, 408, 414, 415, 418, 421, 422, 424, 425, 446, 447, 449, 450, 452, 454, 455, 462, 483, 493, 494, 531, 532, 539, 540, 542, 544, 546, 551, 558, 572, 573, 574, 575, 584, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 616, 635, 638, 643, 649, 650, 659, 660, 661, 681, 682, 697, 714, 745, 746, 754, 755, 782, 783, 784, 786, 809, 825, 827, 828, 829, 830, 853, 865, 866, 870, 871, 883, 884, 886, 895, 921, 937, 938, 984, 991, 997, 1010, 1016, 1020, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "7": [1, 2, 45, 47, 49, 53, 54, 55, 56, 57, 60, 66, 69, 71, 72, 73, 77, 80, 82, 84, 91, 92, 93, 94, 98, 102, 103, 105, 108, 109, 111, 116, 118, 131, 142, 145, 155, 157, 158, 159, 163, 164, 177, 188, 194, 195, 196, 198, 200, 204, 205, 222, 223, 224, 225, 230, 239, 241, 243, 245, 250, 255, 256, 262, 264, 266, 267, 270, 271, 275, 280, 284, 286, 287, 291, 293, 297, 299, 300, 302, 305, 306, 308, 317, 318, 320, 324, 329, 332, 333, 334, 336, 338, 339, 341, 342, 346, 353, 357, 358, 362, 363, 370, 382, 384, 385, 391, 392, 393, 405, 407, 408, 413, 418, 419, 421, 422, 423, 425, 426, 429, 444, 449, 453, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 476, 477, 496, 501, 503, 537, 538, 539, 540, 541, 543, 549, 566, 567, 593, 596, 605, 610, 611, 632, 633, 635, 642, 651, 652, 654, 657, 663, 665, 666, 667, 686, 687, 688, 697, 704, 712, 714, 726, 727, 728, 730, 732, 748, 749, 750, 754, 755, 757, 786, 789, 794, 795, 798, 801, 804, 805, 810, 813, 820, 821, 824, 829, 832, 836, 846, 847, 855, 864, 865, 878, 879, 901, 902, 942, 943, 946, 947, 949, 958, 963, 983, 984, 989, 990, 992, 994, 995, 997, 998, 1000, 1004, 1008, 1009, 1019, 1023, 1026, 1031, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1048, 1053], "6": [1, 2, 45, 49, 50, 51, 52, 53, 54, 57, 60, 66, 67, 70, 71, 78, 82, 84, 87, 88, 90, 94, 95, 98, 99, 100, 101, 102, 103, 105, 110, 111, 112, 114, 115, 116, 118, 124, 128, 130, 137, 143, 151, 155, 156, 158, 160, 162, 168, 172, 177, 179, 182, 184, 186, 187, 190, 191, 195, 196, 198, 200, 202, 203, 204, 207, 212, 216, 221, 223, 224, 225, 227, 237, 241, 243, 244, 247, 250, 253, 254, 258, 260, 261, 262, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 285, 289, 290, 291, 292, 293, 295, 299, 302, 305, 313, 315, 317, 318, 320, 322, 324, 325, 327, 329, 332, 333, 334, 335, 336, 338, 339, 342, 343, 349, 350, 352, 354, 357, 359, 361, 362, 363, 368, 370, 381, 382, 384, 385, 387, 392, 393, 400, 405, 407, 408, 413, 414, 415, 418, 419, 421, 422, 423, 429, 446, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 487, 488, 489, 490, 495, 501, 510, 522, 529, 532, 535, 542, 543, 544, 545, 546, 550, 551, 552, 558, 566, 567, 568, 574, 575, 598, 599, 609, 610, 611, 613, 616, 619, 620, 630, 632, 633, 635, 641, 642, 649, 650, 675, 681, 682, 694, 698, 704, 726, 732, 742, 746, 749, 750, 754, 755, 757, 773, 789, 792, 794, 801, 802, 804, 805, 810, 812, 813, 815, 820, 821, 824, 827, 828, 829, 830, 832, 841, 842, 843, 845, 846, 847, 854, 856, 857, 858, 873, 874, 876, 879, 881, 884, 885, 889, 890, 921, 922, 926, 927, 942, 943, 944, 946, 948, 949, 957, 969, 972, 980, 983, 984, 988, 990, 991, 994, 1004, 1005, 1008, 1009, 1010, 1019, 1023, 1024, 1026, 1031, 1033, 1036, 1037, 1038, 1041, 1043, 1048, 1052], "class": [2, 4, 27, 30, 45, 49, 50, 51, 52, 55, 57, 60, 63, 64, 65, 67, 69, 73, 78, 92, 93, 94, 96, 108, 109, 124, 125, 126, 133, 136, 138, 140, 141, 148, 150, 158, 159, 164, 177, 179, 180, 182, 183, 187, 188, 190, 192, 195, 196, 200, 201, 213, 214, 215, 231, 235, 238, 239, 244, 250, 257, 258, 260, 266, 267, 268, 273, 274, 275, 280, 282, 286, 290, 291, 297, 299, 300, 303, 305, 306, 308, 309, 310, 311, 325, 329, 333, 335, 336, 338, 340, 341, 344, 345, 347, 349, 350, 353, 358, 361, 362, 363, 366, 369, 376, 379, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 396, 399, 400, 405, 406, 411, 413, 414, 415, 417, 419, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 505, 507, 508, 509, 513, 514, 515, 517, 519, 520, 524, 527, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 582, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 725, 731, 733, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 758, 759, 761, 786, 787, 788, 790, 791, 792, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 931, 932, 933, 934, 935, 937, 938, 950, 951, 952, 955, 960, 962, 964, 965, 978, 980, 983, 984, 985, 986, 988, 989, 990, 991, 993, 995, 996, 998, 1001, 1002, 1004, 1005, 1007, 1010, 1014, 1015, 1016, 1018, 1019, 1023, 1026, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "function": [2, 4, 27, 45, 46, 47, 48, 49, 54, 56, 61, 62, 67, 75, 84, 91, 92, 93, 95, 97, 104, 107, 108, 109, 112, 128, 131, 133, 137, 140, 147, 148, 152, 153, 154, 155, 156, 157, 158, 168, 173, 179, 182, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 198, 201, 202, 205, 207, 210, 216, 218, 219, 220, 221, 223, 224, 229, 230, 231, 236, 239, 240, 241, 243, 251, 253, 256, 257, 260, 261, 263, 264, 271, 278, 280, 281, 282, 283, 288, 289, 294, 297, 300, 315, 318, 320, 327, 329, 330, 332, 333, 335, 343, 346, 347, 348, 349, 350, 351, 353, 355, 357, 359, 361, 362, 366, 370, 374, 375, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 399, 400, 401, 405, 406, 409, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 429, 431, 433, 434, 436, 437, 438, 442, 445, 448, 449, 450, 452, 453, 455, 457, 459, 462, 463, 464, 465, 466, 469, 470, 473, 474, 476, 477, 479, 483, 493, 494, 496, 497, 500, 502, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 577, 580, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 609, 612, 613, 614, 615, 616, 620, 624, 625, 627, 628, 632, 633, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 703, 704, 705, 707, 708, 709, 711, 716, 717, 721, 724, 726, 727, 728, 732, 736, 738, 739, 742, 744, 745, 746, 754, 759, 761, 765, 766, 767, 769, 772, 775, 778, 782, 783, 784, 785, 786, 787, 789, 793, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 875, 876, 878, 882, 883, 884, 885, 886, 887, 890, 892, 895, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 924, 933, 935, 936, 937, 942, 943, 953, 954, 960, 961, 962, 964, 965, 968, 969, 978, 983, 984, 985, 987, 989, 991, 992, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1010, 1013, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "scikit": [2, 15, 30, 47, 49, 51, 53, 54, 56, 57, 58, 70, 71, 88, 93, 107, 108, 140, 146, 147, 148, 158, 160, 163, 174, 177, 188, 190, 191, 192, 195, 196, 197, 198, 200, 211, 212, 223, 224, 225, 241, 249, 252, 260, 262, 263, 264, 273, 276, 277, 285, 292, 297, 300, 302, 305, 307, 326, 328, 353, 361, 362, 365, 366, 370, 375, 376, 379, 381, 382, 383, 384, 386, 387, 390, 393, 394, 395, 396, 400, 401, 406, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 428, 429, 431, 432, 433, 434, 436, 437, 438, 443, 448, 451, 452, 455, 462, 469, 470, 472, 473, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 517, 520, 526, 529, 543, 546, 566, 567, 569, 570, 572, 581, 586, 587, 588, 594, 604, 607, 616, 631, 633, 635, 637, 639, 643, 645, 651, 653, 657, 663, 674, 685, 693, 705, 706, 707, 722, 736, 746, 752, 782, 783, 784, 792, 799, 803, 804, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 828, 829, 832, 834, 835, 848, 850, 866, 867, 869, 871, 873, 876, 878, 879, 880, 881, 885, 886, 887, 890, 903, 904, 906, 911, 914, 915, 937, 938, 960, 961, 962, 983, 984, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1004, 1007, 1008, 1009, 1010, 1012, 1015, 1017, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "learn": [2, 15, 26, 29, 30, 32, 38, 45, 47, 48, 49, 50, 51, 54, 56, 57, 58, 61, 65, 66, 67, 70, 71, 73, 74, 75, 86, 87, 90, 91, 93, 94, 105, 107, 108, 112, 117, 118, 127, 133, 137, 140, 142, 145, 146, 147, 148, 150, 151, 157, 158, 160, 161, 162, 163, 168, 169, 170, 174, 177, 179, 182, 184, 188, 190, 191, 193, 197, 198, 199, 209, 211, 212, 218, 223, 224, 225, 227, 237, 241, 246, 247, 248, 249, 250, 252, 254, 255, 258, 259, 260, 262, 263, 264, 273, 276, 277, 279, 280, 283, 285, 286, 288, 292, 294, 297, 300, 302, 304, 305, 306, 307, 308, 309, 313, 314, 317, 318, 320, 321, 325, 326, 327, 328, 337, 341, 343, 348, 353, 355, 357, 361, 362, 363, 365, 366, 367, 368, 370, 375, 379, 380, 381, 382, 384, 386, 390, 393, 394, 395, 396, 400, 401, 404, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 422, 423, 424, 428, 429, 431, 432, 433, 434, 436, 437, 438, 442, 443, 444, 447, 448, 451, 452, 454, 455, 462, 469, 470, 472, 473, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 513, 514, 515, 517, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 581, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 599, 604, 607, 608, 615, 616, 619, 624, 627, 631, 633, 635, 637, 639, 643, 645, 646, 648, 649, 650, 651, 653, 657, 662, 663, 673, 674, 681, 682, 683, 685, 693, 694, 695, 696, 697, 701, 705, 706, 707, 713, 718, 722, 723, 726, 727, 728, 730, 736, 739, 745, 746, 747, 752, 760, 782, 783, 784, 789, 792, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 848, 850, 855, 862, 863, 864, 865, 866, 867, 869, 871, 873, 876, 878, 879, 880, 881, 884, 885, 886, 887, 890, 898, 899, 901, 902, 903, 904, 906, 907, 908, 911, 914, 915, 916, 917, 929, 937, 938, 960, 961, 962, 983, 984, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1021, 1023, 1024, 1030, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 65, 67, 93, 106, 128, 148, 188, 192, 195, 211, 243, 257, 271, 277, 287, 289, 297, 300, 306, 307, 310, 326, 329, 330, 331, 332, 333, 334, 335, 336, 370, 374, 375, 381, 385, 386, 387, 389, 391, 393, 394, 395, 399, 400, 401, 405, 406, 409, 413, 414, 415, 416, 418, 419, 421, 422, 423, 425, 426, 427, 428, 431, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 939, 943, 983, 984, 990, 991, 993, 994, 995, 997, 1004, 1008, 1013, 1014, 1018, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 65, 67, 93, 106, 128, 148, 188, 192, 195, 196, 211, 243, 287, 306, 307, 310, 326, 329, 330, 331, 332, 333, 334, 335, 336, 385, 386, 387, 392, 393, 394, 400, 401, 402, 406, 415, 421, 425, 426, 427, 428, 431, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 939, 994, 995, 1021, 1028, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1045, 1052, 1053], "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 65, 80, 108, 114, 121, 128, 145, 151, 153, 176, 179, 184, 195, 197, 202, 207, 243, 248, 257, 277, 280, 281, 287, 334, 349, 362, 369, 374, 387, 399, 401, 414, 416, 419, 421, 422, 424, 449, 457, 467, 520, 537, 540, 587, 619, 627, 633, 663, 664, 671, 672, 673, 681, 682, 683, 696, 700, 741, 778, 782, 785, 796, 797, 842, 848, 849, 856, 857, 884, 886, 906, 908, 911, 943, 993, 994, 996, 997, 998, 1000, 1002, 1004, 1008, 1009, 1026, 1028, 1044, 1048], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 67, 95, 142, 143, 145, 149, 151, 156, 163, 192, 196, 211, 212, 227, 248, 252, 255, 256, 260, 262, 264, 272, 278, 287, 303, 306, 307, 326, 329, 330, 331, 332, 333, 334, 335, 336, 365, 367, 368, 370, 374, 375, 376, 379, 380, 381, 382, 385, 387, 389, 391, 392, 393, 395, 399, 400, 401, 402, 405, 409, 411, 414, 417, 418, 419, 421, 422, 423, 424, 425, 438, 439, 442, 448, 449, 451, 452, 453, 455, 457, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 477, 501, 509, 529, 536, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 553, 554, 558, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 599, 602, 607, 612, 613, 615, 619, 624, 627, 632, 633, 635, 636, 637, 638, 639, 644, 645, 650, 652, 656, 658, 660, 661, 662, 663, 664, 666, 668, 670, 671, 673, 676, 677, 678, 679, 680, 681, 683, 684, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 718, 778, 782, 783, 784, 785, 802, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 844, 848, 849, 851, 852, 854, 856, 857, 859, 860, 862, 865, 866, 868, 870, 871, 883, 887, 895, 901, 902, 904, 908, 911, 914, 915, 916, 917, 937, 960, 983, 984, 988, 990, 992, 993, 994, 995, 997, 998, 1000, 1002, 1007, 1016, 1017, 1018, 1019, 1025, 1028, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "raw": [2, 17, 45, 53, 56, 75, 117, 130, 163, 184, 195, 200, 318, 327, 340, 363, 374, 382, 389, 395, 401, 413, 414, 416, 419, 422, 474, 479, 506, 507, 508, 564, 565, 566, 568, 587, 593, 594, 595, 596, 639, 682, 695, 699, 710, 790, 852, 910, 991, 994, 998, 1000, 1001, 1004, 1007, 1025, 1027, 1036, 1040, 1043, 1046, 1052], "specif": [2, 45, 52, 53, 61, 67, 73, 82, 93, 100, 103, 107, 109, 148, 158, 163, 184, 187, 192, 195, 196, 200, 227, 241, 275, 280, 297, 320, 329, 330, 334, 353, 361, 362, 363, 370, 374, 375, 382, 387, 390, 392, 393, 395, 399, 401, 405, 411, 414, 415, 418, 419, 421, 422, 423, 424, 438, 501, 508, 539, 556, 562, 569, 572, 573, 574, 575, 579, 593, 596, 598, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 645, 648, 651, 652, 657, 663, 677, 692, 702, 704, 717, 718, 750, 803, 804, 805, 810, 811, 812, 817, 829, 842, 935, 937, 938, 957, 970, 971, 972, 988, 990, 991, 993, 994, 996, 997, 999, 1001, 1002, 1004, 1008, 1010, 1011, 1012, 1017, 1028, 1030, 1035, 1039, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "enough": [2, 45, 54, 67, 75, 82, 100, 148, 151, 158, 179, 190, 196, 197, 212, 223, 255, 258, 260, 324, 361, 363, 370, 385, 387, 391, 402, 413, 414, 416, 418, 421, 572, 573, 594, 803, 806, 807, 809, 817, 830, 943, 983, 988, 991, 993, 1000, 1004, 1009, 1013, 1018, 1041, 1051, 1052], "give": [2, 45, 53, 54, 55, 64, 65, 77, 82, 87, 98, 100, 102, 107, 108, 112, 130, 154, 179, 184, 188, 190, 195, 196, 212, 214, 220, 223, 224, 225, 250, 272, 277, 282, 289, 302, 306, 309, 318, 332, 333, 342, 374, 376, 382, 384, 385, 386, 387, 389, 393, 395, 399, 400, 401, 402, 409, 412, 413, 414, 415, 416, 419, 421, 422, 424, 426, 439, 451, 452, 454, 456, 464, 477, 501, 504, 508, 538, 543, 554, 555, 556, 557, 562, 563, 569, 570, 571, 598, 599, 602, 612, 613, 643, 652, 666, 670, 681, 725, 734, 740, 743, 798, 803, 806, 807, 817, 827, 828, 829, 831, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 883, 884, 886, 887, 895, 990, 994, 997, 998, 999, 1001, 1002, 1004, 1008, 1009, 1010, 1013, 1018, 1019, 1021, 1026, 1027, 1028, 1035, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1051], "guidelin": [2, 25, 386, 390, 392, 393, 395, 414, 421], "For": [2, 30, 45, 49, 50, 53, 54, 55, 60, 67, 71, 75, 78, 82, 84, 86, 87, 91, 93, 95, 96, 98, 105, 110, 116, 121, 125, 129, 145, 147, 150, 155, 156, 158, 159, 161, 173, 174, 177, 179, 181, 186, 190, 191, 195, 196, 207, 211, 212, 223, 224, 227, 228, 231, 240, 241, 243, 245, 248, 250, 251, 253, 254, 255, 257, 264, 271, 277, 280, 281, 287, 295, 299, 300, 310, 315, 317, 318, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 349, 351, 353, 357, 361, 362, 363, 365, 366, 369, 370, 374, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 406, 409, 411, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 430, 437, 442, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 477, 479, 487, 488, 489, 490, 494, 501, 503, 508, 517, 519, 520, 524, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 602, 607, 612, 613, 614, 615, 616, 619, 624, 627, 628, 632, 633, 634, 635, 636, 637, 638, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 695, 697, 698, 700, 706, 709, 711, 712, 733, 734, 742, 745, 746, 767, 773, 782, 787, 788, 791, 792, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 892, 893, 894, 895, 896, 897, 898, 899, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 926, 932, 957, 978, 983, 984, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1012, 1017, 1018, 1019, 1026, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "concept": [2, 117, 148, 153, 257, 289, 387, 399, 414, 420, 422, 986, 994, 997, 1010, 1018], "repeat": [2, 51, 72, 104, 115, 117, 154, 177, 179, 185, 186, 196, 200, 225, 275, 280, 281, 292, 297, 339, 362, 363, 389, 396, 401, 402, 412, 413, 414, 419, 422, 423, 593, 598, 612, 613, 620, 632, 639, 664, 808, 818, 819, 822, 932, 984, 993, 1030, 1043, 1045], "across": [2, 15, 45, 54, 93, 99, 105, 120, 124, 148, 168, 195, 212, 217, 244, 275, 277, 280, 300, 320, 325, 353, 388, 389, 396, 401, 409, 414, 418, 422, 423, 426, 442, 445, 455, 457, 459, 462, 465, 467, 474, 477, 479, 493, 496, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 572, 573, 593, 596, 599, 607, 612, 613, 615, 616, 637, 638, 639, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 681, 683, 684, 690, 691, 694, 695, 696, 697, 698, 699, 700, 709, 710, 722, 735, 761, 792, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 851, 855, 862, 863, 864, 871, 875, 876, 883, 884, 886, 887, 895, 898, 899, 901, 902, 906, 907, 908, 911, 914, 915, 942, 943, 962, 965, 968, 983, 990, 992, 994, 1004, 1008, 1010, 1014, 1018, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045], "glossari": [2, 370, 387, 389, 393, 425, 426, 442, 445, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 469, 472, 474, 477, 479, 493, 496, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 599, 607, 612, 613, 615, 616, 632, 637, 639, 644, 645, 646, 647, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 778, 782, 785, 797, 801, 802, 803, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 868, 871, 883, 887, 895, 898, 899, 901, 902, 906, 907, 908, 911, 914, 915, 916, 917, 942, 943, 965, 968, 983, 984, 990, 1019, 1043], "common": [2, 54, 56, 58, 60, 131, 174, 177, 192, 193, 194, 219, 227, 228, 275, 287, 297, 331, 353, 361, 363, 369, 374, 381, 387, 389, 395, 397, 399, 400, 404, 405, 406, 412, 413, 414, 415, 418, 420, 423, 424, 452, 470, 472, 501, 595, 637, 658, 677, 678, 706, 750, 757, 773, 804, 805, 808, 818, 820, 821, 822, 823, 824, 829, 832, 867, 869, 877, 878, 879, 884, 886, 891, 892, 894, 895, 896, 897, 945, 983, 984, 990, 997, 1000, 1004, 1009, 1010, 1013, 1014, 1015, 1018, 1019, 1030, 1035, 1043, 1045, 1046, 1050], "term": [2, 45, 55, 56, 65, 71, 96, 133, 145, 148, 152, 155, 184, 194, 207, 211, 212, 223, 225, 227, 237, 240, 241, 260, 278, 282, 300, 315, 332, 353, 357, 361, 363, 376, 387, 389, 391, 399, 409, 413, 414, 416, 418, 419, 421, 448, 452, 454, 457, 464, 467, 529, 540, 543, 545, 549, 552, 554, 593, 594, 595, 596, 609, 612, 613, 637, 638, 645, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 679, 680, 681, 683, 685, 692, 700, 734, 742, 787, 788, 791, 863, 864, 881, 885, 888, 906, 907, 908, 909, 910, 911, 912, 983, 985, 986, 988, 989, 990, 991, 994, 995, 996, 998, 999, 1004, 1008, 1009, 1019, 1028, 1043, 1049, 1050, 1051], "element": [2, 92, 128, 145, 146, 157, 252, 274, 279, 287, 289, 330, 362, 365, 369, 384, 386, 387, 389, 396, 402, 412, 414, 418, 419, 421, 422, 425, 449, 451, 457, 469, 492, 513, 517, 519, 525, 527, 531, 532, 536, 542, 543, 545, 555, 562, 563, 564, 565, 569, 570, 571, 572, 573, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 622, 637, 663, 664, 671, 672, 673, 681, 682, 683, 712, 722, 731, 738, 740, 750, 767, 773, 782, 786, 792, 793, 836, 846, 847, 848, 849, 850, 852, 854, 856, 857, 861, 863, 864, 869, 885, 886, 889, 893, 906, 911, 914, 915, 916, 917, 945, 946, 947, 965, 967, 968, 980, 988, 990, 994, 995, 998, 1001, 1004, 1005, 1006, 1010, 1018, 1019, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1051], "object": [2, 45, 52, 55, 56, 60, 66, 67, 82, 88, 100, 104, 107, 108, 131, 140, 163, 168, 175, 176, 184, 192, 196, 207, 219, 223, 239, 241, 249, 257, 261, 263, 264, 278, 287, 289, 290, 292, 313, 326, 332, 333, 335, 336, 338, 362, 363, 370, 380, 381, 382, 387, 388, 390, 392, 393, 394, 396, 400, 401, 402, 406, 409, 414, 415, 416, 419, 422, 423, 424, 428, 430, 435, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 716, 723, 736, 737, 746, 762, 763, 785, 786, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 921, 926, 927, 928, 929, 930, 933, 937, 939, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 962, 979, 980, 982, 990, 991, 992, 993, 997, 1000, 1001, 1004, 1007, 1008, 1009, 1013, 1014, 1015, 1019, 1020, 1022, 1023, 1026, 1028, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "descript": [2, 54, 177, 195, 326, 380, 381, 386, 387, 391, 392, 395, 401, 414, 422, 457, 467, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 512, 515, 549, 635, 681, 766, 769, 782, 994, 1008, 1009, 1014, 1017, 1028, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "config_context": [2, 264, 374, 375, 411, 631, 904, 1042, 1048, 1051], "context": [2, 96, 264, 300, 374, 375, 381, 386, 388, 400, 401, 414, 415, 420, 421, 422, 424, 425, 442, 449, 451, 453, 455, 457, 462, 463, 466, 469, 472, 473, 477, 536, 540, 541, 542, 544, 547, 548, 549, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 631, 632, 635, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 778, 782, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 848, 849, 852, 854, 856, 857, 859, 860, 865, 868, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 962, 984, 990, 994, 1000, 1004, 1008, 1014, 1017, 1018, 1026, 1035, 1042, 1043, 1048, 1051], "global": [2, 3, 49, 51, 80, 95, 128, 223, 243, 244, 264, 289, 317, 330, 370, 374, 375, 393, 399, 401, 414, 424, 447, 457, 467, 473, 595, 631, 637, 693, 696, 697, 700, 712, 733, 734, 742, 787, 788, 791, 792, 821, 887, 902, 904, 962, 964, 983, 991, 994, 1000, 1004, 1010, 1018, 1043, 1050], "configur": [2, 3, 48, 51, 67, 108, 109, 196, 262, 264, 327, 361, 373, 385, 387, 389, 393, 395, 399, 401, 405, 406, 411, 415, 422, 423, 438, 447, 448, 450, 452, 454, 457, 467, 469, 473, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 631, 632, 633, 634, 635, 637, 640, 643, 644, 645, 646, 647, 693, 694, 695, 696, 697, 699, 700, 792, 850, 855, 858, 862, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 904, 960, 961, 962, 991, 994, 1004, 1009, 1013, 1028, 1030, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052], "sklearn": [2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 380, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 395, 396, 399, 400, 401, 404, 405, 406, 409, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "get_config": [2, 473, 785, 904, 961, 1050], "retriev": [2, 121, 195, 227, 287, 362, 369, 391, 401, 419, 422, 423, 473, 501, 595, 598, 599, 631, 658, 668, 689, 704, 730, 734, 736, 737, 760, 785, 841, 845, 878, 904, 990, 992, 994, 996, 1013, 1014, 1027, 1040, 1045, 1047, 1049, 1052], "valu": [2, 20, 27, 45, 46, 48, 52, 53, 54, 55, 57, 58, 60, 61, 62, 66, 67, 71, 75, 78, 80, 82, 84, 91, 93, 98, 99, 100, 104, 108, 110, 112, 114, 116, 118, 128, 131, 138, 140, 142, 144, 146, 147, 148, 149, 150, 152, 155, 156, 159, 160, 162, 163, 172, 173, 176, 179, 182, 183, 185, 187, 194, 195, 196, 197, 198, 200, 202, 203, 205, 207, 209, 211, 212, 213, 214, 216, 221, 223, 224, 225, 227, 229, 238, 241, 242, 245, 246, 250, 251, 252, 253, 254, 255, 256, 260, 263, 264, 266, 272, 274, 276, 278, 280, 281, 283, 285, 286, 287, 289, 291, 292, 293, 295, 300, 303, 313, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 331, 341, 349, 353, 354, 357, 361, 362, 363, 365, 370, 374, 375, 376, 379, 380, 381, 382, 384, 388, 389, 390, 392, 393, 394, 396, 399, 400, 401, 404, 405, 406, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 492, 495, 496, 498, 501, 502, 503, 506, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 773, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 927, 930, 931, 932, 933, 935, 943, 945, 951, 954, 955, 956, 957, 958, 962, 970, 971, 972, 983, 986, 987, 988, 989, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1007, 1008, 1009, 1015, 1016, 1018, 1019, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "set": [2, 3, 8, 19, 27, 37, 44, 45, 46, 47, 48, 49, 52, 54, 55, 57, 61, 65, 66, 67, 69, 70, 73, 75, 79, 80, 82, 83, 84, 87, 88, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 107, 108, 110, 116, 117, 118, 121, 124, 127, 128, 132, 133, 136, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 165, 168, 173, 174, 177, 179, 185, 186, 187, 188, 192, 194, 195, 196, 197, 198, 202, 207, 208, 211, 212, 214, 216, 218, 219, 220, 222, 223, 224, 225, 228, 231, 236, 237, 241, 243, 244, 245, 250, 251, 252, 253, 255, 256, 257, 260, 264, 266, 268, 270, 271, 274, 275, 278, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 294, 297, 299, 302, 306, 307, 308, 309, 310, 313, 316, 317, 318, 320, 322, 324, 325, 326, 327, 329, 331, 332, 336, 338, 339, 342, 343, 346, 348, 351, 353, 357, 361, 362, 363, 367, 368, 369, 370, 374, 375, 376, 379, 380, 382, 384, 385, 387, 389, 391, 392, 394, 395, 400, 401, 402, 405, 406, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 493, 494, 498, 500, 501, 502, 504, 507, 508, 509, 513, 514, 515, 520, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 702, 703, 704, 705, 706, 707, 708, 718, 719, 724, 726, 727, 730, 731, 732, 733, 734, 735, 738, 742, 744, 745, 749, 750, 752, 754, 755, 757, 760, 783, 784, 786, 787, 788, 789, 791, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 926, 927, 937, 938, 943, 947, 950, 951, 962, 963, 964, 965, 968, 969, 975, 978, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1020, 1022, 1023, 1024, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "set_config": [2, 257, 262, 264, 327, 330, 336, 374, 375, 406, 415, 442, 448, 449, 452, 454, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 599, 602, 615, 616, 631, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 810, 812, 821, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 1044, 1046, 1049, 1051], "show_vers": [2, 374, 385, 387, 395, 405, 1043], "print": [2, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 66, 69, 71, 76, 80, 81, 84, 85, 86, 87, 88, 90, 91, 96, 98, 99, 101, 105, 107, 108, 110, 111, 112, 116, 120, 121, 126, 128, 131, 135, 136, 138, 142, 145, 148, 149, 150, 151, 152, 154, 156, 158, 168, 169, 173, 174, 176, 177, 179, 180, 182, 184, 188, 194, 196, 197, 198, 200, 207, 208, 209, 210, 214, 215, 218, 219, 223, 225, 226, 227, 230, 231, 238, 239, 241, 244, 245, 248, 252, 254, 256, 257, 260, 264, 269, 274, 278, 279, 280, 281, 283, 285, 288, 289, 293, 300, 304, 311, 313, 316, 317, 318, 322, 325, 327, 329, 330, 331, 333, 335, 336, 338, 339, 342, 349, 361, 362, 363, 365, 369, 370, 374, 381, 382, 385, 388, 389, 395, 401, 406, 409, 415, 418, 421, 422, 424, 469, 472, 473, 477, 483, 495, 499, 507, 517, 518, 546, 549, 554, 555, 564, 565, 566, 567, 569, 570, 574, 575, 582, 588, 589, 590, 592, 593, 594, 596, 617, 622, 623, 635, 651, 652, 654, 655, 657, 658, 659, 661, 665, 666, 667, 668, 671, 672, 681, 682, 689, 701, 718, 722, 741, 799, 801, 802, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 835, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 863, 864, 865, 866, 867, 868, 876, 882, 886, 894, 904, 905, 906, 907, 908, 911, 913, 919, 925, 930, 955, 962, 978, 984, 994, 995, 996, 997, 1002, 1010, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1037, 1043, 1044, 1046, 1050], "debug": [2, 370, 375, 388, 390, 393, 401, 404, 632, 905, 1013, 1028, 1043, 1047], "inform": [2, 3, 45, 46, 49, 52, 53, 55, 65, 67, 72, 73, 75, 76, 87, 91, 96, 104, 105, 107, 108, 121, 123, 124, 125, 134, 148, 149, 150, 171, 173, 174, 176, 177, 179, 184, 192, 195, 196, 198, 200, 201, 202, 203, 207, 224, 227, 238, 240, 241, 257, 261, 268, 269, 271, 275, 277, 280, 281, 282, 285, 287, 289, 303, 306, 307, 310, 327, 332, 336, 352, 357, 361, 362, 363, 366, 369, 370, 374, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 392, 393, 395, 399, 400, 401, 402, 406, 409, 412, 418, 419, 421, 422, 423, 424, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 467, 469, 474, 475, 476, 478, 479, 480, 481, 487, 488, 489, 490, 497, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 515, 520, 529, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 611, 612, 613, 614, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 700, 702, 706, 709, 710, 720, 730, 734, 747, 759, 760, 761, 790, 792, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 951, 984, 986, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1005, 1008, 1010, 1014, 1015, 1017, 1018, 1025, 1026, 1027, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "baseestim": [2, 94, 140, 257, 300, 387, 400, 401, 424, 429, 431, 432, 436, 437, 438, 606, 637, 638, 935, 1035, 1042, 1045, 1047, 1049, 1050], "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 46, 53, 54, 55, 56, 58, 61, 65, 66, 67, 73, 87, 94, 95, 96, 105, 107, 108, 112, 116, 124, 128, 129, 140, 142, 143, 148, 153, 154, 155, 156, 158, 161, 163, 166, 171, 174, 179, 184, 185, 187, 194, 196, 197, 198, 201, 202, 208, 209, 211, 212, 217, 218, 223, 224, 231, 240, 241, 243, 250, 257, 258, 260, 277, 278, 283, 297, 299, 300, 313, 318, 320, 321, 323, 325, 331, 333, 343, 347, 353, 362, 365, 374, 375, 381, 382, 383, 384, 385, 388, 389, 390, 395, 399, 401, 402, 404, 413, 415, 419, 420, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 451, 452, 453, 454, 455, 457, 461, 462, 466, 468, 469, 470, 471, 472, 492, 505, 506, 513, 514, 537, 538, 540, 541, 542, 543, 544, 546, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 583, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 621, 622, 623, 626, 629, 637, 638, 640, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 669, 674, 676, 677, 678, 679, 680, 685, 687, 688, 690, 691, 692, 695, 697, 709, 722, 730, 739, 740, 741, 743, 745, 759, 760, 761, 789, 792, 799, 803, 805, 806, 807, 809, 810, 812, 817, 821, 822, 823, 824, 830, 832, 836, 837, 840, 848, 849, 850, 852, 854, 856, 857, 858, 863, 864, 867, 868, 871, 878, 879, 881, 885, 886, 887, 895, 898, 899, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 929, 937, 962, 963, 983, 985, 986, 988, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1023, 1028, 1030, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 45, 47, 48, 49, 50, 51, 52, 53, 54, 64, 66, 67, 69, 72, 73, 75, 76, 82, 83, 87, 92, 93, 94, 95, 96, 99, 101, 108, 109, 110, 111, 120, 121, 128, 129, 130, 135, 137, 141, 142, 146, 147, 148, 149, 151, 153, 155, 156, 157, 158, 160, 163, 164, 165, 166, 168, 175, 176, 177, 178, 179, 180, 184, 186, 188, 189, 190, 194, 195, 201, 204, 207, 211, 212, 213, 218, 223, 225, 227, 228, 230, 231, 240, 241, 249, 250, 251, 256, 262, 264, 265, 266, 268, 269, 271, 272, 273, 274, 277, 278, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 296, 299, 300, 301, 307, 311, 320, 322, 332, 333, 335, 352, 353, 357, 362, 363, 366, 368, 374, 375, 376, 379, 385, 387, 390, 391, 394, 395, 396, 397, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 495, 496, 497, 500, 501, 503, 506, 507, 529, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 581, 582, 584, 585, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 692, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 712, 713, 716, 717, 718, 721, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 819, 821, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 892, 894, 895, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 925, 926, 927, 929, 931, 932, 935, 937, 938, 939, 950, 951, 952, 954, 962, 978, 982, 989, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "biclustermixin": 2, "mixin": [2, 387, 401, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 606, 937, 1037, 1046, 1050], "biclust": [2, 6, 62, 107, 340, 342, 361, 362, 363, 422, 429, 454, 456, 458, 493, 516, 518, 596, 724, 799, 994, 1015, 1029, 1030, 1037, 1041], "classnameprefixfeaturesoutmixin": [2, 389, 438, 1050], "transform": [2, 7, 20, 23, 35, 37, 45, 46, 47, 49, 51, 55, 65, 82, 84, 85, 86, 89, 92, 95, 100, 106, 110, 111, 121, 123, 124, 130, 131, 133, 134, 136, 137, 141, 146, 148, 152, 162, 163, 174, 185, 191, 192, 195, 196, 197, 200, 215, 223, 224, 231, 237, 239, 241, 244, 247, 250, 252, 253, 255, 257, 258, 260, 264, 268, 276, 277, 278, 281, 289, 299, 300, 302, 308, 309, 310, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 334, 336, 349, 352, 353, 361, 363, 370, 381, 382, 383, 384, 387, 389, 392, 396, 401, 406, 411, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 430, 435, 438, 442, 446, 447, 448, 450, 452, 454, 457, 469, 470, 471, 472, 473, 487, 488, 489, 490, 493, 494, 501, 508, 513, 514, 519, 520, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 562, 564, 566, 569, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 641, 643, 644, 645, 646, 647, 658, 663, 668, 678, 681, 689, 693, 694, 695, 696, 697, 699, 706, 707, 718, 757, 758, 789, 803, 806, 807, 817, 832, 835, 841, 850, 855, 858, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 904, 906, 908, 911, 912, 935, 937, 952, 983, 984, 986, 988, 990, 991, 994, 995, 998, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1019, 1024, 1025, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "own": [2, 16, 54, 73, 148, 241, 257, 271, 300, 302, 340, 362, 375, 381, 390, 391, 392, 395, 396, 405, 414, 426, 430, 445, 459, 538, 562, 569, 651, 801, 802, 848, 849, 850, 852, 854, 856, 857, 858, 880, 914, 916, 932, 937, 962, 990, 996, 997, 1000, 1004, 1009, 1013, 1018, 1027, 1028, 1042, 1043, 1045, 1052], "name": [2, 45, 47, 48, 50, 51, 52, 53, 54, 58, 60, 65, 67, 69, 70, 75, 82, 83, 96, 100, 108, 110, 112, 118, 129, 134, 145, 146, 147, 148, 152, 155, 158, 163, 195, 196, 197, 212, 221, 223, 225, 227, 229, 230, 238, 240, 241, 243, 244, 250, 256, 257, 259, 260, 264, 268, 275, 277, 278, 281, 283, 284, 287, 289, 290, 297, 300, 308, 309, 315, 316, 322, 324, 326, 333, 334, 342, 354, 361, 362, 363, 375, 376, 381, 382, 385, 387, 389, 391, 392, 394, 395, 401, 405, 406, 409, 412, 414, 418, 421, 422, 424, 428, 430, 435, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 493, 494, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 702, 703, 704, 705, 707, 713, 714, 716, 718, 736, 737, 746, 783, 784, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 825, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 925, 926, 927, 930, 934, 935, 936, 938, 950, 951, 952, 954, 957, 964, 978, 982, 983, 988, 990, 994, 995, 1001, 1002, 1004, 1010, 1014, 1023, 1024, 1026, 1028, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "prefix": [2, 58, 107, 281, 302, 329, 387, 391, 393, 395, 424, 430, 447, 448, 450, 452, 454, 469, 472, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 809, 830, 850, 855, 858, 862, 865, 866, 872, 898, 899, 1041, 1042, 1048, 1050, 1053], "classifiermixin": [2, 140, 257, 387, 389, 401, 418, 1046], "classifi": [2, 30, 47, 48, 49, 50, 63, 66, 68, 69, 71, 73, 94, 107, 108, 109, 110, 111, 124, 133, 138, 142, 143, 144, 145, 146, 149, 150, 151, 154, 161, 164, 165, 170, 173, 174, 176, 181, 192, 197, 198, 200, 201, 213, 214, 215, 221, 223, 230, 232, 235, 238, 241, 250, 253, 255, 257, 258, 263, 274, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 295, 297, 298, 302, 308, 309, 311, 315, 318, 322, 331, 332, 336, 337, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 358, 359, 363, 382, 384, 387, 389, 392, 399, 401, 406, 414, 415, 418, 422, 423, 424, 431, 439, 440, 441, 442, 443, 444, 493, 494, 501, 509, 517, 519, 520, 527, 536, 541, 542, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 572, 573, 574, 575, 598, 599, 607, 611, 615, 627, 634, 636, 637, 638, 654, 663, 664, 671, 673, 676, 677, 678, 679, 680, 681, 702, 703, 705, 707, 708, 712, 713, 714, 716, 717, 718, 723, 725, 730, 731, 733, 734, 736, 738, 739, 742, 743, 744, 745, 746, 747, 758, 760, 786, 787, 788, 791, 792, 793, 798, 800, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 853, 854, 856, 857, 862, 863, 864, 866, 867, 873, 886, 887, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 935, 937, 983, 984, 986, 989, 990, 991, 994, 995, 996, 999, 1002, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "clustermixin": [2, 389, 1052], "cluster": [2, 50, 55, 56, 58, 59, 61, 64, 80, 81, 84, 86, 88, 89, 91, 92, 95, 97, 99, 100, 107, 116, 123, 124, 125, 134, 140, 144, 151, 159, 172, 175, 198, 220, 244, 246, 247, 248, 254, 260, 266, 267, 268, 269, 281, 306, 307, 309, 323, 330, 334, 340, 342, 351, 360, 361, 363, 369, 376, 380, 382, 384, 387, 389, 392, 399, 401, 410, 415, 420, 422, 425, 428, 429, 432, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 493, 507, 508, 509, 516, 517, 518, 519, 520, 527, 535, 546, 549, 569, 571, 594, 595, 596, 636, 696, 697, 700, 709, 710, 715, 719, 720, 722, 724, 729, 735, 740, 741, 759, 761, 782, 783, 790, 796, 797, 799, 801, 802, 858, 859, 867, 871, 878, 886, 935, 937, 955, 962, 978, 984, 991, 993, 997, 1000, 1002, 1004, 1007, 1011, 1013, 1014, 1015, 1018, 1019, 1022, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "densitymixin": 2, "densiti": [2, 52, 87, 93, 98, 103, 112, 137, 177, 192, 209, 223, 238, 241, 247, 250, 254, 265, 266, 272, 280, 286, 297, 301, 306, 307, 320, 349, 361, 382, 384, 396, 401, 414, 421, 425, 433, 449, 451, 453, 455, 457, 469, 472, 503, 507, 541, 546, 554, 555, 801, 802, 803, 846, 847, 851, 852, 899, 988, 990, 993, 997, 999, 1000, 1006, 1013, 1015, 1016, 1019, 1029, 1030, 1037, 1039, 1043, 1044, 1050, 1051], "metaestimatormixin": [2, 257], "meta": [2, 7, 30, 31, 94, 107, 141, 166, 192, 223, 257, 285, 289, 296, 299, 335, 336, 368, 370, 381, 385, 389, 391, 399, 401, 406, 411, 413, 423, 424, 434, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 501, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 586, 587, 593, 595, 596, 599, 602, 608, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 803, 804, 805, 810, 812, 819, 821, 829, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 954, 983, 995, 1014, 1015, 1016, 1030, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052], "onetoonefeaturemixin": [2, 389, 438], "get_feature_names_out": [2, 56, 60, 195, 197, 332, 361, 362, 363, 382, 389, 401, 415, 422, 430, 435, 438, 447, 448, 450, 452, 454, 469, 472, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 865, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 1004, 1048, 1049, 1050, 1051, 1052, 1053], "simpl": [2, 13, 37, 45, 57, 67, 93, 108, 112, 114, 120, 121, 128, 148, 153, 186, 192, 196, 207, 224, 240, 263, 281, 297, 301, 304, 313, 333, 345, 361, 363, 366, 370, 385, 387, 389, 390, 391, 392, 394, 399, 400, 401, 402, 406, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 428, 435, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 467, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 519, 527, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 790, 792, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 950, 986, 988, 989, 990, 991, 993, 994, 997, 1004, 1006, 1008, 1010, 1014, 1015, 1018, 1019, 1028, 1032, 1035], "outliermixin": [2, 1052], "outlier": [2, 44, 73, 82, 92, 116, 117, 118, 155, 159, 179, 192, 201, 221, 225, 226, 227, 228, 229, 237, 249, 301, 319, 324, 327, 348, 359, 382, 401, 414, 416, 421, 436, 451, 469, 471, 474, 475, 478, 479, 480, 481, 495, 496, 497, 501, 515, 517, 527, 529, 568, 636, 644, 654, 675, 676, 677, 681, 682, 683, 684, 697, 707, 832, 852, 856, 867, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 891, 892, 893, 894, 895, 896, 897, 909, 910, 912, 994, 1008, 1009, 1013, 1015, 1016, 1029, 1030, 1035, 1040, 1041, 1043], "detect": [2, 14, 44, 49, 51, 61, 73, 101, 103, 116, 117, 118, 149, 152, 159, 192, 204, 227, 237, 249, 263, 273, 280, 283, 289, 290, 301, 320, 326, 348, 382, 385, 387, 391, 399, 401, 413, 414, 416, 418, 422, 436, 451, 454, 469, 471, 474, 475, 478, 479, 480, 481, 493, 494, 496, 497, 501, 515, 517, 520, 527, 542, 543, 544, 551, 568, 569, 593, 596, 601, 636, 644, 682, 703, 707, 731, 793, 832, 852, 856, 867, 876, 879, 880, 884, 885, 886, 906, 910, 986, 990, 1013, 1014, 1015, 1016, 1018, 1023, 1028, 1029, 1030, 1035, 1038, 1041, 1042, 1043, 1045, 1047, 1048, 1050, 1051], "regressormixin": [2, 257, 389, 401, 470, 1046], "regress": [2, 14, 19, 22, 24, 31, 40, 48, 51, 55, 65, 67, 69, 92, 106, 108, 116, 117, 119, 124, 129, 130, 131, 138, 141, 142, 145, 147, 148, 149, 150, 153, 154, 157, 158, 162, 163, 169, 177, 178, 180, 188, 190, 191, 192, 194, 195, 196, 198, 201, 205, 207, 208, 209, 210, 213, 217, 218, 220, 224, 226, 227, 228, 229, 232, 234, 239, 246, 249, 251, 259, 260, 261, 264, 276, 288, 291, 293, 294, 299, 301, 303, 316, 317, 318, 320, 321, 324, 325, 331, 332, 333, 334, 336, 344, 345, 357, 361, 364, 365, 369, 375, 376, 379, 380, 382, 384, 387, 389, 392, 395, 396, 399, 400, 401, 410, 413, 416, 417, 418, 419, 421, 423, 437, 442, 469, 470, 479, 489, 494, 495, 497, 501, 506, 507, 509, 510, 517, 521, 522, 523, 529, 533, 536, 540, 542, 544, 546, 547, 548, 550, 551, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 571, 572, 575, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 611, 614, 615, 616, 619, 620, 627, 628, 630, 636, 637, 638, 639, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 699, 706, 711, 726, 727, 728, 732, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 789, 794, 795, 803, 806, 807, 809, 817, 825, 829, 830, 832, 833, 837, 839, 840, 848, 849, 854, 856, 857, 863, 864, 866, 867, 870, 871, 873, 879, 880, 881, 883, 886, 887, 890, 895, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 920, 926, 929, 931, 947, 983, 984, 986, 989, 991, 1001, 1002, 1004, 1005, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1025, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "transformermixin": [2, 257, 300, 389, 401, 470, 1043, 1050, 1051, 1052], "clone": [2, 94, 155, 187, 196, 257, 318, 336, 370, 385, 387, 390, 391, 393, 395, 401, 413, 415, 424, 442, 470, 574, 575, 602, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 809, 825, 830, 833, 837, 840, 866, 867, 903, 1014, 1035, 1041, 1043, 1047, 1051, 1052], "construct": [2, 45, 52, 107, 109, 142, 144, 146, 150, 163, 177, 241, 251, 257, 262, 264, 313, 321, 323, 330, 333, 381, 384, 389, 396, 401, 414, 415, 418, 419, 421, 422, 425, 439, 446, 447, 449, 450, 455, 457, 462, 468, 470, 472, 524, 540, 546, 549, 560, 561, 586, 592, 644, 693, 695, 696, 817, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 865, 866, 867, 868, 870, 911, 925, 927, 942, 943, 952, 953, 957, 983, 984, 986, 990, 991, 994, 995, 997, 1004, 1007, 1009, 1010, 1014, 1019, 1023, 1040, 1042, 1043, 1046, 1049], "new": [2, 45, 48, 49, 51, 88, 94, 96, 98, 107, 108, 124, 135, 142, 144, 146, 147, 148, 153, 155, 158, 162, 163, 174, 177, 179, 185, 191, 197, 198, 223, 229, 237, 250, 279, 282, 287, 299, 304, 306, 326, 330, 333, 336, 339, 342, 348, 353, 370, 375, 376, 381, 382, 384, 385, 386, 389, 390, 391, 393, 395, 396, 400, 401, 402, 405, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 436, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 513, 514, 515, 517, 528, 531, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 709, 713, 718, 719, 723, 726, 727, 728, 729, 731, 732, 733, 734, 735, 738, 743, 744, 745, 746, 747, 750, 757, 758, 761, 765, 770, 771, 773, 782, 786, 787, 788, 789, 791, 792, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 816, 817, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 892, 894, 895, 896, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 924, 926, 927, 929, 937, 938, 942, 943, 950, 951, 952, 953, 954, 957, 960, 962, 964, 969, 975, 981, 983, 984, 986, 990, 994, 995, 997, 998, 999, 1000, 1004, 1006, 1007, 1008, 1009, 1014, 1018, 1019, 1020, 1023, 1026, 1028, 1033, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "unfit": [2, 94, 415, 439, 469, 574, 575, 607, 616, 1043, 1045, 1052], "same": [2, 25, 45, 48, 49, 54, 57, 61, 66, 73, 75, 78, 82, 91, 93, 95, 96, 102, 107, 108, 109, 126, 128, 130, 133, 135, 137, 143, 145, 149, 152, 155, 156, 158, 161, 177, 179, 195, 196, 198, 209, 211, 212, 217, 223, 224, 225, 231, 241, 257, 261, 271, 275, 276, 277, 278, 280, 281, 283, 285, 286, 288, 293, 300, 303, 305, 317, 320, 321, 323, 325, 326, 329, 331, 341, 349, 361, 362, 363, 369, 370, 374, 375, 376, 381, 382, 384, 386, 387, 389, 391, 393, 396, 399, 400, 401, 402, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 435, 439, 443, 444, 451, 455, 461, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 498, 500, 501, 503, 509, 513, 514, 536, 537, 540, 541, 542, 543, 544, 545, 548, 552, 554, 556, 557, 558, 559, 562, 564, 565, 566, 567, 569, 570, 572, 573, 594, 595, 607, 608, 611, 615, 616, 618, 627, 632, 633, 634, 637, 638, 651, 654, 657, 658, 660, 663, 664, 668, 671, 672, 673, 677, 678, 679, 680, 681, 682, 683, 689, 692, 704, 709, 710, 717, 718, 720, 722, 730, 735, 736, 740, 746, 759, 760, 761, 782, 783, 784, 790, 792, 796, 798, 799, 801, 802, 803, 804, 806, 807, 809, 811, 812, 817, 821, 822, 825, 827, 828, 829, 830, 831, 832, 833, 848, 849, 850, 854, 856, 857, 858, 869, 870, 871, 875, 876, 878, 880, 881, 882, 883, 884, 885, 886, 888, 895, 906, 907, 914, 916, 928, 932, 943, 960, 965, 968, 969, 979, 983, 984, 986, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1013, 1014, 1023, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "paramet": [2, 25, 27, 45, 46, 50, 51, 52, 55, 56, 57, 67, 73, 82, 92, 93, 96, 98, 99, 100, 108, 109, 110, 115, 117, 118, 126, 128, 140, 142, 144, 146, 148, 151, 152, 153, 156, 157, 158, 168, 174, 177, 179, 180, 183, 184, 185, 186, 187, 188, 190, 191, 192, 195, 196, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 223, 225, 227, 228, 231, 232, 240, 241, 247, 248, 250, 252, 255, 256, 257, 266, 267, 268, 269, 271, 272, 274, 275, 279, 280, 281, 282, 284, 285, 288, 291, 292, 293, 295, 297, 300, 302, 303, 306, 307, 313, 315, 316, 318, 320, 321, 322, 325, 329, 330, 332, 333, 334, 335, 342, 344, 346, 351, 353, 354, 356, 358, 359, 361, 362, 363, 365, 366, 367, 368, 370, 374, 375, 376, 379, 380, 382, 390, 392, 393, 394, 395, 396, 399, 406, 410, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1010, 1013, 1014, 1015, 1020, 1022, 1024, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "is_classifi": [2, 389, 401], "return": [2, 30, 45, 47, 48, 49, 51, 52, 54, 55, 57, 58, 60, 64, 65, 67, 72, 73, 75, 78, 86, 91, 94, 99, 107, 112, 126, 135, 137, 140, 142, 145, 147, 154, 155, 158, 159, 163, 177, 182, 185, 187, 191, 198, 202, 203, 211, 212, 215, 223, 224, 231, 232, 233, 241, 257, 260, 263, 264, 269, 271, 275, 276, 277, 278, 279, 280, 281, 283, 284, 287, 294, 300, 305, 310, 313, 318, 320, 322, 325, 329, 345, 349, 361, 363, 365, 369, 374, 380, 381, 382, 387, 388, 389, 393, 394, 396, 399, 401, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 975, 978, 979, 980, 981, 982, 984, 994, 997, 1001, 1002, 1009, 1010, 1014, 1019, 1024, 1026, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "true": [2, 45, 46, 47, 48, 49, 51, 52, 54, 56, 57, 58, 60, 66, 67, 69, 71, 73, 75, 82, 87, 88, 91, 92, 93, 95, 96, 98, 101, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 120, 126, 128, 129, 130, 131, 133, 138, 140, 142, 146, 148, 152, 154, 155, 157, 158, 159, 160, 163, 164, 166, 168, 169, 173, 176, 179, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 207, 208, 210, 211, 212, 214, 216, 218, 219, 220, 223, 225, 226, 227, 230, 231, 237, 238, 239, 241, 243, 246, 247, 250, 251, 254, 256, 257, 258, 259, 260, 263, 264, 266, 269, 271, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 309, 313, 315, 316, 317, 318, 321, 325, 326, 327, 329, 331, 333, 334, 335, 336, 339, 341, 342, 343, 352, 356, 357, 358, 361, 362, 363, 365, 366, 369, 370, 374, 375, 380, 382, 383, 385, 387, 388, 389, 392, 393, 394, 396, 400, 401, 404, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 431, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 524, 527, 528, 529, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 723, 724, 725, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 742, 743, 744, 745, 746, 747, 754, 755, 756, 758, 760, 765, 771, 773, 782, 786, 787, 788, 789, 790, 791, 792, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 821, 822, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 925, 926, 927, 937, 943, 944, 955, 956, 959, 960, 964, 965, 966, 967, 975, 980, 982, 983, 984, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1019, 1023, 1024, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "given": [2, 8, 30, 48, 51, 52, 54, 67, 69, 75, 87, 96, 98, 114, 120, 129, 133, 148, 158, 159, 161, 163, 179, 186, 195, 196, 207, 223, 224, 227, 241, 244, 250, 254, 255, 257, 259, 260, 261, 276, 280, 281, 282, 283, 289, 303, 306, 307, 308, 322, 326, 332, 361, 362, 363, 368, 374, 376, 382, 386, 387, 389, 391, 393, 395, 396, 399, 401, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 431, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 461, 463, 464, 465, 466, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 489, 492, 501, 506, 508, 510, 528, 538, 539, 541, 543, 544, 545, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 598, 599, 606, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 636, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 692, 693, 695, 696, 702, 703, 704, 705, 706, 707, 709, 710, 711, 717, 719, 722, 723, 725, 728, 730, 731, 738, 740, 741, 744, 756, 759, 760, 762, 763, 768, 778, 782, 785, 786, 788, 791, 792, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 825, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 892, 893, 895, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 930, 931, 932, 950, 951, 952, 953, 978, 982, 983, 986, 988, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1018, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "is_regressor": [2, 401], "regressor": [2, 30, 45, 112, 121, 156, 162, 163, 166, 179, 184, 191, 192, 195, 201, 203, 205, 207, 223, 224, 226, 229, 240, 241, 257, 283, 294, 305, 325, 330, 331, 374, 387, 389, 399, 401, 413, 415, 424, 437, 440, 441, 470, 487, 488, 489, 490, 529, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 570, 571, 572, 573, 574, 575, 610, 611, 614, 616, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 706, 834, 835, 838, 839, 840, 849, 857, 862, 863, 864, 867, 873, 881, 886, 887, 907, 909, 912, 914, 915, 916, 917, 920, 935, 937, 983, 984, 990, 994, 995, 997, 1002, 1008, 1013, 1015, 1016, 1023, 1030, 1035, 1036, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1050, 1052], "calibratedclassifiercv": [2, 64, 65, 66, 370, 401, 406, 413, 681, 983, 1009, 1014, 1039, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "calibr": [2, 54, 69, 145, 158, 165, 241, 253, 280, 282, 401, 406, 442, 443, 444, 517, 520, 569, 574, 663, 664, 681, 714, 733, 745, 788, 791, 792, 832, 844, 903, 906, 934, 983, 990, 994, 1007, 1009, 1015, 1016, 1030, 1032, 1039, 1041], "isoton": [2, 64, 65, 112, 192, 249, 442, 640, 641, 642, 662, 929, 1015, 1016, 1030, 1036, 1037, 1038, 1039, 1041, 1048, 1051], "logist": [2, 65, 67, 69, 106, 108, 112, 124, 138, 147, 169, 192, 201, 208, 210, 218, 220, 221, 227, 229, 232, 234, 240, 251, 253, 264, 288, 291, 299, 316, 317, 318, 325, 333, 345, 357, 361, 401, 402, 413, 415, 421, 423, 424, 442, 494, 501, 507, 509, 517, 546, 564, 566, 615, 636, 651, 662, 663, 664, 671, 673, 681, 745, 803, 817, 832, 862, 863, 864, 866, 886, 913, 929, 931, 994, 998, 999, 1008, 1009, 1015, 1016, 1018, 1024, 1030, 1039, 1042, 1043, 1045, 1046], "calibration_curv": [2, 64, 413, 442, 443, 1044, 1049, 1053], "predict": [2, 5, 13, 27, 44, 47, 48, 49, 52, 63, 65, 66, 67, 69, 71, 73, 75, 82, 86, 94, 95, 96, 100, 107, 108, 109, 110, 112, 120, 138, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 156, 158, 159, 160, 161, 162, 163, 164, 165, 169, 170, 174, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 195, 196, 197, 198, 200, 202, 205, 206, 207, 215, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 231, 232, 237, 238, 240, 241, 250, 251, 253, 255, 257, 259, 267, 268, 269, 270, 271, 272, 273, 274, 278, 280, 282, 283, 286, 289, 290, 294, 297, 299, 303, 306, 307, 308, 311, 312, 318, 320, 321, 325, 326, 329, 330, 331, 332, 333, 335, 336, 339, 341, 342, 343, 345, 346, 348, 349, 353, 355, 356, 357, 358, 361, 362, 366, 367, 368, 369, 370, 373, 375, 379, 382, 384, 387, 389, 394, 396, 401, 404, 406, 409, 410, 411, 413, 414, 415, 417, 419, 421, 422, 423, 428, 431, 436, 437, 442, 443, 444, 445, 447, 448, 449, 452, 453, 454, 470, 474, 487, 488, 489, 492, 506, 513, 529, 539, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 587, 598, 599, 607, 611, 615, 616, 618, 619, 620, 621, 627, 630, 632, 633, 635, 636, 637, 638, 639, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 717, 719, 720, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 742, 745, 746, 747, 750, 752, 754, 756, 760, 786, 787, 788, 789, 790, 791, 792, 793, 797, 798, 800, 801, 802, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 852, 853, 856, 857, 863, 864, 866, 873, 886, 887, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 968, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "curv": [2, 29, 49, 52, 63, 64, 66, 75, 112, 114, 145, 147, 148, 154, 159, 192, 201, 202, 213, 223, 241, 243, 245, 248, 249, 251, 253, 260, 261, 265, 266, 267, 268, 270, 271, 273, 280, 290, 316, 321, 324, 329, 349, 353, 367, 394, 410, 418, 420, 442, 443, 444, 507, 515, 520, 526, 530, 569, 637, 650, 663, 703, 705, 707, 711, 712, 713, 714, 731, 733, 745, 746, 786, 788, 791, 792, 793, 801, 802, 809, 820, 825, 830, 832, 833, 844, 867, 886, 906, 911, 990, 991, 993, 994, 1000, 1010, 1015, 1016, 1018, 1030, 1032, 1037, 1038, 1041, 1045, 1047, 1048, 1049, 1050, 1051], "calibrationdisplai": [2, 65, 67, 413, 934, 1048, 1049, 1053], "known": [2, 52, 58, 65, 67, 77, 87, 95, 96, 117, 136, 137, 163, 184, 186, 191, 207, 223, 224, 241, 250, 280, 282, 289, 309, 313, 321, 332, 338, 346, 353, 362, 376, 382, 384, 385, 387, 390, 395, 399, 401, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 443, 468, 487, 489, 503, 513, 514, 549, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 593, 594, 596, 599, 614, 627, 638, 663, 664, 677, 687, 688, 699, 709, 715, 718, 723, 733, 747, 759, 761, 799, 835, 841, 842, 843, 844, 845, 848, 853, 856, 862, 890, 914, 915, 916, 917, 984, 986, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1004, 1009, 1010, 1019, 1024, 1026, 1027], "reliabl": [2, 65, 67, 413, 418, 443, 444, 651, 1010, 1018], "diagram": [2, 65, 67, 108, 262, 330, 336, 389, 413, 414, 443, 444, 473, 904, 1004, 1046, 1047, 1052], "visual": [2, 27, 44, 45, 50, 54, 57, 61, 65, 69, 71, 81, 84, 87, 90, 95, 98, 99, 116, 125, 127, 130, 132, 135, 137, 147, 148, 156, 158, 159, 161, 165, 166, 187, 191, 192, 196, 198, 207, 214, 223, 225, 241, 243, 244, 248, 249, 252, 255, 261, 262, 271, 273, 274, 276, 277, 281, 282, 285, 287, 289, 290, 305, 309, 310, 314, 316, 320, 324, 325, 329, 331, 339, 353, 379, 383, 385, 393, 394, 412, 416, 418, 419, 420, 421, 443, 446, 450, 451, 459, 477, 501, 507, 509, 512, 515, 519, 527, 537, 539, 546, 569, 571, 636, 638, 663, 694, 697, 702, 703, 705, 706, 707, 723, 731, 786, 793, 804, 805, 808, 809, 820, 821, 822, 823, 824, 825, 832, 863, 867, 871, 875, 876, 878, 882, 883, 884, 886, 908, 911, 920, 939, 989, 991, 992, 997, 998, 1000, 1001, 1004, 1010, 1013, 1015, 1019, 1030, 1038, 1045, 1046, 1047, 1049], "affinitypropag": [2, 76, 82, 333, 414, 1035, 1038, 1039, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "perform": [2, 25, 27, 29, 30, 41, 45, 48, 54, 60, 64, 65, 66, 71, 74, 76, 86, 87, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 111, 114, 121, 131, 137, 140, 142, 148, 150, 152, 153, 154, 156, 157, 158, 162, 163, 168, 172, 176, 177, 180, 188, 190, 191, 192, 195, 196, 197, 198, 200, 207, 212, 223, 225, 227, 229, 230, 231, 240, 241, 244, 245, 247, 250, 255, 258, 260, 267, 268, 271, 273, 275, 276, 277, 278, 280, 281, 282, 285, 286, 288, 289, 291, 293, 295, 297, 299, 300, 313, 318, 320, 322, 324, 326, 327, 329, 335, 336, 337, 339, 340, 349, 352, 353, 355, 357, 361, 363, 370, 373, 375, 376, 382, 384, 389, 390, 391, 393, 395, 396, 399, 400, 401, 404, 406, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 436, 445, 447, 448, 449, 451, 452, 453, 455, 457, 459, 460, 464, 466, 473, 474, 487, 488, 489, 490, 499, 507, 517, 520, 536, 537, 538, 540, 542, 547, 548, 549, 550, 551, 553, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 599, 606, 607, 608, 615, 616, 632, 635, 636, 643, 645, 650, 656, 659, 660, 661, 663, 669, 670, 671, 672, 673, 675, 678, 680, 681, 682, 683, 687, 688, 690, 692, 694, 695, 698, 699, 702, 708, 709, 710, 712, 713, 717, 718, 730, 733, 734, 742, 744, 746, 759, 760, 761, 782, 787, 788, 790, 791, 792, 798, 799, 800, 801, 802, 803, 806, 807, 814, 815, 817, 821, 827, 828, 829, 831, 832, 835, 838, 839, 841, 842, 843, 844, 845, 846, 847, 853, 855, 861, 862, 863, 864, 866, 867, 869, 872, 873, 875, 876, 878, 879, 880, 882, 883, 886, 887, 889, 891, 892, 893, 895, 896, 897, 901, 902, 904, 908, 909, 910, 911, 912, 914, 915, 916, 917, 926, 927, 967, 978, 983, 984, 986, 988, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1018, 1019, 1020, 1023, 1026, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "affin": [2, 27, 74, 75, 82, 87, 101, 102, 192, 320, 340, 379, 389, 401, 419, 445, 446, 457, 459, 467, 517, 540, 696, 700, 709, 710, 722, 741, 797, 799, 902, 988, 991, 994, 1015, 1029, 1030, 1035, 1036, 1039, 1045, 1046, 1048, 1050], "propag": [2, 61, 71, 74, 75, 87, 101, 102, 192, 337, 382, 445, 459, 507, 517, 519, 702, 709, 710, 718, 719, 722, 723, 741, 797, 799, 866, 880, 901, 902, 903, 960, 961, 998, 1015, 1016, 1029, 1030, 1035, 1047, 1050], "agglomerativeclust": [2, 77, 78, 79, 82, 85, 90, 94, 100, 105, 401, 414, 445, 447, 450, 1027, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052], "agglom": [2, 53, 61, 74, 75, 80, 82, 85, 94, 98, 100, 104, 105, 123, 175, 192, 244, 246, 414, 446, 450, 507, 696, 782, 859, 1015, 1038], "birch": [2, 74, 78, 82, 102, 125, 192, 333, 376, 401, 451, 454, 517, 1015, 1029, 1030, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "implement": [2, 13, 30, 47, 48, 54, 55, 57, 58, 84, 94, 117, 128, 148, 158, 191, 198, 200, 207, 208, 212, 237, 241, 243, 250, 256, 257, 278, 280, 289, 297, 299, 300, 302, 305, 323, 329, 330, 331, 332, 333, 335, 361, 363, 374, 375, 376, 381, 382, 384, 385, 387, 388, 389, 392, 393, 395, 396, 401, 405, 406, 409, 411, 412, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 442, 447, 448, 449, 451, 452, 453, 454, 455, 480, 498, 501, 513, 537, 538, 539, 540, 541, 543, 546, 547, 548, 558, 559, 560, 562, 563, 566, 567, 568, 572, 577, 587, 593, 594, 596, 598, 602, 606, 615, 616, 637, 638, 645, 646, 650, 651, 658, 662, 663, 664, 668, 669, 673, 676, 677, 679, 680, 681, 682, 683, 689, 690, 691, 692, 693, 696, 697, 700, 712, 716, 725, 739, 742, 746, 782, 786, 792, 793, 801, 803, 806, 807, 809, 817, 821, 822, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 848, 849, 851, 854, 856, 857, 862, 863, 864, 866, 888, 896, 897, 903, 906, 907, 908, 909, 910, 911, 912, 942, 943, 951, 954, 959, 962, 963, 965, 983, 984, 986, 988, 990, 991, 992, 993, 995, 996, 998, 999, 1000, 1004, 1006, 1007, 1010, 1011, 1013, 1014, 1016, 1018, 1019, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 50, 55, 58, 59, 68, 70, 74, 75, 80, 81, 83, 84, 88, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 115, 116, 120, 128, 130, 142, 143, 144, 148, 151, 159, 192, 200, 210, 212, 226, 237, 239, 245, 247, 249, 253, 254, 260, 267, 268, 269, 272, 277, 280, 289, 300, 306, 307, 309, 313, 320, 322, 325, 329, 330, 331, 334, 336, 340, 342, 348, 361, 362, 363, 370, 374, 376, 380, 381, 382, 383, 384, 387, 388, 389, 390, 395, 396, 400, 401, 404, 411, 412, 414, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 474, 479, 480, 483, 487, 488, 489, 493, 508, 516, 517, 518, 519, 520, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 558, 559, 560, 561, 564, 565, 568, 596, 608, 609, 615, 616, 640, 642, 644, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 709, 710, 713, 722, 724, 739, 741, 747, 778, 782, 783, 797, 799, 801, 802, 834, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 862, 867, 871, 873, 886, 890, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 926, 942, 943, 945, 959, 963, 969, 984, 986, 989, 991, 992, 993, 994, 996, 999, 1000, 1004, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1025, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "bisectingkmean": [2, 81, 414, 1049, 1050, 1051], "bisect": [2, 74, 95, 97, 98, 99, 188, 192, 276, 448, 452, 517, 1015, 1049], "k": [2, 33, 47, 52, 53, 56, 57, 58, 60, 64, 66, 69, 70, 74, 75, 76, 80, 84, 87, 88, 91, 93, 94, 98, 101, 103, 111, 112, 116, 124, 125, 126, 128, 131, 134, 135, 142, 144, 151, 155, 159, 161, 162, 164, 165, 168, 170, 173, 174, 177, 180, 182, 183, 187, 188, 191, 192, 195, 196, 197, 198, 203, 205, 206, 208, 217, 220, 225, 227, 235, 237, 254, 256, 258, 259, 260, 266, 269, 276, 280, 283, 284, 289, 290, 293, 300, 302, 305, 306, 307, 308, 309, 311, 312, 313, 321, 322, 323, 324, 327, 329, 333, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 360, 361, 363, 369, 370, 375, 381, 382, 384, 387, 395, 396, 399, 401, 406, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 445, 448, 451, 452, 453, 454, 455, 456, 457, 458, 464, 465, 467, 474, 477, 493, 507, 509, 511, 517, 528, 536, 542, 546, 549, 550, 551, 554, 555, 558, 560, 562, 563, 564, 586, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 636, 644, 645, 653, 655, 656, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 672, 674, 684, 685, 687, 688, 689, 690, 691, 693, 696, 700, 701, 709, 710, 713, 722, 730, 741, 747, 760, 762, 763, 765, 770, 773, 778, 779, 780, 781, 783, 797, 798, 799, 801, 802, 804, 808, 810, 811, 812, 815, 818, 819, 821, 822, 824, 830, 841, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 867, 871, 872, 873, 877, 878, 879, 881, 882, 886, 894, 899, 913, 921, 929, 938, 943, 968, 983, 984, 986, 987, 988, 990, 991, 992, 993, 996, 998, 999, 1000, 1002, 1007, 1008, 1009, 1010, 1013, 1015, 1023, 1029, 1030, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "mean": [2, 45, 46, 47, 49, 52, 54, 55, 56, 58, 60, 64, 65, 67, 73, 74, 75, 76, 78, 80, 82, 84, 87, 88, 91, 92, 93, 98, 108, 115, 116, 117, 118, 121, 124, 126, 128, 131, 132, 133, 134, 135, 142, 144, 145, 148, 151, 152, 155, 156, 158, 163, 164, 165, 176, 177, 179, 184, 186, 188, 190, 192, 195, 196, 203, 205, 212, 214, 216, 219, 220, 223, 225, 229, 230, 232, 238, 239, 240, 241, 246, 248, 250, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 267, 268, 269, 271, 272, 276, 277, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 297, 299, 300, 311, 320, 323, 325, 326, 327, 329, 332, 335, 341, 349, 352, 353, 357, 359, 360, 361, 363, 370, 374, 379, 381, 382, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 399, 400, 401, 406, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 437, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 467, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 506, 507, 509, 511, 517, 524, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 593, 594, 595, 596, 599, 602, 607, 611, 612, 613, 614, 615, 616, 618, 627, 632, 633, 635, 637, 638, 639, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 689, 693, 694, 695, 696, 697, 698, 699, 700, 709, 710, 712, 714, 717, 718, 721, 722, 728, 730, 733, 734, 735, 740, 741, 742, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 778, 782, 783, 785, 787, 788, 789, 791, 792, 794, 795, 796, 797, 799, 801, 802, 803, 806, 807, 809, 817, 821, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 852, 853, 854, 856, 857, 859, 860, 862, 863, 864, 865, 867, 868, 870, 871, 875, 876, 878, 882, 884, 886, 887, 892, 894, 895, 897, 899, 901, 902, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 922, 926, 927, 929, 968, 969, 975, 979, 983, 984, 985, 988, 990, 991, 993, 996, 997, 998, 999, 1001, 1002, 1007, 1008, 1009, 1010, 1013, 1015, 1018, 1023, 1026, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "dbscan": [2, 74, 75, 76, 82, 93, 98, 101, 103, 192, 335, 340, 399, 401, 451, 455, 457, 460, 517, 709, 710, 722, 741, 797, 799, 858, 886, 997, 1015, 1029, 1030, 1035, 1037, 1039, 1040, 1042, 1043, 1044, 1051, 1052], "vector": [2, 17, 39, 48, 49, 50, 51, 53, 56, 57, 60, 61, 66, 69, 71, 74, 78, 86, 109, 123, 128, 130, 131, 173, 179, 187, 204, 210, 227, 228, 235, 239, 255, 256, 263, 278, 280, 281, 285, 306, 318, 320, 343, 345, 346, 349, 350, 351, 352, 353, 354, 357, 359, 362, 374, 376, 382, 392, 393, 396, 399, 401, 412, 413, 414, 416, 417, 418, 419, 421, 424, 425, 426, 442, 448, 449, 450, 452, 454, 455, 456, 458, 469, 470, 472, 473, 487, 488, 489, 490, 492, 494, 502, 514, 517, 526, 529, 536, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 557, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 636, 643, 645, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 696, 697, 698, 700, 704, 724, 739, 767, 772, 773, 774, 775, 777, 778, 779, 781, 782, 803, 806, 807, 817, 830, 833, 834, 835, 841, 842, 843, 844, 845, 848, 849, 850, 852, 853, 854, 856, 857, 858, 863, 864, 871, 873, 878, 886, 890, 893, 904, 906, 907, 908, 909, 910, 911, 912, 913, 926, 940, 942, 943, 957, 963, 983, 986, 987, 988, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1004, 1008, 1010, 1015, 1016, 1019, 1022, 1025, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1046, 1048, 1053], "arrai": [2, 47, 48, 49, 51, 52, 53, 54, 55, 57, 60, 71, 72, 73, 78, 82, 84, 86, 91, 92, 99, 100, 102, 107, 109, 117, 120, 126, 129, 130, 154, 156, 158, 159, 162, 165, 174, 177, 180, 181, 182, 187, 195, 202, 204, 207, 216, 217, 220, 223, 224, 230, 240, 244, 245, 250, 254, 257, 260, 261, 264, 266, 267, 268, 270, 271, 275, 276, 278, 280, 281, 284, 285, 289, 299, 313, 323, 329, 332, 333, 335, 336, 339, 345, 352, 353, 361, 368, 370, 374, 375, 380, 381, 382, 387, 388, 389, 390, 392, 393, 395, 397, 399, 400, 401, 409, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 520, 524, 528, 529, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 588, 589, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 931, 932, 941, 942, 943, 944, 945, 947, 948, 949, 956, 957, 958, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 984, 989, 990, 992, 994, 995, 997, 998, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1018, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "distanc": [2, 37, 77, 78, 93, 95, 98, 99, 103, 105, 113, 117, 133, 177, 190, 192, 198, 209, 224, 226, 243, 245, 248, 254, 260, 300, 302, 303, 308, 310, 312, 313, 320, 325, 329, 333, 334, 353, 361, 362, 374, 384, 396, 399, 401, 412, 414, 416, 419, 420, 424, 425, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 460, 461, 462, 463, 464, 466, 467, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 543, 545, 552, 612, 613, 620, 624, 625, 627, 628, 633, 663, 664, 671, 673, 679, 680, 681, 682, 683, 693, 694, 695, 697, 698, 699, 700, 701, 704, 708, 729, 738, 762, 764, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 782, 783, 784, 785, 796, 797, 800, 835, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 885, 900, 904, 906, 908, 910, 911, 912, 914, 915, 916, 917, 984, 988, 991, 992, 994, 997, 1000, 1004, 1006, 1008, 1009, 1014, 1015, 1026, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "matrix": [2, 8, 11, 44, 47, 48, 50, 54, 55, 60, 61, 62, 71, 73, 77, 79, 82, 92, 100, 107, 115, 116, 117, 118, 120, 128, 129, 130, 138, 186, 192, 198, 201, 209, 224, 228, 251, 254, 255, 257, 271, 273, 287, 317, 333, 336, 338, 339, 353, 361, 362, 363, 369, 374, 382, 383, 384, 387, 389, 393, 396, 399, 400, 401, 412, 415, 416, 417, 422, 423, 424, 425, 426, 436, 437, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 459, 462, 464, 465, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 497, 501, 502, 505, 506, 507, 508, 509, 510, 513, 514, 515, 524, 526, 528, 529, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 598, 599, 608, 609, 610, 611, 612, 613, 614, 616, 625, 634, 635, 636, 638, 640, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 717, 718, 719, 720, 721, 723, 733, 734, 735, 738, 742, 743, 744, 745, 758, 759, 762, 763, 764, 765, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 791, 792, 796, 797, 800, 801, 802, 803, 806, 807, 817, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 875, 877, 878, 879, 881, 883, 884, 885, 886, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 922, 924, 925, 926, 927, 932, 940, 941, 942, 943, 944, 947, 948, 949, 957, 958, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 984, 986, 988, 990, 991, 995, 996, 997, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "featureagglomer": [2, 89, 92, 445, 446, 1011, 1027, 1038, 1044, 1045, 1048, 1049, 1051, 1052], "agglomer": [2, 46, 71, 74, 85, 88, 123, 173, 175, 192, 205, 222, 259, 293, 379, 414, 422, 450, 507, 605, 611, 650, 803, 808, 866, 1015, 1030], "featur": [2, 8, 16, 17, 18, 23, 25, 32, 44, 46, 47, 48, 49, 51, 52, 56, 60, 61, 65, 66, 67, 69, 70, 71, 72, 74, 80, 83, 85, 88, 96, 98, 101, 106, 107, 108, 109, 110, 116, 117, 120, 121, 123, 124, 125, 126, 128, 130, 132, 134, 135, 136, 138, 141, 143, 146, 148, 151, 155, 157, 162, 163, 164, 166, 168, 169, 172, 174, 179, 180, 181, 184, 185, 187, 190, 191, 193, 194, 195, 196, 201, 203, 205, 206, 207, 209, 210, 212, 213, 219, 222, 223, 224, 225, 227, 228, 230, 231, 232, 238, 239, 240, 244, 249, 252, 254, 257, 259, 260, 263, 264, 273, 275, 277, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 299, 303, 304, 305, 308, 309, 311, 314, 315, 317, 319, 320, 323, 327, 328, 330, 333, 334, 335, 336, 338, 339, 341, 342, 344, 345, 346, 349, 353, 357, 360, 363, 366, 368, 369, 370, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 399, 400, 401, 402, 404, 405, 409, 413, 414, 416, 417, 418, 419, 420, 424, 425, 426, 427, 428, 430, 435, 437, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 584, 585, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 623, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 691, 692, 693, 694, 695, 696, 697, 702, 706, 707, 708, 718, 726, 727, 728, 745, 746, 749, 750, 752, 762, 763, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 785, 789, 792, 794, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 927, 940, 959, 969, 970, 971, 975, 983, 986, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "hdbscan": [2, 74, 82, 87, 103, 192, 254, 449, 517, 886, 984, 1013, 1015, 1029, 1030, 1051, 1052], "hierarch": [2, 55, 62, 74, 77, 78, 82, 84, 90, 91, 92, 94, 95, 192, 198, 247, 333, 369, 401, 422, 446, 448, 450, 451, 509, 517, 519, 527, 535, 552, 735, 859, 886, 1011, 1014, 1015, 1029, 1030, 1035, 1038, 1039, 1051], "kmean": [2, 60, 61, 74, 81, 83, 84, 86, 88, 91, 95, 96, 99, 192, 269, 272, 323, 333, 362, 396, 406, 414, 445, 448, 453, 454, 457, 467, 517, 715, 796, 797, 801, 802, 871, 997, 1004, 1014, 1015, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "meanshift": [2, 82, 333, 414, 445, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1050, 1051], "shift": [2, 54, 74, 76, 82, 87, 102, 192, 202, 246, 271, 305, 318, 320, 353, 416, 420, 445, 453, 463, 466, 474, 517, 520, 694, 698, 852, 875, 1004, 1015, 1029, 1030, 1035, 1039, 1043], "flat": [2, 81, 128, 196, 243, 244, 245, 278, 414, 422, 445, 451, 453, 466, 514, 1001, 1027, 1035, 1036, 1051], "kernel": [2, 23, 24, 27, 44, 47, 50, 51, 52, 57, 69, 70, 89, 95, 111, 121, 127, 129, 137, 140, 164, 170, 175, 178, 180, 181, 182, 183, 186, 190, 205, 206, 224, 232, 237, 249, 250, 258, 262, 274, 278, 280, 282, 285, 286, 290, 294, 295, 301, 306, 311, 325, 332, 340, 343, 344, 346, 347, 349, 350, 351, 352, 354, 355, 358, 370, 374, 379, 389, 399, 401, 413, 414, 415, 418, 421, 422, 437, 445, 453, 457, 466, 467, 470, 487, 488, 489, 496, 501, 503, 507, 509, 519, 538, 539, 540, 546, 549, 559, 561, 563, 565, 567, 570, 573, 575, 598, 599, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 682, 683, 684, 693, 695, 696, 697, 700, 739, 762, 763, 765, 770, 771, 778, 779, 780, 781, 803, 809, 814, 817, 832, 834, 839, 840, 846, 847, 849, 851, 857, 864, 866, 867, 872, 876, 878, 879, 881, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 915, 917, 983, 989, 990, 991, 994, 995, 997, 1000, 1007, 1008, 1015, 1016, 1019, 1021, 1023, 1024, 1029, 1030, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "minibatchkmean": [2, 60, 74, 76, 78, 81, 82, 88, 96, 97, 99, 101, 125, 192, 362, 376, 414, 419, 445, 447, 452, 517, 783, 1015, 1036, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mini": [2, 49, 102, 128, 333, 376, 401, 422, 445, 447, 452, 454, 456, 458, 536, 538, 541, 542, 543, 544, 545, 547, 548, 550, 551, 998, 999, 1035, 1046, 1048], "batch": [2, 49, 52, 102, 128, 132, 313, 333, 376, 396, 401, 422, 445, 447, 452, 454, 456, 458, 536, 538, 539, 541, 542, 543, 544, 545, 547, 548, 550, 551, 669, 690, 691, 808, 821, 822, 841, 842, 843, 844, 845, 863, 864, 875, 876, 886, 899, 946, 960, 998, 999, 1008, 1035, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1051], "optic": [2, 74, 82, 192, 333, 380, 425, 449, 451, 460, 461, 462, 507, 1015, 1029, 1030, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "spectralbiclust": [2, 412, 458, 1037, 1041, 1042, 1046], "spectral": [2, 55, 59, 74, 82, 84, 87, 93, 107, 192, 244, 245, 340, 342, 361, 362, 363, 387, 422, 454, 456, 457, 458, 467, 474, 475, 476, 477, 478, 479, 480, 481, 493, 516, 518, 596, 693, 694, 695, 696, 697, 700, 724, 799, 997, 1007, 1015, 1029, 1030, 1035, 1036], "kluger": [2, 412, 456, 518], "2003": [2, 53, 184, 412, 414, 419, 422, 456, 457, 467, 518, 520, 694, 698, 841, 843, 990, 991, 996, 1006, 1043], "spectralclust": [2, 82, 333, 414, 445, 997, 1035, 1036, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "appli": [2, 32, 50, 54, 56, 60, 65, 67, 71, 78, 82, 84, 85, 93, 94, 96, 100, 108, 112, 121, 124, 128, 129, 134, 136, 138, 147, 148, 153, 155, 173, 179, 195, 197, 207, 212, 227, 228, 237, 243, 244, 245, 250, 255, 257, 280, 281, 283, 292, 299, 309, 320, 324, 325, 330, 349, 353, 363, 369, 370, 374, 379, 387, 389, 395, 399, 400, 401, 406, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 445, 451, 457, 467, 469, 470, 472, 474, 479, 487, 488, 489, 490, 513, 514, 521, 522, 523, 529, 536, 537, 538, 539, 540, 542, 544, 546, 547, 548, 553, 554, 555, 558, 559, 562, 563, 564, 565, 569, 570, 571, 593, 594, 595, 596, 632, 637, 638, 643, 644, 646, 647, 663, 664, 673, 681, 682, 683, 696, 704, 706, 712, 730, 760, 762, 763, 785, 792, 796, 797, 803, 817, 832, 835, 841, 842, 843, 844, 845, 855, 865, 866, 875, 882, 883, 886, 891, 892, 894, 895, 896, 897, 902, 913, 914, 915, 916, 917, 926, 932, 935, 942, 943, 966, 984, 986, 990, 991, 992, 993, 994, 996, 998, 1000, 1002, 1004, 1008, 1009, 1010, 1011, 1012, 1018, 1036, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "project": [2, 37, 47, 49, 52, 55, 58, 72, 83, 93, 96, 105, 124, 127, 128, 130, 132, 134, 138, 144, 183, 185, 187, 188, 192, 196, 215, 220, 232, 243, 244, 245, 247, 249, 255, 258, 267, 275, 304, 309, 313, 318, 346, 354, 362, 366, 374, 379, 381, 385, 386, 392, 393, 396, 401, 402, 405, 412, 417, 419, 420, 426, 445, 451, 456, 457, 467, 479, 487, 488, 489, 490, 494, 507, 509, 536, 538, 539, 540, 542, 544, 546, 547, 548, 549, 553, 554, 578, 587, 594, 646, 647, 654, 677, 679, 693, 696, 700, 701, 836, 855, 883, 898, 899, 900, 942, 943, 988, 990, 991, 992, 995, 997, 998, 1000, 1007, 1010, 1015, 1018, 1019, 1024, 1027, 1030, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "normal": [2, 25, 36, 46, 51, 53, 58, 60, 61, 66, 68, 73, 75, 78, 82, 84, 95, 99, 100, 104, 110, 112, 114, 115, 116, 120, 121, 129, 142, 143, 145, 148, 154, 155, 158, 159, 160, 172, 182, 185, 186, 191, 192, 194, 195, 201, 202, 203, 204, 205, 207, 213, 216, 218, 221, 225, 226, 227, 229, 237, 241, 246, 260, 266, 271, 272, 274, 277, 280, 286, 305, 306, 309, 319, 321, 325, 330, 333, 336, 341, 349, 362, 363, 370, 379, 382, 383, 384, 387, 392, 396, 400, 401, 411, 412, 413, 414, 415, 417, 420, 421, 422, 426, 445, 454, 456, 457, 458, 467, 469, 470, 480, 487, 488, 489, 494, 501, 517, 520, 524, 531, 532, 538, 541, 546, 547, 549, 553, 554, 557, 558, 559, 562, 563, 564, 565, 567, 568, 569, 570, 571, 584, 585, 587, 593, 594, 595, 596, 616, 630, 632, 644, 663, 664, 674, 677, 681, 685, 692, 696, 700, 702, 708, 709, 711, 723, 728, 730, 738, 740, 745, 749, 753, 754, 756, 759, 760, 761, 765, 774, 798, 799, 800, 806, 807, 832, 834, 843, 845, 851, 852, 855, 866, 867, 870, 871, 874, 876, 879, 880, 881, 882, 883, 884, 886, 891, 892, 894, 895, 896, 897, 901, 902, 914, 915, 916, 917, 942, 943, 947, 970, 971, 976, 977, 983, 986, 988, 990, 991, 992, 993, 996, 1000, 1005, 1007, 1009, 1010, 1015, 1024, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "laplacian": [2, 243, 379, 412, 445, 457, 467, 625, 644, 648, 696, 700, 769, 770, 778, 902, 990, 991, 1007, 1030, 1036, 1041], "spectralcoclust": [2, 60, 62, 412, 456, 1037, 1042, 1046], "co": [2, 45, 53, 55, 59, 61, 77, 78, 107, 160, 162, 184, 192, 195, 224, 245, 280, 294, 333, 342, 361, 362, 363, 368, 391, 420, 422, 454, 456, 458, 493, 516, 596, 704, 724, 768, 799, 989, 1004, 1015, 1018, 1029, 1030], "dhillon": [2, 60, 412, 456, 458, 516], "2001": [2, 67, 184, 197, 279, 412, 414, 421, 442, 456, 457, 458, 467, 516, 564, 565, 569, 570, 633, 639, 644, 650, 696, 701, 739, 792, 887, 899, 931, 984, 986, 990, 994, 1000, 1002, 1004, 1006, 1009], "affinity_propag": [2, 53, 82], "cluster_optics_dbscan": [2, 103, 414], "extract": [2, 17, 44, 45, 47, 49, 52, 53, 58, 88, 93, 106, 107, 108, 109, 120, 128, 148, 173, 177, 192, 238, 273, 279, 284, 285, 288, 318, 342, 352, 361, 363, 370, 379, 382, 384, 389, 393, 396, 399, 414, 415, 418, 419, 455, 457, 460, 461, 467, 469, 493, 494, 498, 499, 508, 509, 536, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 588, 589, 593, 594, 596, 598, 599, 602, 604, 636, 723, 792, 803, 817, 843, 865, 866, 911, 943, 951, 958, 983, 991, 995, 999, 1004, 1008, 1013, 1015, 1018, 1020, 1024, 1025, 1030, 1035, 1036, 1044, 1047], "arbitrari": [2, 45, 93, 121, 128, 129, 130, 147, 186, 202, 223, 240, 241, 278, 320, 324, 326, 331, 361, 369, 375, 387, 399, 401, 415, 418, 419, 421, 422, 426, 451, 455, 460, 462, 470, 537, 538, 564, 565, 586, 644, 653, 674, 685, 693, 746, 793, 804, 805, 810, 812, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 870, 872, 885, 983, 985, 986, 990, 991, 994, 997, 1004, 1014, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1045, 1049, 1051], "epsilon": [2, 93, 103, 205, 246, 256, 335, 356, 419, 451, 460, 648, 654, 672, 681, 683, 750, 863, 864, 907, 909, 912, 987, 990, 994, 998, 1008, 1009, 1026, 1035], "cluster_optics_xi": 2, "automat": [2, 45, 49, 53, 67, 84, 101, 103, 108, 135, 168, 176, 202, 226, 266, 267, 278, 281, 320, 327, 330, 334, 342, 351, 353, 375, 382, 385, 387, 389, 391, 395, 401, 405, 411, 414, 415, 416, 419, 421, 422, 423, 438, 455, 457, 461, 467, 469, 470, 472, 501, 504, 520, 543, 545, 546, 552, 554, 556, 562, 566, 569, 588, 593, 596, 599, 607, 648, 650, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 677, 679, 680, 681, 683, 686, 689, 692, 693, 696, 700, 805, 820, 823, 832, 842, 863, 864, 867, 868, 870, 879, 880, 887, 898, 899, 906, 907, 908, 911, 914, 916, 920, 932, 965, 968, 983, 985, 988, 993, 998, 1004, 1008, 1010, 1013, 1014, 1023, 1035, 1038, 1039, 1040, 1046, 1049, 1050, 1051, 1052, 1053], "accord": [2, 58, 64, 66, 75, 87, 114, 148, 154, 177, 180, 206, 223, 241, 254, 329, 353, 362, 370, 387, 389, 399, 400, 401, 402, 412, 413, 414, 416, 418, 419, 421, 422, 424, 442, 455, 457, 461, 465, 467, 470, 474, 509, 521, 522, 523, 530, 535, 537, 540, 541, 543, 545, 555, 558, 559, 566, 567, 568, 571, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 646, 647, 649, 650, 654, 663, 664, 675, 685, 696, 700, 739, 783, 784, 803, 804, 805, 806, 807, 810, 811, 812, 817, 827, 841, 842, 843, 844, 845, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 869, 876, 884, 896, 898, 899, 906, 907, 908, 909, 911, 912, 988, 990, 994, 996, 997, 1004, 1007, 1008, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "xi": [2, 82, 103, 384, 414, 417, 422, 455, 461, 514, 1008, 1046], "steep": [2, 180, 196, 289, 290, 414, 418, 424, 455, 461], "method": [2, 5, 8, 14, 18, 30, 32, 36, 45, 49, 53, 54, 58, 60, 61, 64, 65, 66, 67, 74, 75, 77, 78, 79, 82, 85, 87, 88, 90, 91, 92, 94, 95, 96, 97, 99, 103, 106, 109, 115, 116, 119, 121, 126, 128, 131, 133, 136, 137, 138, 140, 142, 147, 149, 150, 156, 163, 172, 173, 177, 190, 200, 210, 212, 224, 231, 240, 242, 244, 246, 247, 248, 250, 254, 256, 257, 258, 260, 264, 265, 268, 282, 285, 287, 288, 289, 297, 300, 306, 307, 309, 320, 324, 327, 329, 331, 332, 352, 361, 362, 363, 369, 370, 374, 375, 376, 379, 384, 385, 387, 388, 389, 393, 394, 396, 399, 400, 404, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 431, 432, 433, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 464, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 509, 517, 519, 527, 530, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 710, 715, 716, 735, 736, 739, 740, 745, 746, 767, 772, 773, 778, 782, 787, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 894, 895, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 929, 933, 943, 950, 951, 952, 953, 954, 955, 960, 963, 978, 979, 982, 983, 984, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1018, 1019, 1023, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "compute_optics_graph": [2, 460, 461, 1052], "reachabl": [2, 93, 103, 451, 455, 460, 461, 462, 852, 948], "graph": [2, 58, 65, 77, 82, 84, 104, 105, 187, 243, 277, 300, 302, 341, 374, 387, 390, 401, 412, 416, 425, 446, 449, 450, 457, 458, 462, 467, 468, 476, 477, 483, 516, 590, 591, 693, 696, 697, 700, 786, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 861, 902, 948, 991, 994, 997, 999, 1007, 1010, 1013, 1018, 1024, 1027, 1035, 1042, 1043, 1045, 1048, 1050], "estimate_bandwidth": [2, 82, 101, 414, 453, 466], "bandwidth": [2, 50, 82, 101, 256, 304, 305, 313, 399, 401, 414, 420, 453, 463, 466, 846, 847, 851, 987, 1000, 1046, 1050], "k_mean": [2, 102, 396, 401, 1027, 1043, 1051], "kmeans_plusplu": [2, 97, 414, 1047, 1052], "init": [2, 56, 80, 83, 96, 97, 99, 102, 196, 203, 243, 244, 246, 247, 248, 267, 269, 300, 362, 390, 395, 414, 419, 421, 448, 452, 454, 456, 458, 464, 465, 543, 545, 552, 553, 564, 565, 637, 638, 695, 697, 699, 855, 991, 1035, 1044, 1047, 1049, 1050, 1051], "n_cluster": [2, 60, 61, 62, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 128, 333, 362, 387, 401, 414, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 465, 466, 467, 468, 516, 518, 715, 796, 797, 1027, 1035, 1039, 1041, 1043, 1044, 1046, 1049], "seed": [2, 48, 52, 66, 67, 73, 77, 78, 82, 83, 90, 92, 95, 97, 98, 102, 103, 108, 114, 115, 116, 126, 129, 134, 145, 151, 170, 172, 197, 213, 218, 221, 226, 229, 232, 236, 240, 246, 267, 269, 270, 271, 272, 283, 286, 294, 305, 306, 307, 312, 354, 355, 359, 362, 370, 375, 389, 396, 399, 401, 414, 418, 419, 448, 452, 453, 455, 457, 462, 464, 465, 466, 467, 476, 477, 478, 541, 549, 558, 559, 560, 561, 564, 565, 632, 651, 652, 657, 658, 665, 666, 667, 668, 682, 694, 696, 698, 700, 801, 802, 807, 837, 840, 855, 909, 929, 942, 943, 959, 963, 983, 984, 989, 991, 1026, 1027, 1039, 1040, 1044, 1045, 1051], "mean_shift": [2, 1040, 1043], "spectral_clust": [2, 84, 104, 1043, 1045, 1047, 1048, 1049, 1050, 1052], "ward_tre": [2, 92, 446, 450, 1035, 1039], "columntransform": [2, 45, 107, 108, 163, 195, 196, 197, 223, 241, 252, 260, 262, 264, 326, 330, 332, 333, 334, 336, 379, 381, 399, 400, 406, 471, 472, 634, 871, 983, 984, 1014, 1030, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "column": [2, 45, 49, 54, 61, 62, 98, 106, 109, 112, 124, 149, 151, 152, 155, 158, 160, 163, 177, 184, 190, 192, 194, 195, 196, 197, 198, 212, 223, 224, 227, 231, 241, 252, 259, 260, 261, 264, 271, 280, 281, 291, 292, 299, 317, 325, 326, 327, 331, 332, 333, 334, 336, 361, 362, 363, 374, 381, 382, 384, 387, 389, 393, 396, 399, 400, 401, 412, 414, 415, 417, 419, 421, 422, 423, 426, 429, 456, 458, 469, 471, 472, 476, 477, 483, 492, 493, 494, 495, 496, 497, 499, 501, 505, 506, 507, 509, 510, 513, 514, 515, 516, 518, 520, 531, 536, 539, 542, 546, 547, 553, 560, 562, 563, 566, 567, 569, 570, 571, 572, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 615, 632, 635, 637, 638, 639, 651, 653, 657, 663, 665, 667, 669, 670, 674, 685, 690, 691, 702, 718, 723, 724, 733, 734, 742, 758, 767, 772, 773, 774, 777, 787, 788, 791, 792, 803, 806, 807, 817, 827, 832, 837, 840, 841, 842, 843, 844, 845, 846, 847, 866, 870, 871, 872, 873, 879, 880, 881, 885, 886, 887, 888, 890, 891, 892, 896, 897, 906, 908, 911, 914, 916, 922, 926, 927, 932, 943, 957, 970, 971, 973, 981, 983, 984, 986, 990, 992, 994, 995, 1002, 1004, 1009, 1014, 1015, 1035, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "panda": [2, 45, 53, 65, 107, 108, 109, 142, 148, 149, 152, 155, 158, 160, 184, 190, 194, 195, 196, 197, 198, 202, 207, 212, 223, 227, 231, 241, 260, 261, 264, 271, 278, 280, 281, 283, 291, 292, 297, 325, 326, 327, 329, 332, 333, 357, 361, 362, 381, 382, 385, 386, 387, 389, 390, 401, 405, 408, 415, 438, 447, 448, 450, 452, 454, 469, 471, 473, 487, 488, 489, 490, 494, 495, 496, 497, 501, 505, 506, 507, 509, 510, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 566, 567, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 637, 638, 640, 643, 644, 645, 646, 647, 693, 694, 697, 803, 806, 807, 817, 832, 850, 855, 858, 862, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 904, 922, 983, 984, 1004, 1013, 1014, 1028, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "datafram": [2, 45, 54, 65, 107, 108, 109, 142, 148, 152, 155, 160, 184, 190, 194, 195, 196, 197, 202, 207, 212, 227, 231, 241, 261, 264, 271, 278, 280, 281, 283, 291, 292, 297, 325, 326, 327, 332, 333, 334, 357, 361, 362, 381, 382, 387, 389, 392, 401, 415, 421, 438, 447, 448, 450, 452, 454, 469, 471, 472, 473, 487, 488, 489, 490, 494, 495, 496, 497, 501, 505, 506, 507, 509, 510, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 566, 567, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 693, 694, 697, 803, 806, 807, 817, 832, 850, 855, 858, 862, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 904, 922, 949, 965, 968, 983, 984, 1014, 1028, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "compos": [2, 45, 46, 65, 106, 107, 108, 112, 121, 144, 152, 163, 192, 195, 196, 197, 223, 225, 241, 252, 260, 262, 264, 297, 326, 330, 332, 333, 334, 336, 400, 406, 414, 415, 418, 469, 470, 471, 472, 520, 617, 993, 1015, 1035], "transformedtargetregressor": [2, 112, 195, 223, 399, 406, 415, 598, 599, 602, 1043, 1045, 1048, 1053], "target": [2, 45, 47, 54, 58, 60, 66, 69, 71, 72, 83, 90, 106, 108, 110, 111, 121, 124, 132, 134, 136, 143, 150, 151, 152, 153, 155, 156, 158, 160, 162, 163, 164, 166, 170, 172, 175, 177, 179, 181, 184, 185, 191, 192, 194, 195, 196, 197, 202, 205, 206, 207, 216, 219, 223, 225, 227, 228, 231, 232, 244, 251, 253, 254, 255, 256, 259, 260, 261, 268, 274, 276, 278, 281, 283, 285, 286, 289, 290, 297, 299, 300, 303, 308, 311, 312, 316, 319, 320, 330, 331, 333, 335, 338, 339, 342, 343, 345, 346, 349, 353, 355, 356, 361, 362, 366, 367, 368, 369, 370, 374, 376, 379, 380, 381, 382, 383, 384, 389, 391, 392, 395, 396, 400, 404, 414, 417, 418, 421, 424, 438, 442, 443, 444, 447, 450, 469, 470, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 513, 515, 525, 529, 536, 537, 539, 541, 542, 544, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 578, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 702, 703, 705, 706, 707, 712, 713, 714, 717, 718, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 739, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 853, 855, 856, 857, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 890, 895, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 956, 957, 958, 985, 986, 987, 990, 991, 994, 998, 1001, 1002, 1008, 1009, 1010, 1014, 1015, 1017, 1018, 1019, 1024, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "make_column_selector": [2, 108, 152, 163, 260, 415, 469, 472, 1045], "creat": [2, 45, 46, 49, 52, 54, 57, 61, 62, 66, 67, 69, 71, 73, 75, 77, 79, 81, 82, 84, 87, 90, 96, 98, 100, 108, 109, 116, 121, 124, 130, 133, 144, 147, 151, 152, 153, 155, 159, 162, 175, 176, 179, 181, 184, 185, 186, 188, 191, 194, 196, 202, 204, 206, 209, 219, 224, 225, 235, 236, 245, 255, 257, 260, 261, 263, 271, 275, 276, 278, 280, 290, 308, 310, 311, 322, 324, 325, 329, 332, 333, 343, 345, 346, 350, 351, 354, 357, 358, 359, 363, 365, 367, 368, 370, 375, 382, 383, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 400, 401, 405, 413, 414, 415, 418, 420, 421, 422, 424, 443, 456, 458, 470, 471, 504, 520, 521, 522, 523, 551, 558, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 593, 594, 596, 602, 633, 635, 636, 637, 638, 702, 703, 705, 706, 707, 786, 793, 803, 805, 809, 813, 817, 821, 825, 827, 828, 836, 867, 879, 908, 911, 914, 915, 916, 917, 921, 924, 946, 947, 953, 962, 967, 979, 984, 990, 993, 994, 995, 997, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1018, 1024, 1026, 1027, 1032, 1035, 1036, 1038, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "callabl": [2, 271, 284, 401, 418, 421, 422, 423, 425, 426, 446, 448, 449, 450, 451, 452, 454, 455, 457, 462, 464, 465, 469, 470, 471, 472, 536, 538, 540, 542, 544, 550, 551, 562, 563, 564, 565, 566, 567, 569, 570, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 615, 616, 625, 633, 635, 639, 644, 648, 664, 671, 676, 678, 680, 693, 696, 697, 701, 716, 724, 736, 746, 775, 778, 782, 783, 784, 785, 796, 797, 803, 806, 807, 809, 817, 825, 828, 829, 830, 831, 833, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 870, 879, 901, 902, 908, 909, 910, 911, 912, 955, 961, 964, 978, 983, 994, 1004, 1035, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1051], "select": [2, 18, 29, 45, 48, 50, 51, 61, 73, 74, 82, 85, 93, 95, 100, 106, 108, 111, 118, 126, 127, 128, 137, 138, 142, 144, 150, 152, 155, 158, 163, 172, 174, 184, 186, 195, 196, 198, 200, 201, 203, 205, 207, 209, 210, 222, 227, 231, 238, 241, 244, 250, 254, 256, 260, 265, 266, 267, 268, 278, 279, 280, 281, 285, 293, 304, 320, 325, 326, 331, 335, 338, 339, 342, 344, 349, 357, 361, 362, 363, 370, 374, 375, 382, 384, 385, 387, 389, 395, 400, 401, 412, 414, 415, 416, 419, 421, 422, 424, 448, 450, 451, 452, 454, 456, 458, 463, 464, 465, 469, 471, 472, 477, 478, 481, 493, 494, 497, 498, 501, 502, 505, 506, 507, 509, 517, 520, 537, 539, 540, 545, 546, 549, 554, 556, 563, 564, 565, 568, 570, 586, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 632, 636, 637, 650, 651, 652, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 676, 678, 681, 683, 687, 688, 696, 697, 702, 717, 721, 723, 758, 792, 796, 797, 801, 802, 803, 806, 807, 808, 809, 817, 828, 829, 830, 832, 834, 848, 849, 850, 852, 854, 856, 857, 858, 866, 867, 871, 876, 882, 886, 903, 906, 907, 911, 914, 915, 916, 917, 922, 963, 964, 988, 989, 991, 993, 994, 995, 997, 998, 1000, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "make_column_transform": [2, 152, 163, 195, 252, 330, 415, 469, 471, 1043], "ellipticenvelop": [2, 50, 250, 475, 478, 479, 480, 481, 568, 1000, 1035, 1038, 1042, 1043, 1048], "gaussian": [2, 8, 19, 28, 45, 46, 48, 50, 57, 67, 69, 70, 73, 82, 84, 85, 93, 95, 99, 103, 114, 115, 116, 117, 118, 125, 126, 129, 130, 131, 137, 143, 144, 151, 155, 159, 161, 170, 191, 202, 205, 207, 211, 213, 233, 235, 236, 250, 254, 256, 268, 269, 291, 305, 310, 313, 315, 323, 324, 343, 346, 353, 355, 379, 383, 389, 392, 401, 414, 416, 419, 420, 426, 457, 474, 475, 476, 477, 478, 479, 480, 481, 501, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 535, 537, 549, 554, 555, 568, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 648, 649, 677, 682, 685, 708, 728, 745, 756, 780, 801, 802, 803, 817, 841, 842, 843, 844, 845, 846, 847, 851, 882, 886, 894, 898, 899, 900, 988, 990, 991, 992, 1000, 1015, 1016, 1018, 1027, 1029, 1030, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1049], "distribut": [2, 25, 37, 44, 45, 49, 50, 51, 54, 61, 67, 73, 75, 77, 82, 90, 91, 93, 95, 100, 112, 115, 116, 117, 121, 126, 142, 144, 155, 159, 172, 177, 179, 188, 192, 194, 195, 198, 200, 202, 223, 225, 227, 245, 247, 250, 254, 260, 266, 271, 272, 276, 280, 286, 288, 297, 301, 305, 319, 320, 322, 325, 335, 338, 339, 354, 357, 361, 374, 375, 380, 383, 384, 385, 387, 388, 391, 392, 393, 401, 409, 413, 414, 416, 418, 419, 420, 426, 452, 454, 474, 475, 476, 477, 478, 479, 480, 481, 493, 503, 508, 520, 521, 522, 523, 524, 528, 537, 538, 541, 555, 556, 557, 568, 616, 630, 645, 647, 649, 650, 653, 663, 664, 674, 684, 685, 693, 694, 695, 697, 711, 713, 728, 756, 793, 801, 802, 807, 808, 815, 817, 821, 822, 832, 842, 845, 851, 855, 862, 869, 882, 883, 884, 885, 886, 894, 895, 896, 901, 902, 910, 921, 945, 962, 983, 988, 990, 992, 993, 994, 996, 997, 999, 1000, 1006, 1007, 1013, 1014, 1015, 1019, 1023, 1027, 1029, 1030, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "dataset": [2, 37, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 66, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 105, 108, 109, 110, 111, 112, 116, 117, 118, 121, 127, 130, 131, 132, 133, 134, 135, 137, 138, 141, 143, 144, 145, 146, 147, 149, 150, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 180, 182, 185, 187, 190, 191, 197, 198, 200, 201, 204, 206, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 221, 222, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 239, 240, 245, 247, 248, 249, 251, 254, 256, 258, 259, 263, 264, 266, 268, 269, 270, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 295, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 347, 349, 350, 351, 352, 355, 357, 358, 359, 362, 363, 364, 365, 367, 368, 369, 370, 375, 376, 389, 390, 391, 393, 400, 401, 404, 405, 409, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 426, 429, 434, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 474, 475, 478, 479, 480, 481, 483, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 588, 589, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 633, 636, 637, 638, 639, 640, 643, 644, 645, 648, 650, 651, 652, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 713, 715, 716, 733, 759, 761, 791, 792, 796, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 862, 863, 864, 866, 867, 870, 871, 879, 880, 884, 886, 888, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 927, 931, 932, 983, 984, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1027, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "covari": [2, 50, 53, 68, 72, 115, 120, 135, 138, 157, 159, 179, 186, 226, 250, 265, 267, 269, 270, 271, 272, 287, 311, 336, 396, 401, 406, 414, 417, 419, 424, 427, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 509, 520, 524, 532, 537, 539, 546, 553, 554, 555, 568, 615, 616, 618, 627, 628, 636, 649, 650, 655, 659, 661, 687, 688, 691, 694, 698, 801, 802, 803, 822, 993, 1000, 1004, 1015, 1016, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1044], "empiricalcovari": [2, 114, 116, 117, 416, 474, 478, 479, 480, 481, 1000], "maximum": [2, 45, 49, 52, 57, 67, 72, 75, 95, 114, 115, 116, 117, 118, 125, 130, 142, 144, 147, 148, 151, 158, 180, 182, 186, 192, 201, 211, 260, 290, 302, 306, 307, 313, 320, 344, 345, 347, 348, 351, 353, 362, 365, 367, 368, 374, 382, 392, 393, 400, 401, 412, 413, 414, 416, 417, 419, 421, 422, 424, 425, 426, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 459, 462, 464, 466, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 488, 489, 503, 514, 516, 517, 518, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 588, 589, 602, 615, 632, 636, 637, 640, 642, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 679, 681, 682, 683, 684, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 721, 748, 785, 801, 803, 806, 807, 809, 817, 824, 830, 855, 862, 863, 864, 870, 871, 875, 876, 878, 881, 882, 883, 885, 894, 895, 900, 901, 902, 903, 906, 907, 911, 914, 915, 916, 917, 918, 920, 923, 930, 983, 989, 990, 991, 993, 994, 996, 997, 998, 1000, 1004, 1008, 1009, 1010, 1015, 1027, 1042, 1043, 1045, 1046, 1049, 1050, 1052], "likelihood": [2, 72, 95, 113, 115, 116, 117, 118, 135, 157, 179, 180, 181, 183, 184, 185, 186, 188, 192, 211, 241, 270, 273, 280, 286, 311, 318, 320, 389, 401, 413, 416, 419, 421, 424, 442, 474, 475, 476, 477, 478, 479, 480, 481, 482, 520, 537, 541, 546, 554, 555, 556, 615, 616, 636, 650, 663, 717, 745, 801, 802, 803, 829, 832, 851, 862, 882, 894, 908, 909, 911, 912, 990, 993, 996, 1004, 1009, 1015, 1038, 1039, 1044, 1050], "graphicallasso": [2, 118, 416, 474, 475, 477, 478, 479, 480, 481, 483, 1043, 1051], "spars": [2, 25, 47, 48, 49, 53, 55, 58, 60, 69, 77, 78, 92, 93, 95, 107, 113, 114, 115, 127, 129, 147, 161, 192, 194, 201, 202, 208, 211, 212, 215, 217, 218, 222, 239, 254, 256, 281, 287, 300, 316, 318, 330, 334, 342, 360, 363, 369, 374, 379, 381, 382, 383, 387, 389, 390, 391, 392, 399, 400, 401, 414, 415, 421, 422, 424, 425, 429, 436, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 462, 464, 465, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 492, 493, 494, 501, 502, 508, 513, 528, 529, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 590, 591, 593, 594, 595, 596, 598, 599, 608, 609, 610, 611, 612, 613, 614, 634, 635, 636, 638, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 717, 718, 719, 733, 734, 735, 738, 742, 743, 744, 758, 759, 764, 765, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 796, 797, 800, 803, 806, 807, 817, 824, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 922, 924, 925, 926, 927, 932, 940, 943, 944, 947, 948, 949, 957, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 984, 987, 990, 991, 992, 994, 995, 997, 1007, 1009, 1010, 1014, 1015, 1016, 1026, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "invers": [2, 8, 53, 92, 113, 114, 115, 142, 192, 271, 287, 289, 295, 303, 349, 362, 363, 379, 401, 415, 417, 418, 419, 422, 426, 450, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 532, 538, 539, 540, 544, 546, 548, 562, 566, 569, 594, 595, 596, 633, 649, 650, 663, 664, 671, 673, 679, 680, 681, 682, 683, 685, 728, 747, 756, 801, 802, 848, 849, 856, 857, 863, 864, 866, 870, 873, 879, 880, 882, 898, 899, 906, 907, 908, 911, 912, 914, 916, 932, 988, 990, 994, 997, 998, 1004, 1008, 1009, 1015, 1026, 1028, 1029, 1030, 1035, 1038, 1043, 1046, 1047, 1049, 1053], "l1": [2, 25, 44, 48, 58, 69, 78, 104, 118, 120, 192, 194, 201, 202, 208, 209, 210, 211, 212, 217, 218, 227, 234, 238, 252, 281, 300, 317, 332, 396, 399, 414, 416, 419, 446, 450, 455, 462, 469, 474, 475, 476, 477, 478, 479, 480, 481, 483, 501, 507, 509, 536, 542, 543, 544, 545, 547, 548, 552, 553, 563, 570, 594, 595, 596, 602, 649, 650, 651, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 677, 681, 682, 683, 684, 686, 693, 739, 766, 772, 777, 782, 783, 784, 789, 817, 824, 832, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 878, 886, 893, 906, 907, 913, 915, 917, 929, 976, 990, 992, 994, 997, 1004, 1008, 1009, 1010, 1015, 1026, 1040, 1042, 1048, 1051], "penal": [2, 55, 69, 118, 163, 207, 212, 216, 223, 227, 239, 241, 325, 357, 414, 416, 419, 423, 474, 475, 476, 477, 478, 479, 480, 481, 483, 652, 657, 658, 666, 668, 681, 710, 720, 738, 790, 799, 879, 906, 907, 913, 990, 994, 996, 998, 1008, 1009, 1026], "graphicallassocv": [2, 53, 118, 406, 416, 476, 478, 479, 480, 481, 483, 1043, 1047, 1049, 1051], "w": [2, 47, 53, 55, 57, 69, 73, 78, 80, 83, 86, 96, 102, 134, 137, 177, 190, 222, 227, 240, 257, 258, 266, 267, 268, 271, 272, 291, 318, 332, 333, 353, 354, 357, 363, 370, 375, 382, 384, 393, 409, 414, 415, 419, 421, 422, 426, 431, 437, 442, 470, 474, 477, 479, 487, 488, 489, 528, 543, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 593, 594, 596, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 698, 704, 729, 730, 760, 803, 817, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 848, 849, 852, 853, 856, 857, 863, 864, 899, 901, 902, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 940, 945, 990, 994, 998, 999, 1004, 1006, 1008, 1009, 1024, 1028, 1045, 1049, 1050, 1051, 1052], "cross": [2, 9, 29, 54, 55, 67, 73, 92, 95, 96, 108, 109, 111, 112, 114, 118, 121, 126, 135, 148, 151, 152, 154, 155, 158, 167, 171, 174, 175, 177, 195, 196, 201, 205, 207, 209, 211, 217, 223, 225, 231, 241, 251, 258, 263, 268, 269, 271, 273, 277, 280, 281, 282, 284, 286, 287, 288, 289, 292, 293, 294, 297, 304, 318, 319, 321, 326, 329, 331, 336, 341, 349, 357, 382, 387, 389, 396, 399, 400, 401, 409, 410, 413, 415, 416, 419, 421, 422, 423, 424, 442, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 498, 506, 507, 509, 520, 546, 572, 573, 580, 598, 599, 602, 607, 611, 614, 647, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 706, 707, 711, 718, 732, 745, 789, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 840, 866, 867, 871, 886, 887, 904, 906, 908, 911, 949, 993, 994, 997, 998, 1002, 1004, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "valid": [2, 49, 54, 55, 66, 67, 92, 93, 94, 95, 108, 109, 111, 112, 114, 118, 135, 140, 146, 148, 151, 152, 153, 154, 155, 158, 159, 167, 171, 174, 175, 177, 187, 192, 195, 197, 201, 207, 209, 211, 217, 223, 225, 231, 241, 251, 257, 259, 263, 268, 271, 273, 277, 280, 281, 282, 284, 286, 287, 288, 289, 292, 293, 294, 297, 304, 318, 321, 326, 329, 331, 336, 341, 349, 357, 365, 375, 382, 387, 390, 399, 400, 401, 409, 410, 413, 414, 415, 416, 419, 420, 421, 422, 423, 428, 430, 442, 447, 448, 450, 451, 452, 454, 455, 462, 468, 469, 473, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 498, 506, 507, 509, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 580, 582, 587, 588, 594, 598, 599, 602, 607, 637, 639, 643, 644, 645, 646, 647, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 697, 704, 706, 707, 711, 718, 732, 766, 769, 778, 782, 783, 784, 789, 796, 797, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 840, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 872, 878, 886, 898, 899, 901, 902, 904, 906, 908, 911, 913, 914, 915, 916, 917, 926, 927, 928, 929, 930, 937, 949, 951, 954, 978, 979, 980, 981, 982, 984, 993, 994, 995, 997, 998, 1002, 1004, 1006, 1008, 1009, 1010, 1013, 1014, 1015, 1018, 1019, 1022, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "choic": [2, 45, 48, 67, 78, 84, 93, 103, 107, 114, 135, 158, 179, 180, 186, 190, 212, 224, 260, 274, 278, 280, 283, 305, 327, 331, 361, 362, 370, 374, 385, 389, 392, 401, 405, 414, 416, 418, 420, 421, 423, 424, 457, 467, 476, 477, 478, 479, 480, 481, 483, 543, 545, 546, 552, 564, 643, 652, 653, 661, 663, 664, 666, 674, 685, 697, 710, 746, 835, 848, 849, 854, 856, 857, 883, 886, 895, 897, 906, 907, 930, 983, 988, 990, 991, 992, 993, 994, 995, 997, 1000, 1002, 1007, 1008, 1009, 1010, 1042, 1045, 1046, 1050, 1051], "penalti": [2, 25, 48, 51, 69, 118, 192, 201, 202, 207, 208, 212, 216, 223, 227, 238, 239, 252, 288, 315, 332, 342, 354, 361, 374, 395, 399, 416, 419, 423, 476, 477, 478, 479, 480, 481, 483, 507, 536, 542, 543, 544, 545, 547, 548, 552, 553, 602, 648, 651, 652, 653, 654, 657, 658, 659, 662, 663, 664, 665, 666, 667, 673, 674, 675, 677, 681, 683, 685, 686, 692, 817, 886, 906, 907, 909, 911, 912, 913, 983, 990, 993, 998, 1004, 1008, 1009, 1015, 1026, 1028, 1037, 1040, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "ledoitwolf": [2, 72, 113, 115, 118, 135, 157, 192, 311, 416, 474, 475, 479, 480, 481, 482, 803, 1015, 1039], "mincovdet": [2, 116, 117, 416, 474, 475, 478, 480, 481, 1000, 1035, 1042], "minimum": [2, 50, 54, 93, 95, 116, 155, 156, 158, 176, 212, 233, 254, 260, 290, 306, 307, 389, 396, 405, 408, 412, 414, 421, 422, 446, 450, 451, 455, 459, 461, 474, 475, 478, 479, 480, 481, 516, 518, 546, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 599, 632, 636, 637, 640, 642, 673, 676, 681, 683, 684, 687, 688, 697, 710, 729, 783, 784, 806, 807, 827, 842, 863, 864, 875, 876, 879, 880, 881, 885, 899, 900, 913, 914, 915, 916, 917, 923, 926, 927, 930, 946, 991, 994, 998, 1000, 1004, 1006, 1010, 1035, 1038, 1042, 1043, 1047, 1048, 1052], "determin": [2, 50, 52, 55, 60, 84, 93, 116, 142, 144, 148, 158, 184, 195, 202, 203, 219, 226, 280, 320, 325, 353, 363, 369, 370, 386, 387, 389, 396, 400, 401, 412, 413, 414, 418, 419, 421, 422, 423, 424, 437, 442, 446, 447, 448, 450, 452, 454, 455, 461, 464, 465, 466, 470, 474, 475, 477, 478, 479, 480, 481, 487, 488, 489, 493, 496, 497, 500, 502, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 542, 544, 547, 548, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 570, 572, 573, 575, 587, 588, 589, 593, 596, 599, 607, 612, 613, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 640, 641, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 692, 694, 695, 697, 698, 699, 712, 716, 727, 733, 734, 742, 787, 788, 789, 791, 792, 797, 803, 805, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 833, 837, 839, 840, 842, 849, 851, 852, 857, 862, 863, 864, 870, 871, 879, 880, 881, 883, 887, 895, 906, 907, 909, 912, 915, 917, 920, 941, 957, 963, 965, 968, 983, 986, 988, 993, 997, 999, 1000, 1002, 1004, 1007, 1008, 1010, 1019, 1035, 1040, 1043, 1044, 1046, 1047, 1048], "mcd": [2, 53, 116, 117, 416, 474, 479], "robust": [2, 50, 73, 99, 101, 113, 115, 153, 155, 177, 191, 192, 195, 196, 201, 213, 225, 227, 240, 250, 260, 294, 320, 335, 376, 384, 389, 395, 414, 421, 422, 451, 453, 474, 475, 478, 479, 480, 481, 529, 539, 564, 565, 654, 662, 675, 676, 683, 684, 754, 836, 867, 881, 883, 884, 895, 901, 941, 994, 998, 1000, 1004, 1007, 1008, 1013, 1015, 1016, 1018, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1051], "oa": [2, 51, 68, 73, 113, 117, 118, 135, 157, 192, 309, 311, 416, 474, 475, 478, 479, 481, 482, 517, 554, 803, 988, 1015], "oracl": [2, 72, 223, 241, 427, 474, 475, 478, 479, 480, 481, 988, 1035], "shrinkag": [2, 72, 113, 115, 118, 135, 157, 192, 311, 427, 474, 475, 478, 479, 480, 481, 482, 484, 485, 486, 544, 548, 554, 566, 567, 803, 990, 1004, 1015, 1016, 1030, 1035, 1039, 1040, 1042], "shrunkcovari": [2, 114, 135, 416, 474, 475, 478, 479, 480], "empirical_covari": [2, 114, 416, 483, 484, 486, 1051], "graphical_lasso": [2, 396, 476, 477, 1043, 1051], "ledoit_wolf": [2, 118, 416, 1048], "shrunk": [2, 114, 135, 320, 327, 335, 427, 478, 480, 481, 484, 485, 486, 554, 887, 988, 1008, 1029, 1030], "ledoit": [2, 51, 68, 73, 113, 114, 117, 118, 192, 309, 478, 480, 484, 485, 517, 554, 988, 1015], "wolf": [2, 51, 68, 73, 113, 114, 117, 118, 192, 309, 478, 480, 484, 485, 517, 554, 988, 1015, 1042], "ledoit_wolf_shrinkag": [2, 1048], "shrunk_covari": [2, 416, 1052], "calcul": [2, 48, 66, 67, 72, 84, 97, 116, 140, 141, 142, 146, 164, 191, 192, 198, 219, 227, 228, 240, 255, 257, 279, 280, 286, 290, 294, 299, 347, 353, 354, 370, 374, 394, 401, 406, 412, 413, 414, 418, 419, 421, 425, 443, 448, 449, 451, 453, 455, 456, 458, 460, 461, 476, 477, 483, 486, 541, 552, 558, 569, 574, 602, 616, 625, 637, 638, 639, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 677, 678, 679, 680, 684, 686, 689, 693, 695, 697, 699, 712, 721, 733, 734, 739, 740, 742, 748, 754, 755, 758, 768, 773, 775, 776, 777, 778, 782, 785, 787, 788, 791, 792, 793, 796, 797, 799, 810, 812, 827, 831, 844, 846, 847, 884, 885, 886, 892, 896, 906, 907, 932, 945, 986, 988, 990, 991, 992, 994, 996, 997, 998, 1002, 1004, 1007, 1009, 1015, 1023, 1026, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "matric": [2, 37, 73, 77, 78, 116, 118, 128, 228, 267, 268, 270, 271, 272, 300, 313, 330, 336, 342, 361, 362, 379, 381, 389, 390, 399, 400, 401, 414, 415, 416, 417, 419, 422, 423, 429, 455, 456, 458, 469, 478, 486, 487, 488, 489, 539, 540, 543, 545, 546, 549, 552, 554, 555, 560, 561, 568, 571, 586, 587, 594, 648, 651, 652, 657, 658, 663, 669, 677, 679, 692, 758, 764, 772, 778, 782, 783, 784, 785, 796, 801, 802, 832, 850, 853, 858, 869, 873, 875, 878, 881, 883, 884, 886, 889, 891, 893, 895, 896, 897, 898, 899, 908, 909, 911, 912, 922, 943, 949, 958, 965, 967, 968, 984, 986, 988, 991, 992, 993, 995, 997, 998, 1006, 1008, 1009, 1013, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "diagon": [2, 45, 65, 67, 78, 118, 120, 241, 260, 268, 271, 272, 274, 349, 412, 414, 416, 424, 458, 476, 477, 483, 486, 516, 518, 532, 537, 555, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 655, 656, 659, 660, 661, 687, 688, 706, 720, 796, 801, 802, 850, 858, 986, 988, 990, 993, 994, 997, 1004, 1041, 1043, 1044, 1045], "cca": [2, 258, 417, 488, 490, 1039, 1043, 1044, 1045, 1047, 1049], "canon": [2, 53, 401, 413, 421, 487, 488, 490, 772, 1014, 1016, 1030], "correl": [2, 53, 67, 118, 120, 121, 138, 149, 150, 160, 173, 176, 184, 192, 193, 194, 196, 197, 207, 212, 218, 241, 280, 286, 299, 326, 330, 331, 341, 380, 383, 384, 392, 401, 404, 412, 416, 418, 423, 455, 462, 487, 488, 490, 498, 499, 505, 529, 569, 611, 614, 632, 639, 640, 641, 687, 688, 747, 761, 782, 783, 784, 832, 846, 847, 883, 884, 886, 895, 985, 990, 995, 1001, 1004, 1008, 1010, 1014, 1015, 1016, 1030, 1035, 1036, 1037, 1048, 1049], "analysi": [2, 12, 27, 46, 48, 50, 51, 61, 65, 68, 74, 95, 101, 103, 114, 115, 116, 117, 118, 124, 126, 127, 129, 130, 132, 133, 134, 136, 137, 152, 169, 191, 192, 195, 212, 244, 265, 267, 271, 272, 277, 280, 281, 285, 291, 300, 301, 302, 303, 311, 312, 320, 325, 357, 362, 379, 382, 384, 387, 389, 402, 412, 414, 416, 421, 422, 426, 444, 452, 453, 478, 480, 481, 487, 488, 490, 507, 509, 517, 520, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 560, 561, 636, 643, 693, 695, 696, 697, 698, 715, 724, 729, 730, 760, 792, 793, 796, 797, 801, 803, 828, 832, 848, 855, 866, 867, 872, 882, 886, 894, 942, 943, 984, 990, 991, 993, 994, 1004, 1012, 1013, 1015, 1016, 1018, 1020, 1029, 1030, 1035, 1036, 1037, 1039, 1044], "mode": [2, 50, 51, 84, 85, 116, 223, 250, 300, 302, 318, 329, 387, 390, 395, 396, 399, 412, 417, 421, 425, 448, 449, 452, 454, 457, 464, 467, 476, 477, 483, 487, 492, 513, 514, 562, 566, 569, 597, 600, 601, 603, 604, 605, 615, 632, 649, 650, 663, 664, 671, 673, 678, 679, 680, 681, 684, 687, 688, 694, 698, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 862, 906, 908, 911, 914, 916, 932, 942, 943, 945, 997, 1000, 1013, 1019, 1020, 1027, 1036, 1044, 1049, 1052], "pl": [2, 110, 121, 227, 336, 384, 417, 487, 488, 489, 490, 1040], "cross_decomposit": [2, 119, 120, 121, 192, 258, 487, 488, 489, 490, 1015, 1039, 1040, 1042, 1043, 1044], "plscanon": [2, 120, 487, 489, 490, 1016, 1030, 1039, 1043, 1045, 1047, 1049], "partial": [2, 45, 49, 53, 88, 119, 120, 160, 192, 193, 241, 249, 331, 334, 384, 401, 404, 416, 417, 419, 421, 424, 469, 487, 488, 489, 490, 501, 506, 539, 541, 546, 567, 594, 637, 638, 662, 792, 832, 834, 835, 862, 863, 864, 867, 879, 880, 883, 886, 915, 991, 998, 1008, 1015, 1028, 1030, 1032, 1036, 1043, 1044, 1048, 1052], "least": [2, 37, 46, 54, 56, 116, 117, 119, 120, 130, 131, 145, 156, 177, 187, 192, 194, 201, 202, 207, 213, 216, 219, 223, 225, 227, 228, 231, 240, 241, 254, 260, 280, 297, 299, 325, 331, 332, 349, 362, 363, 374, 380, 382, 384, 386, 387, 391, 393, 395, 399, 401, 402, 406, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 449, 453, 455, 461, 462, 463, 466, 479, 486, 487, 488, 489, 490, 499, 521, 536, 542, 544, 546, 547, 548, 550, 551, 552, 553, 554, 562, 563, 564, 565, 567, 569, 570, 571, 598, 607, 640, 648, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 681, 683, 684, 685, 687, 688, 689, 690, 691, 692, 697, 702, 717, 721, 723, 789, 804, 808, 809, 815, 817, 818, 819, 821, 822, 824, 827, 830, 831, 832, 863, 864, 867, 878, 886, 911, 914, 915, 916, 917, 935, 957, 984, 987, 991, 994, 997, 1006, 1008, 1009, 1010, 1014, 1015, 1016, 1018, 1026, 1030, 1035, 1037, 1038, 1041, 1042, 1046], "squar": [2, 45, 46, 54, 99, 108, 115, 116, 117, 119, 120, 129, 130, 138, 145, 156, 158, 159, 177, 179, 184, 192, 194, 195, 201, 202, 204, 207, 212, 213, 219, 223, 225, 228, 233, 240, 241, 253, 254, 256, 269, 294, 324, 331, 332, 334, 346, 361, 379, 384, 387, 393, 396, 401, 414, 416, 417, 419, 420, 421, 425, 426, 437, 445, 447, 448, 449, 451, 452, 454, 455, 459, 462, 464, 465, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 506, 536, 542, 544, 546, 548, 550, 551, 552, 554, 557, 559, 561, 563, 564, 565, 567, 570, 573, 575, 595, 596, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 616, 620, 627, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 687, 688, 690, 691, 692, 693, 695, 697, 699, 701, 714, 726, 727, 728, 754, 755, 762, 763, 767, 773, 774, 789, 794, 795, 832, 839, 840, 848, 849, 852, 854, 856, 857, 864, 867, 886, 906, 907, 909, 911, 912, 913, 915, 917, 941, 967, 980, 985, 987, 988, 997, 998, 1002, 1008, 1010, 1015, 1016, 1026, 1027, 1030, 1035, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "plsregress": [2, 120, 121, 1016, 1030, 1042, 1045, 1047, 1049, 1051], "plssvd": [2, 487, 488, 1016, 1030, 1047, 1049], "svd": [2, 73, 135, 161, 244, 362, 396, 411, 417, 426, 456, 458, 487, 488, 490, 526, 537, 538, 539, 540, 544, 545, 546, 549, 551, 554, 555, 669, 677, 678, 679, 690, 691, 692, 865, 943, 988, 1028, 1037, 1041, 1042, 1048, 1050], "clear_data_hom": 2, "delet": [2, 109, 339, 341, 391, 392, 474, 479, 491], "content": [2, 7, 58, 325, 361, 363, 382, 387, 391, 393, 409, 422, 491, 508, 513, 514, 593, 594, 596, 676, 920, 1003, 1018, 1028, 1036, 1045], "cach": [2, 92, 104, 192, 281, 300, 301, 303, 308, 312, 374, 375, 382, 401, 446, 450, 455, 473, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 513, 514, 803, 848, 850, 866, 867, 904, 908, 909, 910, 911, 912, 979, 997, 1009, 1015, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051], "dump_svmlight_fil": [2, 57, 1035, 1036, 1040, 1050, 1052], "dump": [2, 57, 58, 409, 492, 846, 847], "svmlight": [2, 380, 492, 513, 514, 1030, 1035, 1036, 1042, 1044], "libsvm": [2, 44, 192, 200, 347, 380, 393, 492, 513, 568, 906, 907, 908, 909, 910, 911, 912, 1009, 1015, 1030, 1035, 1037, 1043, 1046, 1049], "file": [2, 49, 53, 57, 71, 86, 88, 361, 362, 374, 375, 376, 381, 382, 384, 385, 387, 391, 392, 393, 395, 399, 409, 415, 419, 492, 498, 499, 501, 508, 513, 514, 539, 584, 585, 593, 594, 596, 918, 997, 1010, 1015, 1017, 1020, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "format": [2, 49, 52, 53, 54, 60, 62, 86, 92, 96, 99, 107, 116, 128, 137, 145, 151, 154, 156, 168, 172, 173, 200, 203, 209, 214, 223, 241, 275, 285, 287, 288, 291, 294, 304, 305, 308, 309, 324, 329, 356, 365, 369, 374, 380, 386, 387, 389, 390, 395, 396, 400, 401, 415, 418, 421, 422, 438, 447, 448, 450, 452, 454, 455, 457, 464, 469, 473, 487, 488, 489, 490, 492, 494, 501, 502, 503, 513, 514, 515, 528, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 556, 562, 563, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 651, 657, 663, 664, 665, 667, 671, 672, 673, 681, 682, 683, 693, 694, 697, 702, 718, 725, 743, 744, 755, 772, 795, 796, 835, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 893, 898, 899, 904, 906, 918, 926, 927, 948, 956, 960, 965, 968, 970, 971, 972, 973, 974, 975, 980, 984, 994, 997, 1002, 1004, 1005, 1008, 1010, 1013, 1019, 1020, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "fetch_20newsgroup": [2, 56, 60, 107, 281, 342, 361, 362, 363, 382, 494, 1028, 1040, 1045, 1053], "load": [2, 10, 45, 47, 52, 53, 54, 56, 66, 71, 84, 86, 91, 108, 109, 123, 128, 138, 147, 149, 151, 153, 159, 160, 163, 164, 166, 174, 175, 184, 195, 196, 200, 204, 219, 220, 223, 231, 239, 252, 253, 257, 259, 260, 261, 262, 264, 271, 276, 278, 280, 285, 287, 292, 297, 300, 304, 309, 316, 317, 318, 330, 331, 333, 334, 336, 340, 341, 342, 366, 369, 374, 379, 382, 384, 390, 393, 400, 409, 417, 418, 419, 421, 487, 488, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 537, 539, 548, 846, 847, 943, 1004, 1014, 1020, 1022, 1024, 1030, 1035, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "filenam": [2, 49, 58, 342, 382, 393, 409, 493, 505, 508, 509, 512, 593, 594, 596, 1028, 1035, 1040, 1043, 1044], "20": [2, 45, 48, 49, 54, 56, 57, 60, 65, 66, 67, 72, 73, 77, 78, 81, 84, 85, 88, 92, 93, 99, 105, 114, 118, 126, 128, 135, 137, 144, 148, 151, 152, 155, 159, 163, 164, 166, 170, 172, 173, 174, 177, 185, 194, 196, 197, 205, 212, 213, 215, 219, 220, 222, 223, 224, 227, 232, 235, 236, 237, 238, 240, 246, 254, 260, 268, 270, 271, 280, 281, 283, 284, 286, 291, 292, 294, 297, 300, 304, 305, 306, 307, 308, 311, 318, 324, 325, 326, 330, 331, 332, 333, 335, 338, 339, 342, 346, 348, 352, 354, 359, 362, 363, 367, 368, 380, 384, 387, 389, 391, 392, 393, 405, 414, 421, 422, 446, 451, 452, 454, 469, 470, 474, 476, 477, 483, 493, 494, 495, 496, 497, 499, 501, 502, 505, 507, 509, 510, 516, 517, 520, 521, 528, 536, 541, 542, 547, 550, 551, 553, 557, 560, 561, 564, 565, 566, 567, 568, 574, 575, 587, 594, 595, 597, 599, 602, 604, 634, 635, 650, 654, 663, 671, 672, 673, 681, 683, 701, 709, 713, 718, 721, 729, 730, 743, 760, 761, 771, 796, 797, 801, 802, 803, 817, 828, 829, 830, 833, 835, 838, 839, 840, 843, 844, 851, 852, 863, 864, 865, 866, 868, 870, 871, 879, 880, 881, 882, 887, 901, 902, 904, 905, 910, 913, 918, 924, 926, 927, 930, 972, 983, 990, 994, 997, 1000, 1001, 1004, 1007, 1017, 1018, 1020, 1026, 1030, 1031, 1033, 1035, 1041, 1044, 1047, 1049, 1050], "newsgroup": [2, 48, 56, 60, 254, 281, 342, 362, 363, 380, 412, 422, 493, 494, 1020, 1030], "classif": [2, 14, 19, 30, 31, 38, 40, 44, 47, 48, 51, 57, 60, 63, 64, 65, 67, 70, 73, 83, 108, 109, 110, 114, 115, 120, 122, 126, 131, 142, 144, 146, 148, 149, 150, 151, 156, 158, 159, 161, 165, 167, 170, 172, 173, 174, 175, 176, 177, 178, 184, 185, 186, 195, 196, 200, 201, 213, 214, 215, 216, 223, 231, 233, 235, 236, 238, 249, 251, 255, 256, 260, 263, 269, 273, 274, 277, 278, 279, 280, 281, 289, 294, 295, 297, 298, 301, 302, 308, 309, 310, 312, 313, 314, 315, 317, 322, 323, 324, 325, 338, 343, 344, 345, 349, 352, 355, 356, 357, 358, 360, 362, 363, 370, 374, 376, 380, 381, 382, 384, 389, 392, 396, 400, 401, 410, 413, 414, 415, 418, 419, 421, 422, 423, 431, 442, 474, 480, 487, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 515, 517, 519, 520, 524, 525, 527, 528, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 611, 614, 615, 616, 618, 619, 627, 636, 637, 638, 648, 663, 664, 671, 673, 679, 680, 681, 702, 708, 710, 713, 717, 718, 720, 721, 723, 730, 731, 733, 734, 738, 739, 742, 745, 746, 747, 758, 760, 762, 763, 765, 786, 787, 788, 790, 791, 792, 793, 798, 800, 803, 804, 806, 807, 808, 809, 817, 821, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 853, 855, 856, 862, 863, 864, 866, 870, 873, 878, 879, 880, 881, 886, 887, 890, 892, 901, 902, 903, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 929, 932, 940, 983, 984, 986, 987, 988, 991, 992, 996, 999, 1001, 1002, 1004, 1005, 1007, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "fetch_20newsgroups_vector": [2, 48, 238, 254, 382, 1035, 1045, 1047, 1052, 1053], "fetch_california_h": [2, 148, 153, 190, 191, 320, 331, 382, 400, 415, 1044, 1046, 1053], "california": [2, 153, 187, 190, 191, 320, 326, 331, 380, 384, 495, 1030], "hous": [2, 112, 153, 163, 190, 191, 320, 331, 380, 495, 1030], "fetch_covtyp": [2, 200, 260, 331, 382, 1044, 1047, 1049, 1053], "covertyp": [2, 380, 496, 1030], "fetch_kddcup99": [2, 260, 382, 1042, 1043, 1044, 1047, 1048, 1053], "kddcup99": [2, 382, 497], "fetch_lfw_pair": [2, 382, 1040, 1050, 1053], "label": [2, 30, 38, 45, 47, 48, 50, 52, 53, 54, 55, 57, 61, 64, 65, 66, 67, 69, 71, 72, 76, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 93, 94, 96, 98, 101, 102, 103, 104, 105, 110, 112, 114, 115, 116, 117, 120, 121, 125, 126, 130, 132, 134, 135, 136, 137, 142, 143, 144, 145, 146, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 166, 173, 179, 180, 184, 185, 186, 187, 188, 190, 192, 195, 198, 200, 202, 203, 205, 206, 207, 211, 212, 213, 217, 223, 224, 225, 226, 229, 230, 231, 232, 233, 237, 238, 240, 241, 244, 245, 246, 250, 255, 256, 258, 260, 261, 268, 274, 275, 278, 279, 281, 282, 283, 284, 286, 289, 290, 291, 292, 293, 294, 299, 305, 307, 309, 312, 316, 318, 320, 321, 325, 329, 330, 333, 336, 337, 341, 342, 343, 351, 353, 356, 357, 361, 362, 365, 366, 367, 368, 376, 379, 380, 381, 386, 387, 389, 392, 396, 401, 402, 412, 413, 424, 425, 431, 432, 436, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 470, 474, 492, 493, 494, 498, 499, 500, 501, 507, 508, 513, 514, 517, 519, 520, 524, 527, 528, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 575, 597, 598, 599, 600, 601, 603, 604, 605, 609, 610, 611, 614, 615, 636, 663, 664, 671, 672, 673, 678, 679, 680, 681, 682, 683, 702, 703, 705, 707, 708, 709, 710, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 758, 759, 760, 761, 786, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 818, 819, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 852, 853, 855, 856, 863, 864, 866, 870, 873, 874, 877, 879, 880, 887, 890, 901, 902, 903, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 926, 931, 932, 957, 958, 965, 983, 990, 991, 995, 996, 997, 998, 1000, 1001, 1004, 1008, 1009, 1010, 1013, 1015, 1016, 1019, 1023, 1024, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "face": [2, 44, 46, 56, 74, 91, 127, 131, 133, 135, 137, 150, 192, 200, 249, 380, 387, 391, 414, 419, 421, 423, 454, 477, 498, 499, 500, 526, 537, 538, 542, 544, 545, 546, 548, 563, 589, 662, 678, 702, 718, 817, 832, 849, 886, 911, 929, 997, 1010, 1011, 1015, 1022, 1027, 1030, 1035, 1043], "wild": [2, 47, 380, 498, 499, 513, 514, 1024, 1030, 1035], "lfw": [2, 47, 382, 498, 499, 1024, 1035], "pair": [2, 51, 54, 75, 82, 96, 102, 133, 144, 146, 151, 155, 170, 183, 187, 203, 206, 215, 232, 235, 241, 254, 275, 280, 287, 289, 343, 345, 347, 349, 350, 351, 353, 355, 362, 366, 382, 399, 401, 412, 413, 415, 418, 422, 424, 442, 445, 446, 450, 455, 462, 468, 476, 477, 483, 498, 513, 514, 587, 597, 600, 601, 603, 604, 605, 615, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 637, 638, 648, 697, 704, 705, 710, 711, 712, 720, 735, 744, 762, 763, 767, 770, 773, 774, 775, 776, 777, 778, 780, 782, 783, 784, 785, 786, 790, 834, 846, 847, 921, 994, 995, 996, 997, 1004, 1010, 1035, 1047, 1048, 1050, 1051, 1052], "fetch_lfw_peopl": [2, 47, 382, 1024, 1050, 1053], "fetch_olivetti_fac": [2, 88, 128, 150, 259, 382, 1043, 1044, 1045, 1053], "olivetti": [2, 88, 128, 150, 380, 419, 500, 1030, 1035, 1043], "AT": [2, 382, 500], "t": [2, 16, 49, 52, 53, 57, 58, 66, 67, 73, 77, 78, 80, 81, 82, 90, 92, 96, 107, 109, 114, 115, 116, 118, 120, 126, 129, 130, 135, 137, 138, 142, 145, 146, 154, 155, 156, 157, 158, 162, 163, 177, 180, 182, 183, 184, 187, 188, 192, 195, 196, 197, 198, 202, 204, 207, 210, 217, 220, 221, 222, 223, 224, 241, 242, 244, 245, 246, 247, 257, 258, 267, 270, 272, 279, 280, 299, 300, 312, 313, 317, 329, 332, 333, 335, 338, 339, 341, 345, 346, 349, 350, 354, 361, 362, 363, 368, 369, 370, 374, 375, 381, 382, 384, 387, 389, 391, 393, 395, 400, 401, 405, 406, 413, 414, 415, 417, 418, 419, 421, 422, 423, 427, 431, 437, 439, 442, 452, 453, 455, 461, 468, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 500, 501, 518, 519, 520, 524, 525, 530, 535, 537, 539, 546, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 595, 596, 599, 612, 613, 615, 616, 632, 633, 635, 636, 637, 638, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 700, 701, 709, 715, 721, 722, 730, 740, 741, 759, 760, 761, 771, 792, 793, 798, 799, 803, 806, 807, 817, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 852, 853, 856, 857, 862, 863, 864, 872, 875, 876, 877, 879, 880, 886, 887, 899, 901, 902, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 943, 944, 958, 983, 986, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1008, 1009, 1010, 1015, 1019, 1026, 1027, 1028, 1029, 1030, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fetch_openml": [2, 45, 46, 54, 108, 112, 152, 158, 163, 184, 195, 196, 197, 223, 231, 239, 241, 251, 260, 264, 297, 299, 300, 317, 326, 329, 333, 336, 381, 391, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "fetch": [2, 53, 58, 163, 195, 241, 380, 381, 382, 387, 391, 392, 395, 419, 501, 560, 561, 562, 563, 568, 569, 570, 571, 593, 594, 596, 1043, 1051], "openml": [2, 45, 54, 108, 163, 184, 195, 223, 231, 239, 241, 251, 297, 299, 317, 380, 405, 501, 1030, 1043, 1045, 1048], "id": [2, 47, 60, 241, 313, 369, 381, 382, 387, 395, 416, 418, 422, 428, 499, 500, 501, 918, 920, 938, 1024, 1028, 1043, 1044, 1047], "fetch_rcv1": [2, 382, 1040, 1044, 1053], "rcv1": [2, 380, 502, 1030, 1040], "multilabel": [2, 30, 31, 120, 122, 192, 249, 287, 297, 298, 341, 382, 389, 390, 401, 410, 487, 492, 501, 502, 513, 514, 520, 528, 546, 562, 569, 572, 663, 679, 680, 708, 712, 718, 730, 733, 734, 738, 739, 742, 743, 758, 760, 787, 788, 791, 792, 798, 800, 832, 835, 837, 839, 863, 870, 873, 877, 879, 890, 911, 914, 916, 932, 956, 957, 958, 1005, 1015, 1016, 1028, 1030, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "fetch_species_distribut": [2, 52, 313, 1044, 1053], "loader": [2, 281, 342, 361, 380, 381, 382, 503, 504, 513, 1014, 1028, 1035, 1040, 1042, 1043, 1046], "speci": [2, 44, 124, 192, 260, 301, 361, 380, 420, 503, 711, 793, 851, 910, 921, 994, 1000, 1015, 1030, 1035], "phillip": [2, 52, 313, 382, 503], "2006": [2, 52, 313, 382, 421, 424, 467, 503, 562, 563, 570, 571, 615, 616, 619, 624, 627, 654, 671, 672, 745, 792, 793, 801, 841, 899, 916, 917, 990, 994, 996, 999, 1006, 1007], "get_data_hom": [2, 49], "path": [2, 49, 57, 58, 192, 195, 201, 208, 209, 212, 217, 227, 239, 293, 357, 365, 381, 385, 387, 391, 395, 396, 401, 446, 450, 455, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 513, 514, 553, 562, 563, 568, 569, 570, 571, 598, 599, 602, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 686, 687, 688, 689, 690, 691, 693, 866, 867, 913, 914, 915, 916, 917, 948, 983, 990, 991, 1000, 1014, 1015, 1035, 1036, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1050, 1051], "load_breast_canc": [2, 177, 198, 341, 365, 392, 597, 600, 601, 603, 679, 680, 792, 994, 1040, 1041, 1046], "breast": [2, 177, 380, 505, 1002, 1030, 1040], "cancer": [2, 177, 380, 505, 598, 599, 853, 1002, 1030, 1040], "wisconsin": [2, 177, 198, 380, 505, 1002, 1030, 1040], "load_diabet": [2, 48, 156, 166, 168, 177, 191, 208, 210, 211, 212, 219, 220, 261, 276, 334, 421, 563, 567, 573, 678, 706, 827, 828, 829, 915, 917, 1002, 1023, 1026, 1041, 1046, 1049], "diabet": [2, 48, 156, 166, 167, 176, 177, 191, 192, 210, 211, 212, 219, 220, 276, 293, 380, 421, 506, 657, 658, 803, 808, 827, 828, 829, 1002, 1015, 1019, 1023, 1030], "load_digit": [2, 71, 89, 90, 96, 109, 110, 123, 169, 175, 214, 230, 244, 254, 255, 278, 279, 282, 288, 295, 302, 304, 309, 316, 318, 335, 338, 339, 393, 415, 426, 450, 451, 537, 538, 539, 540, 604, 605, 643, 644, 673, 693, 694, 695, 696, 698, 700, 1019, 1023, 1024, 1025, 1026, 1027, 1041, 1046], "digit": [2, 46, 53, 54, 68, 74, 77, 83, 86, 89, 91, 94, 97, 99, 100, 109, 110, 120, 122, 131, 147, 167, 175, 177, 192, 213, 214, 230, 238, 239, 242, 243, 245, 247, 254, 255, 269, 274, 278, 279, 282, 304, 309, 310, 314, 316, 317, 335, 337, 340, 362, 380, 387, 393, 414, 420, 421, 423, 446, 450, 452, 507, 546, 549, 554, 571, 663, 693, 694, 695, 696, 697, 702, 709, 710, 718, 722, 723, 741, 797, 799, 832, 848, 855, 862, 866, 867, 876, 886, 892, 899, 902, 911, 918, 919, 920, 983, 989, 991, 994, 997, 999, 1007, 1015, 1019, 1023, 1026, 1027, 1030, 1039], "load_fil": [2, 381, 382, 1028, 1037, 1049], "text": [2, 44, 47, 48, 51, 52, 53, 56, 57, 58, 60, 70, 71, 75, 78, 82, 91, 95, 96, 98, 99, 100, 102, 107, 116, 117, 148, 153, 198, 203, 217, 218, 250, 254, 261, 262, 266, 268, 273, 279, 284, 286, 287, 291, 305, 308, 310, 315, 322, 332, 337, 339, 356, 365, 374, 376, 379, 380, 381, 387, 392, 399, 401, 413, 414, 415, 417, 418, 419, 421, 424, 452, 454, 469, 473, 492, 493, 494, 504, 508, 513, 526, 541, 549, 569, 593, 594, 595, 596, 620, 630, 657, 663, 671, 673, 679, 681, 702, 708, 710, 712, 718, 722, 733, 734, 741, 797, 799, 803, 817, 832, 841, 843, 845, 848, 853, 866, 867, 869, 870, 878, 902, 903, 904, 906, 918, 919, 920, 940, 983, 986, 990, 992, 994, 995, 996, 998, 1001, 1004, 1006, 1008, 1009, 1012, 1014, 1015, 1018, 1020, 1021, 1030, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "categori": [2, 25, 60, 82, 100, 107, 108, 152, 163, 195, 196, 223, 231, 238, 260, 281, 316, 317, 322, 326, 327, 331, 334, 336, 342, 361, 362, 363, 381, 382, 396, 414, 415, 421, 422, 424, 493, 501, 502, 508, 566, 567, 653, 663, 664, 674, 685, 747, 762, 763, 842, 879, 880, 887, 984, 990, 991, 992, 996, 1002, 1019, 1028, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "subfold": [2, 385, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 1048], "load_iri": [2, 69, 79, 83, 111, 124, 132, 134, 136, 138, 151, 164, 170, 173, 181, 206, 216, 232, 264, 268, 274, 285, 286, 287, 289, 290, 303, 308, 311, 316, 329, 331, 334, 343, 345, 346, 349, 352, 366, 369, 400, 409, 414, 415, 418, 421, 423, 434, 566, 572, 606, 607, 615, 624, 625, 627, 628, 636, 663, 664, 716, 792, 803, 806, 807, 809, 817, 834, 855, 901, 902, 903, 914, 916, 918, 919, 920, 984, 989, 994, 995, 996, 997, 1001, 1004, 1010, 1019, 1025, 1026, 1027, 1041, 1043, 1046], "iri": [2, 52, 58, 69, 70, 72, 79, 83, 111, 122, 127, 130, 132, 138, 141, 142, 143, 144, 146, 161, 164, 170, 173, 178, 180, 183, 187, 192, 200, 201, 206, 215, 216, 220, 255, 258, 264, 268, 274, 285, 286, 289, 290, 295, 303, 309, 311, 315, 316, 322, 331, 337, 342, 344, 345, 347, 349, 351, 352, 353, 364, 365, 367, 368, 369, 380, 381, 400, 414, 415, 418, 419, 421, 452, 501, 509, 546, 554, 558, 562, 569, 615, 627, 636, 681, 803, 817, 901, 902, 903, 906, 911, 914, 918, 919, 920, 983, 984, 988, 993, 994, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1015, 1019, 1026, 1027, 1030, 1048], "load_linnerud": [2, 839, 1041, 1046], "physic": [2, 107, 148, 375, 510, 959, 990, 1051], "exercis": [2, 57, 110, 151, 161, 176, 181, 183, 233, 236, 293, 343, 354, 355, 358, 359, 376, 384, 387, 506, 507, 509, 510, 657, 658, 663, 803, 808, 848, 911, 1015, 1020, 1038], "linnerud": [2, 384, 510], "load_sample_imag": [2, 86, 588, 589, 592, 1044], "numpi": [2, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 120, 121, 124, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 143, 144, 145, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 168, 170, 172, 173, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 318, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 366, 367, 368, 369, 370, 374, 380, 381, 382, 385, 387, 388, 389, 390, 391, 393, 395, 396, 399, 400, 401, 405, 406, 408, 409, 411, 412, 414, 415, 418, 419, 420, 421, 422, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 490, 495, 498, 499, 501, 508, 511, 513, 514, 526, 532, 536, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 574, 575, 586, 587, 590, 591, 593, 594, 596, 606, 609, 623, 632, 633, 634, 635, 636, 637, 638, 648, 651, 652, 654, 657, 658, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 677, 681, 682, 683, 689, 692, 693, 696, 697, 698, 699, 700, 704, 707, 708, 711, 712, 714, 717, 719, 730, 731, 733, 734, 736, 738, 739, 742, 743, 758, 760, 777, 783, 785, 786, 787, 788, 791, 792, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 832, 833, 834, 835, 838, 839, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 906, 908, 909, 911, 912, 914, 922, 923, 924, 925, 929, 931, 940, 941, 942, 943, 947, 948, 949, 956, 957, 963, 965, 968, 969, 970, 971, 972, 973, 974, 975, 980, 981, 983, 984, 989, 990, 992, 994, 995, 997, 1000, 1004, 1006, 1009, 1010, 1012, 1014, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1035, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "singl": [2, 30, 31, 73, 77, 86, 90, 91, 93, 96, 99, 100, 109, 130, 141, 142, 143, 151, 152, 162, 177, 179, 185, 190, 192, 196, 198, 200, 207, 223, 225, 227, 261, 263, 271, 276, 289, 297, 317, 333, 335, 349, 361, 362, 363, 366, 368, 370, 374, 375, 381, 382, 387, 392, 394, 395, 396, 399, 400, 401, 406, 413, 415, 417, 418, 419, 421, 422, 423, 439, 442, 445, 446, 450, 451, 452, 454, 459, 469, 471, 472, 498, 499, 501, 511, 514, 539, 558, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 587, 597, 604, 605, 607, 611, 632, 637, 639, 648, 671, 672, 678, 681, 682, 683, 695, 697, 699, 715, 716, 726, 727, 728, 729, 740, 741, 742, 745, 778, 789, 801, 802, 803, 806, 807, 817, 824, 828, 829, 831, 832, 835, 843, 846, 847, 851, 863, 864, 865, 875, 876, 879, 880, 881, 886, 887, 901, 902, 914, 915, 916, 917, 922, 952, 958, 962, 981, 983, 989, 990, 991, 994, 995, 997, 999, 1001, 1002, 1004, 1008, 1009, 1010, 1013, 1015, 1018, 1019, 1026, 1028, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "sampl": [2, 27, 30, 37, 45, 46, 49, 52, 55, 64, 65, 66, 67, 71, 72, 73, 75, 77, 79, 80, 81, 84, 86, 87, 91, 94, 95, 96, 97, 98, 103, 116, 117, 118, 121, 124, 126, 128, 132, 133, 136, 137, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 158, 159, 164, 165, 166, 174, 176, 177, 179, 183, 184, 185, 186, 188, 190, 192, 195, 196, 200, 201, 207, 209, 211, 212, 223, 225, 227, 230, 231, 233, 234, 235, 237, 239, 240, 241, 243, 250, 254, 255, 257, 258, 260, 266, 267, 269, 270, 271, 272, 273, 275, 279, 280, 282, 283, 284, 286, 288, 292, 294, 299, 300, 304, 305, 306, 307, 309, 310, 311, 318, 320, 322, 323, 324, 325, 327, 329, 331, 332, 334, 336, 338, 340, 341, 342, 343, 344, 345, 347, 349, 351, 353, 354, 355, 357, 358, 361, 362, 366, 369, 374, 380, 382, 383, 386, 387, 389, 390, 399, 400, 406, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 431, 432, 433, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 461, 462, 463, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 615, 616, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 692, 693, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 767, 768, 772, 773, 774, 775, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 926, 927, 931, 932, 943, 947, 963, 965, 968, 969, 972, 975, 983, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1019, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "imag": [2, 44, 47, 55, 61, 62, 71, 74, 77, 78, 79, 82, 84, 86, 89, 92, 94, 96, 100, 105, 107, 123, 127, 128, 133, 150, 175, 177, 183, 192, 214, 244, 252, 255, 259, 278, 309, 317, 318, 330, 338, 339, 361, 362, 379, 380, 382, 384, 387, 392, 395, 399, 401, 405, 408, 414, 419, 446, 450, 457, 467, 498, 499, 500, 501, 507, 508, 511, 512, 539, 540, 542, 546, 588, 589, 590, 591, 592, 612, 613, 696, 702, 742, 832, 876, 990, 994, 995, 997, 999, 1006, 1010, 1013, 1015, 1018, 1019, 1024, 1025, 1027, 1028, 1030, 1035, 1038, 1043, 1044, 1048, 1050, 1051], "manipul": [2, 381, 411, 512, 962, 1013, 1041], "load_svmlight_fil": [2, 381, 1035, 1036, 1041, 1042, 1043, 1050], "csr": [2, 58, 363, 374, 381, 382, 396, 399, 401, 422, 425, 448, 451, 452, 454, 455, 464, 502, 513, 528, 532, 558, 559, 562, 563, 569, 570, 571, 595, 635, 663, 697, 719, 772, 796, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 861, 869, 873, 875, 877, 878, 879, 881, 884, 885, 886, 889, 890, 891, 893, 896, 899, 914, 915, 916, 917, 922, 926, 927, 949, 957, 969, 970, 971, 972, 973, 974, 975, 976, 977, 997, 1004, 1008, 1035, 1036, 1041, 1043, 1044, 1050, 1051, 1052], "multipl": [2, 25, 84, 106, 109, 126, 137, 142, 148, 150, 151, 153, 173, 192, 195, 217, 255, 280, 285, 288, 292, 297, 299, 302, 329, 335, 352, 374, 375, 376, 381, 383, 384, 387, 389, 390, 391, 392, 399, 401, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 449, 465, 469, 471, 472, 474, 479, 493, 496, 497, 500, 501, 502, 508, 509, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 564, 565, 566, 567, 568, 586, 604, 612, 613, 615, 616, 632, 637, 639, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 662, 665, 666, 667, 668, 671, 672, 673, 676, 678, 681, 683, 684, 694, 695, 697, 698, 699, 716, 726, 727, 732, 749, 750, 752, 754, 755, 757, 789, 792, 794, 795, 797, 801, 802, 803, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 828, 829, 830, 832, 836, 837, 838, 839, 840, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 868, 871, 883, 887, 895, 898, 899, 906, 907, 908, 911, 922, 937, 942, 943, 965, 968, 986, 989, 990, 991, 995, 996, 997, 1001, 1002, 1007, 1008, 1010, 1013, 1014, 1015, 1019, 1028, 1035, 1036, 1038, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "load_win": [2, 50, 263, 325, 850, 858, 1032, 1046], "wine": [2, 50, 263, 325, 326, 380, 515, 1030], "make_biclust": [2, 62, 518, 1037], "constant": [2, 45, 137, 145, 158, 182, 186, 191, 195, 211, 224, 225, 227, 241, 252, 257, 262, 283, 312, 316, 318, 321, 323, 330, 357, 359, 370, 379, 389, 396, 401, 412, 421, 424, 437, 451, 470, 487, 488, 489, 516, 518, 539, 543, 545, 552, 554, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 595, 611, 614, 616, 618, 632, 635, 637, 638, 640, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 692, 694, 698, 700, 726, 727, 728, 732, 736, 779, 781, 789, 839, 840, 849, 857, 863, 864, 871, 882, 885, 894, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 986, 988, 990, 991, 994, 996, 997, 1004, 1008, 1010, 1030, 1038, 1043, 1045, 1047, 1048, 1049, 1051], "block": [2, 305, 320, 333, 382, 384, 387, 392, 395, 401, 412, 414, 417, 420, 457, 458, 467, 478, 484, 485, 493, 494, 516, 518, 700, 962, 997, 999], "make_blob": [2, 64, 66, 72, 76, 80, 81, 82, 87, 93, 94, 95, 97, 98, 100, 101, 102, 125, 215, 235, 250, 269, 323, 330, 333, 347, 350, 351, 358, 383, 389, 390, 421, 520, 701, 715, 796, 797, 1043, 1046, 1049], "isotrop": [2, 73, 93, 95, 99, 133, 181, 183, 243, 245, 414, 416, 424, 517, 524, 537, 620, 624, 625, 627, 628], "blob": [2, 64, 72, 73, 80, 82, 95, 100, 102, 125, 414, 453, 517], "make_checkerboard": [2, 61, 516, 1037], "checkerboard": [2, 61, 412, 456, 458, 516, 518], "make_circl": [2, 70, 82, 100, 133, 161, 248, 315, 316, 322, 340, 383, 1036, 1043, 1046], "larg": [2, 38, 45, 53, 54, 55, 62, 66, 67, 75, 77, 81, 85, 87, 88, 90, 91, 93, 110, 112, 128, 132, 145, 147, 148, 155, 158, 159, 161, 173, 184, 185, 197, 198, 202, 203, 212, 214, 223, 225, 227, 228, 229, 241, 255, 260, 277, 283, 286, 289, 302, 309, 317, 320, 322, 332, 333, 336, 349, 354, 357, 362, 363, 374, 382, 387, 393, 396, 399, 400, 401, 405, 409, 414, 416, 418, 419, 420, 421, 423, 425, 427, 447, 449, 451, 452, 455, 456, 457, 458, 463, 467, 478, 480, 504, 519, 539, 541, 543, 545, 549, 552, 554, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 587, 593, 594, 596, 639, 646, 648, 651, 652, 655, 657, 658, 659, 662, 663, 664, 669, 676, 677, 679, 682, 684, 690, 692, 694, 696, 697, 698, 700, 750, 783, 784, 803, 811, 813, 817, 821, 831, 841, 842, 843, 844, 845, 846, 847, 852, 863, 864, 871, 875, 876, 884, 886, 898, 899, 906, 907, 911, 912, 914, 915, 916, 917, 942, 943, 983, 986, 988, 990, 991, 993, 996, 997, 998, 1002, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1018, 1024, 1026, 1027, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "circl": [2, 57, 73, 98, 133, 161, 162, 170, 248, 258, 307, 310, 316, 320, 322, 340, 353, 368, 383, 391, 395, 414, 457, 467, 519, 527, 768, 1009], "contain": [2, 51, 54, 60, 64, 67, 72, 78, 87, 94, 96, 107, 108, 144, 146, 150, 158, 159, 185, 195, 196, 198, 200, 214, 227, 241, 250, 257, 260, 261, 264, 271, 278, 280, 286, 289, 290, 299, 306, 307, 309, 320, 332, 339, 342, 361, 362, 380, 381, 382, 384, 387, 389, 391, 392, 393, 394, 395, 396, 400, 401, 409, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 426, 428, 438, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 501, 505, 507, 508, 509, 513, 514, 515, 519, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 696, 697, 701, 702, 703, 705, 706, 707, 714, 717, 739, 740, 741, 776, 783, 784, 792, 798, 801, 802, 803, 806, 807, 809, 817, 821, 822, 825, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 927, 946, 947, 949, 950, 957, 960, 961, 963, 983, 984, 986, 992, 995, 998, 1000, 1002, 1004, 1005, 1007, 1010, 1013, 1017, 1019, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "smaller": [2, 37, 49, 64, 78, 84, 93, 118, 142, 158, 177, 184, 185, 188, 190, 208, 212, 214, 227, 254, 297, 306, 307, 315, 320, 349, 357, 362, 387, 412, 414, 416, 418, 419, 421, 423, 444, 445, 451, 455, 459, 461, 519, 539, 540, 562, 563, 564, 565, 566, 567, 569, 570, 598, 615, 624, 638, 651, 652, 654, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 677, 679, 687, 688, 697, 714, 801, 806, 807, 852, 855, 879, 880, 898, 899, 906, 914, 915, 916, 917, 943, 988, 990, 991, 993, 994, 995, 997, 998, 1000, 1004, 1006, 1008, 1009, 1010, 1014, 1028, 1043, 1048, 1052], "2d": [2, 45, 72, 74, 77, 82, 85, 86, 87, 91, 94, 99, 100, 123, 124, 127, 129, 132, 138, 161, 175, 192, 217, 224, 229, 243, 244, 245, 248, 250, 253, 254, 309, 346, 349, 369, 381, 383, 387, 389, 396, 401, 414, 415, 419, 422, 424, 446, 457, 467, 469, 472, 486, 493, 495, 496, 497, 498, 499, 505, 506, 507, 509, 515, 519, 538, 546, 554, 589, 591, 640, 648, 662, 677, 696, 742, 783, 827, 831, 835, 873, 922, 926, 927, 942, 957, 980, 981, 988, 990, 991, 994, 1001, 1005, 1010, 1015, 1019, 1025, 1035, 1039, 1042, 1043, 1044, 1047, 1049], "make_classif": [2, 65, 67, 70, 125, 146, 147, 149, 174, 176, 277, 283, 291, 292, 310, 315, 322, 329, 331, 335, 357, 370, 383, 390, 411, 442, 443, 492, 517, 558, 560, 562, 569, 610, 612, 671, 702, 703, 705, 707, 825, 830, 831, 833, 836, 863, 866, 906, 913, 983, 994, 995, 1004, 1009, 1041, 1042, 1043, 1045], "random": [2, 14, 37, 45, 46, 47, 48, 52, 53, 54, 55, 61, 62, 64, 65, 66, 67, 70, 72, 73, 75, 77, 78, 82, 83, 86, 88, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 126, 129, 130, 131, 134, 135, 141, 143, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 166, 170, 172, 173, 176, 179, 180, 183, 185, 186, 188, 190, 191, 192, 193, 194, 202, 203, 204, 205, 207, 212, 213, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 236, 237, 240, 241, 243, 244, 246, 247, 248, 249, 250, 255, 256, 257, 259, 260, 266, 267, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 283, 285, 287, 289, 290, 291, 292, 294, 299, 300, 305, 306, 307, 312, 315, 321, 323, 324, 327, 330, 331, 333, 335, 338, 339, 342, 343, 348, 349, 351, 352, 354, 355, 356, 359, 361, 362, 367, 368, 374, 375, 379, 383, 390, 392, 399, 400, 401, 406, 410, 411, 413, 414, 422, 423, 427, 439, 445, 448, 452, 454, 456, 457, 458, 459, 463, 464, 465, 467, 469, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 493, 494, 495, 496, 497, 500, 501, 502, 507, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 543, 544, 545, 546, 549, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 587, 588, 589, 594, 612, 613, 615, 616, 632, 635, 637, 639, 644, 645, 646, 647, 648, 651, 652, 654, 655, 657, 658, 659, 663, 665, 666, 667, 668, 675, 676, 677, 681, 682, 683, 684, 692, 694, 695, 696, 697, 698, 699, 700, 706, 709, 710, 713, 735, 747, 785, 792, 797, 801, 802, 803, 805, 806, 807, 808, 815, 817, 818, 819, 820, 821, 822, 823, 824, 831, 832, 837, 839, 840, 841, 842, 843, 845, 846, 847, 851, 855, 862, 863, 864, 866, 869, 871, 880, 883, 887, 895, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 929, 940, 942, 943, 963, 965, 968, 984, 986, 989, 991, 993, 994, 998, 999, 1000, 1002, 1004, 1009, 1010, 1013, 1014, 1015, 1016, 1019, 1023, 1024, 1026, 1027, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "n": [2, 45, 46, 48, 49, 51, 52, 56, 58, 60, 71, 72, 75, 77, 78, 96, 107, 112, 116, 120, 126, 128, 131, 133, 135, 137, 138, 142, 144, 145, 149, 165, 172, 177, 179, 183, 188, 196, 198, 203, 207, 219, 223, 224, 227, 238, 240, 241, 243, 253, 254, 255, 258, 266, 268, 269, 278, 280, 283, 285, 286, 287, 289, 290, 300, 303, 305, 318, 322, 324, 325, 331, 334, 336, 339, 353, 357, 369, 374, 381, 384, 385, 387, 391, 393, 396, 401, 405, 406, 412, 413, 414, 417, 418, 419, 420, 421, 422, 424, 425, 449, 450, 452, 453, 455, 474, 476, 479, 483, 494, 520, 521, 522, 523, 528, 533, 543, 545, 546, 552, 562, 563, 564, 565, 568, 569, 570, 571, 593, 594, 595, 596, 612, 613, 619, 632, 654, 676, 684, 697, 701, 704, 711, 712, 759, 808, 811, 813, 818, 819, 822, 842, 846, 847, 851, 871, 898, 900, 914, 915, 916, 917, 923, 941, 946, 947, 969, 973, 974, 983, 986, 988, 990, 991, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1006, 1008, 1009, 1010, 1019, 1026, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "problem": [2, 11, 25, 44, 45, 46, 47, 52, 54, 55, 56, 66, 75, 92, 93, 95, 104, 128, 142, 145, 148, 150, 155, 156, 179, 192, 197, 200, 202, 207, 209, 212, 216, 217, 223, 225, 227, 240, 241, 245, 250, 251, 258, 260, 263, 278, 280, 285, 289, 290, 294, 297, 299, 300, 305, 312, 324, 332, 336, 346, 349, 353, 357, 358, 361, 362, 369, 370, 374, 382, 383, 384, 385, 386, 388, 389, 392, 393, 396, 399, 401, 413, 414, 416, 418, 420, 421, 422, 423, 424, 425, 426, 449, 452, 454, 455, 457, 462, 467, 470, 483, 508, 513, 514, 520, 521, 522, 523, 528, 529, 533, 536, 538, 542, 544, 547, 548, 549, 550, 551, 552, 553, 556, 557, 562, 566, 569, 572, 576, 578, 594, 615, 636, 648, 653, 655, 657, 659, 660, 661, 662, 663, 664, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 696, 698, 700, 713, 721, 733, 734, 739, 742, 743, 787, 788, 791, 792, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 826, 834, 835, 836, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 872, 873, 879, 887, 890, 896, 897, 906, 907, 914, 916, 932, 943, 984, 985, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1002, 1004, 1008, 1011, 1014, 1016, 1018, 1020, 1021, 1022, 1028, 1029, 1030, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "make_friedman1": [2, 383, 421, 544, 548, 598, 599, 637], "friedman": [2, 145, 146, 157, 279, 416, 418, 421, 483, 521, 522, 523, 525, 563, 564, 565, 570, 598, 599, 836, 914, 915, 917, 988, 990, 995, 1001, 1010], "make_friedman2": [2, 383, 616, 618, 619, 620, 621, 622, 626, 629, 630], "2": [2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 376, 381, 382, 384, 385, 387, 389, 391, 392, 393, 394, 396, 399, 400, 401, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 476, 477, 478, 479, 480, 483, 484, 485, 487, 488, 489, 490, 498, 501, 505, 506, 509, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 589, 590, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 708, 709, 710, 711, 712, 713, 716, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 767, 768, 771, 772, 773, 775, 777, 778, 779, 780, 782, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 899, 900, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 919, 921, 922, 923, 924, 926, 927, 928, 932, 935, 941, 942, 943, 944, 945, 946, 947, 948, 949, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040], "make_friedman3": [2, 383], "make_gaussian_quantil": [2, 125, 142, 144, 383, 475, 479, 480, 481, 486, 525], "quantil": [2, 82, 91, 101, 125, 142, 144, 192, 201, 320, 323, 324, 399, 421, 443, 444, 463, 524, 557, 565, 567, 662, 675, 727, 749, 752, 754, 829, 871, 883, 884, 885, 895, 896, 994, 1004, 1015, 1016, 1030, 1035, 1039, 1042, 1044, 1048, 1049, 1051], "make_hastie_10_2": [2, 157, 284, 383, 421, 564, 1001], "binari": [2, 30, 49, 55, 65, 67, 146, 148, 159, 161, 174, 187, 195, 200, 214, 216, 223, 231, 244, 251, 260, 263, 277, 278, 283, 289, 295, 297, 304, 349, 353, 355, 369, 370, 381, 382, 383, 389, 391, 392, 401, 405, 409, 412, 413, 414, 421, 422, 424, 442, 443, 444, 457, 492, 505, 513, 514, 525, 528, 554, 555, 558, 560, 564, 566, 571, 572, 573, 586, 593, 594, 596, 598, 599, 607, 615, 632, 633, 634, 635, 636, 637, 638, 663, 664, 671, 673, 678, 679, 680, 681, 705, 708, 712, 713, 714, 717, 718, 720, 723, 725, 731, 733, 734, 738, 739, 742, 743, 744, 745, 746, 747, 786, 787, 788, 791, 792, 793, 798, 800, 803, 804, 806, 807, 808, 809, 817, 821, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 841, 852, 862, 873, 877, 879, 887, 890, 906, 908, 911, 957, 984, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1019, 1032, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1052], "hasti": [2, 142, 145, 146, 157, 177, 211, 279, 384, 418, 421, 524, 525, 558, 564, 565, 633, 661, 726, 727, 728, 836, 853, 899, 914, 915, 984, 988, 990, 995, 1001, 1006, 1008, 1010], "2009": [2, 142, 145, 146, 157, 207, 414, 418, 419, 421, 422, 524, 525, 533, 536, 542, 543, 545, 546, 549, 552, 558, 564, 565, 640, 676, 684, 701, 837, 914, 915, 942, 943, 990, 994, 995, 1001, 1010], "exampl": [2, 30, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 381, 382, 384, 386, 387, 389, 390, 391, 393, 394, 395, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 429, 430, 432, 433, 435, 436, 439, 440, 441, 444, 461, 462, 464, 466, 468, 476, 483, 485, 486, 490, 491, 498, 502, 508, 510, 512, 513, 514, 521, 522, 523, 533, 534, 536, 550, 551, 552, 553, 560, 577, 578, 582, 588, 590, 591, 597, 600, 601, 603, 606, 608, 614, 617, 621, 625, 626, 629, 631, 634, 641, 642, 643, 647, 655, 656, 659, 665, 666, 668, 672, 680, 688, 690, 691, 692, 699, 700, 701, 704, 713, 715, 716, 719, 720, 721, 725, 726, 727, 728, 729, 730, 732, 734, 735, 737, 740, 743, 744, 747, 748, 751, 755, 758, 760, 762, 763, 764, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 787, 795, 798, 800, 810, 811, 812, 813, 814, 815, 816, 826, 838, 840, 842, 846, 847, 856, 857, 858, 860, 861, 868, 869, 872, 874, 877, 888, 889, 891, 893, 894, 896, 897, 898, 901, 905, 907, 916, 917, 918, 919, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 948, 949, 956, 957, 958, 959, 962, 963, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1018, 1020, 1023, 1024, 1028, 1030, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "10": [2, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 61, 65, 66, 67, 69, 70, 71, 75, 77, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 114, 115, 116, 117, 118, 120, 121, 126, 130, 131, 132, 133, 137, 138, 142, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 158, 160, 161, 164, 166, 170, 174, 177, 180, 181, 183, 185, 186, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 207, 213, 214, 216, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 239, 240, 241, 244, 245, 250, 253, 254, 255, 256, 257, 259, 260, 261, 263, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 288, 291, 294, 297, 299, 305, 315, 316, 317, 318, 320, 321, 323, 324, 325, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 347, 348, 349, 351, 352, 354, 356, 357, 359, 361, 362, 363, 370, 374, 381, 382, 383, 384, 387, 389, 392, 393, 399, 400, 401, 405, 406, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 427, 443, 448, 452, 454, 456, 457, 458, 464, 465, 467, 480, 493, 497, 498, 501, 505, 506, 507, 509, 515, 516, 517, 518, 521, 525, 526, 529, 531, 533, 536, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 553, 557, 560, 561, 562, 563, 566, 567, 569, 570, 571, 572, 573, 575, 587, 588, 592, 598, 599, 604, 605, 610, 612, 616, 622, 624, 632, 635, 637, 639, 640, 641, 642, 645, 647, 648, 649, 651, 652, 654, 657, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 677, 678, 680, 681, 682, 683, 686, 690, 691, 696, 697, 700, 701, 704, 710, 720, 730, 746, 760, 773, 801, 802, 803, 804, 805, 806, 807, 814, 817, 818, 819, 820, 821, 823, 824, 825, 830, 832, 833, 834, 835, 841, 842, 843, 845, 846, 847, 853, 862, 863, 864, 866, 872, 876, 879, 880, 883, 895, 903, 909, 912, 914, 915, 919, 930, 940, 943, 947, 958, 962, 963, 964, 970, 971, 980, 983, 984, 989, 990, 991, 992, 994, 995, 997, 998, 1000, 1001, 1004, 1008, 1009, 1015, 1019, 1023, 1024, 1026, 1027, 1028, 1032, 1033, 1036, 1037, 1038, 1043, 1045, 1046, 1047, 1049, 1050], "make_low_rank_matrix": [2, 335, 529], "low": [2, 37, 45, 52, 53, 75, 88, 117, 121, 130, 132, 135, 142, 145, 159, 177, 197, 216, 218, 223, 225, 227, 237, 243, 245, 250, 254, 260, 266, 267, 269, 272, 274, 280, 282, 286, 287, 295, 306, 307, 317, 324, 326, 327, 335, 341, 348, 349, 361, 369, 383, 384, 387, 392, 395, 399, 401, 405, 412, 413, 418, 419, 422, 447, 449, 454, 473, 526, 529, 540, 587, 594, 608, 684, 697, 701, 710, 730, 746, 793, 851, 880, 887, 904, 943, 959, 962, 983, 989, 990, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1004, 1006, 1009, 1010, 1016, 1030, 1036, 1039, 1040, 1041, 1043, 1044, 1049, 1050], "rank": [2, 45, 58, 65, 116, 132, 135, 149, 175, 197, 198, 241, 278, 280, 288, 383, 410, 412, 413, 416, 417, 419, 421, 422, 513, 514, 526, 529, 554, 555, 598, 599, 611, 653, 662, 674, 685, 701, 725, 730, 731, 743, 744, 760, 792, 798, 806, 807, 943, 983, 985, 986, 991, 1002, 1004, 1018, 1030, 1036, 1041, 1044, 1045, 1049, 1050], "bell": [2, 526, 1043, 1045, 1047, 1048], "shape": [2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 79, 84, 85, 86, 89, 90, 91, 92, 93, 96, 98, 99, 104, 107, 111, 112, 116, 128, 129, 131, 143, 148, 149, 150, 151, 152, 155, 156, 157, 158, 161, 162, 170, 173, 175, 180, 181, 183, 185, 186, 190, 191, 192, 196, 197, 211, 212, 223, 225, 230, 232, 235, 236, 237, 238, 239, 242, 244, 245, 246, 250, 253, 254, 255, 256, 257, 259, 260, 266, 268, 270, 271, 272, 278, 280, 282, 283, 286, 287, 289, 290, 300, 305, 306, 310, 313, 315, 317, 322, 323, 329, 331, 334, 335, 336, 340, 341, 343, 346, 349, 352, 353, 354, 355, 358, 359, 361, 362, 369, 374, 380, 381, 382, 387, 389, 401, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 923, 928, 931, 932, 937, 941, 943, 945, 948, 956, 958, 963, 965, 969, 970, 971, 972, 973, 974, 975, 976, 977, 984, 989, 990, 994, 995, 996, 997, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1024, 1025, 1027, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1051, 1052], "singular": [2, 128, 396, 412, 414, 417, 456, 458, 487, 488, 489, 490, 526, 529, 539, 543, 545, 546, 549, 552, 554, 555, 662, 677, 678, 679, 692, 943, 990, 991, 993, 1029, 1030, 1041, 1042], "make_moon": [2, 70, 82, 100, 250, 280, 315, 316, 322, 383, 983, 1042, 1046], "two": [2, 37, 45, 48, 50, 52, 56, 61, 64, 66, 69, 73, 75, 77, 78, 81, 93, 98, 102, 107, 108, 112, 116, 120, 121, 124, 125, 126, 128, 130, 131, 133, 136, 141, 142, 143, 150, 151, 152, 153, 155, 158, 159, 160, 161, 164, 174, 177, 179, 180, 181, 182, 185, 186, 190, 191, 192, 195, 196, 197, 202, 206, 207, 211, 212, 213, 214, 219, 223, 224, 225, 231, 232, 235, 240, 241, 245, 247, 248, 250, 255, 257, 258, 260, 266, 267, 268, 270, 271, 272, 275, 277, 281, 287, 297, 303, 305, 308, 309, 311, 313, 320, 322, 325, 329, 330, 332, 333, 340, 345, 346, 349, 350, 351, 353, 358, 361, 362, 363, 366, 370, 380, 381, 382, 383, 384, 385, 387, 389, 391, 393, 394, 395, 399, 401, 402, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 446, 447, 448, 449, 450, 452, 455, 456, 457, 458, 462, 464, 469, 474, 475, 476, 477, 478, 479, 480, 481, 493, 495, 496, 497, 498, 499, 501, 503, 505, 506, 507, 508, 509, 510, 512, 515, 519, 524, 527, 541, 543, 545, 549, 552, 554, 555, 558, 565, 575, 586, 589, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 625, 626, 629, 633, 636, 637, 644, 648, 650, 675, 676, 678, 697, 704, 708, 709, 710, 717, 720, 721, 724, 726, 727, 728, 735, 736, 739, 740, 742, 745, 747, 758, 759, 761, 767, 768, 775, 778, 781, 782, 783, 784, 785, 789, 790, 798, 799, 800, 801, 835, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 863, 864, 870, 871, 878, 879, 880, 881, 900, 901, 902, 906, 907, 914, 916, 917, 957, 973, 974, 980, 983, 984, 986, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1019, 1023, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "interleav": [2, 383, 399, 527], "half": [2, 45, 64, 131, 158, 255, 259, 278, 280, 292, 382, 383, 419, 468, 527, 567, 598, 602, 607, 774, 865, 873, 994, 997, 1010], "make_multilabel_classif": [2, 126, 258, 383, 520, 541, 792, 837, 838, 994, 1037, 1038, 1040, 1046], "make_regress": [2, 51, 112, 202, 204, 205, 209, 226, 227, 293, 330, 336, 370, 383, 389, 390, 400, 559, 561, 565, 570, 611, 613, 614, 640, 651, 652, 654, 656, 657, 658, 660, 665, 666, 667, 668, 669, 670, 672, 676, 684, 686, 687, 688, 690, 691, 692, 864, 907, 994, 995, 997], "make_s_curv": [2, 243, 248], "make_sparse_coded_sign": [2, 222, 536, 542, 550, 551, 1049, 1051], "signal": [2, 11, 55, 117, 128, 129, 130, 137, 153, 155, 179, 184, 185, 192, 194, 201, 202, 208, 209, 211, 212, 217, 218, 222, 224, 272, 332, 414, 416, 422, 423, 424, 427, 480, 508, 526, 531, 536, 539, 542, 546, 550, 551, 630, 649, 650, 651, 652, 657, 658, 668, 669, 677, 689, 690, 691, 789, 824, 832, 880, 990, 994, 1011, 1015, 1018, 1022, 1029, 1030], "combin": [2, 19, 45, 53, 54, 61, 65, 67, 99, 107, 108, 110, 111, 112, 124, 128, 136, 137, 141, 152, 153, 157, 158, 166, 179, 185, 190, 191, 192, 195, 207, 223, 227, 240, 241, 247, 250, 252, 255, 280, 281, 289, 291, 292, 309, 316, 326, 331, 332, 334, 352, 353, 363, 366, 374, 379, 383, 384, 387, 392, 400, 401, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 426, 427, 450, 469, 471, 472, 478, 480, 481, 484, 485, 486, 494, 501, 513, 514, 520, 526, 529, 531, 536, 542, 543, 545, 547, 552, 554, 565, 567, 570, 572, 573, 615, 619, 621, 626, 629, 635, 639, 648, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 671, 673, 677, 678, 679, 680, 681, 683, 684, 686, 689, 697, 706, 734, 792, 803, 806, 807, 814, 815, 827, 829, 833, 850, 865, 866, 867, 871, 879, 880, 881, 886, 906, 968, 983, 986, 987, 990, 994, 995, 997, 1000, 1004, 1007, 1008, 1010, 1011, 1015, 1018, 1024, 1026, 1028, 1035, 1040, 1043, 1046, 1047, 1048, 1050, 1051], "dictionari": [2, 46, 48, 49, 74, 86, 91, 127, 129, 158, 160, 192, 222, 257, 259, 362, 363, 380, 381, 382, 389, 399, 401, 414, 422, 454, 469, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 515, 531, 536, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 572, 573, 574, 575, 586, 587, 589, 592, 593, 594, 637, 638, 639, 669, 690, 691, 706, 716, 718, 803, 806, 807, 814, 815, 817, 829, 865, 870, 879, 914, 915, 916, 917, 921, 931, 951, 954, 983, 990, 994, 1009, 1015, 1019, 1028, 1029, 1030, 1035, 1043, 1046, 1047, 1048, 1049, 1050], "make_sparse_spd_matrix": [2, 118, 483, 534, 1052], "symmetr": [2, 82, 155, 198, 225, 401, 413, 414, 457, 467, 468, 479, 524, 532, 534, 695, 699, 700, 709, 710, 720, 721, 722, 728, 732, 740, 741, 759, 761, 767, 789, 799, 801, 802, 980, 983, 990, 994, 997, 1051], "definit": [2, 96, 117, 211, 223, 287, 300, 362, 387, 388, 389, 401, 404, 414, 416, 417, 419, 532, 534, 540, 616, 633, 697, 713, 723, 732, 762, 801, 802, 983, 986, 988, 990, 992, 994, 997, 1008, 1012, 1030, 1039, 1043, 1050], "make_sparse_uncorrel": [2, 383], "uncorrel": [2, 286, 383, 533, 539, 546, 994, 1026], "make_spd_matrix": [2, 532], "make_swiss_rol": [2, 105, 247, 1049], "swiss": [2, 105, 192, 242, 243, 248, 414, 535, 697, 698, 1015, 1049], "roll": [2, 54, 105, 192, 242, 243, 248, 390, 414, 535, 697, 698, 937, 1015, 1018, 1045, 1050], "dictionarylearn": [2, 419, 542, 544, 545, 547, 548, 549, 550, 551, 1036, 1040, 1042, 1045, 1048, 1049, 1050, 1051], "decomposit": [2, 9, 46, 47, 56, 58, 88, 96, 107, 109, 110, 111, 121, 124, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 161, 200, 243, 244, 246, 255, 258, 259, 262, 279, 304, 309, 325, 333, 336, 362, 376, 380, 393, 396, 401, 411, 412, 413, 415, 421, 426, 454, 456, 457, 458, 467, 487, 488, 489, 500, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 616, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 677, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 801, 802, 855, 862, 865, 868, 884, 915, 942, 943, 990, 991, 994, 1011, 1013, 1015, 1016, 1022, 1024, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "factoranalysi": [2, 128, 135, 138, 419, 549, 1036, 1038, 1047, 1049], "factor": [2, 11, 44, 47, 50, 66, 70, 82, 84, 91, 93, 100, 127, 133, 137, 161, 192, 195, 237, 248, 250, 260, 291, 292, 300, 301, 315, 316, 320, 322, 331, 333, 348, 374, 375, 387, 393, 396, 401, 412, 414, 421, 422, 424, 445, 447, 459, 474, 476, 477, 478, 479, 481, 483, 493, 509, 519, 520, 532, 537, 540, 541, 543, 545, 546, 549, 550, 551, 552, 554, 555, 566, 567, 568, 593, 596, 602, 618, 654, 655, 656, 659, 660, 661, 687, 688, 697, 724, 787, 803, 806, 807, 828, 852, 886, 900, 902, 910, 942, 943, 983, 990, 991, 997, 1004, 1007, 1011, 1013, 1015, 1029, 1030, 1035, 1036, 1038, 1039, 1041, 1049, 1051], "fa": [2, 127, 137, 138, 192, 393, 419, 478, 481, 537, 546, 803, 828, 1015], "fastica": [2, 127, 192, 222, 419, 537, 540, 546, 1015, 1027, 1035, 1037, 1043, 1049, 1050], "fast": [2, 54, 67, 100, 200, 207, 212, 238, 239, 255, 256, 321, 363, 374, 382, 387, 396, 414, 416, 418, 419, 421, 422, 426, 451, 452, 474, 479, 513, 537, 538, 540, 543, 545, 549, 552, 569, 570, 571, 593, 594, 596, 637, 638, 645, 663, 664, 677, 679, 692, 704, 803, 817, 827, 828, 838, 839, 846, 847, 851, 862, 943, 963, 986, 990, 993, 996, 997, 999, 1000, 1010, 1013, 1018, 1028, 1035, 1036, 1041, 1042, 1045, 1046], "independ": [2, 32, 54, 65, 67, 75, 84, 129, 130, 132, 147, 151, 186, 196, 259, 260, 280, 283, 285, 289, 299, 320, 327, 329, 362, 370, 374, 375, 383, 389, 391, 400, 401, 405, 412, 413, 414, 415, 416, 417, 418, 422, 426, 454, 469, 493, 508, 520, 521, 522, 523, 525, 537, 538, 540, 542, 544, 545, 551, 552, 556, 557, 609, 612, 613, 630, 645, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 677, 678, 679, 680, 709, 710, 722, 740, 741, 759, 761, 799, 805, 831, 835, 837, 839, 840, 878, 882, 883, 884, 886, 890, 891, 892, 893, 895, 896, 897, 900, 908, 909, 910, 911, 912, 937, 983, 986, 988, 990, 991, 994, 995, 996, 999, 1001, 1004, 1009, 1010, 1029, 1030, 1035, 1036, 1041, 1043, 1045, 1050], "compon": [2, 11, 45, 46, 58, 82, 96, 100, 107, 110, 119, 120, 124, 129, 130, 132, 133, 134, 135, 136, 138, 161, 169, 184, 191, 192, 194, 207, 243, 254, 255, 258, 266, 267, 270, 271, 272, 279, 281, 300, 301, 302, 303, 311, 312, 318, 325, 331, 374, 379, 382, 387, 389, 393, 396, 399, 411, 414, 415, 417, 422, 424, 426, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 507, 509, 520, 526, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 801, 802, 803, 806, 807, 817, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 942, 943, 986, 991, 993, 1004, 1006, 1009, 1013, 1014, 1015, 1016, 1018, 1022, 1028, 1029, 1030, 1035, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "incrementalpca": [2, 132, 376, 419, 538, 540, 544, 546, 549, 1039, 1042, 1043, 1045, 1046, 1049], "increment": [2, 109, 127, 133, 134, 135, 136, 192, 283, 391, 393, 447, 452, 468, 509, 538, 539, 540, 541, 544, 546, 549, 607, 651, 663, 671, 809, 830, 838, 839, 841, 842, 843, 844, 845, 875, 876, 886, 906, 907, 969, 990, 996, 1015, 1038, 1039], "princip": [2, 44, 119, 120, 124, 130, 132, 133, 134, 136, 161, 192, 243, 255, 258, 309, 325, 331, 379, 414, 417, 426, 489, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 555, 662, 693, 694, 695, 697, 698, 832, 855, 867, 886, 942, 943, 991, 997, 1015, 1029, 1030, 1035], "ipca": [2, 132, 538, 539], "kernelpca": [2, 46, 415, 419, 538, 539, 546, 549, 693, 695, 697, 872, 1004, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "kpca": [2, 538, 539, 540, 1029, 1030, 1035], "latentdirichletalloc": [2, 56, 376, 392, 419, 1013, 1040, 1042, 1049, 1050], "latent": [2, 44, 47, 58, 138, 192, 318, 362, 417, 422, 424, 493, 537, 541, 543, 544, 545, 548, 549, 593, 596, 862, 993, 1013, 1015, 1028, 1029, 1030, 1037, 1040], "dirichlet": [2, 44, 47, 192, 266, 267, 272, 275, 422, 493, 541, 543, 545, 593, 596, 801, 1013, 1015, 1029, 1030, 1035, 1040, 1041], "alloc": [2, 44, 47, 65, 99, 192, 292, 331, 383, 387, 388, 414, 422, 448, 452, 464, 493, 541, 543, 545, 589, 593, 596, 651, 657, 665, 667, 806, 807, 809, 825, 830, 833, 983, 1004, 1013, 1015, 1029, 1030, 1039, 1040, 1045, 1046, 1052], "onlin": [2, 46, 49, 56, 74, 128, 131, 192, 201, 231, 237, 259, 316, 376, 382, 386, 392, 401, 414, 419, 422, 424, 447, 451, 452, 454, 500, 507, 536, 541, 542, 543, 544, 550, 551, 587, 589, 663, 671, 672, 673, 681, 683, 832, 841, 842, 843, 844, 845, 848, 849, 854, 856, 857, 875, 876, 886, 906, 907, 986, 990, 998, 1000, 1012, 1015, 1016, 1018, 1026, 1030, 1035, 1039, 1040, 1042, 1050], "variat": [2, 45, 48, 53, 75, 103, 126, 160, 177, 184, 185, 191, 192, 195, 228, 265, 267, 272, 277, 291, 299, 310, 330, 349, 384, 418, 419, 448, 452, 464, 541, 648, 677, 679, 680, 801, 802, 821, 822, 824, 983, 994, 1004, 1007, 1010, 1013, 1015, 1024, 1026, 1029, 1030, 1038, 1040, 1041], "bay": [2, 32, 67, 70, 145, 161, 179, 212, 271, 282, 361, 382, 413, 419, 421, 422, 541, 554, 555, 661, 841, 842, 843, 844, 845, 887, 988, 989, 990, 1004, 1016, 1028, 1030, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "minibatchdictionarylearn": [2, 128, 131, 376, 419, 536, 543, 547, 550, 551, 1036, 1038, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "minibatchnmf": [2, 56, 376, 419, 1049, 1051, 1052], "neg": [2, 44, 45, 47, 57, 64, 98, 112, 114, 121, 148, 154, 155, 160, 192, 194, 195, 201, 213, 219, 223, 241, 270, 271, 277, 280, 283, 287, 289, 290, 300, 320, 324, 333, 361, 393, 401, 402, 414, 418, 421, 422, 423, 425, 426, 437, 445, 449, 457, 470, 474, 487, 488, 489, 493, 536, 538, 540, 541, 542, 543, 545, 547, 549, 552, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 593, 596, 597, 600, 601, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 682, 683, 684, 685, 692, 703, 704, 709, 710, 717, 718, 720, 721, 723, 724, 726, 727, 728, 731, 733, 734, 735, 739, 742, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 786, 787, 788, 789, 791, 794, 795, 797, 801, 802, 809, 825, 827, 832, 839, 840, 849, 852, 857, 864, 873, 882, 884, 885, 890, 894, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 941, 943, 962, 992, 994, 995, 997, 998, 999, 1000, 1008, 1009, 1015, 1028, 1029, 1030, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "nmf": [2, 11, 56, 109, 393, 422, 540, 543, 549, 552, 1029, 1030, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "minibatchsparsepca": [2, 536, 538, 542, 545, 547, 548, 550, 551, 1035, 1036, 1046, 1048, 1049, 1050, 1051, 1052], "pca": [2, 11, 44, 47, 72, 83, 89, 106, 107, 109, 111, 112, 121, 127, 130, 137, 138, 169, 192, 220, 244, 246, 253, 255, 258, 262, 279, 288, 291, 300, 304, 309, 318, 332, 370, 379, 389, 401, 411, 414, 415, 420, 430, 478, 481, 489, 501, 507, 509, 519, 537, 538, 539, 540, 544, 545, 548, 549, 554, 648, 663, 693, 695, 697, 701, 803, 828, 832, 855, 862, 865, 866, 868, 876, 884, 886, 986, 988, 991, 997, 1004, 1008, 1010, 1015, 1024, 1029, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1052, 1053], "sparsecod": [2, 137, 419, 536, 542, 545, 553, 1042, 1043, 1045, 1047, 1049], "sparsepca": [2, 128, 536, 538, 539, 540, 542, 544, 545, 546, 547, 550, 551, 1035, 1042, 1043, 1045, 1046, 1048, 1049, 1050], "truncatedsvd": [2, 161, 244, 362, 419, 539, 540, 544, 545, 546, 697, 865, 868, 1037, 1042, 1046, 1047, 1049], "dimension": [2, 11, 37, 47, 50, 51, 60, 70, 78, 82, 92, 93, 95, 96, 100, 106, 108, 110, 111, 120, 121, 126, 128, 135, 136, 142, 147, 161, 169, 170, 177, 179, 181, 182, 186, 192, 207, 219, 224, 240, 242, 244, 245, 247, 250, 254, 255, 258, 267, 268, 301, 304, 308, 310, 322, 346, 353, 361, 370, 374, 379, 382, 383, 384, 387, 396, 401, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 450, 452, 454, 470, 474, 478, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 502, 505, 506, 507, 509, 510, 515, 520, 524, 537, 539, 540, 543, 544, 545, 546, 549, 552, 554, 568, 571, 578, 604, 612, 636, 645, 646, 647, 657, 693, 694, 695, 696, 697, 698, 699, 701, 704, 715, 729, 801, 802, 803, 832, 846, 847, 848, 851, 854, 855, 862, 866, 867, 870, 876, 881, 886, 898, 899, 900, 906, 910, 943, 980, 985, 986, 989, 990, 995, 996, 1000, 1006, 1007, 1008, 1009, 1010, 1015, 1016, 1018, 1019, 1020, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1047, 1050, 1051], "reduct": [2, 11, 47, 60, 92, 95, 106, 110, 121, 128, 136, 145, 161, 192, 242, 244, 245, 248, 254, 258, 301, 308, 310, 333, 346, 370, 374, 379, 414, 415, 417, 419, 421, 423, 473, 487, 488, 489, 490, 507, 535, 537, 539, 540, 543, 544, 545, 546, 549, 552, 554, 558, 559, 562, 563, 564, 565, 569, 570, 571, 604, 612, 663, 664, 693, 694, 695, 696, 697, 698, 785, 803, 832, 848, 855, 862, 866, 867, 876, 886, 904, 906, 914, 915, 916, 917, 986, 991, 1006, 1010, 1014, 1015, 1016, 1018, 1024, 1030, 1036, 1037, 1038, 1041, 1049, 1050, 1051], "truncat": [2, 110, 161, 244, 396, 539, 540, 544, 545, 546, 549, 681, 683, 730, 760, 801, 855, 919, 943, 983, 993, 994, 1008, 1024, 1028, 1029, 1030, 1041, 1043], "aka": [2, 47, 315, 361, 399, 422, 457, 541, 543, 545, 549, 552, 586, 587, 620, 627, 656, 657, 659, 660, 661, 663, 664, 667, 671, 672, 673, 675, 681, 682, 683, 745, 873, 877, 879, 990, 998, 1008, 1019, 1024, 1037, 1049], "lsa": [2, 419, 549, 1037], "dict_learn": [2, 396, 536, 542, 551, 1036, 1043, 1045, 1048, 1049, 1051], "solv": [2, 46, 47, 104, 179, 212, 255, 280, 299, 386, 387, 388, 389, 392, 399, 414, 416, 418, 419, 424, 452, 458, 467, 483, 536, 542, 543, 544, 548, 550, 551, 552, 553, 640, 642, 651, 657, 659, 660, 669, 670, 675, 677, 679, 682, 690, 691, 692, 836, 906, 907, 910, 943, 985, 988, 990, 991, 994, 995, 1008, 1009, 1010, 1012, 1013, 1018, 1021, 1024, 1028, 1041, 1045, 1048], "dict_learning_onlin": [2, 550, 1036, 1045, 1048, 1049, 1052], "non_negative_factor": [2, 1044, 1046, 1047, 1048, 1052], "sparse_encod": [2, 547, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 687, 688, 689, 690, 691, 1035, 1042, 1043, 1045, 1049], "lineardiscriminantanalysi": [2, 72, 73, 136, 244, 309, 370, 411, 541, 555, 855, 988, 995, 997, 1035, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1049, 1050, 1051], "linear": [2, 12, 46, 50, 51, 52, 53, 54, 55, 57, 67, 68, 69, 70, 75, 90, 95, 111, 112, 114, 115, 116, 117, 118, 121, 124, 128, 133, 136, 145, 147, 161, 163, 166, 168, 170, 172, 175, 177, 183, 185, 190, 191, 193, 194, 196, 200, 203, 205, 207, 209, 211, 212, 213, 218, 220, 221, 224, 225, 227, 228, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 245, 247, 253, 254, 256, 258, 259, 262, 270, 271, 274, 276, 277, 278, 280, 283, 285, 286, 287, 288, 289, 290, 294, 305, 306, 308, 309, 310, 313, 315, 318, 320, 321, 322, 323, 325, 327, 331, 332, 343, 344, 346, 349, 350, 351, 354, 357, 358, 359, 361, 367, 368, 375, 379, 383, 384, 385, 389, 390, 392, 401, 404, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 447, 449, 460, 470, 472, 480, 487, 488, 489, 501, 506, 507, 517, 520, 526, 529, 537, 538, 539, 540, 541, 544, 546, 548, 549, 553, 554, 555, 559, 571, 587, 594, 598, 599, 611, 614, 619, 625, 636, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 695, 696, 697, 698, 706, 712, 721, 754, 757, 769, 771, 778, 789, 803, 814, 818, 829, 832, 846, 847, 851, 855, 862, 863, 864, 867, 871, 872, 873, 876, 879, 881, 883, 884, 885, 886, 895, 899, 906, 907, 908, 909, 910, 911, 912, 983, 985, 986, 987, 989, 994, 997, 998, 999, 1000, 1001, 1002, 1008, 1009, 1013, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1028, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "discrimin": [2, 12, 50, 51, 68, 114, 115, 116, 117, 118, 136, 172, 174, 177, 192, 200, 238, 244, 258, 271, 309, 384, 413, 421, 480, 517, 554, 555, 571, 636, 787, 855, 983, 991, 994, 997, 1008, 1010, 1015, 1016, 1026, 1030, 1038], "discriminant_analysi": [2, 70, 72, 73, 136, 244, 309, 370, 411, 541, 554, 555, 855, 988, 995, 1035, 1038, 1039, 1040, 1041, 1042], "quadraticdiscriminantanalysi": [2, 70, 73, 554, 988, 995, 997, 1035, 1040, 1042, 1050], "quadrat": [2, 12, 45, 50, 68, 72, 116, 117, 118, 184, 188, 192, 237, 260, 271, 282, 332, 445, 463, 466, 554, 555, 628, 636, 653, 663, 664, 674, 681, 685, 721, 911, 912, 990, 991, 994, 997, 1000, 1004, 1008, 1009, 1015, 1016, 1030, 1036], "dummyclassifi": [2, 142, 283, 557, 736, 994, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1053], "ignor": [2, 45, 47, 49, 58, 82, 87, 93, 100, 108, 142, 144, 147, 152, 160, 163, 196, 211, 215, 223, 232, 238, 252, 257, 262, 264, 272, 275, 316, 317, 325, 326, 330, 333, 353, 354, 362, 366, 375, 387, 389, 391, 393, 401, 405, 414, 415, 421, 422, 432, 433, 436, 439, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 465, 466, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 508, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 586, 587, 588, 593, 594, 595, 596, 599, 602, 607, 608, 615, 616, 632, 633, 634, 635, 637, 638, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 712, 718, 719, 730, 733, 734, 742, 759, 760, 767, 773, 778, 782, 787, 788, 791, 792, 801, 802, 804, 805, 806, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 864, 865, 866, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 898, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 969, 990, 991, 994, 996, 1000, 1004, 1009, 1024, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "input": [2, 45, 47, 51, 67, 70, 72, 110, 128, 132, 151, 155, 156, 185, 186, 187, 195, 200, 202, 223, 226, 227, 231, 238, 241, 253, 254, 256, 257, 264, 275, 297, 304, 305, 317, 321, 322, 323, 324, 329, 332, 334, 349, 353, 355, 358, 363, 381, 384, 387, 390, 392, 396, 397, 399, 400, 401, 412, 413, 415, 418, 419, 420, 421, 422, 423, 424, 426, 432, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 450, 453, 454, 455, 459, 462, 463, 466, 469, 470, 472, 473, 474, 476, 477, 487, 488, 489, 494, 508, 514, 521, 522, 523, 525, 529, 533, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 625, 627, 632, 633, 634, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 704, 705, 706, 707, 726, 727, 728, 732, 749, 750, 752, 754, 755, 757, 758, 765, 771, 775, 776, 778, 782, 783, 784, 785, 789, 794, 795, 801, 802, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 893, 894, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 923, 924, 925, 926, 927, 928, 932, 937, 940, 942, 951, 953, 954, 958, 967, 969, 975, 976, 977, 980, 981, 984, 986, 988, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1018, 1019, 1023, 1024, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dummi": [2, 142, 143, 223, 241, 257, 283, 389, 392, 410, 556, 557, 736, 879, 888, 1004, 1010, 1030, 1036, 1038, 1039, 1040, 1042], "dummyregressor": [2, 223, 241, 556, 994, 1036, 1038, 1039, 1042, 1043, 1045, 1048, 1049, 1053], "rule": [2, 13, 27, 45, 67, 148, 200, 366, 369, 370, 374, 384, 387, 388, 389, 399, 401, 402, 410, 413, 414, 418, 419, 421, 423, 541, 554, 555, 556, 557, 558, 566, 567, 574, 575, 607, 639, 650, 663, 664, 671, 672, 673, 681, 682, 683, 711, 712, 716, 803, 806, 807, 809, 817, 825, 829, 831, 855, 906, 919, 983, 988, 996, 997, 1008, 1010, 1014, 1019, 1026, 1030, 1037, 1040, 1047, 1052], "adaboostclassifi": [2, 70, 144, 151, 406, 421, 559, 564, 566, 935, 1037, 1038, 1041, 1042, 1044, 1045, 1048, 1050, 1051, 1052], "adaboost": [2, 70, 125, 141, 145, 151, 159, 162, 166, 182, 192, 366, 367, 368, 524, 556, 558, 559, 564, 636, 708, 832, 914, 915, 1015, 1016, 1030, 1037], "ensembl": [2, 45, 48, 51, 54, 66, 67, 70, 94, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 187, 190, 191, 196, 197, 198, 223, 244, 250, 259, 260, 262, 263, 277, 292, 297, 299, 322, 326, 329, 330, 331, 332, 334, 335, 336, 361, 366, 367, 370, 374, 391, 392, 400, 401, 406, 413, 414, 418, 423, 442, 509, 520, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 637, 638, 640, 663, 707, 806, 807, 832, 836, 837, 867, 870, 879, 910, 914, 916, 917, 935, 983, 994, 995, 1000, 1001, 1010, 1013, 1014, 1015, 1016, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "adaboostregressor": [2, 143, 406, 421, 558, 567, 935, 1037, 1038, 1041, 1044, 1045, 1048, 1050, 1051], "baggingclassifi": [2, 401, 406, 421, 561, 916, 935, 984, 1038, 1041, 1042, 1043, 1046, 1050, 1051, 1053], "bag": [2, 14, 67, 107, 130, 141, 146, 148, 156, 157, 192, 197, 297, 362, 363, 383, 413, 521, 522, 523, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 745, 808, 832, 915, 992, 995, 1015, 1016, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1048, 1049, 1051], "baggingregressor": [2, 145, 406, 421, 560, 917, 984, 1038, 1041, 1043, 1046, 1050, 1051, 1053], "extratreesclassifi": [2, 151, 161, 421, 423, 563, 569, 571, 916, 917, 995, 1038, 1039, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "extra": [2, 84, 151, 158, 259, 300, 336, 363, 385, 386, 388, 391, 401, 421, 422, 443, 448, 452, 464, 469, 537, 562, 563, 571, 595, 596, 705, 706, 707, 827, 850, 916, 917, 933, 993, 994, 997, 1035, 1038, 1040, 1041, 1043, 1048, 1050], "tree": [2, 45, 48, 54, 66, 67, 70, 79, 82, 93, 100, 132, 141, 144, 145, 146, 148, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 166, 177, 187, 190, 196, 198, 206, 231, 232, 244, 257, 259, 260, 261, 277, 284, 286, 297, 299, 300, 303, 305, 313, 320, 321, 325, 330, 331, 333, 346, 370, 374, 382, 384, 393, 400, 401, 404, 413, 414, 420, 425, 442, 446, 447, 448, 449, 450, 451, 453, 455, 462, 468, 500, 501, 505, 509, 519, 520, 524, 549, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 636, 637, 638, 639, 663, 693, 697, 707, 708, 716, 746, 752, 792, 794, 809, 824, 829, 830, 832, 841, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 867, 870, 879, 914, 915, 916, 917, 918, 919, 920, 938, 984, 991, 994, 995, 1000, 1001, 1013, 1014, 1015, 1016, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "extratreesregressor": [2, 259, 421, 562, 570, 571, 916, 917, 1038, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "gradientboostingclassifi": [2, 147, 154, 157, 322, 370, 399, 558, 566, 637, 638, 995, 1001, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "gradient": [2, 14, 48, 54, 84, 104, 108, 141, 142, 143, 146, 147, 149, 150, 160, 163, 166, 184, 185, 192, 198, 201, 203, 211, 225, 246, 250, 255, 279, 281, 306, 316, 320, 324, 326, 333, 336, 348, 401, 414, 424, 457, 467, 471, 472, 493, 495, 501, 506, 508, 525, 558, 559, 564, 565, 566, 567, 569, 570, 591, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 636, 637, 639, 640, 644, 653, 654, 663, 664, 673, 674, 677, 679, 681, 682, 683, 685, 692, 697, 699, 700, 745, 746, 752, 754, 794, 803, 806, 807, 808, 824, 829, 832, 862, 863, 864, 867, 879, 880, 910, 968, 991, 994, 997, 998, 999, 1000, 1013, 1015, 1016, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1050, 1052], "boost": [2, 14, 48, 54, 108, 141, 142, 143, 146, 147, 149, 150, 160, 163, 166, 192, 198, 203, 225, 231, 246, 279, 281, 316, 324, 326, 333, 336, 393, 401, 423, 453, 471, 472, 495, 501, 506, 525, 558, 559, 564, 565, 566, 567, 569, 570, 637, 638, 639, 640, 745, 746, 752, 754, 794, 803, 806, 807, 808, 824, 829, 832, 867, 879, 880, 990, 994, 1013, 1015, 1016, 1030, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1048], "gradientboostingregressor": [2, 48, 153, 155, 156, 163, 166, 374, 392, 399, 559, 567, 637, 638, 990, 994, 995, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "histgradientboostingclassifi": [2, 147, 148, 329, 330, 331, 332, 334, 336, 375, 564, 569, 637, 638, 984, 1013, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histogram": [2, 54, 65, 67, 91, 141, 143, 147, 152, 153, 155, 156, 160, 192, 223, 231, 254, 279, 281, 286, 305, 320, 331, 333, 335, 336, 413, 495, 501, 564, 565, 566, 567, 569, 570, 637, 647, 746, 752, 762, 763, 794, 803, 808, 824, 829, 832, 986, 992, 1004, 1015, 1029, 1030, 1047, 1050, 1052], "histgradientboostingregressor": [2, 45, 48, 54, 143, 148, 152, 155, 156, 158, 160, 163, 190, 196, 223, 326, 329, 330, 331, 332, 334, 335, 336, 391, 421, 565, 570, 637, 638, 640, 984, 1001, 1013, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "isolationforest": [2, 141, 192, 226, 250, 260, 295, 636, 832, 910, 1000, 1015, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052], "isol": [2, 152, 159, 250, 260, 362, 385, 387, 393, 405, 568, 852, 910, 1044, 1045], "forest": [2, 14, 52, 67, 70, 141, 147, 151, 153, 154, 156, 157, 158, 159, 161, 163, 166, 190, 192, 193, 200, 250, 277, 279, 281, 313, 331, 361, 368, 370, 380, 400, 401, 413, 423, 468, 469, 495, 496, 500, 501, 503, 520, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 635, 639, 803, 808, 832, 839, 866, 880, 910, 914, 915, 916, 983, 984, 995, 1002, 1014, 1015, 1016, 1030, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1052], "randomforestclassifi": [2, 66, 67, 70, 94, 146, 147, 148, 149, 150, 151, 165, 197, 198, 262, 263, 277, 292, 329, 331, 336, 361, 370, 400, 401, 413, 421, 423, 562, 563, 564, 566, 571, 572, 574, 806, 807, 836, 916, 983, 984, 995, 1002, 1018, 1032, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "randomforestregressor": [2, 51, 148, 162, 163, 166, 190, 191, 331, 336, 400, 421, 562, 563, 565, 567, 571, 573, 575, 637, 638, 916, 984, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "randomtreesembed": [2, 147, 161, 244, 421, 916, 1036, 1043, 1044, 1048, 1049, 1050], "total": [2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 366, 367, 368, 369, 375, 381, 382, 384, 393, 401, 412, 414, 420, 422, 425, 437, 449, 470, 487, 488, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 515, 517, 519, 520, 524, 527, 528, 541, 549, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 575, 588, 589, 595, 599, 601, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 681, 682, 683, 684, 702, 709, 710, 718, 733, 734, 735, 738, 742, 743, 761, 773, 787, 788, 791, 798, 799, 800, 803, 817, 827, 828, 829, 839, 840, 841, 842, 849, 851, 857, 864, 881, 885, 907, 909, 912, 914, 915, 916, 917, 943, 983, 990, 991, 994, 995, 996, 997, 1004, 1008, 1009, 1010, 1015, 1024, 1028, 1036, 1041, 1043, 1051], "stackingclassifi": [2, 329, 370, 401, 406, 421, 573, 984, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "stack": [2, 14, 112, 141, 152, 166, 190, 192, 252, 305, 369, 386, 395, 399, 401, 420, 469, 471, 472, 501, 520, 567, 570, 572, 573, 617, 632, 633, 635, 658, 678, 706, 827, 829, 867, 871, 879, 880, 886, 968, 984, 1013, 1014, 1015, 1016, 1017, 1030, 1035, 1038, 1042, 1043, 1044, 1045, 1046], "final": [2, 45, 54, 66, 67, 73, 78, 80, 93, 107, 108, 116, 118, 121, 125, 133, 142, 143, 145, 147, 152, 153, 156, 163, 166, 174, 184, 191, 194, 196, 198, 200, 202, 207, 211, 212, 220, 223, 225, 240, 241, 244, 250, 264, 270, 278, 286, 297, 300, 326, 327, 329, 330, 349, 353, 374, 376, 382, 385, 387, 388, 389, 391, 400, 401, 412, 413, 414, 415, 418, 421, 422, 423, 442, 447, 452, 453, 457, 464, 467, 469, 541, 560, 561, 572, 573, 575, 599, 632, 652, 658, 664, 684, 695, 699, 724, 803, 834, 835, 866, 867, 903, 906, 983, 984, 986, 990, 991, 994, 997, 1000, 1001, 1004, 1007, 1018, 1026, 1040, 1043, 1044, 1045, 1046, 1048], "stackingregressor": [2, 163, 329, 401, 406, 421, 572, 984, 1045, 1046, 1047, 1048, 1049, 1052], "votingclassifi": [2, 66, 67, 141, 192, 232, 366, 406, 421, 509, 569, 575, 636, 663, 844, 848, 911, 914, 983, 984, 1015, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053], "soft": [2, 137, 164, 165, 387, 401, 574, 575, 902, 910, 1008, 1018, 1040], "vote": [2, 14, 141, 143, 148, 163, 164, 165, 192, 299, 353, 401, 402, 506, 560, 561, 562, 565, 569, 570, 574, 575, 662, 834, 848, 849, 854, 856, 995, 997, 1015, 1016, 1026, 1030, 1035, 1038, 1040, 1045], "major": [2, 51, 56, 73, 148, 287, 320, 324, 329, 330, 331, 332, 333, 334, 335, 336, 353, 363, 374, 382, 386, 387, 390, 393, 399, 402, 414, 418, 420, 422, 556, 574, 575, 699, 918, 920, 994, 997, 1008, 1014, 1018, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "votingregressor": [2, 166, 406, 421, 574, 984, 1044, 1045, 1046, 1049, 1052, 1053], "convergencewarn": [2, 183, 185, 187, 188, 231, 238, 267, 316, 317, 322, 396, 401, 801, 802, 1043, 1044, 1047], "custom": [2, 15, 30, 41, 139, 174, 176, 192, 206, 232, 261, 273, 279, 281, 284, 287, 288, 292, 302, 307, 311, 329, 344, 346, 347, 349, 350, 352, 361, 363, 379, 382, 385, 389, 394, 395, 396, 399, 400, 401, 406, 414, 415, 418, 424, 473, 494, 498, 499, 507, 509, 543, 545, 552, 554, 562, 563, 569, 570, 576, 578, 607, 635, 636, 695, 704, 718, 803, 832, 870, 904, 911, 978, 983, 988, 994, 997, 1013, 1014, 1015, 1018, 1028, 1030, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "warn": [2, 15, 82, 100, 109, 223, 238, 257, 283, 300, 316, 317, 324, 374, 375, 387, 390, 391, 392, 401, 409, 422, 501, 543, 545, 552, 555, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 576, 577, 578, 579, 580, 581, 583, 607, 641, 698, 717, 718, 733, 734, 742, 787, 788, 791, 856, 870, 871, 906, 907, 909, 910, 911, 912, 914, 915, 916, 917, 926, 927, 933, 943, 951, 964, 980, 981, 983, 994, 1004, 1026, 1035, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "captur": [2, 45, 50, 53, 54, 75, 77, 121, 155, 160, 172, 184, 195, 202, 207, 223, 227, 272, 299, 330, 349, 353, 395, 414, 421, 422, 423, 576, 593, 594, 596, 852, 961, 994, 999, 1007, 1011, 1026, 1047], "converg": [2, 58, 95, 99, 114, 115, 153, 155, 158, 179, 185, 188, 216, 225, 231, 239, 267, 269, 316, 317, 320, 325, 339, 376, 396, 401, 412, 414, 419, 422, 424, 426, 445, 448, 451, 452, 453, 454, 457, 459, 464, 465, 466, 467, 476, 477, 483, 487, 488, 489, 538, 540, 541, 542, 543, 544, 551, 558, 576, 615, 649, 650, 651, 652, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 673, 677, 679, 681, 683, 687, 688, 692, 693, 695, 696, 699, 700, 801, 802, 855, 863, 864, 901, 902, 908, 984, 989, 990, 991, 993, 998, 1008, 1035, 1038, 1039, 1040, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "except": [2, 52, 57, 82, 91, 131, 140, 148, 158, 184, 231, 238, 250, 257, 288, 300, 313, 316, 317, 320, 322, 334, 380, 387, 389, 390, 391, 392, 399, 401, 406, 409, 412, 415, 418, 419, 421, 422, 424, 437, 465, 470, 473, 487, 488, 489, 514, 559, 561, 562, 563, 565, 567, 569, 570, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 616, 632, 635, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 692, 716, 782, 810, 839, 840, 846, 847, 849, 852, 857, 863, 864, 870, 884, 886, 904, 907, 909, 912, 915, 917, 925, 947, 978, 980, 990, 994, 1009, 1019, 1027, 1028, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052], "dataconversionwarn": 2, "notifi": [2, 57, 577, 578, 579, 1033, 1045], "implicit": [2, 223, 401, 421, 422, 577, 687, 688, 988, 993, 1013, 1044], "convers": [2, 58, 155, 214, 361, 370, 376, 381, 387, 389, 395, 399, 401, 409, 422, 577, 861, 870, 878, 926, 927, 980, 991, 1014, 1018, 1043, 1044, 1045, 1048, 1051], "happen": [2, 46, 67, 147, 211, 320, 326, 362, 370, 374, 375, 385, 386, 387, 391, 392, 393, 399, 401, 402, 405, 414, 416, 418, 421, 442, 520, 577, 663, 789, 884, 886, 906, 990, 994, 995, 1009, 1014, 1028, 1043, 1047, 1048, 1050, 1051, 1052], "datadimensionalitywarn": 2, "potenti": [2, 45, 67, 93, 114, 158, 191, 194, 196, 202, 306, 307, 315, 335, 336, 353, 363, 374, 375, 385, 401, 405, 406, 414, 418, 421, 422, 473, 487, 488, 489, 490, 501, 529, 554, 562, 563, 566, 567, 569, 570, 578, 611, 616, 639, 767, 896, 897, 904, 914, 915, 916, 917, 1000, 1008, 1010, 1013, 1028, 1038, 1045, 1046, 1049, 1052], "efficiencywarn": [2, 861, 1050], "ineffici": [2, 421, 448, 579, 834, 835, 997, 999], "fitfailedwarn": [2, 803, 806, 807, 809, 817, 825, 828, 829, 830, 833], "error": [2, 15, 25, 30, 45, 46, 48, 54, 55, 58, 67, 92, 112, 114, 115, 117, 132, 137, 141, 145, 148, 149, 152, 154, 156, 158, 177, 179, 190, 192, 195, 207, 212, 219, 222, 223, 225, 229, 230, 237, 241, 253, 256, 257, 263, 272, 273, 276, 280, 281, 285, 289, 290, 294, 297, 306, 307, 333, 336, 348, 357, 361, 362, 375, 384, 385, 387, 389, 390, 391, 392, 396, 399, 401, 406, 409, 413, 414, 415, 416, 418, 419, 421, 422, 423, 442, 448, 449, 452, 454, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 520, 529, 536, 538, 539, 542, 543, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 586, 587, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 611, 615, 616, 634, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 693, 694, 695, 697, 698, 701, 703, 706, 707, 714, 716, 717, 725, 726, 727, 731, 744, 747, 748, 749, 750, 751, 752, 754, 755, 757, 768, 782, 786, 792, 793, 794, 795, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 825, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 856, 857, 858, 861, 863, 864, 865, 866, 867, 869, 871, 872, 873, 878, 879, 880, 885, 886, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 924, 925, 926, 927, 930, 957, 978, 981, 983, 984, 985, 987, 988, 989, 991, 995, 998, 1002, 1004, 1008, 1009, 1010, 1015, 1016, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fit": [2, 22, 25, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 192, 194, 195, 196, 197, 198, 200, 201, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 246, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 297, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 365, 366, 367, 368, 369, 374, 376, 379, 382, 384, 387, 390, 392, 393, 396, 399, 401, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 506, 514, 515, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 582, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 699, 702, 703, 705, 706, 707, 715, 716, 727, 736, 739, 754, 792, 801, 802, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 935, 951, 952, 954, 962, 978, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "inconsistentversionwarn": [2, 409, 1051], "rais": [2, 57, 140, 224, 257, 258, 283, 324, 332, 387, 389, 391, 392, 393, 396, 399, 401, 406, 409, 415, 418, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 514, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 581, 582, 586, 587, 593, 594, 595, 596, 598, 599, 607, 608, 615, 616, 622, 634, 637, 640, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 701, 703, 707, 714, 716, 717, 718, 719, 731, 733, 734, 742, 782, 786, 787, 788, 791, 792, 793, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 825, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 855, 856, 857, 861, 863, 864, 865, 866, 869, 870, 871, 872, 873, 878, 879, 880, 884, 885, 886, 893, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 924, 926, 927, 929, 930, 947, 951, 955, 978, 979, 980, 981, 994, 1004, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "unpickl": [2, 401, 409, 581, 846, 847, 1041, 1047, 1051], "inconsist": [2, 401, 409, 422, 513, 514, 581, 908, 911, 930, 1000, 1009, 1030, 1035, 1040, 1041, 1042, 1043, 1045, 1048, 1050, 1051, 1052], "version": [2, 7, 45, 54, 84, 91, 93, 108, 128, 133, 142, 158, 181, 191, 196, 197, 200, 207, 221, 224, 225, 231, 237, 239, 257, 260, 264, 299, 317, 325, 329, 330, 331, 332, 334, 335, 336, 349, 361, 374, 382, 386, 387, 388, 389, 390, 393, 395, 396, 399, 401, 402, 405, 406, 408, 409, 414, 415, 417, 419, 421, 422, 424, 425, 426, 432, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 513, 514, 515, 517, 519, 527, 528, 531, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 709, 712, 713, 714, 718, 719, 723, 726, 727, 728, 729, 731, 732, 733, 734, 735, 738, 743, 744, 745, 746, 747, 750, 754, 755, 757, 758, 761, 762, 763, 765, 770, 771, 773, 782, 786, 787, 788, 789, 791, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 816, 817, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 892, 894, 895, 896, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 924, 926, 927, 937, 938, 942, 943, 950, 951, 952, 953, 954, 957, 960, 961, 962, 964, 969, 975, 980, 981, 983, 986, 988, 991, 994, 996, 998, 1000, 1002, 1007, 1008, 1010, 1013, 1014, 1017, 1027, 1031, 1033], "notfittederror": [2, 140, 401, 855, 978, 1039, 1041, 1044, 1045, 1051, 1052], "befor": [2, 49, 53, 65, 80, 107, 109, 112, 121, 153, 158, 163, 173, 186, 188, 189, 190, 192, 195, 196, 198, 204, 207, 211, 212, 216, 257, 280, 287, 302, 303, 321, 324, 325, 327, 332, 352, 370, 374, 375, 382, 385, 387, 389, 390, 392, 393, 395, 396, 399, 401, 402, 404, 405, 409, 411, 413, 414, 415, 416, 418, 419, 423, 426, 427, 448, 452, 453, 454, 464, 466, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 495, 506, 539, 542, 543, 544, 545, 546, 549, 551, 552, 566, 567, 570, 572, 574, 575, 582, 593, 594, 596, 616, 632, 633, 635, 650, 671, 672, 673, 676, 681, 683, 692, 697, 699, 801, 802, 808, 809, 821, 822, 824, 828, 830, 832, 846, 847, 854, 855, 856, 857, 858, 861, 866, 867, 870, 873, 880, 884, 885, 886, 887, 891, 892, 894, 895, 896, 897, 903, 914, 915, 943, 978, 984, 990, 991, 994, 1000, 1004, 1008, 1009, 1010, 1014, 1015, 1028, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "undefinedmetricwarn": [2, 318, 733, 734, 787, 788, 791, 1044], "metric": [2, 13, 45, 47, 48, 52, 54, 60, 61, 62, 64, 65, 66, 69, 71, 74, 76, 80, 82, 86, 87, 90, 96, 98, 102, 107, 112, 118, 142, 147, 153, 154, 156, 157, 158, 163, 174, 177, 180, 190, 192, 194, 195, 197, 207, 212, 218, 219, 223, 225, 227, 229, 241, 246, 251, 254, 255, 260, 263, 273, 274, 276, 277, 278, 280, 281, 283, 287, 289, 290, 299, 300, 302, 310, 313, 318, 320, 325, 329, 330, 332, 333, 334, 335, 336, 338, 339, 341, 342, 361, 362, 370, 374, 379, 382, 387, 389, 399, 400, 401, 404, 406, 410, 413, 419, 420, 421, 424, 425, 431, 442, 446, 449, 450, 451, 455, 459, 460, 461, 462, 467, 474, 525, 540, 554, 555, 556, 558, 560, 562, 563, 564, 566, 567, 569, 570, 572, 574, 583, 607, 615, 625, 633, 636, 639, 643, 644, 645, 646, 647, 648, 663, 664, 668, 671, 673, 679, 680, 681, 693, 695, 697, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 806, 807, 809, 817, 825, 827, 828, 829, 831, 834, 835, 836, 837, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 872, 878, 901, 902, 906, 908, 911, 914, 916, 984, 986, 989, 991, 995, 997, 1000, 1002, 1013, 1014, 1015, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "invalid": [2, 49, 223, 401, 451, 583, 676, 717, 778, 990, 994, 1041, 1043, 1045, 1046, 1048, 1049, 1051], "enable_halving_search_cv": [2, 155, 291, 292, 331, 391, 806, 807, 983], "enabl": [2, 16, 54, 69, 88, 109, 158, 196, 231, 245, 257, 322, 330, 332, 333, 335, 336, 358, 385, 387, 392, 395, 399, 401, 405, 406, 411, 414, 415, 419, 421, 422, 454, 469, 473, 539, 540, 546, 564, 565, 566, 567, 568, 584, 585, 595, 596, 607, 615, 801, 802, 803, 806, 827, 828, 829, 866, 867, 879, 880, 903, 904, 906, 907, 908, 909, 910, 911, 912, 921, 954, 961, 984, 986, 991, 993, 994, 997, 1004, 1005, 1008, 1009, 1014, 1018, 1035, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "success": [2, 88, 172, 192, 273, 284, 287, 288, 356, 370, 410, 414, 418, 419, 421, 520, 569, 584, 803, 806, 807, 824, 911, 997, 1015, 1018, 1023, 1027, 1030, 1047], "halv": [2, 172, 192, 273, 284, 288, 356, 410, 520, 569, 584, 803, 806, 807, 911, 1015, 1030, 1047], "search": [2, 47, 67, 84, 92, 108, 109, 110, 111, 155, 172, 174, 176, 177, 179, 192, 241, 256, 257, 271, 273, 279, 281, 284, 285, 287, 292, 299, 300, 302, 304, 318, 322, 334, 349, 356, 361, 370, 384, 385, 387, 389, 399, 401, 410, 414, 415, 418, 421, 422, 423, 425, 448, 453, 455, 457, 462, 463, 466, 469, 476, 477, 483, 507, 520, 527, 562, 563, 564, 565, 569, 570, 571, 584, 604, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 633, 658, 681, 693, 694, 697, 698, 718, 732, 789, 792, 803, 806, 807, 814, 815, 817, 819, 832, 833, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 866, 911, 914, 915, 916, 917, 948, 982, 987, 989, 991, 994, 997, 998, 1008, 1010, 1013, 1014, 1015, 1019, 1020, 1022, 1024, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1050, 1052], "experiment": [2, 155, 190, 191, 223, 291, 292, 331, 332, 385, 387, 389, 390, 397, 399, 401, 406, 418, 501, 554, 584, 585, 632, 701, 806, 807, 964, 983, 984, 990, 993, 994, 1013, 1014, 1022, 1030, 1043, 1044, 1047, 1048, 1049, 1050, 1052], "enable_iterative_imput": [2, 190, 191, 391, 632, 984, 1044], "iterativeimput": [2, 189, 191, 192, 406, 495, 570, 585, 633, 634, 635, 644, 650, 677, 828, 849, 867, 1015, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "dictvector": [2, 49, 60, 107, 192, 360, 361, 362, 382, 422, 493, 587, 593, 594, 595, 596, 879, 1015, 1035, 1036, 1039, 1045, 1047, 1048, 1051, 1052], "list": [2, 45, 49, 51, 53, 54, 55, 57, 58, 60, 61, 65, 71, 78, 82, 87, 100, 107, 137, 138, 146, 148, 154, 163, 198, 227, 260, 261, 275, 278, 280, 281, 283, 284, 289, 293, 309, 322, 326, 329, 330, 331, 332, 333, 334, 335, 336, 342, 352, 362, 363, 376, 381, 382, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 405, 406, 413, 414, 415, 418, 420, 421, 422, 437, 439, 442, 455, 461, 462, 469, 470, 471, 476, 477, 483, 487, 488, 489, 493, 494, 495, 496, 497, 498, 501, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 528, 537, 555, 556, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 596, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 637, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 686, 689, 691, 692, 697, 701, 702, 704, 715, 716, 717, 718, 721, 723, 729, 737, 746, 750, 758, 782, 785, 787, 792, 798, 801, 802, 803, 806, 807, 809, 814, 815, 817, 825, 827, 828, 829, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 870, 874, 877, 879, 880, 885, 887, 903, 907, 909, 912, 914, 915, 916, 917, 920, 922, 926, 927, 928, 932, 934, 935, 936, 938, 946, 947, 949, 960, 965, 968, 978, 983, 984, 990, 994, 996, 997, 998, 1001, 1002, 1005, 1010, 1013, 1014, 1018, 1019, 1023, 1025, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "map": [2, 23, 37, 45, 46, 51, 52, 58, 60, 66, 91, 121, 133, 146, 154, 157, 161, 179, 192, 200, 223, 243, 245, 249, 257, 260, 281, 284, 289, 295, 308, 311, 313, 319, 320, 342, 349, 353, 355, 362, 363, 381, 382, 388, 399, 401, 406, 413, 414, 415, 418, 419, 421, 422, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 501, 503, 507, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 766, 769, 801, 802, 803, 806, 807, 814, 815, 817, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 894, 895, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 948, 951, 952, 983, 986, 991, 994, 996, 1006, 1009, 1010, 1015, 1023, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052], "feature_extract": [2, 49, 56, 60, 84, 85, 88, 89, 92, 104, 107, 131, 192, 281, 342, 360, 361, 362, 363, 376, 382, 414, 415, 422, 469, 549, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 879, 992, 1027, 1028, 1035, 1036, 1037, 1038, 1041, 1042], "featurehash": [2, 49, 60, 107, 192, 360, 361, 362, 376, 382, 422, 493, 586, 593, 594, 595, 596, 879, 1015, 1036, 1041, 1042, 1043, 1049, 1050], "hash": [2, 49, 141, 192, 362, 363, 374, 376, 379, 387, 390, 399, 421, 519, 549, 562, 571, 586, 587, 594, 645, 841, 959, 986, 1015, 1028, 1030, 1036, 1039, 1042], "trick": [2, 179, 256, 310, 353, 363, 373, 376, 390, 399, 415, 587, 594, 648, 677, 986, 987, 998, 1008, 1009, 1026, 1027, 1030, 1036, 1044, 1052], "patchextractor": [2, 422, 1051], "patch": [2, 73, 88, 260, 266, 267, 268, 271, 272, 275, 382, 391, 399, 419, 421, 560, 561, 588, 589, 592, 1035, 1043], "collect": [2, 41, 48, 51, 53, 54, 57, 60, 65, 110, 146, 158, 159, 166, 177, 184, 191, 198, 211, 216, 246, 253, 283, 287, 362, 363, 374, 382, 384, 391, 405, 418, 419, 421, 422, 451, 469, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 574, 575, 586, 588, 589, 593, 594, 595, 596, 637, 733, 734, 742, 787, 788, 791, 805, 809, 810, 812, 825, 952, 965, 968, 983, 989, 990, 994, 1000, 1005, 1014, 1018, 1023, 1028, 1037, 1047], "extract_patches_2d": [2, 88, 131, 422, 592, 1043], "reshap": [2, 45, 46, 47, 55, 57, 64, 71, 84, 85, 86, 88, 89, 91, 92, 96, 109, 116, 120, 128, 131, 137, 145, 150, 151, 161, 170, 175, 179, 181, 182, 183, 184, 185, 186, 188, 202, 214, 220, 236, 237, 239, 240, 244, 246, 248, 250, 255, 259, 270, 278, 304, 306, 313, 315, 317, 318, 321, 322, 323, 327, 329, 332, 333, 335, 336, 343, 348, 349, 354, 355, 358, 359, 399, 412, 419, 421, 422, 450, 470, 589, 636, 736, 832, 881, 885, 990, 1004, 1010, 1024, 1027, 1040], "grid_to_graph": [2, 85, 89, 92, 414, 422, 1027, 1048], "pixel": [2, 46, 47, 55, 61, 71, 85, 86, 91, 128, 141, 149, 175, 192, 197, 198, 200, 254, 278, 317, 318, 384, 414, 419, 421, 422, 423, 498, 499, 500, 569, 590, 591, 612, 613, 639, 997, 999, 1010, 1015, 1024, 1027], "connect": [2, 53, 77, 82, 85, 89, 92, 100, 104, 105, 385, 387, 396, 401, 416, 446, 450, 457, 467, 468, 590, 591, 700, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 992, 997, 999, 1007, 1017, 1039, 1048, 1052], "img_to_graph": [2, 84, 104, 422, 1038, 1048], "reconstruct_from_patches_2d": [2, 131, 422, 588], "reconstruct": [2, 44, 58, 61, 104, 128, 129, 133, 192, 222, 246, 247, 333, 419, 422, 487, 488, 489, 536, 538, 540, 542, 543, 544, 545, 547, 548, 550, 551, 553, 588, 592, 657, 677, 693, 694, 698, 898, 899, 990, 991, 1015, 1049], "countvector": [2, 56, 342, 363, 382, 392, 415, 419, 422, 469, 494, 541, 587, 594, 595, 596, 1028, 1035, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048], "convert": [2, 54, 58, 73, 84, 86, 104, 108, 131, 184, 198, 223, 243, 260, 263, 267, 268, 271, 272, 313, 374, 381, 382, 396, 399, 401, 409, 422, 445, 448, 449, 452, 454, 455, 456, 457, 464, 469, 470, 501, 539, 546, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 586, 587, 593, 594, 595, 596, 598, 599, 611, 632, 633, 634, 635, 651, 657, 663, 664, 665, 667, 671, 672, 673, 675, 679, 681, 682, 683, 697, 782, 861, 870, 871, 873, 877, 879, 880, 881, 883, 906, 914, 915, 916, 917, 924, 926, 927, 949, 979, 980, 983, 990, 991, 992, 994, 1004, 1005, 1009, 1010, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1050, 1051, 1052], "document": [2, 17, 44, 47, 51, 53, 56, 58, 59, 62, 66, 70, 75, 83, 89, 95, 96, 98, 99, 107, 108, 109, 110, 123, 124, 126, 128, 147, 149, 150, 159, 160, 163, 166, 174, 184, 195, 196, 197, 204, 206, 220, 221, 238, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 317, 318, 326, 330, 333, 334, 336, 340, 342, 354, 357, 363, 369, 374, 375, 376, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 393, 395, 399, 401, 405, 406, 409, 412, 414, 419, 422, 425, 449, 452, 453, 454, 455, 458, 462, 469, 493, 494, 504, 506, 516, 526, 528, 541, 549, 569, 593, 594, 595, 596, 599, 609, 636, 644, 648, 663, 664, 671, 673, 678, 679, 680, 681, 701, 702, 704, 708, 710, 722, 741, 762, 763, 773, 782, 783, 784, 797, 799, 803, 806, 807, 809, 817, 825, 828, 830, 833, 836, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 867, 878, 906, 911, 922, 925, 927, 940, 960, 983, 990, 992, 994, 995, 996, 997, 998, 1002, 1008, 1011, 1012, 1015, 1018, 1021, 1026, 1028, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "token": [2, 60, 363, 374, 382, 391, 422, 541, 593, 594, 595, 596, 1035, 1043, 1047], "count": [2, 23, 45, 54, 56, 65, 67, 79, 87, 91, 107, 108, 126, 164, 165, 195, 196, 223, 225, 241, 254, 264, 289, 297, 300, 330, 331, 362, 363, 369, 382, 384, 391, 396, 401, 402, 413, 414, 419, 421, 422, 451, 454, 494, 501, 541, 549, 586, 593, 594, 595, 596, 599, 609, 622, 645, 702, 710, 720, 723, 733, 734, 742, 758, 787, 788, 790, 791, 841, 845, 846, 847, 855, 858, 869, 918, 920, 945, 959, 983, 986, 990, 994, 996, 997, 1004, 1010, 1018, 1028, 1035, 1038, 1040, 1043, 1044, 1046, 1047], "hashingvector": [2, 49, 363, 376, 422, 494, 593, 595, 1036, 1042, 1043, 1044, 1045, 1048], "occurr": [2, 223, 326, 362, 363, 382, 387, 414, 422, 574, 575, 586, 594, 595, 622, 632, 633, 634, 635, 787, 841, 869, 996, 1036, 1041], "tfidftransform": [2, 342, 362, 363, 422, 494, 596, 1028, 1042, 1043, 1049, 1051, 1052, 1053], "tf": [2, 56, 60, 254, 361, 362, 363, 382, 419, 526, 549, 593, 594, 595, 596, 845, 853, 878, 983, 992, 996, 1004, 1013, 1028], "idf": [2, 56, 60, 254, 361, 362, 363, 382, 419, 526, 549, 593, 594, 595, 596, 845, 853, 878, 983, 992, 996, 1004, 1028, 1035], "represent": [2, 45, 53, 58, 61, 66, 91, 108, 109, 128, 131, 147, 149, 150, 159, 160, 161, 163, 166, 174, 184, 195, 197, 200, 204, 207, 243, 244, 245, 251, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 297, 310, 318, 326, 331, 333, 334, 336, 340, 362, 363, 369, 370, 379, 381, 390, 401, 409, 414, 415, 419, 420, 421, 428, 468, 536, 540, 542, 545, 547, 553, 571, 593, 595, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 635, 648, 651, 657, 663, 664, 665, 667, 671, 672, 673, 681, 682, 683, 773, 801, 802, 809, 825, 862, 875, 879, 880, 884, 886, 899, 906, 918, 920, 923, 939, 960, 986, 991, 993, 995, 997, 998, 999, 1001, 1004, 1009, 1014, 1019, 1020, 1022, 1026, 1028, 1035, 1036, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "tfidfvector": [2, 56, 60, 107, 281, 361, 382, 419, 422, 494, 593, 594, 595, 1028, 1035, 1037, 1043, 1044, 1045, 1048, 1049], "genericunivariateselect": [2, 423, 600, 601, 603, 604, 605, 607, 1049, 1051, 1052], "univari": [2, 18, 50, 51, 74, 85, 109, 111, 171, 172, 174, 192, 205, 222, 238, 293, 344, 379, 414, 415, 422, 450, 509, 530, 535, 597, 600, 601, 603, 604, 605, 607, 610, 611, 612, 613, 614, 632, 633, 634, 635, 650, 803, 808, 828, 832, 866, 867, 876, 881, 885, 886, 906, 911, 990, 1009, 1011, 1015, 1016, 1027, 1030, 1035, 1041], "selector": [2, 54, 108, 173, 174, 260, 357, 395, 422, 423, 471, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 1037, 1045, 1047, 1051], "strategi": [2, 30, 45, 54, 90, 92, 96, 99, 108, 152, 157, 163, 169, 174, 176, 190, 191, 192, 197, 207, 212, 223, 231, 241, 252, 260, 262, 273, 279, 281, 283, 284, 285, 287, 288, 289, 290, 292, 299, 314, 317, 319, 321, 322, 326, 327, 329, 330, 333, 363, 373, 389, 393, 400, 401, 418, 421, 422, 423, 426, 442, 443, 444, 452, 457, 467, 477, 507, 509, 517, 519, 527, 538, 543, 556, 557, 566, 567, 569, 570, 572, 573, 593, 594, 596, 597, 599, 607, 632, 633, 635, 639, 650, 652, 656, 658, 660, 666, 668, 670, 678, 680, 696, 700, 709, 716, 718, 736, 759, 761, 799, 803, 806, 807, 809, 817, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 863, 864, 871, 876, 887, 901, 906, 908, 911, 914, 915, 916, 917, 965, 983, 984, 993, 995, 996, 997, 998, 1000, 1002, 1004, 1008, 1009, 1010, 1013, 1015, 1023, 1028, 1030, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "feature_select": [2, 92, 108, 109, 111, 171, 172, 173, 174, 175, 176, 177, 192, 264, 331, 333, 352, 370, 401, 406, 415, 423, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 983, 1015, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "rfe": [2, 175, 176, 406, 423, 599, 602, 607, 1035, 1039, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "recurs": [2, 18, 54, 71, 89, 123, 159, 168, 171, 174, 177, 192, 275, 279, 285, 304, 338, 339, 341, 365, 389, 414, 418, 445, 446, 447, 450, 468, 507, 520, 568, 598, 599, 602, 607, 637, 638, 663, 822, 911, 994, 997, 1000, 1001, 1010, 1015, 1016, 1027, 1030, 1035, 1045, 1046], "elimin": [2, 18, 71, 89, 123, 168, 171, 174, 177, 192, 275, 279, 285, 304, 338, 339, 341, 414, 418, 453, 507, 520, 598, 599, 602, 607, 663, 806, 807, 822, 911, 980, 994, 1015, 1016, 1018, 1030, 1035], "rfecv": [2, 176, 406, 423, 598, 602, 607, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1051, 1052], "selectfdr": [2, 423, 597, 601, 603, 604, 605, 611, 1039, 1041, 1042, 1051], "filter": [2, 18, 49, 56, 84, 85, 110, 229, 241, 278, 280, 302, 361, 375, 382, 393, 396, 414, 422, 453, 493, 494, 508, 593, 596, 600, 601, 602, 603, 604, 605, 778, 841, 935, 959, 996, 997, 1025, 1028, 1045], "fals": [2, 45, 46, 48, 49, 51, 52, 55, 56, 57, 61, 62, 64, 66, 67, 71, 72, 73, 77, 80, 82, 84, 85, 92, 93, 102, 105, 107, 108, 109, 115, 117, 126, 132, 136, 137, 142, 148, 149, 152, 155, 156, 158, 166, 168, 179, 184, 185, 186, 187, 195, 196, 197, 198, 202, 203, 207, 209, 223, 224, 228, 229, 231, 239, 241, 243, 246, 257, 258, 260, 264, 266, 277, 278, 280, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 300, 304, 310, 313, 316, 317, 320, 321, 326, 327, 329, 331, 332, 333, 334, 336, 340, 349, 351, 357, 358, 361, 362, 381, 387, 388, 389, 392, 401, 406, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 427, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 518, 520, 528, 529, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 640, 641, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 699, 700, 702, 703, 704, 705, 706, 707, 708, 713, 714, 716, 717, 718, 719, 720, 723, 724, 730, 731, 732, 733, 734, 735, 742, 746, 747, 754, 755, 758, 760, 765, 767, 771, 773, 778, 782, 786, 787, 788, 789, 791, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 817, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 924, 925, 926, 927, 937, 944, 955, 956, 959, 960, 964, 965, 966, 968, 975, 980, 981, 983, 984, 990, 994, 997, 1004, 1008, 1009, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "discoveri": [2, 280, 382, 393, 396, 414, 421, 423, 425, 449, 516, 560, 561, 568, 597, 600, 601, 603, 604, 605, 611, 725, 744, 787, 934, 935, 936, 994, 1006, 1018, 1049, 1050], "rate": [2, 45, 142, 146, 152, 158, 172, 196, 223, 230, 241, 254, 260, 277, 280, 287, 289, 290, 316, 317, 318, 376, 387, 414, 415, 419, 423, 451, 471, 541, 558, 559, 564, 565, 566, 567, 597, 600, 601, 603, 604, 605, 611, 649, 650, 673, 681, 682, 683, 697, 703, 707, 731, 786, 793, 862, 863, 864, 900, 983, 990, 991, 994, 997, 998, 1008, 1010, 1018, 1039, 1043, 1044], "selectfpr": [2, 387, 423, 597, 600, 603, 604, 605, 611, 1051], "pvalu": [2, 597, 600, 601, 603, 604, 605, 831], "below": [2, 50, 54, 65, 66, 67, 71, 73, 93, 98, 107, 112, 116, 123, 124, 128, 140, 146, 149, 150, 155, 172, 194, 196, 206, 219, 220, 223, 225, 239, 240, 244, 248, 252, 257, 260, 262, 264, 275, 278, 283, 285, 286, 287, 320, 324, 329, 330, 331, 332, 333, 334, 335, 336, 354, 361, 369, 370, 375, 380, 381, 385, 387, 389, 391, 392, 396, 401, 402, 405, 414, 416, 417, 418, 419, 421, 422, 423, 424, 449, 451, 453, 476, 477, 483, 496, 497, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 515, 536, 542, 547, 553, 587, 600, 601, 602, 603, 604, 605, 638, 651, 657, 663, 664, 672, 673, 678, 680, 697, 704, 710, 747, 767, 801, 802, 803, 814, 817, 835, 866, 869, 879, 880, 883, 889, 895, 983, 984, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1011, 1013, 1021, 1028, 1031, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "alpha": [2, 45, 46, 48, 49, 51, 53, 54, 55, 57, 58, 64, 66, 70, 73, 75, 78, 80, 83, 90, 94, 98, 103, 112, 118, 121, 128, 130, 131, 133, 134, 136, 137, 142, 144, 145, 151, 155, 158, 159, 160, 162, 163, 164, 177, 179, 182, 184, 185, 186, 187, 188, 190, 191, 195, 202, 203, 204, 205, 207, 208, 209, 211, 212, 217, 218, 220, 221, 223, 224, 225, 227, 228, 232, 235, 236, 241, 243, 244, 247, 255, 256, 263, 266, 280, 281, 282, 283, 284, 287, 288, 290, 292, 293, 299, 300, 303, 305, 308, 310, 315, 317, 320, 321, 322, 323, 325, 327, 330, 332, 333, 336, 340, 342, 346, 347, 350, 351, 353, 354, 357, 358, 359, 361, 374, 382, 389, 393, 399, 416, 417, 419, 421, 423, 424, 426, 451, 476, 477, 483, 532, 536, 538, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 565, 600, 601, 603, 616, 618, 620, 621, 628, 636, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 692, 727, 752, 841, 842, 843, 845, 863, 864, 902, 914, 915, 916, 917, 983, 990, 994, 996, 998, 1002, 1007, 1008, 1009, 1010, 1023, 1026, 1028, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1053], "fpr": [2, 52, 251, 260, 277, 289, 290, 394, 597, 601, 703, 707, 711, 731, 793, 994, 1032, 1035, 1051], "test": [2, 45, 47, 49, 51, 52, 54, 57, 64, 65, 66, 67, 70, 71, 72, 92, 107, 108, 120, 133, 142, 145, 147, 148, 149, 150, 154, 155, 156, 157, 158, 168, 170, 171, 173, 176, 179, 180, 192, 194, 195, 196, 197, 198, 200, 207, 212, 218, 219, 222, 223, 224, 225, 227, 230, 231, 238, 239, 241, 247, 251, 256, 257, 259, 268, 273, 274, 275, 278, 279, 280, 281, 282, 284, 285, 287, 288, 290, 291, 292, 299, 303, 308, 309, 315, 317, 322, 324, 325, 326, 327, 336, 342, 349, 357, 363, 370, 374, 375, 381, 382, 384, 390, 391, 392, 393, 399, 400, 401, 404, 405, 408, 410, 411, 413, 415, 416, 419, 421, 422, 423, 424, 431, 433, 437, 440, 441, 442, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 494, 498, 502, 503, 507, 509, 529, 536, 542, 544, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 597, 599, 600, 601, 603, 604, 605, 607, 609, 610, 611, 613, 614, 615, 616, 632, 633, 635, 640, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 717, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 853, 856, 857, 863, 864, 866, 891, 892, 894, 895, 896, 897, 901, 902, 904, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 925, 935, 937, 938, 989, 990, 993, 994, 997, 998, 1002, 1004, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1020, 1023, 1024, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "selectfrommodel": [2, 177, 401, 406, 598, 607, 608, 1016, 1030, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1052], "import": [2, 16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 376, 381, 382, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 404, 405, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 955, 956, 957, 958, 959, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "weight": [2, 47, 52, 54, 55, 56, 60, 64, 71, 92, 107, 138, 155, 164, 165, 173, 174, 183, 184, 191, 192, 195, 201, 207, 212, 214, 223, 227, 228, 230, 233, 234, 235, 237, 238, 239, 241, 257, 262, 266, 270, 278, 283, 287, 289, 303, 312, 314, 315, 316, 318, 325, 327, 329, 332, 336, 338, 339, 344, 349, 351, 353, 354, 355, 357, 358, 361, 362, 363, 369, 370, 383, 384, 396, 399, 401, 414, 416, 417, 419, 420, 423, 425, 431, 437, 442, 445, 448, 449, 451, 452, 454, 458, 464, 465, 468, 469, 470, 472, 474, 479, 487, 488, 489, 501, 520, 529, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 591, 594, 595, 596, 598, 602, 607, 608, 615, 616, 633, 637, 638, 639, 640, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 694, 698, 702, 703, 705, 707, 708, 712, 713, 714, 717, 718, 721, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 773, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 868, 871, 885, 886, 887, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 931, 932, 945, 969, 975, 984, 985, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1004, 1007, 1008, 1009, 1010, 1014, 1015, 1019, 1026, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "selectfw": [2, 423, 597, 600, 601, 604, 605, 611, 1051], "correspond": [2, 52, 54, 55, 57, 61, 66, 67, 71, 79, 91, 103, 114, 118, 130, 142, 145, 148, 149, 151, 159, 173, 176, 177, 180, 185, 188, 195, 212, 215, 223, 224, 227, 232, 241, 251, 256, 257, 264, 271, 279, 281, 283, 284, 289, 290, 313, 325, 331, 332, 333, 362, 365, 366, 370, 375, 381, 382, 383, 386, 387, 389, 391, 394, 395, 400, 401, 402, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 429, 435, 442, 444, 446, 450, 453, 456, 458, 464, 466, 468, 469, 477, 487, 488, 489, 495, 496, 497, 498, 499, 500, 501, 539, 546, 549, 550, 551, 554, 555, 557, 560, 562, 564, 565, 566, 569, 587, 589, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 622, 635, 637, 638, 640, 648, 651, 652, 653, 657, 663, 664, 665, 666, 667, 673, 674, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 692, 695, 696, 697, 699, 708, 715, 718, 728, 729, 738, 742, 746, 756, 758, 778, 782, 786, 792, 793, 798, 800, 801, 802, 803, 806, 807, 809, 817, 825, 827, 835, 837, 838, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 855, 863, 864, 873, 876, 877, 879, 880, 883, 887, 895, 906, 907, 908, 911, 914, 915, 916, 917, 931, 937, 951, 954, 969, 983, 984, 986, 987, 988, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1019, 1025, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "famili": [2, 47, 374, 376, 401, 414, 417, 419, 422, 423, 597, 600, 601, 603, 604, 605, 611, 863, 864, 882, 894, 990, 1004, 1008, 1024, 1026, 1039, 1049], "wise": [2, 48, 66, 86, 187, 224, 250, 290, 320, 362, 374, 401, 413, 414, 418, 419, 423, 463, 536, 539, 542, 546, 550, 551, 554, 555, 558, 560, 561, 564, 565, 597, 600, 601, 603, 604, 605, 611, 645, 657, 705, 758, 834, 883, 896, 897, 900, 967, 969, 970, 971, 972, 975, 986, 988, 990, 994, 995, 1008, 1014, 1035, 1040, 1043, 1044, 1045], "selectkbest": [2, 109, 111, 173, 174, 333, 370, 387, 406, 415, 423, 586, 597, 600, 601, 603, 605, 611, 983, 1036, 1041, 1051, 1052], "highest": [2, 58, 60, 66, 118, 173, 177, 227, 278, 280, 291, 331, 361, 387, 399, 413, 414, 418, 421, 423, 442, 560, 562, 569, 597, 600, 601, 603, 604, 605, 608, 609, 611, 640, 642, 730, 760, 798, 801, 803, 806, 807, 817, 903, 914, 945, 983, 990, 994, 995, 998, 1008, 1010, 1047], "score": [2, 13, 27, 45, 47, 49, 52, 54, 57, 61, 62, 64, 65, 66, 67, 70, 71, 72, 75, 96, 98, 107, 108, 109, 110, 111, 112, 114, 118, 121, 135, 140, 142, 144, 151, 152, 153, 154, 155, 158, 159, 162, 163, 169, 172, 173, 174, 177, 190, 192, 194, 195, 196, 197, 198, 200, 207, 214, 215, 218, 223, 225, 229, 231, 239, 241, 250, 255, 256, 257, 260, 264, 270, 273, 278, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 297, 299, 307, 308, 309, 315, 316, 317, 318, 322, 324, 325, 326, 327, 329, 330, 331, 332, 336, 338, 339, 341, 342, 349, 357, 361, 362, 365, 370, 382, 387, 389, 392, 400, 401, 409, 410, 412, 413, 415, 417, 419, 421, 423, 431, 433, 437, 442, 448, 452, 454, 457, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 507, 509, 537, 541, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 746, 759, 760, 761, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 800, 801, 802, 803, 806, 807, 809, 817, 822, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 855, 856, 857, 862, 863, 864, 866, 886, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 945, 952, 983, 986, 990, 992, 997, 1000, 1002, 1004, 1008, 1014, 1015, 1022, 1024, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "selectpercentil": [2, 92, 108, 264, 352, 423, 597, 600, 601, 603, 604, 608, 611, 1036, 1041, 1051, 1052], "percentil": [2, 51, 54, 108, 155, 158, 260, 264, 320, 374, 597, 600, 601, 603, 604, 605, 608, 611, 637, 638, 752, 1004, 1040, 1048], "selectormixin": [2, 1046], "support": [2, 39, 45, 47, 48, 49, 50, 51, 57, 64, 69, 71, 84, 107, 108, 109, 141, 146, 162, 163, 173, 174, 196, 224, 233, 234, 235, 241, 255, 256, 257, 263, 274, 278, 285, 287, 297, 300, 318, 320, 324, 333, 338, 339, 342, 343, 345, 346, 349, 350, 351, 352, 353, 354, 357, 374, 375, 376, 381, 385, 387, 389, 391, 392, 393, 394, 396, 397, 400, 401, 402, 414, 418, 419, 422, 423, 424, 442, 445, 455, 457, 458, 469, 470, 471, 472, 474, 477, 479, 492, 501, 517, 543, 545, 549, 552, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 636, 637, 638, 648, 650, 662, 663, 664, 675, 676, 677, 679, 680, 681, 682, 683, 692, 695, 699, 704, 712, 718, 733, 734, 742, 747, 782, 783, 784, 787, 788, 791, 792, 803, 806, 807, 809, 817, 829, 830, 838, 839, 844, 846, 847, 850, 852, 853, 858, 866, 867, 871, 877, 879, 880, 882, 886, 894, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 922, 932, 937, 938, 982, 983, 984, 986, 987, 988, 990, 993, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1005, 1008, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mask": [2, 54, 55, 80, 104, 150, 223, 231, 260, 278, 279, 342, 396, 401, 415, 421, 474, 479, 566, 567, 586, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 634, 635, 637, 638, 654, 676, 803, 806, 807, 817, 966, 984, 1001, 1035, 1038, 1040, 1041, 1043, 1045, 1053], "sequentialfeatureselector": [2, 177, 406, 423, 598, 602, 608, 1047, 1048, 1049, 1050, 1051], "sequenti": [2, 54, 151, 171, 174, 192, 217, 281, 331, 385, 419, 421, 422, 505, 506, 539, 598, 602, 607, 608, 610, 611, 651, 652, 657, 658, 663, 665, 666, 667, 668, 678, 792, 866, 867, 886, 984, 1002, 1008, 1013, 1015, 1016, 1030, 1035, 1044, 1047], "variancethreshold": [2, 423, 871, 984, 1038, 1045, 1048, 1051], "varianc": [2, 37, 45, 46, 54, 67, 82, 93, 95, 100, 110, 114, 116, 120, 121, 124, 128, 129, 130, 133, 135, 136, 138, 141, 157, 158, 186, 188, 192, 195, 201, 203, 207, 212, 219, 223, 225, 228, 241, 271, 277, 280, 283, 289, 290, 293, 309, 315, 320, 325, 362, 370, 379, 383, 396, 412, 413, 414, 416, 417, 418, 419, 420, 421, 426, 446, 450, 454, 468, 526, 529, 537, 538, 539, 546, 549, 554, 555, 560, 561, 563, 564, 565, 570, 608, 612, 613, 616, 630, 648, 649, 650, 657, 661, 662, 665, 667, 677, 678, 679, 680, 681, 692, 715, 732, 789, 801, 802, 844, 855, 870, 876, 882, 884, 886, 892, 894, 896, 897, 915, 917, 969, 970, 971, 975, 988, 989, 990, 992, 997, 998, 999, 1002, 1006, 1008, 1009, 1010, 1011, 1015, 1016, 1024, 1026, 1027, 1030, 1035, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "chi2": [2, 108, 422, 423, 457, 586, 597, 600, 601, 603, 604, 605, 610, 611, 614, 625, 643, 644, 645, 646, 647, 648, 763, 769, 778, 1035, 1042, 1049], "chi": [2, 108, 116, 142, 324, 379, 423, 524, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 643, 644, 645, 646, 647, 762, 763, 1030, 1035, 1040, 1041], "stat": [2, 47, 49, 51, 107, 116, 177, 179, 198, 277, 280, 288, 292, 305, 331, 338, 339, 384, 396, 400, 416, 479, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 687, 688, 807, 815, 817, 914, 915, 945, 983, 990, 1004, 1024, 1042, 1044, 1048], "between": [2, 25, 37, 45, 46, 49, 50, 52, 53, 54, 61, 73, 75, 76, 77, 78, 80, 81, 91, 98, 99, 104, 120, 124, 131, 133, 136, 142, 145, 148, 152, 153, 155, 158, 172, 179, 184, 185, 187, 192, 194, 195, 196, 197, 202, 207, 209, 214, 218, 219, 223, 224, 225, 227, 228, 231, 241, 243, 250, 255, 257, 260, 273, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 297, 299, 302, 306, 307, 309, 310, 320, 325, 327, 332, 341, 349, 353, 356, 357, 361, 362, 363, 369, 370, 374, 375, 382, 387, 389, 396, 399, 400, 401, 402, 406, 409, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 435, 445, 446, 449, 450, 451, 452, 455, 457, 458, 459, 461, 462, 463, 468, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 519, 520, 526, 529, 532, 539, 541, 542, 543, 544, 545, 546, 551, 552, 554, 558, 559, 564, 565, 567, 568, 569, 570, 589, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 616, 625, 632, 637, 638, 639, 644, 647, 650, 651, 652, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 681, 683, 684, 686, 689, 693, 695, 697, 699, 700, 701, 704, 706, 708, 709, 710, 712, 714, 715, 719, 720, 721, 722, 724, 728, 729, 730, 733, 734, 735, 738, 740, 741, 747, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 808, 812, 820, 821, 822, 823, 824, 831, 832, 834, 836, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 870, 873, 874, 876, 877, 879, 880, 883, 884, 885, 887, 892, 895, 896, 900, 906, 907, 911, 914, 915, 916, 917, 919, 940, 951, 952, 963, 983, 986, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1014, 1015, 1026, 1027, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "each": [2, 27, 45, 48, 49, 51, 52, 53, 56, 58, 61, 65, 66, 67, 71, 73, 75, 79, 81, 82, 85, 87, 91, 93, 96, 98, 99, 107, 108, 110, 111, 112, 120, 121, 123, 124, 125, 126, 128, 129, 133, 135, 136, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 173, 175, 177, 181, 183, 188, 190, 191, 194, 195, 196, 198, 200, 202, 209, 210, 212, 217, 221, 223, 224, 225, 227, 228, 231, 238, 241, 244, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 269, 271, 274, 275, 276, 278, 280, 281, 283, 285, 286, 289, 290, 297, 299, 300, 303, 305, 309, 311, 313, 315, 316, 318, 320, 321, 322, 323, 325, 326, 327, 329, 331, 332, 333, 335, 336, 338, 339, 340, 343, 349, 353, 355, 357, 362, 363, 365, 366, 369, 370, 374, 375, 376, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 399, 400, 401, 406, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 466, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 524, 527, 528, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 712, 713, 715, 718, 724, 729, 732, 733, 734, 742, 743, 749, 750, 752, 754, 755, 757, 758, 762, 763, 766, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 780, 782, 783, 784, 785, 787, 788, 789, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 895, 896, 897, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 932, 937, 938, 943, 945, 946, 950, 951, 962, 970, 971, 972, 975, 984, 986, 988, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1018, 1019, 1023, 1025, 1026, 1027, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "f_classif": [2, 173, 174, 352, 423, 597, 600, 601, 603, 604, 605, 609, 611, 614], "anova": [2, 51, 92, 111, 171, 173, 176, 177, 192, 278, 344, 415, 509, 520, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 718, 828, 832, 866, 867, 886, 906, 911, 1009, 1015], "f_regress": [2, 92, 172, 423, 597, 600, 601, 603, 604, 605, 609, 610, 614, 1038, 1042, 1049, 1052], "statist": [2, 49, 54, 117, 142, 145, 146, 157, 168, 169, 170, 172, 176, 177, 192, 194, 195, 196, 197, 207, 211, 227, 273, 277, 279, 282, 289, 297, 299, 320, 326, 331, 370, 380, 382, 384, 387, 393, 401, 413, 414, 415, 416, 418, 419, 421, 423, 439, 474, 479, 498, 499, 521, 522, 523, 525, 527, 546, 558, 564, 565, 567, 609, 610, 611, 614, 632, 635, 639, 640, 649, 654, 661, 695, 699, 701, 715, 721, 726, 727, 728, 735, 747, 792, 803, 819, 836, 863, 864, 882, 883, 884, 886, 891, 894, 895, 897, 911, 914, 915, 969, 983, 984, 988, 990, 991, 993, 994, 995, 996, 1001, 1002, 1004, 1008, 1009, 1010, 1011, 1012, 1015, 1020, 1026, 1027, 1040, 1043, 1046, 1047, 1049, 1050], "mutual_info_classif": [2, 109, 423, 597, 600, 601, 604, 605, 1041, 1047, 1050, 1053], "mutual": [2, 75, 76, 87, 93, 96, 171, 192, 401, 421, 423, 451, 597, 600, 601, 604, 605, 611, 612, 613, 614, 709, 710, 720, 759, 761, 790, 799, 983, 990, 994, 995, 1015, 1035, 1041, 1051], "discret": [2, 45, 70, 84, 126, 137, 142, 178, 192, 196, 203, 223, 230, 241, 261, 297, 315, 319, 323, 376, 379, 382, 383, 391, 400, 401, 414, 419, 422, 424, 443, 444, 453, 457, 465, 466, 467, 497, 519, 520, 527, 558, 564, 593, 594, 597, 600, 601, 604, 605, 612, 613, 615, 616, 617, 621, 622, 623, 662, 663, 746, 803, 814, 832, 841, 842, 845, 867, 871, 879, 880, 883, 886, 895, 906, 911, 915, 957, 983, 990, 991, 992, 994, 995, 997, 1010, 1013, 1015, 1019, 1030, 1037, 1040, 1048, 1049, 1050], "variabl": [2, 45, 50, 52, 53, 54, 57, 75, 107, 145, 149, 152, 155, 156, 158, 169, 170, 172, 177, 186, 187, 190, 191, 196, 197, 200, 207, 212, 223, 227, 228, 241, 245, 260, 272, 280, 283, 290, 297, 299, 325, 326, 327, 370, 374, 376, 382, 384, 385, 387, 389, 391, 392, 395, 401, 406, 411, 414, 415, 416, 417, 419, 421, 422, 423, 455, 487, 488, 489, 492, 504, 506, 513, 520, 537, 539, 541, 546, 549, 558, 564, 565, 609, 611, 612, 613, 645, 655, 656, 659, 660, 666, 687, 688, 700, 714, 751, 804, 805, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 831, 834, 838, 839, 869, 880, 883, 887, 895, 907, 983, 984, 986, 990, 993, 994, 995, 996, 997, 999, 1001, 1002, 1004, 1008, 1010, 1013, 1014, 1019, 1020, 1022, 1024, 1035, 1040, 1043, 1045, 1048, 1050], "mutual_info_regress": [2, 172, 333, 423, 597, 600, 601, 604, 605, 614, 1041, 1042, 1047, 1049, 1050, 1051, 1053], "r_regress": [2, 423, 611, 1048, 1049, 1052], "pearson": [2, 611, 614, 1048], "gaussianprocessclassifi": [2, 69, 70, 180, 181, 182, 183, 187, 401, 424, 616, 624, 625, 627, 628, 995, 1041, 1043, 1045, 1049], "gpc": [2, 57, 69, 125, 151, 161, 170, 178, 184, 185, 186, 187, 192, 233, 235, 236, 256, 315, 323, 343, 355, 509, 615, 616, 618, 619, 624, 625, 627, 628, 708, 745, 1015, 1016, 1030, 1045], "laplac": [2, 180, 424, 615, 616, 841, 842, 843, 845, 996], "gaussian_process": [2, 69, 70, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 401, 424, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 648, 995, 1015, 1038, 1041, 1042], "gaussianprocessregressor": [2, 179, 184, 185, 186, 187, 188, 424, 615, 618, 619, 620, 621, 622, 626, 629, 630, 648, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gpr": [2, 178, 179, 180, 186, 188, 192, 501, 615, 616, 618, 619, 620, 621, 626, 627, 628, 629, 630, 1015, 1016, 1030, 1045], "compoundkernel": [2, 615, 1049], "constantkernel": [2, 182, 188, 424, 616, 622, 626, 629], "dotproduct": [2, 182, 183, 188, 424, 616, 630], "dot": [2, 58, 71, 72, 82, 87, 92, 95, 100, 114, 115, 116, 118, 120, 121, 129, 130, 131, 135, 137, 142, 145, 179, 180, 186, 187, 195, 204, 207, 215, 217, 218, 230, 255, 267, 268, 270, 271, 284, 345, 347, 353, 374, 389, 393, 396, 401, 412, 419, 422, 538, 543, 545, 552, 595, 596, 619, 651, 652, 655, 657, 658, 659, 662, 665, 666, 667, 668, 686, 689, 692, 765, 767, 878, 918, 944, 992, 996, 1004, 1008, 1009, 1027, 1044], "product": [2, 61, 108, 128, 164, 179, 184, 196, 353, 370, 374, 389, 390, 393, 396, 409, 412, 419, 421, 456, 543, 545, 552, 587, 594, 595, 596, 618, 619, 638, 645, 669, 670, 690, 691, 765, 767, 779, 781, 878, 881, 898, 899, 944, 983, 986, 990, 992, 1004, 1006, 1008, 1009, 1013, 1018, 1043], "expsinesquar": [2, 179, 184, 188, 424], "exp": [2, 57, 84, 92, 104, 137, 145, 155, 180, 207, 233, 305, 310, 313, 330, 331, 335, 353, 413, 414, 415, 420, 426, 457, 470, 526, 538, 541, 620, 621, 627, 646, 763, 770, 780, 863, 864, 882, 988, 990, 992, 996, 997, 998, 1007, 1008, 1009, 1026], "sine": [2, 45, 179, 184, 185, 192, 217, 229, 265, 266, 267, 268, 270, 271, 367, 383, 620, 801, 802, 993, 1010, 1015], "period": [2, 54, 158, 179, 184, 188, 391, 401, 402, 413, 424, 620, 824, 885, 1043, 1048, 1050], "exponenti": [2, 84, 112, 179, 184, 305, 310, 420, 421, 424, 454, 541, 559, 564, 619, 624, 627, 644, 648, 762, 763, 846, 847, 851, 863, 864, 881, 986, 990, 994, 1009, 1026, 1042, 1048], "take": [2, 46, 49, 54, 61, 69, 84, 91, 93, 95, 104, 112, 116, 126, 128, 142, 151, 179, 181, 184, 188, 195, 200, 206, 227, 231, 232, 247, 257, 268, 269, 275, 281, 285, 289, 290, 299, 300, 303, 306, 307, 308, 310, 311, 320, 333, 341, 345, 346, 349, 359, 362, 363, 366, 374, 375, 376, 381, 382, 385, 387, 389, 392, 393, 394, 395, 399, 401, 402, 406, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 426, 442, 448, 451, 452, 454, 455, 457, 462, 463, 464, 466, 468, 474, 524, 538, 543, 544, 545, 551, 552, 586, 597, 600, 601, 603, 604, 605, 615, 616, 621, 625, 626, 629, 637, 648, 654, 676, 678, 679, 680, 681, 684, 696, 697, 704, 710, 712, 714, 724, 733, 734, 742, 746, 747, 760, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 803, 804, 808, 809, 817, 821, 830, 848, 849, 850, 852, 854, 855, 856, 857, 858, 870, 880, 901, 902, 906, 907, 908, 909, 910, 911, 912, 930, 964, 983, 986, 990, 991, 993, 994, 995, 997, 999, 1000, 1001, 1004, 1009, 1010, 1018, 1019, 1023, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "scalar": [2, 128, 332, 393, 401, 415, 424, 426, 469, 472, 529, 538, 620, 621, 622, 627, 628, 632, 633, 635, 742, 746, 922, 930, 986, 998, 1000, 1004, 1008, 1013, 1045, 1046, 1049, 1051], "hyperparamet": [2, 108, 110, 111, 158, 179, 180, 186, 187, 190, 192, 196, 202, 207, 212, 237, 241, 250, 260, 273, 278, 283, 285, 291, 292, 302, 318, 361, 389, 401, 414, 418, 419, 421, 424, 507, 540, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 648, 658, 664, 670, 678, 681, 732, 789, 803, 817, 911, 983, 988, 989, 990, 993, 994, 996, 998, 1000, 1008, 1014, 1015, 1028, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "form": [2, 45, 50, 60, 71, 80, 98, 105, 128, 166, 186, 187, 192, 195, 256, 257, 272, 280, 338, 370, 381, 384, 387, 389, 391, 401, 402, 412, 414, 417, 418, 419, 420, 421, 422, 424, 426, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 464, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 704, 801, 802, 803, 806, 807, 808, 811, 813, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 932, 951, 954, 983, 985, 987, 988, 990, 991, 994, 995, 998, 999, 1000, 1004, 1009, 1013, 1019, 1026, 1041, 1045, 1047], "namedtupl": [2, 622, 952, 1051], "matern": [2, 188, 424, 1046, 1050], "pairwisekernel": [2, 424], "wrapper": [2, 67, 300, 393, 396, 418, 424, 549, 625, 673, 676, 746, 906, 990, 1010, 1013, 1039, 1047], "pairwis": [2, 37, 102, 194, 195, 254, 260, 289, 329, 333, 334, 361, 374, 379, 389, 401, 414, 419, 424, 451, 459, 463, 466, 467, 473, 492, 513, 514, 540, 566, 567, 625, 643, 644, 645, 646, 647, 648, 693, 695, 697, 699, 701, 704, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 796, 797, 834, 850, 854, 858, 872, 904, 986, 994, 997, 1006, 1009, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051, 1052], "k_1": [2, 424, 626, 629], "k_2": [2, 424, 626, 629], "rbf": [2, 46, 47, 48, 51, 52, 57, 69, 70, 133, 164, 170, 179, 180, 181, 183, 184, 185, 186, 187, 188, 192, 200, 237, 249, 250, 256, 278, 280, 282, 285, 295, 297, 306, 343, 344, 346, 355, 356, 379, 415, 419, 421, 457, 467, 507, 509, 540, 546, 615, 616, 617, 618, 621, 623, 624, 625, 626, 628, 629, 636, 644, 645, 646, 647, 648, 681, 696, 769, 778, 780, 803, 814, 817, 823, 866, 886, 901, 902, 906, 908, 909, 910, 911, 912, 983, 986, 987, 989, 991, 994, 1000, 1004, 1007, 1015, 1019, 1021, 1024, 1030, 1041, 1046], "radial": [2, 46, 133, 179, 184, 186, 349, 353, 379, 457, 627, 696, 992, 1009, 1030], "basi": [2, 45, 47, 55, 133, 179, 184, 186, 224, 317, 332, 349, 353, 379, 385, 388, 414, 419, 421, 457, 539, 627, 637, 644, 696, 885, 992, 1004, 1009, 1016, 1023, 1024, 1027, 1030, 1043, 1045, 1048], "rationalquadrat": [2, 184, 188, 424, 621], "ration": [2, 184, 628, 992], "sum": [2, 30, 49, 58, 60, 66, 99, 117, 126, 131, 137, 154, 155, 173, 177, 187, 195, 204, 210, 219, 223, 227, 238, 241, 244, 246, 260, 289, 300, 307, 310, 333, 342, 353, 354, 357, 361, 362, 363, 369, 384, 393, 401, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 437, 447, 448, 452, 454, 464, 469, 470, 487, 488, 489, 520, 525, 528, 536, 539, 541, 542, 546, 549, 550, 551, 554, 555, 557, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 574, 575, 595, 596, 616, 618, 628, 630, 640, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 681, 682, 683, 684, 686, 689, 695, 699, 701, 704, 714, 715, 724, 730, 745, 760, 762, 763, 767, 792, 834, 835, 839, 840, 849, 853, 857, 864, 865, 885, 886, 906, 907, 909, 912, 914, 915, 916, 917, 945, 969, 975, 980, 990, 994, 995, 996, 997, 1009, 1010, 1026, 1038, 1039, 1041, 1043, 1044, 1046, 1051, 1052], "whitekernel": [2, 179, 184, 185, 424, 616, 617, 619, 1046], "white": [2, 96, 98, 128, 184, 195, 237, 243, 306, 318, 322, 343, 348, 419, 422, 630, 1010, 1035, 1038, 1041, 1045, 1049], "multivari": [2, 128, 195, 379, 416, 419, 422, 478, 521, 522, 523, 632, 633, 634, 635, 654, 676, 683, 684, 841, 842, 843, 844, 845, 988, 990, 993, 996, 1013, 1019, 1027, 1030], "imput": [2, 108, 158, 163, 197, 252, 262, 264, 330, 333, 379, 391, 400, 401, 406, 415, 421, 495, 506, 570, 585, 632, 633, 634, 635, 644, 650, 677, 828, 849, 867, 925, 927, 1013, 1014, 1015, 1030, 1037, 1038], "knnimput": [2, 191, 329, 632, 635, 984, 1045, 1046, 1049, 1050, 1051, 1052], "complet": [2, 45, 75, 76, 77, 82, 87, 90, 96, 100, 121, 158, 161, 172, 174, 177, 192, 197, 198, 229, 249, 250, 257, 260, 278, 325, 327, 329, 362, 370, 382, 387, 391, 392, 395, 399, 415, 418, 419, 421, 422, 446, 450, 454, 457, 467, 468, 469, 472, 500, 541, 542, 543, 544, 549, 551, 563, 574, 575, 586, 592, 593, 594, 596, 632, 633, 634, 635, 650, 654, 662, 676, 678, 709, 710, 720, 721, 722, 733, 735, 740, 741, 761, 790, 799, 834, 837, 840, 849, 865, 866, 867, 868, 929, 979, 983, 988, 990, 994, 995, 997, 1009, 1010, 1015, 1019, 1028, 1035, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "miss": [2, 20, 108, 163, 177, 197, 252, 262, 280, 300, 330, 334, 370, 374, 379, 382, 384, 386, 387, 389, 391, 392, 401, 411, 414, 415, 416, 451, 477, 495, 501, 503, 506, 562, 563, 566, 567, 569, 570, 571, 632, 633, 634, 635, 644, 650, 677, 695, 699, 731, 773, 828, 849, 867, 875, 876, 880, 882, 883, 886, 887, 891, 894, 895, 897, 914, 915, 916, 917, 990, 991, 994, 1013, 1014, 1015, 1016, 1018, 1030, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "nearest": [2, 33, 53, 55, 70, 71, 77, 78, 88, 89, 92, 96, 99, 104, 109, 114, 118, 123, 128, 131, 159, 169, 183, 191, 214, 235, 239, 245, 248, 259, 260, 274, 283, 304, 306, 309, 310, 317, 318, 325, 349, 354, 355, 359, 379, 384, 396, 399, 401, 414, 420, 421, 425, 428, 438, 449, 451, 453, 455, 457, 462, 466, 467, 501, 507, 509, 612, 613, 632, 633, 635, 636, 640, 693, 694, 696, 697, 701, 796, 797, 803, 832, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 866, 867, 871, 886, 968, 991, 1000, 1009, 1014, 1015, 1016, 1022, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1047], "neighbor": [2, 53, 70, 77, 82, 85, 98, 104, 109, 158, 159, 161, 164, 169, 190, 191, 244, 245, 247, 248, 250, 259, 260, 274, 283, 304, 305, 306, 307, 309, 310, 311, 313, 317, 331, 333, 334, 361, 379, 384, 396, 399, 401, 405, 414, 420, 421, 422, 425, 428, 438, 446, 449, 450, 453, 455, 457, 462, 463, 466, 468, 501, 507, 509, 568, 575, 607, 612, 613, 632, 633, 636, 693, 694, 695, 696, 697, 698, 700, 701, 785, 803, 832, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 866, 867, 886, 902, 910, 968, 995, 1000, 1014, 1015, 1016, 1022, 1027, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "missingind": [2, 632, 633, 635, 984, 1043, 1044, 1045, 1049, 1051], "indic": [2, 53, 60, 61, 65, 66, 86, 97, 98, 104, 112, 121, 124, 128, 142, 147, 153, 184, 187, 191, 194, 196, 220, 245, 254, 257, 274, 282, 283, 286, 287, 300, 313, 338, 339, 342, 361, 362, 363, 369, 375, 382, 387, 388, 389, 391, 395, 396, 399, 401, 411, 412, 413, 414, 416, 418, 419, 421, 422, 425, 429, 442, 445, 449, 455, 456, 457, 458, 460, 461, 462, 465, 469, 472, 477, 492, 513, 514, 516, 517, 518, 528, 537, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 586, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 625, 632, 633, 634, 635, 637, 638, 644, 651, 652, 655, 656, 657, 658, 659, 660, 666, 668, 670, 678, 680, 687, 688, 695, 697, 699, 701, 708, 712, 717, 718, 723, 724, 725, 729, 732, 733, 734, 735, 738, 742, 743, 744, 745, 758, 775, 782, 783, 784, 785, 787, 788, 789, 791, 792, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 839, 840, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 870, 873, 877, 879, 887, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 922, 926, 927, 932, 947, 957, 958, 969, 970, 971, 972, 973, 974, 975, 984, 989, 990, 991, 994, 995, 996, 997, 998, 1001, 1004, 1005, 1008, 1009, 1014, 1019, 1023, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1048, 1050, 1051, 1052], "simpleimput": [2, 108, 163, 190, 191, 197, 252, 262, 264, 330, 333, 370, 401, 632, 633, 634, 984, 1004, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "partial_depend": [2, 196, 637, 1001, 1036, 1044, 1045, 1046, 1047, 1050, 1051], "depend": [2, 25, 45, 46, 48, 54, 67, 75, 91, 112, 132, 148, 152, 155, 156, 158, 160, 163, 172, 176, 185, 190, 192, 193, 195, 198, 200, 203, 207, 241, 244, 249, 250, 256, 260, 271, 280, 281, 285, 286, 287, 300, 316, 320, 325, 331, 334, 346, 353, 357, 362, 363, 370, 374, 375, 376, 380, 387, 389, 390, 395, 396, 399, 400, 401, 402, 404, 405, 408, 409, 411, 414, 416, 418, 419, 421, 422, 423, 424, 425, 443, 444, 445, 449, 451, 452, 454, 455, 457, 459, 462, 464, 465, 467, 469, 474, 489, 494, 495, 496, 498, 501, 505, 506, 507, 509, 510, 515, 539, 540, 546, 549, 556, 564, 565, 567, 593, 594, 595, 596, 607, 609, 612, 613, 616, 632, 637, 638, 643, 645, 653, 663, 664, 674, 676, 678, 681, 682, 683, 685, 692, 695, 696, 699, 700, 716, 733, 734, 742, 745, 782, 785, 787, 788, 791, 796, 797, 801, 802, 822, 831, 848, 849, 850, 852, 854, 855, 856, 857, 858, 864, 865, 867, 879, 880, 883, 886, 900, 907, 908, 911, 915, 924, 983, 984, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1002, 1006, 1008, 1009, 1010, 1015, 1019, 1026, 1028, 1030, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052], "inspect": [2, 45, 50, 69, 70, 73, 94, 99, 144, 149, 156, 158, 159, 160, 164, 174, 179, 184, 185, 195, 196, 197, 198, 206, 215, 232, 237, 261, 280, 283, 292, 303, 308, 311, 325, 329, 330, 331, 332, 334, 336, 345, 346, 347, 348, 350, 351, 353, 361, 366, 375, 389, 401, 414, 415, 421, 422, 469, 558, 559, 562, 563, 564, 565, 569, 570, 571, 636, 637, 638, 639, 835, 866, 867, 914, 915, 916, 917, 982, 994, 995, 998, 1001, 1002, 1009, 1013, 1015, 1028, 1030, 1038], "permutation_import": [2, 149, 150, 156, 197, 198, 329, 421, 558, 559, 562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917, 1002, 1045, 1047, 1048, 1052], "permut": [2, 61, 62, 75, 117, 150, 156, 170, 172, 192, 193, 239, 273, 280, 324, 327, 341, 404, 410, 414, 421, 469, 501, 505, 509, 564, 565, 569, 570, 632, 635, 639, 684, 709, 710, 722, 740, 741, 759, 761, 799, 820, 822, 831, 832, 866, 880, 911, 914, 915, 943, 963, 965, 968, 994, 1008, 1015, 1023, 1026, 1030, 1035, 1041, 1048, 1050], "evalu": [2, 27, 29, 45, 46, 47, 51, 52, 64, 71, 74, 76, 80, 81, 87, 93, 102, 108, 109, 131, 142, 148, 149, 150, 152, 153, 155, 158, 172, 173, 182, 192, 198, 200, 203, 212, 225, 230, 241, 249, 273, 274, 277, 278, 279, 280, 283, 285, 286, 287, 289, 291, 292, 294, 299, 307, 309, 313, 320, 325, 327, 331, 335, 336, 342, 349, 353, 361, 370, 380, 382, 389, 393, 401, 404, 415, 422, 423, 424, 452, 454, 469, 471, 493, 496, 497, 498, 501, 514, 525, 541, 556, 566, 567, 568, 572, 573, 596, 599, 607, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 638, 639, 652, 658, 664, 678, 680, 702, 704, 706, 707, 708, 709, 710, 716, 718, 719, 720, 722, 723, 730, 731, 740, 741, 746, 758, 759, 760, 761, 790, 799, 801, 802, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 832, 833, 837, 843, 846, 847, 852, 864, 866, 867, 873, 876, 879, 880, 884, 885, 886, 891, 892, 894, 895, 896, 897, 908, 911, 914, 929, 937, 968, 986, 990, 992, 996, 997, 1000, 1001, 1002, 1005, 1008, 1010, 1013, 1015, 1018, 1019, 1020, 1023, 1024, 1026, 1029, 1030, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "rd9e56ef97513": 2, "bre": [2, 639, 1010], "decisionboundarydisplai": [2, 50, 69, 70, 73, 94, 144, 159, 164, 206, 215, 232, 237, 283, 303, 308, 311, 325, 345, 346, 347, 348, 350, 351, 353, 366, 1049, 1050, 1052], "boundari": [2, 52, 55, 65, 66, 67, 70, 73, 96, 98, 141, 144, 151, 161, 165, 170, 180, 181, 183, 192, 196, 206, 224, 232, 250, 255, 258, 283, 294, 308, 310, 311, 313, 315, 320, 322, 325, 337, 342, 344, 346, 347, 348, 349, 351, 358, 359, 366, 383, 413, 421, 422, 424, 455, 461, 509, 541, 554, 555, 574, 593, 594, 596, 636, 739, 765, 803, 835, 848, 854, 856, 857, 858, 881, 885, 902, 903, 908, 910, 911, 914, 930, 988, 997, 1000, 1004, 1007, 1008, 1009, 1015, 1035, 1037, 1039, 1048, 1049, 1050, 1052], "partialdependencedisplai": [2, 158, 160, 196, 261, 330, 331, 332, 334, 336, 394, 638, 1001, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "plot": [2, 45, 46, 47, 52, 53, 54, 56, 57, 65, 66, 67, 68, 70, 71, 72, 74, 75, 78, 80, 81, 83, 92, 93, 94, 96, 97, 98, 99, 100, 103, 109, 110, 111, 112, 115, 116, 117, 121, 122, 128, 131, 132, 135, 136, 137, 138, 141, 142, 144, 145, 146, 147, 149, 153, 154, 155, 157, 158, 160, 161, 162, 170, 172, 173, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 197, 198, 200, 201, 205, 206, 208, 210, 211, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 233, 235, 236, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 253, 254, 256, 258, 259, 264, 266, 267, 268, 270, 272, 273, 274, 275, 280, 281, 283, 285, 286, 290, 291, 292, 294, 297, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 320, 321, 322, 323, 324, 325, 327, 330, 333, 334, 335, 336, 339, 340, 341, 343, 344, 345, 349, 350, 351, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 367, 368, 369, 387, 390, 396, 399, 404, 405, 410, 413, 414, 416, 418, 420, 421, 443, 446, 451, 455, 461, 469, 476, 501, 506, 507, 509, 517, 520, 524, 528, 558, 562, 565, 567, 569, 570, 574, 575, 615, 627, 636, 637, 638, 662, 663, 677, 681, 702, 703, 705, 706, 707, 708, 723, 731, 739, 765, 786, 788, 791, 792, 793, 803, 809, 820, 825, 827, 828, 829, 830, 833, 844, 848, 864, 867, 879, 880, 881, 883, 886, 906, 908, 911, 914, 915, 920, 987, 988, 990, 991, 993, 994, 997, 998, 1000, 1008, 1009, 1010, 1013, 1014, 1015, 1023, 1024, 1026, 1030, 1036, 1038, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "pdp": [2, 637, 1001, 1049], "isotonicregress": [2, 253, 985, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1049, 1050, 1051], "model": [2, 7, 8, 21, 28, 34, 37, 40, 44, 46, 47, 50, 51, 53, 55, 56, 57, 61, 62, 64, 65, 67, 73, 77, 78, 79, 86, 87, 92, 93, 94, 96, 99, 106, 108, 109, 110, 114, 118, 121, 127, 128, 137, 138, 141, 142, 143, 145, 147, 151, 154, 155, 157, 158, 160, 162, 163, 166, 168, 170, 171, 173, 174, 182, 183, 185, 186, 187, 188, 191, 193, 194, 198, 203, 205, 208, 209, 213, 214, 216, 218, 219, 220, 224, 225, 227, 228, 229, 231, 235, 236, 238, 239, 240, 250, 253, 258, 266, 268, 269, 270, 274, 275, 276, 278, 281, 283, 284, 285, 286, 288, 289, 293, 294, 297, 300, 302, 303, 304, 306, 309, 313, 321, 324, 326, 327, 329, 331, 333, 334, 335, 338, 339, 346, 348, 349, 350, 351, 352, 354, 355, 357, 359, 362, 363, 366, 367, 368, 370, 379, 381, 382, 390, 393, 401, 404, 406, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 433, 437, 439, 442, 447, 454, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 493, 494, 495, 501, 503, 505, 506, 507, 508, 514, 527, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 593, 594, 596, 598, 599, 602, 607, 611, 614, 615, 616, 620, 632, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 706, 711, 716, 726, 727, 728, 738, 739, 745, 754, 757, 789, 792, 793, 796, 801, 802, 803, 806, 807, 808, 809, 817, 818, 819, 820, 824, 825, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 851, 852, 853, 855, 857, 862, 863, 864, 866, 867, 869, 871, 873, 878, 879, 881, 882, 883, 885, 886, 887, 891, 892, 894, 895, 896, 897, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 978, 984, 986, 987, 988, 991, 992, 995, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1020, 1022, 1024, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1053], "check_increas": 2, "whether": [2, 49, 51, 54, 57, 108, 140, 159, 182, 185, 187, 195, 196, 223, 227, 241, 244, 251, 257, 278, 320, 369, 370, 375, 382, 385, 386, 387, 389, 391, 392, 393, 401, 406, 414, 415, 416, 418, 419, 421, 423, 426, 445, 447, 456, 458, 459, 464, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 492, 493, 496, 497, 501, 502, 508, 513, 514, 519, 527, 532, 536, 537, 542, 543, 544, 545, 547, 550, 551, 553, 557, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 586, 593, 594, 595, 596, 602, 607, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 636, 637, 638, 640, 641, 642, 643, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 695, 699, 700, 702, 703, 705, 707, 709, 717, 746, 765, 771, 778, 782, 786, 793, 803, 806, 807, 808, 809, 817, 821, 822, 825, 826, 829, 830, 832, 835, 837, 840, 841, 842, 843, 845, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 863, 864, 870, 887, 893, 906, 907, 908, 909, 910, 911, 912, 918, 920, 924, 926, 927, 928, 930, 942, 943, 950, 951, 967, 978, 982, 983, 984, 989, 990, 994, 999, 1000, 1006, 1008, 1009, 1018, 1042, 1043, 1044, 1052], "y": [2, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 64, 65, 66, 67, 69, 70, 72, 73, 77, 78, 80, 81, 82, 83, 90, 92, 94, 95, 98, 99, 100, 103, 104, 108, 109, 111, 112, 117, 120, 121, 125, 126, 130, 132, 133, 134, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 241, 243, 244, 245, 248, 251, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 266, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 366, 367, 368, 369, 370, 379, 380, 381, 382, 385, 387, 389, 392, 394, 396, 400, 401, 406, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 503, 505, 507, 510, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 711, 716, 730, 736, 739, 745, 746, 760, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 792, 793, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 926, 931, 932, 954, 956, 957, 958, 962, 965, 968, 981, 983, 984, 985, 986, 988, 989, 990, 992, 994, 995, 996, 997, 998, 999, 1001, 1004, 1008, 1009, 1010, 1014, 1019, 1023, 1024, 1026, 1027, 1030, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "monoton": [2, 22, 45, 65, 141, 192, 196, 241, 253, 261, 330, 413, 562, 563, 566, 567, 569, 570, 637, 640, 641, 699, 711, 882, 894, 908, 911, 914, 915, 916, 917, 991, 995, 1004, 1009, 1015, 1042, 1046, 1050, 1052], "x": [2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 64, 65, 66, 67, 69, 70, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 115, 116, 117, 118, 120, 121, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 243, 244, 245, 248, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 380, 381, 382, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 406, 409, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 498, 499, 500, 503, 505, 506, 507, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 715, 716, 729, 736, 739, 746, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 930, 940, 942, 943, 944, 945, 954, 955, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 983, 984, 985, 986, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1014, 1019, 1023, 1024, 1026, 1027, 1028, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "isotonic_regress": [2, 640, 1048], "additivechi2sampl": [2, 644, 645, 646, 647, 762, 763, 986, 1049, 1051], "addit": [2, 7, 37, 45, 46, 48, 53, 55, 56, 104, 108, 118, 124, 128, 131, 142, 146, 148, 149, 152, 153, 176, 184, 185, 186, 191, 195, 196, 202, 207, 212, 224, 225, 227, 247, 261, 282, 289, 294, 299, 320, 330, 331, 336, 340, 353, 363, 367, 370, 374, 375, 379, 380, 381, 382, 383, 385, 386, 387, 389, 392, 393, 395, 399, 400, 401, 402, 405, 409, 414, 416, 418, 419, 422, 423, 424, 425, 438, 446, 447, 449, 450, 451, 455, 462, 474, 479, 501, 508, 537, 539, 541, 542, 544, 546, 547, 548, 554, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 617, 624, 633, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 675, 692, 693, 697, 703, 704, 707, 746, 762, 763, 792, 796, 801, 802, 809, 825, 835, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 862, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 888, 898, 899, 906, 907, 937, 943, 983, 988, 990, 994, 995, 997, 998, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1019, 1030, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "kernel_approxim": [2, 45, 190, 192, 199, 200, 237, 250, 255, 331, 643, 644, 645, 646, 647, 682, 762, 763, 872, 986, 1015, 1019, 1036, 1042, 1052], "nystroem": [2, 45, 190, 237, 250, 255, 379, 645, 646, 647, 682, 872, 911, 912, 1030, 1036, 1042, 1045, 1047, 1048, 1049], "subset": [2, 48, 60, 61, 66, 67, 71, 107, 108, 116, 117, 149, 151, 152, 153, 168, 174, 177, 196, 198, 212, 224, 238, 239, 240, 241, 253, 255, 259, 260, 278, 281, 283, 289, 290, 292, 297, 325, 326, 331, 338, 342, 361, 362, 363, 370, 382, 387, 395, 399, 401, 412, 413, 414, 415, 418, 421, 422, 424, 431, 442, 454, 469, 471, 472, 474, 493, 494, 497, 498, 502, 513, 554, 555, 556, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 607, 615, 634, 644, 645, 646, 647, 656, 660, 663, 671, 672, 673, 676, 679, 680, 681, 682, 683, 684, 702, 708, 709, 718, 721, 723, 735, 738, 759, 761, 797, 800, 805, 830, 832, 834, 835, 836, 837, 841, 842, 843, 844, 845, 848, 853, 856, 863, 872, 901, 902, 906, 908, 911, 914, 916, 922, 963, 983, 990, 994, 995, 1005, 1007, 1009, 1010, 1028, 1038, 1043, 1044, 1046, 1048, 1052], "train": [2, 45, 46, 47, 48, 49, 51, 52, 54, 57, 64, 66, 67, 69, 70, 71, 72, 92, 94, 96, 102, 103, 107, 108, 112, 120, 121, 128, 131, 132, 133, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 158, 160, 163, 164, 165, 168, 174, 179, 180, 181, 184, 185, 186, 187, 188, 192, 194, 195, 196, 197, 198, 200, 206, 207, 209, 211, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 230, 231, 232, 235, 237, 238, 241, 250, 253, 255, 259, 268, 270, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 300, 303, 306, 307, 308, 309, 311, 313, 315, 316, 317, 320, 322, 324, 325, 329, 332, 336, 337, 338, 339, 342, 343, 345, 346, 348, 356, 357, 363, 364, 367, 368, 370, 374, 375, 376, 379, 382, 384, 389, 392, 399, 400, 401, 409, 411, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 426, 442, 445, 446, 448, 449, 452, 454, 456, 457, 458, 459, 464, 470, 474, 475, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 493, 494, 498, 501, 502, 503, 505, 509, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 696, 697, 701, 708, 745, 792, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 871, 872, 875, 876, 879, 880, 884, 885, 886, 887, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 968, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1020, 1023, 1024, 1030, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "polynomialcountsketch": [2, 200, 644, 646, 986, 1047, 1049, 1052], "polynomi": [2, 56, 190, 192, 199, 201, 223, 229, 255, 262, 280, 294, 305, 331, 332, 346, 356, 379, 383, 457, 496, 625, 644, 645, 646, 648, 677, 769, 778, 779, 832, 867, 876, 878, 881, 885, 906, 908, 909, 910, 911, 912, 989, 1009, 1015, 1016, 1030, 1047, 1048], "tensor": [2, 200, 379, 411, 419, 543, 545, 552, 644, 645, 646, 1030, 1047], "sketch": [2, 23, 200, 376, 379, 396, 644, 645, 646, 959, 1030, 1047], "rbfsampler": [2, 255, 644, 645, 647, 986, 1019, 1039, 1049, 1050], "fourier": [2, 23, 255, 643, 644, 645, 646, 647, 762, 763, 986], "skewedchi2sampl": [2, 643, 644, 645, 646, 986, 1042, 1049, 1050], "skew": [2, 50, 155, 226, 254, 260, 320, 335, 379, 418, 644, 645, 646, 647, 882, 894, 990, 1004, 1030, 1038, 1042, 1051], "kernelridg": [2, 133, 179, 256, 677, 987, 1039, 1052], "ridg": [2, 24, 46, 51, 55, 92, 112, 129, 130, 145, 163, 168, 177, 178, 184, 186, 190, 192, 194, 195, 196, 201, 202, 207, 210, 216, 219, 223, 224, 249, 259, 321, 324, 356, 357, 361, 374, 399, 419, 421, 424, 529, 540, 544, 548, 616, 620, 627, 630, 648, 649, 650, 652, 654, 662, 666, 678, 679, 680, 683, 692, 706, 754, 803, 809, 817, 839, 912, 994, 1002, 1004, 1008, 1009, 1015, 1016, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "kernel_ridg": [2, 179, 256, 648, 1039], "logisticregress": [2, 65, 69, 108, 110, 147, 165, 169, 176, 177, 206, 213, 214, 215, 216, 230, 238, 239, 251, 252, 262, 264, 283, 289, 318, 322, 329, 330, 331, 332, 333, 335, 361, 374, 387, 389, 393, 395, 400, 406, 413, 415, 421, 423, 434, 439, 443, 572, 574, 602, 636, 639, 648, 657, 664, 677, 678, 679, 680, 681, 692, 705, 792, 817, 825, 831, 833, 837, 838, 840, 891, 892, 894, 895, 896, 897, 913, 937, 938, 939, 978, 990, 994, 995, 1004, 1008, 1009, 1024, 1026, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "logit": [2, 413, 424, 663, 664, 990], "maxent": [2, 663, 664, 990], "linear_model": [2, 45, 48, 49, 51, 55, 65, 67, 69, 92, 108, 110, 112, 121, 147, 163, 165, 166, 168, 169, 176, 177, 179, 190, 192, 194, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 257, 259, 262, 264, 276, 283, 288, 289, 293, 294, 299, 318, 321, 322, 325, 327, 329, 330, 331, 332, 333, 335, 336, 342, 361, 370, 374, 376, 386, 387, 389, 393, 395, 396, 400, 401, 406, 415, 421, 434, 439, 443, 470, 542, 544, 547, 548, 550, 551, 553, 572, 573, 574, 575, 602, 636, 637, 639, 640, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 705, 706, 792, 817, 825, 827, 828, 829, 831, 833, 837, 838, 839, 840, 864, 881, 885, 906, 907, 910, 913, 935, 937, 938, 939, 978, 986, 990, 994, 995, 1000, 1002, 1004, 1008, 1015, 1023, 1024, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "logisticregressioncv": [2, 67, 325, 401, 406, 663, 990, 995, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1050, 1052], "cv": [2, 45, 53, 54, 64, 65, 66, 67, 92, 108, 109, 110, 111, 114, 135, 148, 152, 154, 158, 168, 176, 190, 191, 195, 212, 222, 225, 276, 278, 279, 280, 281, 282, 283, 285, 286, 290, 294, 297, 326, 334, 336, 349, 357, 400, 401, 406, 413, 418, 421, 423, 442, 477, 572, 573, 599, 607, 652, 656, 658, 660, 664, 666, 668, 670, 678, 680, 803, 805, 806, 807, 808, 809, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 837, 840, 887, 914, 915, 983, 986, 989, 990, 994, 1004, 1014, 1023, 1024, 1028, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053], "passiveaggressiveclassifi": [2, 49, 230, 374, 376, 990, 995, 1036, 1039, 1040, 1042, 1043, 1046, 1048, 1053], "passiv": [2, 49, 230, 671, 672, 1016, 1030, 1036], "aggress": [2, 49, 230, 671, 672, 806, 807, 1016, 1030, 1036], "perceptron": [2, 49, 70, 161, 170, 181, 192, 230, 233, 239, 261, 314, 322, 323, 343, 354, 359, 376, 399, 422, 519, 520, 527, 671, 681, 832, 862, 863, 864, 867, 886, 992, 995, 999, 1008, 1015, 1016, 1030, 1039, 1041, 1042, 1043, 1047], "ridgeclassifi": [2, 361, 374, 677, 678, 680, 990, 995, 1040, 1044, 1048, 1049, 1050, 1053], "ridgeclassifiercv": [2, 406, 678, 679, 792, 990, 994, 995, 1043, 1045, 1046, 1048, 1049, 1053], "built": [2, 25, 69, 121, 140, 142, 143, 151, 153, 197, 231, 283, 297, 313, 329, 366, 369, 374, 382, 385, 387, 388, 389, 391, 393, 395, 396, 399, 400, 401, 405, 409, 414, 415, 418, 421, 423, 450, 508, 558, 559, 560, 561, 564, 565, 566, 567, 593, 594, 598, 602, 644, 645, 646, 647, 648, 651, 652, 657, 663, 665, 666, 667, 668, 677, 678, 679, 680, 686, 806, 807, 814, 837, 840, 846, 847, 916, 917, 978, 990, 994, 995, 1007, 1008, 1010, 1013, 1018, 1028, 1035, 1038, 1039, 1041, 1047], "sgdclassifi": [2, 25, 48, 49, 230, 231, 232, 233, 234, 235, 236, 255, 288, 342, 351, 361, 370, 374, 376, 393, 401, 413, 422, 643, 645, 646, 647, 651, 663, 671, 673, 906, 911, 986, 990, 995, 1008, 1009, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "svm": [2, 44, 48, 50, 51, 52, 56, 57, 65, 67, 69, 70, 71, 107, 109, 111, 128, 140, 151, 161, 164, 167, 171, 175, 176, 177, 181, 183, 187, 192, 201, 204, 206, 215, 216, 232, 233, 234, 235, 236, 250, 256, 258, 259, 262, 263, 270, 274, 277, 278, 279, 280, 282, 283, 285, 286, 287, 288, 290, 291, 294, 295, 297, 306, 311, 312, 313, 315, 322, 323, 329, 331, 337, 341, 342, 344, 347, 356, 357, 361, 374, 382, 389, 393, 401, 409, 415, 418, 419, 421, 423, 440, 441, 442, 499, 509, 517, 520, 546, 560, 561, 568, 572, 573, 582, 598, 599, 604, 605, 610, 636, 644, 648, 673, 681, 682, 683, 694, 702, 703, 705, 707, 718, 739, 746, 765, 803, 817, 823, 828, 829, 832, 834, 835, 852, 866, 867, 879, 881, 886, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 982, 983, 986, 989, 991, 992, 994, 995, 999, 1007, 1009, 1011, 1015, 1016, 1019, 1022, 1023, 1024, 1028, 1030, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "etc": [2, 152, 223, 241, 275, 284, 285, 370, 374, 376, 387, 389, 391, 392, 399, 400, 401, 406, 412, 415, 418, 422, 494, 508, 532, 562, 563, 569, 570, 673, 681, 697, 723, 775, 803, 817, 837, 840, 870, 881, 914, 915, 916, 917, 918, 920, 926, 927, 937, 952, 983, 984, 988, 994, 997, 1013, 1014, 1018, 1035, 1042, 1044, 1045], "sgd": [2, 48, 49, 52, 57, 125, 137, 144, 154, 155, 164, 182, 183, 192, 201, 204, 208, 214, 215, 230, 237, 250, 257, 270, 288, 316, 317, 332, 345, 350, 351, 354, 355, 359, 361, 366, 370, 376, 509, 517, 636, 654, 671, 672, 673, 676, 681, 682, 683, 684, 863, 864, 983, 998, 1015, 1016, 1030, 1035, 1038, 1039, 1040, 1042, 1046, 1048], "sgdoneclasssvm": [2, 237, 250, 332, 910, 1000, 1008, 1048, 1050, 1051, 1052, 1053], "One": [2, 45, 50, 53, 64, 69, 87, 93, 125, 133, 135, 150, 152, 155, 158, 159, 192, 195, 198, 201, 227, 232, 238, 250, 261, 271, 280, 287, 290, 297, 306, 309, 321, 336, 344, 346, 362, 374, 384, 387, 400, 401, 414, 417, 419, 420, 421, 422, 423, 425, 449, 454, 477, 479, 483, 517, 571, 636, 644, 663, 671, 673, 678, 680, 681, 682, 792, 810, 811, 834, 835, 836, 867, 868, 879, 910, 957, 984, 986, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1004, 1009, 1015, 1016, 1030, 1039, 1041, 1048, 1050], "stochast": [2, 48, 96, 153, 154, 157, 169, 192, 200, 201, 211, 245, 247, 250, 255, 306, 308, 309, 314, 317, 332, 348, 414, 419, 421, 467, 493, 501, 507, 508, 509, 519, 527, 541, 549, 564, 565, 609, 632, 636, 644, 663, 664, 673, 677, 679, 681, 682, 683, 684, 692, 693, 694, 695, 697, 832, 855, 862, 863, 864, 867, 876, 910, 942, 943, 968, 983, 997, 998, 1000, 1015, 1016, 1029, 1030, 1035, 1036, 1039, 1040, 1042, 1044, 1046], "descent": [2, 48, 55, 153, 192, 201, 208, 211, 250, 255, 306, 332, 348, 419, 421, 476, 477, 483, 493, 501, 508, 536, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 636, 644, 651, 652, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 673, 677, 679, 681, 682, 683, 686, 687, 688, 689, 692, 699, 832, 863, 864, 867, 906, 910, 968, 991, 998, 1000, 1009, 1015, 1016, 1026, 1030, 1035, 1038, 1039, 1040, 1042, 1044, 1046, 1048, 1049, 1050], "linearregress": [2, 121, 166, 194, 202, 213, 218, 219, 220, 221, 226, 229, 240, 253, 257, 259, 276, 294, 321, 370, 387, 399, 400, 415, 421, 470, 575, 637, 640, 651, 654, 657, 659, 676, 677, 692, 990, 994, 1004, 1026, 1039, 1040, 1044, 1047, 1048, 1049, 1051], "ordinari": [2, 130, 145, 192, 201, 202, 207, 219, 225, 226, 228, 240, 332, 640, 651, 657, 659, 660, 661, 662, 677, 683, 687, 688, 692, 1008, 1015, 1016, 1030], "l2": [2, 55, 69, 78, 118, 120, 192, 194, 195, 201, 202, 207, 208, 214, 216, 219, 223, 228, 234, 238, 239, 241, 281, 300, 320, 327, 342, 361, 362, 389, 396, 399, 414, 416, 419, 422, 446, 450, 455, 462, 529, 543, 545, 552, 563, 566, 567, 570, 594, 595, 596, 648, 651, 652, 653, 654, 657, 662, 663, 664, 665, 666, 667, 668, 673, 674, 677, 681, 683, 685, 686, 691, 692, 693, 739, 754, 765, 766, 782, 783, 784, 817, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 863, 864, 878, 886, 893, 906, 907, 911, 912, 913, 915, 917, 977, 983, 987, 990, 992, 997, 998, 1004, 1008, 1010, 1015, 1026, 1028, 1037, 1039, 1040, 1042, 1044], "regular": [2, 65, 67, 70, 74, 95, 97, 98, 99, 108, 110, 115, 133, 141, 153, 154, 156, 161, 168, 170, 179, 180, 181, 186, 188, 190, 192, 194, 201, 202, 203, 205, 207, 208, 210, 211, 212, 214, 219, 221, 223, 230, 237, 239, 241, 256, 267, 274, 276, 281, 282, 284, 293, 305, 306, 314, 316, 317, 318, 322, 323, 325, 326, 327, 343, 344, 346, 348, 349, 350, 353, 354, 359, 361, 363, 365, 374, 387, 399, 400, 413, 414, 416, 417, 419, 420, 421, 424, 442, 448, 452, 476, 477, 481, 483, 484, 485, 486, 509, 517, 519, 520, 525, 527, 529, 533, 543, 544, 545, 548, 552, 553, 555, 564, 566, 567, 593, 594, 596, 643, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 698, 739, 745, 754, 801, 802, 820, 832, 833, 863, 864, 867, 886, 906, 907, 908, 909, 911, 912, 913, 983, 984, 986, 987, 988, 991, 993, 999, 1000, 1004, 1007, 1008, 1009, 1015, 1016, 1018, 1023, 1024, 1026, 1030, 1035, 1036, 1037, 1039, 1040, 1044, 1045, 1047, 1048], "ridgecv": [2, 45, 112, 163, 177, 195, 259, 401, 406, 421, 573, 648, 677, 680, 990, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "sgdregressor": [2, 25, 51, 234, 374, 376, 399, 651, 654, 672, 676, 681, 684, 864, 907, 912, 990, 1008, 1037, 1039, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1053], "minim": [2, 45, 53, 54, 67, 95, 104, 114, 115, 155, 179, 187, 202, 219, 221, 223, 225, 227, 231, 241, 243, 253, 254, 266, 271, 281, 289, 290, 320, 329, 332, 346, 353, 357, 365, 386, 387, 390, 395, 399, 401, 413, 414, 416, 419, 421, 445, 446, 450, 451, 455, 468, 543, 545, 552, 562, 563, 564, 565, 569, 570, 614, 615, 616, 646, 651, 654, 662, 663, 672, 676, 677, 679, 683, 684, 692, 697, 699, 700, 752, 784, 853, 855, 864, 882, 894, 900, 914, 915, 916, 917, 990, 991, 994, 997, 998, 1004, 1006, 1007, 1008, 1009, 1013, 1016, 1026, 1027, 1030, 1039, 1044, 1045], "empir": [2, 50, 54, 64, 65, 73, 74, 80, 81, 102, 113, 115, 116, 118, 158, 192, 203, 241, 286, 320, 413, 418, 421, 424, 452, 454, 465, 474, 475, 476, 479, 482, 483, 537, 539, 544, 546, 548, 554, 556, 570, 595, 608, 644, 654, 672, 676, 683, 684, 721, 726, 727, 728, 831, 841, 842, 843, 845, 864, 887, 929, 968, 986, 988, 994, 996, 998, 1004, 1006, 1008, 1015, 1029, 1030], "loss": [2, 25, 48, 54, 64, 65, 66, 67, 137, 148, 154, 155, 156, 157, 179, 180, 192, 201, 205, 213, 216, 225, 227, 228, 230, 231, 235, 241, 256, 288, 316, 317, 325, 332, 336, 342, 346, 347, 351, 353, 357, 361, 399, 401, 413, 419, 424, 469, 470, 501, 513, 514, 537, 543, 544, 545, 548, 552, 557, 558, 559, 563, 564, 565, 566, 567, 570, 648, 651, 654, 663, 664, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 708, 711, 714, 727, 738, 739, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 794, 795, 800, 803, 806, 807, 817, 828, 829, 832, 863, 864, 866, 867, 870, 871, 879, 880, 881, 886, 906, 907, 912, 913, 915, 917, 943, 947, 987, 990, 998, 1002, 1007, 1008, 1009, 1010, 1015, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "elasticnet": [2, 48, 51, 204, 214, 288, 293, 374, 393, 399, 419, 652, 657, 662, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 990, 1008, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1053], "prior": [2, 44, 48, 58, 84, 85, 95, 103, 104, 105, 126, 178, 179, 185, 191, 192, 197, 202, 204, 207, 265, 267, 271, 272, 280, 291, 310, 387, 389, 391, 401, 405, 406, 414, 417, 419, 421, 424, 470, 528, 541, 553, 554, 555, 556, 564, 616, 618, 619, 620, 624, 627, 628, 635, 649, 650, 651, 652, 656, 657, 659, 660, 661, 665, 666, 667, 677, 683, 686, 721, 801, 841, 842, 843, 844, 845, 866, 867, 881, 908, 911, 961, 983, 986, 988, 990, 993, 994, 996, 1002, 1010, 1011, 1015, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1051], "elasticnetcv": [2, 207, 401, 406, 651, 657, 665, 666, 667, 668, 686, 990, 1035, 1038, 1046, 1048, 1049, 1052, 1053], "elast": [2, 25, 192, 201, 207, 210, 214, 234, 254, 257, 293, 476, 477, 483, 506, 529, 651, 652, 657, 662, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 689, 983, 994, 1008, 1015, 1016, 1030, 1035, 1040, 1044, 1045], "net": [2, 25, 70, 192, 201, 207, 210, 214, 234, 254, 257, 293, 393, 418, 476, 477, 483, 506, 529, 562, 563, 564, 565, 569, 570, 571, 651, 652, 657, 662, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 689, 862, 914, 915, 916, 917, 983, 994, 999, 1008, 1015, 1016, 1018, 1030, 1035, 1040, 1044, 1045, 1047], "iter": [2, 49, 56, 58, 70, 84, 109, 118, 128, 131, 142, 145, 148, 151, 153, 154, 156, 157, 158, 177, 188, 190, 192, 202, 203, 231, 238, 268, 269, 273, 275, 288, 291, 315, 317, 318, 322, 331, 339, 341, 342, 349, 387, 389, 393, 395, 396, 400, 401, 410, 414, 417, 419, 421, 423, 426, 442, 445, 446, 448, 450, 452, 453, 454, 457, 459, 464, 466, 467, 468, 476, 477, 483, 487, 488, 489, 520, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 564, 565, 566, 567, 569, 572, 573, 586, 587, 593, 594, 596, 598, 599, 607, 615, 632, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 840, 855, 862, 863, 864, 865, 866, 870, 877, 879, 881, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 921, 942, 943, 949, 950, 951, 952, 960, 984, 990, 991, 993, 994, 997, 998, 999, 1007, 1008, 1009, 1010, 1014, 1015, 1018, 1023, 1027, 1028, 1030, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "along": [2, 53, 55, 94, 97, 104, 121, 149, 155, 158, 210, 223, 255, 257, 284, 329, 362, 363, 370, 382, 387, 391, 393, 395, 396, 401, 405, 406, 409, 412, 419, 421, 422, 423, 426, 538, 555, 592, 616, 617, 635, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 681, 683, 686, 687, 688, 689, 690, 691, 783, 784, 796, 803, 817, 875, 876, 879, 880, 883, 884, 885, 886, 891, 892, 893, 895, 896, 897, 922, 945, 969, 975, 983, 990, 997, 1004, 1007, 1018, 1035, 1040, 1041, 1043, 1047, 1048], "angl": [2, 55, 73, 131, 177, 266, 267, 268, 271, 272, 384, 419, 536, 542, 544, 547, 548, 550, 551, 553, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 683, 687, 688, 689, 690, 691, 697, 991, 992, 1016, 1030, 1035], "larscv": [2, 406, 655, 670, 687, 688, 1042, 1048, 1052], "lasso": [2, 44, 58, 104, 137, 163, 168, 192, 195, 201, 204, 214, 216, 222, 228, 231, 254, 271, 293, 332, 336, 357, 374, 399, 416, 417, 419, 421, 422, 423, 476, 477, 483, 506, 529, 536, 542, 544, 547, 548, 550, 551, 553, 602, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 675, 677, 683, 686, 687, 688, 689, 690, 691, 726, 727, 728, 827, 828, 829, 867, 886, 983, 994, 1008, 1015, 1016, 1023, 1026, 1030, 1035, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1053], "lassocv": [2, 55, 163, 168, 195, 207, 212, 406, 421, 423, 656, 657, 659, 660, 661, 668, 689, 990, 1023, 1035, 1038, 1042, 1045, 1046, 1048, 1049, 1052, 1053], "lassolar": [2, 656, 657, 658, 660, 661, 668, 669, 670, 687, 688, 689, 990, 1026, 1035, 1036, 1038, 1042, 1045, 1046, 1048], "lassolarscv": [2, 212, 406, 423, 657, 658, 659, 661, 668, 670, 687, 688, 689, 990, 1035, 1042, 1048, 1052], "lassolars": [2, 211, 212, 423, 656, 659, 660, 990, 1035, 1042, 1044, 1048, 1049], "bic": [2, 168, 192, 201, 207, 209, 211, 217, 231, 423, 506, 656, 658, 659, 660, 661, 802, 867, 886, 983, 993, 1015, 1035, 1042, 1048, 1049], "aic": [2, 168, 192, 201, 207, 209, 211, 217, 231, 271, 506, 656, 658, 659, 660, 661, 802, 867, 886, 983, 1015, 1035, 1042, 1048, 1049], "orthogonalmatchingpursuit": [2, 222, 670, 690, 691, 990, 1035, 1037, 1040, 1043, 1048, 1053], "orthogon": [2, 37, 129, 130, 131, 137, 192, 201, 293, 419, 531, 536, 542, 544, 547, 548, 553, 669, 670, 690, 691, 1006, 1015, 1016, 1030, 1035], "match": [2, 45, 61, 75, 128, 129, 131, 134, 137, 148, 192, 200, 201, 223, 245, 253, 260, 293, 353, 363, 382, 385, 389, 391, 414, 419, 421, 422, 435, 454, 469, 471, 513, 514, 520, 531, 536, 542, 547, 553, 556, 572, 573, 577, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 663, 669, 670, 690, 691, 704, 708, 709, 710, 718, 720, 724, 738, 782, 783, 784, 790, 846, 847, 851, 855, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 906, 913, 919, 930, 962, 991, 993, 994, 996, 997, 1015, 1016, 1019, 1028, 1030, 1035, 1041, 1042, 1043, 1045, 1047, 1048, 1051], "pursuit": [2, 129, 131, 137, 192, 201, 293, 419, 479, 531, 536, 542, 547, 553, 669, 670, 690, 691, 1015, 1016, 1030, 1035], "omp": [2, 131, 137, 222, 419, 536, 542, 547, 553, 669, 670, 690, 691, 1016, 1030, 1035, 1043], "orthogonalmatchingpursuitcv": [2, 222, 406, 669, 1037, 1048, 1052], "ardregress": [2, 202, 207, 650, 935, 990, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052], "bayesian": [2, 48, 67, 92, 103, 126, 191, 192, 201, 207, 211, 224, 229, 265, 267, 271, 272, 283, 291, 294, 305, 310, 321, 324, 325, 419, 442, 529, 533, 537, 616, 649, 650, 661, 662, 801, 802, 867, 869, 881, 886, 983, 1013, 1015, 1016, 1029, 1030, 1041, 1048], "ard": [2, 202, 649, 650], "bayesianridg": [2, 92, 190, 202, 203, 207, 331, 632, 649, 990, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "multitaskelasticnet": [2, 651, 652, 657, 666, 667, 668, 686, 990, 1035, 1042, 1043, 1046, 1048], "multi": [2, 52, 70, 125, 141, 143, 161, 164, 166, 170, 181, 192, 201, 207, 209, 210, 212, 215, 222, 230, 239, 242, 245, 249, 250, 258, 261, 273, 277, 289, 299, 314, 321, 322, 323, 329, 334, 343, 345, 354, 359, 361, 364, 365, 366, 367, 369, 375, 382, 384, 389, 390, 396, 401, 405, 414, 421, 422, 424, 431, 442, 457, 467, 474, 479, 500, 501, 509, 510, 515, 519, 520, 524, 525, 527, 546, 554, 555, 556, 558, 560, 562, 563, 564, 566, 569, 570, 572, 574, 615, 636, 638, 648, 651, 652, 657, 658, 662, 663, 665, 666, 667, 668, 671, 673, 677, 678, 679, 680, 681, 686, 689, 695, 708, 718, 725, 738, 744, 746, 787, 803, 817, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 853, 854, 856, 862, 863, 864, 867, 873, 886, 890, 901, 902, 906, 908, 911, 914, 915, 916, 918, 919, 920, 926, 929, 932, 983, 995, 997, 1001, 1004, 1008, 1013, 1014, 1015, 1016, 1019, 1025, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1053], "task": [2, 38, 45, 48, 131, 149, 150, 156, 158, 175, 176, 187, 192, 201, 207, 209, 210, 212, 222, 223, 239, 243, 260, 277, 299, 353, 363, 374, 376, 382, 384, 385, 386, 387, 391, 392, 393, 396, 399, 400, 401, 419, 421, 422, 423, 424, 453, 466, 498, 510, 520, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 637, 638, 651, 652, 657, 658, 665, 666, 667, 668, 679, 686, 689, 731, 733, 734, 758, 786, 788, 791, 793, 804, 808, 821, 826, 960, 961, 991, 994, 995, 996, 997, 1005, 1007, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1026, 1027, 1028, 1030, 1035, 1040, 1044, 1050], "mix": [2, 45, 100, 106, 107, 129, 130, 152, 192, 223, 252, 262, 264, 281, 320, 326, 381, 389, 399, 401, 415, 419, 426, 469, 471, 472, 501, 538, 543, 545, 552, 605, 609, 635, 651, 652, 657, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 803, 817, 832, 866, 879, 880, 886, 887, 958, 965, 968, 990, 999, 1015, 1027, 1047, 1049, 1050], "norm": [2, 53, 55, 56, 58, 69, 73, 78, 92, 131, 182, 185, 202, 207, 209, 214, 246, 266, 267, 268, 270, 272, 277, 281, 305, 320, 349, 362, 393, 396, 401, 414, 422, 423, 447, 448, 452, 464, 465, 469, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 494, 536, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 594, 595, 596, 602, 648, 651, 652, 657, 658, 662, 663, 664, 665, 666, 667, 668, 669, 677, 679, 681, 683, 686, 689, 690, 691, 695, 697, 698, 699, 774, 843, 878, 893, 906, 908, 911, 976, 977, 987, 990, 992, 994, 1004, 1008, 1038, 1040, 1042, 1046], "multitaskelasticnetcv": [2, 406, 651, 652, 657, 665, 667, 668, 686, 990, 1038, 1045, 1046, 1048, 1052], "multitasklasso": [2, 217, 657, 665, 668, 990, 1035, 1043, 1046, 1048], "multitasklassocv": [2, 406, 666, 667, 1038, 1045, 1046, 1048, 1052], "huberregressor": [2, 92, 179, 192, 201, 221, 227, 228, 229, 327, 529, 675, 676, 677, 683, 684, 990, 1015, 1041, 1042, 1043, 1044], "quantileregressor": [2, 332, 990, 994, 1048, 1049, 1050], "condit": [2, 45, 53, 54, 65, 67, 118, 150, 155, 192, 193, 195, 212, 225, 228, 241, 257, 261, 283, 332, 369, 393, 399, 404, 412, 413, 414, 416, 419, 421, 423, 456, 469, 476, 477, 478, 483, 501, 518, 528, 529, 541, 544, 545, 546, 548, 550, 552, 554, 555, 567, 632, 637, 638, 648, 655, 656, 657, 659, 660, 661, 675, 677, 678, 679, 680, 687, 688, 692, 702, 717, 722, 723, 740, 741, 799, 841, 842, 843, 844, 845, 864, 867, 870, 879, 880, 883, 887, 943, 966, 988, 990, 991, 992, 994, 996, 997, 999, 1004, 1010, 1013, 1015, 1026, 1030, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1049, 1050, 1051], "ransacregressor": [2, 226, 229, 240, 406, 654, 683, 684, 990, 1038, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1053], "ransac": [2, 192, 201, 229, 240, 529, 654, 662, 676, 683, 684, 1015], "consensu": [2, 61, 62, 75, 386, 387, 402, 412, 414, 654, 676, 683, 684, 724, 994], "theilsenregressor": [2, 229, 240, 654, 676, 683, 990, 1039, 1047, 1049], "theil": [2, 192, 201, 226, 229, 320, 654, 662, 676, 683, 684, 1015], "sen": [2, 192, 201, 226, 229, 320, 654, 662, 676, 683, 684, 1015], "gammaregressor": [2, 241, 330, 333, 685, 990, 1046, 1049, 1050], "gamma": [2, 45, 46, 47, 48, 50, 52, 57, 70, 71, 133, 164, 170, 200, 237, 250, 255, 256, 278, 280, 282, 285, 291, 295, 331, 338, 339, 341, 343, 346, 348, 349, 352, 353, 355, 356, 359, 417, 419, 424, 457, 540, 567, 624, 625, 644, 645, 646, 648, 649, 650, 653, 685, 690, 696, 728, 751, 756, 763, 770, 779, 780, 781, 801, 814, 817, 901, 902, 903, 908, 909, 910, 911, 912, 983, 986, 989, 990, 992, 1007, 1009, 1019, 1023, 1024, 1026, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1049, 1050, 1051], "poissonregressor": [2, 223, 241, 330, 333, 653, 685, 990, 1046, 1049, 1050], "poisson": [2, 45, 54, 192, 201, 258, 383, 421, 469, 470, 501, 528, 557, 563, 567, 570, 653, 674, 677, 685, 711, 728, 749, 753, 754, 756, 832, 866, 867, 870, 871, 879, 880, 881, 886, 915, 917, 947, 990, 1010, 1015, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "tweedieregressor": [2, 45, 330, 333, 653, 674, 990, 1046, 1049, 1050], "tweedi": [2, 192, 201, 223, 469, 501, 557, 653, 674, 685, 711, 728, 749, 751, 753, 754, 756, 832, 867, 870, 871, 879, 886, 990, 1015, 1045, 1046, 1048], "passiveaggressiveregressor": [2, 376, 990, 1036, 1039, 1042, 1043, 1046, 1048, 1053], "enet_path": [2, 208, 401, 651, 652, 657, 665, 666, 667, 1037, 1039, 1048], "coordin": [2, 52, 53, 55, 92, 133, 162, 183, 208, 243, 281, 313, 374, 382, 419, 424, 448, 452, 453, 454, 466, 476, 477, 483, 536, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 555, 619, 651, 652, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 686, 687, 688, 689, 693, 694, 695, 698, 699, 711, 768, 773, 906, 990, 991, 1009, 1026, 1035, 1038, 1039, 1040, 1044, 1046, 1048, 1049, 1050], "lars_path": [2, 210, 396, 536, 542, 544, 547, 548, 550, 551, 553, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 688, 689, 690, 691, 990, 1035, 1037, 1040, 1044, 1046], "lars_path_gram": [2, 687, 990, 1044], "suffici": [2, 67, 93, 163, 231, 294, 349, 374, 401, 414, 423, 537, 662, 687, 688, 822, 823, 995, 997, 1014, 1044, 1050, 1051], "lasso_path": [2, 208, 656, 657, 658, 659, 660, 661, 668, 687, 688, 990, 1035, 1037, 1039, 1048], "orthogonal_mp": [2, 553, 669, 670, 691, 990], "orthogonal_mp_gram": [2, 669, 670, 690, 1049], "gram": [2, 192, 201, 257, 389, 419, 422, 494, 529, 553, 593, 594, 595, 596, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 686, 687, 688, 689, 690, 691, 771, 983, 1004, 1009, 1015, 1028, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1049], "ridge_regress": [2, 1043, 1044, 1050], "equat": [2, 67, 357, 387, 414, 419, 421, 562, 563, 564, 565, 569, 570, 571, 595, 632, 663, 664, 687, 688, 692, 767, 886, 914, 915, 916, 917, 984, 991, 994, 999, 1043], "isomap": [2, 53, 90, 147, 192, 242, 245, 247, 254, 309, 310, 329, 333, 421, 507, 549, 554, 571, 694, 695, 696, 697, 855, 867, 876, 899, 997, 1015, 1029, 1030, 1043, 1045, 1048, 1049, 1050, 1051, 1052], "embed": [2, 26, 37, 74, 77, 82, 84, 93, 94, 100, 123, 147, 175, 179, 192, 242, 245, 247, 249, 300, 309, 393, 401, 414, 446, 457, 467, 494, 507, 549, 554, 571, 587, 644, 693, 694, 695, 696, 697, 698, 699, 700, 701, 855, 867, 876, 898, 899, 900, 986, 997, 1000, 1006, 1011, 1013, 1015, 1029, 1030, 1035, 1036, 1046, 1047, 1049], "manifold": [2, 53, 77, 90, 105, 147, 246, 247, 248, 254, 300, 309, 310, 329, 333, 334, 340, 380, 401, 414, 419, 421, 507, 530, 535, 549, 554, 571, 693, 694, 695, 696, 697, 698, 699, 700, 701, 855, 867, 876, 899, 929, 997, 1015, 1029, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "locallylinearembed": [2, 53, 243, 244, 245, 333, 693, 695, 697, 991, 997, 1040, 1041, 1049, 1050, 1051], "local": [2, 45, 50, 53, 61, 77, 90, 95, 99, 128, 131, 147, 148, 160, 177, 184, 185, 192, 196, 224, 237, 242, 245, 247, 250, 254, 260, 301, 309, 310, 348, 367, 368, 375, 384, 385, 387, 391, 393, 395, 405, 414, 419, 421, 422, 424, 452, 457, 467, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 507, 543, 545, 549, 552, 554, 564, 565, 568, 571, 615, 616, 693, 694, 695, 696, 697, 698, 700, 701, 762, 763, 849, 852, 855, 857, 867, 876, 899, 902, 910, 960, 962, 992, 993, 997, 998, 1010, 1015, 1017, 1027, 1029, 1030, 1039, 1043, 1047, 1050], "md": [2, 243, 244, 245, 246, 391, 693, 697, 699, 1029, 1030, 1035, 1047, 1050], "multidimension": [2, 417, 693, 695, 697, 699, 991, 997], "scale": [2, 36, 45, 46, 53, 65, 67, 75, 78, 81, 84, 85, 94, 96, 99, 108, 109, 115, 118, 121, 130, 133, 153, 160, 177, 179, 180, 181, 184, 185, 186, 188, 192, 196, 200, 203, 204, 211, 214, 223, 225, 227, 237, 238, 239, 241, 242, 245, 250, 256, 260, 271, 277, 280, 281, 282, 283, 287, 303, 305, 316, 317, 318, 319, 320, 330, 333, 335, 336, 343, 344, 346, 349, 353, 370, 373, 374, 379, 380, 381, 384, 387, 392, 396, 399, 400, 401, 414, 415, 419, 421, 422, 423, 424, 451, 452, 455, 456, 462, 469, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 506, 515, 519, 520, 529, 539, 543, 545, 546, 552, 554, 555, 566, 567, 587, 595, 596, 602, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 646, 649, 650, 651, 652, 654, 657, 663, 664, 665, 666, 667, 677, 679, 681, 682, 683, 686, 692, 693, 694, 695, 697, 699, 704, 708, 721, 745, 751, 761, 763, 773, 779, 781, 809, 817, 820, 832, 833, 834, 846, 847, 848, 863, 864, 867, 870, 875, 876, 878, 881, 883, 884, 886, 891, 892, 893, 895, 896, 898, 899, 906, 907, 908, 909, 910, 911, 912, 969, 970, 971, 972, 975, 983, 986, 987, 990, 994, 995, 996, 997, 998, 1002, 1008, 1009, 1014, 1015, 1018, 1019, 1026, 1027, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "spectralembed": [2, 90, 243, 244, 245, 693, 694, 695, 697, 991, 1036, 1041, 1045, 1049, 1050, 1052], "tsne": [2, 192, 243, 244, 245, 247, 248, 301, 302, 333, 401, 428, 438, 501, 693, 694, 695, 850, 854, 867, 968, 991, 997, 1015, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "locally_linear_embed": [2, 247, 991], "smacof": [2, 695, 1050], "spectral_embed": [2, 401, 991, 1036, 1039, 1041, 1043, 1045, 1048, 1049, 1050, 1052], "eigenvector": [2, 44, 84, 121, 124, 192, 266, 414, 457, 467, 539, 540, 546, 555, 693, 694, 696, 700, 991, 1015, 1035, 1039, 1049], "trustworthi": [2, 333, 1043, 1044, 1049, 1050, 1051, 1052], "extent": [2, 50, 96, 181, 182, 183, 254, 355, 358, 445, 540, 701, 801, 994], "retain": [2, 202, 401, 414, 417, 418, 422, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 499, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 700, 701, 804, 805, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 879, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 1007, 1035], "check_scor": [2, 401, 1053], "scorer": [2, 158, 163, 241, 284, 336, 389, 401, 406, 418, 421, 423, 566, 567, 599, 607, 639, 664, 678, 680, 716, 736, 737, 746, 803, 806, 807, 809, 817, 825, 828, 829, 830, 833, 952, 983, 990, 994, 1002, 1014, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "option": [2, 45, 69, 84, 90, 135, 148, 156, 185, 191, 204, 207, 224, 260, 283, 289, 330, 361, 365, 370, 376, 381, 382, 383, 385, 387, 388, 390, 392, 393, 395, 396, 399, 401, 402, 405, 409, 414, 415, 417, 418, 419, 421, 422, 425, 438, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 692, 693, 694, 695, 697, 699, 700, 716, 718, 722, 733, 734, 739, 740, 741, 761, 762, 763, 768, 770, 771, 775, 778, 779, 780, 781, 782, 785, 787, 788, 791, 796, 797, 799, 804, 805, 806, 807, 809, 810, 812, 821, 825, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 895, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 933, 980, 983, 984, 990, 993, 994, 997, 1004, 1007, 1009, 1010, 1014, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "get_scor": [2, 336, 401, 737, 1042, 1051], "get": [2, 3, 45, 46, 50, 53, 57, 58, 60, 75, 86, 90, 94, 129, 133, 155, 165, 174, 177, 179, 184, 185, 190, 195, 196, 197, 198, 216, 225, 238, 241, 243, 258, 278, 281, 282, 284, 288, 291, 297, 300, 305, 313, 321, 329, 336, 339, 342, 346, 349, 351, 354, 359, 361, 363, 365, 375, 380, 381, 382, 385, 387, 388, 389, 392, 393, 394, 395, 401, 405, 409, 411, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 428, 429, 430, 435, 437, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 467, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 704, 726, 727, 728, 730, 736, 737, 746, 760, 767, 768, 773, 789, 792, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 934, 935, 936, 942, 943, 953, 983, 989, 990, 991, 993, 994, 1004, 1007, 1008, 1009, 1010, 1014, 1023, 1026, 1027, 1028, 1032, 1035, 1038, 1041, 1043, 1046, 1048, 1049, 1052], "string": [2, 49, 108, 151, 187, 241, 252, 284, 332, 363, 374, 381, 382, 387, 388, 389, 393, 401, 409, 415, 418, 421, 422, 423, 425, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 494, 495, 501, 510, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 622, 625, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 704, 714, 716, 724, 736, 766, 769, 775, 778, 782, 783, 784, 785, 796, 797, 801, 802, 803, 806, 807, 809, 817, 825, 829, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 924, 926, 927, 934, 935, 936, 952, 958, 962, 978, 979, 983, 984, 994, 1007, 1009, 1019, 1026, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "get_scorer_nam": [2, 736, 994, 1049, 1052], "make_scor": [2, 54, 155, 158, 284, 406, 418, 803, 828, 829, 994, 1044, 1052], "accuracy_scor": [2, 69, 142, 180, 284, 325, 341, 361, 370, 400, 406, 411, 431, 562, 569, 713, 733, 734, 738, 742, 787, 788, 791, 798, 800, 936, 983, 994, 1036, 1037, 1038, 1047, 1052], "accuraci": [2, 30, 37, 45, 47, 48, 49, 57, 65, 69, 70, 71, 72, 107, 108, 109, 110, 142, 148, 149, 153, 154, 161, 173, 174, 176, 180, 198, 200, 223, 227, 231, 238, 239, 268, 278, 279, 280, 281, 282, 284, 286, 295, 297, 302, 308, 309, 310, 318, 322, 325, 335, 338, 339, 341, 349, 352, 353, 357, 370, 374, 389, 400, 401, 414, 418, 421, 422, 423, 431, 442, 454, 474, 476, 477, 483, 537, 539, 546, 554, 555, 556, 558, 560, 562, 563, 564, 566, 569, 570, 572, 574, 615, 639, 663, 664, 671, 673, 676, 679, 680, 681, 697, 702, 708, 713, 716, 718, 723, 736, 737, 738, 742, 747, 758, 767, 791, 798, 800, 830, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 848, 853, 855, 856, 863, 901, 902, 906, 908, 911, 914, 916, 942, 943, 983, 988, 989, 990, 991, 995, 997, 998, 1002, 1006, 1008, 1010, 1023, 1028, 1043, 1044, 1052], "auc": [2, 52, 65, 177, 223, 241, 260, 277, 280, 284, 287, 289, 290, 336, 413, 707, 713, 792, 994, 1040, 1043, 1047], "area": [2, 52, 54, 159, 177, 223, 241, 260, 277, 280, 287, 289, 290, 349, 353, 354, 358, 384, 387, 391, 399, 414, 422, 707, 711, 712, 713, 746, 792, 793, 991, 994, 997, 1012, 1037], "under": [2, 45, 48, 52, 64, 65, 67, 79, 105, 114, 115, 135, 152, 155, 196, 223, 250, 260, 280, 287, 289, 290, 321, 335, 381, 387, 389, 391, 393, 395, 401, 405, 409, 413, 414, 416, 418, 419, 422, 423, 451, 456, 458, 475, 476, 477, 478, 479, 480, 481, 537, 544, 546, 548, 659, 660, 661, 707, 711, 712, 713, 720, 746, 758, 792, 793, 801, 802, 851, 950, 990, 991, 992, 994, 997, 1004, 1008, 1009, 1010, 1013, 1014, 1028, 1035, 1037, 1038, 1040, 1043, 1047], "trapezoid": [2, 287, 711, 712, 994], "average_precision_scor": [2, 287, 705, 711, 713, 786, 792, 994, 1035, 1038, 1042, 1043, 1049, 1051], "averag": [2, 45, 54, 65, 67, 75, 77, 78, 82, 90, 98, 100, 145, 146, 151, 155, 158, 159, 164, 165, 166, 177, 184, 196, 204, 212, 223, 230, 241, 260, 283, 285, 288, 290, 299, 320, 329, 335, 342, 361, 370, 374, 382, 384, 389, 399, 412, 413, 416, 418, 422, 423, 425, 426, 442, 443, 446, 449, 450, 451, 452, 454, 495, 498, 499, 528, 536, 537, 538, 542, 543, 545, 546, 550, 551, 552, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 575, 592, 599, 637, 638, 653, 663, 664, 671, 672, 674, 677, 679, 681, 682, 683, 685, 692, 705, 708, 709, 711, 712, 713, 718, 725, 726, 727, 729, 730, 732, 733, 734, 738, 739, 740, 742, 743, 744, 747, 749, 750, 752, 754, 755, 757, 760, 768, 785, 786, 787, 788, 789, 791, 792, 794, 795, 799, 800, 801, 802, 830, 833, 852, 872, 887, 980, 984, 989, 990, 995, 998, 1000, 1001, 1008, 1009, 1010, 1026, 1028, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "precis": [2, 8, 47, 54, 65, 71, 107, 112, 118, 128, 174, 185, 186, 192, 200, 251, 273, 274, 278, 318, 320, 338, 339, 387, 389, 401, 412, 413, 414, 416, 419, 421, 448, 474, 475, 476, 477, 478, 479, 480, 481, 483, 509, 528, 537, 539, 546, 549, 649, 650, 651, 653, 655, 656, 657, 659, 660, 661, 674, 677, 679, 685, 687, 688, 692, 704, 705, 711, 712, 713, 718, 731, 733, 734, 735, 743, 767, 786, 787, 788, 791, 792, 801, 802, 832, 835, 846, 847, 852, 867, 886, 890, 906, 911, 918, 920, 943, 988, 990, 997, 998, 1009, 1015, 1024, 1028, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "ap": [2, 287, 712, 713, 994], "balanced_accuracy_scor": [2, 708, 791, 994, 1043], "balanc": [2, 45, 47, 54, 67, 91, 104, 109, 142, 148, 153, 176, 192, 227, 228, 273, 278, 281, 283, 284, 320, 376, 399, 401, 413, 418, 419, 421, 507, 520, 539, 545, 546, 552, 562, 566, 569, 645, 663, 664, 671, 673, 679, 680, 681, 708, 713, 733, 747, 786, 791, 803, 804, 821, 866, 906, 908, 911, 914, 916, 931, 932, 983, 1009, 1010, 1015, 1024, 1035, 1037, 1040, 1041, 1044, 1045, 1049], "brier_score_loss": [2, 64, 65, 413, 994, 1043, 1044, 1045, 1053], "brier": [2, 64, 65, 67, 413, 714], "class_likelihood_ratio": [2, 283, 994, 1050], "ratio": [2, 48, 91, 104, 110, 136, 192, 254, 256, 269, 273, 374, 387, 414, 416, 418, 421, 455, 461, 498, 499, 520, 546, 554, 555, 556, 636, 663, 715, 717, 721, 729, 734, 740, 743, 786, 787, 788, 791, 799, 829, 832, 852, 899, 963, 988, 1000, 1010, 1015, 1024, 1050, 1052], "classification_report": [2, 47, 71, 107, 174, 278, 318, 338, 339, 994, 1024, 1028, 1037, 1039, 1043, 1044, 1045, 1047, 1051, 1052], "show": [2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 187, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 365, 366, 367, 368, 369, 375, 376, 387, 393, 399, 400, 405, 406, 412, 413, 416, 418, 419, 420, 421, 423, 424, 443, 507, 564, 598, 599, 636, 637, 702, 703, 705, 706, 707, 718, 809, 825, 848, 866, 918, 919, 920, 983, 986, 988, 989, 991, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1004, 1008, 1009, 1014, 1023, 1024, 1028, 1037, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1052], "main": [2, 37, 50, 57, 71, 100, 121, 132, 152, 192, 250, 289, 299, 328, 357, 361, 374, 375, 376, 380, 385, 387, 389, 391, 393, 395, 399, 400, 401, 404, 405, 413, 414, 419, 421, 422, 424, 508, 530, 535, 554, 555, 630, 718, 836, 906, 907, 983, 991, 993, 994, 1001, 1006, 1014, 1017, 1025, 1028, 1035, 1038, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "cohen_kappa_scor": [2, 994, 1040, 1042], "cohen": [2, 721, 1043], "kappa": [2, 541, 721], "measur": [2, 27, 45, 48, 49, 51, 52, 54, 60, 65, 75, 76, 87, 96, 98, 99, 129, 145, 146, 155, 159, 166, 177, 179, 184, 192, 194, 195, 196, 200, 212, 217, 222, 223, 227, 229, 241, 273, 278, 280, 286, 287, 293, 325, 353, 361, 362, 374, 382, 384, 389, 393, 401, 412, 416, 418, 419, 420, 421, 422, 454, 457, 467, 503, 520, 543, 545, 552, 556, 562, 563, 564, 565, 568, 569, 570, 609, 612, 613, 616, 632, 636, 663, 695, 697, 703, 707, 709, 710, 712, 714, 717, 718, 721, 722, 725, 729, 730, 731, 733, 735, 740, 741, 743, 744, 747, 751, 759, 760, 761, 786, 787, 788, 790, 791, 792, 793, 796, 799, 827, 829, 832, 852, 883, 895, 914, 915, 916, 917, 984, 990, 992, 997, 999, 1000, 1002, 1008, 1010, 1015, 1023, 1026, 1035, 1038, 1040, 1041, 1043, 1045], "inter": [2, 78, 149, 370, 421, 721, 949], "annot": [2, 45, 50, 66, 165, 200, 244, 284, 287, 361, 387, 388, 389, 414, 721, 920, 994, 1010, 1044], "agreement": [2, 414, 709, 721, 759, 761, 799, 994], "confusion_matrix": [2, 71, 251, 274, 338, 339, 702, 718, 758, 829, 994, 1028, 1036, 1041, 1042, 1045, 1046, 1048, 1052], "confus": [2, 71, 192, 251, 273, 289, 338, 339, 361, 401, 473, 509, 636, 657, 702, 718, 720, 723, 733, 734, 742, 758, 788, 791, 832, 904, 911, 1015, 1028, 1035, 1036, 1040, 1044, 1045, 1047, 1048, 1049, 1050], "dcg_score": [2, 760, 994, 1042, 1045], "discount": [2, 382, 414, 730, 760, 1042, 1045], "cumul": [2, 154, 223, 241, 414, 730, 739, 760, 883, 895, 1004, 1008, 1042, 1044, 1045], "gain": [2, 91, 158, 245, 287, 300, 302, 336, 339, 361, 362, 369, 386, 393, 395, 421, 501, 537, 562, 566, 567, 569, 730, 760, 801, 802, 835, 914, 916, 995, 999, 1007, 1010, 1038, 1042, 1045], "det_curv": [2, 277, 703, 786, 793, 994, 1047, 1048, 1053], "differ": [2, 25, 45, 46, 48, 51, 53, 55, 56, 57, 61, 64, 67, 69, 70, 73, 74, 75, 77, 79, 80, 81, 83, 84, 85, 87, 90, 91, 93, 94, 95, 96, 98, 102, 103, 104, 105, 107, 108, 109, 111, 116, 120, 121, 124, 125, 126, 128, 130, 131, 133, 135, 136, 137, 142, 145, 147, 148, 151, 152, 153, 155, 157, 158, 163, 164, 165, 166, 168, 170, 172, 177, 178, 179, 180, 181, 184, 185, 186, 190, 191, 192, 194, 195, 197, 200, 202, 203, 206, 209, 210, 211, 212, 214, 220, 223, 224, 225, 227, 228, 229, 230, 231, 240, 241, 243, 244, 245, 246, 248, 250, 252, 255, 256, 257, 260, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 294, 295, 297, 299, 300, 303, 306, 307, 309, 315, 316, 319, 321, 322, 324, 325, 329, 344, 345, 347, 348, 349, 351, 352, 357, 358, 361, 362, 363, 370, 374, 375, 376, 381, 382, 384, 385, 386, 387, 390, 392, 394, 396, 400, 401, 405, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 439, 442, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 467, 469, 480, 483, 495, 498, 499, 501, 508, 509, 513, 514, 517, 519, 527, 542, 543, 544, 545, 551, 552, 554, 555, 560, 561, 568, 586, 587, 593, 594, 595, 596, 599, 616, 618, 619, 620, 624, 627, 628, 632, 636, 637, 638, 639, 643, 648, 649, 652, 654, 656, 658, 660, 663, 666, 671, 672, 673, 677, 679, 681, 682, 683, 685, 695, 697, 699, 703, 705, 706, 709, 710, 711, 712, 714, 720, 722, 723, 731, 732, 733, 734, 735, 738, 739, 741, 747, 761, 762, 763, 765, 782, 786, 787, 788, 790, 791, 793, 796, 797, 799, 802, 803, 805, 806, 807, 808, 809, 812, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 830, 833, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 856, 859, 862, 866, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 891, 892, 893, 894, 895, 896, 897, 906, 907, 908, 911, 914, 915, 916, 917, 951, 958, 983, 984, 986, 987, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1027, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "threshold": [2, 52, 65, 80, 103, 131, 137, 177, 192, 196, 198, 218, 251, 253, 277, 278, 279, 287, 299, 335, 336, 337, 366, 369, 401, 414, 419, 421, 423, 446, 447, 450, 451, 474, 505, 513, 514, 536, 542, 547, 553, 554, 555, 568, 593, 596, 598, 602, 607, 608, 649, 672, 676, 681, 683, 697, 703, 705, 707, 708, 711, 712, 725, 730, 731, 743, 744, 760, 786, 792, 793, 798, 801, 802, 822, 841, 852, 853, 869, 871, 873, 889, 901, 902, 903, 911, 918, 920, 968, 990, 994, 997, 998, 1000, 1004, 1007, 1009, 1010, 1014, 1015, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053], "f1_score": [2, 65, 287, 342, 382, 742, 994, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1051, 1052], "f1": [2, 47, 65, 71, 107, 174, 278, 318, 338, 339, 342, 418, 718, 733, 734, 742, 787, 994, 995, 1024, 1028, 1039, 1051], "fbeta_scor": [2, 733, 746, 787, 994, 1037, 1038, 1039, 1040, 1045, 1051], "beta": [2, 84, 120, 194, 227, 393, 413, 414, 417, 541, 543, 545, 552, 649, 733, 734, 740, 746, 787, 799, 801, 994, 1026, 1037, 1040, 1042, 1044, 1045], "hamming_loss": [2, 48, 708, 800, 994, 1037, 1041, 1044], "ham": [2, 48, 455, 462, 586, 704, 708, 714, 738, 745, 782, 783, 784, 800, 997], "hinge_loss": [2, 353, 994, 1039, 1047, 1048], "hing": [2, 65, 230, 233, 235, 288, 346, 347, 351, 353, 401, 671, 681, 739, 906, 913, 990, 1008, 1009, 1028], "jaccard_scor": [2, 299, 708, 733, 738, 800, 994, 1044, 1047], "jaccard": [2, 299, 412, 455, 462, 704, 708, 724, 733, 738, 742, 782, 783, 784, 800, 997, 1043, 1044], "similar": [2, 45, 46, 48, 53, 58, 61, 65, 66, 73, 75, 87, 89, 95, 98, 112, 121, 128, 132, 142, 155, 176, 179, 186, 194, 195, 196, 197, 207, 223, 225, 237, 243, 245, 246, 247, 250, 256, 257, 272, 277, 280, 283, 286, 287, 288, 297, 299, 300, 320, 332, 348, 353, 357, 362, 363, 370, 374, 379, 381, 383, 385, 386, 387, 389, 392, 393, 396, 399, 401, 409, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 425, 445, 448, 449, 455, 457, 459, 460, 508, 513, 514, 541, 587, 594, 595, 596, 615, 682, 697, 700, 708, 710, 720, 724, 729, 732, 733, 735, 738, 742, 744, 759, 764, 765, 790, 796, 797, 800, 801, 802, 828, 833, 878, 899, 902, 906, 907, 908, 909, 927, 983, 986, 987, 989, 990, 991, 993, 995, 997, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1019, 1027, 1030, 1035, 1039, 1040, 1041, 1043, 1047, 1048], "coeffici": [2, 25, 48, 51, 76, 87, 96, 98, 114, 115, 118, 128, 131, 168, 174, 179, 192, 193, 194, 201, 205, 207, 208, 209, 210, 214, 216, 217, 218, 219, 220, 221, 225, 226, 238, 241, 264, 317, 327, 331, 332, 333, 353, 357, 361, 362, 363, 374, 383, 387, 389, 401, 404, 416, 417, 419, 423, 424, 427, 437, 457, 470, 472, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 501, 529, 531, 532, 536, 540, 542, 544, 547, 548, 553, 557, 559, 561, 563, 565, 567, 570, 573, 575, 587, 594, 598, 602, 614, 616, 619, 632, 640, 641, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 706, 708, 721, 724, 733, 738, 742, 747, 754, 757, 779, 781, 789, 790, 792, 796, 797, 800, 818, 829, 832, 839, 840, 849, 857, 864, 867, 879, 886, 906, 907, 908, 909, 910, 911, 912, 915, 917, 985, 988, 990, 1008, 1009, 1015, 1026, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052], "log_loss": [2, 65, 66, 154, 157, 180, 325, 342, 361, 401, 413, 421, 562, 564, 566, 569, 651, 663, 681, 914, 916, 983, 990, 994, 1008, 1010, 1037, 1039, 1041, 1049, 1050, 1051, 1052], "log": [2, 45, 61, 65, 66, 67, 114, 128, 142, 153, 155, 163, 173, 177, 180, 181, 183, 184, 185, 188, 208, 211, 212, 216, 223, 228, 233, 241, 254, 256, 270, 310, 325, 361, 382, 384, 385, 387, 391, 395, 396, 401, 412, 413, 414, 415, 416, 419, 421, 422, 424, 453, 456, 465, 470, 475, 476, 477, 478, 479, 480, 481, 537, 541, 546, 554, 555, 556, 558, 560, 562, 564, 567, 569, 595, 596, 598, 599, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 647, 650, 653, 663, 664, 674, 676, 681, 685, 745, 755, 759, 801, 802, 803, 806, 807, 817, 841, 842, 843, 844, 845, 846, 847, 851, 862, 863, 870, 871, 900, 903, 908, 911, 913, 914, 916, 941, 983, 986, 988, 990, 991, 996, 997, 999, 1002, 1004, 1008, 1010, 1013, 1014, 1026, 1037, 1038, 1039, 1044, 1045, 1046, 1049, 1052], "entropi": [2, 52, 67, 262, 292, 313, 331, 338, 339, 370, 382, 414, 421, 426, 503, 538, 562, 569, 612, 613, 663, 722, 740, 741, 745, 799, 914, 916, 990, 991, 994, 998, 1010, 1037, 1039, 1043, 1044, 1049, 1051, 1052], "matthews_corrcoef": [2, 994, 1035, 1041, 1042, 1049], "matthew": [2, 386, 392, 541, 747, 1035, 1038, 1042, 1044, 1048, 1049], "mcc": [2, 747, 994, 1049], "multilabel_confusion_matrix": [2, 718, 733, 734, 742, 788, 791, 994, 1044], "ndcg_score": [2, 730, 994, 1042, 1045, 1050, 1051], "precision_recall_curv": [2, 251, 287, 705, 711, 712, 731, 994, 1036, 1037, 1041, 1048, 1049, 1051, 1053], "recal": [2, 47, 65, 71, 107, 118, 133, 174, 192, 251, 260, 273, 278, 297, 318, 338, 339, 387, 401, 414, 509, 609, 705, 711, 712, 713, 717, 718, 731, 733, 734, 735, 786, 787, 788, 791, 792, 832, 835, 867, 886, 890, 906, 990, 1010, 1015, 1024, 1028, 1038, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "precision_recall_fscore_support": [2, 718, 733, 734, 788, 791, 994, 1039, 1043, 1045, 1051], "precision_scor": [2, 65, 287, 713, 791, 994, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "recall_scor": [2, 65, 287, 418, 713, 788, 994, 1035, 1037, 1038, 1039, 1040, 1045, 1051], "roc_auc_scor": [2, 65, 177, 280, 289, 329, 336, 707, 711, 712, 713, 793, 994, 1037, 1038, 1043, 1045, 1049, 1050], "oper": [2, 19, 55, 60, 177, 187, 192, 251, 256, 263, 273, 275, 277, 287, 341, 363, 374, 375, 384, 385, 387, 390, 393, 399, 401, 402, 405, 409, 411, 418, 419, 421, 422, 423, 427, 453, 466, 473, 480, 487, 488, 489, 490, 509, 538, 539, 546, 556, 557, 571, 577, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 621, 626, 629, 635, 640, 648, 663, 694, 698, 707, 711, 712, 713, 731, 778, 785, 786, 792, 793, 822, 832, 835, 846, 847, 869, 873, 878, 889, 890, 904, 911, 914, 945, 962, 967, 990, 997, 1004, 1009, 1013, 1015, 1018, 1026, 1039, 1041, 1042, 1043, 1045, 1046, 1051], "characterist": [2, 82, 100, 177, 184, 192, 250, 251, 263, 273, 275, 277, 287, 320, 341, 370, 382, 384, 392, 413, 418, 421, 424, 508, 509, 628, 643, 663, 707, 711, 713, 731, 786, 792, 793, 822, 832, 835, 873, 911, 990, 1015], "roc": [2, 52, 65, 147, 177, 192, 249, 251, 260, 261, 273, 275, 282, 287, 336, 341, 394, 413, 418, 509, 515, 569, 663, 707, 711, 712, 713, 731, 746, 786, 792, 793, 822, 832, 835, 873, 911, 1000, 1015, 1032, 1037, 1038, 1040, 1041, 1045, 1047, 1051], "roc_curv": [2, 52, 251, 277, 289, 707, 711, 731, 786, 792, 994, 1035, 1036, 1037, 1040, 1041, 1043, 1048, 1051, 1053], "top_k_accuracy_scor": [2, 994, 1047, 1049], "top": [2, 47, 53, 55, 56, 57, 58, 73, 75, 77, 79, 80, 81, 82, 83, 89, 100, 102, 108, 125, 130, 140, 147, 148, 151, 158, 163, 166, 195, 223, 225, 234, 238, 250, 260, 261, 266, 268, 269, 272, 277, 281, 289, 290, 305, 320, 322, 326, 330, 336, 338, 339, 349, 353, 361, 370, 385, 387, 389, 393, 399, 412, 413, 414, 419, 420, 421, 492, 592, 593, 596, 604, 730, 760, 798, 918, 920, 983, 986, 990, 992, 1002, 1013, 1018, 1024, 1027, 1028, 1049], "zero_one_loss": [2, 387, 411, 708, 738, 994, 1036, 1037, 1038, 1052], "zero": [2, 25, 51, 52, 55, 67, 73, 75, 78, 79, 90, 92, 115, 117, 118, 128, 131, 133, 144, 145, 154, 156, 157, 162, 174, 177, 191, 202, 207, 209, 214, 216, 217, 222, 223, 224, 227, 228, 229, 233, 238, 241, 254, 257, 258, 260, 266, 270, 272, 277, 280, 285, 289, 290, 305, 320, 330, 331, 353, 357, 362, 363, 365, 369, 374, 375, 382, 389, 393, 401, 413, 414, 416, 419, 421, 422, 423, 424, 427, 451, 457, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 492, 502, 513, 514, 528, 531, 532, 536, 537, 540, 542, 543, 544, 545, 547, 548, 552, 553, 557, 562, 563, 564, 565, 566, 567, 569, 570, 571, 586, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 616, 641, 644, 648, 649, 650, 655, 663, 664, 669, 670, 671, 672, 673, 676, 681, 682, 683, 690, 691, 708, 714, 717, 718, 720, 721, 729, 733, 734, 738, 742, 744, 750, 787, 788, 789, 791, 800, 801, 818, 819, 822, 823, 835, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 869, 876, 878, 879, 881, 882, 883, 885, 886, 892, 893, 894, 895, 899, 906, 914, 915, 916, 917, 941, 969, 980, 984, 990, 992, 993, 996, 997, 998, 1004, 1005, 1006, 1008, 1009, 1010, 1019, 1026, 1028, 1035, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "d2_absolute_error_scor": [2, 727, 994, 1049], "fraction": [2, 45, 65, 67, 155, 158, 223, 231, 241, 357, 362, 413, 418, 421, 443, 444, 454, 455, 461, 462, 520, 532, 562, 563, 564, 565, 569, 570, 571, 595, 598, 607, 671, 672, 673, 676, 681, 682, 683, 708, 726, 727, 728, 738, 798, 800, 805, 809, 830, 831, 845, 873, 908, 909, 910, 914, 915, 916, 917, 960, 990, 994, 997, 1001, 1002, 1004, 1009, 1010, 1014, 1036, 1037, 1038, 1049], "absolut": [2, 45, 54, 112, 132, 152, 177, 195, 223, 225, 229, 241, 389, 414, 416, 418, 419, 421, 422, 423, 424, 425, 449, 455, 461, 462, 536, 542, 547, 550, 551, 553, 554, 555, 563, 565, 566, 567, 570, 593, 595, 596, 598, 602, 607, 624, 632, 637, 651, 654, 655, 657, 659, 661, 676, 677, 679, 681, 683, 687, 688, 709, 722, 726, 740, 741, 749, 750, 752, 757, 759, 761, 799, 805, 809, 820, 823, 830, 832, 844, 846, 847, 851, 870, 875, 878, 891, 915, 917, 980, 990, 991, 1004, 1008, 1010, 1026, 1027, 1036, 1041, 1046, 1047, 1048, 1049, 1052], "explain": [2, 45, 46, 53, 67, 94, 110, 120, 121, 136, 155, 179, 184, 185, 196, 197, 223, 241, 250, 257, 272, 290, 293, 326, 361, 362, 375, 385, 387, 391, 399, 409, 411, 417, 419, 424, 498, 526, 529, 539, 546, 549, 554, 630, 653, 661, 674, 685, 726, 727, 728, 732, 789, 990, 997, 1010, 1012, 1013, 1024, 1026, 1027, 1046, 1048, 1049], "d2_pinball_scor": [2, 994, 1049], "pinbal": [2, 54, 155, 158, 332, 567, 675, 727, 752, 990, 1048, 1049], "d2_tweedie_scor": [2, 994, 1048], "devianc": [2, 154, 157, 223, 241, 335, 421, 558, 563, 564, 566, 567, 570, 653, 674, 685, 726, 727, 728, 751, 753, 756, 915, 917, 990, 1010, 1036, 1045, 1046, 1048, 1049, 1051], "explained_variance_scor": [2, 994, 1038, 1042, 1049], "max_error": [2, 994, 1044], "residu": [2, 112, 219, 225, 276, 437, 470, 487, 488, 489, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 676, 677, 678, 679, 683, 684, 690, 691, 706, 748, 789, 839, 840, 849, 857, 864, 907, 909, 912, 915, 917, 990, 994, 1026, 1047, 1048, 1050], "mean_absolute_error": [2, 54, 223, 225, 241, 994, 1036, 1038], "mean_absolute_percentage_error": [2, 54, 152, 994, 1047, 1049], "percentag": [2, 54, 92, 136, 152, 214, 241, 275, 283, 286, 418, 423, 539, 546, 549, 554, 598, 599, 653, 674, 685, 708, 738, 750, 821, 822, 823, 836, 918, 920, 995, 1010, 1037, 1041, 1047, 1048], "mape": [2, 54, 750, 994], "mean_gamma_devi": [2, 994, 1045], "mean_pinball_loss": [2, 54, 155, 158, 332, 990, 994, 1048], "mean_poisson_devi": [2, 223, 994, 1045], "mean_squared_error": [2, 48, 153, 155, 156, 219, 223, 225, 227, 229, 241, 370, 421, 756, 994, 1036, 1038, 1045, 1046, 1052], "mean_squared_log_error": [2, 994, 1042, 1048, 1052], "logarithm": [2, 112, 163, 195, 227, 254, 281, 349, 401, 423, 465, 595, 663, 664, 681, 709, 730, 745, 755, 759, 760, 761, 795, 809, 837, 846, 847, 941, 1010, 1023, 1042], "mean_tweedie_devi": [2, 241, 994, 1045], "median_absolute_error": [2, 112, 195, 994, 1039, 1045, 1047], "median": [2, 45, 54, 75, 108, 112, 116, 117, 155, 190, 191, 195, 225, 229, 240, 252, 260, 320, 330, 332, 333, 382, 416, 421, 423, 445, 459, 463, 466, 479, 557, 559, 563, 570, 602, 632, 635, 640, 675, 676, 684, 726, 757, 853, 884, 896, 915, 917, 984, 1004, 1010, 1038, 1039], "r2_score": [2, 112, 194, 207, 218, 219, 421, 437, 470, 487, 488, 489, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 728, 732, 839, 840, 849, 857, 864, 907, 909, 912, 915, 917, 983, 994, 1036, 1038, 1044, 1048, 1049], "root_mean_squared_error": [2, 54, 158, 754, 994, 1052], "root": [2, 45, 57, 116, 158, 177, 204, 369, 384, 387, 395, 414, 447, 506, 546, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 644, 754, 755, 794, 795, 914, 915, 916, 917, 918, 920, 994, 1000, 1010, 1037, 1043, 1044, 1045, 1046, 1049, 1050], "root_mean_squared_log_error": [2, 755, 994, 1052], "coverage_error": [2, 994, 1039, 1049], "coverag": [2, 52, 54, 155, 158, 223, 241, 313, 382, 390, 411, 503, 632, 725], "label_ranking_average_precision_scor": [2, 994, 1039, 1043, 1044, 1050], "label_ranking_loss": [2, 994, 1040], "adjusted_mutual_info_scor": [2, 75, 76, 87, 96, 414, 710, 720, 737, 759, 761, 790, 994, 1035, 1043, 1047, 1051], "adjust": [2, 45, 50, 74, 76, 87, 96, 114, 142, 155, 172, 192, 227, 250, 255, 263, 281, 297, 329, 342, 357, 362, 394, 414, 415, 419, 421, 422, 529, 558, 559, 562, 564, 566, 567, 569, 663, 664, 671, 673, 679, 680, 681, 709, 710, 713, 719, 720, 759, 761, 790, 799, 841, 842, 844, 845, 876, 898, 899, 906, 907, 908, 911, 914, 916, 932, 993, 994, 998, 1004, 1015, 1026, 1032, 1035, 1041, 1051], "adjusted_rand_scor": [2, 75, 76, 87, 96, 362, 414, 709, 720, 737, 761, 790, 994, 1048], "rand": [2, 55, 64, 75, 76, 77, 78, 82, 87, 96, 100, 135, 145, 160, 162, 172, 202, 207, 245, 246, 250, 256, 257, 294, 312, 330, 331, 336, 342, 343, 356, 362, 367, 368, 396, 406, 549, 709, 710, 720, 761, 785, 790, 898, 899, 901, 902, 903, 1006, 1019, 1035, 1046, 1047], "index": [2, 53, 54, 56, 58, 75, 76, 77, 78, 79, 87, 88, 96, 108, 109, 142, 147, 149, 158, 174, 177, 184, 190, 194, 195, 196, 197, 198, 223, 227, 241, 261, 264, 267, 268, 272, 275, 278, 279, 280, 281, 283, 291, 292, 300, 320, 325, 326, 327, 333, 338, 339, 362, 363, 382, 384, 385, 387, 389, 391, 396, 399, 401, 412, 415, 418, 419, 421, 422, 429, 448, 452, 453, 454, 455, 456, 458, 459, 462, 464, 465, 469, 472, 508, 514, 562, 563, 564, 565, 569, 570, 571, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 622, 637, 638, 645, 702, 709, 710, 717, 721, 723, 735, 742, 761, 783, 784, 790, 792, 798, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 832, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 879, 914, 915, 916, 917, 947, 965, 968, 973, 974, 994, 996, 997, 998, 1008, 1010, 1013, 1026, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "chanc": [2, 74, 76, 87, 142, 172, 192, 198, 223, 231, 238, 241, 280, 286, 289, 290, 326, 357, 362, 370, 386, 414, 418, 705, 707, 709, 710, 713, 721, 759, 761, 790, 799, 831, 994, 1002, 1010, 1015, 1051], "calinski_harabasz_scor": [2, 414, 1043], "calinski": [2, 715, 1041], "harabasz": [2, 715], "contingency_matrix": [2, 414, 759, 1043], "conting": [2, 719, 720, 735, 759, 1041], "describ": [2, 45, 54, 94, 163, 177, 195, 241, 255, 280, 289, 370, 374, 375, 380, 382, 384, 386, 387, 389, 392, 395, 401, 402, 412, 414, 416, 417, 418, 419, 421, 422, 467, 474, 478, 479, 496, 498, 500, 501, 502, 505, 506, 507, 508, 509, 510, 515, 521, 522, 523, 533, 612, 613, 650, 664, 673, 719, 801, 802, 841, 843, 881, 943, 983, 986, 989, 990, 993, 994, 996, 1000, 1008, 1009, 1010, 1017, 1019, 1025, 1026, 1043, 1045], "relationship": [2, 45, 54, 61, 142, 143, 158, 185, 194, 195, 202, 207, 223, 225, 226, 287, 299, 321, 327, 336, 401, 414, 416, 418, 467, 501, 641, 719, 991, 994, 996, 997, 1001, 1002, 1026, 1040], "pair_confusion_matrix": [2, 414, 1047], "aris": [2, 195, 283, 357, 375, 392, 414, 720, 990, 991, 1047], "completeness_scor": [2, 76, 87, 96, 330, 362, 414, 740, 741, 799, 994], "ground": [2, 27, 61, 71, 78, 83, 87, 95, 96, 99, 114, 118, 121, 131, 159, 187, 207, 217, 223, 224, 260, 272, 283, 362, 401, 414, 708, 709, 710, 713, 717, 718, 719, 720, 722, 723, 726, 727, 728, 732, 733, 734, 738, 740, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 787, 788, 789, 790, 791, 794, 795, 799, 800, 994, 1007, 1019, 1027, 1043], "truth": [2, 27, 61, 71, 78, 83, 87, 95, 96, 99, 114, 118, 121, 131, 135, 159, 187, 207, 217, 223, 224, 260, 272, 283, 362, 401, 414, 708, 709, 710, 713, 717, 718, 719, 720, 722, 723, 726, 727, 728, 730, 732, 733, 734, 738, 740, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 787, 788, 789, 790, 791, 794, 795, 799, 800, 994, 1019, 1027, 1043, 1049], "davies_bouldin_scor": [2, 414, 1043], "davi": [2, 479, 729, 994, 1039], "bouldin": [2, 729], "fowlkes_mallows_scor": [2, 414, 994, 1041, 1043], "point": [2, 8, 37, 45, 50, 52, 54, 55, 57, 66, 70, 75, 76, 78, 79, 86, 87, 90, 93, 96, 98, 102, 105, 116, 117, 120, 124, 125, 126, 127, 129, 131, 133, 142, 144, 148, 151, 152, 153, 158, 161, 177, 181, 186, 187, 192, 195, 196, 197, 202, 206, 212, 215, 217, 219, 221, 223, 224, 225, 227, 229, 232, 235, 236, 240, 241, 243, 244, 245, 246, 247, 250, 253, 255, 268, 272, 274, 277, 281, 282, 287, 289, 290, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 313, 315, 321, 322, 324, 326, 338, 339, 343, 345, 349, 350, 351, 353, 354, 358, 359, 361, 362, 363, 366, 370, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 395, 399, 401, 402, 414, 419, 420, 421, 422, 425, 426, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 465, 466, 474, 477, 479, 503, 509, 517, 519, 520, 524, 527, 530, 535, 538, 540, 546, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 615, 616, 633, 636, 637, 638, 642, 643, 644, 649, 650, 656, 660, 662, 675, 676, 678, 680, 681, 683, 684, 687, 688, 693, 694, 695, 696, 697, 698, 699, 706, 711, 712, 715, 718, 722, 727, 729, 735, 740, 741, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 768, 783, 784, 794, 795, 801, 802, 803, 817, 827, 836, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 864, 871, 876, 885, 900, 901, 902, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 924, 986, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1006, 1007, 1009, 1010, 1013, 1014, 1015, 1023, 1026, 1027, 1028, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "homogeneity_completeness_v_measur": [2, 414, 1044], "homogen": [2, 75, 76, 77, 82, 84, 87, 93, 96, 362, 382, 399, 401, 416, 421, 424, 451, 619, 709, 722, 735, 740, 741, 761, 799, 991, 992, 994, 1044], "onc": [2, 45, 49, 88, 174, 177, 179, 244, 257, 260, 278, 281, 297, 300, 326, 329, 333, 361, 363, 369, 370, 374, 376, 381, 382, 385, 387, 391, 392, 393, 394, 395, 400, 401, 402, 414, 415, 417, 418, 419, 421, 422, 423, 424, 454, 456, 458, 477, 513, 514, 543, 549, 556, 564, 565, 595, 596, 602, 616, 624, 632, 652, 656, 658, 660, 666, 668, 670, 671, 672, 673, 681, 682, 683, 702, 717, 721, 723, 740, 785, 804, 808, 811, 821, 841, 842, 843, 844, 845, 918, 990, 991, 997, 1004, 1008, 1009, 1010, 1019, 1028, 1032, 1035, 1043, 1045, 1046, 1047, 1048, 1052], "homogeneity_scor": [2, 76, 87, 96, 362, 414, 722, 740, 799, 994], "mutual_info_scor": [2, 75, 414, 709, 994, 1043, 1046, 1047], "normalized_mutual_info_scor": [2, 75, 414, 740, 759, 799, 994, 1043, 1049], "rand_scor": [2, 75, 414, 720, 994, 1047], "silhouette_sampl": [2, 98, 797, 1039, 1041, 1043, 1051], "silhouett": [2, 61, 74, 76, 87, 95, 96, 192, 362, 387, 452, 517, 796, 797, 1015, 1035, 1039], "silhouette_scor": [2, 76, 87, 96, 98, 362, 387, 414, 1035, 1039, 1041, 1043, 1045, 1049], "v_measure_scor": [2, 60, 75, 76, 87, 96, 335, 362, 414, 722, 740, 741, 761, 994, 1044], "consensus_scor": [2, 61, 62, 412, 1037], "distancemetr": [2, 401, 420, 849, 997, 1043, 1047, 1048, 1049, 1052], "uniform": [2, 61, 70, 75, 91, 154, 155, 159, 173, 180, 185, 188, 202, 203, 237, 248, 250, 253, 288, 303, 306, 307, 312, 315, 321, 323, 324, 327, 333, 335, 348, 389, 392, 414, 443, 444, 556, 574, 575, 615, 616, 633, 644, 654, 655, 659, 673, 681, 682, 683, 704, 726, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 807, 815, 817, 841, 842, 845, 848, 849, 856, 857, 871, 883, 885, 895, 931, 945, 983, 984, 993, 994, 997, 1041, 1043, 1045, 1049, 1051], "interfac": [2, 44, 142, 192, 380, 381, 388, 389, 396, 399, 401, 418, 424, 425, 446, 450, 455, 501, 558, 704, 803, 806, 807, 817, 866, 867, 892, 979, 983, 997, 1009, 1013, 1014, 1018, 1035, 1037, 1040, 1041, 1043, 1044, 1049, 1051], "additive_chi2_kernel": [2, 643, 763, 769, 986], "observ": [2, 45, 46, 48, 50, 52, 54, 55, 57, 61, 64, 67, 73, 75, 78, 81, 91, 100, 108, 114, 116, 117, 118, 129, 130, 133, 135, 142, 145, 146, 148, 149, 155, 158, 159, 162, 169, 170, 177, 179, 182, 184, 185, 186, 188, 195, 196, 197, 202, 203, 218, 219, 221, 223, 224, 225, 227, 237, 241, 247, 248, 253, 254, 260, 276, 280, 282, 283, 287, 300, 303, 306, 313, 325, 335, 341, 348, 349, 353, 354, 361, 362, 363, 367, 368, 382, 384, 401, 405, 413, 414, 416, 417, 418, 419, 420, 423, 424, 446, 448, 450, 451, 452, 454, 464, 465, 474, 475, 476, 477, 478, 479, 480, 481, 529, 537, 556, 557, 568, 615, 616, 651, 657, 662, 706, 721, 723, 762, 824, 844, 852, 885, 887, 990, 993, 994, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1017, 1020, 1022, 1023, 1025, 1036, 1048, 1049, 1050, 1051], "chi2_kernel": [2, 643, 647, 762, 769, 992, 1036], "cosine_dist": [2, 701, 766, 997, 1041], "cosin": [2, 45, 78, 294, 300, 305, 379, 382, 401, 414, 419, 420, 446, 450, 455, 462, 540, 595, 596, 625, 701, 764, 765, 766, 769, 774, 775, 778, 782, 783, 784, 846, 847, 851, 878, 997, 1010, 1030, 1045], "cosine_similar": [2, 353, 764, 769, 992, 1040], "distance_metr": [2, 782, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860], "pairwise_dist": [2, 78, 401, 414, 425, 449, 451, 455, 462, 693, 701, 766, 775, 783, 784, 796, 797, 850, 852, 854, 858, 992, 1035, 1039, 1041, 1043, 1044, 1046, 1047, 1052], "euclidean_dist": [2, 246, 254, 389, 455, 459, 462, 693, 699, 766, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 1035, 1040, 1043, 1044, 1052], "haversine_dist": [2, 766, 1044], "haversin": [2, 313, 420, 704, 766, 768, 997, 1044, 1047], "kernel_metr": [2, 644, 645, 646, 647], "pairwise_kernel": [2, 401, 424, 457, 467, 648, 769, 872, 992, 1035, 1042, 1052], "laplacian_kernel": [2, 769, 992, 1040], "linear_kernel": [2, 765, 769, 992, 1043], "manhattan_dist": [2, 455, 462, 693, 766, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 1035, 1045, 1050, 1051], "nan_euclidean_dist": [2, 329, 766, 984, 1045], "euclidean": [2, 37, 78, 95, 96, 209, 254, 260, 300, 303, 308, 329, 334, 353, 362, 412, 414, 419, 420, 421, 422, 424, 445, 446, 449, 450, 451, 455, 457, 462, 465, 468, 536, 542, 550, 551, 594, 620, 624, 627, 628, 681, 683, 695, 697, 700, 701, 704, 766, 767, 773, 774, 775, 776, 782, 783, 784, 785, 796, 797, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 900, 984, 988, 992, 995, 997, 1006, 1014, 1039, 1042, 1043, 1044, 1045, 1051, 1052], "presenc": [2, 50, 98, 100, 116, 117, 140, 194, 198, 207, 227, 260, 320, 385, 388, 401, 416, 419, 717, 730, 760, 773, 835, 869, 877, 879, 886, 978, 984, 990, 994, 995, 1008, 1017, 1038, 1039, 1041, 1045, 1047, 1049], "paired_cosine_dist": 2, "paired_dist": [2, 767, 773, 782, 1039], "paired_euclidean_dist": 2, "paired_manhattan_dist": 2, "polynomial_kernel": [2, 769, 992, 1052], "rbf_kernel": [2, 769, 992, 1039], "sigmoid_kernel": [2, 769, 992], "sigmoid": [2, 64, 65, 66, 67, 379, 421, 442, 457, 540, 566, 625, 644, 648, 769, 778, 781, 863, 864, 908, 909, 910, 911, 912, 999, 1009, 1030, 1048, 1052], "pairwise_distances_argmin": [2, 86, 102, 333, 784, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_argmin_min": [2, 333, 783, 1038, 1043, 1049, 1050, 1051, 1052], "pairwise_distances_chunk": [2, 374, 782, 1043, 1046, 1052], "chunk": [2, 49, 88, 374, 375, 414, 419, 425, 449, 454, 473, 543, 782, 785, 834, 835, 841, 842, 843, 844, 845, 904, 996, 1042, 1043, 1044, 1045, 1046], "confusionmatrixdisplai": [2, 47, 71, 274, 332, 338, 361, 636, 723, 994, 1024, 1045, 1046, 1048, 1049, 1050], "detcurvedisplai": [2, 277, 332, 731, 1047, 1048, 1052, 1053], "det": [2, 192, 263, 273, 289, 290, 387, 416, 520, 569, 703, 707, 731, 793, 832, 867, 886, 906, 941, 1015, 1047], "precisionrecalldisplai": [2, 287, 332, 786, 788, 791, 994, 1045, 1048, 1051, 1052, 1053], "predictionerrordisplai": [2, 45, 54, 112, 163, 195, 276, 334, 994, 1050, 1052], "roccurvedisplai": [2, 147, 260, 263, 277, 289, 290, 329, 394, 792, 793, 1000, 1032, 1045, 1051, 1052, 1053], "bayesiangaussianmixtur": [2, 266, 267, 272, 802, 993, 1041, 1043, 1044, 1048, 1049, 1052], "mixtur": [2, 48, 50, 73, 82, 93, 95, 103, 126, 191, 211, 268, 269, 291, 310, 336, 382, 383, 401, 414, 419, 420, 424, 628, 801, 802, 803, 1013, 1014, 1015, 1029, 1030, 1035, 1039, 1040, 1041, 1042], "gaussianmixtur": [2, 82, 95, 267, 268, 269, 270, 271, 272, 420, 801, 993, 1041, 1043, 1044, 1048, 1049, 1051, 1052], "groupkfold": [2, 275, 285, 336, 406, 418, 599, 808, 809, 810, 811, 812, 821, 825, 827, 828, 829, 830, 833, 1023, 1041, 1048], "fold": [2, 45, 105, 111, 114, 148, 151, 154, 168, 176, 195, 212, 268, 275, 276, 278, 280, 281, 283, 290, 327, 341, 357, 370, 382, 387, 390, 391, 400, 401, 406, 414, 423, 442, 477, 498, 541, 572, 573, 599, 607, 652, 656, 658, 660, 664, 666, 668, 670, 678, 680, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 837, 840, 887, 908, 911, 983, 990, 994, 1004, 1009, 1023, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1052], "variant": [2, 67, 81, 128, 189, 191, 192, 280, 332, 333, 362, 363, 393, 414, 417, 419, 422, 424, 454, 465, 495, 498, 499, 517, 520, 548, 564, 565, 570, 620, 624, 627, 628, 632, 635, 643, 644, 646, 650, 677, 709, 804, 808, 810, 811, 812, 821, 828, 849, 867, 903, 984, 990, 991, 992, 993, 994, 996, 997, 1008, 1014, 1015, 1028, 1035, 1043], "overlap": [2, 53, 54, 75, 93, 124, 156, 176, 246, 268, 362, 385, 412, 414, 418, 421, 422, 592, 796, 797, 804, 808, 810, 811, 812, 813, 821, 991, 1004, 1041], "group": [2, 53, 75, 78, 93, 96, 98, 165, 196, 198, 223, 244, 257, 272, 275, 326, 336, 340, 362, 369, 382, 392, 401, 402, 406, 414, 420, 421, 422, 439, 451, 500, 593, 594, 596, 599, 723, 792, 803, 804, 805, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 879, 880, 916, 917, 990, 991, 993, 994, 995, 1004, 1010, 1011, 1013, 1019, 1022, 1023, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053], "model_select": [2, 45, 46, 47, 48, 51, 54, 64, 65, 67, 70, 71, 92, 108, 109, 110, 111, 112, 114, 121, 133, 135, 142, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 168, 173, 174, 176, 179, 190, 191, 192, 194, 195, 197, 198, 200, 207, 218, 223, 225, 230, 231, 238, 239, 241, 251, 256, 260, 262, 263, 264, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 302, 303, 304, 308, 309, 315, 317, 318, 322, 324, 325, 326, 327, 329, 330, 331, 334, 336, 341, 342, 349, 352, 357, 365, 369, 370, 387, 389, 392, 400, 401, 406, 411, 415, 418, 421, 442, 443, 563, 565, 572, 573, 584, 664, 702, 703, 705, 707, 746, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 855, 863, 864, 866, 914, 915, 916, 917, 962, 983, 984, 989, 994, 996, 997, 1002, 1004, 1009, 1014, 1015, 1023, 1024, 1028, 1032, 1039, 1041, 1042], "groupshufflesplit": [2, 275, 418, 1023, 1041], "shuffl": [2, 51, 54, 56, 61, 62, 64, 67, 71, 86, 98, 99, 128, 148, 149, 151, 158, 163, 191, 207, 231, 232, 237, 250, 281, 285, 286, 293, 300, 327, 338, 339, 340, 341, 351, 361, 362, 370, 382, 396, 401, 410, 474, 479, 493, 494, 496, 497, 500, 502, 508, 516, 517, 518, 519, 520, 524, 527, 529, 536, 542, 544, 545, 551, 552, 558, 559, 560, 561, 569, 570, 572, 573, 607, 610, 612, 663, 664, 671, 672, 673, 677, 679, 681, 682, 683, 692, 803, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 863, 864, 887, 906, 907, 908, 911, 942, 943, 963, 965, 989, 990, 995, 1002, 1008, 1009, 1023, 1028, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "kfold": [2, 92, 148, 154, 168, 275, 285, 370, 418, 442, 477, 572, 573, 599, 607, 652, 656, 658, 660, 666, 668, 670, 678, 803, 806, 807, 809, 811, 813, 817, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 837, 840, 887, 1023, 1036, 1037, 1038, 1040, 1041, 1043, 1045], "leaveonegroupout": [2, 285, 418, 804, 811, 812, 1023, 1041], "leav": [2, 91, 142, 147, 156, 196, 198, 241, 287, 325, 369, 370, 374, 384, 386, 392, 401, 414, 421, 446, 447, 450, 451, 468, 508, 562, 563, 564, 565, 566, 567, 569, 570, 571, 678, 680, 805, 810, 811, 812, 813, 821, 822, 846, 847, 914, 915, 916, 917, 983, 991, 997, 1001, 1010, 1023, 1026, 1035, 1042, 1044, 1046, 1047, 1051], "leaveoneout": [2, 285, 418, 1023], "leavepgroupsout": [2, 418, 805, 1023, 1041], "leavepout": [2, 418, 811, 1023], "predefinedsplit": [2, 418, 1023, 1039], "predefin": [2, 284, 816, 983, 997, 1023, 1050, 1052], "split": [2, 45, 46, 47, 52, 54, 56, 58, 64, 66, 67, 70, 71, 107, 133, 142, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 168, 173, 194, 195, 198, 207, 218, 219, 223, 226, 231, 241, 251, 257, 260, 267, 268, 274, 275, 278, 280, 285, 287, 290, 297, 303, 309, 315, 317, 321, 322, 327, 333, 335, 341, 349, 361, 363, 369, 382, 394, 400, 401, 405, 406, 413, 414, 419, 421, 422, 423, 442, 447, 448, 477, 478, 484, 485, 502, 536, 542, 544, 547, 551, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 593, 594, 596, 599, 607, 652, 656, 658, 660, 666, 668, 670, 678, 680, 700, 709, 710, 722, 735, 741, 761, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 840, 846, 847, 863, 864, 887, 891, 892, 894, 895, 896, 897, 914, 915, 916, 917, 965, 983, 986, 990, 991, 997, 1000, 1001, 1002, 1004, 1008, 1010, 1014, 1019, 1023, 1024, 1026, 1027, 1028, 1030, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "repeatedkfold": [2, 195, 418, 808, 819, 1042], "repeatedstratifiedkfold": [2, 280, 297, 418, 818, 822, 1042], "stratifi": [2, 46, 133, 149, 159, 173, 197, 238, 251, 260, 264, 275, 280, 283, 289, 303, 308, 309, 329, 389, 401, 556, 564, 572, 573, 607, 664, 671, 673, 681, 803, 806, 807, 809, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 840, 855, 863, 965, 994, 997, 1023, 1040, 1041, 1042, 1044, 1045, 1048], "shufflesplit": [2, 275, 282, 357, 418, 805, 811, 813, 823, 832, 1023, 1035, 1036, 1038, 1040, 1041], "stratifiedgroupkfold": [2, 275, 1048], "stratifiedkfold": [2, 176, 268, 275, 286, 290, 341, 418, 442, 572, 573, 599, 607, 664, 678, 803, 804, 806, 807, 808, 809, 811, 813, 817, 821, 823, 825, 826, 827, 828, 829, 830, 831, 833, 887, 1023, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1048], "stratifiedshufflesplit": [2, 275, 349, 418, 1023, 1035, 1036, 1041, 1042, 1048], "timeseriessplit": [2, 45, 54, 158, 207, 275, 418, 1041, 1042, 1047], "seri": [2, 44, 45, 53, 61, 118, 149, 155, 158, 192, 194, 197, 198, 205, 223, 225, 227, 241, 243, 264, 280, 285, 327, 333, 338, 379, 382, 392, 401, 414, 494, 495, 496, 497, 501, 505, 506, 507, 509, 510, 515, 546, 567, 695, 699, 706, 746, 749, 750, 752, 794, 824, 828, 829, 832, 922, 985, 990, 991, 995, 997, 1008, 1013, 1015, 1038, 1041, 1042, 1043, 1047, 1050, 1052], "check_cv": [2, 401, 1040], "checker": [2, 391, 826], "util": [2, 4, 10, 17, 35, 38, 49, 51, 52, 86, 93, 94, 99, 123, 140, 142, 163, 223, 225, 231, 239, 245, 253, 257, 259, 269, 286, 288, 300, 322, 329, 341, 349, 353, 361, 375, 381, 382, 385, 387, 388, 389, 390, 399, 400, 401, 411, 414, 415, 418, 419, 422, 442, 448, 449, 452, 454, 458, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 586, 587, 593, 595, 596, 599, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 803, 804, 805, 810, 812, 821, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 989, 992, 994, 995, 1004, 1005, 1013, 1018, 1020, 1030, 1035, 1036, 1038, 1039, 1041, 1042], "train_test_split": [2, 46, 47, 48, 51, 54, 64, 65, 67, 70, 71, 108, 112, 121, 133, 142, 147, 149, 153, 154, 155, 156, 157, 158, 159, 162, 173, 174, 194, 195, 197, 198, 200, 207, 218, 223, 230, 231, 238, 239, 241, 251, 260, 263, 264, 274, 277, 278, 283, 287, 289, 293, 299, 303, 308, 309, 315, 317, 318, 322, 324, 325, 327, 329, 330, 331, 336, 342, 365, 369, 370, 392, 400, 411, 415, 418, 421, 442, 443, 563, 565, 572, 573, 702, 703, 705, 707, 803, 834, 837, 855, 863, 864, 866, 916, 917, 983, 984, 994, 996, 997, 1002, 1004, 1009, 1024, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1048, 1052], "gridsearchcv": [2, 45, 92, 106, 108, 110, 111, 114, 135, 148, 192, 256, 262, 271, 273, 278, 279, 280, 281, 285, 288, 291, 297, 302, 304, 318, 322, 331, 335, 336, 349, 353, 370, 375, 389, 399, 401, 406, 415, 418, 421, 424, 428, 507, 525, 545, 546, 580, 604, 612, 658, 708, 746, 814, 817, 866, 876, 906, 914, 962, 983, 990, 994, 998, 1008, 1009, 1013, 1014, 1015, 1023, 1024, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053], "exhaust": [2, 177, 281, 329, 330, 331, 332, 333, 334, 335, 336, 374, 384, 392, 400, 410, 414, 421, 803, 806, 807, 817, 896, 897, 899, 990, 1028, 1030], "over": [2, 30, 45, 48, 49, 50, 57, 61, 64, 66, 67, 70, 75, 88, 93, 94, 109, 110, 111, 128, 145, 148, 153, 158, 159, 172, 176, 179, 187, 190, 194, 196, 205, 217, 223, 231, 241, 250, 260, 280, 281, 283, 285, 287, 288, 289, 292, 305, 313, 315, 316, 322, 332, 333, 335, 338, 361, 362, 374, 375, 376, 382, 383, 386, 387, 388, 389, 393, 400, 401, 411, 413, 414, 415, 418, 419, 420, 421, 422, 426, 451, 454, 469, 477, 514, 538, 539, 541, 542, 543, 544, 551, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 593, 594, 596, 599, 607, 635, 637, 638, 639, 649, 650, 651, 652, 657, 658, 663, 665, 666, 667, 668, 670, 671, 672, 673, 681, 682, 683, 690, 691, 702, 721, 723, 743, 767, 792, 797, 801, 803, 806, 807, 809, 814, 815, 817, 825, 827, 828, 829, 830, 831, 833, 862, 863, 864, 865, 881, 885, 906, 914, 916, 923, 932, 962, 983, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1018, 1024, 1027, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "specifi": [2, 45, 61, 67, 93, 128, 152, 153, 158, 180, 183, 185, 186, 187, 212, 224, 231, 266, 288, 374, 375, 381, 385, 387, 389, 396, 400, 401, 406, 409, 413, 414, 415, 418, 419, 421, 423, 424, 426, 428, 434, 442, 446, 450, 455, 457, 468, 469, 472, 474, 475, 477, 478, 479, 480, 481, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 520, 532, 536, 538, 542, 543, 545, 546, 551, 552, 557, 562, 564, 565, 566, 567, 569, 572, 573, 588, 589, 598, 599, 602, 607, 615, 616, 625, 636, 637, 638, 643, 648, 651, 652, 653, 656, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 670, 673, 674, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 692, 696, 703, 705, 707, 714, 716, 733, 734, 742, 746, 758, 775, 783, 784, 787, 788, 791, 803, 805, 806, 807, 809, 810, 812, 816, 817, 820, 825, 826, 827, 828, 829, 830, 831, 833, 837, 840, 841, 842, 844, 845, 846, 847, 851, 856, 879, 880, 881, 884, 885, 887, 902, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 938, 945, 978, 984, 990, 991, 993, 994, 997, 1001, 1002, 1004, 1007, 1008, 1009, 1023, 1027, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "halvinggridsearchcv": [2, 291, 292, 331, 406, 584, 807, 983, 1047, 1049, 1050, 1052], "halvingrandomsearchcv": [2, 155, 292, 331, 406, 584, 806, 983, 1047, 1049, 1050, 1051, 1052], "hyper": [2, 45, 67, 108, 148, 274, 280, 285, 318, 349, 370, 389, 399, 400, 401, 410, 418, 421, 423, 473, 649, 650, 807, 815, 817, 862, 904, 989, 990, 994, 997, 1008, 1009, 1019, 1030, 1035, 1049], "parametergrid": [2, 803, 1037, 1043], "grid": [2, 47, 49, 51, 52, 61, 65, 66, 67, 80, 92, 99, 108, 109, 110, 111, 114, 118, 151, 161, 172, 174, 176, 183, 192, 194, 195, 196, 212, 241, 248, 255, 256, 257, 261, 266, 271, 273, 277, 279, 281, 284, 285, 287, 292, 299, 302, 304, 305, 313, 318, 322, 323, 325, 346, 348, 349, 355, 356, 361, 382, 389, 394, 399, 401, 410, 415, 418, 420, 421, 422, 453, 466, 469, 477, 503, 507, 520, 527, 636, 637, 638, 652, 655, 658, 659, 661, 664, 666, 668, 681, 718, 732, 746, 789, 792, 803, 806, 807, 814, 817, 819, 832, 833, 866, 911, 987, 989, 994, 997, 1001, 1014, 1015, 1019, 1020, 1022, 1024, 1026, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1049, 1051, 1052], "number": [2, 45, 46, 48, 49, 51, 53, 54, 55, 60, 61, 65, 66, 67, 71, 72, 74, 76, 77, 79, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 95, 99, 100, 101, 105, 107, 108, 109, 110, 112, 118, 120, 121, 125, 126, 128, 130, 132, 133, 135, 142, 143, 145, 148, 150, 151, 153, 154, 155, 156, 159, 163, 165, 173, 174, 177, 187, 188, 191, 192, 195, 196, 200, 207, 212, 222, 223, 224, 225, 230, 231, 237, 238, 239, 240, 241, 243, 250, 254, 258, 260, 261, 266, 267, 269, 271, 272, 274, 275, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 297, 300, 302, 306, 307, 320, 322, 323, 326, 329, 330, 331, 332, 333, 334, 335, 342, 349, 354, 357, 362, 363, 365, 369, 370, 375, 376, 379, 381, 382, 383, 384, 385, 387, 390, 391, 393, 394, 395, 396, 399, 400, 401, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 586, 587, 588, 589, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 708, 709, 710, 712, 717, 718, 719, 721, 723, 725, 728, 732, 733, 734, 735, 738, 739, 742, 744, 756, 759, 778, 782, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 927, 930, 942, 943, 946, 947, 962, 963, 965, 968, 969, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1019, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "parametersampl": [2, 817, 1037, 1043, 1047], "randomizedsearchcv": [2, 47, 108, 179, 281, 288, 331, 370, 400, 406, 580, 983, 994, 1008, 1013, 1024, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052], "cross_val_predict": [2, 163, 276, 329, 406, 413, 418, 421, 442, 572, 573, 828, 829, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1052], "cross_val_scor": [2, 54, 135, 190, 191, 192, 273, 276, 285, 294, 335, 352, 370, 387, 389, 399, 406, 418, 421, 525, 580, 708, 746, 803, 827, 829, 914, 915, 983, 994, 1015, 1023, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1047, 1048, 1051, 1052], "cross_valid": [2, 45, 54, 152, 158, 163, 195, 225, 276, 283, 297, 326, 336, 387, 400, 406, 580, 827, 828, 994, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052], "record": [2, 52, 129, 146, 158, 197, 257, 326, 363, 374, 387, 414, 416, 455, 462, 503, 625, 648, 697, 775, 778, 782, 783, 784, 785, 829, 852, 1048, 1049], "learning_curv": [2, 282, 334, 406, 809, 989, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1052], "permutation_test_scor": [2, 286, 406, 418, 1035, 1042, 1047], "signific": [2, 45, 93, 148, 155, 172, 173, 192, 227, 241, 273, 280, 299, 300, 324, 361, 370, 381, 382, 399, 414, 417, 418, 421, 509, 537, 539, 554, 555, 632, 663, 664, 671, 672, 673, 681, 682, 683, 822, 831, 906, 908, 909, 910, 911, 912, 993, 994, 997, 1015, 1035, 1037, 1038, 1039, 1043], "validation_curv": [2, 335, 357, 406, 825, 989, 1042, 1043, 1044, 1047, 1051], "learningcurvedisplai": [2, 256, 282, 334, 989, 1050, 1051], "validationcurvedisplai": [2, 295, 989, 1051], "onevsoneclassifi": [2, 297, 406, 835, 836, 1036, 1038, 1039, 1041, 1042, 1044, 1047, 1049, 1052], "multiclass": [2, 31, 66, 69, 148, 201, 215, 239, 251, 258, 260, 263, 273, 277, 285, 287, 290, 299, 316, 318, 346, 358, 382, 383, 389, 390, 392, 401, 406, 414, 421, 442, 457, 467, 494, 501, 509, 562, 564, 566, 569, 572, 573, 599, 607, 615, 636, 637, 638, 663, 664, 671, 673, 678, 679, 680, 681, 707, 711, 713, 733, 734, 738, 739, 742, 747, 758, 787, 788, 791, 792, 793, 798, 803, 804, 806, 807, 808, 809, 817, 819, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 873, 887, 906, 908, 911, 914, 916, 956, 957, 958, 988, 990, 1004, 1005, 1009, 1010, 1015, 1016, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1052], "onevsrestclassifi": [2, 258, 287, 289, 297, 406, 413, 834, 836, 906, 1019, 1036, 1037, 1039, 1041, 1042, 1048, 1049, 1052], "rest": [2, 30, 65, 69, 152, 156, 192, 201, 207, 232, 238, 257, 260, 269, 297, 329, 342, 346, 393, 401, 424, 517, 615, 636, 649, 663, 664, 681, 758, 792, 834, 835, 836, 855, 906, 908, 911, 990, 994, 995, 998, 1001, 1009, 1015, 1018, 1039, 1040, 1049, 1050, 1051, 1053], "ovr": [2, 69, 215, 238, 297, 299, 329, 358, 663, 664, 792, 835, 906, 908, 911, 990, 994, 995, 1009, 1035, 1040, 1041, 1043, 1044, 1045, 1049, 1050], "outputcodeclassifi": [2, 297, 406, 834, 835, 1042, 1047, 1051, 1052], "correct": [2, 30, 54, 66, 67, 95, 117, 142, 153, 187, 195, 207, 212, 223, 241, 266, 274, 280, 287, 289, 297, 299, 349, 351, 361, 370, 384, 387, 389, 391, 402, 413, 414, 418, 419, 421, 422, 431, 437, 455, 461, 474, 479, 493, 506, 508, 640, 672, 681, 683, 708, 709, 713, 717, 718, 723, 726, 727, 728, 732, 733, 734, 738, 742, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 787, 788, 789, 791, 794, 795, 798, 800, 834, 835, 836, 843, 851, 877, 979, 990, 994, 995, 1009, 1019, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "output": [2, 30, 31, 53, 56, 57, 65, 67, 75, 91, 97, 131, 141, 142, 143, 145, 151, 163, 166, 169, 170, 179, 187, 190, 191, 192, 195, 219, 249, 257, 261, 264, 269, 274, 278, 280, 283, 287, 289, 290, 297, 300, 321, 324, 326, 327, 329, 332, 333, 335, 362, 363, 364, 365, 367, 369, 380, 381, 382, 384, 385, 387, 389, 393, 395, 399, 400, 401, 413, 414, 415, 417, 418, 421, 422, 423, 424, 430, 435, 438, 442, 446, 447, 448, 450, 451, 452, 454, 455, 457, 464, 465, 467, 468, 469, 470, 471, 472, 473, 487, 488, 489, 490, 493, 496, 497, 498, 499, 500, 501, 502, 508, 510, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 662, 663, 665, 666, 667, 668, 671, 672, 673, 676, 678, 679, 681, 683, 684, 686, 687, 688, 689, 693, 694, 695, 697, 699, 701, 704, 705, 718, 719, 726, 727, 728, 730, 732, 739, 749, 750, 752, 754, 755, 756, 757, 758, 760, 765, 771, 776, 789, 792, 794, 795, 801, 802, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 827, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 849, 850, 851, 855, 856, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 894, 895, 898, 899, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 927, 929, 932, 943, 944, 950, 951, 953, 961, 981, 983, 984, 986, 988, 990, 991, 994, 995, 996, 997, 998, 1001, 1004, 1009, 1015, 1016, 1019, 1020, 1022, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "classifierchain": [2, 299, 401, 406, 838, 840, 1042, 1047, 1050, 1052, 1053], "arrang": [2, 61, 299, 637, 837, 838, 839, 840, 994], "chain": [2, 35, 106, 112, 142, 169, 192, 253, 288, 291, 297, 298, 300, 303, 318, 370, 379, 399, 401, 424, 501, 507, 546, 616, 632, 663, 742, 803, 832, 835, 837, 838, 839, 840, 866, 867, 886, 983, 984, 995, 999, 1011, 1013, 1015, 1018, 1028, 1030], "multioutput": [2, 41, 162, 289, 299, 389, 401, 406, 437, 470, 487, 488, 489, 556, 559, 561, 562, 563, 565, 567, 569, 570, 573, 575, 616, 637, 638, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 726, 727, 732, 749, 750, 752, 754, 755, 757, 789, 792, 794, 795, 827, 835, 837, 838, 839, 840, 849, 857, 864, 873, 907, 909, 912, 914, 915, 916, 917, 932, 957, 958, 994, 1015, 1016, 1030, 1035, 1036, 1037, 1041, 1042, 1048, 1049], "multioutputclassifi": [2, 406, 792, 835, 837, 839, 994, 1042, 1044, 1045, 1046, 1047, 1051, 1052], "multioutputregressor": [2, 162, 406, 437, 470, 487, 488, 489, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 838, 840, 849, 857, 864, 907, 909, 912, 915, 917, 1041, 1042, 1044, 1046, 1047, 1051, 1052], "regressorchain": [2, 406, 837, 839, 1043, 1046, 1050], "bernoullinb": [2, 161, 376, 842, 843, 844, 845, 995, 996, 1036, 1037, 1039, 1042, 1047, 1048, 1050], "naiv": [2, 32, 67, 70, 161, 280, 282, 299, 361, 363, 382, 413, 421, 422, 442, 549, 841, 842, 843, 844, 845, 988, 989, 997, 1002, 1016, 1030, 1035, 1036, 1037, 1038, 1043, 1045, 1048, 1050], "bernoulli": [2, 318, 422, 423, 841, 842, 843, 844, 845, 862, 863, 864, 869, 990, 1004, 1016, 1030, 1035], "naive_bay": [2, 49, 64, 65, 67, 70, 161, 165, 281, 282, 361, 370, 376, 382, 421, 442, 574, 841, 842, 843, 844, 845, 867, 988, 995, 996, 1028, 1036, 1037, 1039, 1040, 1041, 1042], "categoricalnb": [2, 841, 843, 844, 845, 996, 1045, 1046, 1047, 1048, 1050], "categor": [2, 45, 108, 141, 147, 158, 163, 192, 195, 196, 197, 223, 241, 260, 262, 264, 327, 332, 334, 335, 376, 379, 381, 382, 389, 392, 401, 415, 422, 471, 472, 494, 495, 501, 510, 566, 567, 586, 587, 612, 613, 637, 638, 653, 663, 664, 674, 685, 714, 829, 841, 842, 843, 844, 845, 867, 869, 873, 874, 877, 879, 880, 887, 901, 902, 984, 990, 1001, 1002, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1028, 1030, 1035, 1036, 1039, 1040, 1043, 1045, 1047, 1050, 1051, 1052], "complementnb": [2, 281, 361, 841, 842, 844, 845, 996, 1043, 1047, 1048, 1050], "complement": [2, 196, 290, 361, 637, 638, 805, 820, 823, 832, 841, 842, 843, 844, 845, 1001, 1016, 1030, 1043], "renni": [2, 841, 843, 996, 1043], "gaussiannb": [2, 64, 65, 67, 70, 165, 282, 370, 413, 421, 442, 574, 841, 842, 843, 845, 867, 988, 995, 996, 1039, 1040, 1041, 1043, 1048, 1051], "multinomialnb": [2, 49, 376, 382, 422, 841, 842, 843, 844, 996, 1028, 1037, 1039, 1042, 1043, 1047, 1048, 1050], "multinomi": [2, 49, 69, 192, 201, 214, 232, 238, 258, 275, 289, 317, 382, 383, 387, 419, 421, 501, 517, 528, 556, 558, 564, 566, 574, 636, 663, 664, 745, 832, 840, 841, 842, 843, 844, 845, 886, 929, 994, 995, 1010, 1015, 1016, 1028, 1030, 1035, 1039, 1041, 1042, 1043, 1048, 1049], "balltre": [2, 425, 449, 451, 455, 462, 693, 694, 704, 848, 849, 850, 851, 852, 854, 856, 857, 858, 991, 1035, 1037, 1039, 1043, 1048, 1051, 1052], "kdtree": [2, 451, 455, 462, 693, 694, 846, 848, 849, 850, 851, 852, 854, 856, 857, 858, 1037, 1039, 1043, 1047, 1048, 1051, 1052], "kneighborsclassifi": [2, 70, 164, 169, 302, 303, 308, 309, 325, 331, 333, 361, 421, 607, 849, 853, 854, 855, 856, 857, 995, 997, 1026, 1035, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborsregressor": [2, 190, 259, 312, 333, 421, 575, 848, 854, 856, 857, 997, 1035, 1037, 1039, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "kneighborstransform": [2, 300, 302, 329, 697, 858, 997, 1045, 1049, 1050], "kerneldens": [2, 304, 305, 313, 420, 1037, 1043, 1044, 1048, 1049, 1050], "localoutlierfactor": [2, 250, 260, 306, 307, 333, 401, 568, 910, 1000, 1042, 1043, 1045, 1049, 1050, 1051, 1052], "unsupervis": [2, 6, 27, 34, 47, 53, 75, 87, 109, 110, 121, 128, 147, 161, 250, 258, 306, 307, 348, 361, 362, 370, 379, 382, 389, 400, 401, 414, 417, 419, 420, 421, 422, 423, 438, 447, 450, 537, 539, 541, 542, 544, 547, 548, 554, 568, 571, 572, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 635, 639, 640, 643, 644, 645, 646, 647, 682, 803, 806, 807, 809, 817, 825, 830, 833, 848, 849, 852, 854, 855, 856, 857, 862, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 898, 899, 903, 910, 991, 994, 1000, 1007, 1016, 1019, 1020, 1022, 1024, 1030, 1035, 1038, 1048, 1052], "lof": [2, 50, 192, 237, 250, 260, 301, 348, 568, 852, 910, 1000, 1015], "nearestcentroid": [2, 311, 361, 995, 997, 1035, 1039, 1042, 1047, 1050], "centroid": [2, 80, 83, 95, 96, 114, 192, 301, 308, 323, 333, 362, 383, 406, 414, 447, 448, 451, 452, 453, 454, 457, 464, 465, 467, 509, 554, 636, 853, 1015, 1016, 1030, 1035, 1039, 1042, 1047, 1051], "nearestneighbor": [2, 300, 333, 405, 414, 425, 449, 451, 453, 466, 693, 694, 698, 848, 849, 850, 852, 856, 857, 858, 997, 1035, 1039, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "learner": [2, 49, 143, 153, 163, 376, 562, 563, 564, 565, 566, 567, 569, 570, 571, 587, 594, 635, 848, 849, 854, 856, 857, 996, 999, 1010, 1013, 1014, 1028, 1051], "neighborhoodcomponentsanalysi": [2, 244, 308, 309, 310, 997, 1044, 1049, 1052], "neighborhood": [2, 93, 118, 136, 169, 191, 192, 243, 300, 301, 302, 303, 311, 312, 384, 401, 414, 419, 425, 449, 451, 455, 462, 507, 509, 520, 546, 554, 633, 636, 701, 832, 848, 849, 852, 854, 855, 856, 857, 858, 860, 866, 867, 886, 991, 1000, 1015, 1016, 1030, 1044], "radiusneighborsclassifi": [2, 333, 848, 849, 854, 857, 995, 997, 1035, 1037, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "among": [2, 67, 187, 196, 198, 200, 223, 271, 299, 369, 376, 382, 389, 401, 402, 413, 417, 452, 454, 517, 524, 798, 831, 849, 854, 856, 908, 911, 914, 915, 916, 917, 983, 986, 994, 995, 1001, 1004, 1009, 1035, 1041, 1042, 1045, 1052], "within": [2, 41, 45, 61, 98, 147, 149, 150, 153, 158, 162, 174, 176, 177, 219, 224, 225, 235, 241, 261, 278, 279, 283, 293, 320, 321, 331, 347, 350, 353, 357, 363, 370, 374, 382, 387, 391, 396, 399, 401, 402, 406, 412, 413, 414, 415, 418, 420, 421, 425, 449, 453, 466, 468, 469, 471, 474, 479, 520, 554, 572, 573, 574, 575, 598, 599, 637, 697, 701, 704, 715, 729, 785, 801, 802, 808, 809, 821, 822, 830, 831, 846, 847, 848, 849, 854, 856, 857, 858, 865, 866, 867, 879, 887, 891, 892, 894, 895, 896, 897, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 988, 990, 991, 997, 1000, 1004, 1007, 1009, 1010, 1014, 1018, 1019, 1023, 1026, 1028, 1037, 1038, 1042, 1043, 1048, 1049, 1051, 1052, 1053], "radiu": [2, 177, 295, 307, 349, 384, 414, 447, 455, 693, 768, 785, 846, 847, 848, 849, 850, 854, 856, 857, 858, 860, 997, 1037, 1039, 1049, 1052], "radiusneighborsregressor": [2, 333, 848, 849, 854, 856, 997, 1035, 1037, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "fix": [2, 45, 49, 61, 65, 73, 84, 108, 137, 147, 148, 151, 158, 179, 180, 184, 187, 195, 207, 225, 241, 260, 272, 283, 315, 329, 330, 331, 332, 333, 334, 335, 336, 362, 374, 375, 381, 383, 385, 386, 387, 389, 390, 395, 399, 401, 402, 406, 414, 415, 418, 419, 421, 422, 424, 457, 467, 477, 509, 517, 536, 542, 545, 547, 553, 554, 564, 565, 569, 570, 593, 596, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 635, 658, 668, 673, 675, 689, 692, 696, 700, 712, 789, 801, 817, 824, 848, 849, 851, 854, 856, 857, 873, 876, 890, 914, 915, 943, 961, 983, 990, 993, 994, 997, 1004, 1014, 1028, 1033, 1034, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "radiusneighborstransform": [2, 329, 850, 997, 1045, 1047, 1049, 1050], "nearer": [2, 850, 858, 997], "than": [2, 25, 45, 46, 48, 52, 53, 55, 60, 67, 69, 70, 78, 82, 85, 91, 93, 109, 112, 116, 118, 121, 126, 128, 131, 133, 135, 142, 144, 145, 147, 148, 149, 151, 152, 155, 158, 177, 179, 185, 188, 190, 195, 196, 197, 200, 202, 207, 209, 212, 223, 225, 229, 239, 240, 241, 247, 250, 256, 257, 258, 260, 267, 277, 278, 280, 281, 282, 283, 286, 289, 297, 299, 300, 306, 307, 318, 320, 324, 325, 326, 327, 331, 333, 335, 339, 353, 361, 362, 363, 370, 374, 375, 376, 381, 382, 383, 385, 386, 387, 389, 392, 393, 395, 401, 402, 409, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 459, 462, 465, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 498, 499, 501, 514, 519, 520, 528, 536, 539, 540, 541, 542, 543, 545, 546, 547, 549, 552, 553, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 635, 639, 645, 647, 648, 649, 650, 651, 652, 657, 658, 660, 663, 664, 665, 666, 667, 668, 671, 672, 673, 676, 677, 679, 681, 682, 683, 684, 687, 692, 697, 699, 701, 709, 710, 717, 725, 726, 727, 728, 739, 740, 743, 768, 783, 784, 785, 787, 789, 799, 801, 802, 803, 806, 807, 813, 817, 822, 824, 827, 828, 829, 830, 831, 834, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 863, 864, 869, 879, 880, 881, 883, 884, 886, 889, 895, 896, 900, 903, 906, 907, 908, 911, 912, 914, 915, 916, 917, 918, 932, 943, 945, 946, 951, 957, 963, 965, 968, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1013, 1014, 1017, 1019, 1023, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "kneighbors_graph": [2, 77, 82, 100, 105, 300, 401, 414, 446, 450, 700, 848, 849, 850, 852, 854, 856, 857, 858, 860, 997, 1035, 1039, 1044], "radius_neighbors_graph": [2, 414, 425, 449, 848, 849, 850, 852, 854, 856, 857, 858, 859, 997, 1039, 1044, 1047], "sort_graph_by_row_valu": [2, 396, 1050], "sort": [2, 45, 49, 51, 53, 60, 61, 64, 98, 107, 110, 140, 145, 152, 155, 162, 177, 202, 207, 223, 224, 241, 259, 280, 281, 284, 294, 312, 356, 361, 367, 368, 387, 391, 395, 396, 401, 418, 421, 422, 424, 539, 546, 560, 571, 586, 615, 622, 702, 717, 723, 733, 734, 742, 758, 787, 788, 791, 793, 803, 829, 841, 842, 843, 844, 845, 846, 847, 854, 856, 857, 858, 861, 871, 877, 879, 880, 883, 885, 887, 895, 908, 911, 943, 948, 990, 997, 1000, 1004, 1018, 1028, 1035, 1039, 1045, 1046, 1047, 1049, 1050, 1053], "row": [2, 45, 60, 61, 62, 65, 67, 73, 82, 98, 112, 124, 126, 148, 151, 161, 164, 190, 223, 224, 225, 251, 254, 260, 261, 322, 369, 374, 382, 389, 396, 400, 401, 412, 414, 417, 422, 429, 447, 448, 452, 454, 455, 456, 458, 461, 462, 464, 469, 473, 493, 495, 496, 497, 498, 499, 500, 505, 506, 507, 509, 510, 515, 516, 518, 539, 547, 553, 556, 595, 596, 625, 637, 648, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 697, 701, 702, 715, 723, 724, 729, 762, 763, 767, 770, 772, 773, 774, 775, 777, 778, 780, 782, 783, 784, 785, 801, 802, 835, 841, 842, 843, 844, 845, 851, 854, 855, 856, 857, 858, 861, 872, 876, 878, 879, 881, 891, 892, 893, 896, 897, 900, 904, 922, 926, 927, 943, 965, 968, 972, 974, 976, 977, 980, 981, 983, 984, 986, 988, 990, 992, 994, 995, 997, 1004, 1005, 1008, 1009, 1014, 1042, 1043, 1044, 1045, 1050], "store": [2, 57, 71, 91, 92, 107, 109, 117, 124, 174, 187, 200, 209, 212, 227, 244, 251, 261, 271, 285, 289, 338, 363, 369, 374, 381, 382, 387, 389, 394, 395, 396, 399, 401, 415, 417, 419, 421, 422, 424, 425, 443, 445, 449, 451, 455, 462, 474, 475, 478, 479, 480, 481, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 513, 539, 540, 546, 554, 555, 560, 561, 562, 563, 568, 569, 570, 571, 574, 575, 594, 615, 616, 632, 636, 637, 640, 643, 654, 655, 659, 665, 666, 667, 668, 671, 672, 678, 680, 681, 682, 683, 693, 694, 695, 697, 702, 703, 705, 706, 707, 785, 801, 802, 803, 809, 817, 825, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 877, 884, 886, 887, 901, 902, 903, 926, 927, 951, 952, 965, 968, 980, 984, 986, 990, 997, 1006, 1009, 1010, 1013, 1019, 1028, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "increas": [2, 45, 48, 56, 66, 75, 81, 93, 95, 96, 99, 112, 131, 142, 143, 145, 148, 151, 153, 158, 160, 173, 177, 179, 183, 184, 185, 188, 195, 196, 200, 203, 205, 214, 223, 224, 225, 227, 241, 248, 254, 267, 268, 280, 281, 282, 287, 293, 315, 321, 322, 325, 331, 339, 349, 357, 362, 363, 365, 374, 375, 376, 386, 395, 396, 401, 413, 414, 416, 419, 421, 422, 425, 445, 449, 451, 457, 468, 476, 477, 483, 537, 541, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 593, 596, 632, 640, 641, 642, 650, 655, 656, 659, 660, 661, 663, 664, 671, 672, 673, 681, 682, 683, 687, 688, 690, 691, 697, 711, 712, 717, 782, 786, 793, 806, 807, 835, 854, 856, 857, 858, 861, 863, 864, 880, 906, 914, 915, 916, 917, 943, 983, 985, 989, 990, 991, 993, 994, 997, 1004, 1008, 1009, 1010, 1018, 1035, 1037, 1040, 1044, 1046, 1047, 1050], "bernoullirbm": [2, 318, 863, 864, 999, 1004, 1037, 1038, 1047, 1049, 1052], "restrict": [2, 67, 104, 105, 110, 120, 169, 190, 192, 213, 238, 240, 314, 389, 393, 399, 413, 414, 421, 422, 470, 498, 507, 537, 586, 615, 658, 659, 660, 661, 663, 687, 688, 718, 786, 792, 793, 832, 854, 856, 857, 858, 860, 862, 863, 864, 866, 892, 994, 1010, 1015, 1029, 1030, 1035, 1037, 1045, 1047, 1052], "boltzmann": [2, 110, 120, 169, 192, 213, 238, 314, 507, 663, 718, 832, 862, 863, 864, 866, 892, 1015, 1029, 1030, 1037], "rbm": [2, 318, 862, 863, 864, 999], "neural_network": [2, 70, 192, 196, 261, 314, 315, 316, 317, 318, 376, 399, 862, 863, 864, 995, 998, 1015, 1037, 1052], "mlpclassifi": [2, 70, 157, 169, 192, 314, 315, 317, 376, 507, 509, 519, 527, 862, 864, 876, 995, 998, 1015, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "layer": [2, 45, 70, 161, 170, 181, 192, 230, 239, 261, 314, 317, 318, 322, 323, 343, 354, 359, 374, 395, 421, 519, 520, 527, 572, 832, 862, 863, 864, 867, 886, 999, 1015, 1016, 1030, 1041], "mlpregressor": [2, 45, 196, 261, 376, 862, 863, 998, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "featureunion": [2, 7, 45, 111, 379, 401, 406, 469, 634, 868, 984, 1014, 1018, 1030, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "concaten": [2, 66, 73, 77, 88, 99, 106, 109, 117, 144, 159, 173, 187, 192, 202, 205, 237, 244, 250, 266, 270, 271, 276, 285, 287, 288, 289, 290, 305, 318, 324, 327, 339, 348, 352, 361, 415, 469, 472, 509, 514, 536, 542, 546, 547, 604, 785, 803, 865, 866, 868, 871, 879, 911, 995, 1015, 1023, 1027, 1036], "result": [2, 27, 37, 45, 46, 47, 50, 54, 55, 60, 64, 65, 66, 69, 71, 73, 75, 78, 80, 81, 82, 84, 86, 91, 92, 93, 98, 100, 104, 108, 110, 112, 117, 121, 128, 131, 133, 134, 138, 145, 146, 147, 149, 152, 153, 155, 156, 159, 161, 162, 170, 176, 177, 179, 181, 183, 187, 190, 195, 196, 197, 198, 203, 208, 209, 212, 213, 218, 224, 225, 227, 231, 237, 238, 241, 243, 244, 247, 250, 253, 255, 261, 266, 271, 272, 274, 275, 278, 280, 281, 283, 286, 287, 288, 289, 291, 292, 295, 297, 300, 302, 306, 315, 316, 317, 320, 321, 322, 325, 329, 331, 333, 334, 335, 336, 338, 341, 343, 349, 353, 354, 357, 361, 363, 367, 368, 369, 374, 375, 376, 381, 382, 384, 387, 389, 391, 392, 393, 395, 399, 400, 401, 402, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 439, 445, 446, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 464, 467, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 494, 513, 514, 516, 518, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 584, 585, 586, 587, 589, 593, 594, 596, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 639, 641, 645, 648, 657, 658, 663, 669, 670, 671, 672, 681, 682, 683, 691, 694, 695, 696, 697, 698, 699, 700, 713, 715, 717, 722, 729, 730, 732, 733, 734, 735, 736, 740, 741, 742, 758, 760, 761, 768, 775, 778, 782, 783, 784, 785, 787, 788, 789, 791, 797, 798, 801, 802, 803, 805, 806, 807, 808, 813, 817, 818, 819, 822, 823, 827, 833, 834, 835, 837, 838, 839, 840, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 870, 871, 879, 880, 883, 884, 887, 895, 899, 903, 906, 908, 911, 914, 915, 916, 917, 918, 919, 926, 927, 942, 943, 945, 949, 959, 960, 965, 968, 984, 986, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1013, 1014, 1017, 1019, 1023, 1024, 1026, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "pipelin": [2, 7, 45, 70, 92, 96, 108, 111, 112, 121, 147, 148, 152, 169, 171, 173, 176, 177, 190, 191, 196, 197, 200, 202, 211, 212, 223, 224, 229, 237, 241, 244, 249, 250, 251, 253, 255, 260, 261, 264, 273, 277, 278, 279, 284, 287, 288, 291, 294, 300, 302, 303, 308, 309, 315, 318, 322, 325, 327, 329, 330, 331, 332, 333, 334, 335, 342, 361, 362, 370, 374, 379, 381, 382, 387, 390, 401, 406, 418, 422, 424, 428, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 493, 507, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 612, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 718, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 984, 986, 990, 997, 998, 1003, 1004, 1008, 1009, 1013, 1014, 1015, 1016, 1018, 1020, 1022, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1052], "sequenc": [2, 53, 142, 151, 211, 246, 389, 401, 415, 418, 419, 421, 422, 508, 517, 558, 566, 567, 574, 575, 586, 587, 593, 594, 596, 651, 803, 806, 814, 832, 866, 890, 946, 947, 957, 965, 968, 1013, 1035, 1038, 1040, 1041], "predictor": [2, 112, 141, 152, 166, 190, 192, 223, 241, 252, 389, 400, 401, 415, 417, 418, 421, 424, 471, 472, 487, 488, 489, 501, 521, 522, 523, 560, 561, 567, 570, 573, 607, 615, 635, 637, 638, 653, 658, 662, 674, 678, 685, 706, 827, 829, 838, 839, 866, 867, 879, 880, 886, 968, 990, 995, 1015, 1036, 1042, 1045], "make_pipelin": [2, 45, 70, 96, 121, 147, 152, 163, 173, 174, 177, 190, 191, 195, 196, 200, 202, 211, 212, 223, 224, 229, 237, 241, 244, 250, 251, 252, 260, 261, 262, 264, 277, 287, 300, 309, 315, 322, 325, 326, 327, 329, 330, 331, 332, 333, 334, 362, 370, 400, 406, 415, 418, 572, 681, 683, 858, 866, 891, 892, 894, 895, 896, 897, 906, 907, 908, 909, 911, 912, 984, 997, 1004, 1008, 1009, 1038, 1045, 1048], "make_union": [2, 415, 865, 1038, 1042], "binar": [2, 36, 287, 289, 290, 379, 381, 758, 841, 870, 871, 873, 877, 879, 887, 890, 994, 996, 1019, 1030, 1049, 1051], "0": [2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 381, 382, 384, 385, 387, 388, 389, 391, 392, 393, 394, 396, 399, 400, 401, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 926, 927, 931, 932, 934, 935, 936, 937, 938, 940, 942, 943, 945, 946, 947, 948, 955, 956, 957, 959, 960, 962, 963, 964, 965, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1016, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033], "preprocess": [2, 45, 46, 47, 51, 67, 70, 80, 82, 87, 91, 93, 96, 100, 107, 108, 109, 110, 112, 121, 128, 138, 147, 152, 173, 177, 184, 188, 197, 200, 202, 204, 211, 212, 214, 223, 224, 229, 239, 241, 244, 251, 252, 261, 264, 277, 287, 289, 294, 303, 308, 309, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 342, 349, 352, 362, 376, 379, 381, 384, 387, 392, 400, 401, 411, 412, 414, 415, 418, 421, 422, 423, 469, 470, 471, 472, 494, 572, 586, 587, 593, 594, 596, 635, 663, 664, 677, 679, 681, 683, 692, 835, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 906, 907, 908, 909, 911, 912, 984, 990, 995, 998, 1005, 1008, 1009, 1011, 1013, 1015, 1017, 1018, 1019, 1024, 1025, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "functiontransform": [2, 45, 107, 147, 223, 241, 342, 469, 470, 1004, 1040, 1041, 1043, 1048, 1049, 1050, 1052], "kbinsdiscret": [2, 45, 91, 126, 192, 203, 223, 241, 261, 319, 322, 327, 334, 517, 662, 869, 885, 915, 1004, 1015, 1043, 1047, 1048, 1049, 1051], "bin": [2, 45, 64, 65, 67, 91, 112, 144, 148, 223, 254, 260, 286, 305, 320, 321, 322, 323, 324, 326, 327, 385, 395, 405, 413, 420, 421, 443, 444, 453, 466, 566, 567, 869, 871, 885, 945, 1027, 1043, 1044, 1045, 1049, 1053], "interv": [2, 54, 67, 141, 158, 186, 192, 207, 223, 224, 225, 241, 280, 382, 401, 413, 418, 421, 424, 443, 444, 521, 522, 523, 562, 563, 565, 567, 569, 570, 640, 641, 643, 682, 746, 752, 754, 807, 824, 832, 869, 871, 885, 908, 909, 910, 930, 986, 990, 994, 1004, 1010, 1015, 1042, 1046], "kernelcenter": [2, 411, 1004, 1045, 1049, 1051, 1052], "labelbinar": [2, 289, 401, 745, 835, 870, 879, 887, 890, 995, 1019, 1038, 1039, 1040, 1044, 1049], "fashion": [2, 48, 147, 153, 231, 289, 375, 401, 412, 413, 414, 419, 421, 558, 562, 563, 564, 565, 569, 570, 571, 607, 632, 832, 855, 870, 873, 879, 890, 914, 915, 916, 917, 965, 984, 990, 994, 1004, 1044], "labelencod": [2, 401, 574, 880, 1005, 1035, 1043, 1050, 1051], "encod": [2, 45, 49, 52, 86, 93, 108, 128, 147, 158, 163, 192, 195, 196, 197, 205, 222, 223, 260, 289, 319, 321, 322, 323, 331, 333, 334, 349, 361, 363, 379, 381, 383, 389, 392, 399, 401, 415, 418, 419, 421, 422, 424, 469, 492, 501, 508, 531, 536, 542, 544, 545, 547, 549, 550, 551, 553, 556, 566, 567, 571, 572, 574, 586, 593, 594, 596, 635, 653, 663, 664, 674, 677, 685, 739, 805, 810, 812, 829, 832, 866, 867, 869, 871, 873, 874, 877, 879, 880, 887, 890, 904, 983, 984, 990, 991, 994, 996, 997, 999, 1008, 1013, 1014, 1015, 1030, 1036, 1037, 1043, 1047, 1049, 1050, 1051, 1052], "n_class": [2, 47, 75, 125, 126, 142, 144, 149, 151, 174, 176, 238, 244, 255, 258, 268, 287, 288, 289, 309, 310, 329, 366, 369, 370, 387, 389, 401, 421, 442, 493, 494, 507, 520, 524, 528, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 598, 599, 609, 615, 639, 644, 663, 664, 671, 672, 673, 679, 680, 681, 682, 702, 712, 721, 723, 739, 742, 745, 758, 792, 798, 803, 806, 807, 817, 827, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 853, 855, 856, 863, 866, 873, 874, 877, 880, 887, 890, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 916, 918, 919, 931, 932, 990, 994, 995, 998, 1005, 1008, 1009, 1024, 1040, 1041, 1042, 1044, 1045, 1046, 1052], "maxabsscal": [2, 376, 411, 870, 891, 984, 1004, 1040, 1043, 1044, 1045, 1046, 1051, 1052], "minmaxscal": [2, 45, 46, 109, 173, 200, 244, 260, 316, 331, 376, 411, 415, 469, 892, 984, 1004, 1037, 1040, 1043, 1045, 1046, 1047, 1051, 1052], "rang": [2, 45, 46, 47, 48, 49, 51, 53, 57, 58, 60, 61, 65, 66, 67, 71, 72, 75, 76, 78, 80, 84, 85, 86, 88, 89, 93, 98, 99, 101, 102, 103, 114, 115, 117, 118, 142, 144, 145, 146, 149, 155, 158, 162, 172, 176, 180, 195, 196, 200, 207, 212, 213, 217, 221, 223, 224, 227, 230, 231, 239, 241, 244, 246, 253, 254, 259, 260, 266, 268, 271, 272, 275, 279, 280, 281, 283, 284, 285, 287, 288, 289, 291, 292, 293, 294, 299, 304, 310, 313, 318, 320, 325, 326, 329, 333, 334, 339, 349, 357, 361, 362, 366, 369, 375, 381, 382, 384, 387, 389, 393, 396, 401, 409, 414, 418, 421, 424, 445, 466, 474, 476, 477, 478, 479, 480, 481, 483, 486, 496, 499, 500, 519, 532, 546, 558, 559, 564, 565, 568, 593, 594, 596, 634, 637, 643, 645, 653, 654, 674, 676, 681, 682, 683, 685, 697, 717, 735, 750, 792, 832, 838, 852, 854, 856, 857, 862, 876, 883, 884, 885, 891, 892, 895, 896, 899, 900, 942, 943, 962, 983, 990, 994, 998, 1008, 1014, 1018, 1022, 1023, 1024, 1026, 1040, 1041, 1042, 1043, 1045, 1048, 1051], "multilabelbinar": [2, 401, 835, 870, 879, 995, 1019, 1038, 1040, 1041, 1043, 1044], "individu": [2, 45, 84, 98, 116, 141, 143, 145, 163, 172, 188, 192, 193, 198, 223, 241, 251, 260, 261, 283, 285, 299, 329, 336, 353, 357, 375, 388, 391, 394, 396, 401, 404, 406, 412, 415, 418, 421, 422, 442, 457, 467, 469, 501, 506, 508, 514, 560, 561, 564, 565, 567, 568, 570, 572, 573, 574, 575, 608, 614, 615, 637, 638, 648, 650, 662, 663, 664, 673, 676, 677, 678, 679, 680, 681, 682, 683, 692, 717, 724, 732, 738, 754, 755, 789, 794, 795, 803, 817, 834, 838, 839, 841, 842, 843, 844, 845, 864, 867, 875, 876, 878, 879, 880, 883, 885, 886, 891, 892, 893, 906, 907, 994, 995, 1004, 1009, 1015, 1023, 1028, 1030, 1036, 1039, 1041, 1047, 1049, 1051], "unit": [2, 66, 107, 116, 195, 200, 223, 241, 305, 317, 320, 362, 382, 387, 388, 389, 393, 395, 396, 419, 422, 426, 469, 494, 495, 524, 529, 537, 538, 539, 546, 547, 594, 595, 596, 612, 613, 616, 663, 664, 681, 690, 704, 774, 853, 862, 863, 864, 870, 876, 878, 882, 884, 886, 892, 893, 894, 896, 897, 906, 907, 990, 992, 993, 994, 999, 1004, 1010, 1013, 1026, 1039, 1043, 1049, 1050], "onehotencod": [2, 45, 108, 147, 152, 163, 195, 196, 223, 241, 252, 260, 262, 264, 326, 330, 332, 335, 336, 381, 401, 415, 421, 471, 472, 571, 586, 587, 869, 873, 874, 877, 880, 887, 984, 1004, 1036, 1039, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "hot": [2, 45, 108, 147, 150, 163, 195, 223, 289, 321, 322, 326, 331, 349, 401, 421, 422, 556, 571, 586, 653, 663, 664, 674, 685, 869, 871, 873, 874, 877, 879, 880, 887, 990, 1004, 1043, 1049, 1050], "numer": [2, 45, 54, 60, 104, 108, 112, 150, 152, 163, 177, 184, 187, 196, 197, 212, 223, 241, 260, 262, 264, 310, 326, 332, 336, 363, 381, 382, 384, 390, 392, 393, 399, 400, 401, 414, 416, 421, 422, 423, 424, 426, 427, 445, 448, 452, 464, 476, 477, 480, 483, 494, 495, 496, 501, 505, 506, 507, 509, 510, 515, 536, 538, 540, 545, 552, 566, 567, 572, 586, 595, 616, 622, 625, 632, 635, 637, 638, 651, 657, 659, 677, 692, 695, 699, 719, 792, 798, 803, 806, 807, 809, 817, 825, 828, 829, 830, 833, 841, 842, 843, 844, 845, 863, 864, 869, 874, 879, 880, 887, 918, 919, 920, 926, 927, 942, 943, 983, 984, 990, 991, 995, 1002, 1004, 1005, 1010, 1017, 1018, 1019, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ordinalencod": [2, 152, 163, 196, 197, 223, 260, 326, 334, 381, 401, 586, 842, 874, 879, 887, 984, 996, 1004, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052], "integ": [2, 45, 58, 86, 91, 108, 195, 223, 241, 330, 331, 370, 374, 381, 382, 384, 389, 392, 396, 400, 401, 414, 415, 418, 419, 421, 422, 439, 442, 467, 469, 472, 477, 492, 501, 503, 506, 507, 508, 510, 513, 514, 517, 519, 520, 524, 527, 555, 564, 565, 566, 567, 568, 572, 573, 577, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 637, 638, 649, 656, 660, 664, 670, 678, 680, 681, 683, 704, 719, 739, 803, 805, 806, 807, 808, 810, 812, 817, 818, 819, 822, 823, 826, 829, 837, 840, 842, 845, 846, 847, 871, 879, 880, 885, 886, 887, 890, 900, 902, 914, 915, 916, 917, 922, 957, 958, 959, 963, 984, 990, 995, 997, 1004, 1007, 1009, 1010, 1019, 1026, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "polynomialfeatur": [2, 45, 202, 223, 224, 229, 262, 294, 331, 353, 885, 990, 1004, 1039, 1043, 1044, 1045, 1048, 1049, 1051, 1052], "interact": [2, 44, 156, 158, 192, 223, 248, 252, 281, 330, 386, 388, 389, 391, 393, 399, 401, 402, 415, 564, 565, 566, 567, 637, 638, 881, 885, 983, 986, 990, 991, 992, 999, 1001, 1004, 1012, 1014, 1037, 1042, 1049, 1050], "powertransform": [2, 324, 883, 894, 984, 1004, 1043, 1046, 1049, 1051], "power": [2, 45, 48, 58, 148, 153, 194, 224, 241, 272, 283, 288, 304, 320, 321, 324, 338, 346, 374, 375, 400, 413, 414, 417, 420, 421, 422, 425, 449, 487, 488, 489, 537, 540, 546, 549, 635, 685, 699, 728, 751, 753, 756, 848, 849, 856, 857, 859, 860, 881, 882, 883, 894, 895, 942, 943, 990, 991, 994, 1002, 1004, 1008, 1009, 1018, 1038, 1041, 1043, 1045, 1046, 1048, 1052], "featurewis": [2, 882], "more": [2, 11, 36, 45, 47, 48, 49, 52, 53, 54, 55, 60, 65, 66, 67, 69, 70, 75, 77, 78, 81, 82, 84, 87, 90, 91, 93, 95, 98, 105, 112, 116, 123, 124, 126, 128, 131, 134, 135, 142, 143, 145, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 163, 177, 179, 185, 188, 191, 192, 195, 196, 198, 200, 202, 203, 207, 209, 212, 214, 217, 221, 223, 224, 225, 227, 238, 239, 240, 241, 243, 247, 250, 255, 256, 257, 258, 260, 262, 266, 268, 269, 271, 272, 274, 278, 280, 281, 282, 283, 287, 289, 297, 299, 300, 302, 303, 310, 315, 316, 318, 320, 321, 322, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 339, 346, 349, 353, 354, 357, 359, 361, 362, 363, 365, 366, 370, 374, 375, 376, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 400, 401, 402, 405, 406, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 939, 941, 943, 945, 957, 960, 962, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1018, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "quantiletransform": [2, 112, 196, 324, 415, 470, 882, 895, 984, 1004, 1042, 1043, 1044, 1045, 1046, 1051, 1053], "robustscal": [2, 260, 883, 896, 984, 1004, 1040, 1041, 1043, 1045, 1046, 1047, 1051], "splinetransform": [2, 45, 224, 260, 332, 881, 1004, 1048, 1050, 1051], "spline": [2, 192, 201, 202, 294, 305, 521, 522, 523, 677, 867, 881, 885, 1013, 1015, 1048], "standardscal": [2, 47, 51, 70, 82, 87, 93, 96, 100, 108, 110, 121, 138, 163, 177, 195, 202, 211, 212, 214, 223, 239, 241, 251, 252, 260, 261, 262, 264, 277, 287, 303, 308, 309, 315, 322, 325, 329, 330, 332, 333, 334, 336, 349, 352, 370, 376, 387, 389, 392, 396, 400, 415, 418, 435, 471, 472, 572, 681, 683, 866, 867, 870, 883, 897, 906, 907, 908, 909, 911, 912, 984, 991, 998, 1004, 1008, 1009, 1011, 1024, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "standard": [2, 52, 53, 54, 61, 66, 71, 73, 93, 99, 107, 108, 110, 116, 117, 121, 129, 142, 145, 147, 148, 149, 150, 151, 159, 163, 177, 179, 184, 186, 188, 195, 202, 208, 212, 221, 223, 232, 243, 244, 245, 255, 260, 271, 275, 278, 279, 280, 281, 283, 320, 325, 347, 361, 374, 375, 379, 380, 381, 383, 384, 385, 387, 389, 390, 392, 393, 396, 399, 401, 405, 409, 411, 414, 416, 417, 418, 422, 424, 451, 473, 477, 493, 501, 506, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 529, 530, 535, 537, 540, 546, 557, 595, 599, 616, 639, 649, 650, 677, 678, 679, 680, 681, 683, 692, 694, 698, 792, 809, 824, 825, 843, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 870, 875, 876, 879, 882, 883, 884, 886, 894, 895, 896, 897, 904, 906, 907, 926, 983, 986, 990, 991, 994, 996, 997, 998, 1000, 1008, 1009, 1014, 1018, 1019, 1024, 1026, 1027, 1028, 1030, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "targetencod": [2, 326, 327, 401, 879, 880, 984, 1004, 1013, 1051, 1052], "add_dummy_featur": 2, "augment": [2, 341, 635, 888, 1002, 1018], "boolean": [2, 140, 369, 382, 387, 389, 396, 415, 421, 422, 423, 469, 566, 567, 586, 587, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 634, 637, 638, 641, 654, 676, 704, 835, 841, 862, 869, 889, 922, 978, 984, 990, 996, 1001, 1004, 1010, 1035, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050], "label_binar": [2, 287, 289, 873, 1039], "maxabs_scal": [2, 401, 875, 1043], "without": [2, 45, 46, 54, 55, 64, 74, 80, 82, 85, 90, 93, 94, 100, 104, 105, 112, 133, 148, 153, 154, 157, 158, 160, 163, 169, 173, 177, 186, 192, 194, 195, 196, 207, 212, 231, 250, 254, 257, 258, 260, 261, 263, 274, 281, 285, 287, 297, 300, 301, 302, 303, 309, 310, 311, 312, 320, 321, 325, 327, 329, 353, 357, 362, 376, 382, 383, 385, 387, 388, 389, 391, 392, 393, 396, 399, 400, 401, 406, 409, 414, 415, 419, 421, 422, 423, 424, 439, 444, 446, 451, 463, 474, 479, 501, 509, 520, 537, 539, 560, 561, 568, 584, 585, 616, 632, 636, 639, 644, 664, 697, 705, 785, 806, 807, 808, 815, 817, 831, 832, 848, 855, 859, 865, 866, 869, 872, 875, 876, 878, 882, 883, 884, 886, 891, 906, 922, 963, 983, 984, 986, 988, 990, 991, 994, 997, 1000, 1004, 1008, 1009, 1010, 1013, 1014, 1015, 1019, 1020, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "break": [2, 58, 77, 84, 107, 117, 192, 212, 215, 229, 257, 268, 297, 332, 339, 344, 361, 363, 387, 389, 391, 393, 400, 414, 474, 517, 644, 778, 782, 785, 801, 879, 886, 891, 908, 911, 990, 993, 1002, 1004, 1009, 1014, 1015, 1035, 1036, 1042, 1043, 1045, 1047, 1051], "sparsiti": [2, 55, 69, 83, 118, 134, 192, 201, 207, 208, 216, 234, 238, 239, 256, 357, 362, 374, 401, 416, 419, 421, 423, 506, 507, 532, 536, 542, 543, 544, 545, 548, 550, 551, 552, 651, 657, 662, 663, 681, 683, 726, 727, 728, 875, 881, 886, 891, 987, 990, 997, 1004, 1015, 1022, 1027, 1037], "minmax_scal": [2, 318, 320, 876, 1040, 1043], "length": [2, 83, 107, 123, 124, 126, 136, 138, 151, 177, 179, 180, 181, 184, 185, 187, 200, 206, 257, 258, 261, 264, 303, 331, 334, 346, 363, 380, 384, 387, 395, 396, 401, 415, 419, 421, 422, 424, 450, 495, 513, 514, 517, 520, 528, 556, 568, 586, 587, 594, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 637, 651, 652, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 686, 689, 785, 803, 806, 807, 817, 832, 834, 837, 838, 840, 848, 849, 850, 852, 854, 893, 919, 926, 928, 932, 948, 949, 965, 968, 993, 1000, 1004, 1019, 1025, 1026, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1051], "power_transform": [2, 882, 895, 1043], "parametr": [2, 50, 64, 65, 118, 253, 304, 324, 332, 413, 415, 420, 421, 442, 556, 558, 640, 690, 701, 882, 894, 937, 938, 990, 993, 996, 997, 1004, 1007, 1010, 1043, 1045, 1048], "quantile_transform": [2, 112, 883, 894, 1004, 1042, 1043, 1044, 1053], "robust_scal": [2, 884, 895, 1043], "ani": [2, 25, 37, 45, 49, 50, 54, 55, 60, 82, 84, 93, 95, 105, 158, 160, 172, 177, 184, 185, 186, 194, 195, 196, 197, 198, 212, 223, 227, 241, 250, 253, 254, 257, 267, 271, 272, 280, 281, 283, 286, 289, 297, 313, 320, 321, 324, 329, 331, 332, 334, 349, 353, 363, 370, 374, 375, 376, 381, 382, 384, 385, 387, 389, 391, 392, 393, 395, 400, 401, 402, 405, 406, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 439, 445, 451, 453, 454, 455, 457, 459, 461, 462, 466, 469, 472, 493, 494, 513, 514, 528, 539, 542, 544, 551, 556, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 584, 585, 587, 593, 594, 596, 598, 608, 615, 616, 625, 632, 637, 638, 650, 653, 663, 664, 671, 672, 673, 674, 681, 682, 683, 684, 685, 697, 701, 704, 705, 709, 721, 722, 724, 728, 740, 741, 756, 759, 761, 778, 782, 783, 784, 785, 796, 797, 799, 803, 806, 807, 815, 816, 835, 838, 846, 847, 852, 856, 865, 866, 870, 871, 875, 877, 879, 880, 887, 896, 897, 900, 903, 906, 907, 914, 915, 916, 917, 918, 920, 922, 926, 927, 964, 978, 983, 984, 986, 989, 990, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1017, 1019, 1021, 1025, 1026, 1028, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "axi": [2, 45, 46, 48, 52, 53, 54, 55, 56, 58, 60, 65, 66, 75, 77, 78, 85, 86, 88, 90, 91, 92, 93, 99, 108, 109, 112, 118, 121, 125, 126, 128, 129, 130, 131, 132, 137, 144, 145, 149, 151, 159, 162, 166, 170, 173, 183, 184, 188, 190, 194, 195, 204, 208, 210, 212, 215, 216, 217, 223, 228, 232, 235, 237, 238, 240, 241, 244, 245, 248, 250, 254, 255, 259, 266, 268, 270, 271, 276, 277, 281, 282, 287, 289, 290, 299, 300, 305, 306, 307, 310, 311, 312, 318, 320, 324, 327, 336, 339, 341, 343, 345, 348, 349, 352, 354, 355, 356, 357, 359, 361, 362, 366, 367, 368, 369, 382, 389, 396, 401, 413, 414, 422, 426, 443, 450, 469, 472, 536, 538, 541, 542, 544, 546, 548, 550, 551, 555, 590, 617, 636, 637, 690, 691, 706, 767, 783, 784, 785, 786, 809, 825, 834, 875, 876, 883, 884, 886, 891, 892, 893, 895, 896, 897, 920, 922, 926, 927, 945, 969, 975, 984, 994, 1001, 1004, 1009, 1025, 1027, 1043, 1045, 1047, 1052], "gaussianrandomproject": [2, 899, 1006, 1036, 1049, 1051, 1052], "reduc": [2, 37, 45, 48, 80, 83, 84, 85, 86, 91, 108, 109, 114, 145, 155, 157, 158, 161, 174, 195, 202, 203, 207, 221, 227, 228, 231, 252, 254, 257, 260, 281, 287, 297, 309, 322, 325, 326, 334, 362, 363, 370, 379, 381, 384, 387, 393, 399, 401, 413, 414, 416, 418, 419, 421, 422, 423, 425, 449, 450, 455, 462, 465, 498, 539, 549, 554, 560, 561, 562, 563, 568, 569, 570, 571, 578, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 632, 648, 657, 677, 678, 679, 680, 692, 697, 700, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 833, 875, 876, 883, 895, 898, 899, 906, 907, 914, 915, 916, 917, 983, 986, 988, 989, 990, 991, 994, 997, 1006, 1007, 1009, 1011, 1019, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1051], "random_project": [2, 244, 254, 898, 899, 900, 1006, 1011, 1036, 1041, 1051, 1052], "sparserandomproject": [2, 244, 254, 898, 1006, 1036, 1041, 1049, 1051, 1052], "johnson_lindenstrauss_min_dim": [2, 254, 1006, 1036], "find": [2, 45, 46, 47, 53, 58, 67, 78, 84, 85, 86, 87, 90, 91, 93, 95, 103, 110, 116, 117, 128, 130, 132, 133, 138, 153, 163, 179, 183, 185, 187, 196, 207, 211, 212, 225, 231, 243, 245, 247, 248, 253, 260, 271, 279, 280, 281, 291, 303, 308, 309, 310, 325, 329, 335, 351, 352, 353, 357, 361, 362, 365, 375, 384, 385, 387, 388, 389, 392, 393, 396, 399, 400, 401, 402, 412, 414, 416, 417, 419, 421, 422, 423, 425, 446, 449, 450, 451, 455, 456, 457, 458, 467, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 563, 570, 587, 594, 615, 616, 652, 655, 658, 659, 660, 661, 663, 664, 676, 693, 712, 733, 734, 742, 786, 787, 788, 791, 792, 798, 803, 817, 848, 849, 850, 852, 854, 856, 857, 858, 879, 880, 885, 898, 899, 900, 914, 915, 917, 923, 942, 943, 945, 983, 984, 986, 989, 990, 991, 993, 994, 995, 998, 1000, 1004, 1008, 1009, 1010, 1012, 1014, 1017, 1018, 1019, 1021, 1023, 1024, 1026, 1027, 1028, 1035, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1053], "safe": [2, 75, 195, 212, 257, 362, 387, 389, 414, 415, 439, 513, 514, 593, 596, 602, 778, 782, 865, 900, 960, 966, 997, 1041, 1042, 1043, 1048, 1049], "randomli": [2, 54, 75, 86, 88, 99, 108, 120, 122, 144, 145, 158, 159, 182, 190, 192, 196, 235, 240, 254, 258, 271, 275, 286, 297, 299, 338, 341, 370, 375, 396, 399, 400, 414, 418, 421, 424, 454, 463, 517, 520, 524, 528, 536, 542, 550, 551, 556, 564, 565, 566, 567, 568, 569, 570, 615, 616, 676, 684, 695, 699, 721, 801, 802, 862, 900, 914, 915, 916, 917, 993, 995, 997, 1000, 1002, 1006, 1010, 1015, 1026, 1028, 1046, 1050, 1052], "labelpropag": [2, 333, 340, 902, 903, 995, 1007, 1036, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1051], "semi_supervis": [2, 192, 331, 333, 337, 338, 339, 340, 341, 342, 343, 406, 901, 902, 903, 995, 1007, 1015, 1036, 1041, 1042, 1049, 1050], "labelspread": [2, 333, 338, 339, 340, 342, 343, 901, 903, 995, 1007, 1036, 1041, 1042, 1045, 1046, 1049, 1050, 1051], "semi": [2, 38, 60, 70, 151, 161, 170, 181, 255, 258, 322, 331, 346, 353, 363, 382, 401, 493, 509, 540, 593, 595, 681, 733, 832, 866, 870, 901, 902, 903, 911, 992, 997, 1000, 1015, 1016, 1030, 1035, 1047, 1050], "supervis": [2, 27, 32, 34, 38, 60, 65, 67, 70, 75, 87, 92, 96, 121, 136, 147, 151, 158, 161, 169, 170, 181, 244, 255, 258, 268, 280, 309, 322, 331, 341, 346, 353, 362, 363, 374, 382, 389, 400, 401, 413, 414, 417, 418, 419, 421, 422, 424, 442, 444, 469, 493, 508, 509, 558, 593, 595, 598, 599, 639, 681, 733, 804, 805, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 831, 832, 855, 865, 866, 870, 880, 887, 901, 902, 903, 911, 988, 991, 994, 996, 997, 1000, 1004, 1005, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1019, 1020, 1022, 1028, 1030, 1035, 1041, 1047], "selftrainingclassifi": [2, 331, 341, 342, 343, 406, 1007, 1047, 1052], "self": [2, 49, 57, 60, 65, 67, 94, 103, 140, 187, 192, 257, 300, 337, 343, 349, 361, 381, 387, 388, 389, 392, 393, 394, 395, 414, 422, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 505, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 708, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 822, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 951, 952, 954, 955, 960, 968, 997, 1014, 1015, 1016, 1018, 1030, 1037, 1042, 1049], "linearsvc": [2, 65, 67, 107, 109, 173, 174, 192, 200, 255, 277, 279, 287, 322, 329, 344, 346, 350, 351, 357, 361, 374, 389, 393, 413, 422, 423, 442, 517, 572, 582, 636, 644, 648, 657, 677, 678, 679, 680, 681, 692, 739, 746, 829, 834, 907, 908, 911, 913, 990, 994, 995, 1009, 1015, 1035, 1036, 1037, 1041, 1043, 1046, 1051], "linearsvr": [2, 573, 912, 1009, 1039, 1041, 1046, 1051], "nusvc": [2, 355, 374, 442, 909, 995, 1009, 1035, 1036, 1037, 1040, 1043, 1045, 1046, 1047, 1049], "nu": [2, 48, 50, 52, 188, 237, 250, 348, 374, 421, 424, 624, 682, 908, 909, 910, 1000, 1008, 1009, 1046, 1050], "nusvr": [2, 48, 374, 912, 1009, 1037, 1043, 1045, 1046, 1047, 1049, 1050], "oneclasssvm": [2, 50, 52, 57, 237, 250, 332, 348, 568, 682, 852, 1000, 1008, 1009, 1037, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "svc": [2, 47, 57, 65, 67, 69, 70, 71, 107, 111, 153, 164, 170, 175, 180, 192, 200, 214, 227, 255, 258, 262, 274, 278, 280, 282, 285, 286, 287, 290, 291, 295, 322, 325, 329, 331, 341, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 358, 359, 361, 374, 389, 393, 401, 409, 413, 415, 418, 421, 440, 441, 442, 473, 520, 560, 702, 703, 705, 707, 803, 820, 833, 835, 866, 903, 904, 906, 908, 982, 983, 989, 992, 994, 995, 1004, 1015, 1019, 1023, 1024, 1026, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "c": [2, 45, 47, 48, 49, 52, 53, 57, 60, 64, 65, 67, 69, 70, 73, 77, 78, 80, 81, 83, 90, 94, 95, 97, 98, 99, 103, 108, 109, 111, 121, 124, 125, 126, 133, 134, 142, 144, 145, 151, 152, 159, 161, 162, 164, 165, 170, 175, 177, 180, 181, 182, 183, 187, 200, 206, 208, 213, 214, 215, 216, 218, 220, 221, 230, 232, 234, 235, 236, 237, 239, 240, 243, 244, 245, 247, 248, 255, 256, 258, 262, 267, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 283, 285, 289, 291, 300, 303, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 318, 320, 321, 322, 325, 329, 330, 331, 332, 333, 334, 335, 336, 340, 343, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 366, 367, 368, 374, 375, 381, 382, 384, 385, 387, 388, 389, 390, 392, 395, 396, 399, 405, 406, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 427, 442, 447, 448, 451, 452, 454, 464, 473, 480, 528, 533, 539, 543, 545, 546, 552, 554, 555, 595, 612, 613, 615, 636, 644, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 684, 690, 691, 693, 694, 697, 698, 713, 719, 720, 723, 735, 739, 745, 746, 762, 763, 803, 817, 825, 831, 833, 841, 842, 843, 844, 845, 846, 847, 853, 855, 862, 877, 879, 880, 881, 885, 887, 901, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 921, 926, 927, 957, 983, 986, 987, 989, 990, 991, 992, 994, 996, 997, 999, 1001, 1004, 1006, 1008, 1009, 1010, 1013, 1018, 1019, 1023, 1024, 1026, 1027, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051], "svr": [2, 48, 51, 192, 249, 329, 344, 374, 440, 441, 561, 572, 573, 598, 599, 648, 683, 803, 809, 907, 909, 911, 987, 1015, 1021, 1026, 1035, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "l1_min_c": [2, 216, 990, 1009, 1035], "lowest": [2, 112, 121, 196, 207, 271, 381, 414, 418, 640, 642, 806, 807, 810, 913, 914, 991, 994, 1010, 1050], "bound": [2, 67, 93, 183, 185, 187, 192, 225, 241, 249, 279, 385, 394, 414, 419, 422, 424, 425, 449, 494, 507, 517, 528, 541, 600, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 640, 642, 655, 659, 663, 682, 710, 739, 792, 801, 802, 846, 847, 883, 895, 898, 899, 900, 908, 909, 910, 913, 930, 962, 990, 993, 994, 997, 1006, 1008, 1009, 1011, 1015, 1043, 1046, 1047, 1049], "decisiontreeclassifi": [2, 70, 142, 144, 151, 164, 284, 297, 335, 365, 366, 369, 401, 421, 558, 560, 562, 564, 566, 569, 636, 716, 809, 830, 915, 916, 918, 919, 920, 984, 995, 1010, 1036, 1037, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "decisiontreeregressor": [2, 143, 145, 261, 321, 329, 335, 367, 368, 392, 559, 561, 563, 564, 565, 567, 569, 570, 637, 638, 914, 917, 919, 938, 984, 1010, 1036, 1037, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "extratreeclassifi": [2, 562, 571, 917, 995, 1039, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "extrem": [2, 155, 223, 225, 259, 260, 320, 327, 341, 362, 387, 390, 414, 419, 562, 563, 569, 570, 571, 637, 638, 684, 728, 756, 916, 917, 918, 920, 994, 996], "extratreeregressor": [2, 563, 568, 571, 916, 1000, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "export_graphviz": [2, 1010, 1040, 1042, 1048, 1050, 1051], "export": [2, 385, 388, 389, 405, 409, 918, 919, 1010, 1013, 1044], "export_text": [2, 1010, 1044, 1051], "plot_tre": [2, 366, 369, 1010, 1044, 1046, 1047, 1048, 1050, 1051], "bunch": [2, 52, 380, 381, 382, 469, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 515, 572, 573, 574, 575, 637, 638, 639, 865, 866, 914, 915, 916, 917, 951, 954, 1018, 1028, 1040, 1042, 1045, 1047, 1051], "expos": [2, 177, 257, 297, 332, 334, 375, 380, 384, 401, 406, 413, 415, 421, 423, 424, 442, 469, 558, 559, 566, 567, 572, 573, 574, 575, 598, 599, 607, 616, 803, 806, 807, 817, 835, 836, 837, 838, 839, 840, 921, 962, 990, 994, 996, 1023, 1025, 1027, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "kei": [2, 49, 51, 54, 58, 60, 80, 148, 152, 163, 190, 194, 241, 257, 260, 263, 281, 283, 284, 330, 331, 332, 333, 334, 335, 336, 376, 380, 389, 392, 393, 394, 399, 401, 402, 405, 406, 414, 415, 418, 424, 469, 477, 566, 567, 572, 573, 574, 575, 593, 596, 599, 622, 631, 637, 638, 639, 664, 716, 803, 806, 807, 815, 817, 829, 865, 866, 921, 931, 959, 1002, 1014, 1028, 1032, 1041, 1047, 1048, 1050, 1051], "attribut": [2, 49, 65, 71, 87, 108, 136, 140, 142, 149, 150, 153, 173, 177, 223, 231, 257, 271, 278, 279, 284, 292, 309, 313, 332, 353, 363, 369, 376, 380, 381, 382, 384, 387, 390, 394, 399, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 429, 430, 431, 432, 433, 436, 437, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 622, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 740, 799, 801, 802, 803, 806, 807, 809, 817, 825, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 921, 955, 978, 986, 988, 990, 995, 997, 998, 1000, 1004, 1007, 1008, 1009, 1010, 1018, 1019, 1025, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "_safe_index": [2, 1048, 1052], "item": [2, 49, 50, 51, 52, 53, 54, 58, 60, 69, 81, 93, 112, 146, 148, 152, 155, 163, 195, 221, 225, 231, 244, 256, 257, 259, 268, 277, 283, 333, 339, 362, 380, 387, 388, 389, 396, 415, 469, 531, 566, 567, 593, 594, 596, 637, 815, 879, 901, 902, 921, 922, 948, 986, 1007, 1014, 1019], "as_float_arrai": [2, 396], "float": [2, 48, 51, 53, 54, 57, 60, 79, 83, 84, 85, 86, 91, 98, 99, 103, 104, 105, 108, 131, 134, 170, 187, 195, 209, 213, 246, 279, 280, 284, 288, 357, 363, 374, 381, 382, 387, 396, 401, 414, 415, 422, 423, 425, 426, 427, 431, 433, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 588, 589, 593, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 615, 616, 618, 619, 620, 621, 622, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 763, 770, 773, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 817, 820, 823, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 866, 869, 872, 873, 879, 880, 882, 884, 886, 887, 888, 889, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 926, 927, 930, 940, 941, 957, 969, 975, 980, 984, 994, 995, 997, 998, 1004, 1009, 1010, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "assert_all_finit": [2, 374, 396, 473], "throw": [2, 317, 396, 925, 1039, 1042, 1043, 1044, 1045, 1049], "valueerror": [2, 57, 184, 257, 258, 389, 393, 406, 473, 582, 608, 622, 640, 676, 719, 838, 856, 865, 871, 885, 925, 929, 930, 979, 980, 981, 1004, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "nan": [2, 54, 112, 152, 158, 190, 191, 195, 241, 260, 262, 264, 275, 283, 326, 329, 334, 335, 336, 374, 379, 389, 396, 401, 421, 451, 473, 501, 560, 561, 562, 566, 567, 569, 598, 599, 602, 608, 611, 614, 632, 633, 634, 635, 640, 717, 718, 719, 726, 727, 728, 732, 733, 734, 773, 782, 787, 788, 789, 791, 803, 806, 807, 809, 817, 825, 828, 829, 830, 833, 875, 876, 880, 882, 883, 886, 887, 891, 894, 895, 897, 924, 925, 926, 927, 969, 983, 994, 1004, 1010, 1030, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "infin": [2, 280, 357, 546, 687, 688, 717, 827, 913, 925, 997], "deprec": [2, 16, 57, 332, 375, 390, 391, 396, 401, 406, 446, 450, 451, 452, 454, 455, 462, 464, 483, 531, 532, 541, 542, 543, 544, 545, 551, 558, 574, 575, 584, 585, 587, 632, 638, 643, 649, 650, 681, 682, 697, 714, 745, 746, 754, 755, 782, 783, 784, 786, 806, 807, 809, 827, 828, 829, 853, 865, 908, 911, 922, 937, 938, 983, 984, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decor": [2, 196, 329, 387, 388, 389, 396, 809, 825, 933, 937, 938, 955, 961, 1045, 1048, 1051], "mark": [2, 73, 96, 126, 172, 191, 284, 291, 379, 387, 389, 391, 395, 396, 401, 414, 540, 612, 613, 616, 637, 663, 859, 860, 901, 902, 919, 933, 938, 943, 990, 1018, 1030, 1035, 1036, 1041, 1043, 1044, 1051, 1052, 1053], "estimator_html_repr": [2, 389, 415, 1046, 1047, 1048, 1049, 1052], "html": [2, 45, 49, 53, 66, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 177, 184, 188, 195, 196, 197, 200, 204, 251, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369, 382, 384, 387, 388, 390, 391, 395, 415, 418, 422, 428, 492, 513, 514, 663, 841, 845, 939, 992, 1013, 1014, 1046, 1047, 1048, 1049, 1050, 1052], "gen_batch": [2, 396, 947], "slice": [2, 45, 54, 58, 151, 158, 232, 245, 248, 255, 308, 311, 332, 333, 345, 382, 388, 389, 396, 415, 469, 472, 498, 499, 513, 551, 644, 778, 782, 785, 922, 946, 947, 965, 1047, 1049], "batch_siz": [2, 56, 60, 80, 102, 128, 131, 132, 362, 419, 454, 539, 541, 542, 543, 544, 551, 862, 863, 864, 946, 947, 960, 1036, 1043, 1046, 1048, 1049], "gen_even_slic": [2, 223, 396, 946], "n_pack": [2, 946, 947], "evenli": [2, 49, 77, 90, 155, 198, 227, 275, 422, 947, 1028], "space": [2, 37, 45, 49, 51, 60, 70, 84, 86, 91, 95, 96, 98, 99, 101, 103, 107, 108, 111, 121, 128, 130, 136, 138, 147, 151, 155, 161, 174, 177, 179, 185, 200, 207, 224, 243, 244, 245, 247, 254, 255, 256, 260, 261, 267, 272, 288, 291, 292, 300, 309, 310, 322, 331, 353, 361, 362, 363, 369, 370, 374, 379, 382, 383, 384, 387, 394, 399, 400, 401, 412, 414, 417, 419, 420, 421, 422, 424, 448, 452, 453, 454, 457, 467, 469, 470, 471, 472, 487, 488, 489, 493, 503, 537, 539, 540, 543, 544, 545, 546, 548, 549, 554, 578, 587, 593, 594, 596, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 643, 645, 646, 647, 648, 693, 694, 695, 697, 698, 699, 701, 704, 803, 806, 807, 809, 817, 825, 836, 846, 847, 854, 855, 856, 857, 866, 871, 872, 878, 883, 898, 899, 900, 919, 947, 986, 987, 988, 989, 990, 992, 994, 995, 997, 998, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1019, 1026, 1028, 1029, 1030, 1035, 1036, 1038, 1043, 1044, 1045, 1049, 1050, 1051], "up": [2, 49, 52, 75, 82, 84, 85, 86, 90, 93, 95, 100, 107, 116, 117, 123, 126, 140, 147, 158, 191, 196, 202, 207, 216, 224, 239, 240, 268, 282, 285, 300, 313, 318, 321, 326, 333, 339, 346, 353, 357, 361, 363, 376, 381, 382, 387, 391, 393, 394, 395, 396, 399, 401, 402, 413, 414, 419, 421, 422, 448, 452, 453, 454, 455, 457, 461, 464, 465, 466, 513, 514, 541, 554, 555, 562, 563, 564, 565, 566, 567, 569, 570, 571, 615, 632, 637, 638, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 686, 687, 688, 689, 697, 710, 773, 801, 802, 805, 806, 807, 809, 830, 880, 881, 884, 896, 914, 915, 916, 917, 920, 943, 946, 947, 983, 986, 990, 991, 994, 997, 1004, 1008, 1009, 1014, 1017, 1018, 1027, 1028, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "murmurhash3_32": [2, 396], "32bit": [2, 374, 959], "murmurhash3": [2, 422, 587, 594, 959], "resampl": [2, 90, 155, 184, 195, 241, 304, 396, 399, 401, 560, 561, 968, 1014, 1044, 1048], "consist": [2, 45, 48, 66, 71, 75, 94, 95, 107, 116, 124, 126, 128, 148, 152, 158, 159, 166, 177, 182, 184, 187, 191, 198, 223, 241, 256, 260, 286, 289, 317, 325, 329, 332, 357, 362, 370, 374, 380, 382, 384, 387, 389, 393, 394, 395, 396, 400, 401, 402, 413, 414, 416, 420, 421, 422, 432, 433, 436, 437, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 495, 502, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 559, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 596, 616, 632, 633, 634, 635, 640, 643, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 679, 682, 683, 684, 692, 693, 694, 695, 696, 705, 739, 801, 802, 810, 834, 835, 836, 838, 839, 840, 841, 849, 850, 852, 854, 857, 858, 864, 869, 870, 871, 873, 877, 878, 881, 882, 884, 885, 887, 898, 899, 902, 906, 907, 909, 910, 912, 915, 917, 926, 928, 949, 965, 968, 983, 986, 987, 988, 990, 991, 993, 994, 995, 997, 998, 1004, 1007, 1009, 1010, 1012, 1014, 1018, 1019, 1026, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "safe_mask": [2, 396], "safe_sqr": [2, 396], "check_x_i": [2, 389, 396, 1039, 1043, 1044, 1049], "check_arrai": [2, 389, 396, 473, 539, 904, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "check_consistent_length": 2, "check": [2, 41, 45, 46, 49, 58, 84, 91, 94, 132, 140, 148, 163, 179, 192, 194, 196, 197, 209, 211, 212, 223, 244, 257, 267, 273, 289, 297, 332, 340, 369, 374, 375, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 397, 399, 401, 405, 406, 409, 415, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 478, 479, 480, 481, 487, 488, 489, 490, 496, 507, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 692, 693, 694, 695, 696, 697, 698, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 926, 927, 928, 937, 938, 949, 950, 951, 955, 956, 978, 979, 980, 982, 989, 990, 991, 994, 1009, 1010, 1014, 1015, 1018, 1030, 1035, 1036, 1038, 1042, 1046, 1047, 1048, 1049, 1050, 1052], "dimens": [2, 37, 50, 53, 54, 56, 75, 78, 91, 118, 120, 124, 128, 177, 181, 183, 185, 187, 196, 206, 207, 221, 245, 247, 250, 254, 255, 261, 267, 268, 304, 305, 309, 323, 353, 361, 362, 363, 382, 384, 388, 401, 414, 419, 420, 424, 426, 447, 448, 450, 452, 453, 454, 457, 469, 470, 487, 488, 489, 498, 499, 520, 529, 530, 534, 535, 538, 546, 554, 587, 588, 589, 590, 592, 594, 602, 616, 624, 627, 646, 649, 664, 695, 696, 697, 699, 700, 704, 768, 827, 846, 847, 851, 865, 898, 899, 900, 908, 909, 910, 911, 912, 926, 927, 928, 957, 965, 968, 984, 986, 988, 990, 991, 992, 995, 997, 998, 1000, 1006, 1009, 1019, 1026, 1027, 1042, 1044, 1045, 1047], "check_random_st": [2, 99, 239, 245, 253, 259, 389, 396, 401], "turn": [2, 30, 45, 71, 114, 190, 191, 195, 207, 238, 239, 255, 280, 304, 363, 374, 375, 376, 382, 399, 401, 402, 414, 415, 417, 419, 422, 423, 424, 586, 587, 594, 612, 613, 835, 839, 908, 911, 929, 984, 988, 996, 999, 1004, 1018, 1028, 1040, 1042, 1043, 1048], "np": [2, 45, 46, 48, 49, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 120, 121, 126, 129, 130, 131, 132, 134, 135, 137, 138, 143, 144, 145, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 168, 170, 172, 173, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 318, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 366, 367, 368, 369, 370, 374, 381, 382, 387, 389, 392, 393, 396, 399, 401, 406, 412, 414, 415, 418, 419, 420, 421, 422, 424, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 490, 501, 502, 513, 514, 525, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 568, 569, 570, 571, 574, 575, 586, 587, 590, 591, 593, 594, 598, 599, 602, 606, 609, 611, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 675, 676, 677, 679, 680, 681, 682, 683, 686, 687, 688, 689, 692, 696, 697, 699, 700, 704, 707, 708, 711, 712, 714, 717, 718, 719, 720, 730, 731, 733, 734, 736, 738, 739, 742, 743, 745, 758, 760, 767, 773, 777, 782, 785, 786, 787, 788, 791, 792, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 832, 833, 834, 835, 838, 839, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 854, 856, 857, 858, 862, 863, 870, 871, 873, 879, 880, 881, 882, 883, 885, 886, 887, 894, 895, 898, 899, 901, 902, 903, 906, 908, 909, 911, 912, 914, 915, 916, 917, 922, 923, 924, 925, 926, 927, 929, 931, 932, 941, 942, 943, 948, 949, 956, 957, 959, 963, 965, 968, 969, 970, 971, 972, 973, 974, 975, 980, 983, 984, 989, 990, 992, 994, 995, 997, 998, 1000, 1004, 1005, 1006, 1008, 1009, 1010, 1019, 1023, 1024, 1026, 1027, 1028, 1036, 1038, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "randomst": [2, 46, 55, 61, 62, 64, 70, 73, 75, 82, 88, 99, 100, 117, 118, 121, 128, 130, 135, 143, 154, 155, 158, 159, 160, 162, 173, 179, 180, 183, 185, 186, 188, 190, 191, 194, 197, 202, 203, 204, 205, 207, 212, 217, 224, 225, 230, 237, 246, 250, 256, 257, 266, 269, 275, 283, 286, 287, 289, 290, 291, 292, 315, 321, 323, 324, 327, 330, 331, 333, 335, 336, 338, 339, 343, 352, 367, 368, 389, 392, 396, 401, 406, 419, 426, 427, 445, 448, 452, 454, 456, 457, 458, 459, 463, 464, 465, 467, 474, 475, 479, 480, 481, 483, 484, 485, 486, 493, 496, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 588, 589, 612, 613, 615, 616, 632, 637, 639, 644, 645, 646, 647, 648, 651, 652, 654, 655, 657, 658, 659, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 679, 681, 682, 683, 684, 692, 694, 695, 696, 697, 698, 699, 700, 706, 785, 797, 801, 802, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 830, 831, 832, 836, 837, 840, 841, 842, 843, 845, 846, 847, 851, 855, 862, 863, 864, 871, 883, 887, 895, 898, 899, 901, 902, 903, 906, 907, 908, 911, 912, 914, 915, 916, 917, 929, 942, 943, 963, 965, 968, 1004, 1019, 1030], "instanc": [2, 45, 49, 51, 54, 64, 66, 67, 91, 94, 96, 145, 158, 174, 177, 191, 196, 197, 206, 207, 252, 257, 260, 276, 278, 289, 291, 292, 311, 329, 336, 343, 345, 346, 352, 353, 361, 362, 363, 373, 374, 375, 381, 382, 384, 385, 386, 387, 389, 391, 392, 393, 395, 396, 399, 401, 405, 406, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 428, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 467, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 493, 496, 497, 500, 501, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 625, 632, 633, 634, 635, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 712, 725, 733, 734, 742, 775, 778, 782, 783, 784, 785, 787, 788, 791, 792, 793, 796, 797, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 895, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 926, 927, 929, 937, 938, 942, 943, 950, 951, 952, 953, 962, 963, 964, 965, 968, 978, 979, 983, 984, 990, 991, 994, 996, 997, 1000, 1002, 1004, 1008, 1009, 1010, 1014, 1019, 1026, 1027, 1028, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "check_scalar": [2, 1049], "type": [2, 48, 57, 91, 92, 103, 106, 107, 117, 124, 126, 137, 151, 152, 154, 184, 191, 192, 194, 195, 196, 200, 207, 223, 225, 252, 257, 262, 264, 265, 267, 268, 271, 272, 275, 281, 286, 287, 289, 290, 291, 297, 310, 326, 336, 353, 361, 363, 369, 370, 375, 380, 381, 382, 384, 385, 387, 388, 390, 391, 392, 393, 399, 400, 405, 409, 411, 412, 415, 422, 438, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 501, 513, 514, 520, 572, 577, 586, 587, 593, 594, 596, 605, 609, 622, 632, 634, 635, 643, 661, 663, 677, 679, 684, 692, 694, 697, 698, 704, 706, 712, 719, 721, 733, 734, 737, 742, 745, 787, 788, 791, 792, 801, 802, 803, 809, 817, 825, 830, 832, 833, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 866, 867, 868, 871, 873, 879, 880, 886, 887, 904, 908, 909, 910, 911, 912, 922, 924, 926, 927, 930, 934, 935, 957, 958, 965, 968, 980, 981, 984, 986, 991, 993, 994, 995, 996, 997, 998, 1004, 1006, 1010, 1015, 1017, 1018, 1021, 1026, 1027, 1028, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "check_is_fit": [2, 94, 140, 257, 390, 396, 401, 1045, 1048, 1049], "is_fit": [2, 978], "check_memori": [2, 396, 401, 1042], "memori": [2, 49, 92, 108, 109, 132, 195, 196, 302, 326, 329, 331, 333, 334, 361, 362, 363, 375, 376, 381, 387, 390, 396, 399, 401, 414, 415, 418, 419, 422, 425, 426, 446, 447, 448, 449, 450, 451, 452, 454, 455, 459, 462, 464, 473, 478, 484, 501, 508, 513, 514, 538, 539, 540, 543, 560, 561, 562, 563, 568, 569, 570, 571, 586, 587, 593, 594, 596, 651, 652, 653, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 689, 782, 783, 784, 785, 803, 809, 817, 825, 827, 828, 829, 830, 833, 834, 835, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 866, 867, 884, 886, 896, 897, 899, 904, 906, 907, 914, 915, 916, 917, 927, 963, 979, 990, 996, 997, 1004, 1006, 1007, 1009, 1010, 1014, 1018, 1019, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "joblib": [2, 41, 80, 92, 109, 148, 300, 330, 382, 385, 387, 390, 396, 399, 401, 405, 408, 409, 415, 425, 442, 446, 449, 450, 451, 453, 455, 457, 462, 463, 466, 469, 472, 477, 513, 514, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 778, 782, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 848, 849, 852, 854, 856, 857, 859, 860, 865, 866, 867, 868, 901, 902, 960, 961, 962, 964, 979, 994, 1014, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1050, 1052], "check_symmetr": 2, "sure": [2, 66, 94, 216, 229, 257, 258, 370, 374, 375, 381, 385, 386, 387, 388, 389, 391, 392, 395, 399, 405, 413, 415, 422, 498, 528, 654, 926, 927, 937, 980, 984, 991, 1008, 1013, 1014, 1042, 1043, 1045, 1050], "column_or_1d": [2, 396, 1046, 1050], "ravel": [2, 46, 55, 57, 58, 60, 66, 80, 91, 92, 96, 116, 137, 143, 145, 151, 155, 161, 162, 163, 170, 179, 181, 183, 184, 185, 186, 195, 202, 213, 214, 216, 223, 236, 237, 244, 248, 250, 254, 256, 260, 264, 268, 270, 283, 287, 289, 300, 305, 306, 312, 313, 315, 316, 317, 318, 322, 323, 333, 343, 349, 354, 355, 356, 358, 359, 361, 367, 368, 470, 498, 499, 500, 636, 723, 981, 994, 1051], "1d": [2, 143, 145, 192, 196, 224, 254, 301, 304, 313, 356, 367, 387, 394, 396, 400, 401, 415, 420, 469, 472, 622, 635, 638, 658, 662, 665, 668, 689, 708, 717, 718, 724, 733, 734, 738, 742, 746, 787, 788, 791, 800, 848, 849, 850, 851, 852, 854, 856, 857, 858, 871, 922, 926, 927, 957, 981, 995, 1015, 1019, 1026, 1035, 1040, 1041, 1042, 1044, 1048, 1049], "els": [2, 45, 49, 52, 53, 54, 57, 60, 73, 79, 82, 87, 93, 94, 100, 118, 132, 145, 151, 152, 155, 158, 187, 195, 196, 212, 225, 241, 244, 250, 254, 256, 257, 258, 259, 260, 280, 281, 284, 291, 300, 305, 313, 315, 316, 322, 361, 362, 369, 387, 391, 393, 421, 422, 424, 426, 434, 442, 454, 513, 525, 538, 574, 623, 630, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 677, 678, 679, 681, 684, 686, 687, 688, 689, 708, 714, 792, 798, 800, 806, 807, 832, 870, 882, 885, 893, 906, 907, 921, 956, 958, 960, 981, 1010], "has_fit_paramet": [2, 396], "available_if": [2, 94, 401, 1048, 1049, 1052], "onli": [2, 25, 30, 45, 48, 52, 55, 56, 61, 64, 65, 66, 67, 69, 72, 73, 75, 77, 78, 83, 87, 91, 93, 96, 104, 107, 108, 109, 111, 112, 117, 124, 131, 132, 134, 138, 142, 144, 149, 150, 151, 152, 154, 162, 163, 172, 173, 174, 177, 179, 181, 184, 186, 188, 191, 192, 194, 195, 196, 200, 201, 206, 207, 212, 219, 223, 224, 226, 229, 231, 232, 241, 243, 244, 250, 252, 254, 256, 257, 261, 264, 266, 267, 268, 271, 272, 276, 278, 280, 282, 283, 286, 287, 288, 289, 291, 292, 297, 299, 300, 306, 308, 311, 313, 317, 320, 321, 325, 326, 331, 332, 338, 339, 341, 345, 346, 349, 353, 354, 357, 358, 361, 362, 363, 365, 366, 369, 370, 374, 375, 376, 380, 381, 382, 384, 385, 387, 389, 391, 392, 393, 394, 395, 396, 399, 401, 402, 405, 406, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 494, 495, 496, 497, 499, 501, 502, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 521, 524, 528, 529, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 712, 714, 718, 730, 733, 734, 738, 740, 741, 742, 745, 746, 747, 760, 762, 764, 778, 782, 783, 784, 785, 787, 788, 791, 792, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 825, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 930, 932, 935, 943, 945, 948, 950, 955, 960, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1015, 1018, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "truthi": [2, 955], "metaestim": [2, 94, 389, 401, 903, 955, 1039, 1048, 1049, 1052], "compute_class_weight": [2, 401, 1038, 1049], "unbalanc": [2, 192, 283, 344, 347, 350, 418, 517, 636, 911, 931, 932, 983, 1008, 1015], "class_weight": [2, 47, 351, 401, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 682, 906, 908, 911, 913, 914, 916, 931, 932, 983, 1008, 1009, 1024, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1049, 1050], "compute_sample_weight": [2, 1049], "is_multilabel": [2, 396, 1052], "type_of_target": [2, 401, 873, 887, 995, 1049, 1050, 1052], "unique_label": [2, 87, 93, 362, 389, 396], "order": [2, 45, 55, 61, 64, 67, 85, 93, 102, 103, 109, 114, 123, 137, 150, 151, 152, 156, 158, 170, 184, 194, 195, 198, 200, 212, 216, 219, 223, 224, 229, 237, 241, 245, 254, 257, 260, 264, 268, 275, 278, 280, 287, 299, 318, 320, 325, 326, 327, 331, 332, 357, 361, 363, 370, 374, 375, 382, 387, 389, 392, 393, 396, 401, 405, 406, 409, 414, 415, 416, 418, 419, 420, 421, 422, 424, 426, 445, 448, 451, 452, 454, 455, 460, 461, 462, 464, 469, 493, 494, 495, 500, 502, 520, 539, 540, 544, 545, 546, 548, 552, 556, 558, 560, 561, 562, 563, 564, 568, 569, 570, 571, 572, 586, 593, 596, 598, 599, 602, 611, 612, 613, 615, 627, 632, 636, 645, 663, 664, 670, 681, 690, 691, 693, 694, 698, 702, 704, 705, 707, 709, 717, 718, 723, 730, 733, 734, 742, 744, 745, 746, 758, 760, 782, 786, 787, 788, 791, 792, 793, 798, 803, 804, 806, 807, 808, 810, 814, 817, 821, 822, 827, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 856, 863, 866, 877, 879, 880, 881, 885, 886, 887, 890, 891, 892, 894, 895, 896, 897, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 926, 927, 932, 943, 958, 963, 984, 990, 991, 994, 995, 997, 998, 1004, 1007, 1008, 1009, 1010, 1014, 1023, 1025, 1026, 1028, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "uniqu": [2, 45, 57, 64, 69, 80, 85, 86, 95, 96, 101, 105, 110, 149, 150, 156, 157, 158, 195, 197, 207, 238, 241, 268, 289, 309, 326, 327, 335, 341, 361, 362, 363, 381, 389, 396, 401, 414, 415, 418, 421, 422, 445, 455, 459, 461, 469, 472, 501, 554, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 615, 638, 639, 640, 671, 673, 681, 702, 714, 716, 758, 786, 803, 805, 817, 829, 834, 835, 838, 844, 853, 856, 858, 863, 865, 877, 879, 880, 887, 890, 906, 908, 914, 915, 916, 917, 931, 943, 957, 958, 990, 995, 1004, 1018, 1026, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "extmath": [2, 269, 361, 396, 458, 940, 941, 942, 943, 944, 945, 1035, 1036, 1041, 1042, 1045, 1049, 1050, 1052], "fast_logdet": [2, 396], "randomized_range_find": [2, 396, 1036, 1041], "orthonorm": [2, 47, 396, 942, 986, 1024], "whose": [2, 93, 115, 116, 117, 177, 184, 223, 347, 382, 395, 396, 401, 413, 414, 416, 421, 423, 424, 427, 442, 443, 444, 453, 466, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 520, 539, 543, 545, 546, 549, 552, 554, 577, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 645, 676, 700, 723, 803, 810, 817, 831, 852, 871, 898, 899, 942, 973, 974, 988, 995, 999, 1000, 1001, 1009, 1038, 1043, 1044, 1046, 1049], "randomized_svd": [2, 58, 396, 456, 458, 537, 546, 549, 551, 1035, 1036, 1041, 1048, 1049, 1050], "safe_sparse_dot": [2, 396, 1045], "case": [2, 30, 45, 48, 49, 54, 65, 67, 73, 75, 87, 90, 93, 95, 99, 104, 108, 109, 117, 121, 133, 135, 145, 147, 148, 155, 156, 163, 174, 176, 177, 179, 186, 195, 196, 198, 207, 209, 212, 214, 223, 224, 225, 227, 228, 231, 237, 239, 240, 241, 250, 254, 255, 256, 257, 260, 261, 271, 274, 277, 279, 280, 281, 283, 286, 287, 289, 297, 300, 303, 307, 317, 320, 322, 325, 327, 329, 332, 353, 361, 362, 363, 369, 370, 374, 375, 376, 381, 382, 385, 387, 388, 389, 391, 392, 393, 394, 396, 399, 400, 401, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 442, 445, 448, 449, 451, 452, 456, 458, 468, 469, 470, 472, 479, 501, 513, 514, 520, 544, 546, 547, 548, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 593, 596, 598, 599, 602, 607, 611, 614, 615, 616, 630, 632, 633, 635, 637, 652, 653, 658, 661, 662, 663, 664, 666, 668, 671, 673, 674, 677, 679, 680, 681, 685, 687, 688, 689, 690, 691, 692, 704, 708, 713, 714, 717, 723, 725, 726, 727, 730, 732, 733, 734, 738, 739, 742, 746, 747, 749, 750, 752, 754, 757, 758, 760, 767, 782, 785, 787, 788, 789, 791, 792, 793, 794, 798, 800, 802, 803, 806, 807, 809, 817, 821, 825, 826, 827, 828, 829, 830, 831, 833, 835, 843, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 866, 873, 875, 876, 879, 880, 881, 884, 885, 886, 887, 890, 896, 897, 898, 899, 906, 908, 911, 914, 915, 921, 922, 932, 943, 944, 962, 983, 984, 986, 988, 989, 991, 992, 993, 995, 996, 997, 998, 1000, 1001, 1004, 1008, 1009, 1010, 1013, 1014, 1018, 1019, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "correctli": [2, 172, 176, 223, 241, 257, 287, 289, 294, 310, 327, 340, 349, 387, 396, 419, 421, 431, 442, 474, 498, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 615, 663, 671, 673, 679, 680, 681, 708, 798, 800, 834, 835, 836, 837, 841, 842, 843, 844, 845, 848, 853, 856, 863, 886, 901, 902, 906, 908, 909, 910, 911, 912, 914, 916, 944, 991, 994, 997, 998, 1004, 1009, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "weighted_mod": [2, 396], "modal": [2, 250, 479, 945], "most": [2, 11, 45, 47, 49, 53, 55, 60, 64, 67, 90, 91, 93, 100, 114, 120, 121, 136, 142, 148, 149, 156, 158, 163, 172, 173, 174, 176, 177, 184, 191, 194, 195, 196, 197, 198, 200, 207, 223, 224, 241, 257, 261, 266, 272, 277, 278, 283, 287, 288, 290, 297, 299, 309, 320, 326, 327, 329, 332, 335, 339, 349, 353, 361, 362, 363, 370, 374, 375, 376, 382, 383, 385, 387, 389, 391, 392, 393, 395, 399, 401, 402, 405, 406, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 448, 449, 451, 455, 461, 462, 465, 473, 501, 508, 526, 529, 537, 539, 544, 548, 554, 556, 566, 567, 571, 572, 593, 594, 596, 598, 609, 616, 632, 635, 654, 663, 677, 679, 681, 683, 692, 693, 697, 700, 729, 732, 750, 762, 763, 767, 789, 798, 801, 802, 806, 807, 822, 834, 835, 848, 849, 850, 852, 854, 855, 856, 857, 858, 881, 883, 891, 892, 894, 895, 896, 897, 904, 942, 943, 945, 957, 962, 983, 984, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1024, 1026, 1027, 1028, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1052], "pass": [2, 45, 48, 49, 61, 62, 73, 76, 148, 158, 160, 174, 204, 207, 224, 251, 253, 254, 257, 260, 261, 263, 271, 278, 281, 327, 329, 332, 354, 363, 370, 374, 375, 376, 382, 387, 388, 389, 392, 393, 394, 395, 396, 399, 401, 406, 409, 411, 414, 415, 418, 419, 421, 422, 424, 425, 426, 431, 432, 436, 437, 442, 443, 445, 447, 448, 449, 451, 452, 453, 454, 455, 457, 459, 462, 464, 465, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 493, 496, 497, 500, 501, 502, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 593, 594, 595, 596, 598, 599, 602, 612, 613, 615, 616, 622, 625, 631, 636, 637, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 736, 737, 746, 767, 778, 782, 783, 784, 785, 792, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 877, 878, 879, 880, 881, 883, 885, 886, 887, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 925, 926, 927, 933, 937, 938, 942, 943, 945, 947, 949, 951, 954, 955, 962, 964, 965, 968, 983, 984, 990, 992, 994, 995, 996, 997, 998, 1001, 1004, 1007, 1008, 1009, 1014, 1018, 1019, 1023, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "incr_mean_variance_axi": [2, 1041, 1047], "csc": [2, 374, 399, 401, 422, 532, 556, 558, 559, 675, 697, 873, 875, 881, 886, 889, 891, 897, 922, 926, 927, 957, 969, 970, 972, 973, 974, 975, 997, 1004, 1043, 1044, 1046, 1049], "sparsefunc": [2, 396, 969, 970, 971, 972, 973, 974, 975, 1048], "inplace_column_scal": 2, "inplac": [2, 241, 260, 292, 459, 487, 488, 489, 490, 861, 869, 872, 875, 876, 878, 882, 883, 884, 886, 967, 970, 971, 972, 976, 977, 1044], "inplace_csr_column_scal": [2, 396], "inplace_row_scal": 2, "inplace_swap_column": 2, "swap": [2, 414, 419, 721, 740, 973, 974, 1035], "place": [2, 45, 57, 98, 251, 261, 304, 374, 385, 387, 388, 389, 392, 394, 402, 413, 422, 424, 446, 450, 451, 487, 488, 489, 520, 586, 595, 633, 635, 636, 772, 785, 801, 889, 891, 892, 893, 894, 895, 896, 897, 973, 974, 1013, 1035, 1042, 1045, 1046, 1048, 1052, 1053], "inplace_swap_row": 2, "mean_variance_axi": [2, 396, 1041, 1048], "inplace_csr_row_normalize_l1": [2, 396], "sparsefuncs_fast": [2, 396, 976, 977], "inplace_csr_row_normalize_l2": [2, 396], "single_source_shortest_path_length": [2, 396], "shortest": [2, 77, 392, 396, 693, 948, 991, 1048], "node": [2, 53, 79, 152, 156, 207, 329, 335, 336, 365, 369, 395, 396, 414, 416, 419, 421, 446, 447, 450, 468, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 655, 659, 661, 687, 688, 697, 846, 847, 914, 915, 916, 917, 918, 920, 948, 962, 997, 999, 1000, 1001, 1010, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1052], "sample_without_replac": [2, 396, 1041], "replac": [2, 45, 65, 116, 132, 142, 158, 179, 186, 190, 196, 209, 224, 283, 300, 322, 327, 331, 351, 385, 387, 389, 391, 393, 396, 401, 409, 415, 418, 421, 422, 446, 450, 469, 508, 520, 560, 561, 568, 587, 593, 594, 595, 596, 612, 613, 632, 635, 639, 644, 646, 732, 789, 809, 815, 817, 825, 865, 866, 869, 889, 902, 909, 963, 965, 968, 983, 984, 986, 990, 994, 1004, 1009, 1010, 1013, 1014, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "min_po": [2, 396], "arrayfunc": [2, 396, 923], "metadatarequest": [2, 257, 428, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 474, 475, 476, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 600, 601, 603, 604, 605, 608, 615, 616, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 657, 659, 661, 662, 663, 665, 667, 669, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 951, 953, 1052], "metadata": [2, 64, 140, 192, 204, 249, 362, 381, 382, 409, 428, 431, 434, 437, 438, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 493, 494, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 950, 951, 952, 953, 954, 978, 994, 1013, 1014, 1015, 1019, 1030, 1051], "request": [2, 49, 58, 84, 223, 241, 257, 332, 375, 381, 385, 386, 390, 401, 402, 406, 409, 419, 422, 423, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 593, 595, 596, 599, 604, 605, 615, 616, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 704, 804, 805, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 950, 951, 953, 994, 997, 1017, 1028, 1041, 1042, 1043, 1052], "info": [2, 47, 80, 108, 128, 195, 196, 257, 278, 384, 386, 391, 401, 422, 501, 950, 1024], "consum": [2, 128, 370, 381, 389, 401, 406, 414, 418, 421, 454, 806, 807, 866, 867, 950, 951, 960, 990, 1018, 1040, 1052], "metadata_rout": [2, 257, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 599, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 950, 951, 952, 953, 954], "metadatarout": [2, 257, 442, 469, 560, 561, 568, 574, 575, 602, 632, 652, 656, 658, 660, 664, 666, 668, 670, 676, 678, 680, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 865, 866, 953, 1052], "rout": [2, 64, 140, 192, 204, 249, 428, 431, 434, 437, 438, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 951, 952, 953, 954, 978, 1015, 1030, 1049, 1051], "router": [2, 401, 406, 951, 952, 953, 954], "methodmap": [2, 257, 951], "calle": [2, 257, 952], "caller": [2, 257, 415, 651, 652, 657, 665, 666, 667, 686, 896, 897, 951, 952, 962, 970, 971, 972, 1044], "get_routing_for_object": [2, 257, 951], "process_rout": [2, 257, 1052], "all_displai": [2, 396, 1050], "displai": [2, 53, 54, 65, 67, 73, 75, 84, 86, 98, 108, 117, 118, 120, 121, 123, 128, 148, 159, 160, 163, 190, 192, 195, 196, 208, 210, 241, 249, 250, 260, 264, 270, 277, 281, 282, 287, 289, 290, 294, 310, 326, 330, 331, 348, 366, 374, 387, 389, 390, 394, 396, 405, 415, 419, 422, 423, 428, 443, 469, 472, 473, 501, 546, 569, 635, 636, 637, 663, 692, 702, 703, 705, 706, 707, 718, 723, 786, 793, 803, 809, 817, 825, 832, 866, 867, 879, 881, 886, 904, 911, 918, 919, 920, 934, 960, 981, 994, 998, 1013, 1015, 1021, 1030, 1044, 1046, 1047, 1049, 1050], "check_estim": [2, 329, 389, 401, 938, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "adher": [2, 374, 389, 401, 937, 938, 1035, 1036], "convent": [2, 140, 158, 280, 387, 389, 390, 391, 393, 401, 432, 433, 436, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 474, 475, 476, 477, 478, 479, 480, 481, 513, 514, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 552, 568, 571, 574, 575, 586, 587, 588, 593, 594, 596, 632, 633, 634, 635, 682, 693, 694, 695, 696, 723, 801, 802, 834, 835, 850, 852, 854, 858, 870, 878, 881, 882, 884, 887, 898, 899, 910, 937, 938, 994, 1020, 1035, 1042, 1043, 1046, 1048, 1049, 1051, 1052], "estimator_check": [2, 329, 389, 401, 937, 938, 1042, 1043, 1045, 1046, 1049, 1050, 1051], "parametrize_with_check": [2, 329, 389, 937, 1045, 1046], "pytest": [2, 329, 375, 385, 387, 389, 390, 405, 408, 411, 937, 938, 1045, 1048], "parallel": [2, 55, 141, 146, 148, 149, 151, 192, 196, 197, 198, 225, 281, 330, 331, 333, 354, 369, 373, 379, 387, 388, 390, 391, 399, 401, 415, 423, 425, 426, 442, 449, 451, 453, 454, 455, 457, 462, 463, 466, 469, 472, 477, 500, 536, 538, 539, 540, 542, 544, 546, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 594, 599, 607, 612, 613, 615, 637, 639, 644, 663, 693, 694, 695, 696, 697, 698, 699, 778, 782, 785, 803, 806, 807, 809, 814, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 865, 868, 901, 902, 961, 962, 964, 1014, 1015, 1023, 1028, 1030, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "tweak": [2, 118, 257, 418, 960, 993, 1028, 1046], "delai": [2, 387, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 803, 817, 827, 828, 962, 1049, 1050, 1053], "argument": [2, 109, 224, 251, 254, 257, 375, 381, 382, 387, 388, 390, 392, 393, 395, 396, 399, 401, 414, 415, 418, 419, 421, 423, 425, 426, 428, 432, 436, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 462, 464, 466, 468, 473, 474, 498, 501, 508, 513, 538, 540, 541, 543, 545, 556, 564, 565, 568, 572, 573, 574, 575, 582, 586, 587, 593, 594, 596, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 636, 644, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 671, 673, 681, 682, 686, 689, 693, 697, 701, 703, 704, 705, 706, 707, 719, 724, 739, 746, 767, 783, 784, 809, 825, 827, 828, 829, 834, 835, 838, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 863, 866, 870, 904, 910, 920, 924, 933, 938, 961, 962, 963, 964, 978, 983, 986, 990, 991, 992, 994, 997, 1001, 1002, 1009, 1010, 1019, 1023, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "all_estim": [2, 396, 1045, 1046, 1050], "all_funct": [2, 396, 1050], "parallel_backend": [2, 375, 425, 442, 449, 451, 453, 455, 457, 462, 463, 466, 469, 472, 477, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 778, 782, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 848, 849, 852, 854, 856, 857, 859, 860, 865, 868, 901, 902, 1043], "chang": [2, 48, 57, 65, 66, 67, 128, 132, 133, 145, 148, 156, 180, 190, 194, 195, 198, 224, 225, 227, 228, 261, 262, 275, 280, 287, 290, 324, 329, 330, 331, 332, 333, 334, 335, 336, 339, 349, 353, 363, 369, 370, 374, 375, 376, 382, 385, 389, 390, 391, 392, 395, 399, 401, 406, 414, 418, 421, 422, 424, 426, 439, 442, 445, 448, 449, 452, 454, 457, 459, 464, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 498, 499, 501, 509, 513, 514, 517, 518, 519, 527, 531, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 593, 594, 595, 596, 598, 599, 602, 607, 615, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 697, 699, 705, 709, 712, 717, 721, 722, 733, 734, 740, 741, 745, 759, 761, 782, 788, 789, 791, 799, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 817, 821, 822, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 856, 857, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 878, 879, 885, 886, 887, 894, 895, 900, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 924, 926, 927, 938, 943, 953, 960, 961, 962, 964, 983, 984, 985, 993, 994, 995, 997, 1004, 1007, 1008, 1009, 1010, 1014, 1019, 1026, 1028, 1033, 1034, 1053], "default": [2, 45, 54, 56, 65, 69, 80, 83, 84, 86, 93, 97, 128, 148, 173, 179, 190, 196, 202, 203, 212, 223, 224, 241, 252, 254, 260, 262, 264, 269, 275, 283, 289, 299, 300, 320, 324, 327, 329, 330, 334, 336, 353, 357, 358, 361, 362, 363, 365, 370, 374, 375, 381, 382, 385, 389, 390, 391, 392, 393, 394, 396, 399, 400, 401, 405, 406, 409, 413, 414, 415, 418, 419, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 716, 717, 718, 719, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 930, 932, 933, 935, 937, 942, 943, 944, 945, 946, 947, 948, 957, 959, 960, 962, 963, 964, 965, 967, 968, 969, 975, 978, 980, 981, 983, 984, 986, 988, 990, 993, 994, 995, 997, 998, 1000, 1001, 1004, 1006, 1008, 1009, 1010, 1019, 1023, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "backend": [2, 57, 375, 385, 401, 473, 904, 960, 962, 964, 994, 1038, 1043, 1044, 1045, 1046, 1053], "insid": [2, 58, 60, 66, 196, 225, 257, 280, 340, 349, 376, 381, 382, 389, 393, 406, 414, 422, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 599, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 951, 954, 962, 1001, 1018, 1052], "register_parallel_backend": [2, 962, 1043], "regist": [2, 57, 207, 361, 393, 962, 964], "factori": [2, 99, 280, 422, 964, 994], "about": [3, 48, 52, 68, 82, 91, 95, 100, 107, 121, 123, 151, 174, 188, 192, 194, 195, 198, 227, 240, 250, 257, 277, 278, 280, 282, 287, 299, 305, 325, 329, 331, 332, 333, 334, 335, 339, 361, 363, 369, 370, 374, 375, 380, 382, 385, 386, 387, 391, 392, 393, 400, 401, 402, 409, 418, 419, 422, 424, 443, 497, 499, 500, 501, 502, 505, 506, 507, 509, 510, 515, 520, 566, 567, 598, 599, 612, 613, 619, 638, 645, 681, 683, 747, 803, 809, 817, 825, 835, 885, 927, 984, 990, 991, 993, 995, 997, 1000, 1001, 1004, 1005, 1007, 1009, 1010, 1013, 1017, 1018, 1019, 1020, 1026, 1028, 1040, 1041, 1051], "variou": [4, 41, 45, 53, 74, 75, 77, 93, 94, 96, 98, 99, 100, 117, 120, 123, 131, 175, 192, 195, 201, 231, 233, 242, 243, 244, 245, 254, 297, 300, 316, 324, 330, 361, 363, 369, 370, 374, 381, 382, 383, 384, 387, 389, 392, 400, 402, 413, 414, 416, 442, 446, 477, 507, 519, 520, 530, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 599, 607, 652, 656, 658, 660, 663, 666, 668, 670, 671, 673, 678, 680, 681, 696, 697, 704, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 866, 906, 907, 983, 984, 991, 994, 997, 1001, 1004, 1008, 1010, 1013, 1015, 1017, 1018, 1027, 1028, 1035, 1038, 1039, 1052], "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 75, 128, 133, 145, 153, 158, 163, 168, 169, 170, 184, 188, 194, 195, 196, 198, 202, 207, 211, 212, 225, 247, 251, 257, 260, 262, 278, 280, 283, 289, 325, 326, 327, 331, 361, 362, 363, 370, 380, 382, 385, 387, 388, 389, 391, 392, 393, 394, 395, 402, 406, 409, 413, 415, 417, 418, 419, 421, 422, 423, 424, 444, 448, 464, 539, 619, 624, 627, 642, 650, 792, 802, 908, 911, 983, 988, 990, 994, 995, 997, 998, 1000, 1001, 1008, 1009, 1011, 1012, 1026, 1028, 1035, 1037, 1038, 1039, 1042], "popular": [6, 10, 190, 247, 382, 385, 392, 395, 399, 401, 420, 421, 422, 424, 457, 467, 984, 986, 990, 992, 999, 1008, 1014, 1023, 1028], "composit": [7, 35, 252, 330, 379, 418, 663, 792, 984, 990, 1003, 1030, 1036], "modul": [7, 11, 16, 30, 31, 74, 75, 87, 91, 113, 119, 122, 127, 128, 141, 171, 178, 188, 189, 192, 193, 199, 201, 238, 242, 243, 265, 273, 296, 297, 298, 301, 314, 316, 317, 319, 337, 344, 360, 364, 367, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 395, 396, 399, 401, 404, 405, 409, 413, 414, 417, 421, 422, 423, 425, 449, 508, 540, 584, 585, 664, 935, 983, 988, 990, 992, 994, 995, 998, 1000, 1001, 1004, 1006, 1008, 1010, 1011, 1018, 1022, 1023, 1028, 1036, 1037, 1038, 1040, 1041, 1045, 1049], "eventu": [7, 269, 414, 423, 598, 1018], "refurbish": 7, "robustli": [8, 226], "defin": [8, 27, 48, 53, 67, 73, 91, 93, 95, 104, 107, 108, 110, 121, 128, 133, 140, 142, 143, 163, 177, 179, 186, 187, 188, 196, 197, 198, 202, 224, 231, 240, 241, 250, 254, 257, 261, 263, 266, 271, 280, 281, 283, 287, 289, 290, 291, 292, 297, 300, 318, 320, 330, 336, 349, 353, 357, 361, 362, 374, 383, 386, 387, 388, 389, 393, 394, 396, 399, 400, 401, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 424, 429, 430, 431, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 464, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 494, 524, 525, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 632, 633, 634, 635, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 701, 702, 704, 713, 715, 716, 721, 726, 727, 728, 729, 732, 735, 742, 745, 749, 750, 752, 754, 755, 757, 758, 761, 764, 770, 785, 789, 794, 795, 796, 797, 801, 802, 803, 806, 807, 809, 817, 825, 829, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 893, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 930, 932, 935, 941, 952, 954, 978, 983, 984, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1014, 1024, 1027, 1030, 1032, 1037, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "close": [8, 49, 53, 58, 64, 65, 67, 76, 77, 84, 92, 98, 104, 114, 115, 118, 133, 145, 152, 155, 159, 163, 179, 180, 183, 184, 185, 186, 187, 195, 197, 207, 227, 229, 244, 250, 256, 260, 266, 272, 280, 281, 306, 307, 320, 329, 349, 353, 354, 362, 370, 382, 387, 389, 395, 399, 401, 402, 413, 414, 417, 418, 421, 424, 455, 460, 477, 513, 514, 537, 568, 633, 648, 652, 666, 677, 679, 692, 710, 750, 801, 821, 822, 841, 842, 843, 845, 852, 927, 983, 987, 988, 990, 991, 993, 994, 995, 997, 1000, 1001, 1004, 1009, 1013, 1018, 1026, 1038, 1042, 1043, 1044], "relat": [8, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 381, 382, 383, 386, 390, 391, 392, 394, 395, 396, 399, 401, 402, 404, 406, 409, 414, 415, 416, 417, 418, 419, 421, 424, 455, 469, 474, 501, 554, 555, 567, 568, 644, 678, 682, 697, 706, 727, 747, 824, 829, 864, 865, 867, 870, 871, 876, 879, 881, 882, 885, 894, 910, 983, 986, 988, 994, 995, 997, 998, 1001, 1004, 1009, 1010, 1011, 1014, 1015, 1017, 1030, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1048, 1051], "theori": [8, 152, 256, 271, 357, 384, 414, 418, 421, 695, 699, 730, 760, 898, 899, 943, 983, 990, 991, 993, 994, 995, 1009, 1010], "graphic": [8, 57, 60, 117, 196, 342, 361, 362, 363, 382, 393, 414, 416, 419, 796, 797, 801, 836, 918, 994, 995, 1001, 1013, 1028], "artifici": [10, 149, 152, 160, 177, 191, 227, 243, 256, 318, 361, 382, 383, 384, 392, 412, 414, 418, 419, 540, 701, 836, 863, 864, 987, 991, 993, 995, 1001, 1006, 1010, 1014, 1018, 1035], "These": [11, 18, 25, 32, 38, 45, 46, 48, 67, 89, 128, 130, 147, 151, 192, 196, 212, 223, 224, 225, 251, 287, 297, 300, 304, 318, 320, 327, 328, 333, 339, 341, 370, 374, 375, 380, 383, 384, 387, 389, 391, 394, 396, 399, 401, 405, 406, 409, 412, 413, 414, 417, 419, 421, 422, 423, 424, 447, 451, 453, 503, 513, 514, 520, 543, 572, 573, 607, 608, 673, 681, 682, 704, 711, 737, 782, 798, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 851, 852, 871, 983, 985, 988, 990, 991, 994, 995, 1005, 1007, 1009, 1013, 1019, 1023, 1028, 1035, 1041, 1043, 1044, 1045, 1048, 1052], "includ": [11, 18, 45, 71, 73, 93, 116, 148, 152, 153, 154, 194, 195, 197, 207, 223, 227, 241, 257, 281, 297, 300, 316, 320, 332, 333, 335, 349, 354, 361, 363, 370, 374, 375, 381, 383, 385, 387, 388, 389, 391, 392, 393, 395, 396, 401, 402, 405, 412, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 449, 451, 455, 461, 471, 474, 475, 476, 477, 478, 479, 480, 481, 494, 495, 496, 501, 505, 506, 507, 509, 510, 515, 539, 546, 562, 569, 579, 637, 643, 651, 652, 657, 665, 666, 667, 670, 686, 693, 694, 702, 718, 733, 734, 739, 741, 742, 775, 787, 788, 791, 799, 803, 805, 806, 807, 816, 817, 820, 823, 829, 832, 854, 856, 857, 858, 879, 880, 881, 885, 903, 906, 907, 914, 916, 918, 920, 926, 927, 930, 932, 935, 951, 983, 990, 993, 994, 995, 997, 998, 1004, 1008, 1009, 1010, 1013, 1014, 1017, 1018, 1026, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "ica": [11, 130, 426, 1010, 1029, 1030], "techniqu": [11, 26, 53, 59, 107, 109, 130, 138, 143, 153, 169, 176, 177, 191, 192, 194, 231, 245, 247, 285, 297, 304, 332, 339, 353, 365, 376, 384, 399, 401, 413, 414, 418, 419, 420, 421, 422, 423, 452, 453, 454, 455, 539, 559, 682, 694, 698, 699, 730, 760, 986, 990, 991, 993, 994, 997, 1000, 1002, 1006, 1008, 1010, 1014, 1018, 1022, 1027, 1028, 1048], "decompos": [11, 128, 132, 145, 322, 539, 543, 714, 827, 943, 989, 990, 994, 1011, 1029, 1030], "thumb": [13, 148, 200, 374, 387, 388, 399, 414, 663, 664, 671, 672, 673, 681, 682, 683, 906, 994], "quantifi": [13, 27, 45, 75, 87, 114, 184, 241, 287, 389, 401, 410, 578, 869, 989, 1002, 1004, 1030], "anomali": [14, 50, 116, 159, 192, 237, 249, 260, 306, 307, 382, 474, 517, 527, 568, 644, 682, 852, 867, 910, 1000, 1013, 1015, 1041, 1042], "aren": [16, 361, 382, 391, 405, 730, 760, 999, 1045, 1047], "subject": [16, 107, 160, 272, 283, 361, 382, 387, 389, 391, 399, 401, 402, 413, 416, 418, 419, 500, 663, 664, 690, 869, 964, 985, 990, 1009, 1012, 1028, 1044, 1045, 1048, 1050], "them": [16, 45, 46, 49, 71, 77, 78, 87, 91, 93, 94, 98, 103, 104, 107, 108, 121, 128, 130, 133, 143, 159, 172, 177, 179, 190, 191, 195, 196, 197, 200, 202, 207, 218, 224, 225, 227, 241, 254, 257, 260, 261, 278, 280, 281, 283, 289, 297, 302, 320, 325, 327, 332, 342, 349, 363, 369, 374, 376, 382, 385, 387, 388, 389, 390, 391, 395, 399, 401, 402, 404, 406, 409, 413, 414, 415, 418, 419, 421, 422, 424, 449, 452, 454, 455, 462, 469, 472, 498, 499, 513, 572, 573, 574, 575, 612, 613, 621, 625, 626, 629, 637, 644, 669, 697, 772, 775, 778, 782, 783, 784, 785, 793, 803, 817, 824, 831, 866, 870, 875, 876, 880, 884, 886, 887, 896, 897, 903, 914, 915, 951, 960, 983, 984, 990, 993, 994, 995, 997, 998, 999, 1004, 1009, 1010, 1012, 1013, 1017, 1018, 1019, 1026, 1027, 1028, 1035, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "your": [16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 376, 381, 385, 386, 387, 388, 390, 391, 393, 395, 396, 399, 400, 401, 405, 409, 411, 414, 415, 416, 421, 422, 425, 426, 449, 451, 508, 538, 566, 567, 607, 639, 651, 692, 716, 803, 806, 807, 809, 817, 825, 829, 831, 937, 991, 998, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1021, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "risk": [16, 50, 93, 158, 223, 227, 241, 321, 357, 370, 386, 387, 401, 418, 421, 572, 573, 891, 892, 894, 895, 896, 897, 990, 994, 1018, 1042], "tool": [21, 29, 41, 50, 52, 153, 195, 257, 278, 283, 370, 380, 381, 382, 385, 387, 389, 390, 391, 392, 393, 394, 395, 400, 401, 402, 404, 405, 406, 409, 414, 415, 416, 492, 697, 706, 983, 989, 990, 994, 1000, 1004, 1009, 1011, 1013, 1014, 1018, 1019, 1028, 1042, 1045, 1048, 1049, 1050], "obtain": [22, 45, 48, 50, 53, 54, 61, 67, 86, 93, 95, 96, 108, 111, 112, 133, 135, 142, 152, 155, 156, 161, 168, 177, 181, 183, 195, 196, 207, 223, 225, 227, 237, 247, 260, 266, 267, 268, 276, 280, 281, 282, 286, 289, 303, 325, 332, 347, 353, 362, 363, 369, 370, 382, 384, 389, 399, 401, 409, 413, 414, 416, 417, 419, 421, 422, 423, 424, 442, 447, 474, 501, 537, 538, 560, 561, 562, 563, 564, 565, 568, 569, 570, 598, 611, 619, 650, 664, 666, 671, 673, 677, 679, 681, 682, 692, 713, 717, 730, 743, 760, 797, 809, 825, 831, 834, 835, 838, 852, 863, 883, 895, 908, 911, 914, 915, 943, 984, 986, 988, 990, 991, 993, 994, 995, 997, 998, 1000, 1001, 1004, 1008, 1009, 1041, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "varieti": [25, 65, 190, 268, 326, 349, 395, 414, 416, 422, 648, 997, 1010, 1013, 1018, 1037, 1050, 1051], "subsect": [25, 375, 387], "rough": [25, 1000, 1021], "fall": [25, 30, 45, 54, 155, 158, 186, 279, 280, 387, 389, 414, 422, 439, 451, 452, 513, 514, 731, 732, 798, 883, 895, 993, 994, 1004, 1019, 1027, 1044], "procedur": [25, 84, 94, 148, 155, 177, 203, 211, 271, 282, 323, 327, 349, 361, 370, 387, 389, 399, 400, 401, 402, 413, 416, 418, 419, 421, 423, 536, 542, 543, 545, 550, 551, 552, 558, 559, 560, 561, 564, 565, 598, 600, 607, 614, 649, 677, 679, 692, 732, 789, 863, 864, 883, 895, 965, 983, 990, 996, 1004, 1007, 1008, 1009, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "typic": [25, 65, 67, 132, 140, 153, 200, 207, 223, 227, 241, 256, 282, 283, 287, 289, 290, 306, 307, 331, 349, 362, 374, 380, 381, 382, 385, 389, 390, 391, 396, 400, 401, 413, 414, 415, 418, 419, 421, 422, 424, 448, 452, 454, 501, 556, 558, 560, 561, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 634, 643, 645, 648, 659, 660, 661, 676, 687, 688, 717, 873, 880, 884, 887, 942, 943, 951, 954, 979, 983, 987, 990, 991, 993, 994, 995, 996, 1000, 1002, 1018, 1028, 1044, 1048, 1051, 1052], "appropri": [25, 93, 95, 135, 184, 195, 227, 257, 289, 365, 370, 385, 387, 389, 395, 401, 413, 414, 418, 420, 421, 425, 449, 455, 462, 494, 495, 496, 501, 505, 506, 507, 509, 510, 515, 582, 587, 596, 597, 600, 601, 603, 604, 605, 677, 679, 692, 714, 848, 849, 850, 852, 854, 856, 857, 858, 978, 990, 993, 994, 1004, 1039, 1042, 1048, 1051, 1053], "jointli": [25, 217, 287, 414, 419, 990], "induc": [25, 57, 66, 94, 195, 207, 214, 216, 221, 224, 238, 256, 260, 357, 363, 412, 419, 421, 451, 454, 544, 548, 558, 562, 563, 564, 565, 569, 570, 571, 648, 730, 760, 879, 914, 915, 916, 917, 987, 994, 1008, 1026], "infer": [25, 192, 193, 195, 218, 267, 271, 272, 280, 366, 381, 389, 399, 418, 419, 501, 513, 514, 520, 539, 541, 543, 545, 552, 554, 555, 558, 564, 565, 637, 640, 662, 714, 727, 745, 789, 801, 802, 809, 825, 832, 842, 880, 887, 901, 902, 914, 915, 916, 917, 957, 984, 990, 993, 994, 999, 1004, 1007, 1010, 1013, 1014, 1015, 1022, 1036, 1040, 1041, 1046, 1049, 1052], "constrain": [25, 85, 128, 152, 158, 160, 196, 214, 315, 330, 336, 347, 349, 380, 401, 414, 419, 421, 514, 566, 567, 640, 663, 664, 695, 699, 831, 990, 993, 1039], "agre": [25, 172, 395, 402, 414, 790, 1019], "huber": [25, 205, 233, 421, 565, 654, 681, 683, 1008, 1035, 1037, 1038, 1047], "allow": [25, 45, 61, 94, 96, 111, 112, 124, 132, 133, 145, 146, 153, 161, 179, 184, 186, 188, 217, 223, 227, 241, 244, 251, 254, 261, 263, 264, 266, 280, 299, 329, 330, 331, 332, 334, 353, 354, 361, 369, 370, 374, 381, 382, 385, 387, 388, 389, 391, 394, 396, 399, 401, 402, 406, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 442, 448, 449, 451, 452, 454, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 501, 528, 529, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 598, 599, 602, 608, 615, 616, 620, 632, 633, 635, 639, 640, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 695, 697, 704, 746, 766, 769, 778, 782, 785, 796, 797, 801, 802, 803, 804, 805, 806, 807, 810, 812, 814, 817, 821, 824, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 856, 857, 861, 863, 864, 866, 868, 869, 871, 872, 873, 878, 885, 886, 890, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 924, 926, 927, 937, 938, 958, 962, 983, 984, 986, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1018, 1019, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "doe": [27, 45, 48, 49, 50, 53, 54, 64, 65, 70, 73, 78, 84, 91, 93, 95, 107, 109, 110, 121, 138, 142, 147, 148, 151, 152, 153, 157, 158, 163, 177, 185, 195, 196, 207, 220, 223, 229, 241, 243, 244, 245, 248, 250, 253, 254, 255, 257, 258, 260, 268, 269, 275, 280, 282, 283, 287, 289, 290, 299, 300, 313, 320, 322, 324, 326, 327, 332, 333, 341, 342, 347, 349, 357, 359, 361, 362, 363, 374, 375, 381, 385, 387, 388, 389, 391, 395, 400, 401, 406, 409, 413, 414, 415, 418, 419, 421, 422, 423, 424, 439, 445, 447, 451, 452, 454, 455, 459, 461, 470, 472, 477, 478, 484, 492, 504, 508, 513, 532, 540, 542, 543, 544, 549, 551, 554, 555, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 586, 587, 588, 593, 594, 596, 598, 599, 602, 607, 611, 615, 637, 643, 654, 655, 656, 659, 660, 661, 664, 676, 687, 688, 703, 705, 707, 712, 732, 733, 734, 738, 740, 742, 747, 750, 782, 787, 788, 791, 792, 798, 803, 806, 807, 817, 863, 867, 868, 869, 871, 873, 875, 878, 879, 880, 883, 886, 887, 895, 898, 899, 903, 906, 907, 914, 915, 916, 917, 921, 926, 930, 943, 946, 947, 960, 962, 978, 983, 984, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1000, 1002, 1004, 1008, 1009, 1010, 1028, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "itself": [27, 64, 67, 87, 93, 142, 155, 159, 196, 207, 221, 257, 263, 289, 300, 327, 349, 362, 374, 376, 386, 387, 389, 391, 401, 406, 413, 414, 425, 445, 446, 449, 450, 451, 474, 475, 476, 477, 478, 479, 480, 481, 532, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 556, 571, 574, 588, 597, 600, 601, 603, 604, 605, 607, 608, 644, 645, 646, 647, 648, 650, 660, 694, 696, 796, 797, 841, 842, 843, 844, 845, 846, 847, 851, 859, 860, 871, 872, 873, 901, 902, 951, 986, 990, 991, 993, 997, 998, 1002, 1013, 1039, 1050], "tune": [29, 45, 67, 82, 93, 108, 133, 142, 148, 158, 176, 179, 190, 196, 212, 227, 228, 240, 247, 260, 274, 285, 302, 321, 349, 353, 357, 361, 370, 374, 375, 376, 400, 401, 410, 413, 414, 418, 421, 423, 424, 457, 467, 564, 565, 599, 618, 619, 620, 622, 624, 625, 627, 628, 630, 648, 664, 695, 699, 862, 911, 988, 989, 990, 991, 993, 994, 997, 998, 1000, 1008, 1009, 1020, 1030, 1035, 1049, 1051], "requir": [30, 31, 45, 48, 55, 65, 83, 84, 86, 91, 93, 95, 96, 105, 107, 124, 132, 134, 147, 148, 152, 153, 156, 158, 159, 163, 177, 196, 207, 212, 220, 223, 243, 245, 251, 254, 257, 260, 264, 281, 289, 291, 300, 302, 320, 325, 331, 332, 361, 362, 363, 381, 384, 385, 387, 389, 391, 393, 395, 399, 401, 402, 405, 406, 411, 414, 415, 416, 418, 419, 421, 422, 423, 425, 431, 437, 442, 443, 444, 449, 451, 455, 457, 462, 467, 469, 472, 474, 487, 488, 489, 501, 513, 526, 529, 540, 546, 554, 555, 556, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 577, 584, 585, 586, 615, 616, 624, 632, 637, 638, 639, 648, 651, 652, 657, 658, 663, 664, 671, 672, 673, 676, 679, 680, 681, 682, 683, 691, 694, 696, 697, 698, 700, 704, 728, 733, 734, 746, 751, 753, 756, 767, 788, 791, 803, 806, 807, 810, 812, 817, 829, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 863, 866, 867, 868, 870, 880, 881, 882, 886, 894, 898, 899, 901, 902, 906, 907, 908, 911, 914, 915, 916, 917, 951, 954, 960, 980, 983, 988, 989, 990, 991, 994, 995, 996, 997, 998, 1000, 1001, 1004, 1008, 1009, 1010, 1014, 1019, 1026, 1028, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "constructor": [30, 31, 109, 253, 375, 389, 401, 415, 422, 469, 472, 554, 555, 560, 572, 573, 574, 575, 586, 587, 593, 594, 602, 673, 681, 682, 848, 849, 850, 852, 853, 854, 856, 857, 858, 865, 866, 867, 868, 962, 983, 995, 1004, 1009, 1014, 1019, 1035, 1036, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "hope": [30, 46, 241, 401, 1044], "runtim": [30, 49, 51, 96, 142, 209, 238, 240, 255, 318, 322, 375, 389, 390, 399, 401, 414, 421, 455, 568, 684, 817, 906, 907, 908, 909, 910, 911, 912, 1008, 1009, 1038, 1042, 1043, 1049, 1050, 1052, 1053], "experi": [30, 142, 182, 186, 194, 195, 196, 197, 200, 225, 297, 325, 357, 362, 363, 375, 381, 387, 390, 418, 520, 732, 789, 990, 995, 1006, 1012, 1013, 1018, 1026, 1028], "predict_proba": [30, 64, 65, 66, 67, 69, 73, 161, 165, 177, 180, 181, 182, 183, 257, 289, 299, 315, 322, 325, 329, 331, 361, 389, 394, 401, 413, 421, 442, 443, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 598, 599, 615, 624, 625, 627, 628, 636, 637, 638, 663, 664, 681, 703, 705, 707, 745, 746, 792, 801, 802, 803, 806, 807, 817, 827, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 848, 856, 863, 866, 873, 901, 902, 903, 908, 911, 914, 916, 990, 994, 996, 998, 1001, 1007, 1008, 1009, 1010, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "so": [30, 37, 45, 50, 53, 54, 57, 58, 67, 80, 86, 93, 94, 99, 103, 117, 148, 151, 152, 153, 154, 158, 162, 179, 184, 195, 197, 200, 203, 223, 224, 250, 257, 260, 280, 297, 300, 306, 307, 310, 316, 317, 321, 326, 327, 330, 341, 349, 361, 363, 369, 370, 374, 375, 376, 381, 382, 385, 386, 387, 389, 391, 392, 393, 395, 396, 401, 406, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 427, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 501, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 710, 713, 721, 730, 745, 760, 782, 792, 801, 802, 803, 806, 807, 809, 810, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 896, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 943, 960, 969, 983, 984, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1000, 1004, 1006, 1007, 1008, 1009, 1013, 1014, 1018, 1026, 1027, 1028, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052], "long": [30, 45, 52, 53, 82, 100, 155, 184, 191, 195, 197, 223, 257, 258, 260, 283, 313, 320, 330, 361, 362, 370, 375, 385, 387, 395, 399, 401, 402, 409, 414, 458, 503, 543, 681, 682, 683, 806, 807, 841, 842, 843, 844, 845, 863, 864, 874, 994, 1000, 1004, 1005, 1007, 1008, 1012, 1037, 1041, 1047, 1049], "membership": [30, 94, 402, 412, 414, 516, 517, 518, 519, 520, 524, 527, 1009], "both": [30, 45, 46, 48, 50, 51, 54, 56, 57, 61, 65, 66, 67, 73, 80, 92, 93, 102, 108, 114, 116, 120, 121, 133, 135, 140, 145, 148, 149, 152, 153, 158, 162, 163, 166, 172, 173, 177, 179, 186, 188, 194, 195, 196, 197, 202, 207, 209, 211, 212, 223, 224, 225, 227, 228, 229, 231, 241, 247, 256, 257, 258, 266, 267, 268, 269, 270, 271, 280, 281, 282, 283, 287, 289, 291, 295, 300, 312, 320, 324, 325, 329, 331, 335, 340, 341, 346, 351, 353, 361, 362, 363, 369, 370, 374, 375, 376, 380, 381, 382, 383, 385, 387, 389, 393, 394, 396, 399, 400, 401, 402, 405, 406, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 427, 442, 451, 457, 467, 473, 480, 487, 488, 489, 490, 493, 494, 501, 502, 505, 507, 510, 512, 513, 514, 539, 543, 545, 552, 556, 560, 561, 562, 568, 569, 570, 571, 572, 582, 593, 594, 596, 602, 612, 613, 632, 637, 638, 648, 662, 663, 664, 677, 679, 681, 683, 692, 704, 709, 717, 721, 733, 734, 735, 740, 742, 761, 765, 771, 778, 782, 787, 788, 791, 792, 793, 799, 806, 807, 809, 825, 835, 863, 864, 878, 880, 882, 894, 899, 904, 906, 907, 914, 916, 930, 935, 944, 957, 969, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1018, 1023, 1026, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "margin": [30, 45, 53, 57, 65, 67, 125, 144, 180, 181, 182, 183, 184, 185, 192, 195, 196, 201, 234, 258, 260, 280, 297, 320, 326, 344, 345, 347, 348, 349, 351, 353, 358, 384, 413, 419, 421, 424, 517, 615, 616, 636, 650, 681, 739, 835, 883, 895, 908, 911, 990, 994, 996, 1000, 1001, 1004, 1008, 1009, 1015, 1026, 1042, 1044], "uniti": 30, "extend": [31, 54, 93, 94, 105, 140, 224, 270, 287, 349, 384, 385, 399, 401, 413, 414, 419, 421, 636, 725, 824, 835, 838, 839, 871, 873, 890, 906, 907, 921, 986, 994, 995, 1009, 1014, 1016, 1030, 1040, 1041, 1042, 1043, 1045, 1050], "theorem": [32, 179, 357, 996], "strong": [32, 45, 54, 92, 179, 192, 194, 195, 201, 216, 220, 221, 227, 228, 229, 256, 299, 327, 357, 413, 419, 421, 529, 654, 677, 987, 988, 990, 991, 993, 1001, 1009, 1015, 1026], "assumpt": [32, 45, 50, 54, 65, 67, 74, 81, 114, 115, 131, 184, 188, 192, 194, 223, 225, 250, 276, 299, 320, 393, 399, 400, 404, 413, 414, 416, 418, 419, 422, 424, 452, 456, 458, 493, 508, 517, 537, 539, 546, 655, 659, 802, 803, 806, 807, 817, 843, 898, 899, 988, 990, 994, 995, 996, 997, 999, 1000, 1001, 1004, 1007, 1010, 1015, 1042, 1048], "neural": [34, 46, 47, 70, 280, 317, 401, 409, 418, 419, 421, 426, 538, 540, 543, 545, 552, 572, 573, 644, 650, 701, 745, 801, 855, 862, 863, 864, 872, 986, 990, 991, 992, 994, 997, 1000, 1004, 1008, 1010, 1013, 1016, 1018, 1024, 1029, 1030, 1035, 1047], "network": [34, 47, 260, 317, 374, 375, 376, 381, 382, 401, 402, 409, 414, 419, 421, 426, 501, 538, 540, 572, 573, 701, 745, 863, 864, 990, 992, 994, 1008, 1010, 1013, 1016, 1024, 1029, 1030, 1035, 1049, 1053], "computation": [37, 55, 114, 128, 148, 154, 163, 179, 300, 353, 361, 373, 388, 399, 414, 415, 418, 419, 421, 424, 543, 637, 638, 676, 767, 803, 805, 806, 807, 817, 829, 990, 991, 993, 1001, 1002, 1006, 1027, 1030, 1039], "effici": [37, 45, 46, 53, 55, 80, 84, 91, 93, 128, 143, 148, 153, 161, 200, 212, 216, 225, 231, 305, 361, 374, 379, 381, 387, 389, 390, 392, 393, 399, 401, 409, 412, 414, 419, 420, 421, 424, 426, 447, 448, 451, 452, 454, 455, 457, 459, 462, 464, 466, 467, 501, 538, 539, 540, 543, 545, 546, 549, 568, 571, 579, 586, 587, 593, 594, 596, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 643, 645, 660, 663, 664, 669, 671, 672, 673, 678, 680, 681, 682, 683, 684, 690, 691, 693, 730, 760, 767, 783, 784, 801, 802, 803, 817, 835, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 871, 883, 895, 899, 906, 915, 917, 943, 962, 983, 986, 988, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1018, 1019, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "trade": [37, 99, 114, 148, 158, 197, 227, 279, 281, 282, 349, 361, 401, 414, 416, 558, 559, 564, 565, 639, 661, 697, 803, 806, 807, 817, 829, 991, 998, 1006, 1008, 1009, 1014], "control": [37, 53, 57, 73, 99, 132, 133, 148, 168, 184, 186, 207, 224, 227, 231, 253, 254, 281, 283, 297, 302, 318, 330, 332, 353, 365, 367, 368, 374, 375, 380, 383, 387, 389, 392, 395, 399, 401, 405, 409, 414, 417, 418, 419, 420, 423, 424, 439, 445, 454, 459, 476, 477, 483, 536, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 598, 599, 601, 619, 624, 630, 632, 637, 639, 644, 646, 647, 651, 652, 654, 655, 656, 657, 659, 660, 661, 677, 679, 681, 682, 687, 688, 692, 697, 706, 714, 801, 802, 803, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 832, 833, 836, 837, 840, 863, 864, 885, 887, 898, 899, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 920, 960, 962, 981, 983, 990, 991, 993, 994, 995, 997, 1000, 1001, 1004, 1006, 1008, 1009, 1010, 1013, 1014, 1016, 1026, 1030, 1035, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "amount": [37, 38, 49, 53, 83, 91, 104, 114, 117, 128, 132, 143, 145, 185, 195, 207, 227, 241, 255, 331, 338, 341, 343, 349, 357, 363, 374, 375, 376, 399, 414, 416, 419, 421, 422, 423, 448, 459, 474, 543, 544, 546, 548, 568, 601, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 670, 686, 689, 697, 806, 807, 846, 847, 852, 887, 902, 903, 916, 917, 989, 990, 993, 996, 998, 1004, 1006, 1007, 1008, 1009, 1026, 1027, 1048, 1052], "faster": [37, 48, 60, 77, 102, 110, 128, 147, 148, 152, 153, 155, 158, 177, 196, 200, 209, 223, 225, 238, 239, 241, 256, 260, 300, 302, 317, 330, 332, 333, 361, 362, 363, 374, 381, 387, 395, 396, 401, 414, 419, 423, 424, 426, 448, 452, 454, 456, 457, 458, 467, 513, 536, 537, 538, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 558, 564, 565, 566, 567, 648, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 677, 679, 689, 692, 696, 700, 730, 760, 782, 783, 784, 846, 847, 851, 863, 864, 881, 883, 885, 895, 899, 943, 963, 983, 987, 990, 995, 997, 998, 1001, 1006, 1008, 1009, 1010, 1013, 1024, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "size": [37, 44, 45, 46, 47, 49, 52, 53, 54, 55, 64, 67, 70, 72, 75, 77, 78, 80, 82, 84, 85, 90, 92, 93, 95, 96, 98, 99, 100, 104, 105, 110, 114, 115, 116, 117, 118, 120, 121, 126, 128, 129, 130, 131, 132, 135, 137, 145, 154, 155, 158, 159, 160, 173, 179, 181, 182, 185, 186, 192, 194, 196, 197, 202, 203, 204, 205, 209, 213, 218, 221, 224, 225, 226, 229, 236, 237, 243, 248, 250, 253, 254, 255, 256, 257, 259, 260, 268, 274, 276, 278, 280, 282, 283, 285, 286, 287, 297, 306, 307, 308, 315, 318, 321, 322, 323, 324, 327, 330, 333, 335, 336, 339, 343, 345, 347, 348, 349, 357, 359, 361, 362, 363, 365, 374, 375, 376, 382, 383, 387, 392, 396, 399, 400, 401, 405, 406, 412, 413, 414, 416, 418, 419, 422, 424, 425, 427, 449, 450, 451, 453, 454, 455, 462, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 498, 499, 500, 520, 532, 539, 541, 543, 545, 552, 562, 563, 564, 565, 566, 567, 569, 570, 588, 592, 593, 596, 599, 637, 638, 648, 662, 671, 672, 684, 688, 697, 700, 710, 724, 742, 744, 747, 785, 797, 805, 808, 809, 813, 820, 823, 824, 827, 830, 832, 841, 842, 843, 845, 848, 849, 850, 851, 852, 854, 856, 857, 858, 863, 864, 881, 883, 895, 900, 904, 908, 909, 910, 911, 912, 914, 915, 916, 917, 920, 942, 946, 947, 957, 958, 960, 963, 969, 984, 986, 987, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1001, 1004, 1006, 1008, 1009, 1010, 1017, 1018, 1022, 1024, 1026, 1027, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051], "preserv": [37, 45, 86, 133, 247, 254, 275, 389, 390, 418, 419, 422, 586, 593, 594, 596, 651, 657, 701, 746, 778, 782, 821, 822, 823, 890, 926, 927, 984, 990, 991, 1004, 1006, 1013, 1023, 1027, 1035, 1038, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "theoret": [37, 75, 95, 179, 414, 421, 558, 559, 644, 709, 730, 760, 906, 983, 990, 991, 993, 994, 996, 1006, 1008, 1009, 1018], "behind": [37, 91, 116, 142, 297, 385, 389, 391, 395, 416, 421, 993, 997, 1006, 1051], "johnson": [37, 93, 192, 249, 320, 324, 379, 494, 507, 882, 894, 898, 899, 900, 1004, 1011, 1015, 1030, 1043, 1049, 1051], "lindenstrauss": [37, 93, 192, 249, 379, 494, 507, 898, 899, 900, 1011, 1015, 1030], "lemma": [37, 254, 379, 539, 546, 554, 898, 899, 900, 988, 1030, 1038], "quot": [37, 53, 56, 107, 281, 361, 362, 375, 381, 382, 385, 391, 405, 411, 493, 494, 501, 994, 1006, 1009, 1028, 1050], "wikipedia": [37, 44, 64, 192, 395, 414, 600, 612, 613, 641, 661, 673, 676, 687, 688, 700, 709, 710, 712, 714, 717, 721, 723, 730, 733, 734, 735, 738, 739, 742, 747, 760, 787, 789, 790, 792, 793, 796, 797, 848, 849, 854, 855, 856, 857, 884, 900, 914, 915, 986, 990, 994, 997, 1006, 1010, 1015, 1028, 1035, 1042], "mathemat": [37, 142, 195, 211, 240, 283, 379, 384, 387, 401, 404, 414, 416, 419, 420, 424, 554, 555, 562, 569, 640, 651, 661, 796, 797, 802, 864, 908, 911, 914, 916, 990, 994, 998, 1004, 1006, 1016, 1018, 1026, 1030, 1049], "concern": [37, 59, 74, 113, 119, 122, 127, 139, 141, 171, 178, 189, 192, 199, 201, 242, 265, 271, 296, 298, 301, 314, 319, 337, 344, 360, 364, 374, 389, 991, 1006], "distort": [37, 222, 254, 384, 413, 883, 895, 900, 991, 1004, 1006], "state": [37, 91, 95, 107, 109, 116, 158, 225, 254, 262, 267, 286, 331, 370, 375, 376, 387, 389, 393, 395, 399, 401, 402, 422, 427, 445, 448, 452, 454, 459, 464, 480, 549, 594, 684, 806, 807, 815, 817, 819, 846, 847, 853, 901, 902, 929, 983, 984, 990, 996, 999, 1006, 1013, 1014, 1018, 1037, 1039, 1041, 1043, 1045, 1048, 1051], "small": [37, 38, 41, 46, 52, 54, 62, 67, 77, 86, 87, 91, 93, 107, 114, 118, 121, 125, 133, 143, 145, 152, 154, 155, 184, 186, 195, 196, 203, 209, 213, 214, 224, 227, 229, 238, 240, 241, 268, 280, 287, 292, 302, 313, 316, 318, 320, 322, 324, 331, 338, 343, 349, 354, 357, 361, 362, 376, 380, 382, 384, 387, 390, 396, 401, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 427, 446, 448, 450, 451, 452, 454, 463, 464, 468, 480, 501, 503, 543, 545, 552, 560, 561, 562, 566, 567, 569, 587, 594, 595, 607, 612, 613, 655, 659, 660, 661, 663, 664, 684, 687, 688, 750, 806, 807, 821, 831, 834, 863, 864, 871, 899, 908, 911, 943, 983, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1006, 1007, 1010, 1014, 1018, 1026, 1027, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052], "much": [37, 45, 47, 48, 50, 54, 60, 65, 78, 93, 116, 118, 126, 131, 137, 147, 155, 156, 163, 164, 165, 179, 190, 191, 195, 196, 197, 198, 200, 220, 221, 225, 254, 257, 260, 280, 282, 283, 286, 291, 317, 321, 325, 326, 327, 331, 332, 334, 349, 354, 361, 362, 370, 374, 375, 376, 382, 387, 388, 389, 392, 395, 399, 400, 405, 413, 416, 417, 418, 419, 420, 421, 422, 423, 452, 453, 501, 539, 540, 541, 543, 564, 565, 566, 567, 663, 664, 671, 672, 673, 681, 682, 683, 697, 783, 784, 806, 807, 821, 881, 899, 906, 983, 986, 989, 990, 991, 993, 994, 995, 997, 998, 1000, 1002, 1006, 1007, 1009, 1010, 1014, 1018, 1023, 1024, 1026, 1027, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lower": [37, 46, 54, 57, 66, 67, 70, 72, 96, 115, 121, 124, 128, 130, 135, 142, 145, 148, 151, 155, 158, 159, 179, 181, 183, 185, 187, 196, 197, 207, 208, 209, 213, 223, 224, 225, 226, 236, 243, 247, 253, 254, 259, 268, 272, 279, 280, 282, 283, 287, 288, 290, 293, 303, 304, 306, 307, 322, 325, 333, 341, 349, 355, 361, 362, 363, 366, 382, 387, 401, 413, 414, 417, 418, 419, 420, 421, 422, 425, 449, 453, 469, 472, 503, 514, 537, 539, 546, 549, 558, 564, 565, 566, 567, 568, 593, 594, 596, 608, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 637, 638, 640, 642, 682, 684, 717, 721, 729, 732, 738, 743, 801, 802, 852, 854, 856, 857, 858, 860, 887, 906, 907, 908, 909, 910, 913, 930, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1006, 1008, 1009, 1010, 1026, 1037, 1038, 1043, 1050, 1052], "nearli": [37, 65, 283, 382, 401, 768, 994, 997, 1006, 1028], "lipschitz": [37, 1006], "even": [37, 45, 54, 55, 67, 78, 80, 90, 112, 121, 131, 148, 155, 185, 195, 196, 197, 212, 223, 224, 231, 241, 247, 248, 256, 267, 286, 297, 320, 322, 324, 325, 343, 357, 361, 362, 363, 370, 376, 382, 385, 386, 387, 388, 389, 391, 392, 395, 399, 401, 413, 414, 415, 416, 418, 419, 421, 422, 424, 446, 448, 450, 451, 452, 453, 454, 464, 466, 537, 540, 562, 563, 564, 565, 569, 570, 587, 594, 599, 632, 633, 635, 644, 663, 664, 700, 705, 710, 717, 747, 765, 771, 778, 782, 785, 790, 792, 829, 866, 867, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 914, 915, 916, 917, 943, 963, 983, 984, 986, 988, 990, 993, 994, 997, 999, 1000, 1002, 1004, 1006, 1008, 1009, 1010, 1018, 1028, 1042, 1043, 1044, 1047, 1049, 1052], "taken": [37, 45, 48, 70, 80, 91, 93, 157, 177, 184, 195, 254, 255, 269, 286, 297, 322, 382, 384, 386, 387, 391, 401, 409, 414, 418, 422, 426, 445, 538, 566, 567, 588, 589, 651, 652, 655, 657, 658, 659, 663, 664, 665, 666, 667, 668, 682, 684, 686, 689, 700, 879, 880, 900, 903, 909, 910, 953, 994, 996, 1004, 1006, 1041, 1044, 1047, 1048], "unlabel": [38, 47, 258, 331, 338, 339, 340, 342, 343, 401, 414, 901, 902, 903, 993, 1019, 1022, 1024, 1026, 1047], "develop": [41, 94, 241, 278, 280, 297, 329, 335, 361, 374, 382, 386, 387, 393, 399, 401, 402, 404, 406, 409, 412, 416, 417, 421, 422, 428, 431, 438, 498, 803, 978, 990, 994, 997, 1010, 1013, 1014, 1015, 1017, 1018, 1026, 1035, 1043, 1044, 1045, 1050, 1053], "written": [41, 46, 48, 68, 89, 91, 123, 131, 175, 192, 230, 274, 304, 332, 338, 339, 375, 384, 387, 388, 389, 393, 395, 399, 401, 415, 420, 492, 507, 513, 702, 718, 832, 911, 918, 988, 990, 994, 998, 999, 1008, 1012, 1015, 1019, 1020, 1025, 1028, 1044], "cython": [41, 333, 374, 375, 385, 387, 390, 396, 399, 405, 408, 411, 414, 421, 513, 1004, 1005, 1008, 1009, 1013, 1014, 1035, 1038, 1039, 1041, 1047, 1050, 1051, 1052], "usag": [41, 80, 91, 108, 111, 120, 132, 140, 174, 195, 196, 251, 255, 257, 274, 309, 311, 317, 345, 363, 374, 382, 386, 387, 389, 390, 394, 395, 397, 401, 402, 405, 414, 418, 419, 424, 425, 449, 451, 455, 469, 494, 501, 517, 520, 524, 528, 539, 540, 546, 566, 567, 596, 614, 645, 653, 663, 664, 665, 671, 672, 673, 674, 681, 682, 683, 684, 685, 695, 782, 785, 796, 797, 862, 863, 865, 906, 914, 915, 916, 917, 943, 983, 984, 986, 993, 994, 995, 997, 1009, 1016, 1017, 1019, 1023, 1030, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "applic": [44, 46, 60, 87, 93, 116, 192, 200, 223, 240, 245, 274, 283, 320, 374, 376, 382, 384, 387, 389, 393, 395, 396, 399, 401, 413, 414, 418, 419, 420, 421, 424, 426, 449, 451, 457, 501, 503, 537, 538, 539, 558, 559, 634, 693, 694, 695, 699, 717, 733, 734, 742, 787, 788, 791, 832, 983, 990, 991, 992, 993, 994, 998, 1000, 1006, 1010, 1013, 1014, 1015, 1017, 1018, 1026, 1028, 1035, 1036, 1041, 1043, 1046], "medium": [44, 192, 256, 295, 327, 349, 414, 648, 880, 987, 990], "compress": [44, 52, 58, 86, 104, 192, 297, 320, 382, 414, 419, 422, 423, 657, 677, 697, 836, 879, 965, 968, 980, 990, 1004, 1015, 1027, 1035, 1044], "sens": [44, 45, 54, 58, 65, 93, 104, 185, 192, 195, 200, 254, 257, 320, 326, 339, 349, 361, 370, 374, 387, 388, 401, 414, 416, 418, 423, 467, 474, 475, 476, 477, 478, 479, 480, 481, 657, 660, 661, 677, 804, 814, 903, 988, 990, 997, 998, 1000, 1004, 1007, 1015], "tomographi": [44, 58, 104, 192, 657, 677, 990, 1015], "recognit": [44, 50, 56, 128, 192, 259, 318, 325, 380, 392, 419, 421, 423, 499, 507, 537, 539, 546, 702, 713, 718, 745, 773, 792, 793, 801, 817, 832, 886, 911, 986, 990, 994, 995, 999, 1009, 1011, 1015, 1019, 1022, 1030, 1035], "eigenfac": [44, 56, 192, 259, 382, 419, 499, 546, 702, 718, 817, 832, 886, 911, 1011, 1015, 1022, 1035], "denois": [44, 86, 88, 89, 91, 127, 133, 192, 419, 501, 540, 542, 546, 589, 592, 832, 876, 1015], "lag": [44, 45, 155, 158, 192, 223, 225, 241, 280, 501, 567, 706, 746, 749, 750, 752, 794, 824, 828, 829, 832, 1015], "forecast": [44, 45, 155, 158, 178, 185, 186, 192, 223, 225, 241, 280, 413, 424, 501, 567, 616, 620, 627, 628, 630, 706, 746, 749, 750, 752, 794, 824, 828, 829, 832, 994, 1013, 1015], "gui": [44, 192, 492, 910, 911, 1015, 1026, 1035, 1036, 1046], "complex": [44, 50, 51, 56, 57, 61, 109, 148, 163, 176, 179, 184, 190, 192, 227, 237, 240, 249, 256, 257, 260, 273, 278, 281, 284, 289, 321, 329, 332, 333, 337, 349, 353, 363, 364, 369, 383, 387, 392, 399, 414, 415, 419, 421, 425, 445, 449, 452, 453, 455, 472, 494, 505, 506, 507, 519, 539, 546, 556, 562, 563, 564, 565, 567, 569, 570, 609, 635, 643, 661, 663, 681, 682, 738, 754, 803, 832, 834, 862, 866, 867, 871, 879, 886, 902, 906, 909, 912, 914, 915, 916, 917, 983, 984, 986, 987, 989, 991, 993, 995, 1000, 1004, 1007, 1014, 1015, 1016, 1018, 1030, 1036, 1038, 1044, 1045, 1048], "influenc": [44, 50, 54, 116, 117, 142, 192, 195, 205, 256, 266, 288, 320, 327, 349, 353, 357, 370, 376, 416, 419, 421, 437, 445, 459, 470, 487, 488, 489, 494, 506, 559, 561, 563, 565, 567, 570, 573, 575, 616, 633, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 683, 684, 738, 754, 832, 839, 840, 848, 849, 856, 857, 864, 883, 884, 895, 907, 909, 912, 915, 917, 926, 983, 988, 989, 990, 997, 1000, 1004, 1008, 1009, 1015, 1018, 1038, 1043, 1044], "core": [44, 51, 87, 93, 103, 108, 142, 148, 150, 151, 192, 195, 196, 334, 373, 375, 385, 387, 390, 395, 401, 405, 414, 419, 421, 422, 425, 449, 451, 454, 455, 460, 462, 501, 504, 543, 594, 599, 663, 664, 671, 673, 681, 841, 842, 843, 844, 845, 850, 858, 990, 997, 1000, 1009, 1014, 1015, 1016, 1018, 1026, 1028, 1030, 1037, 1039, 1040, 1042, 1045, 1049, 1050, 1051], "latenc": [44, 48, 49, 192, 373, 529, 570, 677, 683, 832, 886, 912, 959, 968, 1013, 1015, 1030, 1038], "engin": [44, 78, 147, 152, 158, 184, 192, 196, 224, 374, 381, 384, 414, 420, 422, 469, 501, 567, 644, 678, 706, 824, 829, 864, 865, 867, 870, 871, 876, 879, 881, 885, 984, 986, 994, 1004, 1015, 1041], "topic": [44, 47, 48, 49, 107, 192, 361, 362, 363, 382, 383, 418, 419, 422, 493, 502, 541, 543, 545, 552, 593, 596, 990, 995, 1013, 1014, 1015, 1028, 1040, 1042], "stock": [44, 84, 192, 243, 244, 414, 416, 459, 477, 694, 1015, 1022], "market": [44, 84, 158, 192, 243, 244, 414, 416, 459, 477, 694, 1015, 1018, 1022], "end": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 385, 387, 389, 391, 399, 401, 402, 405, 406, 412, 414, 415, 417, 421, 455, 461, 473, 493, 494, 513, 514, 542, 551, 562, 563, 564, 565, 569, 570, 571, 650, 651, 652, 655, 656, 657, 658, 659, 660, 665, 666, 667, 668, 686, 687, 688, 689, 803, 806, 807, 817, 824, 827, 864, 866, 904, 914, 915, 916, 917, 947, 948, 978, 983, 986, 990, 991, 993, 994, 1004, 1006, 1008, 1013, 1018, 1025, 1028, 1040, 1042, 1045, 1048, 1049], "download": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 380, 382, 384, 385, 391, 392, 395, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 515, 1010, 1021, 1024, 1026, 1028, 1030, 1039, 1040, 1043, 1047, 1048, 1049], "run": [45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 375, 385, 387, 388, 389, 391, 392, 393, 394, 395, 399, 401, 402, 405, 411, 414, 416, 418, 421, 424, 425, 426, 442, 448, 449, 451, 452, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 467, 469, 472, 473, 476, 477, 536, 537, 538, 539, 540, 542, 544, 546, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 587, 597, 599, 600, 601, 603, 604, 605, 607, 615, 616, 635, 639, 645, 651, 652, 654, 656, 657, 658, 660, 661, 665, 666, 667, 668, 687, 688, 693, 694, 695, 696, 697, 698, 699, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 838, 839, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 863, 864, 865, 868, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 937, 938, 962, 965, 968, 983, 993, 995, 998, 1007, 1009, 1010, 1013, 1014, 1018, 1019, 1026, 1028, 1035, 1038, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "browser": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 387, 395, 1004, 1052], "jupyterlit": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369], "binder": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369], "notebook": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 388, 389, 393, 415, 473, 904, 1010, 1012, 1013, 1014, 1046, 1049], "introduc": [45, 114, 116, 117, 133, 158, 176, 192, 197, 202, 207, 227, 249, 254, 257, 260, 262, 287, 334, 335, 363, 380, 383, 385, 387, 389, 391, 392, 395, 399, 401, 406, 413, 414, 416, 418, 419, 421, 422, 438, 446, 447, 448, 450, 452, 454, 464, 469, 473, 487, 488, 489, 490, 501, 509, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 560, 561, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 663, 669, 690, 691, 693, 694, 697, 832, 850, 855, 858, 862, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 900, 904, 988, 990, 993, 996, 997, 1000, 1004, 1006, 1008, 1009, 1015, 1019, 1026, 1035, 1036, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "leverag": [45, 49, 75, 87, 121, 241, 361, 362, 374, 375, 385, 401, 418, 421, 881, 983, 990, 1019, 1038, 1050], "highli": [45, 50, 67, 109, 116, 117, 130, 138, 159, 207, 218, 228, 280, 283, 289, 316, 353, 362, 374, 375, 387, 389, 393, 413, 414, 418, 421, 422, 457, 467, 501, 568, 676, 697, 815, 817, 862, 990, 994, 997, 998, 1000, 1008, 1009, 1012, 1013], "busi": [45, 223, 280, 395, 399, 792, 990, 994, 1018], "dai": [45, 53, 54, 158, 184, 196, 224, 375, 384, 387, 885, 1018, 1041, 1042, 1049, 1050], "week": [45, 54, 158, 336, 386, 387, 402, 501, 1018, 1049], "yearli": 45, "season": [45, 54, 184, 196, 224, 386], "extrapol": [45, 179, 202, 224, 253, 283, 885, 994, 1004, 1010, 1048, 1050], "repositori": [45, 49, 54, 200, 335, 380, 382, 384, 385, 387, 389, 391, 395, 402, 405, 509, 1013, 1017, 1030], "bike_shar": [45, 54], "bike_sharing_demand": [45, 54, 196], "as_fram": [45, 46, 54, 108, 112, 148, 152, 158, 163, 184, 195, 196, 197, 198, 211, 212, 223, 231, 239, 241, 260, 264, 297, 300, 303, 317, 325, 326, 329, 331, 333, 334, 381, 382, 494, 495, 496, 497, 501, 505, 506, 507, 509, 510, 515, 1045, 1046, 1047, 1048, 1051], "df": [45, 54, 65, 67, 158, 163, 194, 196, 202, 207, 223, 241, 271, 280, 324, 326, 336, 362, 392, 422, 471, 595, 596, 983, 984, 1052], "frame": [45, 54, 57, 108, 158, 184, 195, 196, 223, 326, 336, 382, 387, 399, 402, 494, 495, 496, 497, 501, 505, 506, 507, 509, 510, 515, 1013, 1024, 1047], "quick": [45, 133, 263, 387, 389, 393, 405, 611, 832, 994, 995, 1004, 1018, 1026, 1032], "understand": [45, 50, 54, 79, 142, 184, 192, 196, 257, 275, 278, 331, 332, 346, 353, 361, 364, 365, 370, 385, 386, 387, 388, 393, 399, 404, 414, 421, 422, 509, 832, 863, 864, 914, 915, 916, 917, 920, 983, 984, 991, 993, 1010, 1012, 1013, 1015, 1018, 1035, 1049], "pattern": [45, 54, 57, 61, 101, 118, 124, 127, 135, 179, 190, 192, 196, 207, 227, 257, 260, 332, 361, 362, 363, 370, 384, 387, 389, 402, 412, 414, 415, 419, 421, 422, 453, 469, 471, 509, 537, 539, 546, 560, 561, 643, 713, 729, 745, 773, 792, 793, 801, 886, 986, 988, 990, 994, 995, 1001, 1009, 1011, 1014, 1015, 1018, 1047], "let": [45, 46, 54, 91, 93, 102, 108, 112, 124, 128, 133, 149, 152, 155, 156, 158, 160, 179, 185, 186, 191, 195, 196, 197, 204, 212, 223, 225, 241, 243, 247, 257, 264, 275, 280, 283, 287, 361, 363, 369, 370, 382, 387, 389, 393, 399, 412, 414, 418, 421, 422, 446, 450, 496, 505, 509, 515, 539, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 686, 689, 872, 879, 880, 990, 991, 992, 993, 994, 1001, 1002, 1004, 1009, 1010, 1018, 1026, 1027, 1028, 1045], "u": [45, 51, 52, 53, 54, 57, 58, 73, 88, 90, 94, 124, 128, 135, 152, 153, 158, 179, 188, 194, 195, 196, 220, 224, 227, 231, 241, 244, 247, 254, 257, 263, 264, 267, 268, 272, 275, 280, 283, 287, 324, 326, 353, 361, 369, 375, 382, 387, 391, 393, 395, 399, 405, 406, 412, 414, 417, 419, 421, 422, 437, 468, 470, 487, 488, 489, 536, 542, 550, 551, 555, 557, 559, 561, 563, 565, 567, 570, 573, 575, 593, 594, 596, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 686, 689, 694, 698, 709, 725, 744, 759, 839, 840, 849, 857, 864, 886, 900, 907, 909, 912, 915, 917, 943, 986, 988, 993, 994, 1001, 1004, 1018, 1028, 1032, 1045], "look": [45, 46, 67, 91, 93, 128, 131, 133, 155, 156, 179, 184, 185, 191, 195, 196, 225, 243, 247, 250, 257, 272, 275, 280, 282, 317, 336, 361, 362, 370, 375, 376, 381, 382, 385, 387, 389, 391, 393, 395, 399, 400, 414, 417, 419, 420, 421, 422, 453, 493, 494, 562, 563, 564, 565, 569, 570, 607, 608, 636, 664, 697, 886, 914, 915, 916, 917, 990, 991, 1004, 1008, 1009, 1011, 1027, 1028, 1035, 1043, 1045], "per": [45, 51, 61, 73, 86, 91, 102, 125, 147, 148, 152, 184, 186, 195, 196, 223, 238, 241, 260, 264, 267, 276, 287, 289, 320, 326, 331, 336, 357, 361, 363, 374, 382, 383, 387, 392, 393, 396, 399, 401, 413, 414, 418, 419, 420, 421, 422, 424, 451, 453, 455, 462, 466, 469, 473, 492, 501, 505, 507, 508, 509, 513, 515, 517, 520, 528, 537, 539, 540, 541, 544, 546, 548, 554, 555, 566, 567, 574, 588, 593, 596, 615, 616, 637, 638, 646, 647, 663, 664, 671, 672, 673, 676, 678, 679, 680, 681, 683, 697, 701, 718, 721, 725, 745, 758, 762, 763, 785, 787, 801, 802, 827, 834, 835, 836, 838, 839, 842, 844, 862, 865, 871, 873, 875, 876, 879, 880, 886, 887, 904, 906, 907, 908, 909, 910, 911, 912, 931, 932, 943, 969, 983, 986, 990, 993, 994, 995, 998, 1001, 1008, 1009, 1010, 1013, 1014, 1026, 1028, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052], "hour": [45, 158, 195, 196, 336, 387, 393, 501, 991, 1012], "sundai": 45, "weekend": [45, 158], "clearli": [45, 98, 131, 196, 255, 353, 386, 387, 399, 401, 419, 421, 995, 1001], "distinguish": [45, 61, 78, 116, 126, 133, 225, 277, 297, 382, 389, 401, 402, 424, 983, 994, 997, 1000], "commut": [45, 54], "morn": 45, "leisur": 45, "spread": [45, 78, 245, 281, 320, 338, 339, 340, 343, 357, 374, 387, 414, 457, 467, 520, 883, 895, 903, 994], "peak": [45, 54, 67, 196, 413, 418, 1049], "middl": [45, 64, 73, 98, 133, 207, 358, 384, 1001, 1004], "matplotlib": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 198, 200, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 263, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 333, 334, 336, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 381, 390, 394, 405, 408, 443, 507, 636, 637, 702, 703, 705, 706, 707, 809, 825, 920, 989, 1013, 1022, 1023, 1024, 1025, 1026, 1027, 1032, 1044, 1047, 1048, 1049, 1050], "pyplot": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 198, 200, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 263, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 333, 334, 336, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 387, 394, 443, 507, 636, 637, 702, 703, 705, 706, 707, 809, 825, 1023, 1024, 1025, 1026, 1027, 1032, 1049], "plt": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 198, 200, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 263, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 333, 334, 336, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 394, 443, 507, 636, 637, 702, 703, 705, 706, 707, 809, 825, 920, 1001, 1023, 1024, 1025, 1026, 1027, 1032], "fig": [45, 46, 48, 49, 50, 51, 54, 56, 65, 67, 69, 73, 80, 81, 83, 91, 93, 95, 98, 102, 104, 110, 114, 116, 121, 124, 128, 133, 134, 138, 142, 148, 149, 152, 153, 155, 156, 158, 160, 161, 163, 165, 182, 188, 190, 196, 198, 200, 203, 211, 214, 217, 218, 220, 221, 223, 224, 227, 231, 236, 238, 241, 243, 244, 245, 246, 247, 248, 251, 253, 260, 261, 271, 275, 276, 277, 280, 281, 282, 283, 286, 289, 290, 291, 299, 300, 302, 304, 305, 313, 316, 317, 320, 321, 322, 324, 325, 326, 329, 333, 334, 346, 353, 356, 357, 358, 359, 361, 362, 363, 365, 394, 1024, 1027], "ax": [45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 65, 67, 69, 70, 71, 73, 78, 80, 81, 83, 91, 93, 94, 95, 102, 104, 109, 112, 116, 118, 121, 124, 126, 128, 134, 138, 142, 144, 147, 149, 152, 153, 158, 160, 161, 163, 164, 165, 182, 183, 188, 190, 194, 195, 196, 197, 198, 200, 202, 203, 206, 207, 212, 214, 215, 218, 220, 221, 223, 224, 225, 227, 228, 231, 232, 234, 236, 237, 238, 241, 243, 244, 245, 246, 247, 248, 251, 256, 260, 261, 263, 266, 268, 271, 275, 276, 277, 280, 282, 283, 284, 286, 287, 289, 290, 291, 292, 294, 297, 299, 300, 302, 303, 304, 305, 308, 310, 311, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 329, 330, 333, 334, 336, 345, 346, 347, 348, 350, 351, 353, 356, 357, 358, 359, 361, 362, 363, 365, 366, 389, 390, 419, 424, 443, 539, 546, 555, 636, 637, 702, 703, 705, 706, 707, 723, 809, 825, 920, 994, 997, 1001, 1027, 1032, 1045, 1051], "subplot": [45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 69, 70, 71, 73, 77, 81, 82, 88, 89, 91, 92, 93, 94, 95, 98, 100, 103, 104, 110, 112, 115, 116, 117, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 133, 137, 138, 142, 144, 145, 147, 148, 149, 151, 152, 153, 156, 158, 160, 161, 163, 164, 165, 172, 181, 183, 188, 190, 191, 195, 196, 198, 200, 203, 206, 214, 215, 217, 218, 221, 222, 223, 224, 225, 227, 231, 236, 237, 239, 241, 243, 244, 247, 248, 250, 251, 253, 255, 256, 258, 259, 260, 261, 266, 267, 268, 269, 271, 272, 275, 276, 277, 280, 282, 283, 285, 286, 287, 289, 290, 291, 293, 294, 299, 300, 302, 303, 304, 305, 308, 309, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 329, 333, 334, 341, 343, 346, 347, 348, 349, 353, 356, 357, 358, 359, 361, 362, 363, 365, 366, 394, 1024], "figsiz": [45, 46, 47, 51, 53, 54, 55, 56, 65, 66, 67, 69, 70, 71, 73, 77, 78, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 100, 102, 103, 104, 110, 112, 116, 118, 120, 121, 123, 124, 125, 126, 128, 131, 132, 133, 134, 137, 138, 142, 144, 145, 152, 153, 154, 155, 156, 158, 161, 163, 164, 172, 181, 183, 187, 188, 190, 191, 195, 196, 198, 200, 202, 203, 206, 207, 213, 217, 220, 221, 222, 223, 224, 225, 227, 229, 231, 234, 237, 239, 241, 243, 244, 245, 247, 248, 250, 251, 253, 255, 258, 259, 260, 261, 266, 268, 269, 272, 275, 276, 277, 282, 283, 284, 287, 289, 290, 294, 299, 300, 302, 303, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 333, 334, 338, 340, 347, 349, 353, 354, 356, 357, 358, 359, 361, 362, 363, 920, 1024], "4": [45, 46, 47, 48, 49, 50, 51, 53, 54, 58, 60, 61, 65, 66, 67, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 100, 102, 103, 104, 107, 108, 109, 110, 111, 117, 118, 120, 121, 124, 125, 126, 129, 130, 131, 132, 133, 134, 136, 137, 142, 143, 145, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 168, 173, 177, 179, 182, 184, 185, 187, 188, 190, 191, 192, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 227, 229, 230, 231, 233, 236, 237, 241, 243, 250, 254, 255, 256, 257, 258, 259, 260, 262, 264, 266, 267, 268, 269, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 291, 294, 299, 300, 302, 304, 305, 306, 307, 310, 315, 317, 318, 320, 321, 323, 324, 326, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 341, 342, 346, 348, 352, 353, 354, 357, 358, 359, 361, 362, 369, 370, 375, 381, 382, 384, 385, 387, 392, 393, 396, 399, 400, 401, 405, 406, 407, 408, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 496, 501, 509, 517, 518, 521, 522, 523, 529, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 619, 622, 623, 624, 627, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 681, 682, 684, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 703, 704, 707, 711, 712, 720, 721, 729, 730, 731, 736, 738, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 760, 772, 773, 785, 786, 792, 793, 794, 795, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 832, 834, 835, 836, 837, 840, 841, 842, 843, 845, 850, 854, 855, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 893, 894, 898, 899, 900, 904, 906, 907, 910, 914, 915, 916, 917, 922, 923, 925, 926, 927, 928, 932, 942, 943, 944, 945, 947, 948, 949, 950, 951, 958, 962, 965, 966, 967, 969, 970, 971, 972, 975, 976, 977, 983, 984, 987, 988, 989, 990, 992, 994, 995, 996, 997, 1004, 1005, 1008, 1009, 1015, 1019, 1023, 1024, 1025, 1026, 1028, 1031, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1053], "average_week_demand": [45, 158], "groupbi": [45, 158, 196, 231, 241], "weekdai": [45, 54, 196], "_": [45, 46, 48, 49, 50, 52, 53, 54, 56, 61, 65, 66, 67, 69, 71, 72, 78, 81, 88, 91, 93, 96, 101, 105, 107, 118, 124, 126, 128, 133, 135, 137, 145, 146, 147, 158, 172, 179, 184, 185, 186, 194, 195, 196, 198, 200, 202, 206, 207, 208, 210, 211, 212, 215, 220, 221, 223, 225, 227, 236, 237, 240, 244, 247, 251, 256, 260, 264, 275, 280, 282, 283, 284, 286, 287, 289, 297, 303, 308, 311, 318, 322, 325, 326, 327, 330, 333, 334, 335, 339, 340, 348, 353, 357, 361, 363, 366, 389, 393, 401, 419, 421, 422, 426, 451, 483, 537, 538, 539, 540, 541, 543, 544, 545, 548, 550, 551, 552, 571, 602, 651, 652, 657, 658, 665, 666, 667, 668, 686, 687, 688, 689, 693, 694, 695, 696, 698, 700, 701, 703, 705, 715, 768, 803, 809, 817, 825, 850, 858, 879, 880, 887, 984, 990, 991, 994, 996, 997, 998, 1001, 1002, 1004, 1009, 1010, 1026, 1027, 1042], "hourli": [45, 158, 195], "xtick": [45, 47, 49, 52, 69, 73, 78, 82, 84, 88, 89, 90, 96, 97, 100, 118, 120, 131, 152, 154, 158, 181, 182, 183, 187, 206, 213, 219, 236, 250, 258, 267, 268, 269, 272, 279, 280, 294, 304, 313, 318, 326, 338, 349, 352, 354, 355, 702, 1024], "24": [45, 46, 54, 104, 158, 177, 192, 196, 200, 207, 248, 260, 292, 300, 328, 329, 330, 332, 335, 336, 338, 339, 391, 405, 414, 421, 422, 442, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 465, 467, 469, 474, 475, 476, 477, 478, 479, 480, 481, 494, 495, 496, 497, 501, 509, 520, 521, 522, 523, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 618, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 703, 704, 705, 707, 713, 719, 731, 750, 757, 801, 802, 803, 806, 807, 817, 824, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 867, 869, 870, 871, 872, 875, 876, 878, 880, 881, 882, 883, 884, 886, 896, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 937, 938, 942, 969, 975, 983, 1001, 1004, 1015, 1031, 1033, 1035, 1043, 1044, 1045, 1046, 1048], "xticklabel": [45, 51, 152, 158, 196, 326], "sun": [45, 158, 196, 1043, 1048, 1049], "mon": [45, 158, 196], "tue": [45, 158, 196, 1041], "wed": [45, 158, 196], "thu": [45, 46, 64, 65, 66, 67, 78, 91, 93, 98, 114, 118, 131, 133, 145, 147, 148, 150, 152, 158, 173, 179, 184, 185, 196, 207, 211, 212, 223, 225, 241, 250, 256, 261, 268, 278, 280, 285, 286, 287, 303, 327, 329, 332, 365, 370, 374, 375, 382, 389, 393, 399, 401, 406, 413, 414, 418, 419, 421, 422, 424, 425, 442, 444, 468, 520, 532, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 608, 611, 615, 627, 632, 637, 638, 648, 650, 663, 682, 710, 723, 729, 792, 799, 805, 810, 812, 824, 837, 840, 875, 906, 985, 986, 987, 988, 989, 990, 991, 994, 995, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1014, 1018, 1035, 1037, 1041, 1043, 1044, 1045, 1047, 1051], "fri": [45, 158, 196, 382], "sat": [45, 158, 196, 422], "xlabel": [45, 49, 50, 54, 64, 65, 66, 67, 72, 75, 79, 99, 114, 115, 117, 118, 120, 121, 124, 130, 135, 143, 144, 146, 152, 154, 155, 156, 157, 158, 162, 166, 168, 172, 173, 176, 179, 180, 181, 182, 184, 185, 186, 195, 202, 205, 206, 207, 208, 210, 211, 212, 213, 216, 217, 223, 225, 226, 228, 230, 232, 233, 237, 241, 254, 256, 258, 260, 275, 279, 280, 284, 285, 289, 290, 293, 294, 302, 303, 306, 307, 326, 327, 346, 348, 349, 352, 361, 366, 367, 368, 636, 1023, 1027], "ylabel": [45, 49, 50, 54, 64, 65, 66, 67, 72, 75, 99, 114, 115, 117, 118, 120, 121, 124, 130, 135, 143, 144, 146, 154, 155, 156, 157, 158, 162, 166, 168, 172, 173, 176, 179, 180, 181, 182, 184, 185, 186, 195, 202, 205, 206, 207, 208, 210, 211, 212, 213, 216, 217, 223, 225, 226, 228, 230, 232, 233, 241, 254, 256, 258, 275, 279, 280, 283, 284, 285, 289, 290, 293, 294, 303, 327, 346, 349, 352, 361, 366, 367, 368, 636, 1023, 1027], "rental": [45, 54, 196, 1001], "max": [45, 49, 51, 52, 53, 54, 58, 60, 65, 67, 70, 72, 78, 82, 90, 96, 100, 105, 109, 110, 113, 115, 118, 128, 131, 135, 138, 142, 144, 151, 157, 161, 168, 169, 170, 172, 173, 177, 181, 183, 184, 191, 192, 195, 205, 210, 211, 212, 216, 218, 225, 226, 229, 237, 239, 241, 246, 254, 258, 278, 279, 280, 291, 293, 299, 300, 302, 306, 307, 311, 313, 315, 317, 320, 322, 323, 325, 332, 341, 343, 355, 358, 374, 414, 416, 419, 474, 475, 476, 477, 478, 479, 480, 481, 482, 517, 541, 560, 561, 562, 563, 564, 565, 568, 569, 570, 611, 632, 636, 637, 653, 654, 674, 677, 679, 685, 696, 697, 701, 704, 709, 710, 745, 761, 796, 797, 803, 863, 864, 875, 876, 878, 885, 892, 893, 914, 915, 916, 917, 962, 990, 992, 997, 1004, 1008, 1009, 1015, 1026, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "977": [45, 54, 358, 418, 1015], "rescal": [45, 84, 85, 93, 133, 204, 211, 246, 260, 320, 359, 416, 426, 474, 475, 476, 477, 478, 479, 480, 481, 538, 543, 651, 654, 657, 878, 884, 908, 909, 910, 911, 912, 994, 1004, 1027, 1039, 1040], "rel": [45, 47, 49, 58, 61, 67, 93, 99, 133, 149, 184, 198, 200, 203, 223, 241, 269, 306, 307, 321, 330, 333, 349, 353, 361, 362, 382, 386, 389, 395, 401, 413, 414, 418, 421, 422, 424, 445, 448, 452, 454, 464, 526, 529, 536, 539, 542, 546, 550, 551, 562, 563, 564, 565, 569, 570, 571, 609, 654, 663, 664, 676, 677, 679, 695, 699, 733, 751, 803, 806, 807, 809, 817, 825, 830, 833, 846, 847, 851, 863, 864, 875, 876, 886, 902, 906, 907, 908, 911, 913, 914, 915, 916, 917, 990, 991, 994, 996, 997, 998, 1000, 1024], "easili": [45, 50, 70, 124, 174, 198, 226, 239, 255, 257, 261, 264, 280, 282, 289, 305, 322, 387, 389, 401, 402, 415, 421, 422, 424, 454, 988, 990, 991, 1004, 1008, 1009, 1010, 1017, 1020, 1023, 1028, 1041], "interpret": [45, 67, 158, 177, 186, 192, 193, 194, 196, 219, 223, 224, 228, 239, 241, 274, 280, 282, 283, 318, 321, 324, 331, 361, 363, 374, 385, 387, 388, 393, 395, 396, 401, 404, 413, 414, 415, 420, 422, 457, 469, 470, 472, 501, 546, 577, 616, 644, 648, 658, 677, 678, 696, 697, 700, 706, 733, 757, 762, 763, 787, 796, 797, 809, 818, 829, 830, 832, 835, 867, 879, 886, 962, 988, 990, 994, 995, 1001, 1002, 1004, 1010, 1013, 1015, 1019, 1027, 1035, 1036, 1040, 1043, 1048, 1049, 1050], "nevertheless": [45, 198, 421], "discuss": [45, 91, 96, 177, 195, 212, 243, 248, 283, 297, 361, 370, 376, 382, 384, 387, 392, 393, 395, 399, 401, 402, 414, 416, 420, 421, 424, 503, 687, 688, 848, 849, 854, 856, 857, 984, 988, 990, 991, 994, 997, 1004, 1011, 1014, 1017, 1038], "choos": [45, 52, 53, 82, 84, 88, 91, 98, 100, 104, 114, 134, 151, 163, 168, 177, 195, 198, 216, 258, 275, 285, 292, 365, 370, 374, 375, 376, 389, 392, 395, 401, 414, 416, 418, 421, 422, 425, 448, 449, 452, 454, 464, 528, 537, 543, 564, 565, 587, 607, 663, 664, 677, 679, 684, 692, 693, 694, 698, 730, 760, 803, 806, 807, 817, 873, 906, 907, 914, 915, 916, 917, 984, 985, 989, 990, 991, 992, 993, 997, 1004, 1007, 1008, 1009, 1020, 1022, 1026, 1027, 1037, 1038, 1042, 1044, 1046], "focu": [45, 50, 128, 142, 179, 272, 310, 374, 392, 413, 421, 558, 559, 564, 566, 567, 683, 991, 997, 1004, 1013, 1014, 1017], "becaus": [45, 46, 54, 60, 65, 67, 78, 85, 88, 108, 118, 121, 142, 147, 150, 155, 177, 180, 183, 186, 195, 196, 198, 203, 209, 216, 223, 227, 229, 231, 241, 256, 257, 267, 277, 280, 281, 286, 299, 300, 316, 317, 318, 320, 324, 325, 326, 327, 340, 349, 353, 361, 362, 363, 365, 369, 370, 374, 375, 382, 385, 389, 392, 395, 399, 400, 401, 406, 409, 412, 413, 414, 415, 418, 419, 420, 421, 422, 424, 427, 437, 452, 453, 466, 470, 480, 487, 488, 489, 539, 541, 557, 559, 561, 563, 565, 567, 570, 573, 575, 593, 596, 612, 613, 616, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 681, 682, 683, 684, 685, 694, 704, 714, 717, 718, 726, 727, 728, 750, 767, 789, 792, 798, 803, 817, 830, 834, 839, 840, 849, 852, 854, 856, 857, 858, 864, 875, 876, 884, 886, 887, 891, 892, 894, 895, 896, 897, 907, 909, 912, 915, 917, 958, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1001, 1004, 1009, 1010, 1018, 1027, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1051], "intuit": [45, 54, 70, 82, 90, 100, 133, 142, 145, 152, 172, 179, 195, 196, 224, 225, 245, 250, 281, 297, 305, 322, 325, 346, 349, 353, 362, 387, 401, 413, 414, 416, 418, 420, 786, 787, 788, 791, 877, 908, 911, 986, 990, 991, 994, 995, 1001, 1004, 1005, 1009, 1018, 1026, 1028, 1035], "studi": [45, 67, 98, 155, 223, 241, 283, 286, 287, 361, 382, 384, 418, 423, 701, 713, 762, 763, 831, 992, 994, 1008, 1019], "ones": [45, 52, 73, 81, 93, 108, 117, 153, 159, 179, 200, 207, 227, 228, 250, 253, 257, 280, 288, 291, 307, 324, 339, 359, 374, 375, 387, 395, 401, 414, 416, 418, 421, 429, 432, 436, 455, 537, 571, 586, 615, 616, 623, 649, 650, 663, 664, 675, 681, 708, 800, 805, 810, 821, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 881, 885, 948, 990, 994, 999, 1000, 1004, 1009, 1026, 1035, 1043, 1044, 1045], "hist": [45, 65, 67, 91, 112, 144, 148, 223, 225, 254, 260, 286, 305, 320, 324, 326, 333, 336, 421], "30": [45, 49, 51, 56, 60, 73, 77, 78, 82, 88, 92, 98, 108, 110, 114, 135, 142, 151, 155, 158, 162, 168, 177, 179, 180, 183, 185, 196, 200, 202, 217, 221, 223, 241, 243, 244, 248, 255, 259, 260, 270, 280, 285, 294, 297, 300, 309, 310, 324, 325, 326, 334, 335, 338, 339, 343, 347, 350, 352, 355, 374, 382, 384, 392, 393, 418, 422, 425, 449, 455, 460, 461, 462, 505, 536, 540, 542, 543, 544, 546, 548, 550, 551, 575, 597, 600, 601, 603, 653, 697, 739, 787, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 887, 902, 915, 972, 983, 988, 994, 995, 997, 1002, 1024, 1035, 1036, 1042, 1043, 1044], "rent": 45, "fleet": 45, "weather": [45, 54, 184, 196, 990, 994], "alreadi": [45, 47, 51, 57, 93, 96, 124, 133, 142, 158, 163, 177, 195, 251, 258, 260, 263, 281, 287, 300, 332, 335, 387, 388, 392, 399, 401, 413, 416, 418, 420, 421, 426, 442, 504, 528, 538, 572, 573, 639, 651, 654, 669, 670, 671, 672, 673, 679, 681, 682, 683, 690, 691, 772, 782, 841, 861, 869, 875, 876, 878, 883, 903, 906, 907, 929, 953, 983, 986, 1000, 1004, 1005, 1014, 1019, 1024, 1028, 1032, 1036, 1040, 1043, 1047, 1048, 1049, 1050], "expand": [45, 57, 87, 103, 252, 326, 330, 370, 379, 421, 449, 455, 504, 562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917, 994, 1036, 1043, 1044, 1051], "complementari": [45, 422], "drop": [45, 46, 54, 108, 112, 121, 158, 184, 194, 195, 196, 198, 223, 227, 241, 260, 264, 290, 326, 331, 334, 336, 362, 391, 395, 415, 419, 421, 469, 472, 572, 573, 574, 575, 700, 705, 707, 786, 793, 865, 879, 885, 984, 990, 994, 1004, 1013, 1035, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "holidai": [45, 196], "workingdai": [45, 196], "temp": [45, 54, 196], "feel_temp": [45, 54, 196], "humid": [45, 54, 196, 1001], "windspe": [45, 54, 196], "spring": [45, 54, 196], "clear": [45, 57, 93, 98, 109, 195, 196, 325, 382, 386, 387, 389, 399, 400, 401, 413, 415, 420, 920, 921, 983, 988, 1046, 1047, 1048], "9": [45, 48, 50, 53, 54, 55, 64, 66, 67, 70, 71, 73, 80, 82, 88, 93, 96, 100, 102, 111, 118, 125, 128, 131, 151, 152, 154, 155, 161, 163, 168, 169, 170, 177, 182, 186, 191, 194, 195, 196, 204, 205, 214, 223, 236, 237, 240, 241, 243, 246, 254, 255, 256, 264, 266, 267, 268, 269, 274, 283, 287, 289, 299, 302, 304, 305, 308, 309, 310, 315, 316, 318, 320, 322, 323, 324, 326, 327, 334, 335, 338, 339, 341, 342, 343, 349, 353, 359, 363, 370, 384, 385, 393, 400, 405, 407, 408, 413, 415, 416, 418, 421, 422, 444, 448, 455, 462, 468, 487, 488, 489, 490, 495, 501, 503, 521, 523, 525, 532, 539, 543, 544, 545, 552, 565, 572, 575, 588, 596, 609, 610, 612, 613, 632, 635, 639, 642, 644, 651, 652, 657, 663, 665, 666, 667, 686, 687, 688, 692, 697, 704, 714, 727, 730, 745, 752, 773, 782, 783, 784, 801, 804, 806, 807, 821, 824, 830, 832, 835, 843, 844, 848, 849, 854, 857, 863, 864, 872, 878, 881, 942, 943, 947, 967, 983, 989, 990, 994, 998, 1004, 1008, 1009, 1019, 1023, 1028, 1031, 1033, 1036, 1037, 1038, 1040, 1049, 1051], "84": [45, 47, 49, 107, 174, 214, 241, 322, 338, 370, 384, 421, 422, 792, 817, 994, 1004, 1024], "14": [45, 52, 54, 60, 76, 87, 93, 98, 100, 101, 104, 111, 117, 133, 172, 195, 196, 207, 212, 214, 241, 245, 248, 250, 255, 260, 279, 285, 286, 294, 299, 300, 318, 323, 324, 331, 334, 356, 359, 375, 382, 384, 385, 400, 405, 407, 408, 414, 418, 501, 503, 515, 558, 559, 640, 648, 697, 817, 821, 872, 987, 990, 994, 1004, 1009, 1015, 1019, 1033, 1035, 1036, 1038, 1039, 1043, 1048], "395": 45, "81": [45, 88, 264, 338, 339, 414, 704, 765, 792, 803, 817, 833, 994, 995, 997, 1004], "0000": [45, 334], "02": [45, 53, 54, 69, 82, 88, 90, 96, 100, 102, 118, 120, 128, 131, 144, 151, 177, 181, 186, 194, 195, 204, 241, 250, 258, 260, 275, 281, 287, 305, 315, 318, 320, 322, 343, 345, 362, 366, 381, 384, 392, 418, 446, 450, 602, 610, 663, 681, 803, 817, 885, 901, 915, 990, 1015], "13": [45, 47, 51, 52, 54, 82, 111, 133, 137, 151, 154, 156, 177, 190, 195, 200, 209, 232, 248, 274, 281, 284, 286, 318, 320, 324, 349, 382, 384, 387, 393, 400, 418, 426, 501, 515, 518, 537, 538, 556, 557, 587, 611, 640, 644, 738, 763, 821, 850, 865, 872, 898, 899, 990, 994, 995, 1000, 1001, 1004, 1009, 1019, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1047], "635": [45, 621], "80": [45, 47, 52, 57, 67, 105, 117, 163, 170, 174, 196, 202, 258, 322, 326, 338, 352, 354, 361, 367, 370, 382, 384, 387, 413, 418, 423, 425, 449, 484, 515, 546, 718, 803, 817, 887, 900, 919, 983, 989, 990, 994, 1001, 1007, 1010, 1028], "75": [45, 47, 48, 51, 54, 72, 82, 93, 118, 145, 174, 186, 187, 191, 195, 200, 202, 205, 214, 230, 241, 264, 268, 269, 280, 289, 293, 305, 320, 332, 359, 361, 370, 454, 506, 556, 642, 663, 699, 711, 717, 738, 743, 744, 749, 757, 760, 798, 803, 884, 892, 896, 903, 919, 931, 932, 975, 994, 996, 1004, 1010, 1012, 1024, 1037], "17374": [45, 54], "19": [45, 54, 80, 131, 184, 195, 227, 245, 271, 297, 324, 325, 339, 384, 385, 391, 401, 405, 407, 408, 414, 415, 422, 425, 449, 497, 521, 522, 523, 541, 545, 546, 552, 554, 555, 562, 563, 564, 565, 569, 570, 571, 587, 594, 612, 653, 663, 664, 671, 672, 673, 676, 677, 679, 681, 683, 692, 712, 785, 789, 803, 817, 829, 834, 835, 837, 838, 852, 853, 872, 883, 904, 908, 911, 914, 915, 916, 917, 983, 994, 1004, 1015, 1031, 1033, 1035, 1036, 1037, 1038, 1040, 1043, 1052], "misti": [45, 196], "66": [45, 247, 326, 384, 414, 431, 466, 537, 637, 717, 787, 788, 799, 885, 893, 976, 994, 1006], "880": [45, 291, 1015], "60": [45, 47, 49, 57, 97, 110, 118, 126, 223, 235, 241, 243, 244, 264, 269, 288, 293, 339, 352, 361, 381, 414, 418, 455, 462, 718, 803, 994, 1004, 1024, 1035, 1038], "11": [45, 46, 49, 54, 60, 111, 117, 130, 177, 182, 195, 196, 207, 223, 224, 225, 228, 260, 277, 285, 286, 292, 303, 304, 306, 324, 331, 334, 335, 348, 352, 357, 363, 381, 384, 385, 393, 400, 414, 417, 418, 421, 455, 462, 487, 488, 489, 490, 501, 506, 522, 523, 617, 655, 661, 675, 720, 726, 727, 728, 782, 783, 784, 804, 807, 821, 824, 831, 858, 915, 944, 958, 986, 990, 992, 1004, 1008, 1009, 1015, 1019, 1026, 1028, 1033, 1037, 1041, 1043, 1044, 1046, 1049, 1050], "0014": 45, "17375": [45, 54], "17376": [45, 54], "21": [45, 54, 110, 158, 177, 195, 196, 212, 224, 241, 248, 260, 271, 300, 318, 322, 324, 335, 384, 385, 389, 391, 405, 412, 421, 422, 446, 450, 479, 483, 534, 537, 566, 567, 568, 574, 575, 593, 594, 596, 632, 674, 692, 758, 803, 805, 817, 829, 872, 879, 881, 887, 904, 920, 942, 986, 990, 995, 1004, 1015, 1031, 1033, 1035, 1036, 1038, 1042, 1043, 1045], "17377": [45, 54], "22": [45, 47, 54, 80, 131, 140, 146, 147, 190, 191, 192, 195, 196, 197, 240, 263, 271, 297, 302, 318, 320, 324, 328, 331, 334, 339, 363, 387, 392, 405, 412, 442, 453, 477, 483, 493, 494, 500, 501, 509, 520, 529, 536, 542, 547, 550, 551, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 599, 614, 632, 633, 637, 639, 650, 652, 656, 658, 660, 663, 664, 666, 668, 670, 674, 693, 697, 707, 709, 718, 761, 773, 782, 787, 788, 792, 803, 804, 808, 817, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 850, 852, 854, 856, 857, 858, 863, 864, 865, 867, 870, 886, 897, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 937, 938, 986, 994, 1004, 1015, 1031, 1033, 1035, 1038, 1043, 1046, 1048], "56": [45, 54, 232, 241, 254, 393, 651, 652, 657, 665, 666, 667, 686, 718, 739, 994, 1004, 1031, 1035], "8": [45, 46, 47, 48, 49, 50, 53, 54, 55, 60, 65, 66, 67, 70, 71, 73, 75, 81, 82, 83, 86, 88, 91, 93, 98, 100, 102, 103, 107, 109, 111, 112, 117, 120, 124, 125, 126, 128, 129, 132, 133, 136, 138, 142, 145, 147, 148, 152, 154, 155, 157, 161, 164, 165, 168, 176, 177, 180, 182, 184, 185, 187, 188, 191, 194, 195, 196, 198, 200, 202, 203, 208, 209, 214, 217, 223, 224, 227, 231, 233, 239, 241, 243, 244, 245, 247, 248, 251, 254, 255, 256, 258, 262, 263, 264, 266, 267, 268, 270, 271, 272, 275, 276, 278, 279, 280, 281, 283, 284, 285, 287, 290, 291, 297, 299, 302, 304, 308, 312, 315, 317, 318, 320, 322, 323, 324, 325, 326, 329, 334, 338, 339, 340, 342, 343, 346, 349, 353, 354, 356, 357, 358, 361, 362, 363, 368, 370, 375, 381, 382, 384, 385, 387, 392, 393, 405, 407, 408, 413, 414, 418, 419, 421, 422, 423, 425, 427, 444, 448, 449, 452, 454, 455, 457, 460, 461, 462, 467, 468, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 488, 489, 490, 492, 495, 501, 503, 507, 508, 519, 521, 536, 539, 543, 545, 548, 550, 552, 554, 555, 560, 561, 570, 575, 587, 593, 594, 595, 596, 609, 610, 633, 634, 641, 642, 653, 663, 675, 681, 694, 697, 698, 699, 700, 704, 707, 711, 712, 714, 715, 720, 726, 731, 732, 733, 745, 749, 750, 754, 755, 757, 786, 787, 789, 792, 793, 794, 795, 799, 801, 804, 805, 810, 813, 820, 821, 824, 825, 832, 833, 835, 844, 846, 847, 853, 863, 864, 865, 871, 878, 885, 887, 908, 911, 941, 942, 943, 947, 963, 969, 970, 971, 972, 973, 974, 975, 983, 984, 990, 991, 992, 994, 997, 1002, 1004, 1008, 1018, 1019, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1036, 1037, 1038, 1042, 1043, 1048, 1049, 1051], "9981": 45, "17378": [45, 54], "23": [45, 54, 60, 66, 73, 88, 131, 160, 177, 192, 223, 248, 252, 262, 264, 271, 318, 324, 328, 331, 332, 333, 335, 336, 339, 342, 384, 385, 387, 393, 405, 407, 408, 421, 427, 437, 445, 452, 457, 459, 467, 470, 472, 473, 480, 483, 484, 485, 487, 488, 489, 495, 497, 505, 506, 507, 509, 510, 515, 517, 519, 527, 529, 543, 544, 545, 548, 552, 559, 561, 563, 565, 566, 567, 570, 573, 574, 575, 612, 613, 616, 632, 635, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 680, 683, 684, 685, 686, 722, 734, 782, 832, 838, 839, 840, 849, 857, 864, 867, 879, 886, 894, 895, 904, 907, 909, 912, 915, 917, 924, 926, 927, 937, 938, 943, 994, 1015, 1031, 1033, 1035, 1036, 1042, 1043, 1044, 1047], "65": [45, 72, 196, 223, 289, 326, 414, 444, 507, 522, 602, 704, 745, 796, 797, 1001, 1024, 1035, 1036, 1037], "17379": [45, 54, 1047], "present": [45, 46, 54, 81, 87, 126, 128, 135, 147, 148, 155, 158, 159, 176, 177, 185, 188, 202, 205, 207, 212, 223, 250, 253, 257, 271, 278, 283, 286, 289, 290, 300, 320, 323, 325, 362, 384, 385, 389, 392, 399, 401, 406, 414, 416, 419, 421, 422, 432, 433, 436, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 494, 495, 496, 497, 501, 505, 506, 507, 508, 509, 510, 515, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 554, 555, 566, 567, 568, 571, 574, 575, 586, 587, 588, 593, 594, 596, 622, 632, 633, 634, 635, 655, 659, 682, 693, 694, 695, 696, 717, 733, 734, 742, 773, 787, 788, 791, 801, 802, 803, 806, 807, 815, 817, 830, 848, 849, 850, 852, 854, 856, 857, 858, 865, 870, 878, 879, 880, 881, 882, 884, 887, 898, 899, 910, 918, 920, 921, 943, 978, 993, 994, 995, 996, 1001, 1004, 1012, 1014, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1052], "date": [45, 107, 158, 177, 184, 196, 382, 384, 387, 391, 402, 415, 1014], "datetim": [45, 58, 184, 196], "http": [45, 47, 48, 49, 53, 58, 64, 88, 108, 156, 163, 177, 188, 191, 200, 223, 231, 239, 241, 248, 251, 297, 299, 300, 317, 381, 382, 384, 385, 387, 391, 392, 393, 395, 399, 401, 405, 414, 418, 423, 447, 454, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 513, 514, 515, 535, 536, 539, 542, 546, 600, 641, 646, 649, 654, 663, 669, 671, 672, 673, 676, 681, 684, 687, 688, 690, 691, 697, 700, 710, 726, 727, 728, 762, 763, 773, 841, 843, 844, 845, 848, 849, 854, 855, 856, 857, 862, 884, 899, 900, 901, 914, 915, 990, 992, 994, 1007, 1010, 1024, 1045], "pydata": [45, 405, 408, 1012, 1018], "org": [45, 53, 55, 56, 58, 64, 66, 71, 75, 84, 86, 99, 104, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 184, 188, 195, 196, 197, 200, 204, 214, 215, 223, 231, 239, 241, 244, 251, 252, 253, 255, 257, 261, 262, 263, 264, 271, 278, 280, 281, 283, 287, 292, 299, 317, 318, 326, 330, 331, 333, 334, 336, 338, 339, 340, 343, 361, 362, 363, 369, 375, 380, 385, 387, 390, 393, 395, 402, 418, 600, 641, 673, 676, 681, 700, 710, 773, 848, 849, 854, 855, 856, 857, 884, 900, 914, 915, 990, 994, 1010, 1030, 1043, 1047], "stabl": [45, 67, 188, 195, 217, 221, 225, 300, 330, 357, 362, 385, 387, 391, 393, 396, 401, 405, 418, 422, 426, 476, 477, 483, 538, 660, 677, 679, 692, 697, 728, 756, 942, 943, 990, 996, 997, 1004, 1014, 1031, 1035, 1036, 1041, 1046, 1048, 1052], "user_guid": 45, "timeseri": 45, "now": [45, 46, 48, 54, 58, 61, 91, 95, 108, 121, 133, 142, 143, 147, 149, 151, 152, 155, 156, 163, 166, 177, 179, 184, 185, 186, 191, 194, 195, 196, 197, 200, 202, 204, 209, 211, 212, 224, 225, 227, 247, 255, 257, 276, 280, 283, 291, 292, 297, 303, 325, 330, 331, 333, 334, 335, 336, 340, 349, 361, 362, 363, 370, 374, 376, 382, 387, 388, 389, 393, 399, 400, 401, 405, 412, 414, 418, 419, 421, 422, 426, 498, 513, 514, 517, 541, 554, 584, 585, 587, 632, 635, 654, 658, 663, 668, 689, 730, 760, 801, 802, 806, 807, 838, 853, 865, 866, 969, 983, 984, 990, 994, 1000, 1003, 1004, 1009, 1010, 1012, 1014, 1019, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "introspect": [45, 47, 108, 393, 564, 565, 593, 594, 596, 1004, 1024], "value_count": [45, 54, 196, 297], "11413": 45, "4544": 45, "rain": [45, 54, 196, 990], "1419": 45, "heavy_rain": [45, 196], "dtype": [45, 49, 51, 52, 54, 58, 86, 87, 91, 103, 107, 108, 152, 154, 156, 157, 159, 180, 181, 182, 191, 195, 196, 225, 241, 264, 266, 278, 284, 288, 297, 307, 313, 326, 332, 333, 335, 339, 369, 381, 382, 387, 389, 399, 401, 411, 415, 418, 421, 429, 430, 432, 435, 447, 448, 452, 453, 454, 455, 456, 458, 464, 469, 471, 472, 474, 477, 479, 493, 494, 495, 496, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 519, 527, 547, 553, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 590, 591, 593, 594, 596, 598, 599, 606, 607, 611, 632, 633, 634, 635, 637, 638, 645, 646, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 676, 678, 680, 702, 704, 710, 719, 720, 735, 742, 745, 759, 790, 809, 827, 829, 830, 842, 846, 847, 849, 857, 871, 877, 879, 880, 886, 887, 889, 891, 892, 893, 894, 895, 896, 897, 900, 908, 909, 910, 911, 912, 914, 915, 916, 917, 923, 924, 926, 927, 959, 969, 970, 971, 972, 975, 981, 984, 1004, 1007, 1009, 1019, 1036, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "int64": [45, 54, 55, 92, 108, 195, 196, 297, 326, 336, 369, 401, 422, 432, 447, 453, 455, 501, 593, 645, 651, 652, 657, 658, 719, 720, 842, 871, 924, 980, 1043, 1046, 1048, 1050, 1051, 1052], "cannot": [45, 54, 78, 94, 112, 118, 128, 133, 150, 195, 196, 207, 223, 241, 257, 320, 349, 357, 376, 386, 388, 393, 399, 401, 402, 414, 415, 416, 418, 419, 421, 422, 424, 470, 526, 543, 544, 545, 548, 552, 615, 618, 619, 620, 622, 624, 625, 627, 628, 630, 656, 660, 687, 697, 716, 722, 782, 806, 807, 853, 854, 856, 857, 858, 866, 867, 876, 877, 888, 924, 926, 927, 983, 984, 988, 990, 991, 995, 1000, 1004, 1009, 1010, 1014, 1018, 1021, 1023, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "simplifi": [45, 108, 211, 349, 386, 388, 392, 414, 417, 520, 567, 865, 866, 994, 996, 1004], "collaps": [45, 196, 260, 320, 349, 399], "those": [45, 48, 53, 58, 60, 93, 98, 108, 143, 155, 158, 177, 188, 194, 196, 197, 198, 223, 225, 227, 241, 248, 254, 257, 259, 260, 272, 274, 280, 283, 286, 297, 316, 320, 325, 346, 349, 361, 362, 363, 374, 375, 381, 387, 389, 391, 392, 393, 394, 399, 401, 402, 405, 412, 413, 414, 418, 419, 421, 422, 424, 453, 455, 466, 469, 473, 499, 500, 501, 508, 562, 563, 569, 570, 574, 575, 586, 697, 702, 717, 723, 740, 803, 806, 807, 815, 817, 824, 848, 849, 850, 852, 854, 855, 856, 857, 858, 906, 907, 908, 911, 914, 915, 916, 917, 954, 983, 986, 990, 993, 994, 996, 997, 998, 1001, 1004, 1010, 1012, 1013, 1018, 1019, 1028, 1035, 1038, 1041, 1042, 1043, 1048, 1049, 1050, 1051, 1052], "astyp": [45, 55, 75, 79, 82, 83, 91, 98, 100, 104, 117, 134, 152, 154, 170, 194, 196, 213, 214, 241, 246, 256, 260, 291, 300, 327, 422, 984, 990, 1042], "to_replac": [45, 196], "1422": 45, "expect": [45, 46, 51, 54, 64, 75, 82, 91, 121, 126, 133, 142, 145, 147, 149, 152, 155, 158, 174, 179, 185, 192, 193, 197, 209, 214, 223, 224, 225, 227, 231, 241, 254, 257, 260, 261, 267, 268, 271, 272, 287, 300, 325, 357, 361, 362, 370, 374, 375, 387, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 404, 406, 411, 413, 414, 415, 416, 418, 421, 422, 423, 437, 469, 470, 472, 473, 474, 487, 488, 489, 501, 528, 537, 541, 543, 546, 557, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 575, 577, 593, 594, 596, 600, 602, 611, 616, 632, 637, 638, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 679, 680, 683, 684, 700, 709, 710, 721, 739, 792, 798, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 852, 856, 857, 858, 859, 864, 867, 872, 879, 880, 883, 886, 887, 896, 897, 904, 906, 907, 908, 909, 910, 911, 912, 915, 917, 957, 983, 990, 993, 994, 996, 1000, 1004, 1008, 1009, 1010, 1015, 1017, 1024, 1027, 1028, 1030, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "4496": [45, 54], "4409": [45, 54], "4242": [45, 54], "winter": [45, 54], "4232": [45, 54], "sensit": [45, 82, 93, 116, 117, 145, 155, 196, 225, 226, 227, 250, 260, 320, 349, 375, 376, 402, 416, 421, 457, 467, 697, 717, 718, 792, 886, 989, 990, 991, 993, 994, 998, 1000, 1008, 1009, 1019, 1027, 1039], "splitter": [45, 335, 336, 401, 406, 418, 442, 477, 569, 570, 572, 573, 599, 607, 652, 656, 658, 660, 664, 666, 668, 670, 678, 680, 803, 805, 806, 807, 808, 809, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 837, 840, 914, 915, 916, 917, 1010, 1014, 1041, 1042, 1043, 1044, 1051, 1052, 1053], "realist": [45, 49, 282, 289, 290, 346, 382, 994], "gap": [45, 54, 158, 361, 382, 418, 476, 477, 483, 593, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 824, 914, 915, 916, 917, 990, 991, 1043, 1047, 1049], "side": [45, 57, 67, 97, 155, 216, 227, 241, 245, 253, 320, 353, 361, 370, 382, 399, 413, 415, 418, 419, 422, 431, 437, 520, 990, 991, 994, 996, 1009, 1044], "limit": [45, 49, 58, 67, 75, 80, 95, 104, 118, 142, 149, 150, 156, 163, 190, 195, 196, 197, 202, 223, 224, 240, 254, 287, 322, 326, 332, 357, 363, 370, 375, 388, 389, 392, 399, 401, 402, 413, 414, 417, 419, 423, 451, 468, 473, 564, 565, 566, 567, 637, 655, 663, 664, 684, 687, 688, 693, 782, 824, 854, 856, 857, 858, 879, 880, 904, 908, 909, 910, 911, 912, 962, 983, 990, 991, 993, 994, 1001, 1002, 1004, 1014, 1019, 1030, 1043, 1045, 1048, 1049, 1052], "1000": [45, 48, 49, 56, 66, 70, 75, 88, 109, 112, 120, 137, 145, 147, 149, 153, 154, 155, 160, 165, 169, 172, 185, 200, 209, 215, 226, 245, 253, 254, 256, 266, 270, 278, 280, 286, 289, 291, 305, 307, 321, 324, 330, 331, 333, 335, 336, 350, 351, 358, 361, 362, 392, 393, 400, 413, 422, 442, 478, 484, 485, 536, 537, 542, 544, 547, 548, 550, 551, 553, 558, 569, 637, 651, 652, 656, 657, 658, 660, 665, 666, 667, 668, 671, 672, 673, 677, 681, 682, 683, 692, 697, 703, 706, 768, 883, 895, 901, 906, 907, 983, 987, 1009, 1023, 1026, 1042, 1044], "datapoint": [45, 80, 90, 94, 183, 186, 206, 255, 256, 260, 275, 280, 299, 355, 424, 451, 507, 562, 563, 564, 565, 569, 570, 571, 616, 914, 915, 916, 917, 987], "should": [45, 46, 47, 49, 50, 54, 56, 58, 65, 67, 70, 75, 91, 140, 142, 145, 148, 152, 155, 158, 177, 190, 195, 200, 202, 203, 207, 223, 225, 241, 250, 255, 256, 257, 260, 280, 283, 286, 287, 289, 297, 300, 321, 322, 327, 340, 349, 357, 362, 370, 374, 375, 376, 382, 385, 386, 387, 389, 391, 392, 394, 395, 396, 400, 401, 405, 406, 409, 411, 413, 414, 416, 418, 419, 421, 422, 423, 424, 425, 426, 428, 431, 437, 442, 445, 447, 448, 449, 450, 452, 454, 455, 457, 459, 462, 463, 464, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 492, 501, 508, 513, 514, 521, 526, 528, 529, 532, 537, 538, 539, 541, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 598, 599, 602, 607, 612, 613, 615, 616, 625, 632, 633, 634, 636, 637, 638, 640, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 692, 694, 695, 696, 697, 698, 699, 700, 701, 706, 714, 731, 732, 746, 770, 775, 778, 782, 783, 784, 785, 786, 789, 792, 793, 796, 804, 805, 810, 811, 812, 813, 820, 821, 822, 823, 828, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 885, 886, 887, 889, 893, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 926, 930, 932, 935, 943, 951, 955, 960, 963, 965, 968, 969, 970, 971, 972, 973, 974, 975, 983, 984, 988, 989, 990, 991, 994, 995, 997, 999, 1000, 1001, 1004, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1024, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "repres": [45, 49, 51, 53, 54, 56, 61, 66, 71, 73, 82, 86, 87, 88, 91, 125, 128, 130, 136, 137, 149, 150, 159, 195, 202, 210, 215, 225, 227, 228, 232, 245, 247, 255, 260, 269, 274, 277, 280, 283, 287, 305, 322, 353, 361, 363, 369, 376, 379, 382, 384, 389, 399, 400, 401, 402, 409, 413, 414, 418, 419, 420, 421, 422, 423, 443, 447, 451, 457, 468, 475, 476, 477, 478, 479, 480, 481, 493, 495, 496, 497, 499, 501, 503, 505, 506, 507, 509, 510, 515, 532, 539, 541, 543, 545, 546, 552, 560, 568, 586, 593, 596, 634, 637, 639, 645, 681, 683, 702, 704, 706, 716, 734, 747, 793, 803, 805, 816, 817, 820, 823, 829, 831, 832, 835, 836, 842, 848, 849, 850, 852, 853, 854, 856, 857, 858, 863, 864, 873, 879, 880, 903, 906, 907, 926, 927, 947, 952, 984, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1019, 1024, 1025, 1027, 1041, 1043, 1046, 1047, 1050], "bit": [45, 54, 67, 86, 91, 114, 131, 221, 225, 297, 320, 349, 362, 370, 374, 382, 385, 401, 405, 421, 422, 587, 594, 663, 836, 926, 927, 991, 995, 1012, 1021, 1028, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052, 1053], "less": [45, 46, 49, 67, 90, 91, 98, 126, 128, 131, 138, 142, 149, 155, 156, 158, 179, 186, 195, 205, 207, 223, 225, 227, 256, 260, 267, 269, 280, 281, 289, 291, 294, 321, 324, 325, 326, 331, 333, 353, 361, 362, 370, 374, 376, 382, 387, 389, 399, 401, 414, 418, 419, 421, 422, 426, 444, 446, 448, 450, 453, 455, 457, 462, 465, 467, 468, 487, 488, 489, 501, 520, 536, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 595, 601, 624, 632, 639, 652, 666, 681, 683, 697, 706, 726, 727, 728, 729, 740, 756, 768, 783, 784, 789, 799, 801, 802, 805, 806, 807, 813, 830, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 869, 881, 883, 884, 886, 889, 895, 896, 906, 907, 914, 915, 916, 917, 932, 946, 983, 984, 986, 987, 988, 991, 993, 994, 997, 999, 1004, 1008, 1009, 1010, 1013, 1026, 1028, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1050, 1052], "contigu": [45, 62, 389, 399, 412, 418, 422, 448, 452, 454, 464, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 785, 822, 846, 847, 906, 908, 909, 910, 911, 912, 1009, 1038, 1045, 1049], "ts_cv": [45, 54, 158], "n_split": [45, 54, 148, 154, 158, 190, 191, 195, 268, 275, 280, 282, 285, 290, 297, 336, 341, 349, 357, 370, 418, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 829, 1023, 1041, 1043], "5": [45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 65, 66, 67, 70, 71, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 107, 108, 110, 111, 112, 115, 116, 117, 118, 120, 121, 126, 128, 129, 130, 131, 132, 134, 135, 137, 140, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 168, 170, 172, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 220, 221, 223, 224, 225, 226, 229, 231, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 248, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 315, 316, 317, 318, 320, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 347, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 382, 384, 385, 387, 389, 392, 393, 399, 400, 401, 405, 407, 408, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 429, 442, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 471, 474, 477, 483, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 509, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 533, 536, 538, 539, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 557, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 587, 597, 598, 599, 602, 607, 609, 610, 611, 612, 613, 615, 618, 619, 620, 621, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 646, 648, 649, 650, 651, 652, 656, 657, 658, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 693, 694, 696, 697, 698, 700, 701, 704, 708, 710, 712, 714, 717, 718, 725, 726, 727, 728, 730, 731, 732, 734, 736, 739, 742, 743, 744, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 773, 774, 785, 786, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 863, 864, 865, 866, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 891, 892, 893, 894, 895, 896, 900, 906, 907, 908, 909, 910, 911, 912, 914, 916, 922, 923, 926, 927, 931, 932, 941, 942, 943, 944, 945, 947, 948, 949, 957, 958, 962, 963, 965, 966, 969, 970, 971, 972, 973, 974, 975, 983, 984, 986, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1016, 1017, 1019, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1045, 1049, 1050, 1051], "48": [45, 54, 83, 134, 158, 184, 264, 288, 326, 384, 393, 414, 515, 602, 704, 750, 830, 841, 983, 996, 1004, 1031], "max_train_s": [45, 54, 418, 824, 1042], "10000": [45, 52, 54, 69, 81, 101, 109, 110, 156, 168, 209, 216, 223, 231, 239, 254, 256, 293, 331, 346, 348, 370, 376, 421, 422, 566, 567, 649, 684, 883, 912, 1006, 1024, 1028], "test_siz": [45, 46, 47, 51, 54, 64, 65, 67, 70, 71, 108, 147, 153, 154, 156, 157, 158, 162, 194, 200, 207, 218, 223, 230, 231, 238, 239, 277, 278, 282, 287, 289, 293, 299, 308, 309, 315, 317, 318, 322, 324, 325, 331, 349, 357, 370, 392, 418, 703, 805, 820, 823, 824, 832, 834, 855, 984, 996, 997, 1023, 1024, 1035, 1036, 1041, 1042, 1047], "manual": [45, 84, 93, 195, 196, 198, 224, 234, 282, 300, 341, 347, 361, 363, 374, 375, 382, 387, 391, 392, 399, 400, 405, 414, 418, 419, 420, 442, 454, 572, 856, 879, 885, 983, 988, 989, 990, 993, 994, 997, 1004, 1014, 1019, 1020, 1028, 1043, 1045, 1051], "all_split": [45, 54], "train_0": 45, "test_0": 45, "iloc": [45, 54, 158, 163, 195, 196, 241, 280, 303], "12379": 45, "25": [45, 46, 47, 48, 50, 51, 52, 54, 60, 64, 66, 80, 83, 92, 93, 116, 120, 125, 135, 137, 146, 155, 163, 173, 174, 180, 190, 195, 203, 213, 223, 227, 250, 268, 280, 313, 315, 318, 320, 322, 334, 338, 339, 357, 361, 368, 370, 374, 393, 418, 421, 422, 425, 449, 482, 486, 506, 509, 526, 575, 602, 623, 683, 738, 800, 820, 832, 858, 876, 881, 883, 884, 887, 895, 896, 898, 899, 940, 944, 975, 990, 994, 995, 997, 1004, 1015, 1024, 1035, 1037, 1043, 1046], "760": [45, 158], "68": [45, 54, 188, 214, 318, 338, 414, 483, 540, 546, 595, 690, 691, 1035], "27": [45, 47, 54, 60, 70, 85, 92, 282, 338, 339, 358, 384, 414, 422, 522, 529, 610, 718, 792, 793, 887, 907, 994, 1004, 1015, 1027, 1035, 1037], "9993": [45, 658, 660, 1043], "12380": 45, "32": [45, 46, 54, 89, 194, 197, 238, 259, 260, 281, 333, 339, 381, 385, 392, 401, 412, 421, 422, 450, 569, 570, 587, 594, 639, 681, 885, 887, 926, 927, 959, 1002, 1004, 1027, 1035, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1052], "000": [45, 46, 62, 65, 67, 80, 111, 180, 197, 200, 254, 278, 280, 282, 325, 332, 361, 362, 370, 382, 393, 421, 422, 495, 566, 567, 649, 682, 1008, 1015, 1028, 1046], "77": [45, 47, 82, 177, 200, 289, 339, 381, 384, 539, 712, 740, 779, 1031], "0028": 45, "12381": 45, "72": [45, 47, 48, 54, 148, 182, 392, 830], "9995": 45, "12382": 45, "240": [45, 82, 1002, 1035], "82": [45, 69, 91, 96, 151, 174, 226, 311, 338, 792, 803, 817, 942, 994, 997, 1024, 1035], "9980": [45, 1043], "12383": 45, "13374": 45, "34": [45, 155, 177, 179, 281, 305, 318, 326, 338, 339, 369, 384, 418, 525, 534, 575, 602, 654, 672, 721, 768, 1015, 1024, 1035], "44": [45, 184, 195, 196, 207, 297, 304, 484, 785, 887, 907, 910, 977, 994, 1001, 1035], "40": [45, 54, 56, 92, 104, 114, 124, 126, 128, 159, 165, 177, 179, 207, 214, 215, 217, 240, 245, 247, 258, 260, 270, 281, 306, 312, 317, 322, 338, 339, 347, 348, 350, 352, 354, 356, 369, 375, 382, 418, 451, 500, 522, 523, 846, 847, 851, 863, 864, 983, 995, 1004, 1015, 1035, 1036], "150": [45, 47, 124, 126, 146, 155, 168, 244, 248, 250, 293, 336, 353, 357, 384, 418, 423, 509, 606, 607, 827, 828, 829, 994, 1023, 1024, 1025], "53": [45, 91, 260, 342, 414, 421, 540, 546, 551, 796, 797], "15": [45, 47, 48, 53, 54, 55, 56, 69, 70, 73, 78, 82, 91, 92, 99, 100, 104, 110, 111, 116, 118, 126, 137, 146, 148, 151, 152, 155, 158, 172, 174, 176, 179, 183, 190, 194, 195, 196, 212, 220, 225, 237, 241, 245, 248, 250, 268, 269, 275, 283, 285, 288, 291, 292, 294, 304, 308, 315, 316, 320, 322, 324, 335, 339, 347, 349, 352, 356, 359, 366, 381, 382, 385, 387, 400, 405, 407, 408, 418, 421, 422, 445, 459, 495, 501, 502, 503, 536, 542, 550, 551, 560, 561, 603, 609, 614, 649, 657, 666, 668, 673, 681, 683, 697, 745, 821, 835, 858, 887, 983, 989, 990, 991, 994, 997, 998, 1004, 1009, 1019, 1024, 1031, 1033, 1037, 1047, 1049, 1050], "0013": 45, "13375": 45, "39": [45, 54, 177, 264, 382, 384, 385, 391, 414, 422, 500, 897, 915, 944], "49": [45, 54, 177, 227, 260, 381, 382, 384, 392, 414, 455, 462, 718, 730, 760, 768, 797, 801, 803, 887, 994, 1004, 1038], "13376": 45, "0012": [45, 699], "13377": 45, "36": [45, 47, 48, 54, 55, 130, 177, 185, 195, 241, 260, 352, 384, 393, 421, 422, 560, 561, 575, 739, 763, 994, 1028, 1035], "08": [45, 82, 88, 131, 195, 196, 207, 318, 384, 483, 536, 548, 550, 568, 646, 663, 803, 863, 864, 885, 1000, 1015], "910": 45, "42": [45, 46, 47, 54, 61, 64, 65, 66, 67, 70, 82, 84, 94, 114, 130, 135, 142, 149, 150, 152, 153, 155, 156, 158, 159, 163, 173, 174, 191, 195, 197, 198, 200, 202, 212, 215, 217, 218, 225, 229, 230, 231, 237, 238, 240, 243, 244, 245, 250, 255, 256, 257, 260, 263, 279, 281, 284, 300, 306, 307, 308, 315, 320, 321, 322, 323, 325, 327, 329, 331, 333, 341, 347, 349, 361, 362, 370, 375, 389, 392, 393, 401, 406, 414, 418, 421, 422, 425, 442, 449, 483, 493, 497, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 532, 534, 536, 542, 549, 550, 551, 562, 563, 570, 571, 572, 573, 575, 610, 611, 612, 613, 614, 682, 699, 700, 701, 764, 796, 797, 801, 805, 830, 832, 846, 847, 851, 855, 858, 898, 899, 901, 902, 903, 913, 916, 917, 929, 942, 959, 963, 997, 1004, 1024, 1028, 1031, 1032, 1035], "0015": 45, "13378": 45, "35": [45, 47, 48, 50, 52, 93, 108, 144, 165, 195, 196, 202, 211, 250, 297, 325, 338, 339, 549, 653, 654, 661, 707, 711, 712, 731, 745, 760, 786, 793, 839, 983, 990, 994, 1000, 1001, 1004, 1024, 1028, 1035, 1037], "26": [45, 54, 84, 92, 116, 130, 131, 184, 195, 259, 293, 339, 393, 575, 653, 733, 787, 882, 894, 943, 994, 1004, 1035, 1038, 1039, 1047], "47": [45, 54, 120, 188, 215, 219, 382, 498, 499, 540, 546], "16": [45, 46, 51, 54, 60, 67, 81, 88, 89, 92, 104, 111, 116, 128, 131, 172, 196, 216, 222, 223, 224, 241, 243, 244, 255, 259, 282, 283, 284, 304, 318, 320, 324, 329, 353, 362, 367, 382, 384, 393, 400, 418, 419, 422, 447, 462, 464, 476, 477, 483, 484, 502, 503, 507, 521, 539, 540, 575, 594, 600, 601, 612, 613, 644, 655, 656, 659, 660, 661, 662, 687, 688, 816, 821, 832, 881, 907, 915, 970, 971, 972, 983, 990, 994, 1004, 1009, 1015, 1019, 1028, 1031, 1033, 1035, 1036, 1040, 1041, 1043, 1044], "9979": 45, "2331": 45, "31": [45, 54, 107, 115, 241, 305, 332, 338, 339, 412, 422, 505, 566, 567, 602, 654, 676, 684, 959, 995, 1035], "060": [45, 755], "0032": 45, "2332": 45, "2333": 45, "78": [45, 91, 200, 241, 289, 322, 339, 498, 499, 651, 652, 657, 658, 660, 665, 666, 667, 669, 670, 686, 690, 691, 803, 809, 830, 994, 1014, 1024], "275": [45, 339, 1038], "2334": 45, "96": [45, 49, 54, 71, 86, 100, 186, 250, 260, 278, 318, 322, 325, 326, 338, 339, 384, 418, 558, 687, 688, 716, 983, 989, 994, 1004, 1035], "515": 45, "64": [45, 54, 71, 86, 91, 96, 123, 128, 184, 195, 244, 254, 255, 259, 278, 289, 304, 309, 374, 375, 384, 385, 393, 401, 405, 419, 426, 500, 503, 507, 604, 605, 651, 663, 693, 694, 695, 696, 698, 907, 997, 1025, 1031, 1035, 1037, 1043, 1044, 1047, 1048, 1049, 1052], "2335": 45, "12326": 45, "12327": 45, "12328": [45, 1044], "12329": 45, "46": [45, 54, 84, 91, 109, 223, 260, 370, 393, 598, 599, 687, 688, 721, 910, 915, 1004, 1015, 1031], "12330": [45, 1043], "52": [45, 148, 184, 223, 536, 638, 801, 942, 1015, 1035], "last": [45, 61, 82, 96, 123, 155, 195, 202, 223, 224, 231, 236, 250, 272, 283, 291, 292, 325, 331, 333, 341, 365, 374, 382, 385, 389, 391, 392, 395, 401, 405, 414, 415, 422, 426, 443, 447, 452, 464, 469, 473, 520, 538, 564, 565, 566, 567, 588, 589, 592, 598, 599, 602, 615, 687, 688, 690, 691, 702, 703, 705, 706, 707, 712, 786, 801, 802, 806, 807, 822, 846, 847, 851, 866, 867, 871, 879, 885, 921, 946, 969, 983, 989, 990, 991, 993, 995, 998, 1008, 1014, 1019, 1026, 1035, 1041, 1042, 1043, 1044, 1049, 1051, 1052], "train_4": 45, "test_4": 45, "16379": 45, "94": [45, 71, 73, 92, 130, 151, 222, 258, 293, 322, 338, 339, 421, 668, 792, 989, 994, 995, 1004, 1028, 1035], "665": [45, 227, 1015], "16380": 45, "71": [45, 54, 84, 177, 227, 241, 384, 515, 734, 740, 770, 780, 994, 1026, 1031, 1037], "16381": 45, "76": [45, 200, 223, 339, 361, 370, 384, 393, 781, 785, 866, 1026, 1031], "16382": 45, "16383": 45, "18": [45, 48, 49, 54, 60, 78, 82, 87, 91, 98, 100, 111, 135, 155, 188, 195, 234, 247, 250, 255, 280, 318, 324, 326, 339, 361, 362, 363, 387, 393, 415, 418, 419, 422, 452, 464, 497, 505, 506, 507, 509, 510, 515, 540, 541, 543, 545, 546, 562, 563, 564, 565, 568, 569, 570, 571, 574, 576, 577, 578, 579, 580, 582, 583, 594, 599, 604, 605, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 651, 654, 663, 664, 676, 719, 723, 735, 738, 739, 745, 747, 764, 774, 801, 802, 824, 839, 862, 863, 864, 870, 876, 884, 885, 896, 906, 907, 914, 915, 916, 917, 918, 942, 943, 983, 992, 994, 1004, 1015, 1031, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1045, 1046], "940": 45, "6331": 45, "28": [45, 60, 104, 131, 155, 177, 195, 231, 239, 248, 289, 317, 338, 339, 384, 393, 414, 418, 455, 462, 1004, 1015, 1024, 1035, 1038, 1041], "790": [45, 107], "89": [45, 54, 71, 184, 214, 338, 339, 977, 989, 994, 1004, 1028, 1035, 1038, 1046], "6332": 45, "6333": 45, "88": [45, 47, 71, 126, 214, 227, 279, 318, 338, 339, 365, 382, 384, 387, 416, 478, 651, 652, 657, 665, 666, 667, 686, 866, 942, 1024, 1035], "820": [45, 846, 847], "79": [45, 47, 69, 71, 116, 117, 131, 177, 200, 318, 339, 384, 392, 416, 479, 529, 602, 699, 844, 1035, 1037], "6334": 45, "6335": 45, "70": [45, 47, 52, 54, 104, 108, 110, 142, 196, 260, 266, 280, 339, 382, 384, 418, 498, 499, 687, 688, 718, 730, 760, 803, 817, 893, 983, 1004, 1024], "33": [45, 54, 116, 223, 334, 339, 382, 384, 391, 392, 393, 414, 422, 466, 537, 642, 653, 717, 718, 733, 734, 742, 747, 787, 788, 791, 809, 830, 832, 834, 893, 917, 976, 990, 994, 1004, 1024, 1035, 1043], "335": 45, "74": [45, 49, 54, 239, 338, 339, 384, 595, 699, 803, 817, 885, 1031], "16326": [45, 1047], "16327": 45, "16328": 45, "16329": 45, "16330": 45, "readi": [45, 48, 184, 224, 382, 391, 395], "often": [45, 60, 64, 65, 67, 72, 107, 111, 148, 158, 161, 183, 190, 195, 196, 224, 241, 244, 260, 268, 282, 285, 320, 325, 349, 359, 361, 362, 363, 374, 375, 381, 382, 384, 387, 389, 392, 395, 399, 400, 401, 404, 409, 413, 414, 415, 416, 418, 419, 421, 422, 424, 426, 473, 526, 529, 538, 541, 637, 651, 652, 657, 658, 665, 666, 667, 668, 677, 679, 692, 732, 876, 884, 892, 904, 983, 984, 986, 989, 990, 991, 992, 993, 994, 996, 997, 999, 1000, 1001, 1004, 1007, 1008, 1010, 1019, 1021, 1026, 1027, 1028, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "flexibl": [45, 65, 152, 190, 223, 321, 346, 363, 389, 394, 399, 418, 424, 679, 906, 907, 983, 988, 990, 994, 998, 1004, 1013, 1014, 1018, 1044, 1048], "heterogen": [45, 49, 50, 64, 93, 106, 108, 192, 196, 223, 264, 325, 329, 379, 381, 399, 469, 493, 546, 586, 596, 718, 866, 870, 906, 991, 1001, 1004, 1013, 1015, 1030, 1039, 1043, 1045, 1046], "tabular": [45, 54, 196, 389, 421, 1002], "here": [45, 49, 50, 53, 54, 55, 58, 64, 67, 95, 96, 104, 114, 118, 123, 124, 126, 130, 131, 133, 134, 135, 136, 138, 142, 145, 148, 152, 156, 158, 163, 174, 177, 179, 187, 188, 195, 196, 197, 200, 202, 207, 212, 216, 223, 227, 229, 238, 239, 241, 243, 245, 250, 255, 257, 260, 261, 267, 268, 269, 274, 277, 278, 280, 282, 283, 285, 289, 290, 292, 297, 300, 302, 309, 316, 317, 318, 322, 325, 331, 333, 336, 338, 340, 349, 353, 357, 359, 363, 365, 370, 374, 375, 376, 381, 382, 385, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 406, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 425, 427, 442, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 469, 477, 480, 541, 543, 544, 548, 549, 572, 573, 574, 575, 586, 587, 589, 593, 596, 599, 607, 633, 635, 652, 656, 658, 660, 666, 668, 670, 678, 680, 694, 696, 700, 704, 717, 730, 750, 760, 798, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 833, 842, 846, 847, 870, 878, 881, 884, 887, 898, 899, 909, 960, 983, 986, 990, 991, 992, 993, 994, 997, 1000, 1004, 1006, 1007, 1008, 1009, 1013, 1014, 1017, 1018, 1019, 1020, 1026, 1035, 1043, 1048], "modern": [45, 158, 422, 473, 508, 595, 695, 699, 734, 904, 991, 1013, 1014, 1051], "nativ": [45, 158, 162, 190, 375, 382, 401, 421, 501, 566, 567, 838, 839, 962, 990, 994, 1013, 1045, 1047], "therefor": [45, 50, 55, 61, 64, 67, 73, 75, 90, 91, 108, 109, 112, 116, 121, 133, 137, 142, 145, 147, 155, 161, 163, 176, 194, 197, 223, 227, 239, 240, 266, 271, 272, 281, 283, 297, 299, 303, 317, 320, 325, 338, 349, 357, 358, 361, 362, 369, 374, 381, 385, 392, 399, 406, 411, 414, 415, 416, 418, 419, 421, 422, 442, 540, 554, 556, 558, 559, 564, 565, 569, 570, 609, 611, 663, 664, 670, 673, 676, 681, 683, 684, 706, 717, 739, 761, 801, 866, 867, 879, 883, 887, 895, 984, 988, 990, 991, 994, 996, 997, 998, 999, 1002, 1004, 1009, 1010, 1014, 1019, 1026, 1027, 1028, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "categorical_featur": [45, 108, 152, 158, 196, 326, 331, 332, 333, 334, 336, 392, 421, 566, 567, 637, 638, 1001, 1043, 1047, 1050, 1052], "from_dtyp": [45, 152, 336, 421, 566, 567, 1052], "refer": [45, 46, 75, 76, 98, 101, 108, 116, 124, 142, 156, 158, 163, 177, 184, 188, 197, 211, 241, 257, 260, 280, 285, 286, 287, 303, 310, 320, 329, 330, 331, 332, 333, 334, 335, 336, 362, 375, 381, 382, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 399, 400, 401, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 442, 443, 444, 445, 447, 449, 451, 452, 453, 455, 456, 457, 458, 459, 462, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 503, 508, 516, 518, 520, 521, 522, 523, 524, 525, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 595, 598, 599, 600, 607, 612, 613, 615, 616, 619, 624, 627, 628, 632, 633, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 652, 654, 656, 658, 660, 661, 663, 666, 668, 670, 671, 672, 673, 676, 678, 680, 681, 683, 684, 687, 688, 693, 694, 695, 696, 697, 698, 699, 700, 701, 706, 709, 710, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 744, 745, 747, 760, 762, 763, 773, 787, 789, 790, 792, 793, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 837, 841, 842, 843, 845, 848, 851, 852, 853, 855, 862, 863, 864, 866, 871, 872, 873, 875, 876, 878, 879, 880, 882, 883, 884, 886, 887, 894, 899, 900, 901, 902, 903, 904, 906, 908, 909, 911, 912, 914, 915, 916, 917, 931, 943, 960, 983, 986, 987, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1017, 1019, 1023, 1027, 1028, 1035, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dedic": [45, 278, 359, 385, 391, 393, 399, 402, 411, 414, 589, 677, 679, 692, 983, 990, 1013, 1019, 1043, 1052], "sake": [45, 67, 155, 158, 191, 195, 223, 325, 353, 361, 363, 395, 399, 675], "simplic": [45, 55, 70, 207, 353, 361, 363, 401, 420, 997, 998, 999, 1009], "try": [45, 47, 52, 53, 54, 56, 57, 65, 66, 77, 91, 108, 109, 131, 142, 147, 148, 149, 150, 151, 158, 159, 160, 163, 166, 174, 179, 184, 191, 194, 195, 196, 197, 200, 202, 204, 212, 251, 252, 253, 257, 261, 262, 263, 264, 267, 268, 271, 278, 280, 281, 287, 292, 297, 300, 313, 318, 326, 330, 331, 333, 334, 336, 340, 351, 357, 361, 362, 369, 382, 385, 386, 387, 389, 392, 393, 395, 399, 401, 405, 406, 409, 414, 417, 418, 421, 422, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 508, 572, 582, 594, 663, 678, 680, 694, 698, 803, 806, 807, 815, 817, 827, 828, 829, 831, 884, 886, 889, 891, 892, 893, 894, 895, 896, 897, 906, 925, 978, 983, 990, 991, 1000, 1009, 1010, 1014, 1017, 1018, 1019, 1021, 1024, 1026, 1027, 1028, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "gbrt": [45, 54, 223, 421], "random_st": [45, 46, 47, 48, 51, 53, 54, 56, 60, 61, 62, 64, 65, 66, 67, 69, 70, 76, 80, 81, 82, 84, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 107, 108, 112, 118, 121, 126, 128, 130, 133, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 168, 173, 174, 176, 179, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 204, 205, 209, 215, 222, 223, 226, 227, 229, 230, 231, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 255, 258, 259, 260, 261, 263, 264, 266, 268, 269, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 297, 299, 300, 303, 304, 308, 309, 310, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 341, 347, 349, 350, 351, 357, 358, 361, 362, 365, 369, 370, 389, 392, 396, 400, 401, 411, 414, 415, 418, 419, 421, 422, 426, 439, 442, 443, 445, 448, 452, 454, 456, 457, 458, 459, 463, 464, 465, 467, 474, 479, 483, 492, 493, 496, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 598, 599, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 637, 638, 639, 640, 643, 644, 645, 646, 647, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 715, 739, 792, 796, 797, 801, 802, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 851, 855, 862, 863, 864, 866, 871, 883, 887, 895, 898, 899, 906, 907, 908, 911, 913, 914, 915, 916, 917, 919, 920, 940, 942, 943, 963, 965, 968, 983, 984, 986, 989, 994, 995, 996, 997, 998, 1001, 1002, 1004, 1009, 1010, 1019, 1023, 1024, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "categorical_column": [45, 152, 195, 197, 260, 472], "tolist": [45, 154, 190, 279, 331, 382], "def": [45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 65, 67, 72, 73, 75, 78, 79, 86, 90, 93, 94, 96, 99, 107, 112, 126, 128, 130, 131, 135, 137, 140, 142, 145, 147, 152, 154, 155, 158, 163, 182, 185, 187, 188, 191, 198, 203, 211, 212, 215, 220, 223, 224, 231, 232, 233, 241, 243, 244, 257, 258, 260, 266, 267, 268, 269, 271, 272, 275, 278, 279, 280, 281, 283, 288, 291, 294, 300, 305, 307, 310, 313, 316, 318, 320, 322, 325, 326, 329, 342, 345, 349, 353, 359, 361, 362, 363, 374, 382, 387, 389, 393, 394, 399, 415, 418, 422, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 513, 514, 538, 602, 606, 615, 616, 623, 785, 879, 933, 938, 955, 994, 1001, 1009, 1024], "model_prop": 45, "none": [45, 49, 50, 51, 54, 57, 58, 66, 69, 72, 77, 79, 80, 82, 90, 92, 93, 94, 100, 130, 133, 137, 146, 151, 152, 154, 157, 158, 170, 177, 180, 186, 187, 198, 202, 223, 224, 231, 234, 241, 243, 256, 257, 258, 260, 274, 280, 281, 292, 305, 307, 311, 324, 327, 331, 332, 339, 342, 347, 349, 350, 353, 354, 356, 361, 362, 382, 384, 387, 389, 394, 396, 401, 406, 414, 418, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 712, 713, 714, 716, 717, 718, 719, 721, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 738, 739, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 895, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 929, 930, 931, 932, 935, 937, 942, 943, 946, 947, 948, 949, 953, 954, 957, 960, 962, 963, 965, 968, 969, 975, 978, 979, 981, 983, 990, 994, 1004, 1007, 1010, 1019, 1023, 1028, 1030, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "model_step": 45, "cv_result": [45, 54, 108, 148, 158, 278, 279, 281, 283, 406, 817, 829, 994], "neg_mean_absolute_error": [45, 163, 225, 994], "neg_root_mean_squared_error": [45, 158, 326, 994], "return_estim": [45, 195, 336, 418, 829, 1043], "getattr": [45, 49, 320, 389, 401, 1051], "mae": [45, 54, 163, 223, 225, 563, 570, 749, 915, 917, 994, 1010, 1042, 1043, 1047, 1048], "test_neg_mean_absolute_error": [45, 225], "rmse": [45, 54, 117, 158, 326, 754, 994, 1046], "test_neg_root_mean_squared_error": 45, "3f": [45, 47, 49, 52, 54, 56, 58, 62, 64, 66, 76, 78, 85, 86, 87, 96, 108, 110, 112, 121, 142, 149, 150, 158, 173, 177, 179, 180, 181, 183, 188, 194, 196, 197, 203, 207, 209, 215, 223, 225, 229, 238, 239, 241, 244, 254, 256, 278, 280, 281, 283, 286, 288, 291, 300, 315, 342, 361, 362, 363, 831, 1002, 1024], "std": [45, 52, 53, 54, 75, 84, 88, 92, 99, 104, 115, 117, 118, 129, 130, 131, 149, 151, 152, 158, 163, 188, 190, 191, 195, 203, 208, 232, 254, 278, 279, 280, 282, 283, 285, 288, 290, 294, 326, 341, 352, 362, 370, 401, 414, 418, 421, 520, 611, 614, 831, 886, 897, 1004, 1023, 1027, 1043, 1047], "n_iter_": [45, 131, 158, 231, 269, 401, 445, 452, 453, 454, 476, 477, 487, 488, 489, 536, 537, 538, 541, 542, 543, 544, 545, 548, 566, 567, 632, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 684, 685, 695, 697, 801, 802, 855, 863, 864, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 1039, 1042, 1043, 1045, 1048, 1049, 1051], "100": [45, 46, 48, 51, 53, 54, 57, 58, 60, 65, 67, 75, 80, 88, 91, 95, 99, 104, 108, 109, 112, 115, 116, 128, 130, 131, 137, 143, 148, 158, 159, 162, 165, 180, 184, 187, 188, 195, 196, 198, 200, 202, 203, 205, 207, 209, 213, 214, 215, 217, 222, 223, 224, 225, 227, 232, 233, 234, 236, 238, 239, 241, 245, 246, 248, 253, 254, 255, 256, 257, 261, 266, 268, 272, 275, 276, 278, 280, 283, 285, 290, 291, 294, 305, 306, 307, 318, 321, 322, 324, 326, 327, 332, 336, 342, 343, 347, 348, 350, 351, 352, 356, 357, 359, 361, 362, 365, 368, 369, 374, 376, 382, 384, 387, 389, 392, 393, 406, 412, 414, 415, 418, 419, 420, 421, 422, 442, 446, 450, 454, 476, 477, 483, 495, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 535, 539, 541, 544, 549, 550, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 610, 612, 615, 636, 637, 638, 644, 645, 646, 647, 651, 652, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 670, 672, 674, 676, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 750, 801, 802, 805, 830, 831, 836, 841, 842, 843, 845, 846, 847, 851, 863, 864, 882, 884, 887, 896, 913, 983, 984, 987, 991, 994, 995, 1001, 1004, 1006, 1015, 1019, 1023, 1027, 1028, 1043, 1044, 1045, 1048, 1049], "044": [45, 96, 278, 362, 755, 994], "003": 45, "068": [45, 54, 280], "005": [45, 149, 280, 284, 305, 320, 362, 393], "max_it": [45, 49, 54, 56, 58, 65, 67, 69, 70, 109, 110, 128, 131, 147, 148, 152, 158, 165, 168, 169, 188, 190, 191, 195, 196, 202, 209, 215, 216, 230, 231, 232, 235, 236, 238, 243, 244, 245, 246, 248, 261, 262, 266, 267, 268, 269, 272, 293, 310, 315, 316, 317, 326, 331, 332, 333, 338, 339, 346, 361, 362, 393, 401, 421, 426, 445, 448, 452, 453, 454, 459, 464, 466, 476, 477, 483, 487, 488, 489, 536, 537, 538, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 566, 567, 632, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 677, 679, 681, 682, 683, 684, 685, 687, 688, 692, 693, 694, 695, 697, 698, 699, 801, 802, 817, 855, 863, 864, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 984, 986, 990, 997, 998, 1007, 1008, 1024, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "earli": [45, 48, 56, 82, 100, 141, 142, 148, 151, 192, 201, 211, 324, 330, 401, 421, 446, 450, 454, 468, 495, 501, 541, 542, 543, 544, 551, 558, 559, 564, 565, 566, 567, 632, 650, 661, 671, 672, 673, 681, 683, 697, 754, 832, 863, 864, 968, 991, 997, 1004, 1012, 1014, 1015, 1018, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052], "stop": [45, 48, 53, 58, 82, 100, 141, 142, 148, 184, 186, 192, 196, 201, 211, 225, 324, 330, 387, 389, 395, 396, 401, 414, 419, 421, 423, 445, 446, 448, 450, 452, 454, 457, 459, 467, 468, 476, 477, 483, 487, 488, 489, 495, 501, 513, 514, 537, 541, 542, 543, 544, 545, 548, 550, 551, 552, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 593, 594, 596, 607, 622, 632, 649, 650, 651, 653, 654, 657, 661, 663, 664, 671, 672, 673, 674, 676, 681, 682, 683, 685, 696, 697, 700, 719, 754, 801, 802, 832, 863, 864, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 948, 968, 983, 990, 998, 999, 1009, 1010, 1014, 1015, 1016, 1018, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "quit": [45, 54, 67, 91, 95, 121, 145, 168, 177, 195, 196, 221, 241, 288, 297, 332, 361, 374, 392, 400, 414, 422, 989, 991, 996, 1018, 1043], "good": [45, 50, 61, 65, 67, 78, 82, 84, 87, 90, 91, 93, 96, 111, 117, 121, 137, 148, 151, 154, 155, 158, 180, 184, 190, 195, 207, 212, 223, 224, 229, 238, 248, 250, 254, 257, 260, 267, 269, 274, 280, 286, 295, 318, 325, 326, 331, 338, 343, 349, 361, 362, 370, 374, 375, 376, 386, 388, 389, 390, 391, 393, 399, 401, 409, 412, 413, 414, 416, 418, 419, 421, 422, 423, 424, 442, 444, 449, 539, 564, 566, 567, 595, 635, 645, 652, 653, 661, 663, 664, 666, 674, 685, 695, 699, 727, 735, 746, 768, 831, 900, 943, 983, 989, 990, 991, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1008, 1009, 1010, 1014, 1018, 1019, 1023, 1026, 1028, 1041], "trial": [45, 285, 452, 454, 465, 676, 801, 802, 990, 1041], "just": [45, 54, 70, 107, 121, 128, 148, 152, 158, 177, 213, 220, 244, 255, 280, 287, 291, 300, 315, 349, 361, 362, 369, 370, 382, 386, 387, 388, 389, 391, 392, 395, 399, 400, 401, 412, 414, 415, 418, 421, 423, 426, 473, 538, 540, 547, 551, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 584, 589, 615, 616, 651, 657, 662, 663, 665, 667, 671, 672, 673, 681, 682, 683, 809, 825, 855, 863, 864, 983, 990, 993, 994, 995, 998, 1002, 1004, 1008, 1014, 1026, 1035, 1039, 1041, 1043, 1047, 1051], "had": [45, 50, 85, 155, 158, 184, 257, 320, 326, 332, 370, 387, 388, 406, 422, 425, 449, 984, 994, 1018, 1019, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1050], "explicit": [45, 158, 192, 196, 200, 249, 257, 295, 353, 374, 375, 376, 386, 388, 399, 401, 402, 406, 415, 422, 428, 477, 504, 506, 507, 546, 556, 557, 636, 643, 644, 646, 681, 803, 804, 811, 850, 858, 866, 906, 911, 958, 962, 986, 988, 990, 994, 1004, 1010, 1013, 1015, 1035, 1039, 1044, 1045, 1048, 1052], "But": [45, 50, 91, 194, 224, 225, 280, 300, 320, 387, 399, 414, 417, 420, 421, 467, 750, 914, 915, 983, 994, 1009, 1014], "ordin": [45, 91, 108, 163, 260, 323, 326, 327, 331, 334, 381, 401, 421, 501, 572, 714, 871, 874, 879, 880, 887, 990, 991, 1004, 1014, 1043, 1049], "usual": [45, 54, 78, 114, 115, 117, 154, 155, 157, 163, 194, 196, 209, 223, 224, 274, 277, 280, 289, 290, 321, 332, 349, 370, 374, 375, 385, 387, 389, 395, 399, 400, 401, 405, 406, 412, 414, 415, 418, 419, 421, 422, 423, 455, 461, 543, 545, 547, 552, 564, 565, 612, 613, 635, 645, 663, 664, 671, 672, 673, 681, 682, 683, 697, 730, 762, 809, 830, 834, 906, 943, 983, 984, 986, 989, 990, 991, 993, 994, 995, 998, 999, 1000, 1001, 1004, 1008, 1009, 1010, 1019, 1025, 1026, 1050], "although": [45, 50, 65, 149, 163, 194, 220, 241, 250, 268, 299, 353, 370, 376, 389, 401, 414, 415, 419, 422, 501, 820, 823, 877, 993, 995, 996, 997, 1000, 1010, 1019, 1026, 1027, 1028, 1035, 1043, 1050], "compar": [45, 46, 50, 54, 60, 61, 64, 65, 67, 73, 74, 75, 77, 78, 79, 81, 85, 87, 90, 92, 93, 94, 95, 96, 102, 105, 108, 109, 110, 111, 116, 117, 119, 121, 125, 126, 131, 135, 137, 141, 142, 143, 145, 147, 151, 152, 153, 155, 157, 158, 159, 161, 163, 166, 169, 177, 183, 190, 191, 192, 195, 196, 197, 198, 201, 203, 205, 207, 211, 212, 218, 220, 223, 224, 226, 227, 229, 231, 233, 237, 240, 241, 243, 244, 247, 249, 252, 255, 258, 260, 261, 263, 268, 269, 273, 275, 277, 278, 279, 281, 283, 285, 287, 289, 291, 292, 294, 297, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 314, 317, 319, 321, 324, 325, 327, 331, 353, 361, 362, 363, 368, 369, 370, 376, 382, 384, 387, 389, 412, 413, 414, 416, 417, 418, 419, 421, 423, 424, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 463, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 495, 501, 507, 509, 517, 519, 527, 529, 533, 536, 542, 544, 550, 551, 556, 557, 566, 567, 568, 569, 570, 636, 644, 649, 650, 658, 660, 662, 663, 668, 671, 673, 681, 682, 689, 700, 710, 717, 720, 735, 742, 747, 790, 802, 803, 808, 817, 829, 832, 839, 848, 852, 855, 859, 863, 864, 866, 867, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 891, 892, 893, 894, 895, 896, 897, 906, 907, 908, 910, 911, 983, 986, 987, 988, 990, 991, 993, 994, 995, 996, 997, 998, 1000, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1015, 1026, 1027, 1035, 1037, 1042, 1043, 1048], "one_hot_encod": [45, 152], "handle_unknown": [45, 108, 147, 152, 163, 196, 197, 252, 260, 262, 264, 326, 330, 333, 879, 880, 1004, 1039, 1043, 1047, 1048], "sparse_output": [45, 152, 264, 326, 333, 336, 571, 873, 877, 879, 885, 890, 1004, 1050, 1051], "logspac": [45, 53, 67, 110, 114, 135, 168, 177, 180, 185, 195, 216, 227, 228, 254, 256, 270, 281, 293, 295, 304, 315, 322, 325, 349, 357, 825, 833, 989, 990, 1023, 1024, 1026], "naive_linear_pipelin": 45, "remaind": [45, 152, 195, 212, 223, 225, 241, 260, 334, 365, 415, 469, 472, 1035, 1042, 1043, 1044, 1047, 1048, 1051], "alpha_": [45, 118, 168, 195, 203, 211, 212, 477, 616, 649, 650, 652, 656, 658, 660, 661, 666, 668, 678, 680, 990, 1010, 1023, 1035, 1042], "7298221281347033": 45, "142": [45, 54, 96, 421], "014": [45, 128, 288, 362, 393, 1015], "184": [45, 223, 318, 393, 1026], "020": [45, 1002], "affirm": 45, "three": [45, 48, 66, 73, 78, 79, 83, 84, 93, 96, 114, 124, 125, 142, 147, 149, 152, 153, 154, 164, 165, 166, 174, 177, 187, 195, 207, 215, 220, 223, 225, 232, 234, 256, 257, 266, 269, 299, 326, 327, 330, 375, 380, 384, 391, 405, 412, 414, 418, 419, 420, 422, 456, 467, 503, 714, 945, 987, 989, 990, 991, 994, 997, 1004, 1008, 1009, 1012, 1019, 1027, 1035], "higher": [45, 54, 95, 116, 131, 135, 142, 145, 147, 148, 155, 159, 179, 181, 186, 187, 195, 196, 197, 200, 223, 224, 227, 241, 247, 248, 272, 274, 278, 280, 283, 294, 305, 325, 349, 353, 361, 362, 363, 370, 374, 382, 385, 389, 412, 414, 416, 421, 423, 424, 425, 449, 453, 454, 476, 483, 514, 537, 544, 548, 553, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 578, 593, 596, 612, 613, 624, 632, 636, 640, 642, 651, 652, 657, 658, 665, 666, 667, 668, 681, 683, 684, 709, 728, 732, 756, 789, 801, 803, 806, 807, 809, 817, 824, 825, 830, 833, 852, 855, 881, 898, 899, 900, 906, 907, 908, 909, 910, 911, 912, 919, 986, 990, 991, 993, 994, 997, 1001, 1004, 1008, 1009, 1026, 1028, 1036, 1041, 1043, 1050, 1052], "suspect": 45, "origin": [45, 46, 55, 57, 61, 62, 84, 85, 86, 89, 94, 96, 111, 112, 124, 128, 130, 131, 137, 158, 161, 173, 174, 177, 179, 181, 183, 184, 190, 191, 196, 200, 211, 212, 227, 243, 244, 245, 247, 248, 254, 255, 256, 260, 272, 277, 283, 303, 308, 318, 321, 325, 335, 339, 353, 355, 361, 363, 370, 375, 382, 384, 386, 387, 389, 391, 392, 399, 401, 409, 412, 414, 415, 418, 419, 421, 422, 424, 425, 426, 427, 439, 442, 446, 448, 449, 450, 451, 452, 454, 455, 464, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 498, 499, 500, 506, 524, 536, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 581, 586, 587, 589, 593, 595, 596, 599, 612, 613, 615, 616, 619, 635, 637, 640, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 697, 701, 706, 732, 767, 773, 804, 805, 810, 812, 821, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 856, 857, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 882, 883, 884, 885, 886, 895, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 924, 926, 927, 931, 932, 953, 965, 968, 987, 988, 990, 991, 993, 994, 997, 1000, 1005, 1006, 1007, 1008, 1011, 1013, 1018, 1019, 1028, 1038, 1039, 1041, 1043, 1045, 1047, 1049, 1051], "mere": [45, 280, 401, 833, 1008], "min": [45, 51, 52, 53, 54, 55, 65, 67, 70, 90, 96, 112, 128, 131, 142, 144, 151, 154, 155, 161, 170, 177, 181, 183, 184, 185, 191, 195, 205, 211, 212, 218, 225, 226, 229, 244, 254, 255, 258, 299, 306, 307, 313, 315, 317, 320, 322, 323, 325, 343, 355, 358, 396, 414, 417, 419, 487, 488, 489, 490, 517, 539, 540, 543, 545, 546, 554, 555, 568, 632, 636, 637, 659, 660, 661, 662, 687, 688, 709, 745, 761, 784, 806, 807, 855, 863, 864, 876, 885, 892, 943, 959, 985, 990, 994, 997, 1004, 1041, 1044, 1046, 1047, 1050], "prevent": [45, 93, 153, 155, 174, 194, 224, 227, 320, 326, 327, 349, 361, 365, 370, 387, 389, 391, 399, 400, 414, 419, 422, 447, 454, 493, 494, 566, 567, 595, 596, 616, 732, 789, 863, 864, 891, 892, 894, 895, 896, 897, 994, 996, 999, 1000, 1004, 1010, 1026, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "properli": [45, 54, 65, 93, 160, 184, 275, 329, 376, 385, 387, 391, 395, 420, 906, 907, 908, 909, 910, 911, 912, 983, 1038, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "recogn": [45, 46, 68, 89, 91, 121, 123, 131, 150, 175, 192, 224, 274, 304, 332, 338, 339, 393, 406, 414, 422, 507, 702, 718, 832, 911, 994, 1015, 1019, 1052], "magnitud": [45, 137, 144, 180, 191, 195, 240, 260, 285, 320, 325, 332, 374, 382, 393, 414, 421, 424, 618, 657, 709, 886, 990, 994, 998, 1004, 1008, 1010, 1037, 1044], "manner": [45, 112, 128, 174, 196, 200, 268, 333, 334, 375, 387, 393, 414, 419, 421, 422, 714, 846, 847, 983, 994, 1010, 1038, 1045], "decid": [45, 52, 95, 98, 108, 153, 158, 272, 277, 280, 287, 382, 387, 402, 422, 424, 455, 462, 564, 565, 616, 640, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 676, 686, 689, 801, 848, 849, 850, 852, 854, 856, 857, 858, 869, 993, 1000, 1018, 1048, 1051], "treat": [45, 47, 108, 152, 163, 190, 195, 223, 289, 326, 331, 336, 341, 370, 387, 399, 401, 412, 421, 422, 447, 566, 567, 593, 594, 596, 612, 613, 637, 643, 650, 676, 679, 733, 734, 742, 758, 787, 788, 791, 792, 875, 876, 882, 883, 886, 887, 891, 894, 895, 897, 906, 907, 951, 984, 986, 990, 994, 995, 1001, 1004, 1008, 1010, 1024, 1039, 1047, 1051, 1052], "therebi": [45, 195, 418, 421, 986, 1045], "impli": [45, 179, 361, 362, 363, 419, 421, 424, 479, 578, 587, 615, 616, 627, 739, 930, 990, 991, 1028, 1046], "lot": [45, 118, 195, 227, 382, 387, 388, 389, 395, 419, 421, 806, 807, 898, 899, 983, 1006, 1008, 1009, 1013, 1014, 1018, 1027, 1028, 1035, 1040, 1042, 1043, 1044, 1045, 1047], "level": [45, 50, 52, 53, 57, 67, 73, 79, 91, 128, 147, 151, 170, 177, 178, 179, 180, 183, 186, 188, 192, 195, 196, 234, 235, 236, 237, 238, 241, 250, 254, 255, 270, 280, 283, 289, 290, 306, 313, 347, 348, 350, 351, 353, 355, 357, 362, 369, 374, 382, 384, 385, 387, 389, 393, 399, 401, 404, 405, 406, 413, 419, 422, 424, 428, 459, 473, 498, 499, 501, 508, 526, 536, 541, 542, 550, 551, 552, 566, 567, 572, 573, 616, 620, 627, 628, 630, 671, 672, 673, 681, 682, 683, 692, 695, 697, 699, 705, 707, 721, 727, 732, 789, 827, 828, 829, 831, 834, 835, 862, 863, 864, 904, 919, 983, 990, 994, 995, 997, 1002, 1008, 1010, 1013, 1014, 1015, 1028, 1038, 1046, 1049, 1050, 1051], "one_hot_linear_pipelin": 45, "one_hot_tim": 45, "099": 45, "011": [45, 288, 300, 362, 393], "131": [45, 51, 55, 94, 393, 994, 1015, 1036], "better": [45, 46, 50, 54, 60, 61, 64, 70, 88, 93, 111, 112, 114, 115, 116, 117, 121, 124, 128, 131, 145, 148, 153, 154, 155, 158, 163, 172, 183, 184, 185, 187, 190, 197, 203, 207, 209, 212, 223, 224, 225, 231, 238, 240, 241, 247, 255, 256, 257, 260, 271, 274, 280, 282, 283, 286, 289, 290, 297, 299, 318, 324, 325, 333, 334, 349, 357, 361, 362, 363, 365, 370, 374, 382, 386, 387, 388, 389, 391, 392, 393, 395, 401, 404, 409, 411, 413, 414, 416, 418, 419, 420, 421, 422, 424, 454, 455, 543, 545, 552, 564, 565, 566, 567, 612, 613, 635, 676, 682, 697, 714, 729, 738, 743, 746, 767, 802, 831, 841, 842, 843, 844, 845, 846, 847, 852, 863, 864, 883, 884, 887, 895, 898, 899, 906, 907, 983, 984, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 1002, 1004, 1007, 1008, 1010, 1014, 1018, 1021, 1023, 1028, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "confirm": [45, 54, 121, 145, 152, 155, 158, 197, 223, 225, 283, 286, 289, 325, 363, 391, 983, 1004, 1043], "benefit": [45, 84, 94, 111, 112, 142, 143, 153, 158, 195, 237, 247, 253, 255, 302, 333, 374, 387, 396, 401, 413, 414, 453, 466, 473, 513, 572, 573, 663, 664, 671, 672, 673, 681, 682, 683, 837, 904, 906, 983, 989, 997, 1004, 1014, 1018, 1035, 1038, 1039, 1040, 1047, 1048, 1049, 1050], "ad": [45, 55, 61, 112, 135, 137, 142, 148, 158, 173, 179, 185, 186, 202, 207, 225, 227, 247, 256, 257, 280, 281, 282, 320, 330, 331, 332, 333, 334, 335, 336, 342, 353, 362, 386, 387, 389, 391, 393, 399, 401, 402, 419, 421, 422, 423, 424, 438, 446, 447, 448, 450, 452, 454, 457, 464, 467, 469, 473, 487, 488, 489, 490, 519, 527, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 616, 618, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 653, 655, 659, 663, 664, 674, 681, 683, 685, 693, 694, 697, 700, 718, 719, 733, 734, 779, 781, 787, 788, 791, 793, 801, 802, 803, 817, 827, 834, 844, 850, 855, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 895, 898, 899, 903, 904, 906, 907, 914, 915, 916, 917, 933, 983, 987, 989, 990, 991, 995, 997, 998, 1000, 1014, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "progress": [45, 48, 49, 128, 166, 177, 191, 216, 305, 333, 384, 387, 391, 392, 402, 406, 411, 414, 564, 565, 697, 835, 837, 840, 855, 863, 864, 1018, 1026, 1028, 1035, 1037, 1044, 1049], "veri": [45, 54, 65, 67, 77, 78, 80, 82, 88, 90, 98, 100, 116, 117, 118, 120, 126, 131, 155, 161, 168, 184, 190, 195, 196, 197, 212, 223, 224, 225, 228, 231, 241, 247, 250, 256, 257, 260, 266, 282, 283, 286, 287, 289, 290, 295, 300, 317, 320, 332, 338, 341, 349, 353, 359, 361, 363, 370, 374, 382, 386, 387, 389, 392, 393, 395, 399, 400, 401, 409, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 447, 452, 457, 467, 476, 477, 483, 505, 509, 515, 562, 563, 566, 567, 569, 570, 572, 573, 594, 595, 627, 655, 656, 659, 660, 661, 669, 687, 688, 690, 696, 697, 700, 710, 747, 750, 796, 801, 803, 811, 813, 817, 820, 823, 846, 847, 871, 875, 876, 877, 886, 898, 899, 908, 911, 914, 915, 916, 917, 943, 983, 986, 987, 989, 990, 991, 992, 993, 994, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1026, 1027, 1035, 1040, 1041, 1043, 1046, 1048, 1050, 1051, 1052], "minut": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 382, 387, 991, 1012], "1440": 45, "caus": [45, 65, 67, 155, 180, 195, 221, 223, 227, 228, 241, 299, 327, 353, 363, 370, 385, 392, 413, 414, 419, 420, 422, 424, 448, 452, 454, 464, 514, 537, 587, 594, 615, 616, 782, 841, 842, 843, 845, 870, 879, 881, 884, 885, 926, 927, 983, 984, 990, 994, 1002, 1004, 1007, 1014, 1019, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "overfit": [45, 67, 147, 153, 155, 158, 192, 196, 197, 198, 202, 224, 227, 250, 268, 273, 275, 281, 285, 295, 315, 321, 322, 324, 325, 326, 327, 349, 357, 365, 367, 368, 382, 401, 413, 418, 421, 442, 493, 494, 566, 567, 572, 573, 662, 803, 806, 807, 817, 828, 829, 863, 864, 866, 881, 885, 989, 998, 1000, 1002, 1004, 1010, 1015, 1018, 1026, 1038], "avoid": [45, 48, 53, 54, 82, 95, 100, 109, 147, 148, 153, 158, 195, 196, 225, 227, 232, 241, 246, 257, 260, 275, 281, 285, 308, 310, 311, 324, 325, 336, 345, 346, 362, 375, 385, 387, 388, 389, 391, 392, 393, 399, 401, 402, 405, 409, 413, 414, 416, 418, 421, 422, 425, 445, 447, 449, 457, 467, 473, 498, 499, 500, 504, 513, 514, 539, 544, 548, 639, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 694, 696, 698, 700, 717, 796, 803, 804, 808, 814, 817, 827, 828, 829, 866, 869, 875, 876, 878, 883, 884, 885, 886, 889, 891, 892, 893, 894, 895, 896, 897, 899, 904, 943, 988, 991, 993, 994, 997, 998, 1000, 1002, 1004, 1009, 1010, 1014, 1017, 1028, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "re": [45, 49, 55, 66, 67, 94, 107, 108, 142, 152, 182, 194, 241, 257, 267, 271, 283, 285, 289, 330, 361, 363, 375, 387, 388, 391, 395, 400, 402, 406, 413, 418, 422, 474, 475, 476, 477, 478, 479, 480, 481, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 651, 657, 665, 667, 805, 820, 823, 914, 915, 916, 917, 990, 995, 997, 1004, 1009, 1014, 1018, 1028, 1035, 1039, 1040, 1042, 1044], "fine": [45, 75, 151, 177, 227, 239, 272, 278, 353, 367, 368, 384, 391, 401, 422, 451, 943, 962, 997, 1000, 1009, 1014, 1045], "grain": [45, 70, 75, 255, 272, 322, 393, 422, 451, 962, 1014], "still": [45, 54, 67, 71, 82, 91, 93, 95, 100, 118, 124, 132, 150, 155, 158, 163, 179, 185, 194, 195, 197, 198, 202, 207, 223, 225, 241, 255, 283, 289, 320, 331, 332, 335, 361, 362, 370, 376, 381, 386, 387, 389, 391, 392, 393, 395, 399, 401, 414, 418, 421, 422, 425, 445, 449, 459, 479, 501, 632, 637, 640, 642, 722, 760, 782, 785, 796, 797, 806, 807, 820, 823, 884, 886, 906, 924, 983, 984, 988, 990, 993, 994, 997, 1000, 1002, 1009, 1010, 1012, 1014, 1017, 1018, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051], "express": [45, 48, 53, 142, 148, 179, 184, 195, 280, 281, 326, 331, 346, 353, 363, 381, 382, 387, 388, 393, 399, 414, 419, 420, 422, 455, 461, 462, 593, 594, 596, 721, 792, 803, 809, 817, 825, 827, 828, 829, 830, 833, 853, 986, 990, 994, 998, 1004, 1005, 1010, 1043], "advantag": [45, 46, 77, 93, 95, 128, 133, 156, 223, 224, 250, 267, 281, 299, 333, 370, 401, 413, 418, 419, 422, 424, 446, 450, 465, 539, 594, 654, 679, 680, 767, 834, 835, 836, 866, 867, 906, 907, 908, 909, 910, 911, 912, 983, 986, 989, 990, 991, 994, 995, 997, 998, 1002, 1004, 1008, 1009, 1010, 1038], "induct": [45, 74, 140, 155, 192, 401, 414, 421, 428, 446, 517, 569, 632, 636, 901, 902, 955, 978, 990, 1007, 1015, 1037], "bia": [45, 67, 114, 130, 141, 149, 150, 155, 158, 192, 195, 197, 202, 203, 205, 285, 315, 353, 357, 370, 382, 389, 401, 413, 416, 420, 421, 424, 529, 561, 564, 565, 612, 613, 619, 647, 653, 654, 663, 664, 674, 675, 685, 863, 864, 879, 881, 885, 891, 892, 894, 895, 896, 897, 915, 989, 990, 993, 994, 998, 999, 1002, 1008, 1015, 1026], "smooth": [45, 84, 85, 92, 177, 184, 216, 224, 239, 326, 349, 384, 402, 414, 420, 424, 453, 454, 542, 543, 544, 551, 562, 563, 564, 565, 569, 570, 571, 595, 596, 624, 627, 681, 841, 842, 843, 845, 883, 887, 895, 914, 915, 916, 917, 990, 996, 1004, 1008, 1009, 1010, 1028], "attempt": [45, 92, 196, 219, 229, 275, 361, 374, 386, 401, 414, 426, 451, 455, 462, 473, 636, 693, 694, 698, 821, 848, 849, 850, 852, 854, 856, 857, 858, 884, 886, 904, 926, 927, 990, 991, 997, 1010, 1019, 1042, 1047, 1052], "togeth": [45, 53, 89, 98, 108, 151, 163, 179, 185, 195, 204, 244, 247, 260, 276, 326, 333, 352, 366, 370, 389, 391, 399, 400, 401, 409, 414, 421, 422, 423, 429, 456, 458, 572, 573, 599, 694, 720, 803, 817, 866, 867, 880, 990, 991, 995, 1001, 1004, 1010, 1011, 1018, 1020, 1022, 1041, 1052], "equival": [45, 56, 73, 93, 95, 152, 159, 176, 179, 184, 195, 207, 241, 271, 289, 300, 325, 353, 363, 370, 374, 385, 393, 396, 400, 401, 414, 415, 416, 417, 418, 419, 421, 423, 424, 446, 448, 449, 450, 451, 452, 454, 455, 462, 469, 474, 479, 514, 539, 546, 563, 566, 567, 568, 569, 570, 593, 596, 618, 621, 624, 626, 629, 651, 652, 653, 657, 659, 663, 664, 671, 672, 673, 674, 677, 681, 682, 685, 688, 692, 693, 698, 713, 714, 727, 738, 745, 746, 751, 752, 753, 765, 774, 783, 784, 801, 802, 806, 807, 811, 813, 837, 840, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 863, 869, 875, 876, 878, 881, 882, 883, 884, 886, 894, 896, 897, 930, 941, 980, 983, 988, 990, 991, 992, 994, 1000, 1004, 1008, 1009, 1010, 1043, 1044, 1045, 1046, 1048, 1049, 1052], "importantli": [45, 55, 129, 196, 200, 320, 414], "jump": [45, 224, 320, 384, 387, 422, 885], "sin_transform": 45, "lambda": [45, 48, 49, 51, 54, 60, 94, 154, 203, 241, 280, 281, 324, 342, 411, 414, 419, 421, 422, 649, 650, 651, 652, 870, 882, 986, 990, 1004, 1023, 1043, 1049], "sin": [45, 55, 60, 77, 129, 143, 154, 155, 160, 162, 172, 179, 185, 186, 188, 202, 203, 207, 217, 224, 229, 245, 256, 272, 312, 321, 330, 336, 356, 367, 368, 424, 521, 620, 704, 768, 1027], "pi": [45, 55, 73, 77, 78, 129, 137, 160, 162, 172, 179, 203, 207, 211, 217, 224, 245, 266, 267, 268, 271, 272, 294, 313, 330, 336, 368, 405, 420, 424, 521, 522, 523, 620, 647, 988, 989, 990, 996, 1027], "cos_transform": 45, "effect": [45, 47, 67, 75, 77, 78, 83, 84, 91, 95, 100, 103, 106, 110, 121, 131, 133, 142, 153, 155, 157, 160, 163, 176, 179, 180, 184, 186, 192, 193, 195, 196, 198, 207, 218, 223, 224, 225, 227, 228, 229, 240, 242, 245, 247, 253, 260, 264, 267, 271, 276, 280, 281, 282, 285, 288, 289, 300, 318, 319, 321, 324, 330, 337, 349, 353, 354, 357, 358, 359, 361, 362, 363, 370, 375, 387, 389, 392, 399, 401, 413, 414, 415, 419, 420, 421, 422, 424, 425, 442, 448, 449, 451, 452, 454, 455, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 495, 501, 505, 519, 529, 530, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 599, 611, 614, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 696, 697, 706, 708, 757, 789, 801, 804, 805, 808, 810, 812, 814, 821, 822, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 856, 857, 863, 864, 866, 869, 870, 871, 872, 873, 875, 876, 878, 882, 883, 884, 885, 886, 887, 891, 892, 893, 894, 895, 896, 897, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 926, 927, 943, 960, 968, 983, 988, 990, 991, 993, 994, 995, 997, 1001, 1002, 1004, 1007, 1009, 1010, 1015, 1024, 1026, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "expans": [45, 190, 331, 455, 881, 1044], "synthet": [45, 55, 65, 67, 70, 73, 75, 80, 87, 149, 155, 161, 179, 184, 186, 196, 213, 225, 240, 315, 322, 357, 370, 374, 380, 390, 402, 414, 416, 423, 663, 664, 906, 907, 913, 988, 1026, 1027, 1041], "beyond": [45, 67, 224, 225, 374, 376, 386, 387, 399, 413, 421, 733, 734, 742, 787, 788, 791, 911, 991, 995, 1004, 1009, 1014, 1043], "pd": [45, 53, 54, 65, 108, 109, 142, 148, 149, 155, 160, 184, 190, 194, 195, 196, 197, 198, 202, 207, 212, 223, 227, 231, 241, 261, 264, 271, 278, 280, 281, 283, 291, 292, 297, 325, 326, 327, 332, 333, 357, 361, 362, 392, 401, 415, 469, 471, 632, 633, 634, 635, 637, 782, 924, 926, 927, 983, 984, 1001, 1004, 1046, 1048, 1049, 1050, 1052], "hour_df": 45, "arang": [45, 52, 54, 55, 57, 78, 96, 98, 103, 110, 115, 116, 135, 138, 151, 152, 154, 156, 157, 161, 165, 173, 179, 181, 186, 187, 190, 191, 198, 207, 223, 226, 228, 232, 246, 253, 255, 275, 280, 283, 288, 291, 299, 300, 313, 315, 322, 332, 338, 339, 341, 343, 349, 356, 361, 363, 367, 368, 369, 370, 399, 412, 418, 422, 470, 549, 832, 881, 885, 989, 990, 998, 1004, 1008, 1024], "hour_sin": 45, "fit_transform": [45, 46, 47, 51, 53, 56, 60, 82, 87, 90, 91, 96, 100, 124, 129, 132, 138, 161, 200, 214, 239, 241, 243, 244, 245, 246, 247, 248, 253, 254, 257, 258, 264, 300, 304, 316, 320, 321, 325, 326, 327, 329, 332, 334, 335, 336, 349, 361, 362, 363, 370, 379, 382, 389, 392, 393, 401, 411, 415, 419, 422, 423, 430, 438, 447, 448, 450, 452, 454, 469, 471, 473, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 695, 696, 697, 701, 850, 855, 858, 862, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 904, 984, 986, 990, 995, 997, 1004, 1005, 1006, 1019, 1024, 1027, 1028, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053], "hour_co": 45, "scatter": [45, 50, 52, 53, 57, 64, 69, 70, 73, 76, 77, 80, 81, 82, 83, 87, 90, 94, 95, 96, 97, 98, 100, 105, 116, 121, 125, 126, 130, 132, 133, 134, 136, 143, 144, 148, 151, 159, 161, 162, 164, 170, 172, 179, 180, 181, 183, 185, 186, 187, 188, 194, 195, 200, 203, 206, 213, 215, 219, 220, 221, 224, 225, 226, 232, 235, 236, 237, 240, 243, 244, 245, 246, 247, 248, 250, 255, 256, 258, 266, 267, 268, 269, 270, 271, 272, 275, 281, 283, 294, 300, 303, 306, 307, 308, 309, 310, 311, 312, 315, 320, 322, 323, 325, 333, 340, 343, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 361, 366, 367, 368, 416, 636, 706, 962, 988, 990, 1026, 1027], "color": [45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 61, 64, 65, 66, 67, 70, 72, 73, 74, 76, 78, 80, 82, 84, 85, 87, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 114, 115, 116, 117, 118, 121, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 142, 143, 148, 151, 152, 154, 157, 158, 159, 160, 161, 163, 165, 168, 170, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 195, 197, 198, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 219, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 237, 240, 241, 244, 245, 246, 248, 250, 254, 255, 256, 258, 261, 266, 267, 268, 269, 270, 271, 272, 275, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 293, 299, 302, 305, 306, 307, 308, 311, 312, 313, 315, 320, 321, 322, 324, 325, 326, 330, 336, 340, 341, 343, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 366, 367, 381, 382, 384, 395, 414, 421, 422, 452, 498, 499, 511, 588, 589, 783, 968, 1008, 1010, 1015, 1040, 1045, 1047, 1052], "akin": [45, 224, 401], "analog": [45, 60, 157, 393, 421, 994, 995, 1009, 1044], "clock": 45, "25th": [45, 260, 884], "back": [45, 133, 262, 375, 385, 387, 389, 401, 402, 409, 415, 422, 439, 448, 451, 452, 464, 487, 488, 489, 513, 514, 538, 539, 540, 543, 545, 546, 549, 586, 635, 663, 664, 671, 672, 673, 681, 682, 683, 732, 871, 873, 874, 875, 879, 880, 881, 883, 884, 886, 898, 899, 906, 990, 994, 998, 1014, 1019, 1028, 1038, 1043, 1045, 1046, 1049], "natur": [45, 67, 70, 148, 155, 186, 195, 196, 200, 207, 223, 224, 240, 241, 247, 260, 266, 272, 289, 299, 361, 387, 389, 401, 419, 421, 422, 425, 449, 455, 462, 556, 595, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 697, 709, 745, 759, 761, 848, 849, 850, 852, 854, 856, 857, 858, 885, 941, 990, 991, 993, 994, 997, 999, 1004, 1008, 1013, 1035, 1043], "sp": [45, 195, 336, 984, 1027], "colorbar": [45, 52, 69, 78, 128, 138, 150, 159, 175, 180, 182, 183, 185, 196, 243, 254, 270, 291, 320, 349, 702, 1047], "cyclic_cossin_transform": 45, "month_sin": 45, "month_co": 45, "weekday_sin": 45, "weekday_co": 45, "cyclic_cossin_linear_pipelin": 45, "125": [45, 54, 91, 116, 131, 332, 539, 983, 994, 1004], "166": [45, 311, 318, 393, 994, 1015, 1035], "wors": [45, 121, 142, 180, 196, 229, 280, 288, 299, 325, 370, 413, 414, 424, 437, 470, 487, 488, 489, 557, 559, 561, 563, 565, 567, 570, 573, 575, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 685, 710, 726, 727, 728, 732, 789, 839, 840, 849, 857, 864, 907, 909, 912, 915, 917, 994, 1004, 1044], "analyz": [45, 48, 58, 207, 282, 289, 334, 361, 363, 392, 393, 414, 422, 508, 593, 594, 596, 792, 991, 994, 1001, 1002, 1010, 1028, 1035, 1044], "reason": [45, 49, 53, 67, 80, 91, 107, 155, 158, 177, 195, 196, 200, 223, 224, 231, 241, 250, 254, 255, 257, 260, 277, 280, 281, 286, 297, 300, 321, 325, 362, 363, 370, 374, 375, 376, 382, 386, 387, 389, 391, 395, 399, 400, 401, 402, 414, 415, 416, 419, 421, 422, 513, 537, 579, 643, 651, 657, 659, 677, 692, 697, 767, 803, 817, 850, 855, 862, 881, 903, 983, 984, 989, 990, 991, 994, 996, 997, 998, 1000, 1004, 1008, 1009, 1018, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "disappoint": 45, "outcom": [45, 148, 195, 401, 421, 574, 663, 714, 746, 798, 834, 901, 902, 903, 908, 911, 990, 994, 1010, 1017, 1028, 1039, 1043, 1045], "altern": [45, 66, 108, 121, 149, 150, 156, 158, 163, 197, 207, 223, 241, 251, 269, 272, 289, 329, 353, 361, 362, 363, 370, 382, 390, 391, 393, 399, 401, 402, 405, 410, 412, 413, 414, 415, 416, 418, 419, 421, 422, 424, 446, 447, 450, 451, 452, 457, 463, 468, 504, 543, 545, 546, 552, 558, 559, 562, 563, 564, 565, 569, 570, 571, 587, 593, 594, 596, 622, 625, 648, 697, 711, 713, 775, 778, 782, 785, 805, 835, 870, 876, 879, 892, 899, 901, 914, 915, 916, 917, 961, 962, 988, 990, 991, 993, 994, 997, 998, 1002, 1004, 1006, 1007, 1009, 1010, 1014, 1023, 1028, 1030, 1040, 1042, 1048, 1049], "larger": [45, 48, 67, 75, 77, 80, 85, 93, 116, 118, 126, 137, 145, 156, 158, 180, 185, 186, 191, 195, 196, 200, 203, 207, 238, 239, 240, 248, 254, 256, 266, 272, 281, 283, 289, 290, 297, 300, 302, 315, 316, 318, 320, 349, 353, 362, 363, 380, 382, 387, 393, 401, 412, 413, 414, 415, 416, 418, 419, 421, 422, 424, 445, 448, 454, 455, 457, 459, 461, 520, 532, 546, 549, 566, 567, 568, 572, 573, 587, 594, 648, 657, 677, 678, 679, 680, 684, 692, 697, 709, 724, 740, 801, 851, 852, 883, 885, 886, 887, 895, 900, 942, 943, 965, 968, 986, 987, 990, 991, 993, 994, 997, 998, 1002, 1004, 1008, 1009, 1026, 1028, 1039, 1040, 1043, 1044, 1045, 1048, 1049, 1052], "periodic_spline_transform": 45, "n_spline": [45, 885], "degre": [45, 57, 73, 130, 144, 184, 190, 194, 196, 200, 202, 207, 211, 212, 224, 227, 256, 262, 266, 267, 268, 271, 272, 280, 294, 318, 331, 332, 346, 353, 356, 419, 423, 451, 457, 503, 540, 546, 644, 645, 648, 661, 779, 801, 803, 852, 881, 885, 908, 909, 910, 911, 912, 986, 987, 989, 990, 991, 992, 994, 995, 997, 1000, 1001, 1004, 1007, 1009, 1026, 1038, 1044, 1048, 1049, 1052], "n_knot": [45, 224, 332, 885, 1004, 1048], "include_bia": [45, 202, 294, 881, 885, 1049], "knot": [45, 224, 332, 885, 1004, 1048], "linspac": [45, 49, 51, 52, 55, 64, 66, 75, 76, 78, 80, 87, 93, 116, 117, 129, 137, 143, 155, 179, 180, 182, 183, 184, 185, 186, 188, 196, 202, 203, 205, 207, 213, 217, 223, 224, 225, 229, 233, 234, 235, 236, 237, 241, 248, 250, 253, 254, 256, 258, 270, 280, 282, 283, 287, 288, 289, 290, 294, 305, 306, 312, 313, 321, 323, 333, 334, 348, 349, 352, 354, 355, 357, 358, 359, 636, 637, 809, 830, 846, 847, 1027], "again": [45, 61, 105, 109, 155, 183, 185, 187, 195, 247, 281, 361, 370, 391, 396, 401, 402, 414, 415, 416, 421, 422, 477, 572, 573, 639, 652, 656, 658, 660, 666, 668, 670, 697, 983, 990, 994, 1008, 1032, 1035, 1043, 1052], "splines_df": 45, "spline_": 45, "concat": [45, 54, 190, 194, 212, 241, 879], "cmap": [45, 46, 47, 52, 53, 55, 57, 61, 62, 69, 70, 71, 73, 77, 78, 84, 85, 88, 89, 91, 92, 96, 116, 118, 123, 128, 131, 134, 138, 144, 150, 151, 170, 175, 182, 183, 196, 202, 206, 207, 214, 215, 232, 235, 236, 237, 239, 244, 245, 246, 254, 255, 259, 274, 275, 300, 304, 306, 308, 309, 311, 313, 315, 317, 318, 320, 322, 338, 339, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 358, 359, 366, 702, 1024, 1025], "cm": [45, 47, 52, 53, 55, 57, 61, 62, 64, 69, 70, 71, 76, 77, 84, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 105, 116, 118, 123, 128, 131, 134, 144, 150, 151, 170, 175, 182, 183, 196, 206, 215, 232, 235, 236, 239, 244, 245, 246, 251, 254, 255, 259, 264, 274, 275, 300, 303, 304, 306, 310, 313, 315, 317, 318, 320, 322, 331, 334, 338, 339, 343, 345, 346, 347, 349, 350, 351, 355, 358, 359, 366, 384, 415, 702, 919, 994, 1004, 1010, 1024, 1025], "tab20b": 45, "stai": [45, 54, 66, 75, 137, 195, 362, 386, 387, 391, 401, 402, 999, 1017, 1041], "midnight": 45, "fewer": [45, 55, 66, 93, 142, 151, 153, 223, 374, 388, 414, 423, 424, 453, 466, 558, 599, 701, 836, 947, 990, 995, 997, 1040, 1041, 1042], "cyclic_spline_transform": 45, "cyclic_month": 45, "cyclic_weekdai": 45, "cyclic_hour": 45, "cyclic_spline_linear_pipelin": 45, "097": [45, 177, 233, 367, 384, 1015], "132": [45, 49, 55, 94, 182, 421, 1015], "013": [45, 96, 174, 288, 362, 1015], "successfulli": [45, 55, 324, 386, 391, 414, 422, 1008], "held": [45, 49, 108, 135, 156, 197, 231, 268, 283, 288, 299, 418, 421, 564, 565, 566, 567, 706, 803, 806, 807, 817, 863, 864, 876, 983, 984, 993, 1002, 1028], "naive_linear_predict": 45, "one_hot_linear_predict": 45, "cyclic_cossin_linear_predict": 45, "cyclic_spline_linear_predict": 45, "zoom": [45, 147, 320, 1021], "insight": [45, 48, 195, 196, 224, 225, 241, 317, 320, 361, 369, 413, 803, 806, 807, 817, 829, 1001, 1010, 1018], "last_hour": [45, 54], "suptitl": [45, 46, 54, 56, 71, 72, 73, 77, 78, 88, 91, 95, 98, 105, 112, 128, 131, 138, 142, 151, 152, 160, 163, 188, 195, 196, 198, 217, 222, 238, 239, 243, 244, 245, 259, 269, 276, 318, 320, 322, 329, 331, 338, 339, 343, 356, 357, 366], "actual": [45, 54, 67, 84, 98, 112, 121, 148, 158, 177, 200, 212, 223, 227, 231, 268, 276, 283, 363, 370, 374, 376, 384, 385, 387, 389, 392, 393, 399, 400, 401, 413, 414, 419, 422, 423, 439, 514, 520, 521, 532, 540, 543, 545, 552, 567, 568, 649, 650, 653, 663, 664, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 685, 692, 696, 700, 706, 709, 714, 720, 726, 727, 728, 789, 801, 806, 807, 822, 823, 852, 883, 906, 912, 934, 935, 936, 969, 986, 993, 994, 997, 1001, 1002, 1017, 1042, 1043, 1049, 1050, 1051], "black": [45, 50, 51, 52, 54, 66, 73, 82, 87, 93, 94, 116, 117, 126, 128, 151, 172, 179, 180, 184, 185, 188, 191, 195, 196, 202, 211, 212, 213, 215, 219, 223, 224, 225, 229, 232, 235, 236, 241, 250, 260, 266, 269, 305, 315, 316, 318, 343, 359, 366, 367, 368, 387, 405, 408, 414, 421, 424, 560, 561, 636, 1000, 1001, 1010, 1013, 1019], "legend": [45, 48, 49, 50, 52, 54, 64, 66, 72, 75, 78, 99, 109, 110, 112, 114, 115, 116, 117, 120, 121, 124, 130, 132, 135, 136, 137, 142, 143, 144, 145, 146, 148, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 173, 179, 180, 184, 185, 186, 187, 188, 195, 196, 200, 202, 203, 205, 208, 211, 212, 213, 217, 223, 224, 225, 226, 229, 230, 231, 232, 233, 236, 237, 238, 240, 241, 246, 253, 254, 255, 256, 258, 261, 268, 275, 277, 279, 280, 282, 283, 284, 285, 287, 290, 292, 293, 294, 297, 303, 305, 306, 307, 312, 316, 321, 325, 330, 333, 336, 340, 348, 351, 353, 356, 361, 365, 366, 367, 368, 705, 1024, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "draw": [45, 48, 57, 98, 188, 195, 219, 261, 282, 287, 349, 394, 417, 419, 420, 421, 560, 561, 562, 563, 568, 569, 570, 571, 616, 639, 706, 809, 825, 918, 920, 993, 1013, 1022, 1048, 1049], "conclus": [45, 133, 195, 197, 223, 225, 280, 282, 370, 421, 1022], "abov": [45, 65, 66, 67, 75, 82, 104, 107, 144, 147, 148, 155, 158, 166, 176, 177, 195, 196, 209, 223, 225, 229, 234, 254, 257, 258, 280, 286, 297, 305, 322, 325, 326, 330, 332, 336, 362, 363, 369, 370, 374, 375, 376, 381, 382, 384, 385, 386, 387, 389, 391, 393, 399, 401, 402, 413, 414, 415, 416, 418, 419, 420, 422, 424, 446, 450, 469, 472, 494, 500, 501, 502, 528, 595, 639, 709, 759, 803, 807, 815, 817, 827, 869, 870, 883, 889, 895, 903, 957, 983, 984, 986, 988, 990, 991, 994, 997, 999, 1001, 1004, 1008, 1009, 1010, 1014, 1019, 1020, 1026, 1027, 1028, 1041], "problemat": [45, 276, 415, 984, 1043], "big": [45, 82, 98, 100, 228, 244, 260, 272, 375, 387, 393, 402, 416, 422, 426, 543, 566, 567, 569, 570, 809, 830, 841, 842, 843, 844, 845, 1014, 1018, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "goe": [45, 75, 147, 369, 385, 387, 421, 476, 477, 483, 562, 563, 569, 570, 571, 914, 915, 916, 917, 1004, 1008], "artifact": [45, 55, 84, 85, 320, 376, 391], "discontinu": [45, 399], "fail": [45, 92, 104, 129, 135, 187, 188, 202, 207, 227, 257, 280, 329, 375, 385, 387, 389, 390, 395, 402, 405, 417, 418, 445, 477, 479, 681, 682, 683, 863, 864, 925, 937, 983, 991, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "intra": [45, 593, 596, 796, 797], "harmon": [45, 75, 287, 362, 414, 540, 546, 733, 734, 740, 787, 799, 994], "phase": [45, 207, 217, 374, 632, 986, 991, 997, 1018, 1043, 1045], "furthermor": [45, 54, 75, 148, 185, 196, 197, 260, 261, 263, 300, 361, 362, 374, 376, 394, 414, 419, 421, 422, 567, 595, 611, 624, 709, 740, 750, 759, 761, 799, 906, 990, 1002, 1038, 1042], "enforc": [45, 53, 73, 91, 128, 158, 184, 217, 309, 374, 387, 416, 419, 421, 431, 437, 513, 532, 536, 542, 544, 547, 548, 550, 551, 553, 562, 563, 566, 567, 569, 570, 870, 885, 914, 915, 916, 917, 926, 927, 984, 991, 1037, 1043, 1045, 1047, 1051], "behav": [45, 53, 90, 95, 227, 275, 320, 331, 349, 370, 387, 393, 399, 400, 414, 415, 418, 886, 990, 1004, 1009, 1011, 1014, 1028, 1035, 1042, 1044, 1048, 1049], "similarli": [45, 53, 75, 93, 126, 159, 196, 198, 207, 212, 223, 251, 260, 280, 315, 320, 335, 349, 370, 375, 383, 385, 389, 392, 401, 412, 417, 418, 422, 733, 734, 742, 787, 788, 791, 989, 991, 992, 994, 1001, 1008, 1009, 1011, 1019, 1023, 1043, 1049, 1051], "spiki": 45, "shorter": [45, 185, 269, 399, 414, 419, 455, 462, 568, 702, 996, 1000, 1028, 1046], "necessarili": [45, 70, 109, 131, 195, 223, 231, 241, 255, 256, 267, 322, 361, 362, 381, 391, 411, 413, 414, 421, 632, 854, 856, 857, 858, 988, 991, 993, 994], "59": [45, 131, 200, 207, 241, 354, 384, 393, 414, 415, 515, 994, 1031, 1035], "37": [45, 207, 283, 338, 369, 382, 421, 529, 721, 886, 897, 1004, 1035], "downstream": [45, 116, 327, 363, 422, 536, 539, 542, 546, 547, 611, 879, 1004, 1045], "freedom": [45, 130, 184, 211, 212, 214, 280, 546, 661, 801, 990, 1038], "underfit": [45, 73, 155, 179, 192, 197, 224, 227, 273, 295, 315, 326, 357, 421, 662, 803, 806, 807, 817, 828, 829, 866, 881, 989, 990, 1015], "especi": [45, 49, 54, 93, 94, 152, 155, 158, 195, 223, 257, 326, 334, 362, 370, 375, 381, 387, 395, 399, 401, 413, 414, 422, 448, 454, 506, 543, 562, 563, 564, 565, 569, 570, 571, 651, 652, 653, 655, 657, 658, 659, 663, 664, 665, 666, 667, 668, 674, 685, 700, 710, 750, 841, 842, 843, 844, 845, 914, 915, 916, 917, 990, 996, 997, 1004, 1018, 1038, 1043, 1047, 1048, 1049], "sharp": [45, 196, 1001, 1004], "rush": [45, 54, 387], "flatter": [45, 65], "accur": [45, 50, 54, 62, 65, 66, 116, 128, 157, 179, 186, 195, 196, 227, 238, 241, 280, 287, 291, 297, 333, 361, 362, 370, 386, 401, 413, 414, 416, 419, 421, 422, 423, 442, 448, 452, 456, 458, 464, 536, 543, 545, 547, 548, 550, 551, 552, 612, 613, 639, 806, 807, 846, 847, 942, 943, 986, 991, 994, 1010, 1049], "tend": [45, 53, 67, 75, 77, 81, 90, 93, 95, 177, 195, 196, 212, 223, 228, 241, 260, 266, 269, 277, 281, 299, 318, 353, 363, 374, 376, 387, 389, 401, 413, 414, 416, 419, 421, 423, 442, 453, 658, 852, 883, 895, 943, 990, 991, 997, 1010, 1028], "systemat": [45, 158, 280, 389, 717, 732, 994, 1050], "reveal": [45, 54, 195, 197, 361, 393, 412, 991, 1051], "lack": [45, 67, 353, 387, 389, 399, 418, 831, 921, 1009, 1049], "deriv": [45, 60, 137, 138, 154, 184, 187, 197, 211, 212, 216, 224, 375, 382, 389, 416, 418, 420, 421, 422, 424, 426, 446, 450, 451, 470, 538, 611, 622, 627, 653, 674, 681, 685, 863, 864, 879, 885, 906, 907, 988, 990, 991, 994, 998, 1000, 1009, 1035, 1036, 1037, 1042, 1043, 1044, 1050], "address": [45, 86, 227, 361, 382, 387, 414, 422, 452, 662, 990, 991, 996, 997, 998, 999, 1000, 1004, 1018, 1026, 1043], "coars": [45, 151, 393, 453, 466], "explicitli": [45, 84, 149, 179, 186, 190, 191, 224, 253, 257, 336, 353, 363, 370, 375, 381, 383, 387, 388, 389, 391, 399, 401, 406, 411, 418, 422, 424, 540, 554, 555, 584, 585, 602, 632, 653, 663, 664, 674, 685, 714, 731, 786, 792, 793, 806, 807, 837, 840, 846, 847, 872, 896, 897, 962, 983, 984, 986, 988, 990, 991, 994, 996, 997, 1004, 1018, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1053], "too": [45, 48, 53, 54, 58, 67, 82, 88, 93, 95, 100, 107, 111, 118, 132, 155, 190, 197, 207, 224, 227, 244, 254, 260, 267, 274, 278, 287, 295, 317, 326, 349, 361, 367, 368, 374, 384, 387, 393, 395, 399, 401, 413, 414, 416, 418, 421, 422, 423, 426, 442, 454, 543, 593, 596, 684, 697, 712, 841, 842, 843, 844, 845, 871, 884, 886, 989, 991, 993, 994, 996, 997, 1001, 1026, 1036, 1039, 1042, 1043, 1044, 1045, 1047], "mani": [45, 48, 51, 60, 93, 94, 111, 114, 118, 142, 148, 149, 150, 151, 156, 173, 177, 197, 223, 243, 254, 267, 274, 280, 287, 288, 292, 300, 320, 325, 326, 329, 330, 331, 332, 333, 335, 336, 361, 370, 374, 376, 382, 384, 386, 387, 400, 401, 402, 405, 412, 413, 414, 415, 416, 419, 421, 422, 423, 424, 426, 508, 558, 559, 562, 563, 564, 565, 569, 570, 571, 593, 596, 611, 614, 632, 644, 655, 659, 663, 664, 671, 672, 673, 681, 682, 683, 697, 700, 778, 782, 803, 807, 817, 863, 864, 879, 884, 886, 906, 914, 915, 916, 917, 983, 984, 986, 990, 991, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1007, 1009, 1011, 1012, 1013, 1014, 1018, 1026, 1028, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051], "hour_workday_interact": 45, "interaction_onli": [45, 881, 990, 1004], "previou": [45, 81, 91, 108, 128, 145, 152, 153, 155, 163, 179, 184, 185, 194, 195, 196, 207, 209, 224, 254, 256, 257, 280, 283, 287, 320, 325, 333, 361, 362, 363, 370, 374, 382, 387, 389, 392, 393, 395, 399, 401, 402, 405, 414, 421, 422, 473, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 635, 651, 653, 657, 658, 663, 665, 667, 671, 672, 673, 674, 681, 682, 683, 685, 712, 822, 837, 840, 855, 863, 864, 903, 920, 990, 994, 998, 1004, 1014, 1019, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "nice": [45, 105, 224, 257, 320, 374, 419, 1028], "cyclic_spline_interactions_pipelin": 45, "078": 45, "009": [45, 393], "104": [45, 54, 64], "highlight": [45, 54, 56, 93, 108, 116, 126, 140, 146, 147, 160, 177, 179, 180, 185, 190, 191, 196, 197, 200, 223, 224, 225, 241, 252, 257, 262, 263, 264, 275, 276, 292, 297, 302, 324, 326, 361, 363, 387, 391, 392, 395, 399, 424, 448, 451, 452, 469, 472, 495, 496, 501, 506, 507, 509, 517, 520, 526, 529, 543, 546, 566, 567, 569, 570, 572, 604, 607, 633, 635, 637, 639, 645, 651, 653, 657, 663, 674, 685, 693, 706, 707, 722, 736, 752, 792, 799, 803, 804, 806, 807, 809, 817, 825, 828, 829, 832, 848, 850, 867, 871, 876, 879, 880, 881, 885, 886, 887, 903, 904, 906, 911, 914, 915, 938, 991, 994, 1002, 1004, 1009, 1015, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "anoth": [45, 75, 128, 133, 142, 153, 157, 177, 179, 187, 191, 195, 212, 227, 231, 248, 250, 257, 261, 267, 280, 282, 283, 286, 290, 310, 361, 363, 365, 370, 374, 376, 381, 382, 385, 387, 389, 393, 399, 401, 409, 412, 414, 418, 419, 421, 422, 423, 425, 447, 449, 457, 460, 467, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 513, 543, 545, 552, 678, 681, 697, 714, 724, 809, 825, 865, 866, 887, 983, 984, 989, 990, 991, 994, 995, 997, 1000, 1004, 1008, 1009, 1019, 1026, 1027, 1028, 1044, 1045, 1052], "either": [45, 51, 67, 69, 108, 148, 151, 152, 158, 195, 211, 213, 251, 260, 275, 284, 289, 305, 357, 361, 369, 374, 375, 379, 382, 385, 387, 388, 389, 393, 401, 406, 409, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 447, 452, 457, 492, 501, 517, 529, 538, 539, 541, 549, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 587, 588, 589, 593, 594, 595, 596, 598, 599, 602, 607, 612, 613, 615, 616, 627, 632, 635, 637, 638, 655, 659, 661, 669, 681, 683, 687, 688, 695, 702, 703, 707, 711, 712, 716, 717, 725, 728, 730, 731, 732, 733, 734, 739, 742, 743, 744, 746, 756, 760, 773, 778, 782, 786, 787, 788, 789, 791, 792, 793, 798, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 833, 836, 866, 896, 897, 903, 906, 907, 914, 915, 916, 917, 921, 951, 955, 983, 990, 994, 995, 996, 997, 998, 999, 1002, 1004, 1008, 1009, 1019, 1027, 1028, 1035, 1038, 1044, 1045, 1046, 1049], "after": [45, 58, 61, 62, 66, 84, 91, 93, 107, 108, 112, 117, 130, 142, 153, 158, 161, 163, 166, 173, 177, 184, 186, 188, 190, 195, 200, 216, 223, 260, 261, 264, 269, 280, 289, 299, 300, 308, 310, 320, 321, 324, 325, 361, 362, 376, 382, 384, 385, 386, 387, 389, 391, 393, 394, 395, 399, 401, 409, 411, 412, 413, 414, 415, 418, 419, 422, 423, 426, 447, 452, 455, 456, 457, 458, 461, 467, 520, 537, 541, 558, 559, 564, 565, 566, 567, 602, 632, 635, 663, 664, 671, 672, 673, 678, 680, 681, 682, 683, 697, 717, 730, 760, 798, 801, 802, 806, 807, 855, 862, 866, 879, 885, 906, 911, 912, 983, 984, 988, 990, 994, 998, 999, 1004, 1006, 1008, 1009, 1010, 1014, 1019, 1026, 1028, 1035, 1038, 1042, 1043, 1046, 1047, 1050, 1053], "tractabl": [45, 418, 639, 1013, 1048], "nystr\u00f6m": [45, 986], "latter": [45, 56, 271, 280, 289, 290, 308, 325, 357, 376, 384, 401, 418, 421, 422, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 746, 801, 802, 803, 806, 807, 812, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 961, 997, 1002, 1044], "cyclic_spline_poly_pipelin": 45, "poli": [45, 57, 170, 200, 280, 346, 353, 356, 457, 540, 625, 769, 778, 803, 881, 908, 909, 910, 911, 912, 990, 1004, 1026], "n_compon": [45, 46, 47, 53, 56, 82, 90, 95, 96, 97, 107, 110, 111, 120, 121, 124, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 161, 200, 222, 243, 244, 245, 246, 247, 248, 250, 254, 255, 258, 262, 266, 267, 268, 269, 270, 271, 272, 279, 304, 309, 318, 325, 331, 333, 336, 362, 389, 392, 393, 401, 417, 419, 426, 456, 457, 467, 469, 487, 488, 489, 490, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 644, 645, 646, 647, 693, 694, 695, 696, 697, 698, 699, 700, 701, 801, 802, 855, 862, 865, 898, 899, 900, 943, 986, 988, 991, 993, 997, 1024, 1027, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1052], "300": [45, 61, 62, 73, 76, 88, 96, 131, 142, 143, 144, 148, 191, 213, 248, 250, 254, 270, 283, 310, 323, 331, 338, 355, 357, 389, 448, 452, 453, 464, 466, 518, 644, 649, 650, 684, 695, 697, 699, 863, 990, 1045], "053": [45, 177, 384, 393], "002": [45, 53, 177, 179, 384], "076": [45, 56, 210, 236, 894, 1015], "004": [45, 362], "almost": [45, 73, 148, 154, 225, 231, 257, 260, 294, 325, 341, 370, 380, 382, 391, 393, 399, 400, 401, 406, 414, 418, 419, 475, 476, 477, 478, 480, 481, 482, 801, 983, 989, 990, 993, 994, 1009, 1027, 1028, 1043, 1048], "rival": [45, 903, 1007], "intermedi": [45, 48, 90, 93, 147, 155, 260, 349, 399, 422, 564, 565, 624, 866, 994, 1047], "compound": [45, 241, 422, 615, 617, 685, 728, 756, 990, 1028], "one_hot_poly_pipelin": 45, "passthrough": [45, 109, 152, 195, 196, 223, 241, 260, 326, 334, 415, 469, 472, 572, 573, 865, 866, 1004, 1044, 1046, 1049, 1050, 1052], "082": [45, 56], "006": [45, 288, 393], "111": [45, 48, 49, 57, 105, 124, 134, 220, 238, 247, 280, 300, 858, 1027, 1038], "competit": [45, 155, 361, 421, 649, 997], "fact": [45, 52, 60, 65, 117, 121, 142, 153, 155, 197, 254, 264, 297, 299, 361, 381, 394, 399, 401, 417, 419, 420, 421, 422, 654, 673, 675, 709, 988, 990, 997, 1004, 1008, 1009, 1014, 1018, 1049], "smoother": [45, 46, 155, 196, 317, 420], "abl": [45, 46, 50, 64, 85, 93, 99, 118, 121, 132, 133, 158, 160, 185, 195, 198, 207, 212, 223, 239, 241, 247, 286, 291, 336, 349, 370, 374, 375, 376, 381, 385, 387, 389, 391, 392, 399, 414, 416, 418, 422, 490, 508, 539, 831, 878, 983, 984, 990, 993, 994, 995, 1000, 1004, 1007, 1010, 1011, 1014, 1019, 1027, 1028, 1041, 1042, 1046], "gbrt_predict": 45, "one_hot_poly_predict": 45, "cyclic_spline_poly_predict": 45, "grow": [45, 54, 77, 200, 207, 302, 357, 363, 374, 399, 411, 416, 422, 562, 563, 564, 565, 569, 570, 571, 813, 846, 847, 914, 915, 916, 917, 983, 994, 997, 1010, 1018, 1022, 1026, 1038, 1039], "depth": [45, 147, 152, 156, 159, 164, 297, 365, 367, 368, 369, 374, 385, 387, 391, 400, 421, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 846, 847, 851, 914, 915, 916, 917, 918, 920, 948, 999, 1000, 1010, 1037, 1038, 1046], "On": [45, 53, 54, 58, 66, 105, 108, 109, 120, 121, 133, 142, 145, 147, 149, 150, 155, 159, 160, 163, 166, 172, 174, 183, 184, 195, 196, 197, 204, 211, 212, 225, 227, 251, 252, 253, 254, 256, 257, 260, 261, 262, 263, 264, 266, 268, 271, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 292, 318, 320, 322, 324, 325, 326, 330, 331, 333, 334, 336, 340, 349, 357, 369, 374, 385, 388, 389, 391, 399, 401, 409, 411, 413, 414, 418, 419, 421, 423, 424, 648, 661, 696, 739, 765, 871, 887, 983, 987, 990, 993, 994, 996, 1000, 1002, 1007, 1009, 1023, 1026], "contrari": [45, 55, 195, 244, 248, 260, 266, 283, 320, 361, 381, 414, 501, 549, 611, 820, 887, 990, 996, 1000], "significantli": [45, 64, 65, 67, 75, 114, 115, 142, 148, 153, 155, 158, 177, 195, 196, 197, 223, 227, 231, 239, 241, 280, 300, 330, 331, 362, 363, 370, 375, 391, 414, 419, 421, 422, 427, 474, 479, 484, 485, 543, 545, 552, 563, 570, 651, 652, 657, 658, 665, 666, 667, 668, 689, 697, 846, 847, 986, 990, 991, 997, 1002, 1009, 1035, 1037, 1038, 1042, 1043, 1048, 1049, 1050], "compet": 45, "access": [45, 87, 114, 153, 260, 267, 272, 336, 361, 369, 374, 375, 387, 388, 389, 395, 399, 401, 402, 411, 414, 416, 417, 421, 422, 424, 455, 462, 469, 541, 572, 573, 574, 575, 622, 864, 865, 866, 921, 983, 990, 993, 994, 1000, 1001, 1002, 1008, 1009, 1014, 1018, 1019, 1027, 1028, 1035, 1037, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051], "geograph": [45, 52, 313, 382, 503], "repartit": 45, "immobil": 45, "quantit": [45, 46, 47, 54, 65, 99, 155, 158, 166, 177, 276, 294, 384, 1024], "nrow": [45, 46, 69, 71, 73, 95, 104, 110, 128, 158, 188, 196, 223, 225, 231, 241, 243, 244, 247, 260, 282, 283, 300, 322, 324, 325, 334, 339, 356, 357, 1024], "ncol": [45, 46, 54, 69, 71, 73, 91, 95, 104, 128, 133, 138, 153, 196, 223, 224, 225, 231, 241, 243, 244, 253, 260, 276, 282, 283, 291, 300, 303, 316, 321, 322, 324, 325, 334, 356, 357, 362], "sharex": [45, 48, 56, 73, 110, 126, 133, 164, 188, 196, 225, 282, 305, 341, 1024], "sharei": [45, 54, 73, 112, 126, 133, 138, 164, 188, 196, 223, 225, 231, 282, 291, 305, 321, 326, 356, 357, 362], "npolynomi": 45, "ntree": 45, "plot_kind": 45, "actual_vs_predict": [45, 112, 163, 195, 276, 334, 706], "residual_vs_predict": [45, 54, 112, 276, 334, 706], "axis_idx": 45, "kind": [45, 50, 53, 54, 64, 65, 112, 136, 148, 163, 172, 195, 196, 271, 274, 276, 289, 327, 331, 334, 346, 349, 361, 375, 376, 380, 382, 387, 389, 393, 399, 400, 413, 414, 417, 418, 419, 421, 422, 423, 493, 494, 508, 513, 514, 526, 529, 593, 637, 638, 706, 935, 990, 996, 1001, 1010, 1038, 1047, 1049, 1050, 1051], "enumer": [45, 49, 51, 52, 53, 55, 56, 58, 60, 65, 67, 69, 70, 75, 77, 78, 79, 80, 81, 82, 83, 88, 93, 97, 98, 99, 100, 107, 115, 117, 118, 121, 129, 131, 137, 145, 148, 153, 154, 156, 157, 158, 168, 181, 183, 188, 198, 203, 205, 214, 223, 244, 245, 248, 250, 255, 259, 260, 266, 267, 268, 269, 271, 272, 275, 282, 283, 289, 290, 305, 309, 310, 312, 318, 322, 323, 338, 339, 341, 343, 347, 349, 356, 357, 361, 366, 382, 564, 565, 569, 570, 785, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "pred": [45, 48, 52, 54, 71, 358, 361, 382, 653, 674, 685, 702, 707, 711, 723, 733, 734, 742, 787, 788, 791, 792, 994], "zip": [45, 46, 49, 50, 53, 54, 64, 66, 70, 71, 73, 75, 76, 78, 80, 83, 87, 93, 101, 102, 103, 112, 121, 126, 128, 129, 132, 136, 137, 138, 144, 146, 153, 163, 164, 185, 190, 192, 195, 196, 197, 208, 214, 215, 223, 231, 232, 243, 254, 260, 267, 271, 272, 278, 282, 283, 284, 287, 289, 300, 303, 305, 308, 315, 316, 317, 322, 324, 325, 326, 342, 346, 357, 358, 366, 385, 421, 830, 1004, 1028, 1031], "disp": [45, 69, 71, 144, 158, 159, 160, 274, 283, 295, 303, 325, 330, 336, 346, 351, 443, 636, 702, 705, 706, 855], "from_predict": [45, 54, 71, 112, 163, 195, 260, 276, 287, 289, 332, 338, 361, 394, 443, 636, 702, 703, 705, 706, 707, 723, 731, 786, 788, 791, 792, 793, 994, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "y_true": [45, 54, 60, 71, 97, 112, 142, 163, 182, 223, 233, 241, 260, 269, 341, 387, 437, 443, 444, 470, 487, 488, 489, 557, 559, 561, 562, 563, 565, 567, 569, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 702, 703, 705, 706, 707, 708, 712, 713, 714, 717, 718, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 800, 839, 840, 849, 857, 864, 907, 909, 912, 915, 917, 994, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1052], "y_pred": [45, 47, 48, 54, 65, 69, 71, 73, 82, 95, 100, 107, 112, 142, 155, 156, 158, 163, 174, 195, 223, 225, 230, 233, 238, 240, 241, 250, 251, 260, 276, 278, 283, 307, 311, 318, 325, 341, 342, 370, 387, 394, 401, 421, 437, 444, 470, 487, 488, 489, 554, 557, 559, 561, 562, 563, 565, 567, 569, 570, 572, 573, 575, 616, 636, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 702, 703, 705, 706, 707, 708, 713, 717, 718, 723, 726, 727, 728, 732, 733, 734, 738, 740, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 787, 788, 789, 791, 792, 794, 795, 800, 803, 806, 807, 817, 827, 837, 839, 840, 849, 857, 864, 866, 906, 907, 908, 909, 910, 911, 912, 915, 917, 994, 996, 1024, 1041, 1042, 1044, 1046, 1050, 1051, 1052], "scatter_kwarg": [45, 54, 112, 163, 195, 706], "set_xtick": [45, 49, 51, 57, 70, 81, 98, 102, 138, 161, 165, 196, 198, 214, 239, 255, 266, 291, 292, 299, 315, 317, 322, 323, 346], "num": [45, 53, 108, 177, 179, 184, 185, 186, 196, 197, 225, 287, 288, 333, 335, 336, 501, 637], "set_ytick": [45, 57, 70, 81, 98, 102, 138, 161, 190, 191, 198, 214, 239, 266, 291, 315, 317, 322, 323, 346, 363], "loc": [45, 48, 49, 50, 64, 66, 72, 78, 109, 112, 115, 116, 117, 120, 124, 130, 132, 135, 136, 137, 142, 144, 145, 146, 154, 155, 156, 157, 158, 160, 163, 165, 166, 173, 179, 180, 186, 188, 195, 196, 205, 208, 213, 217, 223, 224, 225, 226, 229, 230, 233, 236, 237, 240, 241, 246, 253, 254, 255, 256, 258, 260, 268, 269, 275, 278, 279, 280, 283, 284, 287, 290, 293, 294, 303, 305, 306, 316, 321, 324, 325, 330, 333, 336, 340, 348, 351, 353, 356, 357, 361, 366, 368, 817, 883, 895, 1023], "upper": [45, 48, 50, 64, 109, 112, 115, 116, 117, 144, 145, 146, 154, 155, 156, 157, 163, 165, 173, 183, 185, 188, 195, 217, 223, 229, 230, 233, 237, 240, 241, 254, 258, 259, 279, 280, 281, 305, 306, 316, 325, 341, 348, 351, 353, 356, 414, 420, 468, 593, 594, 596, 600, 618, 619, 620, 622, 624, 625, 627, 628, 630, 637, 638, 640, 642, 655, 659, 682, 739, 792, 879, 880, 908, 909, 910, 930, 993, 994, 997, 1004, 1008, 1009, 1010, 1043], "bbox_to_anchor": [45, 75, 188, 285, 356], "set_aspect": [45, 182, 234, 268, 358], "equal": [45, 52, 53, 66, 73, 75, 77, 91, 98, 116, 121, 142, 155, 182, 195, 224, 225, 234, 240, 261, 268, 271, 274, 278, 280, 289, 310, 322, 326, 349, 351, 358, 362, 382, 383, 387, 389, 401, 412, 413, 414, 418, 419, 421, 422, 427, 442, 445, 446, 447, 448, 450, 452, 454, 459, 464, 465, 468, 474, 479, 484, 485, 508, 517, 520, 524, 537, 538, 539, 544, 546, 548, 549, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 593, 598, 599, 602, 604, 605, 612, 613, 630, 633, 634, 637, 638, 639, 640, 642, 646, 647, 650, 654, 663, 664, 676, 704, 708, 723, 725, 733, 787, 791, 792, 798, 800, 803, 804, 806, 807, 816, 817, 821, 827, 834, 838, 839, 846, 847, 848, 849, 854, 855, 856, 857, 858, 863, 864, 869, 870, 871, 878, 881, 884, 885, 886, 887, 889, 896, 903, 906, 907, 913, 914, 915, 916, 917, 932, 943, 969, 975, 988, 990, 994, 995, 997, 998, 1000, 1004, 1008, 1009, 1010, 1027, 1028, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "box": [45, 51, 69, 93, 196, 197, 244, 297, 320, 324, 394, 419, 421, 517, 560, 561, 882, 894, 918, 920, 994, 995, 1001, 1004, 1010, 1013, 1019, 1043, 1051], "seem": [45, 50, 54, 84, 93, 155, 158, 196, 223, 247, 250, 281, 297, 316, 324, 357, 361, 362, 386, 387, 392, 418, 506, 990, 994], "regim": [45, 401, 906, 907, 993], "overal": [45, 81, 86, 142, 145, 148, 153, 163, 184, 241, 277, 300, 325, 326, 362, 374, 386, 387, 393, 412, 413, 421, 452, 454, 469, 476, 477, 483, 554, 887, 991, 994, 1010, 1018, 1045], "closer": [45, 75, 131, 133, 162, 177, 179, 196, 202, 227, 353, 363, 413, 414, 419, 454, 558, 633, 717, 848, 849, 854, 856, 857, 858, 1009, 1042], "slightli": [45, 65, 67, 102, 118, 145, 148, 152, 155, 159, 163, 177, 179, 180, 181, 197, 202, 223, 241, 246, 248, 257, 260, 288, 300, 329, 346, 363, 386, 387, 399, 413, 414, 421, 422, 424, 426, 451, 593, 594, 596, 643, 663, 806, 807, 906, 908, 911, 942, 943, 983, 990, 1004, 1008, 1009, 1044, 1048, 1049, 1051], "cost": [45, 77, 131, 148, 158, 179, 192, 200, 243, 255, 282, 289, 329, 349, 362, 363, 364, 369, 387, 393, 395, 399, 414, 421, 483, 505, 542, 543, 544, 551, 562, 563, 564, 565, 569, 570, 607, 615, 624, 632, 651, 652, 657, 658, 665, 666, 667, 668, 673, 677, 679, 681, 683, 692, 693, 697, 832, 906, 907, 908, 911, 914, 915, 916, 917, 943, 986, 990, 991, 994, 997, 1007, 1008, 1009, 1015, 1016, 1030, 1041, 1044, 1045], "durat": [45, 49, 223, 241, 260, 302, 363, 375, 960, 961, 990], "hidden": [45, 196, 317, 318, 387, 395, 412, 419, 862, 863, 864, 998, 999, 1013, 1035, 1046], "cyclic": [45, 651, 652, 657, 658, 665, 666, 667, 668, 1047], "finer": [45, 54, 75, 302, 349, 375, 414, 418, 983, 997, 1045], "resolut": [45, 52, 58, 137, 196, 312, 313, 349, 402, 413, 1019, 1045], "everi": [45, 128, 158, 190, 221, 224, 244, 256, 267, 272, 289, 332, 336, 370, 382, 385, 387, 389, 391, 395, 401, 414, 416, 418, 419, 422, 445, 459, 513, 536, 541, 544, 550, 562, 564, 565, 566, 567, 569, 595, 596, 608, 651, 652, 654, 657, 658, 664, 665, 666, 667, 668, 669, 670, 671, 673, 677, 678, 679, 680, 681, 690, 691, 692, 697, 701, 758, 775, 783, 784, 816, 855, 914, 916, 918, 920, 932, 987, 989, 994, 995, 996, 1004, 1010, 1018, 1023, 1035, 1039, 1041, 1044, 1048, 1052], "offer": [45, 148, 389, 395, 399, 400, 401, 405, 418, 419, 421, 422, 983, 984, 995, 998, 1010, 1013, 1014, 1018, 1041], "view": [45, 57, 80, 84, 114, 130, 158, 196, 220, 262, 374, 376, 387, 414, 422, 541, 650, 662, 846, 847, 921, 990, 991], "achiev": [45, 53, 58, 60, 67, 70, 131, 142, 151, 153, 158, 161, 187, 200, 223, 231, 277, 280, 287, 325, 341, 349, 352, 353, 357, 361, 370, 374, 376, 381, 382, 384, 389, 393, 399, 401, 412, 413, 414, 418, 419, 421, 422, 558, 563, 570, 645, 654, 681, 683, 712, 733, 734, 742, 744, 767, 787, 788, 791, 806, 807, 842, 886, 983, 984, 986, 990, 994, 1004, 1007, 1009, 1028, 1048], "param_grid": [45, 47, 108, 109, 110, 111, 148, 155, 256, 262, 271, 278, 279, 280, 284, 285, 288, 291, 297, 302, 322, 336, 349, 401, 406, 415, 421, 746, 803, 806, 814, 815, 962, 983, 994, 1023, 1024], "scriptsecond": [45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374, 382, 389, 391, 393, 401, 412, 414, 418, 419, 421, 422, 424, 469, 472, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 509, 515, 558, 588, 593, 594, 595, 596, 626, 629, 636, 637, 704, 717, 721, 762, 763, 767, 768, 770, 771, 778, 779, 780, 781, 782, 785, 803, 806, 807, 817, 830, 836, 837, 840, 843, 854, 856, 857, 858, 863, 864, 983, 984, 988, 989, 990, 991, 994, 995, 996, 997, 998, 1001, 1004, 1005, 1010, 1019, 1025, 1027, 1050], "jupyt": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 388, 389, 415, 473, 904, 1010, 1013, 1014, 1046, 1049], "plot_cyclical_feature_engin": [45, 1015], "ipynb": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369], "py": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 375, 385, 387, 388, 391, 393, 395, 401, 405, 422, 425, 445, 449, 459, 466, 503, 535, 649, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 881, 885, 938, 994, 1013, 1015, 1026, 1028, 1035, 1037, 1041, 1045, 1049], "interpol": [45, 55, 71, 78, 88, 89, 92, 96, 118, 123, 128, 131, 183, 186, 192, 201, 202, 214, 239, 253, 259, 289, 294, 304, 305, 312, 318, 339, 349, 355, 424, 640, 650, 658, 668, 677, 689, 705, 712, 849, 857, 867, 881, 885, 985, 990, 994, 1004, 1015, 1042, 1047], "galleri": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 382, 387, 389, 401, 405, 408, 1015, 1024, 1035, 1039, 1042], "sphinx": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 375, 387, 391, 401, 405, 408, 1028, 1035, 1042], "short": [46, 124, 152, 159, 214, 278, 317, 361, 387, 395, 418, 422, 426, 990, 991, 997, 1017, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "exact": [46, 48, 118, 133, 148, 184, 227, 255, 300, 336, 370, 374, 375, 381, 387, 389, 396, 399, 400, 401, 414, 421, 423, 439, 487, 488, 489, 493, 501, 539, 540, 546, 566, 567, 643, 647, 651, 697, 803, 817, 827, 828, 829, 908, 911, 983, 986, 990, 991, 1000, 1004, 1008, 1009, 1042, 1043, 1045], "usp": 46, "reproduc": [46, 53, 98, 142, 195, 200, 211, 289, 297, 318, 375, 386, 387, 389, 390, 395, 399, 401, 409, 414, 418, 419, 422, 426, 445, 459, 465, 474, 479, 493, 496, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 564, 565, 566, 567, 568, 612, 613, 615, 616, 639, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 665, 666, 667, 668, 671, 672, 673, 676, 681, 683, 684, 694, 695, 697, 698, 699, 797, 801, 802, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 830, 831, 832, 836, 837, 840, 851, 855, 862, 863, 864, 871, 883, 887, 895, 898, 899, 906, 907, 908, 911, 942, 943, 965, 968, 986, 1013, 1017, 1035, 1043, 1048, 1049], "sect": 46, "bak\u0131r": [46, 419, 540], "g\u00f6khan": [46, 419, 540], "h": [46, 47, 86, 96, 128, 129, 142, 143, 161, 177, 181, 195, 268, 305, 308, 315, 322, 333, 343, 345, 363, 384, 393, 413, 414, 416, 419, 420, 421, 422, 425, 449, 524, 537, 540, 543, 545, 552, 558, 572, 573, 587, 595, 612, 613, 694, 698, 709, 713, 761, 841, 845, 846, 847, 852, 862, 877, 886, 986, 988, 990, 991, 992, 994, 996, 998, 999, 1008, 1010, 1024, 1041, 1046, 1050, 1051, 1052], "jason": [46, 419, 540, 902, 1041, 1043, 1047, 1050], "weston": [46, 419, 540, 598, 599, 902], "bernhard": [46, 419, 540, 837, 872, 902, 995, 1000, 1009, 1041], "sch\u00f6lkopf": [46, 419, 540, 872, 1000, 1004, 1009], "pre": [46, 108, 195, 212, 320, 363, 385, 387, 401, 405, 416, 418, 419, 421, 422, 423, 425, 426, 448, 449, 452, 464, 538, 540, 695, 717, 767, 869, 911, 994, 999, 1004, 1009, 1010, 1013, 1014, 1030, 1038, 1043, 1049, 1053], "advanc": [46, 160, 192, 196, 249, 251, 280, 299, 376, 390, 414, 419, 494, 506, 540, 637, 644, 787, 801, 855, 864, 867, 886, 915, 986, 994, 997, 1004, 1015, 1018, 1032, 1037], "system": [46, 133, 207, 280, 287, 370, 374, 375, 376, 382, 384, 387, 388, 389, 390, 395, 399, 405, 414, 419, 421, 425, 449, 476, 477, 483, 540, 544, 548, 555, 644, 650, 655, 656, 659, 660, 661, 687, 688, 730, 760, 773, 801, 855, 901, 902, 962, 990, 994, 997, 1006, 1013, 1014, 1018, 1028, 1035, 1043, 1044], "2004": [46, 177, 280, 297, 382, 384, 414, 416, 419, 478, 540, 612, 613, 694, 698, 710, 747, 787, 902, 988, 990, 991, 996, 1009, 1026], "449": [46, 287, 365, 419, 540, 1015], "456": [46, 419, 540], "author": [46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 71, 75, 77, 78, 80, 84, 85, 86, 90, 91, 92, 94, 95, 99, 103, 104, 105, 107, 108, 109, 111, 112, 118, 128, 130, 132, 133, 135, 138, 140, 143, 144, 145, 146, 147, 148, 154, 156, 157, 158, 162, 163, 177, 179, 180, 182, 183, 184, 185, 186, 188, 191, 200, 202, 203, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 223, 224, 225, 227, 228, 230, 231, 238, 239, 240, 241, 243, 244, 245, 246, 248, 250, 253, 255, 256, 258, 260, 266, 268, 269, 279, 281, 283, 284, 286, 293, 299, 300, 302, 305, 312, 313, 315, 318, 320, 321, 323, 324, 325, 338, 339, 340, 341, 343, 357, 361, 362, 363, 381, 387, 391, 395, 399, 401, 402, 418, 456, 539, 873, 986, 1013, 1038], "fr": [46, 48, 49, 50, 51, 64, 65, 69, 75, 80, 92, 95, 112, 118, 148, 158, 185, 202, 207, 208, 210, 214, 216, 217, 228, 244, 245, 250, 253, 260, 281, 283, 286, 293, 312, 325, 357, 361, 362, 363, 536, 542, 663, 669, 690, 691, 762, 763, 992, 994], "licenc": [46, 381], "bsd": [46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 77, 78, 80, 83, 84, 85, 86, 89, 90, 91, 92, 95, 99, 103, 104, 105, 107, 108, 110, 111, 112, 118, 123, 124, 128, 130, 132, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 153, 154, 156, 157, 158, 162, 163, 177, 179, 180, 182, 183, 184, 185, 186, 188, 191, 200, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 228, 230, 231, 239, 240, 241, 244, 245, 246, 248, 250, 253, 255, 256, 258, 260, 266, 268, 281, 284, 286, 293, 299, 300, 302, 308, 309, 310, 312, 313, 315, 318, 320, 321, 322, 323, 324, 325, 338, 339, 340, 341, 343, 353, 354, 357, 358, 361, 362, 363, 393], "claus": [46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 65, 67, 69, 70, 71, 75, 77, 78, 80, 83, 84, 85, 86, 89, 90, 91, 92, 95, 99, 103, 104, 105, 107, 108, 110, 111, 112, 118, 123, 124, 128, 130, 132, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 153, 154, 156, 157, 158, 162, 163, 177, 179, 180, 182, 183, 184, 185, 186, 188, 191, 200, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 228, 230, 231, 239, 240, 241, 244, 245, 250, 255, 256, 258, 260, 266, 268, 281, 286, 293, 299, 300, 302, 308, 309, 310, 312, 313, 315, 320, 321, 322, 323, 324, 325, 353, 354, 357, 358, 361, 362, 363], "data_id": [46, 152, 184, 195, 223, 241, 251, 297, 326, 381, 501], "41082": 46, "return_x_i": [46, 48, 56, 96, 107, 108, 109, 110, 128, 148, 152, 166, 168, 169, 173, 190, 191, 197, 198, 200, 208, 210, 211, 212, 214, 219, 220, 230, 238, 239, 251, 259, 260, 263, 264, 276, 279, 282, 287, 288, 295, 297, 299, 302, 309, 316, 317, 318, 325, 329, 331, 333, 334, 335, 336, 341, 352, 363, 365, 380, 392, 393, 400, 409, 414, 415, 418, 421, 423, 426, 434, 451, 493, 494, 495, 496, 497, 499, 500, 501, 502, 505, 506, 507, 509, 510, 515, 537, 538, 539, 540, 563, 566, 567, 572, 573, 597, 600, 601, 603, 604, 605, 606, 607, 615, 624, 625, 627, 628, 643, 644, 663, 664, 673, 678, 679, 680, 693, 694, 695, 696, 698, 700, 706, 716, 792, 806, 807, 809, 834, 839, 850, 855, 858, 915, 916, 917, 984, 989, 994, 995, 996, 997, 1004, 1019, 1023, 1024, 1026, 1027, 1032, 1041, 1043, 1045, 1048], "idea": [46, 91, 116, 117, 148, 177, 184, 195, 224, 243, 305, 349, 365, 374, 375, 387, 392, 393, 416, 417, 418, 419, 420, 421, 423, 612, 613, 990, 991, 994, 997, 1000, 1012, 1018, 1028], "noisi": [46, 72, 87, 93, 100, 129, 142, 173, 179, 185, 207, 222, 225, 246, 253, 272, 281, 287, 289, 290, 325, 367, 368, 370, 414, 422, 424, 425, 449, 451, 455, 526, 529, 943, 989, 991, 997, 1009, 1013], "nois": [46, 51, 55, 61, 62, 67, 70, 72, 78, 82, 87, 90, 92, 93, 99, 100, 105, 112, 121, 128, 129, 131, 133, 135, 143, 145, 155, 160, 161, 178, 179, 180, 184, 188, 192, 202, 204, 205, 207, 212, 213, 218, 221, 222, 225, 226, 227, 228, 240, 246, 248, 250, 252, 253, 256, 280, 288, 293, 294, 312, 315, 316, 322, 327, 330, 336, 356, 367, 368, 370, 383, 389, 392, 413, 414, 419, 421, 423, 424, 425, 449, 451, 457, 516, 518, 519, 520, 521, 522, 523, 527, 529, 530, 535, 537, 539, 546, 611, 612, 613, 614, 616, 618, 619, 620, 621, 622, 626, 627, 629, 630, 649, 650, 654, 655, 656, 658, 659, 660, 661, 668, 669, 670, 676, 684, 690, 691, 697, 883, 895, 901, 987, 989, 990, 991, 994, 997, 1007, 1015, 1026, 1027, 1036, 1041, 1046, 1048, 1049], "approach": [46, 49, 96, 101, 104, 132, 177, 179, 190, 195, 198, 205, 211, 223, 225, 231, 241, 243, 297, 326, 353, 361, 362, 363, 376, 386, 387, 393, 396, 401, 405, 409, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 442, 448, 451, 453, 457, 467, 525, 537, 587, 594, 616, 640, 663, 664, 679, 680, 835, 851, 943, 983, 984, 990, 991, 994, 995, 997, 998, 1004, 1008, 1009, 1012, 1013, 1018, 1021, 1026, 1027, 1039, 1051], "copi": [46, 53, 54, 58, 82, 100, 112, 131, 145, 158, 177, 190, 191, 195, 196, 197, 209, 216, 229, 239, 241, 244, 300, 338, 339, 341, 343, 362, 366, 375, 384, 385, 387, 389, 391, 392, 393, 399, 401, 439, 442, 445, 447, 448, 449, 451, 452, 454, 459, 464, 487, 488, 489, 490, 505, 507, 515, 537, 538, 539, 540, 546, 553, 558, 559, 564, 566, 567, 577, 595, 602, 612, 613, 615, 616, 633, 635, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 676, 677, 679, 684, 686, 689, 690, 691, 736, 773, 796, 803, 817, 846, 847, 861, 869, 872, 875, 876, 877, 878, 882, 883, 884, 886, 889, 891, 892, 893, 894, 895, 896, 897, 901, 902, 906, 908, 909, 910, 911, 912, 921, 924, 926, 927, 953, 965, 967, 968, 1004, 1009, 1010, 1014, 1020, 1023, 1028, 1035, 1038, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "add": [46, 53, 57, 58, 61, 65, 66, 67, 71, 72, 78, 82, 92, 112, 116, 117, 121, 129, 151, 154, 173, 177, 179, 184, 185, 186, 190, 191, 205, 212, 218, 224, 226, 227, 238, 246, 250, 254, 256, 257, 287, 289, 290, 300, 312, 322, 324, 329, 331, 332, 352, 353, 356, 357, 362, 374, 385, 386, 387, 388, 389, 391, 393, 395, 401, 405, 411, 413, 418, 421, 422, 423, 520, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 607, 632, 633, 635, 637, 663, 664, 699, 702, 824, 846, 847, 903, 933, 951, 952, 962, 983, 984, 993, 1000, 1004, 1007, 1008, 1014, 1026, 1027, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "corrupt": [46, 135, 207, 229, 240, 399, 862, 990, 1002], "uncorrupt": 46, "x_train": [46, 47, 48, 49, 51, 54, 64, 65, 66, 67, 70, 71, 107, 108, 112, 114, 120, 121, 133, 142, 145, 149, 153, 154, 155, 156, 157, 158, 159, 162, 169, 170, 173, 174, 185, 186, 187, 188, 194, 195, 196, 197, 198, 200, 203, 207, 218, 220, 221, 224, 230, 231, 237, 238, 239, 241, 251, 259, 263, 264, 268, 270, 274, 277, 278, 283, 287, 289, 293, 299, 303, 306, 308, 309, 315, 317, 318, 322, 324, 325, 327, 329, 330, 331, 336, 341, 342, 348, 361, 365, 369, 370, 374, 381, 389, 392, 400, 415, 418, 421, 442, 443, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 832, 834, 837, 855, 863, 864, 866, 880, 916, 917, 984, 994, 996, 997, 998, 1000, 1002, 1004, 1008, 1009, 1023, 1024, 1032], "x_test": [46, 47, 48, 49, 51, 54, 64, 65, 66, 67, 70, 71, 107, 108, 112, 114, 120, 121, 133, 142, 145, 147, 149, 154, 155, 156, 157, 158, 159, 162, 169, 170, 173, 174, 184, 187, 194, 195, 196, 197, 198, 200, 203, 207, 213, 218, 220, 221, 229, 230, 231, 237, 238, 239, 241, 251, 253, 259, 263, 264, 268, 274, 277, 278, 283, 287, 289, 293, 294, 299, 303, 306, 308, 309, 315, 317, 318, 322, 324, 325, 327, 329, 330, 331, 336, 341, 342, 348, 361, 365, 367, 368, 369, 370, 374, 381, 389, 392, 400, 415, 418, 421, 443, 475, 476, 477, 478, 479, 480, 481, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 832, 834, 837, 855, 863, 864, 866, 880, 916, 917, 984, 994, 996, 997, 998, 1000, 1004, 1008, 1009, 1010, 1023, 1024, 1026, 1032, 1035], "y_train": [46, 47, 48, 49, 51, 54, 64, 65, 66, 67, 70, 71, 107, 108, 112, 120, 121, 133, 142, 145, 149, 153, 154, 155, 156, 157, 158, 159, 162, 169, 170, 173, 174, 185, 186, 187, 188, 194, 195, 196, 197, 198, 200, 203, 207, 218, 220, 221, 224, 230, 231, 238, 239, 251, 259, 263, 264, 268, 274, 277, 278, 283, 287, 289, 293, 299, 303, 308, 309, 315, 317, 318, 322, 325, 327, 329, 330, 331, 336, 338, 339, 341, 342, 343, 361, 365, 369, 370, 374, 381, 389, 392, 400, 415, 418, 421, 442, 443, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 832, 834, 837, 855, 863, 864, 866, 916, 917, 984, 994, 996, 997, 1002, 1004, 1009, 1023, 1024, 1032], "y_test": [46, 47, 48, 49, 51, 54, 64, 65, 66, 67, 70, 71, 107, 108, 112, 120, 121, 133, 142, 145, 147, 149, 154, 155, 156, 157, 158, 159, 162, 169, 170, 173, 174, 187, 194, 195, 196, 197, 198, 200, 207, 218, 220, 223, 229, 230, 231, 238, 239, 241, 251, 259, 263, 264, 268, 274, 277, 278, 283, 287, 289, 293, 299, 303, 308, 309, 315, 317, 318, 322, 325, 327, 329, 330, 331, 336, 341, 342, 361, 365, 369, 370, 381, 392, 400, 415, 418, 421, 443, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 832, 834, 837, 855, 863, 864, 866, 916, 917, 994, 996, 997, 1004, 1009, 1023, 1024, 1032, 1035], "train_siz": [46, 48, 51, 142, 162, 180, 200, 239, 256, 260, 282, 293, 331, 334, 357, 805, 809, 820, 823, 830, 832, 989, 1023, 1035, 1036, 1041, 1042], "1_000": [46, 67, 73, 86, 109, 133, 158, 179, 184, 186, 196, 254, 277, 357, 542, 544, 706, 825, 833], "rng": [46, 61, 62, 70, 73, 75, 82, 88, 100, 117, 121, 128, 130, 135, 143, 155, 158, 159, 160, 162, 179, 180, 183, 185, 186, 188, 190, 191, 194, 197, 202, 203, 204, 205, 207, 212, 217, 224, 225, 230, 237, 250, 256, 257, 259, 266, 275, 283, 286, 291, 292, 315, 324, 327, 330, 331, 333, 335, 336, 338, 339, 343, 352, 367, 368, 370, 375, 389, 392, 406, 427, 475, 479, 480, 481, 483, 484, 485, 486, 648, 654, 675, 677, 683, 692, 815, 841, 842, 843, 845, 846, 847, 851, 854, 856, 857, 858, 883, 895, 898, 899, 901, 902, 903, 912, 1019], "x_test_noisi": 46, "x_train_noisi": 46, "helper": [46, 47, 131, 241, 291, 380, 389, 390, 400, 401, 418, 473, 580, 904, 1023, 1024, 1035, 1042, 1043, 1044, 1048], "qualit": [46, 47, 91, 93, 99, 148, 155, 223, 334, 382, 414, 444, 706, 1024, 1050], "assess": [46, 54, 75, 98, 142, 153, 155, 195, 223, 241, 260, 276, 277, 279, 283, 413, 421, 706, 747, 993, 994, 1000, 1014, 1050], "plot_digit": 46, "img": [46, 88, 104, 511, 591], "imshow": [46, 47, 55, 71, 78, 84, 85, 86, 88, 89, 91, 92, 96, 118, 123, 128, 131, 138, 181, 182, 183, 187, 198, 214, 239, 244, 259, 291, 304, 318, 338, 339, 349, 355, 358, 381, 637, 702, 1024, 1025, 1049], "grei": [46, 290, 320, 357, 382], "off": [46, 53, 55, 75, 77, 78, 85, 86, 90, 91, 114, 118, 120, 128, 148, 158, 227, 244, 255, 259, 274, 279, 281, 282, 320, 339, 343, 349, 359, 361, 382, 387, 389, 401, 414, 416, 423, 447, 558, 559, 564, 565, 593, 596, 639, 661, 697, 720, 801, 802, 803, 806, 807, 817, 829, 947, 993, 999, 1009, 1014, 1035, 1039, 1040, 1042], "fontsiz": [46, 49, 51, 56, 73, 88, 98, 125, 131, 151, 172, 182, 183, 185, 188, 196, 203, 213, 222, 234, 244, 245, 269, 275, 284, 285, 286, 291, 292, 318, 324, 356, 920], "mse": [46, 48, 114, 115, 153, 155, 156, 190, 191, 223, 225, 227, 229, 294, 336, 652, 658, 754, 994, 1010, 1046, 1048], "nmse": [46, 294], "2f": [46, 49, 52, 54, 60, 70, 77, 80, 82, 84, 88, 90, 100, 102, 105, 120, 126, 131, 137, 155, 158, 162, 163, 172, 195, 196, 200, 203, 212, 214, 219, 223, 238, 239, 240, 241, 250, 254, 260, 279, 283, 284, 286, 288, 289, 290, 308, 309, 315, 322, 325, 333, 349, 361, 362, 370, 415, 418, 421, 701, 830, 833], "kernel_pca": [46, 133, 415], "400": [46, 66, 88, 128, 157, 162, 179, 191, 229, 248, 292, 316, 362, 382, 419, 500, 1028], "1e": [46, 47, 48, 51, 58, 66, 84, 128, 177, 179, 182, 184, 185, 186, 187, 188, 190, 195, 203, 216, 223, 224, 230, 237, 241, 246, 250, 256, 261, 266, 269, 272, 278, 288, 291, 317, 327, 332, 335, 342, 347, 349, 357, 361, 393, 426, 448, 452, 457, 464, 467, 476, 477, 483, 487, 488, 489, 536, 537, 538, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 564, 565, 566, 567, 597, 602, 611, 613, 614, 616, 618, 619, 620, 624, 625, 627, 628, 630, 632, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 694, 695, 696, 697, 698, 699, 700, 732, 745, 789, 801, 802, 817, 841, 842, 843, 844, 845, 846, 847, 855, 863, 864, 871, 901, 902, 906, 907, 908, 909, 910, 911, 912, 980, 983, 994, 998, 1002, 1004, 1008, 1024, 1028, 1043, 1048, 1049, 1050], "fit_inverse_transform": [46, 133, 540, 1044], "5e": [46, 128, 208, 600, 601, 603], "inde": [46, 48, 65, 67, 73, 77, 78, 91, 93, 96, 118, 121, 133, 142, 145, 158, 176, 177, 179, 195, 197, 202, 207, 211, 212, 223, 225, 282, 283, 287, 289, 297, 300, 320, 325, 357, 362, 370, 374, 386, 392, 400, 401, 402, 414, 416, 421, 572, 573, 990, 1004, 1008, 1049], "think": [46, 75, 196, 361, 362, 387, 420, 993, 1014, 1018, 1019], "x_reconstructed_kernel_pca": [46, 133], "inverse_transform": [46, 89, 92, 133, 174, 257, 304, 362, 406, 419, 422, 450, 470, 487, 488, 489, 538, 539, 540, 543, 544, 545, 546, 548, 549, 586, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 635, 803, 806, 807, 817, 866, 870, 871, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 886, 898, 899, 1004, 1005, 1006, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "x_reconstructed_pca": [46, 133], "favor": [46, 118, 148, 266, 272, 399, 416, 421, 638, 734, 811, 813, 865, 983, 1002, 1037, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "background": [46, 52, 85, 104, 159, 318, 322, 382, 385, 387, 395, 414, 498, 499, 991, 999, 1008, 1045], "504": [46, 1015], "plot_digits_denois": [46, 1015], "hand": [46, 68, 89, 91, 121, 123, 130, 131, 133, 148, 155, 172, 175, 184, 192, 195, 196, 216, 227, 230, 247, 253, 254, 256, 257, 260, 274, 277, 282, 289, 304, 338, 339, 349, 374, 381, 382, 384, 387, 389, 393, 395, 400, 409, 419, 420, 421, 423, 431, 437, 507, 648, 702, 718, 792, 832, 887, 911, 983, 987, 990, 994, 996, 998, 1002, 1007, 1009, 1015, 1018, 1019, 1022, 1025, 1026], "excerpt": [47, 1006, 1024], "vi": [47, 49, 382, 704, 1024, 1043, 1046], "www": [47, 108, 200, 223, 239, 241, 251, 299, 317, 381, 382, 387, 395, 414, 418, 447, 454, 492, 513, 514, 536, 539, 542, 546, 649, 663, 669, 676, 690, 691, 855, 862, 914, 915, 990, 1007, 1024], "umass": [47, 60, 382, 1024], "edu": [47, 49, 52, 58, 84, 177, 186, 200, 205, 243, 269, 279, 297, 305, 313, 324, 361, 381, 382, 384, 414, 454, 492, 505, 507, 513, 514, 515, 539, 646, 649, 654, 663, 671, 672, 681, 684, 687, 688, 841, 843, 844, 845, 855, 862, 899, 901, 914, 915, 990, 992, 1024], "funnel": [47, 498, 499, 1024], "tgz": [47, 1024], "233mb": [47, 1024], "loguniform": [47, 179, 288, 983, 1024, 1045], "disk": [47, 55, 382, 385, 387, 392, 401, 409, 1024], "lfw_peopl": [47, 382, 499, 1024], "min_faces_per_person": [47, 382, 499, 1024], "resiz": [47, 84, 85, 261, 382, 498, 499, 1024], "n_sampl": [47, 48, 51, 56, 64, 65, 66, 67, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 86, 87, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 107, 112, 114, 115, 116, 117, 118, 121, 126, 128, 129, 133, 135, 142, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 159, 160, 169, 170, 176, 177, 188, 190, 191, 194, 202, 204, 205, 207, 209, 211, 213, 215, 217, 218, 222, 223, 224, 226, 227, 231, 235, 238, 240, 241, 243, 244, 245, 246, 247, 248, 250, 254, 255, 257, 260, 267, 269, 270, 271, 272, 277, 278, 280, 283, 284, 287, 289, 290, 291, 292, 293, 294, 300, 310, 322, 323, 324, 327, 330, 331, 333, 335, 336, 340, 347, 350, 351, 357, 361, 362, 370, 380, 384, 387, 389, 392, 396, 399, 400, 401, 406, 414, 416, 417, 418, 419, 421, 425, 426, 427, 429, 431, 432, 433, 436, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 499, 506, 509, 513, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 626, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 774, 775, 776, 777, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 931, 932, 943, 945, 947, 956, 963, 965, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 983, 986, 990, 994, 995, 997, 998, 1004, 1005, 1006, 1008, 1009, 1010, 1019, 1024, 1025, 1026, 1027, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "n_featur": [47, 49, 56, 65, 66, 67, 69, 70, 71, 72, 73, 78, 90, 96, 98, 99, 114, 115, 116, 117, 118, 125, 126, 128, 135, 142, 144, 146, 148, 149, 174, 176, 177, 190, 191, 200, 202, 205, 207, 209, 217, 218, 222, 226, 227, 238, 240, 244, 250, 254, 255, 257, 266, 271, 277, 283, 287, 289, 290, 292, 293, 310, 315, 322, 329, 330, 331, 333, 335, 336, 357, 361, 362, 363, 370, 374, 380, 381, 387, 389, 392, 399, 400, 401, 406, 414, 416, 417, 419, 421, 422, 425, 426, 427, 429, 431, 432, 433, 436, 437, 438, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 499, 506, 509, 513, 514, 517, 520, 521, 524, 526, 528, 529, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 715, 729, 762, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 943, 969, 970, 971, 972, 973, 974, 975, 976, 977, 986, 990, 995, 997, 998, 1004, 1008, 1009, 1010, 1019, 1024, 1025, 1027, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "person": [47, 283, 382, 386, 418, 422, 498, 499, 500, 1004, 1024, 1043], "target_nam": [47, 60, 69, 90, 124, 132, 136, 194, 232, 244, 268, 274, 281, 289, 290, 303, 326, 342, 361, 366, 380, 382, 493, 494, 496, 497, 498, 499, 501, 502, 505, 507, 508, 509, 510, 515, 718, 994, 1010, 1019, 1024, 1028, 1045], "1288": [47, 382], "1850": [47, 382], "scaler": [47, 108, 110, 192, 239, 240, 255, 260, 262, 264, 303, 308, 319, 324, 325, 334, 349, 352, 370, 392, 415, 418, 495, 663, 664, 677, 679, 692, 866, 875, 876, 878, 882, 883, 884, 886, 891, 892, 893, 894, 895, 896, 897, 998, 1004, 1008, 1015, 1024, 1035, 1040, 1043, 1048], "t0": [47, 49, 52, 56, 58, 77, 80, 82, 84, 86, 88, 90, 96, 100, 102, 131, 207, 209, 238, 239, 240, 245, 248, 250, 254, 256, 281, 336, 361, 362, 363, 681, 682, 683, 1024], "svd_solver": [47, 107, 128, 135, 336, 411, 419, 540, 546, 1024, 1041, 1053], "whiten": [47, 128, 129, 130, 304, 419, 426, 538, 539, 546, 884, 886, 1004, 1024, 1039, 1041, 1049, 1050], "done": [47, 49, 50, 52, 54, 56, 58, 60, 86, 88, 90, 91, 131, 158, 174, 177, 184, 195, 196, 200, 202, 207, 209, 227, 240, 256, 257, 271, 278, 281, 284, 289, 300, 323, 331, 361, 362, 363, 370, 375, 381, 385, 387, 389, 391, 394, 395, 396, 399, 401, 406, 414, 416, 418, 419, 421, 446, 447, 450, 455, 457, 477, 487, 488, 489, 490, 494, 540, 566, 567, 587, 611, 612, 613, 633, 635, 637, 639, 648, 649, 650, 664, 745, 801, 802, 803, 817, 822, 823, 870, 884, 979, 983, 984, 987, 990, 991, 994, 996, 997, 998, 1004, 1007, 1008, 1009, 1010, 1014, 1019, 1023, 1024, 1026, 1028, 1035, 1037, 1042, 1045, 1047, 1051], "components_": [47, 56, 96, 121, 128, 130, 131, 138, 254, 255, 318, 325, 333, 401, 415, 419, 449, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 549, 644, 855, 862, 898, 899, 986, 1006, 1024, 1039, 1041, 1047, 1050], "x_train_pca": [47, 1024], "x_test_pca": [47, 133, 1024], "966": 47, "070": [47, 169, 354, 1015], "007": [47, 266, 288, 300, 362], "1e3": [47, 48, 51, 179, 185, 190, 256, 291, 335, 983, 1024], "1e5": [47, 184, 204, 206, 213, 291, 618, 619, 620, 624, 625, 627, 628, 630, 895, 900, 1006, 1024, 1026], "clf": [47, 51, 52, 53, 57, 64, 65, 66, 67, 70, 71, 76, 86, 89, 92, 96, 101, 108, 134, 146, 154, 157, 159, 164, 168, 170, 173, 174, 176, 181, 183, 198, 213, 215, 216, 220, 221, 227, 230, 232, 235, 236, 237, 239, 246, 251, 252, 255, 258, 264, 270, 277, 281, 285, 286, 288, 291, 292, 303, 306, 307, 308, 311, 315, 322, 325, 329, 330, 331, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 361, 365, 366, 369, 374, 382, 400, 401, 409, 415, 418, 421, 423, 443, 554, 555, 558, 560, 562, 564, 566, 568, 569, 572, 598, 599, 602, 637, 639, 643, 644, 645, 646, 647, 649, 650, 653, 657, 663, 664, 665, 666, 667, 671, 673, 674, 677, 678, 679, 680, 681, 682, 685, 702, 703, 705, 707, 792, 803, 806, 807, 817, 834, 835, 836, 838, 841, 842, 843, 844, 845, 852, 853, 863, 906, 908, 910, 911, 914, 918, 920, 984, 986, 990, 994, 995, 997, 998, 1000, 1001, 1008, 1009, 1010, 1019, 1023, 1024, 1028], "n_iter": [47, 58, 108, 158, 179, 231, 281, 288, 300, 318, 351, 389, 393, 400, 426, 459, 483, 537, 538, 549, 550, 551, 552, 649, 650, 651, 652, 657, 658, 665, 666, 667, 668, 686, 687, 688, 689, 690, 691, 692, 697, 699, 806, 807, 815, 817, 862, 864, 942, 943, 983, 1008, 1024, 1036, 1041, 1042, 1043, 1047, 1049, 1050, 1051, 1053], "found": [47, 60, 61, 62, 138, 149, 176, 179, 183, 185, 187, 227, 258, 278, 281, 282, 283, 325, 329, 332, 334, 335, 349, 363, 374, 376, 381, 384, 386, 387, 389, 399, 401, 402, 412, 414, 417, 418, 419, 421, 422, 424, 439, 446, 449, 450, 464, 477, 562, 563, 564, 565, 569, 570, 593, 595, 615, 616, 633, 641, 652, 656, 658, 660, 666, 668, 670, 676, 677, 679, 681, 683, 692, 693, 717, 724, 803, 806, 807, 817, 843, 848, 849, 855, 877, 879, 880, 914, 915, 916, 917, 921, 923, 978, 982, 983, 986, 990, 991, 993, 995, 996, 997, 998, 1004, 1008, 1009, 1010, 1014, 1019, 1024, 1028, 1035, 1038, 1039, 1042, 1043, 1045, 1049, 1052], "best_estimator_": [47, 92, 110, 111, 114, 135, 256, 271, 281, 284, 304, 803, 806, 807, 817, 983, 1023, 1024, 1042], "173": [47, 209, 220, 393, 589, 1015], "76823": 47, "03433306456": 47, "0034189458230957995": 47, "from_estim": [47, 50, 65, 67, 69, 70, 73, 94, 144, 147, 158, 159, 160, 164, 196, 206, 215, 232, 237, 256, 261, 263, 274, 277, 282, 283, 287, 290, 295, 303, 308, 311, 325, 329, 330, 331, 332, 334, 335, 336, 345, 346, 347, 348, 350, 351, 353, 366, 394, 413, 443, 636, 637, 638, 702, 703, 705, 706, 707, 723, 731, 786, 788, 791, 792, 793, 809, 825, 989, 994, 1001, 1024, 1032, 1048, 1049, 1050, 1051, 1052, 1053], "display_label": [47, 274, 702, 1024, 1047], "xticks_rot": [47, 702, 1024], "vertic": [47, 58, 98, 154, 198, 212, 254, 255, 284, 299, 320, 323, 354, 356, 401, 412, 414, 419, 520, 702, 785, 1024], "tight_layout": [47, 49, 65, 67, 70, 78, 90, 93, 103, 110, 112, 121, 128, 129, 130, 138, 142, 144, 149, 151, 153, 156, 161, 163, 165, 181, 183, 188, 190, 194, 195, 197, 198, 202, 203, 207, 213, 221, 223, 231, 234, 238, 241, 243, 255, 260, 275, 276, 292, 299, 300, 302, 312, 321, 322, 323, 324, 325, 329, 333, 347, 362, 365, 366, 1024], "042": [47, 393], "ariel": [47, 382, 1035, 1041], "sharon": [47, 382], "69": [47, 214, 245, 325, 339, 414, 476, 477, 612, 613, 760, 994, 1004, 1026], "colin": [47, 382, 1041], "powel": [47, 382], "87": [47, 71, 107, 188, 278, 339, 602, 672, 781, 792, 803, 882, 894, 994, 1028], "donald": [47, 382, 414, 729, 984], "rumsfeld": [47, 382], "63": [47, 361, 366, 384, 421, 562, 563, 570, 571, 651, 652, 657, 665, 666, 667, 686, 704, 730, 803, 817, 916, 917, 994], "georg": [47, 382, 414, 1041, 1047, 1048, 1049, 1050], "bush": [47, 382], "95": [47, 49, 54, 56, 71, 82, 90, 95, 105, 125, 134, 151, 155, 158, 186, 195, 202, 223, 225, 230, 241, 268, 269, 272, 280, 281, 305, 313, 322, 326, 333, 339, 349, 370, 421, 532, 637, 638, 641, 652, 666, 752, 903, 990, 994, 995, 1007, 1028, 1038], "91": [47, 71, 89, 184, 318, 338, 339, 421, 989, 1024, 1028], "146": [47, 421], "gerhard": [47, 382], "schroeder": [47, 382], "hugo": [47, 382, 1041, 1046, 1047, 1048, 1049], "chavez": [47, 382], "90": [47, 51, 54, 56, 71, 111, 137, 138, 154, 155, 156, 158, 174, 184, 198, 203, 214, 220, 222, 225, 230, 241, 266, 289, 291, 322, 326, 335, 338, 339, 370, 374, 387, 393, 418, 568, 785, 803, 830, 835, 887, 989, 994, 1024, 1028, 1050, 1051], "toni": [47, 382, 568, 886, 1000, 1048, 1049], "blair": [47, 382], "93": [47, 49, 54, 71, 177, 223, 264, 278, 339, 361, 384, 651, 652, 657, 665, 666, 667, 686, 781, 792, 803, 830, 914, 989, 994, 1024, 1028], "83": [47, 49, 69, 73, 77, 338, 384, 389, 699, 712, 790, 989, 994, 1024, 1028, 1038], "322": [47, 125, 362, 476, 477, 1015], "macro": [47, 71, 107, 174, 278, 318, 329, 338, 339, 382, 418, 712, 718, 733, 734, 742, 787, 788, 791, 792, 994, 1028, 1035, 1043, 1051], "avg": [47, 71, 107, 174, 278, 318, 338, 339, 574, 709, 718, 994, 1024, 1028, 1051], "85": [47, 57, 58, 71, 88, 93, 107, 131, 174, 238, 241, 291, 318, 339, 370, 421, 444, 503, 505, 560, 561, 602, 657, 663, 749, 757, 792, 803, 830, 994, 995, 1024, 1035], "plot_galleri": [47, 128, 1024], "n_row": [47, 60, 128, 412, 429, 456, 458, 516, 518, 1024], "n_col": [47, 60, 128, 259, 429, 456, 458, 516, 518, 637, 1024], "portrait": [47, 419, 1024], "figur": [47, 48, 49, 51, 53, 55, 57, 64, 65, 66, 67, 70, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 96, 97, 99, 100, 101, 102, 103, 105, 114, 118, 120, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 143, 144, 145, 154, 155, 156, 157, 158, 161, 162, 166, 168, 170, 172, 173, 176, 180, 181, 182, 183, 186, 187, 191, 195, 196, 197, 198, 202, 207, 208, 213, 216, 217, 220, 222, 224, 225, 229, 234, 238, 239, 240, 245, 246, 247, 250, 254, 255, 256, 258, 259, 261, 266, 268, 269, 272, 274, 279, 284, 285, 294, 305, 309, 310, 313, 315, 318, 320, 322, 323, 327, 329, 331, 338, 339, 340, 347, 349, 354, 366, 367, 368, 387, 414, 420, 421, 422, 424, 443, 636, 637, 702, 703, 705, 706, 707, 809, 825, 920, 983, 987, 990, 993, 994, 997, 998, 1001, 1002, 1008, 1009, 1010, 1023, 1024, 1026, 1027, 1048], "subplots_adjust": [47, 48, 55, 56, 77, 80, 82, 83, 88, 89, 92, 100, 102, 116, 118, 125, 126, 130, 131, 137, 144, 145, 163, 195, 222, 223, 238, 241, 250, 258, 266, 268, 269, 272, 275, 291, 293, 305, 313, 315, 318, 322, 331, 339, 346, 349, 1024], "bottom": [47, 49, 53, 55, 56, 73, 75, 77, 80, 82, 83, 89, 91, 100, 102, 125, 126, 153, 161, 166, 223, 234, 250, 266, 268, 269, 272, 277, 280, 291, 305, 320, 339, 341, 349, 387, 413, 414, 420, 592, 918, 988, 990, 994, 1002, 1014, 1024, 1027], "left": [47, 48, 53, 55, 56, 57, 64, 72, 73, 77, 80, 82, 83, 89, 93, 100, 102, 109, 112, 117, 118, 125, 126, 130, 131, 142, 145, 147, 148, 149, 152, 155, 158, 163, 165, 182, 188, 191, 195, 198, 208, 216, 223, 224, 225, 227, 234, 236, 237, 240, 241, 250, 254, 258, 260, 261, 266, 268, 269, 272, 276, 277, 278, 279, 281, 289, 290, 292, 303, 305, 306, 313, 315, 318, 320, 333, 335, 336, 339, 348, 349, 353, 369, 382, 387, 389, 391, 412, 414, 417, 418, 420, 421, 422, 424, 431, 437, 451, 477, 487, 488, 489, 490, 498, 503, 554, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 592, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 640, 644, 648, 656, 660, 801, 802, 803, 806, 807, 810, 817, 879, 886, 914, 915, 916, 917, 918, 930, 943, 965, 968, 983, 986, 988, 990, 992, 994, 996, 1001, 1006, 1008, 1010, 1023, 1024, 1026, 1027, 1042, 1044, 1049], "01": [47, 49, 51, 54, 55, 57, 78, 82, 89, 100, 120, 128, 130, 131, 145, 154, 156, 158, 160, 161, 177, 184, 188, 195, 196, 204, 207, 214, 230, 235, 236, 241, 243, 244, 250, 254, 255, 256, 260, 261, 268, 272, 274, 279, 280, 281, 285, 287, 288, 289, 305, 316, 318, 320, 330, 336, 351, 362, 367, 368, 382, 384, 392, 414, 423, 454, 476, 520, 526, 537, 544, 548, 550, 600, 601, 603, 610, 647, 651, 659, 663, 683, 701, 720, 803, 817, 900, 963, 990, 994, 998, 1004, 1006, 1008, 1015, 1024, 1028], "right": [47, 48, 52, 53, 55, 56, 57, 70, 73, 77, 80, 81, 82, 83, 89, 91, 98, 100, 102, 115, 116, 118, 124, 125, 126, 130, 131, 133, 135, 137, 142, 144, 145, 146, 155, 156, 157, 158, 165, 173, 179, 182, 191, 198, 213, 224, 225, 226, 227, 229, 230, 233, 234, 250, 253, 254, 257, 266, 268, 269, 271, 272, 275, 276, 280, 283, 287, 290, 291, 293, 305, 313, 315, 318, 320, 322, 325, 335, 336, 339, 349, 351, 353, 357, 359, 361, 366, 369, 370, 387, 399, 402, 412, 414, 417, 419, 420, 421, 424, 469, 487, 488, 489, 490, 539, 546, 549, 562, 563, 564, 565, 566, 567, 569, 570, 571, 592, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 640, 681, 683, 871, 914, 915, 916, 917, 918, 930, 943, 983, 986, 988, 990, 992, 994, 996, 997, 1001, 1006, 1008, 1009, 1010, 1013, 1014, 1018, 1020, 1024, 1026, 1027, 1037, 1043, 1049, 1051, 1052], "99": [47, 54, 65, 71, 82, 89, 100, 128, 241, 250, 254, 260, 266, 268, 278, 281, 320, 339, 375, 380, 384, 391, 418, 421, 422, 497, 652, 666, 676, 687, 688, 792, 853, 963, 989, 994, 1004, 1008, 1024, 1030, 1037], "hspace": [47, 55, 56, 82, 83, 100, 128, 241, 250, 266, 268, 269, 272, 305, 331, 339, 346, 1024], "grai": [47, 55, 84, 85, 88, 89, 91, 128, 131, 157, 177, 221, 223, 241, 254, 258, 259, 287, 317, 384, 419, 498, 499, 507, 526, 1024, 1027, 1046], "ytick": [47, 52, 69, 73, 78, 82, 84, 88, 89, 90, 96, 97, 100, 118, 120, 131, 156, 173, 181, 182, 183, 187, 206, 213, 219, 236, 250, 258, 267, 268, 269, 272, 275, 294, 304, 313, 318, 338, 349, 354, 355, 361, 1023, 1024], "portion": [47, 49, 117, 153, 177, 289, 374, 382, 384, 387, 393, 401, 792, 827, 844, 983, 993, 997, 1024, 1028], "pred_nam": [47, 1024], "rsplit": [47, 58, 281, 1024], "true_nam": [47, 1024], "ntrue": [47, 338, 339, 1024], "prediction_titl": [47, 1024], "signif": [47, 986, 1024], "eigenface_titl": [47, 1024], "convolut": [47, 187, 1024], "outsid": [47, 50, 60, 151, 224, 225, 253, 264, 422, 451, 640, 885, 1000, 1024, 1043], "scope": [47, 60, 374, 376, 387, 399, 422, 1013, 1014, 1024], "librari": [47, 280, 332, 334, 367, 370, 379, 381, 382, 385, 386, 387, 388, 393, 399, 400, 401, 405, 411, 663, 906, 907, 908, 909, 911, 912, 962, 990, 994, 1009, 1010, 1013, 1014, 1018, 1024, 1028, 1033, 1038, 1042, 1043, 1044, 1045, 1046, 1048, 1052], "reader": [47, 80, 332, 376, 387, 1024], "pytorch": [47, 399, 1013, 1014, 1024, 1051, 1052], "tensorflow": [47, 399, 1013, 1024], "865": [47, 1015], "plot_face_recognit": [47, 1015], "quantiz": [47, 74, 84, 96, 131, 192, 381, 382, 414, 448, 452, 454, 511, 783, 871, 968, 1004, 1015], "demonstr": [48, 54, 60, 61, 62, 65, 71, 74, 78, 81, 93, 99, 107, 109, 142, 146, 153, 156, 174, 187, 188, 192, 198, 224, 225, 257, 263, 264, 268, 272, 273, 276, 283, 286, 289, 294, 302, 305, 312, 319, 321, 322, 324, 327, 331, 337, 339, 340, 343, 347, 353, 361, 362, 363, 370, 376, 382, 383, 387, 392, 399, 406, 411, 414, 418, 421, 452, 507, 517, 525, 702, 708, 718, 746, 802, 803, 871, 902, 914, 983, 984, 988, 994, 995, 996, 997, 1004, 1007, 1010, 1012, 1015], "patient": [48, 166, 177, 191, 384, 395, 418, 990, 1026], "diseas": [48, 166, 177, 191, 283, 384, 717, 994, 1026], "post": [48, 56, 60, 107, 192, 333, 361, 362, 363, 364, 369, 374, 382, 386, 387, 391, 392, 400, 414, 453, 493, 494, 505, 717, 832, 914, 994, 1010, 1015, 1017, 1018, 1028, 1046], "forward": [48, 142, 177, 257, 331, 374, 387, 406, 423, 513, 514, 544, 548, 558, 564, 565, 607, 673, 690, 691, 866, 870, 990, 1014, 1047], "notic": [48, 54, 65, 66, 73, 91, 95, 116, 145, 147, 148, 155, 158, 176, 202, 207, 250, 263, 277, 278, 280, 281, 283, 289, 290, 300, 325, 353, 361, 362, 363, 370, 392, 402, 418, 501, 568, 983, 993, 994, 1000, 1028, 1032, 1048], "10_000": [48, 65, 112, 147, 155, 194, 200, 254, 283, 300, 564, 565, 569, 570, 883], "vari": [48, 54, 67, 70, 73, 82, 84, 93, 100, 103, 112, 148, 149, 151, 161, 170, 176, 181, 192, 195, 196, 212, 214, 217, 221, 230, 248, 255, 260, 271, 276, 280, 283, 314, 320, 322, 323, 325, 335, 337, 343, 349, 352, 354, 359, 370, 374, 376, 382, 401, 446, 450, 451, 505, 513, 519, 520, 527, 564, 565, 569, 570, 651, 652, 655, 656, 657, 658, 659, 660, 665, 666, 667, 668, 686, 689, 708, 767, 822, 825, 830, 832, 833, 863, 867, 871, 886, 903, 911, 914, 915, 968, 986, 989, 990, 994, 997, 998, 1007, 1010, 1015, 1018, 1042, 1043, 1051], "relev": [48, 50, 60, 113, 117, 175, 177, 192, 202, 217, 226, 280, 281, 287, 370, 374, 376, 382, 384, 386, 387, 389, 391, 392, 393, 401, 402, 406, 416, 417, 423, 424, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 599, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 730, 744, 760, 804, 805, 806, 807, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 884, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 994, 995, 1000, 1011, 1014, 1015, 1038, 1043, 1049], "next": [48, 65, 98, 116, 151, 152, 156, 166, 186, 194, 198, 216, 220, 223, 251, 259, 263, 264, 268, 275, 286, 299, 325, 326, 327, 331, 339, 361, 365, 369, 370, 385, 387, 389, 391, 412, 414, 415, 418, 421, 513, 514, 615, 639, 697, 703, 705, 707, 785, 801, 802, 832, 960, 983, 987, 993, 994, 1004, 1018, 1032, 1035, 1048, 1049], "eustach": [48, 49, 51, 1018, 1037, 1038], "diemert": [48, 49, 51, 1018, 1037, 1038], "maria": [48, 156, 163, 177, 191, 414, 1046, 1047, 1048, 1049, 1050], "telenczuk": [48, 156, 163, 177, 191, 1044, 1047, 1048, 1050], "github": [48, 49, 53, 66, 108, 109, 147, 149, 150, 156, 159, 160, 163, 166, 174, 184, 191, 195, 196, 197, 204, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 300, 318, 326, 330, 331, 333, 334, 336, 340, 369, 385, 386, 390, 391, 392, 393, 395, 399, 401, 402, 409, 411, 697, 1012, 1013, 1017, 1028, 1045], "com": [48, 49, 52, 53, 56, 57, 61, 62, 64, 80, 86, 88, 95, 103, 107, 108, 140, 142, 143, 144, 145, 146, 147, 154, 156, 157, 162, 163, 179, 182, 184, 186, 188, 191, 203, 223, 225, 230, 240, 241, 244, 246, 248, 253, 266, 268, 269, 281, 284, 300, 320, 321, 324, 325, 361, 362, 382, 385, 387, 391, 392, 393, 395, 399, 414, 447, 539, 546, 676, 710, 1042, 1045], "maikia": [48, 156, 163, 191, 1043, 1044, 1046, 1047], "lemaitre58": [48, 163, 179, 184, 186, 188, 244, 320], "gmail": [48, 52, 56, 57, 64, 80, 86, 95, 103, 107, 108, 140, 142, 143, 144, 145, 146, 147, 154, 156, 157, 162, 163, 179, 182, 184, 186, 188, 203, 223, 225, 240, 241, 244, 246, 253, 266, 268, 269, 281, 284, 320, 325, 361, 362], "licens": [48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 77, 78, 80, 83, 84, 85, 86, 89, 90, 91, 92, 95, 99, 103, 104, 105, 107, 108, 110, 111, 112, 118, 123, 124, 128, 130, 132, 133, 134, 135, 138, 140, 142, 143, 144, 145, 146, 147, 148, 153, 154, 156, 157, 158, 162, 163, 177, 179, 180, 182, 183, 184, 185, 186, 188, 191, 200, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 228, 230, 231, 239, 240, 241, 244, 245, 246, 248, 250, 253, 255, 256, 258, 260, 266, 268, 281, 284, 286, 293, 299, 300, 302, 308, 309, 310, 312, 313, 315, 318, 320, 321, 322, 323, 324, 325, 338, 339, 340, 341, 343, 353, 354, 357, 358, 361, 362, 363, 381, 401, 409, 1010, 1018], "generate_data": [48, 72], "elif": [48, 49, 57, 203, 225, 258, 268, 305, 882], "regression_data": 48, "classification_data": 48, "round": [48, 50, 65, 120, 148, 158, 190, 191, 230, 241, 280, 286, 322, 324, 361, 401, 455, 461, 462, 569, 570, 598, 599, 602, 632, 697, 718, 805, 815, 871, 903, 918, 920, 984, 998, 1010, 1037, 1039, 1041, 1043, 1044, 1046, 1048, 1049, 1051, 1052], "changing_param": 48, "affect": [48, 65, 116, 158, 186, 194, 195, 227, 247, 260, 261, 283, 290, 325, 335, 370, 374, 375, 376, 383, 401, 404, 413, 414, 417, 418, 420, 422, 425, 427, 449, 455, 462, 478, 480, 484, 554, 555, 574, 704, 717, 792, 803, 806, 807, 808, 817, 821, 822, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 886, 887, 897, 911, 993, 997, 1009, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "complexity_comput": [48, 51], "benchmark_influ": 48, "conf": [48, 67, 391, 413, 418, 841, 996, 1049], "prediction_tim": [48, 49], "prediction_pow": 48, "param_valu": 48, "changing_param_valu": 48, "tuned_param": 48, "postfit_hook": 48, "append": [48, 49, 50, 53, 54, 57, 58, 65, 72, 75, 78, 82, 88, 99, 108, 135, 145, 146, 148, 153, 155, 158, 191, 198, 216, 227, 228, 230, 231, 238, 241, 255, 256, 280, 283, 289, 290, 293, 315, 316, 326, 341, 349, 352, 361, 362, 363, 365, 369, 393, 401, 415, 422, 663, 664, 906, 907, 913, 933, 1004, 1023], "start_tim": [48, 51, 60, 149, 150, 153, 163, 179, 212, 244], "elapsed_tim": [48, 77, 105, 149, 150, 163, 240], "pred_scor": 48, "prediction_performance_comput": 48, "4f": [48, 49, 60, 145, 154, 156, 238, 239, 241, 325, 913], "prediction_performance_label": 48, "necessari": [48, 55, 146, 207, 223, 228, 266, 280, 281, 287, 302, 353, 367, 374, 382, 385, 386, 387, 388, 389, 390, 391, 395, 399, 414, 416, 421, 457, 467, 493, 494, 496, 497, 498, 499, 500, 502, 539, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 676, 678, 680, 681, 696, 700, 799, 869, 878, 889, 893, 899, 983, 986, 990, 993, 996, 1004, 1010, 1028, 1035, 1043], "complexity_label": [48, 51], "_count_nonzero_coeffici": 48, "coef_": [48, 51, 55, 92, 120, 173, 174, 177, 194, 195, 202, 205, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 222, 226, 227, 228, 232, 238, 239, 258, 264, 293, 327, 333, 347, 354, 358, 361, 370, 382, 389, 401, 417, 423, 470, 487, 488, 489, 554, 598, 599, 602, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 906, 907, 908, 909, 910, 911, 912, 978, 988, 990, 1008, 1009, 1026, 1035, 1037, 1040, 1042, 1047, 1049, 1052], "toarrai": [48, 336, 342, 369, 415, 422, 571, 587, 593, 595, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 879, 896, 897, 944, 965, 966, 968, 976, 977, 984, 997, 1004, 1052], "count_nonzero": [48, 51, 374], "001": [48, 55, 71, 82, 100, 153, 177, 179, 195, 207, 232, 250, 260, 266, 278, 280, 282, 341, 362, 384, 393, 418, 541, 542, 544, 551, 632, 649, 650, 651, 652, 657, 658, 665, 666, 667, 668, 671, 672, 673, 681, 682, 683, 684, 686, 689, 694, 695, 698, 699, 801, 802, 863, 864, 901, 902, 908, 909, 910, 911, 912, 983, 1019, 1028], "modified_hub": [48, 681, 1008], "fit_intercept": [48, 202, 203, 209, 228, 237, 250, 288, 327, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 906, 907, 913, 990, 1008, 1039, 1043, 1044, 1045, 1047, 1048, 1049], "tol": [48, 51, 58, 110, 128, 153, 158, 177, 190, 203, 214, 216, 230, 231, 237, 239, 250, 261, 267, 269, 318, 332, 357, 361, 389, 393, 421, 426, 448, 452, 454, 457, 464, 467, 476, 477, 483, 487, 488, 489, 536, 537, 538, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 564, 565, 566, 567, 607, 632, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677, 679, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 696, 698, 700, 801, 802, 817, 855, 863, 864, 901, 902, 906, 907, 908, 909, 910, 911, 912, 980, 990, 1008, 1009, 1024, 1028, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "n_iter_no_chang": [48, 148, 153, 158, 231, 332, 361, 392, 401, 421, 564, 565, 566, 567, 671, 672, 673, 681, 682, 683, 863, 864, 1008, 1043, 1046], "l1_ratio": [48, 51, 56, 207, 208, 214, 288, 293, 374, 399, 419, 543, 545, 552, 651, 652, 657, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 990, 1008, 1036, 1038, 1040, 1047, 1049], "non_zero": [48, 53], "misclassif": [48, 142, 353, 800, 1008, 1009, 1010, 1036], "sparsifi": [48, 207, 374, 663, 664, 671, 672, 673, 681, 682, 683, 906, 978, 1037], "05": [48, 49, 54, 56, 64, 66, 75, 82, 90, 98, 100, 102, 103, 105, 112, 125, 133, 145, 148, 155, 158, 161, 168, 173, 177, 184, 187, 188, 195, 203, 204, 222, 225, 237, 247, 248, 250, 260, 266, 268, 269, 272, 280, 281, 289, 291, 305, 308, 313, 320, 322, 329, 333, 339, 341, 354, 384, 423, 455, 461, 483, 530, 535, 536, 551, 597, 600, 601, 603, 618, 619, 620, 624, 625, 627, 628, 630, 637, 638, 654, 695, 699, 760, 803, 855, 906, 907, 990, 998, 1004, 1015], "n_support_vector": 48, "len": [48, 49, 51, 52, 57, 58, 60, 69, 70, 71, 75, 76, 79, 81, 82, 87, 88, 89, 93, 98, 99, 100, 101, 102, 103, 107, 109, 131, 137, 138, 140, 145, 148, 151, 152, 158, 169, 170, 175, 176, 179, 187, 191, 196, 198, 222, 223, 241, 246, 250, 253, 254, 255, 257, 259, 260, 266, 268, 269, 275, 278, 280, 281, 288, 289, 291, 294, 299, 300, 307, 309, 310, 315, 321, 322, 323, 326, 335, 338, 339, 342, 349, 356, 359, 361, 362, 363, 369, 399, 401, 424, 432, 436, 438, 442, 450, 455, 461, 469, 512, 520, 555, 574, 575, 587, 602, 637, 638, 786, 803, 817, 828, 832, 834, 836, 837, 887, 901, 902, 1026, 1027, 1028, 1044, 1047], "support_vectors_": [48, 51, 57, 350, 353, 354, 908, 909, 910, 911, 912, 1009], "squared_error": [48, 54, 137, 155, 156, 332, 421, 563, 564, 565, 567, 570, 676, 681, 683, 698, 915, 917, 1008, 1010, 1048, 1051, 1052], "learning_r": [48, 142, 153, 154, 155, 156, 157, 158, 248, 300, 316, 318, 330, 332, 421, 558, 559, 564, 565, 566, 567, 673, 681, 682, 683, 697, 862, 863, 864, 991, 1001, 1008, 1036, 1044, 1048], "max_depth": [48, 70, 143, 144, 147, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 190, 244, 277, 292, 297, 331, 332, 365, 367, 368, 369, 400, 401, 421, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 716, 806, 807, 830, 914, 915, 916, 917, 918, 919, 920, 983, 1001, 1010, 1044, 1046], "n_estim": [48, 51, 66, 70, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 161, 162, 165, 190, 198, 244, 259, 263, 268, 277, 292, 322, 329, 331, 374, 400, 401, 421, 423, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 637, 806, 807, 983, 1000, 1001, 1032, 1043, 1051], "n_tree": 48, "loop": [48, 49, 145, 155, 195, 275, 285, 361, 369, 374, 387, 388, 393, 414, 418, 423, 651, 652, 657, 658, 664, 665, 666, 667, 668, 983, 1007, 1008, 1023, 1038, 1039, 1042, 1047, 1048, 1051, 1052], "previous": [48, 91, 95, 108, 142, 185, 195, 278, 287, 333, 382, 395, 399, 405, 414, 419, 422, 445, 448, 459, 529, 539, 546, 654, 663, 664, 671, 672, 673, 681, 682, 683, 906, 962, 990, 1004, 1013, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "subsequ": [48, 71, 96, 112, 131, 142, 174, 211, 225, 282, 285, 300, 302, 349, 370, 387, 389, 393, 401, 414, 415, 421, 424, 442, 501, 513, 558, 559, 564, 566, 567, 671, 673, 681, 806, 807, 834, 835, 838, 841, 842, 843, 844, 845, 863, 881, 885, 984, 993, 995, 1044, 1045, 1049, 1051], "relax": [48, 414, 422, 458, 1007, 1042], "optim": [48, 55, 67, 91, 92, 95, 98, 109, 114, 115, 128, 153, 154, 156, 158, 176, 177, 179, 180, 183, 184, 185, 186, 187, 207, 211, 212, 216, 231, 239, 256, 260, 278, 285, 288, 293, 297, 299, 304, 318, 320, 325, 333, 341, 351, 357, 361, 362, 363, 370, 374, 381, 384, 387, 389, 390, 399, 401, 405, 410, 412, 414, 416, 418, 419, 421, 423, 424, 425, 449, 452, 453, 454, 455, 457, 462, 466, 467, 477, 478, 484, 536, 539, 540, 542, 544, 548, 562, 563, 564, 565, 579, 615, 616, 624, 625, 640, 643, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 692, 695, 697, 699, 700, 706, 727, 734, 803, 817, 848, 849, 850, 852, 854, 855, 856, 857, 858, 863, 864, 882, 894, 898, 899, 906, 907, 908, 909, 910, 911, 912, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1008, 1009, 1010, 1013, 1018, 1023, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051], "few": [48, 56, 60, 77, 84, 90, 132, 152, 158, 182, 185, 186, 212, 221, 223, 225, 241, 256, 257, 266, 282, 283, 287, 317, 320, 324, 329, 330, 331, 332, 333, 334, 335, 336, 338, 357, 363, 374, 382, 383, 384, 387, 389, 400, 402, 406, 409, 412, 413, 414, 418, 419, 421, 423, 424, 442, 454, 566, 567, 593, 596, 660, 697, 700, 899, 943, 962, 990, 991, 993, 994, 997, 998, 1007, 1009, 1010, 1018, 1019, 1026, 1027, 1028, 1041, 1051], "drawn": [48, 90, 116, 145, 176, 179, 188, 194, 261, 287, 304, 361, 383, 414, 420, 421, 424, 426, 474, 475, 476, 477, 478, 479, 480, 481, 520, 528, 538, 560, 561, 562, 563, 568, 569, 570, 571, 616, 632, 637, 646, 842, 898, 899, 916, 917, 990, 1004, 1006, 1038], "detriment": [48, 176, 375, 423, 990], "plot_influ": 48, "mse_valu": 48, "ax1": [48, 51, 95, 98, 103, 105, 110, 112, 116, 126, 152, 191, 198, 223, 251, 253, 261, 266, 283, 291, 321, 325, 326, 341, 361, 362, 1024], "add_subplot": [48, 57, 65, 67, 80, 83, 102, 105, 124, 134, 196, 220, 238, 245, 247, 338, 339, 394, 1027], "line1": [48, 53, 246], "tab": [48, 50, 73, 91, 116, 142, 158, 160, 163, 179, 184, 186, 211, 212, 330, 336, 415, 1042], "blue": [48, 50, 54, 61, 62, 66, 73, 116, 126, 128, 142, 145, 149, 157, 158, 160, 163, 165, 175, 184, 186, 200, 203, 211, 212, 219, 221, 246, 254, 274, 275, 280, 316, 325, 330, 336, 340, 384, 414, 419, 1052], "set_xlabel": [48, 51, 83, 91, 98, 109, 110, 112, 124, 126, 133, 153, 188, 190, 191, 194, 196, 197, 198, 200, 212, 218, 220, 221, 223, 225, 238, 239, 255, 280, 282, 286, 291, 292, 295, 297, 305, 320, 321, 325, 341, 362, 363, 365], "y1_label": 48, "set_ylabel": [48, 49, 51, 69, 73, 83, 91, 98, 103, 109, 110, 112, 116, 124, 126, 133, 138, 142, 149, 153, 188, 196, 200, 212, 214, 218, 220, 221, 223, 225, 227, 238, 255, 266, 280, 282, 286, 291, 292, 299, 305, 320, 321, 325, 329, 341, 357, 362, 365, 1024], "spine": [48, 56, 73, 234, 320], "set_color": [48, 234], "get_color": 48, "yaxi": [48, 51, 83, 98, 124, 134, 148, 220, 243, 245, 248, 266, 300, 305, 361], "tick_param": [48, 56, 166, 266, 280, 324, 341], "ax2": [48, 95, 98, 103, 105, 116, 126, 152, 191, 198, 223, 251, 261, 266, 283, 291, 310, 321, 325, 326, 341, 361], "frameon": [48, 229], "line2": [48, 53, 246, 358], "orang": [48, 50, 91, 116, 126, 129, 130, 135, 142, 157, 158, 160, 186, 191, 211, 212, 233, 258, 269, 311, 330, 336, 368, 995, 1052], "tick_right": 48, "set_label_posit": 48, "y2_label": 48, "__name__": [48, 57, 65, 99, 190, 223, 225, 257, 260, 264, 275, 282, 322, 342, 361, 362, 363, 394, 399, 879], "prediction_perform": 48, "4948": 48, "2675": 48, "058066": 48, "1847": 48, "3264": 48, "043447": 48, "997": [48, 78, 177], "3383": 48, "036137": 48, "802": [48, 177, 308, 384, 1015], "3582": 48, "033176": 48, "0517578125e": 48, "5558": 48, "7313": 48, "000179": 48, "5289": 48, "8022": [48, 401, 478, 1044], "000260": 48, "5193": 48, "8353": 48, "000417": 48, "124": [48, 256, 362, 421, 1037], "5131": [48, 1040], "3279": 48, "000644": 48, "178": [48, 142, 384, 393, 515, 850, 1015], "5149": 48, "0779": 48, "000880": 48, "4066": 48, "4812": 48, "000169": 48, "3551": 48, "1723": 48, "000191": 48, "3445": 48, "2171": 48, "000231": 48, "3433": 48, "0358": 48, "000265": 48, "3456": 48, "0602": 48, "000301": 48, "deduc": 48, "guarante": [48, 49, 67, 116, 117, 158, 195, 231, 254, 299, 300, 320, 362, 370, 376, 381, 395, 396, 414, 418, 419, 422, 451, 541, 650, 663, 664, 673, 677, 679, 681, 683, 692, 699, 820, 823, 846, 847, 884, 886, 889, 891, 892, 893, 894, 895, 896, 897, 899, 900, 913, 986, 990, 991, 993, 997, 1002, 1006, 1010, 1027, 1045], "aspect": [48, 96, 121, 128, 183, 196, 243, 250, 289, 309, 355, 374, 375, 376, 387, 401, 402, 414, 496, 663, 664, 1010, 1018, 1052], "17": [48, 54, 60, 77, 90, 111, 116, 126, 158, 180, 195, 222, 244, 254, 283, 315, 324, 382, 385, 392, 405, 407, 408, 414, 418, 449, 466, 492, 502, 503, 505, 528, 536, 541, 545, 552, 554, 555, 560, 564, 565, 574, 575, 602, 633, 654, 662, 663, 664, 671, 674, 677, 679, 692, 697, 733, 734, 744, 765, 770, 788, 791, 793, 821, 844, 855, 870, 875, 876, 884, 886, 892, 908, 911, 914, 915, 916, 917, 944, 983, 984, 995, 997, 1004, 1015, 1031, 1033, 1035, 1036, 1037, 1038, 1041, 1044, 1049], "459": [48, 414, 447, 1015], "plot_model_complexity_influ": [48, 1015], "concentr": [48, 50, 103, 126, 133, 142, 161, 184, 191, 192, 248, 265, 267, 272, 291, 310, 322, 340, 383, 387, 421, 448, 524, 801, 993, 1000, 1015], "doesn": [49, 223, 257, 267, 299, 317, 349, 395, 401, 405, 414, 422, 423, 427, 439, 480, 637, 638, 671, 673, 681, 721, 830, 833, 838, 848, 849, 863, 875, 876, 993, 994, 1010, 1039, 1052], "partial_fit": [49, 88, 128, 257, 333, 376, 389, 401, 414, 419, 447, 454, 539, 541, 542, 543, 594, 602, 663, 664, 671, 672, 673, 681, 682, 683, 834, 835, 838, 839, 841, 842, 843, 844, 845, 862, 863, 864, 875, 876, 886, 906, 990, 996, 998, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1051, 1052], "fed": [49, 163, 370, 382, 422, 983, 999, 1004, 1046], "remain": [49, 65, 67, 108, 142, 149, 154, 156, 176, 195, 223, 227, 239, 266, 278, 282, 286, 289, 412, 414, 415, 416, 418, 422, 451, 469, 472, 520, 521, 526, 533, 539, 575, 615, 616, 767, 773, 805, 806, 807, 808, 811, 813, 841, 842, 843, 845, 947, 983, 984, 986, 993, 994, 998, 1004, 1010, 1014, 1037, 1043, 1049, 1052], "where": [49, 52, 53, 55, 57, 58, 60, 61, 64, 65, 66, 71, 91, 93, 95, 116, 121, 126, 128, 131, 137, 138, 142, 144, 146, 148, 152, 153, 155, 158, 160, 174, 177, 179, 185, 188, 191, 195, 202, 207, 215, 224, 227, 232, 233, 234, 236, 240, 241, 243, 245, 246, 250, 251, 254, 257, 258, 260, 262, 272, 276, 277, 280, 282, 286, 287, 289, 291, 292, 297, 299, 318, 320, 322, 323, 324, 325, 326, 327, 329, 331, 332, 339, 340, 347, 353, 357, 358, 359, 361, 365, 366, 370, 374, 375, 376, 381, 383, 384, 386, 387, 389, 391, 393, 394, 395, 399, 400, 401, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 442, 449, 452, 453, 457, 466, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 492, 501, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 587, 588, 589, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 614, 615, 616, 618, 620, 624, 627, 628, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 693, 696, 697, 698, 701, 712, 716, 717, 721, 729, 733, 734, 735, 743, 759, 767, 772, 773, 774, 777, 785, 786, 787, 788, 791, 792, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 849, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 876, 879, 881, 882, 885, 886, 892, 894, 900, 901, 902, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 934, 935, 936, 937, 943, 951, 954, 979, 983, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1014, 1019, 1020, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "word": [49, 56, 60, 107, 179, 254, 258, 349, 362, 363, 374, 382, 383, 387, 389, 392, 401, 412, 414, 416, 417, 418, 419, 458, 516, 528, 539, 541, 546, 593, 594, 596, 701, 835, 845, 903, 988, 992, 996, 999, 1004, 1007, 1008, 1018, 1026, 1027, 1035, 1043], "federicov": 49, "itertool": [49, 80, 82, 100, 164, 196, 208, 267, 272, 280, 287, 289, 421], "sy": [49, 53, 57, 60, 231, 254, 300, 342, 363, 382, 399, 622], "tarfil": 49, "hashlib": 49, "sha256": [49, 1050], "parser": [49, 54, 158, 329, 333, 501, 1050, 1051], "htmlparser": 49, "pathlib": [49, 1050, 1051], "urllib": [49, 58], "urlretriev": 49, "rcparam": [49, 250, 255, 327], "_not_in_sphinx": [49, 51], "hack": [49, 51], "builder": [49, 51, 357, 391], "__file__": [49, 51, 1048], "21578": [49, 1048], "uci": [49, 177, 325, 381, 384, 505, 507, 509, 515], "ml": [49, 177, 297, 381, 384, 392, 505, 507, 515, 990, 992, 1013, 1014, 1018], "uncompress": [49, 513, 514, 1028], "reuterspars": 49, "pars": [49, 58, 374, 381, 382, 388, 513], "sgml": [49, 374], "yield": [49, 50, 65, 83, 93, 114, 115, 116, 117, 155, 207, 218, 223, 238, 241, 285, 299, 315, 320, 346, 351, 361, 362, 370, 374, 376, 381, 392, 401, 412, 414, 416, 418, 419, 421, 422, 423, 442, 454, 473, 477, 513, 514, 542, 543, 544, 546, 551, 558, 559, 564, 565, 566, 567, 572, 573, 599, 607, 652, 656, 657, 658, 660, 666, 668, 670, 678, 680, 691, 730, 785, 792, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 837, 840, 898, 899, 937, 944, 946, 947, 952, 986, 988, 990, 991, 994, 1009, 1010, 1023, 1040, 1041, 1043, 1046, 1048], "__init__": [49, 57, 94, 140, 187, 257, 300, 349, 387, 389, 391, 392, 393, 394, 401, 422, 428, 431, 434, 437, 438, 623, 955, 1036, 1041, 1043, 1048, 1049, 1050, 1051], "latin": [49, 422], "_reset": 49, "handle_starttag": 49, "tag": [49, 87, 108, 250, 340, 381, 386, 390, 391, 395, 399, 401, 411, 422, 431, 437, 501, 834, 1014, 1017, 1040, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "attr": [49, 94], "start_": 49, "handle_endtag": 49, "end_": 49, "in_titl": 49, "in_bodi": 49, "in_top": 49, "in_topic_d": 49, "bodi": [49, 107, 177, 261, 334, 384], "topic_d": 49, "fd": 49, "feed": [49, 121, 224, 363, 382, 392, 399, 414, 422, 746, 879, 995], "decod": [49, 313, 382, 401, 508, 574, 593, 594, 596, 1035, 1036], "handle_data": 49, "start_reut": 49, "end_reut": 49, "sub": [49, 75, 86, 91, 93, 95, 98, 107, 137, 257, 259, 266, 331, 338, 339, 346, 349, 358, 382, 387, 389, 393, 401, 415, 421, 422, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 541, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 599, 602, 615, 616, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 865, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 952, 990, 994, 1008, 1028, 1045, 1049, 1051, 1052], "start_titl": 49, "end_titl": 49, "start_bodi": 49, "end_bodi": 49, "start_top": 49, "end_top": 49, "start_d": 49, "end_d": 49, "stream_reuters_docu": 49, "data_path": 49, "archiv": [49, 297, 381, 382, 384, 385, 409, 414, 447, 505, 507, 515, 762, 763, 992, 1009, 1028], "exist": [49, 50, 54, 58, 60, 91, 241, 280, 317, 320, 353, 381, 386, 389, 390, 393, 399, 401, 402, 405, 409, 414, 418, 419, 421, 422, 429, 439, 442, 448, 449, 452, 454, 456, 458, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 504, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 590, 593, 594, 595, 596, 599, 602, 608, 615, 616, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 703, 705, 707, 766, 769, 773, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 879, 880, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 978, 986, 991, 993, 994, 998, 1000, 1001, 1004, 1018, 1027, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "str": [49, 51, 57, 96, 98, 136, 138, 151, 241, 260, 280, 292, 300, 310, 347, 361, 381, 382, 396, 422, 425, 426, 430, 435, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 462, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 622, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 697, 701, 702, 703, 704, 705, 707, 712, 714, 716, 718, 731, 733, 734, 736, 737, 742, 746, 775, 778, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 803, 804, 805, 806, 807, 809, 810, 812, 814, 815, 817, 821, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 922, 925, 926, 927, 930, 933, 935, 939, 950, 951, 952, 954, 957, 978, 979, 982, 1050], "download_url": 49, "ic": [49, 297, 331, 381, 384, 404, 505, 507, 515, 637, 638, 1030, 1047, 1048], "databas": [49, 177, 325, 374, 376, 382, 384, 414, 419, 421, 422, 425, 447, 449, 515, 560, 561, 899, 1006], "reuters21578": 49, "mld": 49, "tar": [49, 391], "gz": [49, 391, 405, 513, 514], "archive_sha256": 49, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 49, "archive_filenam": 49, "mkdir": [49, 393, 395], "parent": [49, 194, 257, 387, 391, 401, 414, 447, 468, 951, 952, 1035, 1052], "exist_ok": 49, "blocknum": 49, "total_sz_mb": 49, "mb": [49, 254, 361, 363, 382, 393, 501, 908, 909, 910, 911, 912, 1009, 1015, 1031], "1e6": [49, 51, 216, 254, 361, 363, 374, 541, 900, 994, 1006], "current_sz_mb": 49, "stdout": [49, 128, 231, 835, 855, 863, 864], "write": [49, 58, 191, 257, 361, 374, 375, 381, 385, 386, 390, 391, 392, 393, 395, 396, 399, 401, 411, 415, 419, 422, 1005, 1014, 1028, 1036, 1048, 1052], "rdownload": 49, "archive_path": 49, "reporthook": 49, "tamper": 49, "assert": [49, 58, 86, 129, 254, 280, 289, 375, 390, 1014], "read_byt": 49, "hexdigest": 49, "untar": 49, "open": [49, 53, 58, 245, 381, 382, 385, 386, 387, 391, 393, 399, 400, 402, 409, 415, 422, 492, 501, 513, 514, 984, 1013, 1018, 1022, 1038, 1042, 1043, 1045, 1051], "fp": [49, 414, 717, 723, 733, 734, 735, 786, 787, 788, 791, 994], "extractal": 49, "glob": 49, "sgm": 49, "rb": 49, "decode_error": [49, 422, 508, 593, 594, 596, 1037], "alternate_sign": [49, 422, 587, 594, 1042], "data_stream": 49, "acq": 49, "chosen": [49, 61, 84, 110, 163, 180, 195, 196, 212, 224, 240, 258, 274, 275, 277, 283, 362, 370, 374, 399, 414, 416, 417, 421, 424, 445, 451, 454, 456, 458, 459, 465, 501, 528, 540, 562, 563, 564, 565, 566, 567, 569, 570, 652, 658, 661, 663, 664, 666, 668, 676, 681, 682, 683, 684, 685, 695, 699, 798, 801, 802, 803, 806, 807, 817, 836, 855, 906, 907, 914, 915, 916, 917, 943, 983, 986, 988, 990, 991, 993, 995, 1000, 1001, 1008, 1023, 1024, 1026, 1027, 1043, 1051, 1052], "care": [49, 93, 156, 297, 353, 374, 376, 391, 393, 399, 401, 402, 414, 416, 422, 442, 465, 474, 645, 663, 664, 671, 672, 673, 681, 682, 683, 700, 906, 991, 1009, 1018, 1051], "all_class": 49, "positive_class": [49, 717], "partial_fit_classifi": 49, "nb": [49, 135, 161, 370, 843, 996], "get_minibatch": 49, "doc_it": 49, "pos_class": 49, "minibatch": [49, 82, 414, 419, 454, 539, 681, 862, 863, 864, 1013, 1035], "tupl": [49, 54, 86, 87, 93, 137, 196, 241, 380, 381, 382, 389, 401, 418, 426, 439, 456, 458, 469, 472, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 513, 515, 516, 517, 518, 519, 527, 538, 566, 567, 572, 573, 574, 575, 587, 588, 589, 592, 593, 594, 596, 632, 637, 638, 639, 716, 717, 724, 746, 785, 787, 801, 803, 817, 829, 846, 847, 865, 866, 876, 877, 881, 884, 892, 896, 908, 909, 910, 911, 912, 921, 927, 928, 930, 934, 935, 936, 937, 952, 960, 961, 978, 1001, 1041, 1042, 1046, 1047, 1048, 1053], "x_text": 49, "exclud": [49, 54, 60, 194, 320, 387, 391, 401, 451, 469, 471, 733, 734, 742, 787, 788, 791, 816, 824, 881, 969, 994, 997, 1044, 1051], "assign": [49, 58, 61, 73, 75, 84, 87, 95, 96, 98, 142, 147, 159, 161, 173, 181, 236, 241, 250, 255, 258, 315, 322, 327, 343, 357, 362, 382, 387, 389, 401, 412, 418, 419, 421, 422, 423, 424, 445, 446, 447, 448, 450, 451, 452, 453, 454, 457, 459, 461, 464, 465, 466, 467, 520, 541, 566, 567, 598, 599, 612, 613, 615, 663, 664, 671, 672, 673, 681, 682, 683, 709, 710, 720, 721, 722, 725, 733, 734, 735, 742, 743, 747, 759, 761, 787, 788, 790, 791, 797, 798, 799, 803, 806, 807, 809, 812, 817, 825, 827, 828, 829, 830, 833, 850, 856, 858, 859, 860, 873, 901, 902, 906, 907, 908, 909, 910, 911, 912, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1004, 1007, 1018, 1019, 1028, 1035, 1040, 1042, 1043, 1052], "islic": [49, 82, 100], "asarrai": [49, 58, 223, 241, 318, 340, 361, 362, 389, 401, 411, 730, 760, 854, 856, 857, 858, 1004, 1009, 1052], "int": [49, 51, 54, 55, 57, 58, 60, 75, 82, 100, 117, 145, 154, 158, 159, 169, 170, 180, 181, 182, 188, 191, 194, 204, 214, 216, 223, 241, 248, 250, 256, 260, 266, 275, 278, 279, 280, 300, 305, 307, 313, 327, 339, 363, 382, 387, 389, 399, 401, 413, 415, 418, 422, 425, 426, 429, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 622, 632, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 712, 714, 718, 730, 731, 733, 734, 735, 738, 742, 760, 761, 773, 778, 782, 783, 784, 785, 786, 787, 788, 791, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 922, 926, 927, 929, 930, 942, 943, 945, 946, 947, 948, 959, 963, 965, 968, 973, 974, 990, 1001, 1035, 1041, 1045, 1046], "iter_minibatch": 49, "minibatch_s": [49, 376], "test_stat": 49, "n_test": [49, 51, 72, 145, 280, 1035, 1038], "n_test_po": 49, "hold": [49, 54, 57, 66, 67, 223, 227, 281, 369, 380, 387, 388, 389, 401, 413, 414, 418, 421, 422, 424, 508, 562, 566, 569, 594, 637, 638, 639, 740, 803, 806, 807, 817, 842, 873, 874, 879, 880, 887, 890, 914, 916, 984, 988, 994, 998, 1008, 1009, 1010, 1019, 1028, 1043, 1047], "n_test_docu": 49, "tick": [49, 81, 98, 182, 261, 291, 637, 830], "x_test_text": 49, "parsing_tim": 49, "vectorizing_tim": 49, "cls_name": [49, 51], "n_train": [49, 51, 72, 145, 280, 1035, 1038], "6d": 49, "n_train_po": 49, "5d": 49, "cls_stat": 49, "accuracy_histori": 49, "runtime_histori": 49, "total_fit_tim": 49, "discard": [49, 93, 204, 283, 374, 412, 416, 423, 513, 514, 554, 602, 632, 635, 649, 879, 883, 895, 984, 990, 1043, 1047], "bigger": [49, 78, 98, 236, 280, 318, 353, 359, 362, 373, 375, 422, 443, 444, 513, 543, 852, 1023, 1030], "overhead": [49, 300, 375, 376, 387, 393, 396, 399, 401, 421, 446, 450, 454, 539, 704, 838, 839, 841, 842, 843, 844, 845, 846, 847, 962, 996, 997, 1038, 1043, 1044, 1047], "stream": [49, 414, 419, 422, 467, 594, 875, 876, 886, 986, 1013, 1043, 1046], "minibatch_iter": 49, "total_vect_tim": 49, "x_train_text": 49, "updat": [49, 57, 82, 100, 142, 148, 157, 255, 329, 363, 385, 386, 387, 391, 395, 401, 414, 419, 421, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 969, 990, 997, 998, 999, 1008, 1017, 1018, 1036, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1053], "accumul": [49, 88, 149, 150, 212, 391, 393, 414, 422, 994, 1036, 1043], "acc_histori": 49, "run_histori": 49, "circleci": [49, 88, 144, 183, 185, 187, 188, 215, 232, 267, 275, 318, 354, 366, 387], "scikit_learn_data": [49, 88, 382, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504], "878": 49, "962": 49, "915": 49, "1598": 49, "855": 49, "1590": 49, "877": [49, 278], "61": [49, 54, 117, 196, 241, 381, 384, 393, 415, 463, 546, 565, 651, 652, 657, 665, 666, 667, 686, 718, 944], "1570": 49, "933": [49, 111, 418], "62": [49, 54, 196, 200, 241, 274, 334, 339, 370, 382, 498, 499, 846, 847, 1031, 1038], "1562": 49, "3911": 49, "517": [49, 118, 457, 467, 1015, 1026], "938": [49, 219, 789, 994, 1023], "73": [49, 54, 144, 284, 339, 400, 486, 740, 803, 817, 852, 915, 1004, 1024, 1035, 1037], "2263": 49, "936": [49, 442, 994], "2259": 49, "885": [49, 177, 384], "2250": 49, "941": 49, "2246": [49, 241], "6821": 49, "891": 49, "952": [49, 87], "2411": 49, "2409": 49, "900": [49, 88, 111, 112], "2403": 49, "953": [49, 87], "2401": 49, "9759": 49, "1276": 49, "949": 49, "2473": 49, "2471": 49, "909": 49, "2467": 49, "958": 49, "2465": 49, "11680": 49, "1499": 49, "944": [49, 1023], "92": [49, 54, 71, 88, 131, 174, 200, 278, 318, 338, 339, 349, 382, 384, 543, 545, 552, 567, 602, 701, 803, 817, 989, 1028], "2374": 49, "956": [49, 1023], "2373": 49, "2370": 49, "950": 49, "2369": 49, "14625": 49, "1865": 49, "965": [49, 994], "06": [49, 54, 105, 120, 188, 195, 214, 222, 223, 280, 281, 318, 322, 356, 393, 487, 488, 489, 649, 650, 694, 698, 801, 802, 803, 817, 915, 990, 1004, 1006, 1015], "2414": 49, "903": 49, "2412": 49, "924": 49, "07": [49, 54, 120, 137, 195, 219, 241, 260, 289, 325, 370, 382, 414, 566, 567, 697, 699, 994, 1008, 1015], "2410": [49, 549], "957": [49, 732, 994], "17360": [49, 1046], "2179": 49, "09": [49, 130, 137, 195, 254, 258, 293, 318, 414, 534, 612, 739, 844, 994, 1004, 1008, 1015], "2448": 49, "2447": 49, "932": 49, "2445": 49, "2444": 49, "evolut": [49, 51, 292, 374, 376], "cours": [49, 50, 200, 374, 387, 389, 419, 422, 423, 984, 989, 990, 1018], "consumpt": [49, 374, 401, 414, 539, 562, 563, 569, 570, 803, 817, 827, 828, 829, 914, 915, 916, 917, 960, 1019, 1035, 1037, 1041, 1043, 1044, 1049], "queue": [49, 997, 1038], "plot_accuraci": 49, "x_legend": 49, "n_exampl": 49, "gca": [49, 82, 100, 121, 182, 228, 232, 234, 250, 263, 284, 308, 310, 321, 345, 347, 350, 351, 1001, 1032], "set_ylim": [49, 51, 57, 70, 80, 98, 109, 126, 147, 160, 161, 188, 196, 203, 221, 223, 224, 255, 266, 284, 295, 299, 305, 315, 320, 322, 323, 325, 330, 336, 341, 358], "gcf": [49, 1001], "cls_runtim": 49, "bar_color": 49, "rectangl": 49, "bar": [49, 51, 56, 109, 148, 149, 152, 153, 156, 165, 173, 177, 187, 190, 196, 202, 266, 271, 279, 281, 285, 299, 325, 326, 333, 334, 362, 389, 417, 586, 637, 653, 674, 685, 994, 1001, 1008, 1010, 1041, 1042, 1043, 1044], "width": [49, 51, 54, 57, 83, 91, 116, 124, 130, 131, 136, 137, 138, 145, 151, 152, 155, 165, 173, 181, 187, 206, 264, 266, 279, 303, 320, 322, 323, 326, 331, 334, 346, 384, 415, 443, 444, 457, 469, 498, 499, 511, 526, 591, 871, 919, 1004, 1008, 1010, 1025, 1026, 1043], "set_xticklabel": [49, 51, 116, 138, 165, 182, 196, 198, 291, 292, 299], "ymax": [49, 51, 52, 114, 210, 212, 215, 216, 224, 232, 280, 313], "set_titl": [49, 51, 56, 65, 67, 69, 70, 71, 73, 80, 81, 83, 91, 93, 95, 98, 102, 103, 109, 112, 116, 124, 126, 133, 138, 142, 147, 149, 153, 159, 161, 163, 164, 188, 190, 191, 194, 195, 196, 197, 198, 202, 203, 212, 214, 221, 223, 224, 225, 231, 243, 244, 247, 248, 253, 255, 256, 260, 261, 266, 274, 275, 276, 277, 280, 282, 283, 287, 291, 292, 295, 297, 299, 300, 303, 304, 305, 310, 315, 316, 320, 321, 322, 323, 324, 325, 329, 333, 338, 339, 346, 353, 357, 358, 359, 361, 365], "autolabel": 49, "attach": [49, 361, 439, 851, 1036, 1046], "rect": [49, 90, 202], "height": [49, 56, 91, 131, 152, 153, 177, 320, 326, 336, 361, 420, 451, 498, 499, 511, 591], "get_height": [49, 153], "get_x": [49, 153], "get_width": [49, 153], "va": [49, 153, 291, 308, 310, 356], "setp": [49, 51, 291, 294], "rotat": [49, 78, 127, 130, 133, 135, 154, 165, 192, 198, 246, 291, 292, 299, 349, 356, 417, 419, 424, 426, 509, 537, 546, 555, 619, 702, 886, 918, 990, 1015, 1046, 1047], "read": [49, 54, 58, 128, 243, 287, 329, 330, 331, 333, 335, 374, 381, 385, 388, 389, 390, 391, 392, 394, 395, 399, 400, 401, 414, 425, 426, 427, 428, 431, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 939, 983, 990, 994, 995, 1013, 1018, 1028, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052], "feat": [49, 51, 391, 422], "extr": 49, "vect": [49, 107, 281, 342, 422, 1028], "756": [49, 1015], "plot_out_of_core_classif": [49, 1015], "comparison": [49, 53, 55, 60, 63, 64, 65, 66, 68, 72, 74, 76, 80, 86, 88, 95, 96, 97, 98, 99, 101, 107, 115, 124, 127, 129, 130, 132, 138, 142, 145, 148, 155, 158, 161, 165, 166, 171, 178, 184, 186, 188, 192, 197, 205, 207, 209, 211, 214, 221, 223, 227, 238, 241, 242, 245, 246, 247, 248, 249, 253, 254, 268, 273, 275, 276, 277, 284, 292, 299, 309, 315, 322, 324, 325, 329, 331, 343, 346, 356, 360, 361, 362, 370, 382, 384, 401, 413, 414, 416, 417, 419, 423, 424, 442, 443, 448, 451, 452, 454, 487, 488, 489, 493, 509, 517, 519, 520, 527, 530, 546, 554, 555, 558, 569, 570, 586, 587, 593, 594, 595, 596, 611, 613, 615, 616, 620, 627, 630, 636, 644, 648, 664, 677, 693, 694, 695, 696, 697, 709, 742, 747, 783, 792, 803, 804, 805, 806, 808, 809, 817, 819, 820, 821, 822, 823, 824, 832, 841, 844, 848, 863, 864, 867, 879, 880, 884, 886, 887, 891, 892, 893, 894, 895, 896, 897, 906, 908, 909, 911, 912, 914, 983, 988, 991, 994, 996, 997, 1000, 1009, 1015, 1032], "illustr": [50, 63, 64, 66, 70, 72, 90, 94, 95, 107, 108, 111, 112, 114, 116, 121, 126, 130, 142, 145, 150, 157, 158, 160, 162, 163, 172, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 191, 192, 194, 196, 197, 200, 212, 219, 220, 223, 225, 227, 231, 233, 236, 237, 240, 241, 243, 244, 246, 248, 250, 252, 253, 255, 256, 257, 259, 280, 287, 292, 293, 301, 323, 325, 328, 329, 331, 341, 349, 350, 354, 355, 357, 358, 362, 363, 368, 370, 374, 384, 387, 392, 395, 400, 417, 419, 421, 422, 520, 615, 616, 618, 619, 620, 624, 627, 628, 855, 983, 990, 994, 997, 1000, 1006, 1007, 1008, 1009, 1015, 1018, 1019], "purpos": [50, 53, 57, 75, 121, 153, 158, 190, 237, 238, 239, 243, 245, 258, 269, 271, 276, 277, 349, 350, 357, 361, 362, 370, 382, 387, 389, 400, 401, 402, 405, 408, 412, 414, 415, 419, 421, 422, 423, 424, 643, 828, 829, 866, 991, 994, 995, 997, 1000, 1013, 1019, 1047, 1049], "awar": [50, 56, 174, 188, 346, 361, 385, 387, 389, 399, 402, 418, 422, 572, 573, 653, 659, 660, 661, 663, 664, 674, 685, 852, 881, 1000, 1004, 1010, 1032, 1035, 1036, 1049], "thing": [50, 73, 244, 275, 361, 375, 376, 382, 386, 387, 389, 399, 402, 414, 416, 422, 564, 565, 990, 1004, 1018, 1041], "trivial": [50, 225, 365, 387, 414, 821, 908, 911, 991, 1014, 1035], "stick": [50, 801, 993], "bias": [50, 118, 131, 155, 162, 194, 195, 197, 285, 382, 404, 413, 421, 529, 554, 862, 886, 897, 989, 993, 1002, 1008, 1010], "yet": [50, 95, 207, 241, 271, 281, 363, 376, 382, 386, 391, 399, 404, 405, 406, 418, 419, 421, 422, 424, 453, 457, 466, 467, 470, 477, 558, 559, 572, 573, 582, 598, 599, 607, 782, 903, 978, 983, 990, 994, 1000, 1008, 1014, 1044, 1052], "assum": [50, 73, 93, 95, 186, 191, 194, 195, 212, 223, 241, 250, 253, 260, 272, 280, 289, 320, 357, 363, 375, 386, 387, 389, 391, 393, 399, 400, 401, 404, 409, 412, 413, 414, 416, 418, 419, 421, 422, 424, 425, 430, 435, 442, 444, 449, 451, 455, 462, 468, 474, 475, 476, 477, 478, 479, 480, 481, 508, 513, 514, 537, 547, 553, 554, 566, 567, 572, 573, 592, 593, 594, 596, 625, 637, 648, 649, 651, 652, 657, 663, 664, 665, 666, 667, 671, 672, 673, 676, 677, 681, 682, 683, 686, 690, 692, 693, 697, 714, 730, 739, 745, 760, 768, 773, 778, 782, 785, 803, 806, 807, 817, 842, 848, 849, 852, 853, 854, 856, 857, 862, 873, 886, 954, 970, 971, 972, 984, 988, 990, 992, 993, 994, 996, 997, 999, 1000, 1001, 1004, 1008, 1010, 1041, 1047], "outli": [50, 116, 401, 474, 479, 990, 1000], "Of": [50, 65, 67, 190, 374, 389, 414, 422, 984], "screen": [50, 1048], "support_fract": [50, 474, 479], "contamin": [50, 116, 117, 250, 260, 306, 307, 474, 568, 852, 1000, 1043, 1051, 1052], "ocsvm": [50, 237], "line": [50, 52, 54, 57, 58, 78, 81, 98, 107, 116, 125, 128, 133, 142, 148, 154, 178, 190, 191, 192, 195, 196, 211, 212, 213, 215, 218, 219, 221, 224, 225, 226, 231, 232, 234, 235, 237, 250, 254, 255, 258, 260, 277, 284, 286, 287, 306, 310, 313, 321, 331, 348, 351, 353, 354, 358, 359, 361, 381, 382, 385, 387, 388, 389, 391, 392, 393, 394, 395, 399, 419, 420, 421, 443, 492, 493, 494, 513, 514, 547, 558, 559, 560, 561, 615, 618, 619, 637, 675, 691, 705, 706, 707, 809, 825, 962, 988, 994, 998, 1001, 1008, 1013, 1015, 1017, 1026, 1028, 1037, 1046, 1048, 1051, 1052], "mline": [50, 116, 237, 306, 348, 351], "red": [50, 51, 52, 66, 72, 73, 98, 116, 126, 128, 129, 130, 145, 163, 166, 188, 200, 202, 203, 213, 221, 248, 261, 275, 286, 313, 316, 321, 325, 326, 340, 349, 368, 385, 401, 414, 419, 995], "frontier": [50, 237, 306, 348, 1000, 1026], "legend_lin": 50, "response_method": [50, 69, 73, 94, 144, 159, 164, 206, 215, 232, 237, 283, 303, 308, 311, 325, 345, 346, 348, 353, 366, 636, 637, 638, 703, 705, 707, 746, 994, 1052], "decision_funct": [50, 52, 57, 65, 67, 94, 144, 159, 170, 235, 236, 237, 251, 257, 260, 287, 306, 307, 315, 322, 336, 347, 348, 349, 353, 354, 355, 359, 389, 401, 413, 421, 442, 474, 554, 555, 558, 560, 564, 566, 568, 572, 598, 599, 636, 637, 638, 663, 664, 671, 673, 679, 680, 681, 682, 703, 705, 707, 712, 725, 730, 731, 739, 743, 744, 746, 760, 786, 792, 793, 798, 803, 806, 807, 817, 827, 834, 835, 836, 837, 852, 866, 873, 903, 906, 908, 910, 911, 990, 994, 1000, 1001, 1008, 1009, 1026, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1052], "plot_method": [50, 73, 206, 237, 303, 308, 345, 347, 348, 350, 351, 353, 636], "contour": [50, 52, 57, 73, 84, 85, 116, 151, 170, 177, 182, 183, 185, 234, 235, 236, 237, 250, 255, 270, 306, 313, 347, 348, 350, 351, 353, 354, 355, 384, 394, 636, 637, 1000, 1008], "line2d": [50, 116, 237, 306, 348, 351, 809, 825], "bbox_arg": 50, "dict": [50, 51, 52, 53, 58, 66, 77, 83, 107, 110, 111, 134, 148, 153, 155, 157, 221, 229, 250, 259, 268, 278, 279, 281, 284, 287, 289, 300, 304, 322, 326, 333, 342, 349, 362, 363, 376, 379, 381, 389, 399, 401, 415, 418, 425, 426, 428, 432, 436, 438, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 716, 718, 766, 769, 775, 783, 784, 801, 802, 803, 806, 807, 809, 814, 815, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 921, 931, 932, 948, 951, 954, 983, 994, 1004, 1023, 1024, 1028, 1030, 1035, 1041, 1042, 1051, 1052, 1053], "boxstyl": [50, 322], "fc": [50, 305, 382], "arrow_arg": 50, "arrowstyl": 50, "xy": [50, 66, 87, 287, 313, 354, 405, 651, 652, 655, 656, 657, 658, 659, 660, 665, 666, 667, 668, 669, 686, 687, 688, 689, 691], "xycoord": [50, 66], "textcoord": [50, 200], "xytext": [50, 66, 200], "bbox": [50, 53, 73, 83, 134, 266, 267, 268, 271, 272, 322], "arrowprop": [50, 66], "ash": [50, 384, 1038, 1041], "malic_acid": 50, "abil": [50, 54, 99, 116, 155, 178, 179, 180, 184, 186, 188, 190, 192, 194, 195, 197, 223, 227, 241, 250, 361, 376, 405, 421, 422, 424, 616, 627, 630, 786, 787, 788, 791, 792, 991, 994, 997, 1000, 1010, 1014, 1015, 1035, 1037, 1042, 1044, 1048, 1049], "locat": [50, 65, 91, 92, 109, 116, 117, 217, 313, 331, 349, 380, 382, 385, 387, 391, 392, 395, 396, 405, 414, 416, 420, 453, 465, 466, 474, 475, 476, 477, 478, 479, 480, 481, 493, 505, 506, 509, 510, 517, 520, 979, 984, 990, 995, 1000, 1004, 1010, 1043], "hard": [50, 223, 250, 254, 280, 282, 376, 386, 399, 401, 414, 419, 422, 539, 546, 574, 681, 908, 909, 910, 911, 912, 990, 1007, 1009, 1010, 1014, 1026, 1027, 1028, 1044, 1045], "due": [50, 54, 66, 67, 91, 93, 98, 112, 142, 145, 179, 195, 196, 202, 207, 214, 221, 223, 225, 240, 241, 254, 260, 267, 288, 289, 299, 300, 325, 326, 353, 357, 361, 362, 363, 385, 387, 393, 401, 405, 413, 414, 418, 419, 421, 424, 448, 451, 452, 464, 540, 544, 548, 549, 579, 676, 803, 806, 807, 811, 813, 817, 827, 828, 831, 834, 838, 839, 871, 875, 876, 886, 984, 990, 991, 993, 994, 995, 997, 1001, 1008, 1009, 1014, 1027, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "banana": [50, 994], "anywai": [50, 361, 389, 670, 690, 691], "rid": [50, 1008], "difficulti": [50, 67, 241, 320, 376, 387, 413, 863, 864, 993, 997], "compromis": [50, 67, 196, 374, 387, 652, 684, 997, 1038], "flavanoid": [50, 384], "color_intens": 50, "360": [50, 142, 161, 362, 558, 1015], "plot_outlier_detection_win": [50, 1015], "toi": [50, 74, 77, 78, 79, 80, 85, 87, 90, 91, 93, 94, 95, 105, 116, 121, 132, 145, 159, 164, 165, 192, 205, 213, 227, 237, 249, 260, 266, 306, 307, 316, 346, 356, 380, 393, 399, 421, 422, 445, 446, 447, 449, 451, 453, 454, 455, 457, 463, 474, 517, 519, 527, 568, 644, 682, 730, 760, 802, 852, 859, 867, 886, 910, 991, 993, 994, 1000, 1004, 1015, 1030], "ellipsoid": [50, 68, 72, 116, 117, 118, 192, 265, 266, 268, 269, 270, 271, 272, 554, 555, 636, 801, 802, 988, 993, 1015], "goal": [51, 58, 61, 67, 90, 95, 121, 158, 190, 196, 200, 223, 238, 241, 259, 260, 277, 278, 361, 375, 376, 382, 389, 392, 393, 401, 402, 404, 406, 419, 423, 547, 553, 595, 598, 743, 994, 997, 999, 1000, 1008, 1009, 1010, 1018, 1019, 1022, 1026, 1028, 1043], "boxplot": [51, 116, 156, 195, 198, 329], "gc": 51, "defaultdict": [51, 54, 60, 65, 198, 283, 362, 363], "atomic_benchmark_estim": 51, "verbos": [51, 80, 88, 92, 102, 107, 109, 111, 163, 210, 281, 317, 318, 320, 332, 342, 361, 385, 391, 401, 409, 445, 448, 452, 454, 457, 459, 464, 467, 469, 472, 476, 477, 483, 536, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 598, 599, 632, 637, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 697, 699, 769, 782, 801, 802, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 835, 837, 840, 855, 862, 863, 864, 865, 866, 867, 868, 903, 906, 907, 908, 909, 910, 911, 912, 960, 1014, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050], "n_instanc": [51, 638], "atomic_benchmark": 51, "bulk_benchmark_estim": 51, "n_bulk_repeat": 51, "whole": [51, 88, 111, 158, 166, 191, 224, 260, 277, 284, 349, 353, 365, 374, 385, 387, 399, 400, 415, 417, 421, 424, 454, 488, 543, 560, 561, 562, 563, 568, 569, 570, 571, 575, 690, 691, 803, 806, 807, 817, 830, 841, 842, 843, 844, 845, 983, 994, 1004, 1028, 1043, 1045], "bulk_benchmark": 51, "benchmark_estim": 51, "atomic_runtim": 51, "bulk_runtim": 51, "generate_dataset": 51, "coef": [51, 92, 137, 194, 195, 202, 207, 210, 214, 215, 217, 222, 226, 227, 228, 232, 239, 264, 293, 317, 335, 358, 529, 651, 652, 654, 657, 658, 664, 665, 666, 667, 668, 674, 677, 679, 685, 686, 687, 688, 689, 690, 691, 692, 998], "random_se": [51, 126, 151], "x_scaler": 51, "y_scaler": 51, "ok": [51, 387, 1000], "boxplot_runtim": 51, "pred_typ": 51, "micro": [51, 313, 342, 374, 712, 718, 733, 734, 742, 787, 788, 791, 792, 994, 1035, 1043, 1044, 1050, 1052], "bp": [51, 156, 177, 211, 212, 384, 1002], "cls_info": 51, "estimator_conf": 51, "whisker": 51, "flier": 51, "marker": [51, 52, 58, 67, 69, 73, 75, 76, 80, 90, 93, 96, 97, 98, 101, 102, 120, 125, 126, 130, 148, 162, 186, 187, 200, 211, 216, 218, 220, 221, 223, 225, 226, 238, 240, 244, 266, 268, 269, 275, 280, 282, 283, 284, 307, 320, 325, 340, 365, 387, 391, 422, 1043, 1045, 1046, 1051], "linestyl": [51, 52, 57, 72, 98, 110, 116, 135, 137, 142, 154, 165, 168, 170, 179, 182, 184, 186, 188, 197, 198, 208, 210, 211, 212, 223, 224, 225, 229, 233, 235, 236, 241, 258, 260, 277, 279, 283, 284, 289, 305, 313, 316, 321, 347, 350, 351, 353, 354, 355, 357, 1024], "lightgrei": 51, "set_axisbelow": 51, "capit": [51, 65, 336, 501, 809, 825], "clf_name": [51, 361], "n_feature_influ": 51, "nber": 51, "estimator_nam": [51, 231, 389, 394, 443, 581, 703, 705, 707, 925], "percentile_perf_in_u": 51, "plot_n_features_influ": 51, "il": [51, 669, 690, 691, 990, 994], "benchmark_throughput": 51, "duration_sec": 51, "estimator_config": 51, "n_predict": 51, "plot_benchmark_throughput": 51, "cls_valu": 51, "sec": [51, 231, 245, 248, 300], "1e2": [51, 179, 186, 256, 272, 349, 750], "randomforest": [51, 151, 374, 421, 914, 915, 1040], "0001": [51, 177, 231, 278, 389, 426, 448, 452, 464, 476, 477, 483, 538, 543, 545, 552, 554, 555, 564, 565, 651, 652, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 673, 674, 677, 679, 681, 683, 685, 692, 694, 698, 863, 864, 906, 907, 983], "250": [51, 103, 155, 200, 243, 353, 498, 697, 983, 1006, 1042], "500": [51, 56, 82, 88, 95, 98, 99, 101, 120, 121, 135, 137, 146, 148, 156, 176, 179, 200, 236, 237, 244, 261, 262, 266, 267, 271, 280, 283, 293, 300, 306, 312, 324, 330, 335, 336, 355, 359, 374, 421, 427, 474, 475, 479, 480, 481, 486, 487, 488, 489, 616, 618, 619, 621, 626, 629, 630, 655, 656, 659, 660, 661, 685, 687, 688, 864, 983, 1009, 1015], "plot_prediction_lat": [51, 1015], "conserv": [52, 401, 587, 594, 898, 899, 993, 1006], "biologi": 52, "south": [52, 158, 195, 313, 382, 420], "american": [52, 53, 107, 117, 382, 414, 416, 420, 421, 422, 474, 479, 735, 886], "mammal": 52, "past": [52, 54, 391, 392, 395, 399, 402, 418, 419, 421, 543, 560, 561, 683, 1018, 1020, 1051], "environment": [52, 207, 241], "unsuccess": 52, "cast": [52, 91, 223, 244, 381, 402, 422, 501, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 678, 680, 959, 1042, 1043, 1044, 1045, 1048, 1050, 1052], "basemap": [52, 313], "coast": [52, 313], "nation": [52, 116, 313, 382, 853], "america": [52, 53, 116, 313, 382, 853, 1004], "bradypu": [52, 313, 382, 503], "variegatu": [52, 313, 382, 503], "brown": [52, 126, 313, 382, 503, 633, 984, 1040, 1042, 1043, 1044, 1047], "throat": [52, 313, 382, 503], "sloth": [52, 313, 382, 503], "microryzomi": [52, 313, 382, 503], "minutu": [52, 313, 382, 503], "rice": [52, 313, 382, 503, 1048], "rat": [52, 313, 382, 503], "rodent": [52, 313, 382, 503], "live": [52, 107, 195, 313, 382, 387, 414, 503, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 1017], "peru": [52, 313, 382, 503], "colombia": [52, 313, 382, 503], "ecuador": [52, 313, 382, 503], "venezuela": [52, 313, 382, 503], "anderson": [52, 313, 382, 503, 1041, 1047], "schapir": [52, 297, 313, 382, 421, 503, 558, 559], "ecolog": [52, 313, 382, 503], "190": [52, 154, 241, 289, 313, 382, 393, 503], "231": [52, 313, 382, 414, 425, 449, 503, 589], "259": [52, 245, 313, 382, 421, 503, 572, 573], "________________________________________________________________________________": [52, 92, 361], "coastlin": [52, 177, 313, 384], "868443": 52, "993919": 52, "elaps": [52, 85, 105, 148, 149, 150, 374, 469, 472, 574, 575, 865, 866, 867, 868], "astro": [52, 186, 243, 269], "washington": [52, 186, 243, 269, 305, 313], "ll": [52, 93, 150, 275, 313, 387, 399, 537, 546, 986, 997, 1010, 1019], "otherwis": [52, 94, 100, 144, 188, 191, 204, 225, 231, 313, 353, 357, 370, 376, 385, 389, 391, 393, 401, 406, 414, 416, 418, 422, 424, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 458, 459, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 501, 531, 532, 538, 539, 540, 541, 543, 545, 546, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 599, 602, 607, 615, 616, 619, 636, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 695, 697, 701, 702, 703, 705, 707, 708, 712, 714, 718, 719, 728, 730, 731, 732, 733, 734, 742, 745, 756, 758, 759, 760, 770, 778, 782, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 822, 825, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 863, 864, 866, 869, 870, 871, 872, 873, 877, 878, 885, 886, 887, 888, 891, 892, 893, 895, 896, 897, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 919, 921, 927, 929, 942, 943, 953, 955, 978, 980, 989, 990, 991, 994, 997, 998, 1000, 1001, 1004, 1006, 1008, 1009, 1013, 1018, 1019, 1037, 1043, 1044, 1045, 1048, 1051], "improvis": [52, 313], "mpl_toolkit": [52, 83, 105, 124, 134, 196, 220, 243, 245, 313], "importerror": [52, 57, 91, 131, 300, 313, 395], "construct_grid": [52, 313], "func": [52, 112, 147, 195, 203, 241, 313, 387, 415, 470, 704, 870, 1004, 1039, 1041, 1043, 1044, 1052, 1053], "xgrid": [52, 313], "ygrid": [52, 313], "corner": [52, 55, 66, 91, 194, 277, 281, 289, 290, 313, 336, 382, 387, 503, 918, 920, 994, 1049], "cell": [52, 53, 61, 66, 71, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 177, 184, 195, 196, 197, 204, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 313, 318, 326, 330, 331, 333, 334, 336, 340, 369, 384, 392, 697, 994, 995, 1041, 1049], "xmin": [52, 114, 213, 215, 232, 233, 313], "x_left_lower_corn": [52, 313, 382, 503], "grid_siz": [52, 99, 313, 382, 503], "xmax": [52, 114, 213, 215, 232, 233, 313], "nx": [52, 313, 382, 503], "ymin": [52, 114, 210, 212, 215, 216, 224, 232, 280, 313], "y_left_lower_corn": [52, 313, 382, 503], "ny": [52, 54, 279, 313, 382, 384, 503, 984, 1006], "create_species_bunch": 52, "species_nam": [52, 313], "join": [52, 53, 60, 93, 190, 241, 280, 322, 382, 402, 468, 1017, 1028, 1035, 1043], "ascii": [52, 313, 422, 492, 593, 594, 596], "pt": [52, 382, 423, 882, 1004], "desir": [52, 64, 144, 177, 191, 223, 225, 320, 324, 380, 387, 389, 391, 395, 409, 412, 414, 417, 418, 419, 423, 508, 543, 545, 549, 552, 572, 598, 607, 608, 669, 675, 690, 691, 704, 713, 740, 846, 847, 851, 866, 871, 873, 876, 877, 879, 880, 882, 883, 887, 890, 892, 894, 895, 930, 963, 986, 988, 991, 997, 1004, 1008, 1009, 1010, 1019, 1035, 1043, 1044, 1045, 1048], "pts_": 52, "ix": [52, 289, 356], "searchsort": 52, "dd": [52, 53, 161, 313, 503], "ii": [52, 129, 196, 230, 275, 384, 422, 587, 588, 594, 643, 671, 672, 869, 878, 990, 1004, 1012, 1052], "lat": [52, 313, 503, 768], "cov_": [52, 118], "plot_species_distribut": 52, "bradypus_variegatus_0": 52, "microryzomys_minutus_0": 52, "meshgrid": [52, 57, 66, 80, 96, 116, 151, 161, 180, 181, 182, 183, 185, 196, 234, 235, 236, 237, 248, 250, 270, 306, 313, 315, 322, 323, 343, 348, 349, 354, 355, 358, 359, 636], "bv_bunch": 52, "mm_bunch": 52, "background_point": 52, "c_": [52, 57, 65, 66, 67, 96, 116, 129, 151, 154, 160, 161, 170, 181, 221, 236, 239, 250, 306, 323, 325, 343, 349, 355, 358, 359, 414, 664, 719, 720, 723, 994, 1023, 1026, 1027], "randint": [52, 75, 117, 126, 154, 191, 197, 246, 253, 257, 259, 292, 331, 336, 389, 392, 400, 406, 807, 824, 841, 842, 843, 845, 983, 984], "land": [52, 313, 402, 421], "water": 52, "land_refer": [52, 313], "cov_train": 52, "train_cover_std": 52, "cyl": [52, 313], "llcrnrlat": [52, 313], "urcrnrlat": [52, 313], "llcrnrlon": [52, 313], "urcrnrlon": [52, 313], "drawcoastlin": [52, 313], "drawcountri": [52, 313], "9998": [52, 313], "solid": [52, 57, 70, 72, 154, 182, 235, 236, 250, 260, 313, 322, 1018], "z": [52, 57, 96, 151, 170, 181, 183, 196, 233, 235, 236, 243, 245, 250, 255, 270, 306, 313, 315, 322, 325, 343, 349, 354, 355, 359, 384, 412, 419, 421, 558, 559, 590, 644, 669, 676, 690, 691, 694, 698, 704, 728, 789, 886, 990, 991, 998, 999, 1027, 1050], "float64": [52, 55, 86, 91, 108, 154, 156, 157, 195, 196, 291, 333, 334, 375, 381, 387, 389, 401, 422, 476, 477, 483, 501, 502, 513, 514, 547, 553, 586, 587, 594, 596, 646, 663, 678, 680, 704, 742, 871, 879, 880, 908, 909, 911, 912, 915, 917, 924, 926, 965, 968, 970, 971, 972, 1009, 1019, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "idx": [52, 57, 60, 83, 93, 137, 144, 148, 151, 158, 164, 188, 196, 198, 207, 215, 222, 223, 232, 244, 366, 415, 418], "9999": [52, 241, 313, 341, 503, 632, 1043], "coverages_land": 52, "contourf": [52, 57, 151, 237, 255, 306, 313, 315, 322, 323, 343, 348, 354, 359, 636, 637], "pts_train": 52, "pts_test": 52, "pred_background": 52, "pred_test": 52, "cov_test": 52, "r_": [52, 137, 236, 237, 267, 287, 306, 307, 348, 354, 359, 414, 712, 994, 1010], "tpr": [52, 251, 260, 277, 289, 290, 394, 707, 711, 793, 994, 1032, 1035, 1051], "roc_auc": [52, 177, 280, 284, 289, 290, 394, 639, 707, 737, 994, 1032], "ntime": [52, 291], "643": [52, 96, 278, 1015], "plot_species_distribution_model": [52, 503, 1015], "emploi": [53, 179, 256, 401, 416, 422, 455, 483, 587, 594, 1018, 1027, 1041], "histor": [53, 223, 1014], "quantiti": [53, 152, 280, 287, 331, 374, 401, 414, 421, 726, 727, 728, 789, 862, 983, 985, 988, 990, 1040], "daili": [53, 158, 1018], "price": [53, 112, 152, 153, 158, 163, 260, 326, 984, 990, 1018, 1024], "link": [53, 58, 142, 195, 196, 202, 223, 227, 241, 266, 283, 310, 365, 375, 381, 385, 386, 387, 388, 389, 391, 395, 401, 413, 414, 416, 419, 424, 566, 567, 615, 653, 674, 685, 693, 710, 925, 927, 990, 997, 1010, 1011, 1013, 1017, 1022, 1026, 1028, 1033, 1035, 1038, 1039, 1042, 1043, 1046, 1052], "fluctuat": [53, 98, 158, 223, 287, 1043], "normalesup": [53, 71, 84, 104, 255], "2008": [53, 416, 418, 419, 483, 539, 568, 595, 650, 669, 690, 691, 697, 721, 730, 760, 836, 841, 845, 862, 988, 991, 992, 994, 995, 996, 999, 1000, 1009], "calm": 53, "ago": [53, 1014], "tech": [53, 384, 844], "firm": [53, 414], "crash": [53, 387, 473, 896, 897, 904, 1004, 1039, 1043, 1051, 1052], "nasdaq": 53, "alphavantag": 53, "symbol_dict": 53, "tot": 53, "xom": 53, "exxon": 53, "cvx": 53, "chevron": 53, "cop": 53, "conocophillip": 53, "vlo": 53, "valero": 53, "energi": [53, 158, 395, 862, 999, 1026], "msft": 53, "ibm": [53, 60, 342, 363, 382], "twx": 53, "warner": [53, 1050, 1051], "cmcsa": 53, "comcast": 53, "cvc": 53, "cablevis": 53, "yhoo": 53, "yahoo": 53, "dell": 53, "hpq": 53, "hp": [53, 1028], "amzn": 53, "amazon": 53, "tm": [53, 997], "toyota": 53, "caj": 53, "sne": [53, 192, 242, 243, 244, 245, 247, 300, 519, 530, 697, 1015, 1029, 1030], "soni": [53, 1045, 1047], "ford": 53, "hmc": 53, "honda": 53, "nav": 53, "navistar": 53, "noc": 53, "northrop": 53, "grumman": 53, "ba": [53, 863, 864, 998], "boe": 53, "ko": [53, 66, 180], "coca": 53, "cola": 53, "mmm": 53, "3m": 53, "mcdonald": 53, "pep": [53, 395, 1035], "pepsi": 53, "kellogg": 53, "un": [53, 387, 413, 422, 426, 538, 594, 799, 869, 878, 889, 893, 1044], "unilev": 53, "mar": 53, "marriott": 53, "pg": [53, 393, 654, 990, 1040], "procter": 53, "gambl": 53, "colgat": [53, 58], "palmol": 53, "ge": [53, 985, 996, 1047], "electr": [53, 158, 384, 414], "wfc": 53, "fargo": 53, "jpm": 53, "jpmorgan": [53, 1018], "chase": [53, 1035], "aig": 53, "axp": 53, "bac": 53, "bank": [53, 60, 1018], "goldman": 53, "sach": 53, "aapl": 53, "appl": [53, 374, 385, 399, 995], "sap": 53, "csco": 53, "cisco": 53, "txn": 53, "texa": [53, 107], "instrument": [53, 107, 129, 194], "xrx": 53, "xerox": 53, "wmt": 53, "wal": 53, "mart": [53, 1045], "hd": 53, "depot": 53, "gsk": 53, "glaxosmithklin": 53, "pfe": 53, "pfizer": 53, "sny": 53, "sanofi": 53, "aventi": 53, "nv": 53, "novarti": 53, "kmb": 53, "kimberli": 53, "clark": 53, "ryder": 53, "gd": [53, 166], "dynam": [53, 54, 196, 560, 561, 562, 563, 568, 569, 570, 571, 584, 585, 681, 682, 683, 1010, 1018, 1041, 1047, 1052], "rtn": 53, "raytheon": 53, "cat": [53, 108, 196, 197, 260, 332, 333, 334, 335, 336, 382, 422, 493, 587, 717, 723, 758, 787, 887, 994, 1004, 1044, 1045, 1047], "caterpillar": 53, "dupont": 53, "nemour": 53, "symbol": [53, 363, 375, 389, 393, 416, 422, 504, 587, 593, 594, 596, 918, 920, 1013], "histori": [53, 564, 565, 1035], "stderr": [53, 835], "url": [53, 58, 177, 381, 384, 389, 391], "githubusercont": 53, "master": [53, 57, 300, 334, 387, 391, 1018], "csv": [53, 381, 384, 392, 1043, 1048], "read_csv": [53, 392, 501, 1050], "close_pric": 53, "vstack": [53, 66, 95, 103, 182, 183, 205, 266, 270, 300, 313, 354, 636, 995, 1043], "q": [53, 108, 120, 155, 223, 332, 412, 414, 419, 942, 990, 1009], "open_pric": 53, "carri": [53, 70, 142, 191, 280, 283, 288, 316, 322, 363, 402, 409, 422, 562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917, 1018, 1027], "condition": [53, 67, 223, 413, 416, 762, 988], "edge_model": 53, "rather": [53, 67, 91, 118, 142, 145, 158, 190, 195, 223, 224, 237, 260, 324, 325, 361, 362, 370, 375, 383, 385, 387, 389, 392, 393, 395, 399, 400, 401, 402, 414, 418, 419, 421, 422, 424, 453, 466, 468, 570, 586, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 634, 651, 652, 657, 658, 665, 666, 667, 668, 785, 817, 837, 839, 840, 869, 906, 907, 918, 943, 988, 990, 991, 994, 996, 997, 1001, 1014, 1023, 1026, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1050, 1051], "former": [53, 363, 421, 422, 570, 805, 812, 821, 996, 1035, 1041, 1044], "recoveri": [53, 118, 207, 222, 416, 423], "03162278": 53, "05994843": 53, "11364637": 53, "21544347": 53, "40842387": 53, "77426368": 53, "46779927": 53, "7825594": 53, "27499706": 53, "rerun": [53, 66, 80, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 184, 195, 196, 197, 204, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369, 395], "trust": [53, 66, 108, 109, 117, 142, 147, 149, 150, 159, 160, 163, 166, 174, 184, 195, 196, 197, 198, 204, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369, 391, 402, 409, 413, 1023, 1049], "unabl": [53, 66, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 184, 194, 195, 196, 197, 204, 207, 223, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369, 376, 886, 1004, 1044], "render": [53, 66, 91, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 184, 195, 196, 197, 204, 218, 227, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369, 387, 389, 391, 392, 393, 401, 556, 594, 636, 705, 707, 883, 895, 918, 920, 993, 1010, 1048, 1052], "nbviewer": [53, 66, 108, 109, 147, 149, 150, 159, 160, 163, 166, 174, 184, 195, 196, 197, 204, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369], "nbsp": [53, 54, 66, 108, 109, 147, 149, 150, 155, 159, 160, 163, 166, 174, 184, 195, 196, 197, 204, 212, 251, 252, 253, 257, 261, 262, 263, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 334, 336, 340, 369], "graphicallassocvifittedgraphicallassocv": 53, "amongst": [53, 1010], "reflect": [53, 78, 84, 85, 116, 126, 129, 152, 196, 197, 223, 241, 289, 304, 362, 383, 386, 391, 401, 404, 412, 455, 461, 991, 994, 1000, 1002, 1027, 1036, 1044, 1052], "properti": [53, 65, 186, 187, 225, 240, 267, 302, 325, 369, 374, 380, 387, 389, 405, 412, 413, 414, 416, 419, 421, 423, 424, 429, 447, 450, 456, 457, 458, 469, 470, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 596, 598, 599, 602, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 637, 651, 657, 660, 665, 667, 679, 680, 704, 709, 710, 713, 803, 806, 807, 817, 834, 835, 865, 866, 879, 880, 881, 887, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 986, 989, 990, 991, 994, 995, 997, 1000, 1004, 1007, 1009, 1010, 1011, 1014, 1019, 1040, 1044, 1045, 1048, 1049, 1052], "impact": [53, 54, 65, 74, 75, 80, 81, 102, 112, 142, 173, 192, 194, 195, 196, 203, 225, 227, 241, 260, 274, 297, 303, 325, 334, 357, 362, 370, 374, 375, 380, 399, 402, 413, 414, 419, 452, 454, 541, 545, 552, 595, 671, 672, 673, 677, 679, 681, 682, 683, 697, 798, 803, 806, 807, 817, 829, 846, 847, 848, 883, 895, 906, 907, 929, 943, 965, 968, 983, 993, 1001, 1009, 1015, 1042, 1045, 1048], "covariance_": [53, 73, 116, 118, 474, 475, 476, 477, 478, 479, 480, 481, 554, 555, 988, 1042], "n_label": [53, 126, 258, 401, 492, 528, 718, 725, 730, 743, 744, 758, 760, 796, 797, 823, 994, 1041, 1043], "lai": [53, 325, 353, 1000], "canva": [53, 57], "dens": [53, 93, 192, 201, 207, 217, 333, 334, 342, 374, 396, 401, 414, 419, 421, 423, 448, 451, 452, 454, 469, 472, 501, 528, 529, 532, 539, 540, 549, 571, 612, 613, 634, 635, 657, 662, 663, 664, 671, 672, 673, 677, 678, 681, 682, 683, 692, 693, 694, 697, 698, 764, 765, 771, 783, 796, 863, 864, 871, 878, 879, 881, 883, 884, 885, 886, 895, 896, 897, 898, 899, 906, 907, 908, 909, 911, 912, 944, 965, 968, 984, 987, 990, 991, 994, 995, 997, 1000, 1004, 1006, 1007, 1008, 1009, 1010, 1015, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "eigen_solv": [53, 82, 84, 104, 243, 244, 419, 457, 467, 540, 693, 694, 696, 698, 700, 991, 1036, 1045, 1048, 1049, 1050], "arpack": [53, 60, 82, 84, 104, 107, 244, 336, 419, 456, 457, 458, 467, 540, 546, 549, 693, 694, 696, 698, 700, 991, 1041, 1042, 1047, 1051, 1052, 1053], "don": [53, 67, 92, 107, 158, 195, 244, 257, 258, 280, 300, 341, 346, 350, 361, 362, 374, 381, 387, 389, 391, 393, 395, 400, 405, 406, 415, 422, 651, 657, 834, 914, 915, 916, 917, 958, 983, 990, 993, 995, 998, 1000, 1008, 1028, 1039, 1044, 1051, 1052, 1053], "plane": [53, 177, 235, 255, 306, 351, 353, 354, 359, 384, 457, 467, 988, 990, 1009, 1026], "node_position_model": 53, "n_neighbor": [53, 82, 100, 105, 164, 190, 243, 244, 245, 247, 250, 260, 300, 302, 303, 306, 307, 308, 309, 312, 325, 329, 331, 361, 421, 457, 607, 612, 613, 633, 693, 694, 696, 698, 700, 701, 848, 849, 850, 852, 854, 855, 859, 901, 902, 984, 991, 997, 1000, 1007, 1042, 1049, 1051, 1052], "edg": [53, 66, 84, 104, 131, 152, 246, 287, 395, 401, 412, 414, 416, 458, 566, 567, 590, 591, 593, 594, 596, 801, 843, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 871, 919, 1004, 1007, 1018, 1041, 1043, 1046, 1049], "strength": [53, 163, 186, 223, 227, 281, 329, 374, 417, 421, 451, 572, 573, 648, 653, 654, 657, 663, 664, 674, 677, 678, 679, 680, 681, 683, 685, 692, 787, 863, 864, 906, 907, 911, 912, 983, 990, 997, 1000, 1008, 1009], "plan": [53, 381, 385, 387, 388, 402, 1004, 1038], "fair": [53, 67, 421, 695, 699, 835, 995, 1018], "crucial": [53, 158, 194, 227, 275, 374, 386, 387, 401, 402, 414, 424, 1009], "challeng": [53, 163, 179, 196, 202, 241, 250, 376, 382, 383, 414, 416, 467, 477, 994, 1000, 1018, 1019], "heurist": [53, 56, 154, 260, 361, 375, 414, 423, 454, 457, 466, 467, 513, 514, 542, 544, 551, 681, 682, 683, 696, 700, 806, 807, 908, 909, 910, 911, 912, 931, 991, 992, 997, 1008, 1010, 1018, 1026, 1035, 1036, 1040, 1044, 1047, 1048], "direct": [53, 120, 121, 128, 130, 136, 177, 229, 266, 272, 277, 309, 318, 325, 349, 354, 385, 387, 388, 391, 395, 402, 405, 414, 417, 419, 422, 423, 457, 467, 476, 477, 483, 539, 546, 554, 593, 594, 596, 607, 646, 693, 855, 988, 989, 990, 995, 997, 999, 1014, 1027, 1035, 1038], "linecollect": [53, 246, 253, 637], "facecolor": [53, 57, 66, 73, 83, 98, 128, 134, 144, 170, 187, 243, 258, 280, 307, 322, 347, 350, 353, 354, 356], "partial_correl": 53, "precision_": [53, 118, 474, 475, 476, 477, 478, 479, 480, 481], "sqrt": [53, 116, 117, 118, 131, 137, 146, 168, 198, 202, 204, 246, 248, 262, 266, 267, 268, 271, 272, 280, 354, 357, 414, 421, 422, 424, 468, 474, 475, 476, 477, 478, 479, 480, 481, 543, 545, 552, 562, 563, 564, 565, 569, 570, 624, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 704, 735, 767, 768, 773, 886, 899, 914, 915, 916, 917, 986, 990, 991, 994, 996, 1006, 1049], "diag": [53, 118, 187, 268, 271, 419, 424, 537, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 801, 802, 990, 1050], "newaxi": [53, 55, 60, 64, 80, 118, 137, 143, 180, 204, 213, 219, 224, 225, 226, 228, 229, 240, 253, 255, 294, 305, 312, 367, 368, 412, 541, 990], "ab": [53, 58, 78, 112, 132, 138, 144, 152, 163, 173, 177, 198, 210, 214, 234, 236, 239, 241, 246, 280, 320, 347, 359, 414, 543, 545, 552, 632, 750, 846, 847, 881, 994], "triu": 53, "nipy_spectr": [53, 77, 84, 85, 89, 90, 98, 99, 134], "start_idx": [53, 246], "end_idx": [53, 246], "line0": [53, 246], "linen": [53, 246], "x0": [53, 215, 232, 246, 320, 346, 401, 435, 469, 572, 573, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887], "y0": [53, 246], "x1": [53, 57, 120, 125, 144, 154, 182, 235, 246, 320, 346, 389, 401, 435, 469, 514, 572, 573, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 704, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 1027], "y1": [53, 125, 144, 246, 514, 721, 995, 996], "xm": [53, 246], "ym": [53, 246], "segment": [53, 55, 58, 62, 74, 85, 86, 192, 246, 253, 382, 395, 414, 422, 457, 467, 513, 514, 696, 862, 994, 1013, 1015, 1018, 1043, 1045, 1047], "lc": [53, 246, 253], "zorder": [53, 96, 130, 160, 170, 180, 188, 213, 221, 244, 246, 253, 256, 266, 330, 336, 354], "hot_r": [53, 320], "set_arrai": [53, 246, 253], "set_linewidth": [53, 246, 253], "add_collect": [53, 246, 253], "dx": [53, 55, 531, 704], "dy": [53, 704], "this_dx": 53, "argmin": [53, 154, 279, 389, 416, 536, 542, 550, 551, 690, 783, 784, 1010], "this_di": 53, "horizontalalign": [53, 66, 70, 78, 82, 83, 100, 134, 250, 266, 315, 322], "verticalalign": [53, 66, 77, 78], "edgecolor": [53, 57, 64, 69, 70, 73, 80, 83, 94, 98, 105, 125, 126, 134, 144, 151, 159, 161, 162, 164, 165, 170, 172, 180, 181, 183, 187, 196, 206, 215, 225, 232, 235, 236, 237, 254, 255, 256, 258, 260, 266, 269, 280, 283, 294, 303, 306, 307, 308, 311, 315, 322, 323, 325, 343, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 366, 367, 368, 636], "xlim": [53, 66, 82, 96, 100, 110, 114, 115, 116, 130, 144, 145, 146, 162, 168, 180, 181, 195, 202, 213, 215, 222, 229, 232, 237, 250, 258, 267, 272, 275, 289, 294, 306, 307, 348, 353, 354, 358, 368], "ptp": 53, "ylim": [53, 64, 66, 72, 75, 82, 96, 100, 114, 115, 116, 130, 144, 145, 152, 155, 162, 165, 180, 181, 195, 210, 212, 213, 215, 216, 217, 229, 232, 233, 237, 250, 258, 267, 272, 275, 279, 283, 289, 293, 294, 306, 307, 348, 353, 354, 358, 361, 368, 1023], "03": [53, 90, 116, 128, 158, 177, 184, 195, 204, 241, 254, 266, 272, 281, 339, 362, 384, 422, 752, 803, 990, 994, 1015], "033": [53, 1002, 1015], "plot_stock_market": [53, 1015], "handwritten": [53, 74, 83, 86, 90, 97, 99, 147, 192, 242, 243, 245, 247, 254, 269, 278, 309, 310, 317, 318, 338, 339, 362, 380, 414, 421, 452, 507, 546, 549, 554, 571, 693, 694, 695, 696, 697, 709, 710, 722, 741, 797, 799, 855, 867, 876, 886, 899, 991, 997, 1015, 1019, 1030], "pictur": [53, 58, 62, 74, 86, 104, 192, 254, 272, 382, 402, 414, 419, 422, 467, 498, 499, 526, 1014, 1015], "greek": [53, 58, 62, 74, 86, 104, 192, 414, 467, 1015], "coin": [53, 55, 58, 62, 74, 77, 78, 79, 82, 86, 91, 92, 94, 100, 104, 105, 192, 414, 422, 446, 467, 1006, 1015, 1027], "region": [53, 57, 58, 62, 65, 74, 85, 86, 87, 91, 94, 104, 164, 186, 192, 195, 223, 241, 250, 254, 255, 272, 323, 349, 357, 384, 394, 401, 414, 421, 424, 453, 455, 461, 467, 592, 991, 994, 997, 1000, 1004, 1008, 1010, 1015, 1027], "explor": [54, 75, 145, 146, 158, 198, 247, 248, 260, 281, 282, 288, 289, 297, 327, 331, 349, 362, 370, 381, 384, 386, 393, 409, 414, 421, 477, 803, 806, 814, 887, 983, 990, 991, 993, 999, 1001, 1004, 1018, 1022, 1028, 1041], "demo": [54, 55, 59, 74, 75, 77, 78, 79, 82, 83, 84, 86, 91, 92, 94, 97, 98, 99, 100, 102, 105, 159, 192, 198, 207, 229, 254, 269, 271, 281, 289, 325, 340, 361, 362, 389, 412, 414, 422, 445, 446, 449, 451, 452, 453, 455, 456, 458, 460, 463, 507, 516, 517, 518, 546, 709, 710, 722, 724, 741, 797, 799, 867, 886, 887, 1015], "summari": [54, 177, 333, 369, 370, 384, 399, 697, 718, 792, 919, 992, 995, 1013, 1028], "style": [54, 64, 66, 117, 155, 212, 231, 241, 284, 387, 394, 414, 422, 448, 452, 464, 705, 809, 825, 926, 927, 939, 1035, 1038, 1049], "background_gradi": 54, "set_table_attribut": 54, "inlin": [54, 234, 387, 388, 1010], "set_capt": 54, "set_table_styl": 54, "caption": [54, 107], "prop": [54, 110, 117, 229, 268, 306, 348, 369, 951, 954, 1024], "font": [54, 155, 212, 237, 255, 918, 920], "16px": 54, "000000": [54, 82, 195, 212, 241, 280, 324, 741], "502561": 54, "537775": 54, "546752": 54, "003683": 54, "376474": 54, "788755": 54, "627229": 54, "736540": 54, "189": [54, 223, 268, 276, 393, 903, 1007, 1015], "463088": 54, "500008": 54, "438776": 54, "914405": 54, "005771": 54, "894801": 54, "592511": 54, "192930": 54, "196795": 54, "181": [54, 297, 318, 393], "387599": 54, "820000": 54, "940000": [54, 316], "665000": 54, "480000": 54, "001500": 54, "500000": [54, 316], "240000": 54, "630000": 54, "998000": 54, "060000": 54, "780000": 54, "997900": 54, "281": [54, 116, 1015], "41": [54, 177, 223, 260, 369, 382, 384, 462, 474, 486, 497, 626, 629, 640, 651, 652, 657, 663, 665, 666, 667, 669, 686, 690, 691, 704, 785, 841, 996, 1000], "996900": 54, "lagged_df": 54, "renam": [54, 271, 281, 387, 391, 414, 451, 452, 464, 476, 477, 483, 532, 541, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 879, 1035, 1036, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "lagged_count_1h": 54, "lagged_count_2h": 54, "lagged_count_3h": 54, "lagged_count_1d": 54, "lagged_count_1d_1h": 54, "lagged_count_7d": 54, "lagged_count_7d_1h": 54, "lagged_mean_24h": 54, "lagged_max_24h": 54, "lagged_min_24h": 54, "lagged_mean_7d": 54, "lagged_max_7d": 54, "lagged_min_7d": 54, "tail": [54, 155, 191, 195, 223, 225, 280, 320, 526, 529, 990], "17369": 54, "247": [54, 886], "203": [54, 91], "224": [54, 91, 120, 161, 321, 414, 729, 1015], "157": [54, 85, 263, 393, 1015], "160": [54, 258, 348, 983, 1015, 1026], "169": [54, 96, 318], "135": [54, 177, 179, 334, 384, 1015], "67": [54, 104, 195, 241, 384, 503, 521, 522, 523, 632, 672, 718, 817, 984, 994, 1008, 1031, 1035], "732143": 54, "271": 54, "17370": 54, "315": [54, 300, 352, 384, 1015], "138": [54, 393, 421, 994], "97": [54, 71, 137, 177, 198, 258, 272, 339, 349, 384, 393, 400, 418, 651, 652, 657, 663, 665, 666, 667, 686, 687, 688, 989, 995, 1004, 1035], "125000": 54, "785714": 54, "17371": 54, "214": [54, 70, 180, 266, 589, 1015], "133": [54, 55, 94, 264, 1015], "386905": 54, "17372": 54, "164": [54, 421], "123": [54, 126, 146, 165, 283, 370, 421, 521, 522, 523, 560, 561, 839, 995, 1002, 1015], "107": [54, 150, 158, 213, 334, 414, 901, 995, 1015, 1037], "875000": 54, "464286": 54, "17373": 54, "109": [54, 64, 91, 995, 1037], "583333": 54, "244048": 54, "119": [54, 988, 1038], "102": [54, 393, 1026, 1037], "458333": 54, "815476": 54, "110": [54, 124, 150, 202, 220, 230, 232, 253, 326, 336, 442, 988, 989, 1015], "166667": 54, "369048": 54, "791667": 54, "112": [54, 92, 177, 382, 384, 1037], "666667": 54, "190476": 54, "113": [54, 297, 324, 393, 1015, 1038], "708333": 54, "422619": 54, "watch": [54, 375], "undefin": [54, 283, 401, 717, 733, 742, 745, 787, 963, 994, 1043, 1047, 1051], "unknown": [54, 57, 94, 195, 257, 280, 338, 340, 376, 382, 401, 409, 412, 422, 873, 879, 880, 957, 993, 1004, 1019, 1039, 1043, 1047, 1048], "separ": [54, 55, 57, 64, 65, 69, 70, 78, 93, 98, 100, 104, 110, 116, 125, 127, 128, 130, 133, 142, 144, 147, 150, 161, 177, 182, 191, 192, 196, 197, 200, 201, 222, 224, 244, 258, 268, 280, 283, 289, 290, 320, 322, 325, 331, 341, 344, 345, 347, 348, 349, 353, 354, 361, 370, 374, 383, 384, 389, 392, 395, 399, 401, 413, 414, 415, 416, 419, 421, 422, 424, 469, 517, 524, 538, 543, 545, 546, 552, 554, 586, 593, 594, 596, 615, 636, 643, 651, 652, 678, 681, 682, 695, 699, 729, 736, 749, 750, 752, 757, 796, 822, 838, 839, 865, 866, 908, 910, 911, 916, 917, 983, 984, 986, 988, 990, 991, 993, 1000, 1001, 1004, 1008, 1009, 1015, 1024, 1026, 1027, 1035, 1038, 1040, 1041, 1045, 1047, 1048, 1051, 1052], "dropna": [54, 184], "17210": [54, 1046], "aim": [54, 61, 117, 158, 191, 227, 308, 340, 353, 376, 382, 385, 387, 401, 409, 414, 416, 422, 453, 990, 994, 997, 1004, 1009, 1013, 1019, 1027, 1049], "futur": [54, 184, 224, 263, 332, 335, 385, 387, 389, 391, 401, 402, 409, 418, 422, 501, 539, 640, 964, 994, 995, 1009, 1010, 1018, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "ulterior": 54, "ident": [54, 60, 102, 154, 218, 223, 241, 250, 254, 343, 361, 382, 389, 401, 412, 414, 415, 416, 418, 424, 427, 443, 444, 457, 469, 470, 478, 480, 481, 484, 485, 486, 493, 508, 556, 564, 565, 569, 570, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 648, 684, 685, 704, 709, 710, 740, 789, 799, 805, 808, 818, 819, 822, 823, 848, 849, 855, 863, 864, 870, 871, 883, 895, 914, 915, 987, 988, 991, 994, 997, 998, 1009, 1039, 1043, 1044, 1045, 1049, 1053], "tempor": [54, 158, 207, 1013, 1014], "3889873516666431": 54, "account": [54, 55, 93, 130, 136, 142, 158, 184, 190, 195, 241, 257, 280, 303, 309, 357, 359, 362, 374, 383, 387, 401, 402, 406, 409, 414, 417, 418, 419, 421, 422, 468, 566, 567, 572, 573, 632, 633, 635, 637, 638, 654, 678, 684, 709, 712, 732, 733, 734, 742, 747, 760, 787, 788, 791, 792, 804, 808, 821, 880, 986, 988, 992, 994, 995, 996, 997, 1004, 1008, 1010, 1040, 1042, 1043, 1044, 1047, 1048, 1050, 1052], "cheat": [54, 349, 998, 1008, 1021, 1037], "laptop": [54, 395, 473, 904, 1049, 1050, 1051], "3000": [54, 102, 246, 898, 899], "train_idx": [54, 195, 401], "test_idx": [54, 401], "44300751539296973": 54, "optimist": [54, 212, 285, 361, 370, 712, 990, 994], "cv_mape_scor": 54, "neg_mean_absolute_percentage_error": [54, 152, 994, 1002], "44300752": 54, "27772182": 54, "3697178": 54, "real": [54, 70, 73, 93, 95, 107, 111, 114, 116, 117, 118, 142, 158, 182, 195, 227, 247, 250, 260, 274, 286, 294, 304, 307, 321, 322, 348, 353, 363, 374, 380, 381, 384, 391, 393, 396, 399, 400, 401, 412, 413, 414, 416, 418, 419, 421, 422, 474, 494, 495, 498, 499, 500, 501, 502, 505, 506, 509, 515, 556, 557, 558, 560, 561, 562, 563, 564, 565, 569, 570, 597, 599, 600, 601, 602, 603, 604, 605, 636, 704, 709, 728, 732, 756, 759, 761, 789, 799, 831, 863, 864, 908, 909, 910, 911, 912, 915, 917, 984, 985, 986, 991, 994, 996, 998, 999, 1000, 1010, 1012, 1015, 1030, 1035, 1048, 1052], "life": [54, 158, 274, 395, 991], "advis": [54, 224, 257, 370, 385, 387, 414, 422, 442, 651, 657, 659, 665, 667, 677, 692, 962, 986, 990, 996, 998, 1009, 1049], "deviat": [54, 61, 73, 99, 116, 145, 148, 149, 150, 151, 153, 177, 179, 184, 186, 188, 195, 202, 229, 260, 277, 278, 279, 280, 281, 283, 306, 307, 320, 325, 379, 383, 384, 392, 396, 401, 418, 421, 424, 455, 477, 506, 516, 517, 518, 519, 521, 522, 523, 527, 529, 530, 535, 557, 599, 616, 639, 649, 650, 676, 728, 756, 809, 825, 852, 875, 876, 886, 895, 896, 897, 990, 994, 1000, 1004, 1026, 1041, 1042, 1043, 1046, 1047, 1048], "363": [54, 362], "consolidate_scor": 54, "1f": [54, 61, 88, 91, 131, 203, 223, 254, 266, 268, 287, 329, 336, 362, 363], "pinball_loss_05": 54, "pinball_loss_50": 54, "pinball_loss_95": 54, "loss_funct": 54, "absolute_error": [54, 421, 563, 565, 567, 570, 676, 915, 917, 1048], "loss_func": 54, "n_job": [54, 92, 109, 110, 148, 149, 150, 155, 156, 163, 176, 177, 190, 195, 196, 197, 198, 244, 246, 262, 279, 281, 282, 284, 295, 297, 300, 329, 330, 331, 334, 357, 375, 387, 401, 421, 425, 442, 449, 451, 453, 455, 457, 460, 461, 462, 463, 466, 469, 472, 477, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 778, 782, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 865, 868, 901, 902, 960, 962, 983, 994, 995, 997, 1023, 1024, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1053], "fit_tim": [54, 96, 152, 212, 231, 282, 418, 829, 830], "startswith": [54, 107, 244, 313], "test_": [54, 163, 418], "x_i": [54, 116, 146, 172, 195, 224, 332, 357, 414, 419, 420, 421, 424, 619, 620, 624, 627, 628, 630, 841, 842, 845, 985, 986, 990, 996, 997, 998, 1004, 1008, 1009, 1010], "fulli": [54, 82, 93, 149, 155, 374, 381, 382, 401, 414, 420, 421, 423, 448, 452, 562, 563, 569, 570, 914, 915, 916, 917, 918, 920, 983, 984, 990, 999, 1007, 1013, 1048, 1049], "anticip": 54, "call": [54, 55, 58, 84, 86, 88, 92, 108, 126, 140, 147, 154, 174, 179, 183, 185, 187, 194, 196, 211, 223, 224, 227, 241, 257, 261, 263, 264, 280, 281, 289, 294, 295, 297, 300, 302, 325, 327, 331, 332, 361, 362, 363, 369, 374, 375, 376, 382, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 405, 406, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 426, 437, 445, 448, 451, 452, 454, 455, 456, 457, 458, 459, 462, 465, 467, 469, 470, 473, 474, 479, 487, 488, 489, 493, 496, 497, 500, 502, 508, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 582, 587, 588, 593, 594, 596, 602, 607, 612, 613, 615, 616, 619, 625, 632, 633, 634, 635, 636, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 709, 736, 746, 759, 775, 778, 782, 783, 784, 785, 797, 801, 802, 803, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 855, 857, 862, 863, 864, 865, 866, 869, 870, 871, 873, 875, 876, 878, 883, 886, 887, 890, 895, 896, 897, 898, 899, 903, 906, 907, 908, 909, 911, 912, 915, 917, 933, 937, 942, 943, 951, 952, 954, 960, 961, 962, 965, 968, 978, 983, 984, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1004, 1006, 1007, 1009, 1010, 1013, 1018, 1019, 1023, 1026, 1027, 1028, 1030, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aleator": 54, "quantile_list": 54, "styled_df_copi": 54, "extract_numer": 54, "mean_valu": 54, "std_valu": 54, "cols_to_convert": 54, "col": [54, 60, 65, 67, 76, 80, 87, 93, 97, 101, 102, 107, 110, 148, 164, 243, 260, 358, 516, 518], "min_valu": [54, 632, 1046, 1047], "bold": [54, 98, 155, 212, 218, 387], "55": [54, 195, 200, 218, 223, 241, 245, 339, 392, 414, 418, 496, 602, 803, 809, 817, 830, 994, 1035], "145": [54, 84, 414, 1015], "86": [54, 71, 107, 174, 214, 260, 275, 322, 338, 339, 792, 914, 994, 1024], "58": [54, 104, 115, 384, 416, 427, 480, 612, 768, 1004, 1024], "wherea": [54, 73, 86, 91, 105, 116, 159, 237, 260, 281, 282, 283, 289, 303, 325, 353, 357, 358, 376, 402, 418, 421, 449, 451, 570, 663, 664, 805, 821, 834, 986, 993, 995, 997, 1004, 1010, 1048, 1052], "That": [54, 67, 128, 142, 158, 177, 212, 250, 280, 284, 362, 363, 375, 381, 395, 401, 418, 423, 424, 448, 451, 452, 562, 569, 598, 821, 914, 915, 983, 991, 992, 994, 1000, 1010, 1044, 1045], "5th": [54, 155, 158, 187, 414], "95th": [54, 155, 158, 752], "gbrt_mean_poisson": 54, "mean_predict": [54, 186], "gbrt_median": 54, "median_predict": 54, "gbrt_percentile_5": 54, "percentile_5_predict": 54, "gbrt_percentile_95": 54, "percentile_95_predict": 54, "fill_between": [54, 155, 158, 168, 179, 184, 186, 188, 202, 203, 241, 280, 282, 283, 284, 290, 809, 825], "At": [54, 112, 142, 228, 292, 297, 299, 338, 341, 374, 375, 391, 402, 406, 411, 417, 421, 442, 445, 470, 593, 594, 596, 607, 834, 836, 873, 958, 983, 990, 993, 995, 999, 1008, 1018], "night": 54, "band": [54, 283, 322, 1004], "narrow": [54, 145, 155, 320, 322, 392, 846, 847], "certain": [54, 93, 153, 158, 195, 228, 240, 257, 280, 300, 324, 353, 370, 382, 383, 385, 391, 401, 404, 414, 419, 423, 643, 654, 658, 663, 668, 689, 866, 871, 906, 983, 986, 990, 991, 994, 995, 998, 1004, 1009, 1013, 1019, 1023, 1040, 1044, 1047, 1050], "And": [54, 192, 242, 243, 248, 257, 280, 361, 395, 409, 414, 418, 422, 535, 593, 594, 596, 697, 698, 990, 994, 1015, 1042], "wider": [54, 225, 422, 919, 990], "visibl": [54, 195, 196, 225, 359, 381, 387, 414, 862, 999, 1040, 1050], "lie": [54, 98, 120, 176, 195, 255, 320, 340, 347, 349, 419, 421, 611, 854, 856, 857, 858, 906, 907, 988, 991, 994, 1004, 1009], "span": [54, 93, 114, 155, 255, 277, 382, 414, 422, 554, 641, 803, 806, 994, 1027], "underestim": [54, 155, 196, 223, 241, 280, 387], "confid": [54, 64, 65, 66, 67, 158, 184, 186, 267, 280, 283, 341, 402, 413, 424, 641, 663, 664, 671, 673, 676, 679, 680, 681, 703, 707, 712, 725, 730, 731, 743, 744, 760, 793, 834, 873, 906, 908, 911, 990, 993, 994, 995, 1000, 1007, 1008, 1009, 1018, 1028, 1045], "produc": [54, 55, 65, 66, 82, 95, 107, 131, 155, 156, 157, 159, 207, 286, 318, 341, 370, 375, 382, 383, 387, 389, 392, 401, 402, 414, 415, 418, 419, 421, 445, 448, 451, 457, 524, 541, 564, 568, 586, 593, 598, 599, 637, 638, 805, 806, 807, 815, 820, 823, 827, 871, 881, 908, 911, 985, 986, 990, 992, 993, 994, 997, 1000, 1001, 1005, 1007, 1008, 1009, 1019, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "overli": [54, 65, 66, 212, 285, 370, 419, 994], "mapi": 54, "recent": [54, 225, 257, 385, 388, 392, 395, 401, 414, 473, 543, 570, 1008, 1018, 1038, 1047], "conform": [54, 586, 633, 834, 835, 994, 1013, 1014, 1042, 1048], "epistem": 54, "sktime": [54, 1013], "351": [54, 362, 1015], "plot_time_series_lagged_featur": [54, 1015], "acquir": [55, 150, 282, 1047], "Such": [55, 159, 179, 184, 194, 202, 207, 212, 224, 283, 361, 401, 402, 418, 419, 421, 560, 561, 661, 984, 994, 997, 1004, 1010, 1026, 1045, 1050, 1052], "ct": [55, 187, 264, 415, 469, 471, 472], "cellular": 55, "materi": [55, 336, 402, 586, 896, 897, 1012], "haar": [55, 1052], "wavelet": [55, 137, 419], "fidel": 55, "circular": 55, "central": [55, 225, 382, 414, 1000, 1013], "emmanuel": [55, 104, 1035, 1042, 1043, 1044, 1052], "gouillart": [55, 104, 1035], "nsup": 55, "ndimag": [55, 84, 85, 92, 318, 1027], "_weight": [55, 241], "orig": [55, 307], "floor_x": 55, "floor": 55, "hstack": [55, 72, 80, 165, 173, 248, 259, 275, 352, 418, 865], "_generate_center_coordin": 55, "l_x": 55, "mgrid": [55, 170], "build_projection_oper": 55, "n_dir": 55, "endpoint": [55, 321, 352, 640], "data_ind": 55, "camera_ind": 55, "data_unravel_indic": 55, "xrot": 55, "ind": [55, 80, 154, 165, 362, 846, 847], "logical_and": [55, 155], "proj_oper": 55, "coo_matrix": [55, 209, 457, 590, 591, 965, 968], "generate_synthetic_data": 55, "n_pt": 55, "ogrid": 55, "mask_out": 55, "gaussian_filt": [55, 84, 85, 92, 1027], "sigma": [55, 84, 85, 92, 116, 135, 155, 278, 280, 412, 416, 419, 421, 619, 654, 988, 990, 992, 996, 999, 1027], "logical_xor": [55, 183, 355], "binary_eros": 55, "128": [55, 56, 223, 374, 541], "proj": [55, 654], "randn": [55, 72, 73, 77, 92, 103, 104, 116, 117, 131, 135, 159, 172, 179, 183, 194, 197, 212, 217, 218, 222, 236, 237, 240, 267, 270, 271, 275, 287, 289, 290, 294, 306, 307, 327, 330, 331, 336, 348, 354, 355, 359, 389, 392, 648, 675, 677, 683, 692, 824, 909, 912], "rgr_ridg": 55, "rec_l2": 55, "rgr_lasso": 55, "rec_l1": 55, "wspace": [55, 56, 77, 82, 83, 100, 116, 128, 144, 223, 241, 250, 266, 268, 269, 272, 305, 313, 339, 346], "542": [55, 177, 207, 303, 384, 1015], "plot_tomography_l1_reconstruct": [55, 1015], "unstructur": [55, 74, 77, 78, 79, 85, 192, 247, 317, 414, 446, 450, 468, 508, 535, 859, 1006, 1015, 1018, 1039], "corpu": [56, 362, 363, 382, 419, 593, 594, 595, 596, 1028, 1036], "frobeniu": [56, 131, 448, 452, 464, 474, 475, 476, 477, 478, 479, 480, 481, 536, 542, 543, 545, 550, 551, 552, 990, 1042], "kullback": [56, 243, 419, 543, 545, 552, 697, 991, 1042], "leibler": [56, 243, 419, 543, 545, 552, 697, 991, 1042], "diverg": [56, 154, 243, 248, 305, 543, 545, 552, 697, 862, 991, 993, 994, 999, 1001, 1042, 1043, 1048], "probabilist": [56, 67, 69, 118, 127, 128, 137, 138, 178, 179, 182, 185, 186, 192, 256, 361, 401, 413, 420, 421, 442, 478, 481, 537, 539, 540, 546, 564, 593, 594, 615, 627, 648, 650, 681, 708, 745, 803, 828, 873, 908, 909, 911, 912, 987, 988, 990, 993, 994, 999, 1004, 1009, 1010, 1013, 1015, 1018, 1035, 1038, 1042], "semant": [56, 361, 362, 401, 549, 1028, 1029, 1030, 1037], "runnabl": [56, 391, 392], "coupl": [56, 90, 91, 93, 244, 381, 382, 412, 413, 414, 423, 594, 912, 983, 1009], "ten": [56, 60, 142, 148, 158, 177, 244, 272, 382, 384, 421, 525, 911, 1044], "lda": [56, 72, 124, 127, 130, 132, 138, 192, 309, 370, 384, 411, 509, 541, 546, 554, 555, 855, 1013, 1015, 1016, 1029, 1030, 1040], "proport": [56, 66, 78, 158, 176, 209, 223, 230, 236, 250, 260, 283, 303, 307, 310, 357, 359, 374, 382, 413, 414, 416, 418, 419, 421, 422, 443, 444, 451, 474, 479, 520, 554, 555, 560, 562, 564, 565, 566, 567, 568, 569, 588, 589, 593, 596, 632, 637, 663, 664, 671, 672, 673, 679, 680, 681, 683, 701, 706, 717, 804, 805, 806, 807, 820, 823, 832, 852, 863, 864, 880, 906, 907, 908, 911, 912, 914, 916, 918, 920, 932, 983, 993, 994, 997, 1000, 1008, 1009, 1010, 1040, 1052], "232": [56, 170, 361, 994, 1015], "226": [56, 414, 425, 449], "2000": [56, 66, 78, 88, 112, 129, 135, 200, 269, 272, 280, 297, 315, 333, 362, 382, 384, 414, 415, 421, 426, 457, 467, 538, 539, 564, 694, 696, 698, 747, 792, 801, 852, 882, 894, 991, 994, 1000, 1006, 1019, 1027], "072": [56, 442, 653], "211": [56, 285, 334, 341, 362, 882, 894], "212": [56, 154, 177, 285, 341, 384, 474, 505, 1000, 1026], "984": 56, "ensta": [56, 58, 75, 86, 99, 223, 241, 244, 281, 283, 361, 362, 363], "chyi": [56, 1038, 1039, 1040, 1041, 1042], "kwei": [56, 1038, 1039, 1040, 1041, 1042], "yau": [56, 1038, 1039, 1040, 1041, 1042], "chyikwei": 56, "n_top_word": 56, "nndsvda": [56, 419, 543, 545, 552, 1044, 1047], "plot_top_word": 56, "feature_nam": [56, 60, 124, 138, 149, 156, 160, 177, 195, 197, 232, 261, 303, 320, 329, 330, 331, 336, 346, 361, 366, 380, 382, 392, 415, 495, 496, 497, 501, 505, 506, 507, 509, 510, 515, 587, 636, 637, 638, 887, 918, 919, 920, 1002, 1010, 1051], "flatten": [56, 71, 246, 255, 278, 324, 346, 358, 393, 507, 574, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 855], "topic_idx": 56, "top_features_ind": 56, "argsort": [56, 58, 60, 61, 62, 154, 156, 197, 198, 223, 241, 329, 338, 339, 361, 362, 382, 1002], "top_featur": 56, "barh": [56, 156, 190, 191, 194, 195, 197, 198, 264, 327, 361, 362, 363], "fontdict": [56, 77], "labels": [56, 324], "set_vis": [56, 73, 304, 310, 320], "useless": [56, 151, 283, 393, 423, 520, 533, 663, 717, 990, 1004, 1044], "strip": [56, 241, 362, 374, 381, 382, 501], "header": [56, 107, 281, 361, 362, 382, 385, 422, 493, 494, 803, 806, 807, 817], "footer": [56, 107, 281, 361, 362, 382, 493, 494], "repli": [56, 361, 386, 387, 390], "english": [56, 60, 107, 361, 362, 363, 392, 422, 593, 594, 596, 1013, 1014, 1028, 1048], "occur": [56, 107, 153, 223, 227, 241, 357, 370, 387, 389, 395, 402, 412, 414, 416, 418, 422, 449, 513, 514, 577, 586, 593, 595, 596, 632, 676, 802, 803, 806, 807, 809, 817, 825, 828, 829, 830, 833, 876, 931, 994, 996, 1004, 1028, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "data_sampl": 56, "tfidf_vector": 56, "max_df": [56, 281, 342, 361, 362, 593, 596, 1046], "min_df": [56, 60, 107, 281, 342, 361, 362, 422, 593, 596, 1035, 1037, 1046], "max_featur": [56, 70, 146, 157, 259, 277, 292, 331, 421, 423, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 593, 596, 602, 914, 915, 916, 917, 983, 990, 1035, 1037, 1038, 1042, 1043, 1046, 1049, 1052], "stop_word": [56, 60, 361, 362, 422, 593, 594, 596], "tfidf": [56, 107, 342, 422, 596, 1028], "tf_vector": 56, "beta_loss": [56, 543, 545, 552, 1042], "alpha_w": [56, 419, 543, 545, 552, 1048], "00005": 56, "alpha_h": [56, 419, 543, 545, 552, 1048], "tfidf_feature_nam": 56, "solver": [56, 69, 72, 73, 84, 104, 192, 201, 212, 214, 215, 216, 223, 225, 231, 238, 239, 241, 315, 316, 317, 318, 327, 336, 361, 393, 399, 401, 405, 411, 414, 426, 457, 467, 476, 477, 483, 507, 538, 540, 545, 546, 549, 552, 554, 651, 652, 653, 657, 658, 663, 664, 665, 666, 667, 668, 671, 673, 674, 675, 677, 679, 681, 685, 686, 689, 692, 693, 694, 696, 698, 700, 792, 817, 832, 837, 840, 863, 864, 908, 909, 910, 911, 912, 988, 991, 994, 998, 1008, 1009, 1013, 1015, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mu": [56, 116, 117, 280, 419, 427, 478, 480, 481, 484, 485, 486, 545, 552, 988, 990, 1042, 1045], "mbnmf": 56, "learning_method": [56, 392, 541], "learning_offset": [56, 541], "tf_feature_nam": 56, "plot_topics_extraction_with_nmf_lda": [56, 1015], "frontend": [57, 393], "mainli": [57, 67, 91, 142, 145, 179, 289, 297, 374, 389, 413, 616, 996, 1001], "intend": [57, 95, 96, 132, 224, 353, 361, 387, 388, 389, 394, 399, 401, 418, 473, 587, 678, 704, 875, 876, 886, 904, 989, 990, 994, 998, 1005], "didact": [57, 387, 1014], "click": [57, 252, 262, 281, 330, 336, 387, 389, 395, 1018, 1019, 1021], "mous": [57, 381], "button": [57, 387, 395, 1026], "prettenho": 57, "tkagg": 57, "backend_tkagg": 57, "figurecanvastkagg": 57, "navigationtoolbar2tk": 57, "navigationtoolbar2tkagg": 57, "tkinter": 57, "tk": 57, "contourset": 57, "y_min": [57, 70, 96, 144, 151, 161, 170, 181, 255, 315, 322, 343, 353, 354, 640, 642], "y_max": [57, 70, 96, 144, 151, 161, 170, 181, 241, 255, 315, 322, 343, 353, 354, 640, 642], "x_min": [57, 70, 90, 96, 144, 151, 155, 161, 170, 181, 212, 255, 315, 322, 343, 353, 354], "x_max": [57, 70, 90, 96, 144, 151, 161, 170, 181, 255, 315, 322, 343, 353, 354], "surfac": [57, 70, 132, 141, 142, 143, 144, 146, 164, 187, 192, 206, 215, 232, 286, 303, 345, 346, 364, 365, 367, 368, 369, 421, 509, 558, 562, 569, 636, 768, 914, 920, 988, 993, 1008, 1009, 1010, 1015], "surface_typ": 57, "add_observ": 57, "set_surfac": 57, "intvar": 57, "coef0": [57, 200, 353, 356, 457, 540, 644, 645, 648, 779, 781, 908, 909, 910, 911, 912, 992, 1009], "kernel_map": 57, "hasattr": [57, 82, 94, 100, 118, 140, 151, 241, 254, 315, 322, 361, 401, 429, 433, 439, 955, 1045], "x2": [57, 120, 125, 144, 154, 182, 235, 389, 415, 593, 634, 704, 1027], "decision_surfac": 57, "delta": [57, 417, 457], "clear_data": 57, "add_exampl": 57, "example_ad": 57, "refit": [57, 149, 168, 174, 176, 192, 273, 279, 281, 284, 287, 288, 292, 401, 418, 424, 507, 572, 632, 664, 670, 718, 803, 806, 807, 817, 832, 911, 983, 990, 994, 1015, 1042, 1043, 1044], "docstr": [57, 387, 389, 393, 401, 453, 466, 477, 704, 706, 933, 983, 994, 997, 998, 1008, 1035, 1042, 1043, 1048, 1049, 1052], "set_xlim": [57, 70, 80, 98, 112, 116, 126, 147, 161, 191, 196, 221, 223, 228, 255, 266, 284, 286, 297, 305, 315, 320, 322, 323, 324, 325, 330, 336, 358], "attributeerror": [57, 415, 564, 582, 955, 1027, 1044, 1045, 1047, 1051, 1052], "get_tk_widget": 57, "pack": [57, 396, 1043], "fill": [57, 73, 151, 168, 197, 275, 305, 366, 401, 415, 419, 520, 532, 543, 545, 552, 592, 635, 918, 920, 984, 997, 1010, 1053], "_tkcanva": 57, "mpl_connect": 57, "button_press_ev": 57, "onclick": 57, "toolbar": 57, "controllbar": 57, "c_label": 57, "plot_kernel": 57, "xdata": 57, "ydata": 57, "update_exampl": 57, "scalex": 57, "scalei": 57, "examples_load": 57, "remove_surfac": 57, "plot_support_vector": 57, "plot_decision_surfac": 57, "old": [57, 241, 387, 391, 393, 414, 473, 541, 651, 657, 904, 991, 1014, 1035, 1040, 1041, 1043, 1048, 1049, 1050], "isinst": [57, 73, 151, 241, 401], "lineset": 57, "support_vector": [57, 347], "dash": [57, 72, 116, 142, 154, 165, 179, 182, 184, 195, 210, 215, 218, 224, 225, 232, 235, 236, 260, 280, 290, 351, 355, 1008], "bone": [57, 236, 359], "fm": 57, "kernel_group": 57, "radiobutton": 57, "command": [57, 254, 374, 375, 385, 387, 391, 393, 395, 405, 422, 513, 1013, 1028, 1037], "anchor": [57, 291], "valbox": 57, "stringvar": 57, "textvari": 57, "cmap_group": 57, "hyperplan": [57, 125, 144, 182, 192, 201, 215, 232, 258, 283, 344, 345, 346, 347, 348, 349, 353, 354, 517, 636, 663, 664, 671, 673, 679, 680, 681, 682, 906, 908, 910, 911, 1008, 1009, 1015], "train_button": 57, "get_pars": 57, "optpars": 57, "optionpars": 57, "op": [57, 391, 433, 663, 664, 671, 672, 673, 681, 682, 683, 863, 864, 906, 1004], "add_opt": 57, "action": [57, 332, 361, 386, 390, 391, 405, 1004, 1045], "dest": [57, 334], "argv": [57, 254], "opt": [57, 385, 389], "arg": [57, 257, 316, 388, 401, 419, 421, 428, 704, 870, 960, 990, 996, 997], "parse_arg": 57, "wm_titl": 57, "mainloop": 57, "__main__": [57, 342, 399], "svm_gui": [57, 1015, 1026], "iso": [57, 125, 178, 192, 235, 245, 615, 618, 619, 1015], "classic": [58, 218, 247, 266, 272, 384, 391, 416, 418, 419, 448, 452, 454, 464, 497, 505, 509, 515, 637, 638, 916, 917, 988, 990, 993, 996, 1004, 1013, 1022, 1035, 1036, 1040, 1049], "vertex": [58, 66, 414, 458, 1048], "en": [58, 64, 395, 536, 542, 600, 641, 669, 673, 676, 690, 691, 700, 710, 848, 849, 854, 855, 856, 857, 884, 900, 914, 915, 990, 994, 1009, 1010], "wiki": [58, 64, 393, 395, 600, 641, 673, 676, 700, 710, 848, 849, 854, 855, 856, 857, 884, 900, 914, 915, 990, 1010], "eigenvector_centr": 58, "webpag": [58, 200, 387], "pagerank": 58, "tradit": [58, 93, 223, 238, 362, 376, 413, 421, 422, 637, 699, 990, 993, 1004, 1013, 1018], "power_iter": 58, "martinsson": [58, 540, 546, 943], "dbpedia": 58, "bz2": [58, 513, 514], "bz2file": 58, "pprint": [58, 155, 257, 281, 382, 938], "urlopen": 58, "redirects_url": 58, "redirects_en": 58, "nt": 58, "redirects_filenam": 58, "page_links_url": 58, "page_links_en": 58, "page_links_filenam": 58, "resourc": [58, 80, 155, 190, 223, 317, 331, 373, 390, 400, 401, 421, 806, 807, 995, 1014, 1018, 1020, 1030, 1043, 1048, 1049], "wait": [58, 385, 387, 391, 401, 671, 672, 673, 681, 683, 1047], "wb": 58, "index_map": 58, "setdefault": [58, 921], "dbpedia_resource_prefix_len": 58, "shortname_slic": 58, "short_nam": 58, "nt_uri": 58, "uri": 58, "get_redirect": 58, "transit": [58, 357, 391, 1046], "malform": [58, 1039], "1000000": [58, 541], "08d": 58, "isoformat": 58, "closur": 58, "transitive_target": 58, "seen": [58, 65, 78, 93, 104, 118, 131, 137, 149, 155, 195, 196, 219, 247, 253, 257, 316, 320, 349, 361, 382, 389, 391, 400, 401, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 430, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 526, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 628, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 969, 975, 983, 989, 994, 997, 998, 1004, 1010, 1018, 1023, 1024, 1026, 1027, 1047, 1048, 1049, 1050, 1051, 1052], "get_adjacency_matrix": 58, "resolv": [58, 386, 387, 391, 395, 402, 422, 451, 457, 467, 696, 700, 943, 984, 994, 1042, 1044, 1045, 1048, 1052], "lil_matrix": 58, "float32": [58, 154, 246, 318, 334, 375, 382, 387, 389, 401, 411, 562, 563, 564, 565, 568, 569, 570, 571, 598, 599, 645, 646, 663, 704, 767, 871, 914, 915, 916, 917, 924, 970, 971, 972, 1010, 1019, 1028, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "del": [58, 393, 1047, 1048], "tocsr": 58, "5m": 58, "ram": [58, 91, 376, 421, 898, 899, 996, 1009, 1028, 1041, 1047, 1050, 1051], "5000000": 58, "strongest": [58, 216], "centrality_scor": 58, "networkx": [58, 396], "copyright": [58, 118], "aric": 58, "hagberg": 58, "lanl": 58, "gov": [58, 384], "dan": [58, 1035, 1039, 1040, 1041, 1043, 1044], "schult": 58, "dschult": 58, "pieter": [58, 1041, 1042, 1049], "swart": 58, "incoming_count": 58, "nonzero": [58, 60, 137, 222, 254, 284, 363, 412, 425, 449, 528, 529, 536, 542, 547, 553, 593, 596, 690, 691, 704, 848, 849, 852, 854, 856, 857, 994], "indptr": [58, 300, 369, 969, 970, 971, 972, 973, 974, 975, 1043, 1051], "dangl": 58, "isclos": 58, "guess": [58, 142, 151, 418, 421, 422, 483, 537, 543, 545, 546, 552, 792, 994, 1008], "prev_scor": 58, "l_inf": 58, "scores_max": 58, "err": [58, 120, 132, 142], "6f": [58, 132, 285, 741, 799], "wikipedia_principal_eigenvector": [58, 1015], "twenti": [60, 254, 384, 412, 414, 1028], "comp": [60, 120, 121, 131, 138, 318, 342, 361, 362, 363, 382, 1028], "window": [60, 342, 382, 387, 389, 390, 422, 1013, 1035, 1038, 1042, 1046, 1048, 1049], "misc": [60, 91, 131, 281, 342, 361, 362, 363, 382, 1027], "noth": [60, 107, 361, 362, 392, 547, 719, 869, 878, 927, 1004], "frequenc": [60, 67, 179, 196, 207, 217, 223, 254, 330, 331, 361, 362, 363, 382, 399, 413, 418, 419, 421, 422, 423, 556, 562, 564, 565, 566, 569, 593, 594, 595, 596, 609, 663, 664, 669, 671, 673, 679, 680, 681, 690, 691, 835, 870, 879, 880, 906, 908, 911, 914, 916, 932, 990, 991, 996, 1004, 1008, 1010, 1037, 1039, 1040, 1046, 1053], "cut": [60, 81, 84, 103, 104, 245, 391, 399, 412, 414, 451, 457, 458, 467, 593, 596, 696, 700, 1004], "coclust": [60, 412, 456, 518], "4415": 60, "3015": 60, "talk": [60, 107, 281, 361, 362, 363, 382, 401, 409, 1018, 1020, 1028], "polit": [60, 361, 382, 386, 990, 995], "mideast": [60, 382], "cosmo": 60, "angmar": 60, "alfalfa": 60, "alphalpha": 60, "prolin": [60, 325, 384], "benson": 60, "1948": 60, "4325": 60, "gun": [60, 382], "sci": [60, 107, 361, 362, 363, 382, 399, 493, 694, 698, 877, 991, 1004, 1028], "med": [60, 107, 289, 382, 1004, 1028], "geb": 60, "gordon": [60, 269, 1041, 1045, 1047, 1049], "clinton": 60, "pitt": 60, "cdt": 60, "surrend": 60, "veal": 60, "1259": 60, "3534": 60, "soc": [60, 382, 1028], "religion": [60, 281, 361, 362, 363, 382, 995, 1028], "alt": [60, 281, 342, 361, 362, 363, 382, 395, 493, 1028], "atheism": [60, 281, 342, 361, 362, 363, 382, 493, 1028], "god": [60, 361, 362, 1028], "jesu": [60, 361, 362], "kent": 60, "belief": [60, 280, 862, 999], "christ": 60, "faith": [60, 185, 354], "moral": [60, 108, 361, 663, 1043, 1047, 1048], "775": [60, 157, 1015], "1623": 60, "pc": [60, 342, 363, 382], "hardwar": [60, 342, 363, 374, 375, 382, 385, 399, 405, 411, 1013, 1049, 1050], "scsi": 60, "nada": 60, "vga": 60, "esdi": 60, "isa": 60, "kth": [60, 824], "s3": [60, 129, 177, 211, 212, 384, 1027], "vlb": 60, "bmug": 60, "2180": 60, "2802": 60, "mac": [60, 326, 342, 382, 387, 713, 994], "electron": [60, 177, 382, 384, 543, 545, 552, 632], "voltag": 60, "ship": [60, 163, 191, 366, 375, 385, 405, 422, 990, 1035, 1044], "circuit": [60, 991], "mpce": 60, "kolstad": 60, "number_norm": 60, "placehold": [60, 391, 632, 633, 634, 635, 818, 819, 822, 823, 984], "begin": [60, 140, 177, 179, 275, 282, 299, 332, 361, 370, 387, 392, 393, 401, 412, 414, 421, 558, 559, 564, 566, 567, 671, 672, 681, 682, 683, 983, 986, 990, 994, 1004, 1006, 1008, 1043, 1049, 1050], "By": [60, 83, 128, 158, 159, 160, 202, 227, 257, 289, 297, 320, 329, 335, 336, 353, 361, 375, 387, 389, 393, 394, 401, 406, 414, 415, 417, 418, 419, 420, 421, 423, 443, 446, 450, 451, 455, 469, 472, 473, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 529, 531, 554, 555, 562, 563, 564, 565, 569, 570, 590, 591, 593, 594, 596, 611, 614, 637, 638, 676, 678, 680, 682, 695, 697, 699, 702, 704, 705, 707, 708, 723, 733, 734, 738, 742, 787, 788, 791, 798, 800, 806, 807, 852, 866, 867, 879, 880, 882, 884, 894, 896, 904, 909, 910, 914, 915, 916, 917, 926, 927, 962, 983, 984, 986, 990, 994, 1001, 1002, 1004, 1006, 1010, 1019, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052, 1053], "isdigit": [60, 422], "numbernormalizingvector": 60, "build_token": [60, 422, 593, 594, 596], "super": [60, 65, 67, 389, 422, 1043], "forsal": [60, 363, 382], "rec": [60, 363, 382, 646], "auto": [60, 65, 67, 72, 95, 96, 126, 173, 174, 177, 183, 200, 206, 243, 248, 255, 262, 277, 279, 287, 300, 303, 308, 322, 329, 330, 331, 332, 333, 334, 345, 346, 347, 352, 355, 356, 363, 381, 382, 389, 421, 423, 424, 425, 446, 449, 450, 451, 452, 454, 455, 457, 460, 461, 462, 464, 467, 501, 513, 514, 540, 543, 545, 546, 549, 552, 554, 562, 563, 566, 567, 568, 569, 570, 572, 573, 598, 599, 602, 607, 612, 613, 634, 636, 637, 638, 640, 644, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 707, 739, 745, 806, 807, 834, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 863, 864, 879, 880, 887, 898, 899, 903, 906, 907, 908, 909, 910, 911, 912, 916, 917, 942, 943, 960, 963, 985, 988, 990, 991, 994, 995, 997, 1004, 1009, 1013, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "motorcycl": [60, 382], "sport": [60, 382], "basebal": [60, 382], "hockei": [60, 382], "crypt": [60, 382], "svd_method": [60, 456, 458, 537, 1038], "20000": [60, 130], "n_init": [60, 80, 81, 83, 88, 95, 96, 99, 102, 243, 244, 245, 246, 330, 333, 362, 414, 448, 452, 454, 456, 457, 458, 464, 467, 695, 699, 801, 802, 1027, 1035, 1043, 1049, 1050, 1051], "y_coclust": 60, "row_labels_": [60, 61, 62, 412, 456, 458], "y_kmean": 60, "fit_predict": [60, 94, 95, 98, 250, 257, 260, 307, 389, 401, 414, 432, 436, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 474, 568, 682, 796, 797, 801, 802, 852, 858, 866, 910, 1000, 1040, 1043, 1044, 1048, 1050, 1052], "document_nam": 60, "bicluster_ncut": 60, "get_indic": [60, 429, 456, 458], "float_info": 60, "row_compl": 60, "logical_not": [60, 102, 137, 226], "rows_": [60, 412, 429, 456, 458], "col_compl": 60, "columns_": [60, 412, 429, 456, 458], "most_common": 60, "counter": [60, 142, 287, 414, 681, 682, 683, 1048], "itemgett": 60, "revers": [60, 112, 177, 228, 280, 539, 546, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 793, 866, 994, 1035, 1036, 1045, 1047, 1051], "best_idx": [60, 279], "get_shap": [60, 429, 456, 458], "cluster_doc": 60, "cluster_word": 60, "cat_str": 60, "0f": [60, 96], "out_of_cluster_doc": 60, "word_col": 60, "word_scor": 60, "important_word": 60, "605": [60, 1015], "plot_bicluster_newsgroup": [60, 1015], "simultan": [61, 93, 129, 284, 288, 335, 357, 368, 379, 412, 414, 983, 994, 995, 1010, 1018, 1042], "identifi": [61, 124, 130, 136, 155, 156, 194, 195, 223, 226, 227, 269, 271, 278, 283, 289, 309, 327, 331, 353, 361, 362, 381, 382, 386, 387, 391, 392, 401, 414, 415, 418, 421, 422, 451, 455, 462, 492, 501, 513, 514, 560, 561, 562, 563, 568, 569, 570, 571, 611, 648, 654, 704, 717, 778, 831, 852, 871, 901, 902, 983, 990, 994, 1000, 1007, 1018, 1026, 1042, 1044, 1049, 1050], "particularli": [61, 70, 107, 108, 111, 137, 161, 224, 252, 280, 322, 330, 359, 370, 374, 387, 396, 401, 414, 415, 417, 420, 422, 501, 809, 825, 843, 943, 962, 963, 990, 991, 994, 996, 1002, 1014, 1018, 1027, 1035, 1040, 1042, 1043, 1049], "suit": [61, 128, 161, 195, 223, 224, 250, 271, 332, 333, 335, 361, 375, 387, 389, 392, 393, 395, 399, 405, 417, 419, 421, 455, 457, 508, 682, 843, 887, 937, 983, 986, 991, 994, 996, 997, 1008, 1013, 1014, 1018, 1021, 1042, 1049], "genom": [61, 518], "rearrang": [61, 62, 412], "kemaleren": [61, 62], "matshow": [61, 62, 104, 150, 175, 317, 507], "afterward": [61, 391, 540, 546, 830], "row_idx_shuffl": 61, "col_idx_shuffl": 61, "redefin": [61, 155, 195], "lost": [61, 95, 118, 382, 388, 399, 991, 994], "biclusters_": [61, 62, 429, 456, 458], "perfect": [61, 66, 75, 107, 117, 131, 133, 219, 223, 361, 362, 387, 391, 414, 418, 558, 559, 695, 699, 709, 710, 713, 722, 730, 732, 735, 741, 747, 760, 761, 789, 790, 799, 990, 994, 997, 1009, 1018, 1026, 1049], "ascend": [61, 108, 197, 326, 421, 455, 461, 632, 640, 918, 919, 920, 1008, 1045, 1051], "column_labels_": [61, 62, 412, 456, 458], "reorder": [61, 134, 401, 702, 723, 1014, 1043], "reordered_row": 61, "reordered_data": 61, "step": [61, 66, 72, 80, 92, 93, 96, 105, 107, 108, 109, 110, 111, 117, 121, 131, 135, 142, 147, 151, 152, 153, 163, 174, 175, 176, 181, 184, 195, 197, 223, 231, 241, 251, 252, 255, 261, 264, 272, 278, 281, 287, 289, 300, 302, 303, 308, 315, 318, 322, 325, 326, 330, 333, 343, 345, 349, 362, 363, 365, 370, 374, 382, 385, 386, 387, 389, 391, 392, 395, 399, 401, 412, 413, 414, 416, 417, 419, 421, 422, 423, 447, 452, 454, 541, 542, 543, 544, 551, 568, 593, 594, 596, 598, 599, 602, 611, 632, 649, 653, 671, 672, 674, 681, 683, 684, 685, 699, 705, 801, 802, 803, 806, 807, 817, 837, 838, 839, 840, 862, 863, 864, 866, 867, 869, 906, 907, 908, 909, 911, 912, 942, 943, 965, 969, 984, 990, 993, 998, 999, 1004, 1008, 1010, 1011, 1013, 1017, 1024, 1028, 1035, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1051], "outer": [61, 133, 285, 340, 456, 519, 645, 655, 656, 659, 986, 1036], "shade": [61, 91, 206, 303, 308, 345, 419], "488": [61, 1015], "plot_spectral_biclust": [61, 1015], "implant": 62, "row_idx": [62, 223], "col_idx": 62, "fit_data": 62, "323": [62, 64, 125, 254, 279, 1015], "plot_spectral_coclust": [62, 1015], "being": [64, 67, 73, 83, 90, 93, 118, 121, 124, 133, 142, 146, 158, 160, 179, 184, 195, 197, 200, 217, 257, 260, 274, 280, 318, 324, 325, 349, 353, 361, 363, 385, 386, 387, 389, 391, 392, 399, 401, 402, 409, 414, 416, 418, 421, 422, 423, 424, 425, 427, 446, 447, 449, 450, 455, 461, 474, 480, 498, 528, 574, 645, 654, 661, 677, 679, 692, 695, 699, 717, 723, 738, 740, 787, 793, 801, 846, 847, 852, 854, 856, 857, 858, 881, 899, 944, 983, 984, 990, 993, 994, 997, 1000, 1001, 1004, 1006, 1008, 1009, 1010, 1035, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "postprocess": [64, 413, 540, 546], "brier_scor": 64, "belong": [64, 67, 69, 93, 98, 260, 280, 329, 335, 340, 381, 382, 412, 413, 414, 415, 417, 418, 421, 429, 445, 448, 452, 453, 454, 456, 458, 528, 717, 735, 810, 816, 827, 853, 873, 887, 950, 951, 990, 993, 994, 996, 997, 998, 1000, 1009, 1013, 1019, 1026], "mblondel": [64, 86, 214, 244, 281, 361, 381, 513], "telecom": [64, 65, 80, 250, 1018], "balaz": [64, 1039], "kegl": [64, 1039], "jhm": [64, 65, 66, 67, 179, 180, 182, 183, 184, 185, 186, 188, 256], "informatik": [64, 65, 66, 67, 179, 180, 182, 183, 184, 185, 186, 188, 256, 994], "uni": [64, 65, 66, 67, 111, 146, 179, 180, 182, 183, 184, 185, 186, 188, 214, 255, 256, 340, 357], "bremen": [64, 65, 66, 67, 179, 180, 182, 183, 184, 185, 186, 188, 256], "50000": 64, "n_bin": [64, 65, 67, 91, 223, 241, 321, 323, 327, 443, 444, 871, 1004], "sample_weight": [64, 204, 223, 236, 241, 257, 330, 335, 336, 359, 387, 401, 406, 414, 421, 425, 431, 437, 442, 448, 449, 452, 454, 464, 465, 470, 474, 487, 488, 489, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 615, 616, 637, 638, 639, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 702, 703, 705, 707, 708, 712, 713, 714, 717, 718, 721, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 739, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 800, 803, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 871, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 954, 982, 994, 1008, 1009, 1010, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "sw_train": [64, 330], "sw_test": [64, 330], "With": [64, 73, 82, 105, 112, 124, 133, 158, 160, 173, 192, 196, 223, 225, 249, 251, 256, 258, 264, 280, 304, 374, 382, 387, 389, 401, 406, 414, 415, 418, 421, 423, 442, 444, 506, 546, 587, 637, 638, 663, 864, 867, 869, 880, 886, 887, 913, 915, 987, 990, 991, 994, 995, 997, 998, 1001, 1008, 1010, 1015, 1019, 1020, 1027, 1032, 1038, 1042, 1043, 1045, 1047, 1049], "prob_pos_clf": 64, "clf_isoton": 64, "prob_pos_isoton": 64, "clf_sigmoid": 64, "prob_pos_sigmoid": 64, "clf_score": 64, "No": [64, 144, 157, 207, 215, 229, 231, 232, 257, 339, 354, 357, 366, 384, 395, 405, 414, 479, 564, 565, 595, 596, 640, 650, 669, 681, 683, 690, 691, 801, 990, 1052], "clf_isotonic_scor": 64, "clf_sigmoid_scor": 64, "084": [64, 86, 134, 1015], "y_uniqu": 64, "rainbow": [64, 245], "this_i": [64, 229], "this_x": [64, 221, 229, 1026], "this_sw": 64, "lexsort": 64, "linewidth": [64, 72, 73, 75, 78, 96, 110, 114, 121, 126, 143, 155, 158, 160, 179, 183, 187, 212, 213, 217, 218, 219, 221, 224, 226, 229, 237, 240, 250, 258, 260, 289, 293, 306, 310, 321, 330, 336, 347, 348, 350, 355, 367, 1024], "51": [64, 80, 120, 184, 241, 297, 300, 414, 415, 770, 780, 785, 990, 1031], "uncalibr": [64, 65, 66, 442], "gnb": [64, 65, 67, 165, 421, 574, 996], "plot_calibr": [64, 1015], "redund": [65, 67, 138, 176, 267, 272, 336, 370, 383, 386, 387, 392, 401, 413, 520, 639, 1014, 1028, 1047], "uninform": [65, 67, 327, 383, 392, 422, 983, 990, 1043], "100_000": [65, 67, 195], "n_inform": [65, 67, 70, 125, 146, 149, 174, 176, 202, 207, 226, 227, 277, 283, 293, 310, 315, 322, 329, 357, 389, 392, 520, 529, 558, 559, 560, 561, 569, 570, 610, 611, 612, 613, 614, 651, 652, 657, 665, 666, 667, 670, 686, 687, 688, 836, 995, 1043], "n_redund": [65, 67, 70, 125, 149, 174, 176, 277, 283, 310, 315, 322, 392, 442, 520, 558, 560, 569, 836], "baselin": [65, 142, 152, 155, 166, 177, 198, 202, 241, 290, 299, 331, 362, 384, 414, 423, 556, 557, 639, 994, 997, 1028, 1051], "gridspec": [65, 67, 103, 266, 394], "lr": [65, 67, 147, 165, 166, 226, 238, 252, 253, 276, 283, 400, 406, 421, 573, 574, 575, 717, 978], "gnb_isoton": 65, "gnb_sigmoid": 65, "clf_list": [65, 67], "get_cmap": [65, 67, 354], "dark2": [65, 67, 244], "ax_calibration_curv": [65, 67], "calibration_displai": [65, 67], "grid_posit": [65, 67], "y_prob": [65, 67, 182, 443, 444, 714, 837, 863, 994, 1049, 1053], "poorli": [65, 67, 100, 114, 121, 145, 157, 247, 375, 414, 421, 533, 635, 990, 991, 1041], "violat": [65, 349, 395, 399, 401, 640, 930, 1001, 1008, 1010], "transpos": [65, 280, 426, 531, 543, 545, 552, 665, 666, 667, 668, 792, 943, 980, 986, 994, 1006, 1027, 1035, 1049], "albeit": 65, "strongli": [65, 67, 118, 121, 131, 152, 156, 195, 205, 238, 257, 286, 361, 387, 404, 405, 413, 421, 663, 740, 799, 990, 991, 1030, 1044, 1051], "plenti": 65, "greater": [65, 126, 142, 144, 195, 240, 255, 260, 269, 286, 299, 306, 307, 365, 374, 383, 392, 401, 413, 414, 417, 421, 446, 450, 451, 454, 457, 468, 477, 541, 546, 562, 563, 564, 565, 566, 567, 569, 570, 571, 598, 599, 602, 615, 616, 633, 645, 647, 650, 669, 671, 672, 676, 681, 682, 683, 697, 714, 717, 725, 739, 740, 743, 746, 792, 799, 801, 802, 836, 848, 849, 856, 857, 863, 864, 869, 884, 896, 900, 903, 906, 907, 914, 915, 916, 917, 943, 963, 983, 989, 990, 991, 994, 995, 1000, 1004, 1009, 1010, 1038, 1043, 1046, 1048, 1049, 1050, 1052], "exploit": [65, 299, 995, 1014, 1038], "score_nam": [65, 75, 256, 282, 295, 335, 362, 809, 825], "score_df": 65, "set_index": [65, 142, 155, 184, 212, 241, 280, 326, 362], "decim": [65, 185, 476, 477, 919, 1042, 1043], "098932": 65, "323200": 65, "937443": 65, "871965": 65, "851348": 65, "861533": 65, "117608": 65, "782755": 65, "940374": 65, "857400": 65, "875941": 65, "866571": 65, "098332": 65, "370738": 65, "938613": 65, "883065": 65, "836224": 65, "859007": 65, "108880": 65, "368896": 65, "940201": 65, "861106": 65, "871277": 65, "866161": 65, "refin": [65, 118, 477, 714, 994, 1028], "alter": [65, 191, 389, 401, 733, 734, 742, 787, 788, 791, 1040, 1044, 1047], "uncertainti": [65, 158, 179, 186, 202, 282, 413, 414, 572, 573, 648, 866, 984, 1006], "naivelycalibratedlinearsvc": [65, 67], "df_min_": [65, 67], "df_max_": [65, 67], "calibrated_df": [65, 67], "proba_pos_class": [65, 67], "clip": [65, 67, 241, 253, 320, 349, 640, 681, 745, 876, 1004, 1039, 1046, 1047], "proba_neg_class": [65, 67], "proba": [65, 67, 165, 442, 914, 916], "dual": [65, 67, 107, 109, 173, 174, 200, 255, 277, 279, 287, 322, 329, 346, 347, 357, 361, 422, 423, 476, 477, 483, 572, 573, 616, 644, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 686, 689, 739, 834, 846, 847, 906, 907, 908, 911, 994, 995, 1009, 1037, 1046, 1049, 1051], "svc_isoton": 65, "svc_sigmoid": 65, "opposit": [65, 91, 105, 133, 195, 196, 212, 287, 401, 413, 416, 418, 423, 448, 452, 454, 474, 543, 545, 552, 568, 717, 734, 852, 910, 1035], "behavior": [65, 75, 77, 90, 190, 192, 195, 196, 223, 241, 257, 272, 273, 283, 285, 317, 318, 320, 322, 327, 349, 370, 375, 381, 384, 387, 389, 391, 395, 396, 401, 413, 414, 418, 422, 541, 556, 571, 671, 672, 673, 681, 682, 683, 704, 706, 733, 734, 787, 788, 791, 804, 805, 808, 820, 821, 822, 823, 824, 843, 879, 906, 907, 983, 990, 994, 995, 1000, 1004, 1009, 1015, 1018, 1019, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "focus": [65, 114, 212, 297, 382, 399, 991, 1004, 1013], "far": [65, 98, 118, 152, 180, 186, 195, 223, 241, 349, 353, 361, 363, 387, 396, 424, 725, 886, 969, 999, 1000, 1009, 1018, 1026], "awai": [65, 66, 67, 98, 114, 151, 179, 180, 184, 226, 353, 354, 382, 413, 424, 633, 848, 849, 856, 857, 993, 994, 1009, 1026], "shown": [65, 86, 95, 123, 140, 144, 148, 155, 188, 194, 196, 207, 213, 221, 241, 248, 250, 255, 260, 268, 280, 283, 286, 289, 297, 305, 316, 317, 320, 321, 322, 338, 357, 361, 362, 387, 392, 402, 413, 414, 415, 418, 419, 420, 422, 424, 443, 465, 637, 703, 705, 706, 707, 718, 803, 817, 918, 920, 989, 990, 991, 994, 997, 1004, 1008, 1009, 1010, 1028, 1039, 1044, 1045, 1046, 1049], "niculescu": [65, 67, 413, 442, 444], "mizil": [65, 67, 413, 442, 444], "caruana": [65, 67, 413, 442, 444], "144943": 65, "465660": 65, "937597": 65, "872186": 65, "851792": 65, "861868": 65, "099820": 65, "376999": 65, "936480": 65, "853174": 65, "877981": 65, "865400": 65, "098758": 65, "321301": 65, "937532": 65, "873724": 65, "848743": 65, "861053": 65, "deal": [65, 95, 108, 158, 190, 195, 207, 247, 297, 353, 363, 387, 392, 415, 422, 423, 424, 479, 501, 708, 713, 767, 791, 872, 943, 990, 1018, 1025, 1038, 1050, 1051], "situat": [65, 82, 95, 109, 194, 195, 229, 250, 283, 387, 395, 416, 418, 419, 421, 473, 533, 539, 587, 879, 882, 894, 904, 988, 990, 996, 997, 1007, 1010, 1043], "icml": [65, 67, 413, 414, 422, 442, 444, 841, 843, 862, 994, 996, 1008, 1012], "2005": [65, 67, 117, 384, 413, 442, 444, 855, 990, 997, 1007], "205": [65, 1015], "plot_calibration_curv": [65, 1015], "simplex": [66, 675, 801, 881], "arrow": [66, 1049], "green": [66, 117, 126, 145, 160, 165, 179, 200, 248, 316, 321, 325, 330, 336, 401, 995, 1043, 1044, 1046, 1047], "600": [66, 88, 153, 162, 163, 196, 382, 685], "x_train_valid": 66, "y_train_valid": 66, "cluster_std": [66, 76, 82, 87, 93, 94, 95, 97, 98, 100, 101, 102, 235, 250, 269, 323, 351, 517], "x_valid": 66, "y_valid": 66, "randomforestclassifierifittedrandomforestclassifi": [66, 149, 150, 336], "cal_clf": 66, "prefit": [66, 401, 413, 423, 442, 572, 573, 602, 1014, 1047, 1048, 1049], "x27": [66, 108, 109, 147, 163, 166, 174, 195, 196, 197, 251, 252, 261, 262, 264, 271, 278, 280, 281, 287, 292, 318, 326, 330, 331, 333, 340], "calibratedclassifiercvifittedcalibratedclassifiercv": 66, "randomforestclassifierrandomforestclassifi": [66, 197, 262, 292], "clf_prob": 66, "cal_clf_prob": 66, "head_width": 66, "ro": 66, "bo": [66, 1047], "mid": [66, 349, 994, 996], "frac": [66, 116, 117, 142, 280, 287, 289, 332, 412, 413, 414, 416, 419, 420, 421, 422, 424, 437, 468, 470, 487, 488, 489, 559, 561, 563, 565, 567, 570, 573, 575, 616, 620, 624, 627, 628, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 685, 701, 733, 734, 759, 773, 839, 840, 849, 857, 864, 907, 909, 912, 915, 917, 986, 988, 989, 990, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1026], "shrink": [66, 118, 128, 156, 196, 207, 218, 221, 227, 243, 270, 320, 357, 419, 564, 565, 681, 683, 853, 863, 864, 908, 909, 910, 911, 912, 997, 1009, 1026], "perfectli": [66, 67, 75, 283, 294, 353, 404, 414, 421, 443, 572, 611, 709, 710, 720, 722, 740, 741, 761, 790, 799, 879, 989, 991, 994, 1009, 1048, 1049], "incur": [66, 624, 906, 1009, 1043], "decreas": [66, 77, 84, 93, 96, 104, 112, 158, 160, 176, 177, 187, 195, 196, 198, 231, 253, 254, 282, 287, 293, 315, 322, 325, 329, 365, 374, 376, 387, 413, 414, 421, 446, 450, 468, 526, 539, 540, 546, 562, 563, 564, 565, 566, 567, 569, 570, 571, 607, 640, 641, 642, 681, 682, 683, 711, 717, 731, 786, 793, 863, 864, 914, 915, 916, 917, 983, 985, 986, 990, 991, 994, 997, 998, 1001, 1002, 1008, 1009, 1018, 1026, 1037, 1042, 1045, 1048], "cal_scor": 66, "327": [66, 734, 1026], "549": 66, "p1d": 66, "p0": 66, "p1": [66, 165], "p2": [66, 165, 241], "calibrated_classifi": 66, "calibrated_classifiers_": [66, 413, 442], "this_p": 66, "renorm": 66, "argmax": [66, 135, 279, 293, 389, 421, 574, 834, 914, 1009, 1048], "401": [66, 1015], "plot_calibration_multiclass": [66, 1015], "gave": [67, 413, 803, 806, 807, 817, 873], "four": [67, 173, 187, 200, 205, 224, 268, 269, 339, 346, 383, 387, 401, 562, 569, 724, 914, 916, 932, 990, 992, 993, 994, 1004, 1012], "unusu": [67, 412, 1000, 1004, 1043], "prone": [67, 223, 268, 324, 399, 413], "practic": [67, 91, 108, 116, 121, 131, 148, 152, 153, 158, 179, 194, 195, 200, 207, 225, 250, 256, 281, 288, 306, 307, 331, 349, 353, 375, 387, 389, 390, 393, 395, 400, 401, 414, 416, 418, 419, 420, 421, 422, 424, 452, 457, 467, 526, 529, 594, 637, 638, 675, 801, 845, 899, 906, 983, 984, 988, 990, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1013, 1014, 1016, 1018, 1019, 1028, 1029, 1030, 1037, 1041, 1043, 1045, 1047], "complic": [67, 257, 315, 393, 424, 699, 997], "train_sampl": [67, 238, 239], "against": [67, 75, 121, 137, 145, 156, 172, 200, 214, 215, 232, 240, 257, 289, 326, 329, 349, 382, 387, 402, 413, 414, 418, 422, 443, 514, 547, 553, 556, 681, 683, 759, 761, 792, 805, 810, 812, 831, 835, 960, 986, 990, 994, 995, 997, 1009, 1012, 1019], "concis": [67, 223, 387, 392, 1046, 1048], "execut": [67, 190, 207, 212, 256, 285, 375, 387, 393, 409, 411, 414, 419, 425, 448, 466, 803, 809, 817, 825, 827, 828, 829, 830, 833, 851, 960, 961, 1004, 1007, 1015, 1020, 1028, 1037, 1040, 1043], "101": [67, 177, 297, 384, 852, 1036], "neg_log_loss": [67, 994], "rfc": [67, 263, 329, 1032], "despit": [67, 121, 221, 223, 241, 256, 309, 401, 406, 416, 632, 633, 635, 990, 997, 1018, 1043, 1044], "closest": [67, 84, 102, 227, 389, 414, 445, 447, 448, 452, 453, 454, 464, 658, 783, 784, 836, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 985, 988, 995, 997, 1026], "strictli": [67, 223, 241, 257, 320, 335, 362, 392, 401, 413, 417, 419, 422, 513, 514, 540, 546, 549, 566, 567, 593, 596, 647, 675, 676, 678, 680, 700, 705, 743, 770, 803, 806, 807, 813, 817, 829, 855, 882, 894, 898, 899, 901, 902, 906, 907, 911, 912, 941, 983, 985, 990, 994, 1004, 1008, 1036, 1046, 1051], "proper": [67, 93, 212, 241, 376, 393, 413, 421, 454, 546, 558, 681, 943, 969, 989, 990, 991, 994, 1009, 1035, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "infinit": [67, 224, 266, 283, 353, 374, 424, 451, 627, 628, 782, 801, 924, 926, 927, 986, 993, 1004, 1009, 1043, 1045, 1048, 1049, 1050, 1052], "hypothet": 67, "mi": [67, 75, 172, 414, 612, 613, 709, 759, 761, 984, 994, 1008], "intention": 67, "kept": [67, 271, 300, 357, 381, 391, 409, 424, 501, 540, 543, 545, 546, 552, 602, 615, 616, 624, 625, 649, 700, 801, 802, 927, 1004, 1043, 1044], "mitig": [67, 93, 158, 197, 327, 375, 376, 991, 1010, 1026, 1027, 1047], "inner": [67, 133, 155, 158, 281, 285, 299, 340, 374, 422, 448, 519, 587, 594, 623, 653, 674, 685, 779, 781, 986, 994, 1004, 1009, 1036, 1039, 1049, 1052], "finit": [67, 266, 272, 374, 382, 401, 473, 543, 556, 587, 611, 614, 615, 616, 663, 732, 782, 789, 801, 827, 904, 924, 925, 926, 927, 990, 993, 994, 1018, 1019, 1026, 1042, 1043, 1047, 1049, 1050], "push": [67, 387, 391, 413, 1017], "twice": [67, 292, 361, 363, 389, 424, 624, 734, 736, 945, 1044, 1052], "wide": [67, 98, 99, 124, 145, 254, 321, 399, 414, 419, 422, 983, 990, 1013, 1018, 1028, 1035, 1037, 1051], "approx": [67, 128, 255, 419, 421, 422, 994, 1001, 1008], "rare": [67, 196, 326, 370, 391, 399, 401, 404, 413, 414, 418, 594, 653, 663, 664, 674, 685, 906, 931, 962, 990, 1004, 1018, 1042, 1043, 1044, 1048, 1050], "explan": [67, 121, 257, 374, 386, 387, 413, 422, 983, 993, 995, 1010, 1018, 1038], "underli": [67, 94, 116, 162, 177, 198, 224, 226, 227, 257, 285, 304, 305, 353, 368, 375, 387, 399, 401, 404, 406, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 442, 456, 457, 458, 467, 469, 470, 476, 477, 483, 529, 560, 561, 569, 570, 572, 573, 574, 575, 598, 599, 602, 607, 663, 664, 670, 673, 678, 680, 685, 696, 700, 803, 806, 807, 817, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 849, 851, 906, 914, 915, 916, 917, 959, 990, 991, 995, 1000, 1007, 1009, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052, 1053], "move": [67, 151, 281, 318, 349, 386, 387, 391, 393, 413, 414, 554, 555, 576, 577, 578, 580, 582, 583, 961, 1027, 1035, 1036, 1040, 1043, 1045, 1048, 1049], "themselv": [67, 195, 320, 383, 389, 395, 401, 406, 412, 414, 421, 422, 424, 451, 620, 796, 1010, 1028, 1045], "gini": [67, 198, 223, 241, 262, 292, 331, 558, 559, 562, 563, 564, 565, 569, 570, 571, 792, 914, 915, 916, 917, 983, 1002, 1010, 1043, 1044, 1051, 1052], "criterion": [67, 114, 115, 198, 211, 231, 271, 292, 330, 389, 396, 401, 414, 419, 446, 450, 454, 457, 464, 467, 537, 542, 544, 551, 558, 559, 562, 563, 564, 565, 569, 570, 571, 611, 632, 649, 650, 653, 661, 671, 672, 673, 674, 676, 677, 679, 681, 682, 683, 685, 696, 700, 715, 802, 903, 908, 909, 910, 911, 912, 914, 915, 916, 917, 990, 993, 994, 1002, 1007, 1010, 1016, 1027, 1030, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "respect": [67, 93, 105, 124, 133, 142, 146, 148, 151, 160, 187, 200, 202, 207, 212, 225, 237, 240, 243, 245, 251, 254, 256, 260, 271, 289, 306, 307, 318, 325, 333, 346, 353, 374, 375, 382, 383, 387, 413, 414, 417, 419, 421, 422, 424, 451, 469, 472, 475, 476, 477, 478, 479, 480, 481, 539, 545, 546, 552, 558, 566, 567, 602, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 641, 648, 676, 695, 699, 717, 732, 786, 789, 801, 802, 842, 852, 863, 864, 918, 920, 983, 987, 988, 990, 991, 994, 997, 998, 999, 1000, 1004, 1009, 1013, 1017, 1018, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "why": [67, 75, 90, 128, 142, 148, 158, 195, 197, 200, 212, 277, 280, 297, 361, 362, 387, 395, 401, 414, 416, 419, 425, 449, 452, 456, 994, 996, 1009, 1023, 1026, 1038], "feel": [67, 191, 320, 386, 387, 395, 414, 451, 1010], "miscalibr": 67, "misspecifi": 67, "domingo": [67, 792, 994], "pazzani": 67, "proc": [67, 115, 413, 422, 455, 694, 698, 841, 983, 991, 996, 1000], "13th": 67, "intl": [67, 418], "1996": [67, 158, 414, 421, 425, 449, 521, 522, 523, 560, 561, 1004], "zadrozni": [67, 413, 442, 681], "bianca": 67, "charl": [67, 768, 1035, 1038, 1041, 1045, 1047, 1050], "elkan": [67, 330, 413, 442, 448, 452, 464, 681, 1041, 1045, 1046, 1048, 1049], "vol": [67, 187, 207, 286, 384, 414, 479, 564, 565, 633, 640, 650, 669, 690, 691, 801, 831, 843, 984, 996, 997], "081": [67, 1002, 1015], "plot_compare_calibr": [67, 1015], "troubl": [69, 422], "saga": [69, 214, 238, 239, 663, 664, 677, 679, 692, 817, 990, 1042, 1044], "multi_class": [69, 215, 238, 289, 329, 574, 615, 663, 664, 792, 840, 906, 990, 995, 1009, 1035, 1039, 1043, 1048, 1050], "n_classifi": [69, 574, 575], "classifier_idx": 69, "class_of_interest": [69, 289, 636, 1052], "vmin": [69, 78, 118, 128, 131, 138, 182, 185, 202, 207, 214, 239, 255, 270, 275, 317, 349], "vmax": [69, 89, 118, 128, 131, 138, 182, 185, 202, 207, 214, 239, 255, 270, 275, 317, 349], "mask_y_pr": 69, "04": [69, 78, 80, 92, 105, 120, 130, 137, 177, 184, 195, 204, 222, 241, 258, 266, 272, 280, 281, 288, 293, 313, 356, 384, 421, 423, 476, 477, 651, 652, 657, 665, 666, 667, 686, 792, 803, 817, 990, 994, 998, 1008, 1015], "scalarmapp": 69, "viridi": [69, 76, 300, 702], "cax": [69, 182, 291], "orient": [69, 128, 195, 243, 320, 401, 918, 991], "horizont": [69, 128, 243, 255, 320, 323, 392, 401, 469, 520, 702, 706], "543": [69, 1015], "plot_classification_prob": [69, 1015], "20newgroup": [69, 192, 201, 215, 239, 316, 318, 494, 663, 832, 990, 1015], "mnist": [69, 192, 201, 214, 231, 238, 300, 314, 316, 501, 663, 832, 863, 886, 929, 990, 998, 1015], "salt": [70, 255, 322, 1049], "convei": [70, 248, 322, 1026], "linearli": [70, 133, 144, 177, 195, 202, 237, 244, 250, 289, 290, 322, 325, 353, 361, 374, 384, 399, 419, 421, 520, 647, 712, 875, 876, 994, 997, 1000, 1009, 1026, 1042, 1051], "transpar": [70, 322, 979, 1018], "ga\u00ebl": [70, 83, 89, 110, 123, 124, 134, 206, 220, 221, 322, 353, 354, 402, 1018], "modifi": [70, 83, 89, 110, 112, 123, 124, 206, 207, 220, 221, 233, 243, 244, 245, 257, 260, 268, 335, 354, 359, 385, 387, 389, 391, 401, 414, 421, 424, 448, 452, 459, 464, 473, 487, 488, 489, 490, 500, 515, 586, 615, 616, 618, 624, 681, 683, 694, 698, 733, 734, 772, 787, 788, 791, 924, 976, 977, 990, 1007, 1008, 1014, 1025, 1029, 1030, 1035, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "listedcolormap": [70, 73, 151, 308, 311, 315, 322], "qda": [70, 384, 554, 555, 1016, 1030, 1040], "025": [70, 163, 225, 260, 277, 695, 699, 1015], "samm": [70, 142, 144, 151, 421, 558, 1051, 1052], "n_clusters_per_class": [70, 125, 146, 174, 176, 277, 310, 315, 322, 392, 520, 610, 612], "linearly_separ": [70, 315], "ds_cnt": [70, 322, 323], "rdbu": [70, 73, 128, 239, 315, 349, 354], "cm_bright": [70, 315, 322], "ff0000": [70, 308, 315], "0000ff": [70, 308, 315], "ep": [70, 82, 84, 87, 93, 103, 206, 208, 246, 254, 399, 414, 425, 449, 455, 460, 476, 477, 483, 636, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 686, 687, 688, 689, 695, 699, 719, 745, 858, 898, 899, 900, 1006, 1050, 1051], "lstrip": [70, 82, 100, 250, 315, 322], "plot_classifier_comparison": [70, 322, 1015], "versu": [70, 130, 141, 151, 161, 163, 170, 181, 192, 195, 201, 232, 238, 250, 255, 256, 258, 269, 273, 275, 297, 306, 308, 322, 337, 342, 346, 348, 353, 414, 418, 421, 424, 509, 539, 561, 615, 636, 644, 663, 664, 671, 673, 679, 680, 681, 682, 787, 803, 808, 828, 838, 867, 902, 903, 910, 911, 915, 983, 990, 994, 995, 1000, 1007, 1008, 1009, 1015, 1026, 1043], "8x8": [71, 123, 214, 254, 309, 318, 384, 507, 1025], "grayscal": 71, "imread": 71, "set_axis_off": 71, "gray_r": [71, 123, 131, 182, 244, 318, 338, 339, 1025], "entir": [71, 190, 223, 231, 318, 320, 330, 353, 369, 370, 381, 388, 389, 401, 409, 414, 418, 420, 422, 477, 497, 539, 593, 594, 595, 596, 652, 656, 658, 660, 663, 664, 666, 668, 670, 671, 673, 681, 687, 688, 738, 800, 834, 835, 838, 863, 865, 866, 879, 891, 892, 894, 895, 896, 897, 963, 983, 984, 994, 1004, 1008, 1010, 1026, 1044, 1045], "00": [71, 116, 131, 184, 195, 196, 214, 241, 254, 278, 281, 318, 336, 338, 339, 362, 381, 384, 393, 414, 421, 422, 610, 611, 718, 720, 792, 803, 817, 830, 915, 990, 994, 1004, 1006, 1008, 1015, 1027], "98": [71, 80, 82, 92, 100, 102, 118, 131, 177, 250, 278, 315, 322, 339, 384, 391, 418, 421, 664, 841, 897, 989, 996, 1023, 1028], "899": [71, 278], "figure_": [71, 196, 261, 329, 331, 394, 443, 636, 637, 702, 703, 705, 706, 707, 809, 825], "gt": [71, 108, 109, 147, 163, 195, 271, 278, 292, 385, 387, 391, 1021], "rebuilt": [71, 846, 847], "444": [71, 183, 1015], "plot_digits_classif": [71, 1015], "200": [72, 73, 82, 88, 92, 98, 112, 131, 144, 155, 162, 183, 209, 218, 224, 227, 228, 229, 235, 240, 244, 262, 266, 281, 287, 289, 290, 320, 323, 340, 348, 349, 368, 370, 382, 389, 399, 419, 421, 426, 445, 459, 473, 476, 477, 527, 538, 539, 540, 543, 544, 545, 548, 552, 589, 654, 656, 676, 684, 697, 817, 863, 864, 904, 908, 909, 910, 911, 912, 1009], "n_averag": 72, "n_features_max": 72, "ish": 72, "acc_clf1": 72, "acc_clf2": 72, "acc_clf3": 72, "n_features_rang": 72, "score_clf1": 72, "score_clf2": 72, "score_clf3": 72, "clf1": [72, 164, 165, 421, 574], "lsqr": [72, 327, 554, 677, 679, 692, 988, 1036, 1042, 1049], "clf2": [72, 164, 165, 389, 409, 421, 574], "store_precis": [72, 115, 474, 475, 478, 479, 480, 481], "assume_cent": [72, 115, 416, 427, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "clf3": [72, 164, 165, 389, 421, 574], "covariance_estim": [72, 554, 988, 1047], "features_samples_ratio": 72, "gold": [72, 217, 224, 226, 229, 233, 237, 240, 267, 272, 287, 306, 348, 393], "navi": [72, 107, 115, 132, 136, 137, 162, 202, 226, 234, 246, 267, 268, 269, 272, 287, 289, 305, 312, 340, 368], "289": [72, 195, 1015], "plot_lda": [72, 1015], "doubl": [73, 148, 292, 387, 401, 419, 543, 545, 552, 846, 847, 857, 978, 984, 1009, 1010, 1035, 1045, 1046], "dispers": [73, 414, 715, 729, 990], "cov_class_1": 73, "cov_class_2": 73, "make_data": [73, 99], "share": [73, 120, 161, 195, 271, 361, 369, 370, 374, 375, 389, 395, 414, 419, 422, 554, 673, 709, 713, 801, 802, 806, 807, 988, 1001, 1017, 1035, 1037, 1043, 1045, 1047, 1050], "spheric": [73, 95, 120, 159, 245, 268, 270, 271, 313, 383, 768, 801, 802, 990, 993, 997, 1013], "third": [73, 151, 156, 172, 177, 187, 241, 250, 272, 297, 305, 322, 335, 375, 382, 386, 399, 402, 422, 539, 593, 594, 595, 596, 805, 806, 807, 812, 848, 849, 850, 852, 854, 884, 896, 962, 983, 1005, 1035, 1046, 1051, 1052], "x_isotropic_covari": 73, "y_isotropic_covari": 73, "x_shared_covari": 73, "y_shared_covari": 73, "x_different_covari": 73, "y_different_covari": 73, "piec": [73, 85, 224, 375, 993], "misclassifi": [73, 142, 274, 353, 361, 1009], "star": [73, 126, 166, 387], "ellips": [73, 250, 266, 267, 268, 271, 272, 1000], "mpl": [73, 266, 267, 268, 272, 320], "plot_ellips": [73, 266], "cov": [73, 118, 121, 144, 271, 387, 401, 405, 408, 417, 427, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 524, 537, 539, 546, 553], "linalg": [73, 92, 114, 115, 118, 135, 137, 209, 266, 267, 268, 271, 272, 336, 387, 393, 419, 456, 457, 458, 467, 526, 537, 540, 546, 549, 662, 677, 679, 692, 696, 700, 941], "eigh": [73, 266, 267, 268, 271, 272, 419, 426, 538, 540, 1050], "arctan": [73, 267, 272, 383, 523], "180": [73, 124, 173, 266, 267, 268, 271, 272, 274, 309, 313, 393, 507, 1015], "ell": [73, 266, 267, 268, 272, 412], "set_clip_box": [73, 266, 267, 268, 271, 272], "set_alpha": [73, 266, 267, 268, 271, 272], "add_artist": [73, 244, 266, 267, 268, 271, 272], "plot_result": [73, 152, 266, 267, 272], "pcolormesh": [73, 161, 170, 206, 303, 308, 345, 349, 353, 636], "x_right": 73, "y_right": 73, "x_wrong": 73, "y_wrong": 73, "means_": [73, 266, 267, 268, 269, 271, 272, 554, 555, 801, 802], "yellow": [73, 126, 349, 995], "set_box_aspect": 73, "store_covari": [73, 554, 555, 1040, 1042], "ax_row": 73, "align": [73, 156, 158, 191, 243, 266, 291, 363, 401, 694, 698, 986, 997, 1008, 1029, 1030, 1051, 1052], "perpendicular": [73, 354], "bisector": 73, "399": [73, 1015], "plot_lda_qda": [73, 1015], "linkag": [74, 77, 78, 79, 82, 85, 90, 93, 94, 95, 105, 192, 198, 445, 446, 450, 451, 468, 517, 519, 527, 886, 1013, 1015, 1027, 1038, 1043, 1046], "dendrogram": [74, 105, 192, 198, 369, 414, 446, 450, 509, 1015, 1047], "uniformli": [75, 148, 155, 172, 250, 266, 329, 389, 521, 522, 523, 556, 647, 807, 815, 817, 885, 983, 984, 994, 997, 1004, 1039, 1044], "divid": [75, 81, 86, 125, 128, 174, 184, 223, 260, 266, 362, 370, 383, 384, 412, 414, 418, 419, 474, 475, 476, 477, 478, 479, 480, 481, 517, 524, 539, 546, 681, 682, 683, 724, 730, 738, 742, 760, 798, 800, 863, 864, 908, 911, 943, 946, 947, 983, 991, 993, 994, 997, 1004, 1008, 1028, 1035, 1042, 1043, 1046], "quiroz": [75, 95, 148, 158, 202, 207, 260, 281, 283, 325, 361, 362, 363], "fundament": [75, 87, 117, 362, 385, 399, 400, 417, 501, 543, 545, 552, 713, 990, 994], "frequent": [75, 142, 191, 283, 289, 290, 362, 384, 387, 422, 556, 595, 635, 856, 879, 880, 883, 895, 984, 986, 994, 1008, 1014], "ari": [75, 96, 362, 414, 710, 1040, 1046], "nmi": [75, 414, 722, 740, 741, 761], "ami": [75, 87, 96, 414, 709], "score_func": [75, 108, 109, 423, 597, 600, 601, 603, 604, 605, 746, 1035, 1037, 1052], "random_label": 75, "labels_a": 75, "labels_b": 75, "fixed_classes_uniform_labelings_scor": 75, "n_clusters_rang": 75, "n_run": [75, 99, 200, 362], "seaborn": [75, 143, 158, 194, 195, 202, 207, 271, 280, 387, 405, 408, 1013], "sn": [75, 143, 158, 194, 195, 202, 207, 271, 280], "color_palett": [75, 143, 158, 271], "colorblind": [75, 143, 158], "vx": 75, "errorbar": [75, 99, 110, 115, 117, 176, 185, 186, 302, 341, 352, 809, 825], "satur": [75, 195, 320], "uniform_labelings_scor": 75, "nwith": [75, 95, 99, 176, 362], "constantli": [75, 223, 1018], "unbound": [75, 993, 1049], "cardin": [75, 149, 150, 156, 197, 198, 326, 327, 335, 414, 421, 468, 558, 559, 562, 563, 564, 565, 569, 570, 571, 684, 879, 880, 887, 914, 915, 916, 917, 994, 995, 1002, 1004, 1049, 1050], "chart": [75, 153, 285, 995, 1021, 1038], "henc": [75, 98, 109, 195, 227, 254, 289, 349, 361, 362, 374, 382, 389, 391, 393, 401, 405, 414, 418, 421, 422, 492, 513, 544, 546, 547, 548, 568, 595, 648, 651, 657, 665, 667, 677, 692, 709, 710, 714, 720, 735, 761, 790, 799, 822, 823, 841, 842, 843, 844, 845, 881, 951, 991, 993, 994, 995, 1000, 1001, 1004, 1014, 1042, 1043, 1046, 1047, 1049], "stabil": [75, 146, 153, 195, 244, 285, 320, 357, 362, 401, 412, 451, 655, 659, 675, 844, 863, 864, 882, 894, 942, 984, 990, 993, 1004, 1014, 1019, 1035, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "mislead": [75, 149, 150, 156, 195, 388, 404, 421, 558, 559, 562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917, 1030, 1048], "meaning": [75, 198, 248, 309, 363, 412, 418, 422, 423, 553, 733, 734, 742, 787, 788, 791, 855, 998, 1008, 1009, 1035, 1051], "931": [75, 166, 1015], "plot_adjusted_for_chance_measur": [75, 1015], "brendan": [76, 445, 459, 1051, 1052], "frei": [76, 445, 459, 1045], "delbert": [76, 445, 459], "dueck": [76, 445, 459], "messag": [76, 82, 100, 107, 128, 257, 361, 362, 382, 385, 386, 387, 391, 392, 395, 396, 414, 445, 459, 473, 544, 548, 553, 579, 632, 717, 803, 806, 807, 809, 817, 825, 830, 833, 835, 855, 863, 864, 904, 925, 926, 927, 930, 933, 957, 978, 994, 1004, 1035, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "feb": [76, 445, 459], "labels_tru": [76, 87, 93, 102, 414, 709, 710, 719, 720, 722, 735, 740, 741, 759, 761, 790, 799], "af": 76, "prefer": [76, 82, 93, 158, 272, 289, 320, 370, 374, 375, 376, 385, 387, 388, 389, 401, 414, 418, 419, 421, 422, 445, 459, 476, 477, 483, 492, 513, 514, 632, 637, 638, 659, 663, 664, 706, 730, 732, 746, 761, 762, 837, 855, 881, 906, 907, 948, 960, 983, 986, 988, 990, 994, 999, 1009, 1010, 1013, 1017, 1026, 1036, 1042, 1044, 1048, 1049, 1052], "cluster_centers_indic": [76, 459], "cluster_centers_indices_": [76, 445], "labels_": [76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 89, 90, 93, 96, 99, 100, 101, 103, 105, 333, 335, 362, 387, 401, 414, 432, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 715, 1027, 1040], "n_clusters_": [76, 87, 93, 101, 446, 450], "sqeuclidean": [76, 455, 462, 782, 783, 784], "872": [76, 1002], "912": 76, "871": [76, 116, 117, 416, 479], "753": [76, 361], "cycler": 76, "class_memb": 76, "cluster_cent": [76, 99, 101, 102, 466], "293": [76, 125, 254, 1015], "plot_affinity_propag": [76, 445, 459, 1015], "impos": [77, 95, 160, 217, 227, 326, 399, 414, 419, 421, 422, 532, 662, 990], "simpli": [77, 121, 161, 179, 187, 247, 258, 260, 289, 313, 331, 332, 374, 382, 387, 389, 392, 399, 401, 416, 417, 418, 419, 421, 422, 490, 700, 766, 769, 873, 945, 986, 994, 995, 996, 997, 1008, 1020, 1028, 1042, 1043, 1044], "There": [77, 84, 148, 179, 241, 247, 257, 272, 275, 277, 280, 299, 361, 380, 382, 384, 387, 388, 389, 392, 399, 401, 402, 405, 412, 414, 419, 421, 422, 423, 451, 457, 467, 539, 558, 559, 564, 565, 593, 594, 596, 611, 650, 984, 990, 991, 992, 993, 994, 997, 1001, 1004, 1008, 1009, 1010, 1012, 1017, 1027, 1035, 1043], "unstabl": [77, 104, 195, 414, 416, 417, 694, 698, 942, 943, 1010, 1039, 1040, 1042, 1047, 1049, 1051], "quickli": [77, 261, 316, 329, 384, 387, 388, 418, 421, 697, 782, 990, 997, 998, 1018, 1028, 1046], "fight": [77, 227, 1018], "percol": 77, "merg": [77, 79, 84, 89, 332, 385, 387, 390, 395, 399, 402, 414, 445, 446, 447, 450, 451, 468, 823, 1027, 1035, 1042], "exagger": [77, 195, 697, 991], "behaviour": [77, 133, 158, 224, 225, 241, 351, 387, 401, 414, 421, 564, 565, 569, 570, 607, 746, 804, 805, 808, 820, 821, 822, 823, 824, 904, 914, 915, 967, 983, 984, 994, 1004, 1043, 1046, 1047, 1050, 1051], "mechan": [77, 257, 358, 361, 375, 387, 389, 413, 414, 422, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 992, 1010, 1018], "resembl": [77, 227], "brittl": [77, 414], "pronounc": [77, 78, 90, 184], "geometri": [77, 414, 991, 997], "instabl": [77, 195, 310, 424, 457, 540, 544, 548, 700, 1042, 1045, 1048], "1500": [77, 88, 95, 100, 105, 126, 243, 247, 266], "knn_graph": 77, "include_self": [77, 82, 105, 700, 859, 860, 1039], "848": [77, 1015], "plot_agglomerative_clust": [77, 1015], "waveform": 78, "cityblock": [78, 82, 414, 455, 462, 766, 782, 783, 784, 997], "invari": [78, 384, 401, 414, 424, 619, 694, 751, 821, 822, 990, 991, 994, 1009, 1014, 1043, 1046, 1047, 1048], "ie": [78, 104, 129, 445, 709, 990, 1004], "character": [78, 241, 365, 414, 418, 991], "ill": [78, 118, 228, 318, 476, 477, 483, 655, 656, 659, 660, 661, 687, 688, 990, 993, 1027, 1045], "recov": [78, 103, 118, 129, 130, 135, 152, 179, 194, 207, 222, 223, 227, 243, 363, 416, 420, 423, 426, 465, 538, 564, 990, 991, 993, 1014, 1027, 1041], "put": [78, 96, 170, 179, 181, 255, 262, 266, 315, 322, 333, 343, 354, 359, 376, 389, 391, 392, 395, 424, 448, 452, 464, 520, 619, 652, 666, 801, 883, 887, 895, 908, 909, 910, 911, 912, 933, 984, 991, 993, 994, 995, 1001, 1004, 1020, 1022, 1028], "cc": [78, 385], "patheffect": 78, "sqr": 78, "sign": [78, 115, 121, 129, 132, 144, 207, 271, 315, 357, 387, 414, 419, 422, 549, 587, 594, 611, 640, 641, 663, 664, 671, 673, 679, 680, 681, 682, 739, 746, 906, 910, 941, 943, 959, 990, 994, 999, 1004, 1008, 1009, 1027, 1035, 1039, 1044, 1048, 1050], "phi": [78, 419, 747, 872, 986, 994, 1004, 1009], "phase_nois": 78, "amplitude_nois": 78, "additional_nois": 78, "f7bd01": 78, "377eb8": [78, 82, 100, 101, 250], "f781bf": [78, 82, 100, 101], "set_label": [78, 182, 254], "tight": [78, 137, 144, 151, 170, 173, 208, 210, 215, 216, 217, 228, 232, 235, 240, 245, 248, 270, 300, 306, 307, 311, 312, 345, 349, 352, 354, 366, 587, 697, 1047], "avg_dist": [78, 785], "set_path_effect": 78, "withstrok": 78, "foreground": [78, 104], "cividi": 78, "45": [78, 102, 110, 120, 158, 173, 184, 197, 212, 223, 241, 287, 291, 292, 339, 349, 418, 421, 422, 569, 570, 632, 639, 651, 652, 657, 665, 666, 667, 686, 687, 688, 792, 801, 910, 984, 994, 1002, 1012, 1024, 1031, 1035, 1038], "interclass": 78, "036": [78, 86, 96, 219, 393, 477, 1015], "plot_agglomerative_clustering_metr": [78, 1015], "hierarchi": [79, 198, 387, 455, 461, 468, 999, 1027], "plot_dendrogram": 79, "kwarg": [79, 131, 257, 389, 394, 428, 432, 436, 443, 447, 453, 455, 469, 474, 540, 543, 545, 568, 636, 651, 652, 657, 658, 665, 666, 667, 668, 682, 686, 689, 703, 704, 705, 707, 746, 865, 866, 870, 910, 921, 954, 960, 1042, 1046, 1048, 1052], "children_": [79, 446, 450, 468], "current_count": 79, "child_idx": 79, "leaf": [79, 147, 159, 161, 365, 369, 414, 421, 425, 446, 447, 448, 449, 450, 451, 455, 462, 468, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 914, 915, 916, 917, 918, 919, 997, 1010, 1038, 1040, 1042, 1046, 1049], "linkage_matrix": 79, "column_stack": [79, 315, 322], "distances_": [79, 446, 450, 1047], "distance_threshold": [79, 446, 450, 1044, 1047], "truncate_mod": 79, "parenthesi": [79, 387], "096": [79, 177, 1015], "plot_agglomerative_dendrogram": [79, 1015], "scalabl": [80, 82, 100, 192, 199, 255, 273, 334, 362, 387, 414, 421, 422, 453, 496, 507, 594, 645, 809, 820, 830, 832, 844, 867, 876, 878, 906, 908, 911, 912, 986, 989, 991, 994, 1007, 1009, 1015, 1018, 1035, 1038, 1039, 1045, 1046, 1049, 1050], "hundr": [80, 154, 244, 324, 382, 418, 421, 566, 567, 991, 1046], "thousand": [80, 148, 158, 254, 256, 324, 362, 382, 414, 421, 863, 864, 911, 991, 1028, 1044, 1046], "million": [80, 94, 184, 200, 422, 697, 991, 1009, 1018, 1049, 1050], "chose": [80, 195, 1023], "enjoi": 80, "edit": [80, 384, 386, 387, 390, 391, 395, 399, 405, 535, 539, 836, 988, 990, 995, 1001, 1028], "158": [80, 340, 421, 674, 1015], "manojkumarsivaraj334": 80, "cpu_count": [80, 148, 300, 962], "xx": [80, 96, 116, 151, 155, 161, 170, 181, 182, 183, 196, 210, 230, 233, 234, 235, 236, 237, 248, 250, 258, 270, 306, 315, 322, 323, 343, 348, 349, 354, 355, 358, 359, 391], "yy": [80, 96, 116, 151, 161, 170, 181, 183, 196, 230, 234, 235, 236, 237, 248, 250, 258, 306, 315, 322, 323, 343, 348, 349, 354, 355, 358, 359], "n_center": [80, 517], "25000": 80, "colors_": 80, "cname": 80, "birch_model": 80, "final_step": 80, "subcluster_centers_": [80, 447], "this_centroid": 80, "set_autoscaley_on": 80, "mbk": [80, 102], "256": [80, 86, 91, 154, 326, 375, 382, 414, 421, 454, 473, 542, 551, 568, 862, 894, 904, 1028, 1049], "max_no_improv": [80, 99, 102, 454, 542, 543, 544, 551, 1049, 1050], "t_mini_batch": [80, 102], "mbk_means_labels_uniqu": 80, "cluster_centers_": [80, 81, 86, 88, 96, 98, 99, 101, 102, 128, 333, 362, 445, 448, 452, 453, 454, 1027], "414": [80, 241, 415, 730, 760, 882, 894, 994, 1015], "plot_birch_vs_minibatchkmean": [80, 1015], "cloud": [81, 120, 127, 129, 192, 395, 419, 538, 546, 697, 994, 1012, 1013, 1015, 1027], "__doc__": [81, 112, 184, 269, 401], "n_clusters_list": 81, "clustering_algorithm": [81, 82, 100], "algorithm_nam": 81, "algo": [81, 137], "hide": [81, 387, 395, 841, 842, 843, 844, 845, 1038, 1043, 1051], "label_out": 81, "974": [81, 309, 1015], "plot_bisect_kmean": [81, 1015], "null": [82, 108, 195, 196, 197, 280, 286, 414, 418, 501, 653, 674, 685, 709, 735, 761, 799, 831, 990, 991, 994, 1009, 1045], "mismatch": [82, 993, 1044], "noisy_circl": [82, 100], "noisy_moon": [82, 100], "no_structur": [82, 100], "anisotropicli": [82, 100], "170": [82, 95, 96, 100, 393], "x_aniso": [82, 95, 100], "aniso": [82, 100], "plot_num": [82, 100, 250], "default_bas": [82, 100], "damp": [82, 414, 445, 459], "min_sampl": [82, 87, 103, 399, 401, 414, 425, 449, 451, 455, 460, 461, 462, 676, 990, 1044, 1048], "min_cluster_s": [82, 103, 335, 414, 451, 455, 461, 1044], "allow_single_clust": [82, 451], "hdbscan_min_cluster_s": 82, "hdbscan_min_sampl": 82, "220": [82, 1035], "i_dataset": [82, 100, 250], "algo_param": [82, 100], "param": [82, 93, 99, 100, 108, 153, 154, 156, 157, 243, 256, 257, 278, 280, 288, 292, 304, 316, 336, 387, 389, 401, 406, 421, 424, 428, 431, 437, 438, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 815, 817, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 950, 951, 983, 1041, 1045, 1046, 1048, 1049, 1052], "easier": [82, 100, 104, 118, 152, 202, 208, 252, 260, 277, 278, 320, 349, 361, 370, 382, 387, 389, 392, 395, 399, 405, 416, 418, 473, 520, 904, 937, 989, 994, 1001, 1010, 1014, 1018, 1028, 1044, 1049], "bin_seed": [82, 101, 453, 466, 1046], "two_mean": 82, "nearest_neighbor": [82, 457, 696], "average_linkag": 82, "gmm": [82, 97, 192, 265, 267, 270, 271, 272, 509, 517, 802, 822, 993, 1015, 1035, 1036, 1039, 1040, 1041], "covariance_typ": [82, 267, 268, 270, 271, 272, 801, 802, 1051], "nkmean": 82, "npropag": 82, "ncluster": 82, "nmixtur": 82, "catch": [82, 100, 317, 375, 395, 396], "catch_warn": [82, 100, 257, 316, 317], "filterwarn": [82, 100, 238, 316, 317, 387, 1004], "userwarn": [82, 100, 144, 188, 215, 232, 275, 354, 366, 392, 717, 1004, 1041, 1043, 1048], "t1": [82, 84, 100, 238, 245, 248, 250], "ff7f00": [82, 100, 250], "4daf4a": [82, 100], "a65628": [82, 100], "984ea3": [82, 100], "999999": [82, 100], "e41a1c": [82, 100], "dede00": [82, 100, 101], "transax": [82, 100, 247, 250, 268, 308, 322], "134": [82, 83, 89, 91, 134, 154, 280, 1015, 1038], "plot_cluster_comparison": [82, 1015], "deliv": [83, 374, 1018], "bad": [83, 98, 99, 180, 195, 361, 370, 387, 414, 424, 697, 750, 983, 990, 991, 996, 1002, 1027, 1035], "though": [83, 93, 148, 177, 200, 202, 260, 286, 305, 322, 324, 362, 363, 370, 374, 381, 384, 387, 389, 400, 401, 414, 419, 420, 421, 422, 423, 704, 810, 812, 906, 983, 984, 986, 991, 994, 997, 1002, 1004, 1008, 1028, 1043], "3d": [83, 86, 105, 124, 134, 220, 243, 245, 247, 369, 422, 511, 591, 957, 1027, 1042, 1043, 1045], "mplot3d": [83, 105, 124, 134, 196, 220, 243, 245], "noqa": [83, 105, 124, 134, 155, 177, 190, 191, 196, 220, 243, 245, 291, 292, 331, 361, 391, 584, 585, 632, 806, 807, 983, 1044], "f401": [83, 105, 124, 134, 196, 220, 243, 245], "k_means_iris_8": 83, "k_means_iris_3": 83, "k_means_iris_bad_init": 83, "est": [83, 163, 195, 257, 259, 322, 331, 370, 409, 421, 567, 739, 871, 983, 994, 1004, 1008, 1046, 1047], "elev": [83, 105, 124, 134, 196, 220, 243, 247, 496], "azim": [83, 105, 124, 134, 196, 220, 243, 247], "xaxi": [83, 124, 134, 148, 220, 243, 245, 248, 300, 305, 361], "set_ticklabel": [83, 124, 134, 220, 361], "zaxi": [83, 124, 134, 220, 243], "petal": [83, 124, 136, 138, 151, 264, 331, 334, 384, 415, 919, 1010, 1025, 1026], "sepal": [83, 124, 136, 138, 151, 181, 206, 264, 303, 331, 334, 346, 384, 1004, 1025, 1026], "set_zlabel": [83, 124, 220], "setosa": [83, 124, 134, 136, 289, 290, 384, 509, 1019, 1026], "versicolour": [83, 124, 134, 136, 384, 1026], "virginica": [83, 124, 134, 136, 289, 290, 384, 509, 994, 1026], "text3d": [83, 134], "305": [83, 284, 393, 1015], "plot_cluster_iri": [83, 1015], "voxel": [84, 104, 590], "partli": [84, 773], "solut": [84, 202, 207, 212, 214, 228, 237, 250, 256, 332, 349, 385, 389, 401, 412, 414, 416, 418, 419, 422, 423, 454, 456, 458, 536, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 615, 651, 653, 655, 657, 659, 660, 661, 663, 665, 667, 669, 670, 671, 672, 673, 674, 677, 679, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 801, 802, 817, 855, 863, 864, 987, 988, 990, 991, 993, 998, 1000, 1008, 1009, 1012, 1018, 1023, 1026, 1028, 1035, 1038, 1048, 1049, 1050], "partit": [84, 104, 107, 159, 161, 280, 317, 401, 412, 413, 414, 418, 421, 454, 456, 458, 467, 516, 562, 563, 564, 565, 568, 569, 570, 709, 710, 720, 790, 854, 914, 915, 916, 917, 993, 997, 1000, 1004, 1010, 1028], "cluster_qr": [84, 414, 457, 467, 1049], "qr": [84, 225, 411, 539, 546, 549, 942, 943, 991, 1041, 1052], "pivot": [84, 291, 292], "cheung": [84, 1036], "andrew": [84, 414, 467, 696, 700, 722, 741, 799, 881, 998, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "knyazev": [84, 414, 457, 467, 700, 1045, 1048, 1049], "ucdenv": 84, "skimag": [84, 85, 381, 1027], "orig_coin": [84, 85], "speed": [84, 85, 95, 107, 131, 140, 148, 191, 196, 209, 212, 216, 260, 300, 331, 339, 361, 363, 376, 387, 390, 396, 399, 401, 411, 413, 414, 419, 421, 422, 425, 448, 449, 452, 453, 454, 455, 457, 462, 464, 465, 466, 467, 536, 537, 615, 632, 637, 638, 639, 644, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 686, 689, 697, 801, 802, 809, 830, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 881, 943, 983, 986, 991, 993, 995, 1008, 1018, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "down": [84, 85, 117, 142, 238, 239, 245, 254, 255, 257, 283, 297, 318, 320, 353, 370, 381, 390, 395, 401, 416, 419, 448, 455, 461, 595, 598, 599, 644, 654, 778, 782, 785, 875, 876, 881, 884, 885, 896, 908, 911, 918, 990, 1019, 1027, 1043, 1053], "alias": [84, 85, 257, 385, 387, 390, 406, 602, 1035, 1039, 1049], "smoothened_coin": [84, 85], "rescaled_coin": [84, 85, 1027], "anti_alias": [84, 85, 1027], "voronoi": [84, 104, 414], "n_region": 84, "n_regions_plu": 84, "lobpcg": [84, 457, 467, 693, 696, 700, 1045, 1048, 1049, 1050], "amg": [84, 104, 414, 457, 467, 696, 700, 1045, 1049, 1050], "pyamg": [84, 405, 408, 414, 457, 467, 696, 700], "toler": [84, 110, 190, 214, 216, 239, 240, 353, 363, 382, 389, 396, 414, 426, 448, 452, 457, 464, 467, 476, 477, 483, 487, 488, 489, 536, 537, 538, 540, 541, 545, 546, 547, 548, 549, 550, 552, 553, 564, 565, 566, 567, 632, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 681, 683, 684, 686, 687, 688, 689, 693, 694, 695, 696, 698, 699, 700, 846, 847, 851, 855, 863, 864, 901, 902, 906, 907, 908, 909, 910, 911, 912, 980, 990, 994, 1008, 1009, 1024, 1047, 1048, 1049, 1050], "eigen_tol": [84, 457, 467, 696, 700, 1036, 1049, 1050], "todo": [84, 254, 391, 395, 414, 1053], "21243": 84, "assign_label": [84, 414, 457, 467], "comment": [84, 361, 385, 386, 387, 388, 390, 391, 395, 492, 584, 994], "paus": 84, "21194": [84, 1048], "57": [84, 179, 195, 239, 289, 318, 384, 385, 405, 407, 408, 415, 710, 765, 785, 839, 994, 1004, 1015, 1035], "plot_coin_segment": [84, 1015], "spatial": [85, 87, 93, 198, 207, 240, 317, 382, 401, 414, 425, 449, 451, 455, 457, 462, 684, 697, 764, 767, 782, 783, 784, 785, 796, 797, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 990, 997, 1004, 1037, 1041, 1048, 1051], "st": [85, 105, 280, 334, 1038, 1041, 1043], "4697": 85, "350": [85, 195, 1015], "plot_coin_ward_segment": [85, 1015], "vq": [86, 96], "palac": 86, "china": [86, 414, 511, 512, 589, 592], "615": 86, "literatur": [86, 184, 280, 297, 362, 384, 387, 393, 395, 399, 400, 414, 417, 419, 421, 448, 452, 454, 506, 541, 543, 545, 552, 560, 561, 593, 596, 713, 801, 983, 986, 990, 994, 1045], "codebook": [86, 297, 571, 836], "palett": [86, 195, 280], "byte": [86, 91, 422, 492, 508, 513, 514, 587, 593, 594, 596, 959, 1026, 1028, 1035, 1042, 1043, 1050], "rgb": [86, 382, 422, 498, 499, 588, 589, 592], "gif": 86, "pick": [86, 93, 98, 198, 258, 288, 333, 338, 382, 387, 391, 414, 421, 448, 465, 528, 678, 916, 917, 983, 990, 991, 993, 1008, 1046], "017": [86, 393, 476, 477], "robertlayton": 86, "n_color": 86, "photo": 86, "jpg": [86, 511, 589, 592], "255": [86, 131, 300, 317, 326, 332, 382, 498, 499, 566, 567], "original_shap": 86, "image_arrai": 86, "image_array_sampl": 86, "codebook_random": 86, "labels_random": 86, "recreate_imag": 86, "recreat": [86, 261], "book": [86, 107, 448, 452, 454, 836, 841, 845, 990, 991, 992, 995, 1047], "alongsid": [86, 387, 393, 401, 405, 423, 827, 828, 829, 994, 1001, 1013, 1014], "513": [86, 179, 855, 997, 1015], "plot_color_quant": [86, 1015], "750": [87, 93, 150, 280], "math": [87, 107, 158, 177, 260, 280, 281, 384, 405, 768], "db": [87, 93, 414], "n_noise_": 87, "come": [87, 105, 107, 116, 121, 133, 177, 179, 255, 329, 361, 362, 374, 376, 380, 384, 387, 388, 391, 395, 399, 401, 405, 414, 418, 421, 422, 444, 455, 461, 477, 555, 710, 799, 824, 908, 911, 983, 984, 988, 991, 993, 997, 1000, 1009, 1019, 1035, 1046, 1049, 1051], "handi": [87, 108, 362, 363, 388, 1051], "883": [87, 317, 1015], "917": 87, "916": 87, "626": [87, 209], "core_samples_mask": 87, "zeros_lik": [87, 225, 289], "bool": [87, 104, 117, 191, 241, 369, 387, 426, 427, 428, 429, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 524, 527, 528, 529, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 705, 707, 708, 712, 713, 714, 716, 717, 718, 719, 730, 731, 732, 733, 734, 735, 742, 745, 746, 754, 755, 758, 760, 765, 767, 771, 773, 778, 782, 786, 787, 788, 789, 791, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 822, 825, 826, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 937, 943, 944, 956, 959, 965, 967, 975, 980, 981, 982, 984, 1044, 1047, 1048], "core_sample_indices_": [87, 449], "class_member_mask": 87, "markerfacecolor": [87, 93, 99, 101, 102], "markeredgecolor": [87, 93, 99, 101, 102], "markers": [87, 93, 96, 99, 101, 102, 155, 182, 186, 253, 333], "162": [87, 177, 384, 1015], "plot_dbscan": [87, 425, 449, 1015], "constitut": [88, 401, 418, 421, 455, 461, 593, 594, 596, 998], "standpoint": 88, "proce": [88, 174, 204, 385, 391, 417, 418, 421, 445, 990], "reassign": [88, 387, 452, 454, 1036, 1040], "becom": [88, 93, 95, 109, 116, 153, 225, 227, 257, 260, 282, 300, 321, 325, 349, 353, 361, 370, 381, 387, 389, 391, 395, 401, 402, 414, 416, 421, 422, 424, 445, 455, 459, 460, 462, 558, 586, 593, 594, 596, 624, 632, 663, 664, 681, 683, 880, 906, 907, 913, 989, 990, 991, 993, 997, 1004, 1009, 1026, 1028, 1036, 1043, 1044, 1047, 1048, 1049, 1050, 1052], "ndownload": 88, "figshar": 88, "5976027": 88, "patch_siz": [88, 131, 422, 588, 589, 592], "buffer": [88, 1048], "max_patch": [88, 422, 588, 589, 1043], "4i": 88, "dt": [88, 131, 164, 421, 422, 1010], "2400": 88, "700": [88, 190, 331, 1015], "800": [88, 332, 382, 589, 697], "1100": 88, "1200": [88, 154, 320, 421], "1300": 88, "1400": [88, 479], "1600": 88, "1700": 88, "1800": 88, "1900": 88, "2100": [88, 332], "2200": [88, 382, 498], "2300": [88, 212], "ntrain": 88, "588": [88, 1015], "plot_dict_face_patch": [88, 1015], "agglo": [89, 450, 1027], "x_reduc": [89, 124, 161, 450, 1027], "x_restor": 89, "images_restor": 89, "plot_digits_agglomer": [89, 1015], "rich": [90, 158, 395, 399, 414, 444, 1018, 1046, 1049], "richer": [90, 137, 414], "uneven": [90, 275, 414, 418], "patholog": [90, 993, 1041], "clean": [90, 108, 222, 370, 379, 385, 420, 1000, 1004, 1045], "fring": [90, 414], "sensibl": [90, 190, 297, 362, 389, 990, 1004], "plot_clust": 90, "x_red": 90, "592": [90, 616, 619, 630, 1001, 1015], "plot_digits_linkag": [90, 1015], "raccoon": [91, 131, 419], "addition": [91, 109, 144, 158, 195, 223, 241, 257, 330, 332, 362, 387, 399, 413, 422, 615, 616, 651, 657, 676, 883, 983, 984, 994, 1002, 1013, 1041, 1052], "adapt": [91, 93, 142, 154, 155, 182, 266, 267, 322, 353, 375, 385, 386, 387, 396, 414, 421, 424, 520, 521, 522, 523, 681, 682, 683, 863, 864, 990, 996, 998, 1004, 1008, 1013, 1014, 1043, 1044, 1051, 1052], "pooch": [91, 387, 405, 408], "instal": [91, 264, 300, 329, 330, 331, 332, 333, 334, 335, 336, 374, 375, 387, 388, 390, 391, 393, 395, 399, 400, 408, 411, 414, 422, 457, 467, 501, 696, 700, 1010, 1028, 1042, 1043, 1044, 1048, 1049], "raccoon_fac": [91, 131], "nbyte": [91, 254], "768": 91, "1024": [91, 137, 454, 473, 543, 904, 1048], "uint8": [91, 131, 381, 502, 511, 512, 1047], "786432": 91, "unsign": [91, 132, 382, 587, 959], "786": [91, 108], "kilobyt": 91, "simplest": [91, 390, 418, 991, 994, 1026, 1027], "know": [91, 104, 174, 177, 179, 188, 195, 241, 257, 258, 280, 297, 299, 333, 338, 357, 362, 374, 387, 399, 406, 409, 414, 417, 418, 419, 422, 505, 509, 515, 651, 657, 663, 664, 730, 760, 803, 817, 891, 892, 894, 895, 896, 897, 914, 915, 916, 917, 983, 993, 994, 995, 997, 1006, 1041, 1042, 1045, 1047], "certainli": [91, 107, 362], "subsampl": [91, 137, 154, 157, 196, 223, 240, 241, 276, 323, 327, 331, 463, 564, 565, 566, 567, 568, 637, 684, 706, 806, 807, 832, 871, 883, 895, 922, 932, 986, 990, 1014, 1035, 1045, 1049, 1051, 1052, 1053], "200_000": [91, 323, 871, 1051], "compressed_raccoon_uniform": 91, "spot": [91, 252, 414], "bin_edg": 91, "bin_edges_": [91, 321, 871], "bin_cent": [91, 223], "625": [91, 223, 623, 713], "875": [91, 180, 674], "375": [91, 108, 304, 454, 754, 994, 1015], "140": [91, 336, 421, 515, 521, 522, 523, 560, 561, 995], "171": [91, 177, 361, 384, 393, 792, 994], "234": [91, 841, 845, 863, 864, 996], "axvlin": [91, 98, 110, 118, 135, 154, 165, 195, 197, 198, 212, 286, 357, 1024], "get_ybound": 91, "compressed_raccoon_kmean": 91, "90885631": 91, "34346583": 91, "64447187": 91, "28225276": 91, "70763101": 91, "159": [91, 382, 1035], "78681467": 91, "185": [91, 177, 188, 254, 384, 393, 863, 864, 1015], "17226834": 91, "02069427": 91, "save": [91, 107, 109, 260, 318, 386, 387, 391, 393, 394, 395, 401, 409, 418, 426, 473, 539, 540, 632, 846, 847, 904, 990, 994, 1004, 1010, 1018, 1028, 1035, 1038, 1042, 1045], "verifi": [91, 98, 140, 158, 195, 223, 387, 392, 411, 978, 997], "6291456": 91, "surpris": [91, 196, 385, 990, 1013, 1037], "x8": 91, "ndarrai": [91, 96, 124, 223, 264, 278, 279, 280, 387, 388, 389, 393, 394, 411, 422, 425, 426, 429, 430, 432, 435, 436, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 720, 723, 726, 727, 728, 731, 732, 742, 749, 750, 752, 754, 755, 757, 758, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 923, 924, 925, 926, 931, 932, 940, 942, 943, 944, 945, 949, 956, 958, 959, 963, 966, 967, 969, 970, 971, 972, 975, 980, 981, 994, 1009, 1014, 1038, 1042, 1045, 1046, 1049, 1050, 1051, 1052], "285": [91, 264, 339, 728, 1015], "plot_face_compress": [91, 1015], "shutil": [92, 109, 415], "tempfil": [92, 302, 329, 415, 997], "roi_siz": 92, "snr": 92, "noise_coef": 92, "gridsearch": [92, 114, 291, 1013], "cachedir": [92, 109, 396, 415], "mkdtemp": [92, 415], "mem": [92, 393, 513, 514, 1015], "n_x": [92, 590], "n_y": [92, 590, 996, 1004], "parcel": [92, 105, 414], "ward__n_clust": 92, "coef_agglomeration_": 92, "_agglom": 92, "451933": 92, "675318": 92, "275706": 92, "085711": 92, "1600x1600": 92, "7840": 92, "return_dist": [92, 468, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 997, 1039], "________________________________________________________ward_tre": 92, "0min": 92, "905206": 92, "161245": 92, "849835": 92, "091621": 92, "anova__percentil": [92, 352], "coef_selection_": 92, "_univariate_select": 92, "267703": 92, "026711": 92, "_____________________________________________________f_regress": 92, "447268": 92, "638768": 92, "rdbu_r": [92, 118, 138, 349], "temporari": [92, 107, 109, 374, 473, 692, 785, 904, 997, 1038, 1039, 1042, 1048, 1049], "worri": [92, 991, 1020], "rmtree": [92, 109, 415], "ignore_error": 92, "505": [92, 831, 1015], "plot_feature_agglomeration_vs_univariate_select": [92, 1015], "perspect": [93, 98, 223, 374, 382, 399, 402, 535, 648, 906, 987], "conveni": [93, 227, 260, 379, 395, 399, 415, 418, 422, 424, 429, 448, 452, 454, 456, 458, 469, 494, 616, 681, 683, 704, 732, 789, 865, 866, 968, 984, 986, 990, 991, 1001, 1018, 1028, 1035], "ground_truth": [93, 307], "proba_map": 93, "class_index": 93, "ci": [93, 375, 390, 391, 395, 996, 1041, 1043], "preambl": 93, "parameters_str": 93, "greatest": [93, 405, 414, 873, 1043], "remark": [93, 121, 177, 376, 387, 1004], "unlik": [93, 94, 148, 195, 196, 243, 245, 271, 320, 347, 387, 389, 393, 399, 401, 406, 416, 418, 419, 422, 451, 455, 540, 655, 656, 659, 660, 661, 687, 688, 789, 824, 846, 847, 886, 897, 909, 990, 993, 994, 1001, 1009, 1035, 1041], "bi": [93, 422], "worth": [93, 151, 196, 223, 385, 387, 395, 1018], "rememb": [93, 389, 392, 405, 422, 997, 1001, 1010], "hardli": [93, 612, 613], "must": [93, 195, 196, 198, 204, 207, 240, 241, 250, 261, 275, 306, 321, 326, 361, 370, 382, 386, 387, 388, 389, 391, 393, 395, 401, 402, 406, 411, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 435, 443, 446, 449, 450, 451, 452, 454, 455, 456, 460, 462, 464, 466, 467, 469, 471, 472, 474, 479, 492, 513, 514, 517, 528, 536, 542, 543, 544, 545, 546, 548, 549, 552, 558, 559, 564, 565, 566, 567, 572, 573, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 622, 625, 632, 633, 634, 635, 637, 638, 643, 647, 648, 653, 654, 657, 663, 664, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 687, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 704, 708, 711, 714, 739, 750, 768, 775, 778, 782, 785, 792, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 810, 812, 813, 815, 817, 818, 819, 821, 822, 824, 827, 830, 832, 833, 841, 842, 843, 844, 845, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 866, 869, 870, 871, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 906, 907, 908, 909, 910, 911, 912, 913, 919, 962, 969, 978, 980, 983, 984, 990, 991, 992, 994, 997, 998, 1000, 1001, 1008, 1009, 1010, 1019, 1028, 1035, 1038, 1042, 1046, 1048, 1049, 1052], "great": [93, 194, 195, 221, 370, 387, 399, 419, 768, 1014, 1018, 1035, 1042], "immedi": [93, 387, 399, 803, 817, 827, 828, 1043], "hdb": [93, 451], "probabilities_": [93, 451], "capabl": [93, 94, 121, 184, 227, 247, 389, 401, 405, 995, 998, 1009, 1010, 1018, 1035, 1044, 1052], "constraint": [93, 95, 105, 128, 141, 192, 218, 227, 260, 261, 275, 316, 317, 318, 330, 387, 399, 419, 422, 492, 513, 514, 562, 563, 566, 567, 569, 570, 637, 640, 821, 822, 914, 915, 916, 917, 963, 983, 985, 990, 991, 1008, 1015, 1039, 1042, 1043, 1046, 1048, 1050, 1052], "difficult": [93, 142, 195, 231, 260, 387, 395, 413, 419, 421, 558, 559, 564, 566, 567, 989, 991, 993, 997, 999, 1001, 1010, 1018, 1035, 1049], "fragment": [93, 131], "sparser": [93, 202, 214, 419, 476, 483, 544, 548, 990, 997, 1008], "Not": [93, 168, 196, 374, 399, 414, 432, 433, 436, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 474, 475, 476, 477, 478, 479, 480, 481, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 568, 571, 574, 575, 586, 587, 588, 593, 594, 596, 632, 633, 634, 635, 682, 693, 694, 695, 696, 698, 798, 801, 802, 803, 806, 807, 817, 843, 846, 847, 850, 851, 852, 854, 858, 870, 878, 881, 882, 884, 887, 898, 899, 910, 994, 1000, 1013, 1044], "mention": [93, 121, 142, 241, 330, 370, 374, 387, 391, 392, 399, 414, 701, 898, 899, 983, 988, 990, 1014, 1017, 1018, 1028, 1042, 1043, 1044], "until": [93, 177, 231, 292, 331, 333, 392, 401, 402, 412, 414, 418, 423, 513, 514, 562, 563, 564, 565, 569, 570, 571, 598, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 676, 681, 682, 683, 699, 801, 802, 806, 807, 863, 864, 903, 906, 914, 915, 916, 917, 969, 983, 990, 991, 999, 1007, 1010, 1028, 1038, 1042, 1043, 1049], "tradeoff": [93, 145, 192, 255, 263, 273, 287, 288, 289, 290, 361, 374, 387, 395, 420, 520, 569, 703, 707, 731, 793, 832, 867, 886, 906, 991, 1015, 1026, 1044, 1047], "comfort": [93, 421], "incap": 93, "intervent": 93, "inaccess": 93, "ultim": [93, 247, 388], "world": [93, 107, 111, 195, 227, 247, 260, 361, 374, 380, 384, 414, 419, 422, 959, 984, 994, 996, 1012, 1014, 1018, 1022, 1030, 1035], "recomput": [93, 94, 261, 263, 302, 329, 474, 479, 990, 1006, 1040, 1051], "cut_dist": [93, 451], "511": [93, 1015], "plot_hdbscan": [93, 1015], "intract": [94, 419, 991, 999], "inferenti": 94, "chirag": 94, "nagpal": 94, "christo": [94, 1044, 1045, 1047, 1049, 1052], "arida": [94, 1044, 1045, 1047, 1049, 1052], "5000": [94, 209, 238, 239, 241, 331, 887], "_classifier_ha": 94, "deleg": [94, 393, 438, 439, 919, 1039, 1041, 1047], "classifier_": [94, 257], "inductivecluster": 94, "clusterer_": 94, "plot_scatt": 94, "cluster_label": [94, 98], "x_new": [94, 415, 419, 423, 438, 447, 448, 450, 452, 454, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 554, 572, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 635, 640, 643, 644, 645, 646, 647, 693, 694, 695, 696, 697, 855, 862, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 898, 899, 1006, 1019], "y_new": 94, "declar": [94, 244, 257, 370, 387, 388, 389, 393, 401, 448, 451, 452, 464, 476, 477, 483, 695, 699, 1042, 1046], "inductive_learn": 94, "probable_clust": 94, "961": [94, 96, 863, 1015], "plot_inductive_clust": [94, 1015], "__sklearn_is_fitted__": [94, 139, 192, 389, 428, 431, 978, 1015, 1048, 1049], "meant": [95, 158, 177, 260, 382, 389, 396, 479, 498, 682, 852, 960, 961, 984, 998, 1000, 1004, 1036], "unintuit": 95, "possibli": [95, 121, 177, 223, 238, 353, 362, 384, 386, 395, 409, 414, 421, 422, 456, 458, 594, 841, 842, 843, 844, 845, 911, 912, 914, 915, 916, 917, 983, 986, 991, 997, 1004, 1050], "undesir": [95, 180, 424], "phil": [95, 1040, 1051], "roth": [95, 1040, 1043, 1050], "mr": [95, 334, 1036, 1039, 1049], "anisotrop": [95, 181, 424, 622, 624, 627], "ellipt": [95, 990], "60834549": 95, "63667341": 95, "40887718": 95, "85253229": 95, "x_vari": 95, "y_vari": 95, "unequ": [95, 1043], "x_filter": 95, "unevenli": [95, 223, 275], "y_filter": 95, "set_i": 95, "scenario": [95, 107, 158, 179, 200, 227, 283, 370, 394, 405, 418, 421, 542, 548, 550, 551, 988, 994, 1004, 1045], "criteria": [95, 148, 192, 201, 212, 231, 271, 280, 395, 414, 423, 471, 487, 488, 489, 506, 562, 563, 564, 565, 569, 570, 651, 657, 661, 663, 664, 676, 697, 867, 886, 906, 907, 914, 915, 916, 917, 984, 993, 998, 1008, 1015, 1027, 1038, 1043, 1046], "knowledg": [95, 150, 158, 195, 240, 260, 280, 382, 387, 390, 393, 400, 401, 414, 418, 421, 425, 449, 516, 560, 561, 568, 725, 740, 744, 787, 835, 994, 995, 1006, 1028], "consequ": [95, 135, 241, 280, 281, 320, 346, 370, 413, 419, 421, 566, 567, 571, 660, 661, 984, 990, 994, 1002, 1010, 1044, 1046, 1051], "inertia": [95, 96, 99, 362, 414, 448, 452, 454, 457, 464, 465, 467, 468, 1046], "common_param": [95, 155, 158, 196, 256, 282, 283, 353], "unexpect": [95, 257, 370, 387, 392, 395, 405, 409, 540, 701, 994, 1009, 1037, 1043, 1044, 1047, 1049, 1051], "suffic": [95, 96, 389, 1028], "propos": [95, 114, 115, 300, 382, 387, 389, 399, 401, 414, 416, 421, 426, 455, 540, 612, 613, 681, 682, 683, 863, 864, 990, 993, 997, 1008, 1042], "inflat": [95, 194, 195, 197, 414, 418, 994, 1004], "allevi": [95, 158, 202, 207, 414, 996], "fastest": [95, 278, 363, 452, 675, 677, 679, 692, 942, 943, 993], "restart": [95, 390, 395, 452, 536, 542, 543, 548, 550, 551, 615, 616, 991, 1048], "059": [95, 1015], "plot_kmeans_assumpt": [95, 1015], "posterior": [95, 178, 179, 180, 185, 192, 202, 280, 419, 424, 554, 555, 557, 615, 616, 618, 619, 620, 624, 627, 628, 632, 649, 650, 713, 801, 988, 1013, 1015, 1041, 1044], "judg": [96, 229, 414, 1023], "shorthand": [96, 401, 415, 472, 566, 567, 867, 868, 1038], "homo": 96, "compl": 96, "mea": 96, "n_digit": 96, "1797": [96, 123, 278, 318, 338, 384, 426, 450, 507, 537, 538, 539, 540, 604, 605, 693, 694, 695, 696, 698, 997, 1025], "bench_k_mean": 96, "tabl": [96, 241, 280, 387, 388, 391, 396, 414, 422, 587, 663, 685, 803, 817, 843, 959, 990, 994, 995, 1000, 1013, 1036], "inertia_": [96, 99, 102, 448, 452, 454, 1046], "clustering_metr": 96, "sample_s": [96, 255, 362, 797], "formatter_result": 96, "determinist": [96, 155, 375, 383, 389, 401, 414, 448, 452, 454, 456, 457, 458, 463, 464, 467, 556, 564, 565, 569, 570, 588, 589, 696, 700, 814, 815, 862, 914, 915, 986, 990, 1036, 1039, 1041, 1043, 1044, 1047, 1050, 1051], "ttime": 96, "tinertia": 96, "thomo": 96, "tcompl": 96, "tv": 96, "tari": 96, "tami": 96, "tsilhouett": 96, "__________________________________________________________________________________": 96, "69545": 96, "598": [96, 135, 180, 546], "645": 96, "621": [96, 184, 773, 1015], "469": 96, "617": [96, 283, 414, 773], "152": [96, 393], "69735": 96, "681": [96, 363, 393], "723": [96, 256], "701": 96, "574": [96, 539, 546], "698": 96, "72686": 96, "636": [96, 207, 393], "658": [96, 121], "647": [96, 164, 245, 1015], "521": [96, 188, 1015], "reduced_data": 96, "mesh": [96, 151, 161, 181, 255, 308, 315, 322, 343, 345], "plot_kmeans_digit": [96, 1015], "4000": [97, 157, 269], "centers_init": 97, "4eacc5": [97, 102], "ff9c34": [97, 102], "4e9a06": [97, 102], "cluster_data": 97, "061": [97, 278, 1015], "plot_kmeans_plusplu": [97, 1015], "wrong": [98, 223, 306, 361, 370, 384, 387, 389, 422, 509, 730, 760, 797, 994, 1000, 1009, 1038, 1040, 1042, 1043, 1044, 1045, 1048, 1052], "ambival": 98, "thick": [98, 310, 997], "ow": 98, "7049787496083262": 98, "5882004012129721": 98, "6505186632729437": 98, "561464362648773": 98, "4857596147013469": 98, "distinct": [98, 280, 340, 361, 363, 382, 389, 392, 401, 402, 418, 421, 422, 594, 804, 813, 821, 880, 881, 901, 902, 983, 990, 997, 1000, 1028, 1043], "center_box": [98, 517], "range_n_clust": 98, "set_size_inch": [98, 168, 261], "insert": [98, 195, 223, 399, 414, 492, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 921], "blank": [98, 392, 984, 1010], "demarc": 98, "silhouette_avg": 98, "sample_silhouette_valu": 98, "y_lower": [98, 155], "aggreg": [98, 146, 241, 283, 289, 333, 335, 414, 421, 423, 539, 560, 561, 599, 726, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 995, 997, 1004, 1051], "ith_cluster_silhouette_valu": 98, "size_cluster_i": 98, "y_upper": [98, 155], "fill_betweenx": 98, "2nd": [98, 124, 187, 325, 414, 425, 449, 535, 1004, 1050], "lw": [98, 114, 115, 117, 132, 136, 137, 217, 224, 226, 229, 233, 240, 246, 269, 275, 290, 305, 320, 340, 356], "fontweight": [98, 218], "249": [98, 1015], "plot_kmeans_silhouette_analysi": [98, 1015], "reach": [99, 148, 153, 177, 223, 225, 239, 241, 282, 333, 349, 369, 392, 402, 405, 414, 419, 423, 455, 462, 513, 514, 598, 599, 632, 649, 650, 651, 652, 657, 658, 659, 660, 661, 665, 666, 667, 668, 671, 672, 673, 681, 682, 683, 684, 686, 687, 688, 689, 733, 734, 787, 801, 802, 863, 864, 903, 983, 994, 998, 1008, 1010, 1018, 1046, 1050, 1051, 1052], "optimum": [99, 185, 195, 200, 293, 419, 477, 990, 993], "stuck": [99, 697, 991], "n_init_rang": 99, "n_samples_per_cent": 99, "n_clusters_tru": 99, "init_s": [99, 362, 454], "empti": [99, 107, 137, 235, 341, 374, 382, 389, 391, 414, 426, 488, 538, 566, 567, 636, 814, 871, 911, 913, 921, 926, 927, 933, 953, 954, 984, 1009, 1026, 1037, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051], "run_id": 99, "km": [99, 333, 362], "fmt": [99, 234], "my_memb": [99, 101, 102], "223": [99, 120, 161, 177, 384, 1015], "plot_kmeans_stability_low_dim_dens": [99, 1015], "globular": [100, 414], "cleanli": [100, 1035], "856": [100, 1015], "plot_linkage_comparison": [100, 1015], "dorin": [101, 453], "comaniciu": [101, 414, 453], "meer": [101, 414, 453], "ieee": [101, 115, 117, 384, 414, 416, 423, 427, 453, 480, 539, 568, 669, 690, 691, 729, 773, 990, 994, 1000], "transact": [101, 384, 414, 416, 425, 427, 449, 453, 480, 539, 543, 545, 552, 568, 649, 669, 690, 691, 729, 730, 760, 773, 990, 994], "intellig": [101, 177, 361, 384, 414, 421, 453, 560, 561, 643, 701, 729, 836, 863, 864, 995, 1006, 1014, 1018], "2002": [101, 413, 414, 421, 442, 453, 598, 599, 730, 760, 853, 901, 986, 994], "603": [101, 453], "619": [101, 453], "labels_uniqu": 101, "408": [101, 238, 356, 1015], "plot_mean_shift": [101, 466, 1015], "t_batch": 102, "k_means_cluster_cent": 102, "mbk_means_cluster_cent": 102, "k_means_label": 102, "mbk_means_label": 102, "ninertia": 102, "bbbbbb": 102, "179": [102, 384, 393, 421, 1015, 1035], "plot_mini_batch_kmean": [102, 1015], "shane": [103, 1044, 1047, 1050], "grigsbi": 103, "refug": 103, "rocktalu": 103, "n_points_per_clust": 103, "c1": [103, 152, 187, 253, 326], "c2": [103, 152, 187, 253, 326], "c3": [103, 152, 326], "c4": [103, 326, 1016, 1030], "c5": [103, 1016, 1030], "c6": 103, "clust": [103, 455, 462], "labels_050": 103, "reachability_": [103, 414, 455, 460, 461, 462], "core_dist": [103, 460, 461, 462], "core_distances_": [103, 455, 460, 462], "ordering_": [103, 414, 455, 460, 461, 462], "labels_200": 103, "ax3": [103, 341], "ax4": 103, "klass": 103, "xk": [103, 555], "rk": 103, "full_lik": 103, "noptic": 103, "ndbscan": 103, "450": [103, 1015], "plot_opt": [103, 1015], "tri": [104, 136, 243, 309, 353, 375, 389, 392, 399, 402, 413, 454, 456, 458, 636, 637, 638, 675, 697, 703, 705, 707, 817, 962, 999, 1019, 1037, 1043, 1047], "intens": [104, 131, 300, 384, 388, 399, 401, 419, 448, 452, 464, 612, 613, 637, 638, 805, 983, 1001, 1018, 1043], "weakli": 104, "outlin": [104, 151, 387, 389, 401, 402, 404, 414, 983, 1030], "center1": 104, "center2": 104, "center3": 104, "center4": 104, "radius1": 104, "radius2": 104, "radius3": 104, "radius4": 104, "circle1": 104, "circle2": 104, "circle3": 104, "circle4": 104, "label_im": 104, "cleaner": 104, "547": [104, 1015], "plot_segmentation_toi": [104, 1015], "sole": [105, 399, 414], "oppos": [105, 257, 391, 411, 414, 902, 997, 1009, 1019, 1035, 1053], "thinner": 105, "fig1": 105, "set_posit": [105, 134, 234, 320], "jet": 105, "fig2": 105, "121": [105, 144, 191, 255, 363, 623, 674, 1004, 1015], "349": [105, 142, 393, 558, 1015], "plot_ward_structured_vs_unstructur": [105, 1015], "raster": 107, "serv": [107, 132, 142, 185, 283, 353, 415, 556, 643, 986, 1049], "matt": [107, 1038, 1039, 1040, 1045, 1046, 1050, 1051], "terri": [107, 1039], "compris": [107, 155, 278, 361, 362, 363, 382, 399, 419, 421, 520, 810, 991], "mccall": 107, "mksol": 107, "dseg": 107, "ti": [107, 223, 268, 271, 278, 358, 374, 413, 414, 604, 605, 640, 725, 730, 760, 801, 802, 908, 911, 914, 993, 994, 1009, 1036, 1038, 1039, 1043, 1045, 1049, 1050, 1051], "fred": [107, 1035, 1048], "575": [107, 223], "3539": 107, "1993apr6": 107, "131900": 107, "8407": 107, "perhap": [107, 151, 384, 386, 395, 401, 420, 1014], "militari": 107, "slug": 107, "school": [107, 184, 384, 414, 792, 994], "teacher": 107, "ex": [107, 385, 388, 405, 1039, 1040], "fighter": 107, "jock": 107, "wasn": [107, 257, 1044], "poundal": 107, "flink": 107, "funni": 107, "propon": 107, "si": 107, "insist": 107, "safeti": [107, 399, 415, 960, 1014, 1045], "ball": [107, 305, 313, 414, 420, 453, 697, 846, 847, 851, 854, 856, 857, 858, 1035, 1037, 1040, 1046], "mari": [107, 1043, 1044, 1045, 1046, 1049], "shafer": 107, "nasa": [107, 361, 362, 384], "am": [107, 112, 116, 163, 196, 361, 392, 416, 479, 498, 1042], "dryden": 107, "stateless": [107, 362, 376, 389, 401, 422, 587, 588, 594, 643, 869, 870, 878, 1004, 1051], "subject_body_extractor": 107, "subject_body_transform": 107, "sentenc": [107, 361, 363, 382, 402, 422], "text_stat": 107, "num_sent": 107, "text_stats_transform": 107, "subjectbodyextractor": 107, "subjectbodi": 107, "union": [107, 195, 415, 742, 758, 865, 1042], "body_bow": 107, "pull": [107, 332, 375, 385, 390, 401, 402, 1017, 1045], "body_stat": 107, "transformer_weight": [107, 469, 472, 865, 1040, 1047], "396": [107, 175, 177, 384, 1015, 1028], "394": [107, 188], "629": [107, 305, 1015], "plot_column_transform": [107, 1015], "dispatch": [108, 401, 411, 473, 803, 817, 827, 828, 829, 904, 960, 961, 1023, 1030, 1050], "processor": [108, 163, 195, 425, 442, 449, 451, 453, 455, 457, 462, 463, 466, 469, 472, 477, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 778, 782, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 848, 849, 852, 854, 856, 857, 859, 860, 865, 868, 901, 902], "pedro": [108, 1036, 1038, 1039, 1043], "40945": 108, "titan": [108, 197, 264, 329, 333, 334, 1002], "surviv": [108, 197, 983, 1013], "ag": [108, 177, 195, 197, 211, 212, 223, 241, 261, 262, 264, 320, 332, 333, 334, 336, 382, 384, 501, 1018, 1019, 1026], "fare": [108, 197, 264, 333, 334, 1039, 1040], "embark": [108, 197, 264, 329, 333, 334], "sex": [108, 177, 195, 197, 211, 212, 264, 334, 336, 384, 501, 1002, 1026], "femal": [108, 195, 334, 392, 879, 880, 1004], "male": [108, 195, 334, 392, 879, 880, 1004], "pclass": [108, 197, 264, 329, 333, 334], "numeric_featur": [108, 333], "numeric_transform": [108, 333], "categorical_transform": 108, "preprocessor": [108, 163, 195, 223, 252, 260, 262, 326, 330, 332, 333, 334, 336, 415, 422, 593, 594, 596, 1013, 1028, 1035, 1038, 1043, 1045], "798": [108, 421], "lt": [108, 109, 147, 163, 195, 271, 278, 292, 385, 387, 1021], "0x7f9475f234c0": 108, "pipelineifittedpipelin": [108, 147, 174, 195, 197, 251, 261, 264, 287, 333], "columntransformercolumntransform": [108, 163, 195, 197, 252, 262, 326, 330, 333], "simpleimputersimpleimput": [108, 163, 197, 252, 262, 330, 333], "standardscalerstandardscal": [108, 163, 195, 251, 252, 261, 262, 264, 287, 330, 333], "onehotencoderonehotencod": [108, 147, 163, 195, 196, 252, 262, 330, 333], "selectpercentileselectpercentil": [108, 264], "logisticregressionlogisticregress": [108, 147, 251, 252, 262, 264, 330, 333], "subset_featur": 108, "Then": [108, 143, 147, 150, 158, 163, 166, 174, 195, 200, 207, 211, 223, 227, 247, 251, 257, 263, 282, 283, 297, 361, 381, 391, 393, 395, 405, 412, 413, 414, 417, 419, 422, 423, 575, 598, 724, 760, 803, 817, 906, 907, 984, 993, 994, 1000, 1009, 1028, 1044], "1047": 108, "1118": 108, "684": [108, 116], "1045": 108, "841": 108, "1046": [108, 271], "kb": [108, 195, 196], "numerical_transform": 108, "yourself": [108, 385, 386, 387, 388, 392, 395, 998], "dtype_exclud": [108, 471], "dtype_includ": [108, 152, 163, 260, 415, 471], "_column_transform": [108, 163], "0x7f9450634a60": 108, "0x7f9450634850": 108, "exactli": [108, 142, 194, 202, 207, 216, 223, 227, 272, 288, 321, 357, 361, 387, 389, 412, 414, 418, 419, 422, 427, 451, 458, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 520, 531, 595, 596, 620, 681, 683, 708, 710, 767, 804, 821, 827, 986, 990, 991, 992, 994, 995, 1010, 1027, 1028, 1035, 1041, 1042, 1048], "cartesian": [108, 412, 638, 997, 1050], "preprocessor__num__imputer__strategi": 108, "preprocessor__cat__selector__percentil": 108, "classifier__c": 108, "search_cv": 108, "param_distribut": [108, 179, 281, 288, 292, 331, 400, 807, 815, 817, 1051], "randomizedsearchcvinot": 108, "fittedrandomizedsearchcv": 108, "pipelinepipelin": [108, 109, 262], "trigger": [108, 109, 391, 401, 415, 863, 864, 866, 867, 926, 927, 943, 990, 1028, 1043, 1049, 1050], "best_params_": [108, 110, 155, 179, 256, 271, 278, 284, 331, 349, 400, 803, 806, 807, 817, 983, 1024, 1028], "best_score_": [108, 110, 256, 281, 284, 285, 349, 678, 680, 803, 806, 807, 817, 1023, 1024, 1028, 1046], "cv_results_": [108, 109, 110, 118, 148, 168, 176, 271, 278, 279, 280, 281, 284, 288, 291, 292, 302, 349, 477, 599, 803, 806, 807, 817, 1028, 1041, 1045, 1047, 1048, 1053], "sort_valu": [108, 197, 198, 264, 271, 280, 291, 326, 327], "mean_test_scor": [108, 109, 110, 118, 148, 168, 176, 271, 279, 280, 281, 288, 291, 292, 302, 349, 477, 599, 803, 817, 983, 1041, 1048], "std_test_scor": [108, 110, 148, 168, 176, 279, 280, 281, 288, 302, 477, 599, 803, 817, 1041, 1048], "param_preprocessor__num__imputer__strategi": 108, "param_preprocessor__cat__selector__percentil": 108, "param_classifier__c": 108, "786015": 108, "031020": 108, "785063": 108, "030498": 108, "783149": 108, "030462": 108, "plot_column_transformer_mixed_typ": [108, 1015], "instanti": [109, 182, 332, 390, 406, 421, 455, 572, 573, 607, 635, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 933, 1000, 1025, 1035, 1043, 1047, 1051], "memoiz": [109, 382, 401], "costli": [109, 114, 149, 190, 281, 358, 375, 388, 393, 414, 448, 632, 811, 813, 898, 899, 943, 994, 997, 1006, 1014], "mcgibbon": [109, 1037, 1038, 1041], "pipe": [109, 110, 152, 262, 279, 326, 331, 332, 400, 406, 415, 422, 595, 866, 891, 892, 894, 895, 896, 897, 983, 1004, 1024], "reduce_dim": [109, 262, 279, 415], "popul": [109, 114, 116, 158, 195, 223, 260, 283, 320, 382, 396, 401, 416, 445, 495, 717, 723, 848, 849, 850, 852, 854, 856, 857, 858, 963, 994, 1000, 1004, 1010], "n_features_opt": 109, "c_option": 109, "iterated_pow": [109, 537, 540, 546, 1041], "reduce_dim__n_compon": [109, 279, 415], "classify__c": 109, "reduce_dim__k": 109, "reducer_label": 109, "kbest": [109, 597], "0x7f9475f279d0": 109, "gridsearchcvifittedgridsearchcv": [109, 271, 278, 280], "minmaxscalerminmaxscal": 109, "passthroughpassthrough": [109, 195, 196, 326], "linearsvclinearsvc": [109, 174, 287], "mean_scor": [109, 289, 292, 362, 1048], "alphabet": [109, 401, 745], "eas": [109, 198, 271, 325, 387, 390, 393, 990, 1008, 1013, 1014, 1018, 1046, 1047, 1049], "sometim": [109, 163, 194, 280, 317, 362, 370, 375, 376, 387, 389, 391, 393, 400, 401, 414, 416, 419, 421, 422, 454, 539, 540, 543, 545, 546, 871, 872, 873, 921, 989, 990, 991, 994, 999, 1004, 1005, 1009, 1019, 1027, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "worthwhil": [109, 401], "slower": [109, 131, 148, 152, 190, 256, 289, 363, 401, 421, 422, 423, 451, 456, 458, 543, 545, 552, 560, 561, 562, 563, 568, 569, 570, 571, 593, 594, 596, 636, 637, 638, 648, 664, 677, 679, 692, 697, 709, 834, 838, 839, 987, 991, 992, 993, 995, 997, 1010, 1028, 1039, 1046], "folder": [109, 382, 385, 387, 391, 395, 405, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 997, 1028], "cached_pip": [109, 415], "exit": [109, 300, 391, 395, 473], "benefici": [109, 111, 114, 128, 161, 320, 321, 385, 991], "995": [109, 215, 1015], "plot_compare_reduct": [109, 1015], "874": [110, 792, 793, 994], "logistic__c": [110, 1024], "54434690031882": 110, "pca__n_compon": [110, 1024], "polar": [110, 405, 408, 438, 447, 448, 450, 452, 454, 469, 473, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 566, 567, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 904, 1028, 1052], "x_digit": [110, 169, 316, 415, 1023, 1024, 1026], "y_digit": [110, 169, 316, 415, 1023, 1024, 1026], "__": [110, 281, 401, 415, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 1024, 1043, 1044], "spectrum": [110, 529, 549, 700, 943, 1018, 1024, 1043], "ax0": [110, 112, 223, 253, 362, 1024], "n_components_": [110, 135, 401, 446, 450, 539, 543, 544, 545, 546, 547, 548, 898, 899, 1024, 1044, 1046], "explained_variance_ratio_": [110, 136, 362, 419, 539, 546, 549, 554, 1024, 1038, 1041], "named_step": [110, 121, 415, 598, 599, 602, 866, 867, 906, 907, 990, 1024, 1042, 1044], "components_col": 110, "param_pca__n_compon": 110, "is_max_test_scor": 110, "best_clf": 110, "lazyfram": 110, "yerr": [110, 115, 117, 149, 152, 176, 302, 326, 341], "val": [110, 235, 280, 945], "246": [110, 207, 1002, 1015, 1035], "plot_digits_pip": [110, 1015], "candid": [111, 271, 278, 281, 288, 331, 376, 387, 391, 414, 421, 453, 455, 803, 806, 807, 815, 817, 990, 997, 1010, 1041], "features__pca__n_compon": 111, "features__univ_select__k": 111, "svm__c": 111, "867": 111, "967": [111, 994, 998], "transformer_list": [111, 415, 865, 868, 984, 1046, 1047], "univ_select": 111, "amuel": [111, 146, 214, 255, 340, 357], "ai": [111, 146, 214, 255, 340, 357, 418], "bonn": [111, 146, 214, 255, 340, 357], "mayb": [111, 317, 401, 422, 1009, 1014], "combined_featur": 111, "x_featur": [111, 645, 646, 647, 986], "grid_search": [111, 148, 262, 271, 278, 288, 336, 415, 962, 1037, 1038, 1039, 1040, 1041, 1042], "594": [111, 188, 196, 223, 1015], "plot_feature_union": [111, 1015], "overview": [112, 192, 285, 296, 299, 388, 390, 400, 401, 501, 738, 747, 803, 819, 829, 834, 835, 836, 914, 996, 1008, 1015, 1029, 1030], "translat": [112, 389, 424, 532, 619, 875, 876, 892, 991, 994, 1018], "log1p": [112, 253, 870, 994, 1004], "expm1": 112, "y_tran": 112, "meda": [112, 195, 994], "compute_scor": [112, 135, 202, 203, 649, 650, 1044], "r2": [112, 143, 148, 163, 194, 196, 218, 256, 389, 415, 421, 559, 575, 678, 829, 864, 994, 1002, 1044], "ridge_cv": 112, "y_pred_ridg": 112, "ridge_cv_with_trans_target": 112, "inverse_func": [112, 195, 415, 470, 870, 1004, 1043, 1053], "y_pred_ridge_with_trans_target": 112, "sell": 112, "house_pric": [112, 163], "select_dtyp": [112, 152, 334, 471], "inf": [112, 182, 310, 396, 414, 424, 451, 455, 460, 461, 462, 466, 476, 477, 483, 558, 559, 564, 565, 598, 599, 602, 611, 612, 613, 624, 632, 640, 642, 653, 654, 655, 657, 674, 676, 677, 681, 682, 683, 685, 692, 732, 734, 750, 782, 789, 793, 862, 871, 878, 924, 925, 926, 927, 941, 994, 1004, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "lotfrontag": 112, "garageyrblt": 112, "masvnrarea": [112, 163], "to_fram": 112, "n_quantil": [112, 196, 324, 883, 895, 1044], "output_distribut": [112, 320, 324, 415, 882, 883, 894, 895, 1004], "squeez": [112, 185, 186, 260, 300, 320, 1027], "weaker": [112, 566, 567], "smile": [112, 382, 1049], "693": [112, 247, 994, 1015], "plot_transformed_target": [112, 1015], "mahalanobi": [113, 117, 192, 226, 414, 416, 455, 462, 474, 475, 476, 477, 478, 479, 480, 481, 704, 782, 783, 784, 853, 988, 997, 1000, 1015, 1043, 1046, 1047], "unbias": [114, 413, 416, 419, 442, 555, 661, 677, 679, 692, 990, 1023], "base_x_train": 114, "base_x_test": 114, "coloring_matrix": [114, 115], "log_likelihood": [114, 615, 616, 801, 802], "negative_loglik": 114, "real_cov": [114, 115, 427, 475, 478, 479, 480, 481, 484, 485, 486], "emp_cov": [114, 116, 118, 483, 486], "loglik_r": 114, "inv": [114, 118, 316], "formula": [114, 115, 287, 412, 414, 416, 427, 478, 480, 521, 522, 523, 595, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 681, 683, 709, 733, 734, 759, 768, 983, 988, 990, 994, 999, 1000, 1004, 1008, 1040, 1042, 1044], "asymptot": [114, 115, 212, 374, 416, 479, 541, 734, 990, 993, 1045], "chen": [114, 115, 416, 421, 427, 480, 730, 760, 986, 994, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1051], "Its": [114, 278, 282, 383, 389, 401, 419, 424, 543, 989, 990, 999, 1002, 1008, 1013, 1018, 1038, 1052], "tuned_paramet": [114, 168, 278], "loglik_lw": 114, "loglik_oa": 114, "unseen": [114, 153, 174, 212, 227, 231, 293, 306, 353, 376, 379, 389, 400, 401, 414, 418, 852, 883, 895, 985, 994, 1000, 1002, 1004, 1010, 1019, 1038, 1043, 1047], "loglog": [114, 254], "lik_max": 114, "amax": 114, "lik_min": 114, "amin": 114, "vline": [114, 130, 210, 211, 212, 224, 280, 293, 321], "shrinkage_": [114, 115, 478, 480], "magenta": [114, 157], "purpl": [114, 126, 247], "cyan": [114, 145, 195, 311], "realli": [114, 197, 212, 391, 392, 393, 994, 1000, 1018, 1049], "interestingli": [114, 177, 1004], "outperform": [114, 121, 158, 163, 297, 325, 399, 418, 421, 457, 467, 996, 1004], "430": [114, 143, 426, 538, 1015], "plot_covariance_estim": [114, 1015], "inspir": [115, 160, 196, 241, 387, 399, 421, 566, 567, 931, 984, 1013, 1044], "mmse": [115, 416, 427, 480], "tran": 115, "octob": [115, 382, 1035, 1042, 1048, 1049, 1051], "choleski": [115, 223, 241, 396, 476, 477, 483, 532, 616, 653, 655, 656, 659, 660, 661, 663, 664, 674, 677, 679, 685, 687, 688, 692, 801, 802, 990, 1038, 1042, 1044, 1047, 1050, 1051], "toeplitz": 115, "simul": [115, 130, 158, 195, 217, 258, 280, 1018], "n_samples_rang": [115, 254], "lw_mse": 115, "oa_ms": 115, "lw_shrinkag": 115, "oa_shrinkag": 115, "error_norm": [115, 117, 474, 475, 476, 477, 478, 479, 480, 481], "darkorang": [115, 132, 136, 137, 224, 234, 246, 267, 268, 269, 272, 287, 289, 305, 311, 312, 340, 367], "445": [115, 1002, 1015], "plot_lw_vs_oa": [115, 1015], "d_": [116, 414, 419, 653, 674, 685, 782, 991, 996], "mle": [116, 135, 546, 1043, 1046], "resist": [116, 117, 387], "erron": [116, 117, 419, 990, 1036, 1043, 1047], "breakdown": [116, 117, 240, 684, 990], "n_": [116, 117, 198, 280, 332, 414, 419, 421, 651, 657, 690, 701, 986, 990, 994, 996, 997, 1001, 1004, 1006, 1009, 1010], "smallest": [116, 117, 223, 300, 365, 382, 414, 416, 423, 532, 546, 635, 659, 660, 661, 687, 688, 695, 699, 700, 803, 806, 807, 817, 822, 876, 923, 1010, 1048], "pure": [116, 117, 121, 207, 223, 401, 414, 478, 484, 501, 562, 563, 564, 565, 569, 570, 571, 710, 720, 790, 799, 914, 915, 916, 917, 1004], "rousseuw": [116, 117], "rousseeuw": [116, 117, 414, 416, 474, 479, 796, 797, 1000], "ass": [116, 117, 416, 479], "1984": [116, 117, 416, 479, 914, 915, 1010], "wilson": [116, 384, 1035, 1038], "hilferti": 116, "1931": 116, "proceed": [116, 177, 382, 384, 414, 425, 444, 449, 516, 701, 713, 730, 760, 853, 903, 994, 1006, 1007, 1008], "academi": [116, 853], "688": 116, "n_outlier": [116, 117, 159, 226, 250, 307], "gen_cov": 116, "ey": [116, 117, 268, 272, 349, 382, 539, 546, 555], "outliers_cov": 116, "robust_cov": 116, "nmcd": 116, "nmle": 116, "26253567e": 116, "06695631e": 116, "22747343e": 116, "23773583": 116, "24640578": 116, "51963999": 116, "inlier": [116, 159, 226, 250, 260, 320, 401, 416, 436, 474, 568, 676, 682, 852, 883, 895, 909, 910, 912, 990, 1000, 1042, 1043, 1048], "inlier_plot": 116, "outlier_plot": 116, "get_xlim": [116, 218, 228, 320], "zz": 116, "mahal_emp_cov": 116, "emp_cov_contour": 116, "pubu_r": 116, "mahal_robust_cov": 116, "robust_contour": 116, "ylorbr_r": 116, "dist": [116, 244, 254, 391, 474, 475, 476, 477, 478, 479, 480, 481, 704, 767, 773, 846, 847], "borderaxespad": 116, "cubic": [116, 424], "suggest": [116, 131, 145, 149, 195, 198, 280, 349, 374, 386, 387, 394, 401, 418, 419, 421, 474, 479, 570, 650, 831, 988, 990, 991, 999, 1002, 1009, 1028, 1039, 1046, 1049, 1052], "emp_mah": 116, "markeredgewidth": [116, 284], "rm": [116, 182, 391, 395, 416], "mahal": 116, "robust_mah": 116, "location_": [116, 117, 474, 475, 476, 477, 478, 479, 480, 481], "plot_mahalanobis_dist": [116, 1015], "compens": [117, 194, 196, 200, 223, 241, 281, 416, 419], "soon": [117, 401, 1026], "5n_": 117, "johanna": 117, "hardin": 117, "rock": 117, "decemb": [117, 158, 184, 382, 669, 690, 691, 1035, 1043, 1045, 1047, 1048, 1050], "928": [117, 442], "946": 117, "zoubir": 117, "koivunen": 117, "chakhchoukh": 117, "muma": 117, "tutori": [117, 168, 169, 170, 212, 225, 241, 280, 387, 388, 393, 395, 400, 409, 414, 457, 467, 696, 1009, 1026, 1038], "treatment": [117, 194, 381, 419, 474, 479], "magazin": [117, 423], "29": [117, 126, 180, 184, 214, 223, 227, 240, 334, 339, 384, 421, 564, 565, 695, 699, 785, 801, 858, 990, 991, 1008], "font_manag": [117, 306, 348], "range_n_outli": 117, "err_loc_mcd": 117, "err_cov_mcd": 117, "err_loc_emp_ful": 117, "err_cov_emp_ful": 117, "err_loc_emp_pur": 117, "err_cov_emp_pur": 117, "outliers_index": 117, "outliers_offset": 117, "inliers_mask": 117, "pure_x": 117, "pure_loc": 117, "pure_emp_cov": 117, "font_prop": 117, "fontproperti": [117, 306, 348], "hat": [117, 137, 276, 280, 305, 332, 385, 413, 416, 420, 421, 985, 990, 991, 994, 996, 998], "_2": [117, 184, 353, 419, 422, 536, 542, 550, 551, 651, 657, 990, 998, 1008, 1009], "x_size": 117, "955": [117, 300, 418, 659, 1015], "plot_robust_vs_empirical_covari": [117, 1015], "largest": [118, 130, 148, 177, 225, 384, 414, 416, 419, 448, 532, 546, 562, 563, 564, 565, 569, 570, 593, 714, 801, 802, 822, 844, 876, 914, 915, 916, 917, 943, 991, 994, 1004, 1009, 1010], "invert": [118, 133, 174, 244, 362, 363, 399, 416, 422, 635, 694, 698, 1004, 1044], "fairli": [118, 154, 245, 295, 316, 395, 414, 564, 565, 704, 995, 1026], "readabl": [118, 281, 332, 392, 393, 395, 409, 539, 1044, 1047, 1048, 1049, 1050], "prng": [118, 1027], "prec": [118, 251, 532, 994], "smallest_coef": [118, 532], "largest_coef": [118, 532], "multivariate_norm": [118, 121, 266, 427, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486], "prec_": 118, "lw_cov_": 118, "lw_prec_": 118, "this_cov": 118, "this_prec": 118, "ma": [118, 326, 349, 990, 1041, 1046], "masked_equ": 118, "set_facecolor": [118, 266], "set_axis_bgcolor": 118, "plot_sparse_cov": [118, 1015], "appar": [120, 996, 1018], "scatterplot": [120, 202, 280], "maxim": [120, 121, 124, 128, 138, 155, 202, 271, 272, 281, 285, 289, 290, 310, 325, 331, 349, 353, 365, 369, 384, 401, 412, 414, 417, 419, 423, 424, 554, 599, 615, 616, 649, 650, 653, 674, 684, 685, 725, 803, 806, 807, 817, 875, 881, 891, 988, 990, 993, 994, 997, 999, 1009, 1023, 1026, 1038, 1040, 1045, 1048, 1050], "weak": [120, 153, 156, 227, 241, 286, 418, 562, 563, 564, 569, 570, 571, 635, 997, 1018, 1051], "var": [120, 121, 145, 177, 203, 280, 384, 388, 423, 646, 650, 908, 909, 910, 911, 912, 994, 1043], "corr": [120, 198, 280], "corrcoef": [120, 138], "plsca": [120, 488], "x_train_r": 120, "y_train_r": 120, "x_test_r": 120, "y_test_r": 120, "221": [120, 161, 1038], "222": [120, 161, 1009], "yj": [120, 324], "noiz": 120, "xb": [120, 885], "95213778": 120, "10988205": 120, "08029173": 120, "80414253": 120, "81422502": 120, "83199463": 120, "92896897": 120, "76438188": 120, "8798454": 120, "47804127": 120, "59007842": 120, "58442585": 120, "73908648": 120, "87282488": 120, "85481267": 120, "16714557": 120, "99951652": 120, "09671339": 120, "exce": [120, 299, 330, 424, 447, 520, 607, 654, 663, 1044, 1047, 1049], "209": [120, 745, 882, 1015], "plot_compare_cross_decomposit": [120, 1015], "pcr": [121, 417], "greedili": [121, 177, 414, 418, 423, 465], "suffer": [121, 150, 197, 300, 320, 362, 374, 414, 421, 549, 767, 989, 990, 994, 997, 1027, 1044], "dive": [121, 387, 393], "explained_variance_": [121, 539, 546, 549, 1027, 1042], "onto": [121, 244, 245, 255, 320, 399, 419, 422, 426, 451, 453, 466, 538, 544, 548, 632, 633, 635, 693, 988, 992, 997], "recommend": [121, 150, 190, 240, 251, 257, 276, 289, 324, 331, 353, 374, 375, 381, 385, 387, 389, 393, 395, 399, 405, 417, 418, 419, 421, 423, 443, 452, 454, 456, 465, 501, 513, 540, 543, 549, 554, 566, 567, 574, 587, 588, 594, 611, 616, 636, 637, 643, 675, 681, 697, 702, 703, 705, 707, 809, 815, 817, 825, 862, 869, 871, 878, 885, 886, 891, 892, 894, 895, 896, 897, 899, 908, 911, 943, 962, 983, 991, 994, 996, 998, 1001, 1004, 1006, 1008, 1009, 1010, 1012, 1018, 1030, 1037, 1038, 1044, 1045, 1046, 1047, 1049, 1051], "026": 121, "predit": 121, "pca_2": 121, "673": [121, 362, 393], "512": [121, 222, 241, 1015], "plot_pcr_vs_pl": [121, 1015], "052": [123, 361, 542, 1015], "plot_digits_last_imag": [123, 1015], "iris": [124, 286, 287, 1025], "150x4": 124, "legend_el": [124, 159, 236, 283, 303, 353], "flower": [124, 136, 289, 511, 512, 994, 1013], "versicolor": [124, 289, 290, 509], "differenti": [124, 287, 421, 424, 564, 565, 624, 627], "unus": [124, 134, 196, 220, 243, 245, 468, 584, 767, 775, 983, 991, 1035, 1043, 1045, 1046, 1048, 1050], "3rd": [124, 187, 841, 884, 996, 1004], "eigenvalu": [124, 271, 336, 412, 414, 416, 457, 467, 474, 475, 476, 477, 478, 479, 480, 481, 540, 546, 554, 678, 693, 694, 696, 698, 700, 872, 986, 991, 1004, 1037, 1041, 1044, 1045, 1046, 1047], "plot_iris_dataset": [124, 1015], "easi": [125, 196, 231, 241, 269, 278, 280, 349, 361, 370, 382, 393, 395, 399, 400, 414, 421, 505, 509, 515, 873, 983, 989, 993, 1001, 1004, 1013, 1014, 1018, 1028, 1045, 1050, 1051], "321": [125, 228, 1015], "y2": [125, 144, 721, 995], "324": [125, 382], "325": 125, "326": [125, 362], "plot_random_dataset": [125, 1015], "degener": [126, 267, 426, 445, 459, 538, 725, 990, 994, 1044, 1048, 1049], "vocabulari": [126, 238, 361, 362, 399, 422, 593, 594, 595, 596, 996, 1019, 1028, 1035, 1037, 1040, 1043, 1046, 1048], "353": [126, 322, 362, 1015, 1028], "w0": 126, "w1": [126, 421, 662], "54": [126, 177, 200, 207, 223, 226, 260, 382, 384, 414, 496, 1036, 1037], "make_ml_clf": 126, "ff3333": 126, "0198e1": 126, "bf5fff": 126, "fcd116": 126, "ff7216": 126, "4dbd33": 126, "87421f": 126, "plot_2d": [126, 243], "p_c": [126, 528], "p_w_c": [126, 528], "allow_unlabel": [126, 258, 528], "return_distribut": [126, 528], "sep": [126, 289], "p_w": 126, "plot_random_multilabel_dataset": [126, 1015], "blind": [127, 130, 192, 222, 361, 419, 538, 546, 1015], "precomput": [127, 128, 129, 192, 201, 246, 257, 300, 302, 389, 396, 399, 401, 414, 422, 425, 437, 445, 446, 449, 450, 451, 455, 457, 462, 470, 476, 487, 488, 489, 529, 536, 540, 542, 545, 547, 553, 559, 561, 563, 565, 567, 570, 573, 575, 615, 616, 625, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 686, 687, 689, 690, 693, 695, 696, 697, 701, 778, 782, 785, 796, 797, 839, 840, 848, 849, 850, 852, 853, 854, 856, 857, 858, 864, 907, 908, 909, 910, 911, 912, 915, 917, 970, 971, 972, 986, 992, 997, 1009, 1014, 1015, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "chapter": [128, 370, 389, 414, 419, 421, 424, 535, 537, 539, 619, 624, 627, 648, 984, 987, 990, 1009, 1010], "basicconfig": 128, "asctim": 128, "levelnam": 128, "faces_cent": 128, "image_shap": [128, 259], "constrained_layout": [128, 196, 243, 326, 327, 334], "set_constrained_layout_pad": 128, "w_pad": [128, 151, 366], "h_pad": [128, 151, 366], "set_edgecolor": 128, "vec": [128, 422, 543, 545, 552], "im": [128, 138, 291, 304], "pad": [128, 151, 190, 196, 243, 260, 361, 366, 422, 593, 594, 596], "initialis": [128, 543, 545, 552, 1035, 1043, 1044], "mathbb": [128, 145, 182, 417, 994, 1001, 1009], "4096": [128, 382, 419, 500], "human": [128, 196, 361, 409, 414, 419, 863, 864, 994, 1001, 1044], "friendli": [128, 375, 387, 395, 419, 899, 1006, 1007, 1013, 1014], "visualis": [128, 131, 138, 258, 549, 804, 805, 808, 820, 821, 822, 823, 824, 997, 1014], "64x64": [128, 382, 419], "noise_variance_": [128, 211, 537, 539, 546, 661, 1042, 1049], "pixelwis": 128, "pca_estim": 128, "nmf_estim": 128, "subcompon": [128, 419], "ica_estim": 128, "15e": 128, "batch_pca_estim": 128, "batch_dict_estim": 128, "enhanc": [128, 227, 386, 387, 391, 399, 401, 414, 994, 1033, 1034, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "kmeans_estim": 128, "heteroscedast": [128, 135, 155, 225, 419, 882, 894], "fa_estim": 128, "wrap": [128, 147, 155, 300, 381, 389, 401, 438, 513, 662, 681, 832, 890, 984, 994, 997, 1009, 1013, 1035, 1040, 1043, 1045, 1046, 1048, 1050], "colormap": [128, 144, 187, 215, 232, 349, 354, 366, 702, 1048], "uv": [128, 419], "x_1": [128, 172, 182, 220, 224, 417, 419, 421, 424, 618, 630, 662, 879, 906, 907, 990, 996, 998, 1004, 1008], "x_n": [128, 419, 906, 907, 996, 998, 1008], "dict_pos_dict_estim": 128, "positive_dict": [128, 536, 542, 550, 551], "dict_pos_code_estim": 128, "fit_algorithm": [128, 536, 542, 1050, 1051], "cd": [128, 177, 384, 385, 387, 391, 393, 419, 476, 477, 483, 536, 542, 544, 545, 548, 550, 551, 552, 990, 1028, 1040, 1050], "positive_cod": [128, 536, 542, 547, 550, 551], "dict_pos_estim": 128, "plot_faces_decomposit": [128, 1015], "imagin": [129, 179, 257, 353, 418, 419, 422, 990], "plai": [129, 156, 181, 206, 232, 274, 311, 345, 346, 374, 1028], "microphon": 129, "s1": [129, 177, 187, 211, 212, 384, 1027], "sinusoid": [129, 143, 155, 207, 256, 987, 1027], "s2": [129, 177, 187, 211, 212, 384, 555, 1027], "sawtooth": [129, 1027], "saw": [129, 224, 227, 1027], "tooth": [129, 1027], "s_": [129, 284, 991, 1002, 1004, 1027], "a_": [129, 412, 414, 543, 545, 552, 990, 1027], "mixing_": [129, 130, 538, 1027], "prove": [129, 1018], "revert": [129, 635, 637, 638, 1042, 1047, 1052], "unmix": [129, 426, 538], "allclos": [129, 160, 1006, 1027], "mean_": [129, 284, 537, 538, 539, 544, 546, 548, 886, 1004, 1027, 1043], "steelblu": [129, 130, 165], "sig": 129, "369": [129, 361, 1015], "plot_ica_blind_source_separ": [129, 1015], "geometr": [130, 414, 693, 709, 735, 761, 991, 1043], "standard_t": 130, "s_pca_": 130, "s_ica_": 130, "plot_sampl": [130, 272], "axis_list": 130, "x_axi": [130, 231, 284], "y_axi": [130, 231], "quiver": 130, "hline": 130, "set_zord": 130, "415": [130, 138, 362, 1015], "plot_ica_vs_pca": [130, 1015], "firstli": [131, 374, 399, 662, 1028], "undistort": 131, "noiseless": [131, 992], "promin": [131, 401], "reminisc": 131, "downsampl": 131, "075": [131, 369, 1015], "show_with_diff": 131, "puor": 131, "22692": 131, "dico": 131, "n_steps_": [131, 454, 542, 543, 1048], "intercept": [131, 215, 232, 240, 358, 401, 487, 488, 489, 554, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 881, 885, 888, 906, 907, 913, 990, 992, 994, 999, 1008, 1009, 1038, 1040, 1044, 1045], "transform_algorithm": [131, 137, 536, 542, 547, 1051], "n1": 131, "atom": [131, 137, 419, 536, 542, 544, 547, 548, 550, 551, 658, 668, 689, 990, 1035, 1048], "transform_n_nonzero_coef": [131, 137, 536, 542, 547], "n2": 131, "n4": 131, "transform_alpha": [131, 137, 536, 542, 547, 1048], "set_param": [131, 138, 146, 152, 155, 196, 197, 203, 211, 212, 216, 227, 231, 255, 260, 293, 303, 329, 352, 362, 390, 401, 414, 415, 421, 424, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 984, 1000, 1019, 1026, 1027, 1035, 1041, 1042, 1043, 1048, 1049], "678": [131, 1015], "plot_image_denois": [131, 1015], "flip": [132, 587, 746, 943, 996, 1039, 1048], "x_ipca": 132, "x_pca": 132, "turquois": [132, 136, 137, 157, 229, 240, 246, 268, 269, 287], "x_transform": [132, 161, 257, 490, 536, 537, 538, 539, 540, 542, 544, 548, 571, 643, 644, 693, 694, 695, 696], "nmean": 132, "shadow": [132, 136, 137, 246, 340, 356, 363, 422], "scatterpoint": [132, 136, 246, 268, 340], "229": [132, 312, 994, 1015], "plot_incremental_pca": [132, 1015], "nest": [133, 142, 192, 212, 257, 273, 275, 297, 336, 375, 393, 401, 405, 414, 418, 424, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 467, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 509, 524, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 808, 817, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 994, 997, 1015, 1035, 1036, 1039, 1041, 1042, 1043, 1049], "train_ax": 133, "test_ax": 133, "straight": [133, 213, 219, 221, 277, 353, 374], "x_test_kernel_pca": 133, "orig_data_ax": 133, "pca_proj_ax": 133, "kernel_pca_proj_ax": 133, "unfold": [133, 390, 991], "untangl": 133, "mind": [133, 158, 194, 195, 196, 241, 324, 325, 361, 362, 370, 387, 409, 416, 418, 421, 651, 652, 709, 990, 1009, 1013, 1019, 1026], "investig": [133, 138, 142, 191, 357, 387, 990], "pca_back_proj_ax": 133, "kernel_pca_back_proj_ax": 133, "reli": [133, 148, 152, 158, 177, 198, 211, 212, 297, 300, 330, 334, 361, 374, 375, 389, 392, 395, 396, 399, 401, 411, 412, 414, 419, 421, 422, 554, 598, 602, 612, 613, 782, 830, 833, 871, 960, 983, 986, 988, 990, 994, 997, 1002, 1004, 1009, 1018, 1043, 1044, 1045, 1049, 1051, 1052], "analyt": [133, 419, 424, 537, 625, 713, 984, 988, 994, 1012, 1018], "kernal": 133, "relianc": [133, 227], "553": [133, 1015], "plot_kernel_pca": [133, 1015], "cla": 134, "plot_pca_iri": [134, 1015], "homoscedast": [135, 253, 324, 994, 1043], "succe": [135, 158, 207], "subspac": [135, 417, 421, 457, 520, 560, 561, 696, 700, 943, 988, 997, 1000, 1006, 1018, 1027], "overestim": [135, 370, 418], "circumst": [135, 241, 997, 1013], "nip": [135, 384, 520, 546, 571, 646, 994], "604": [135, 546], "minka": [135, 546, 990], "deni": [135, 1037, 1038, 1042, 1043, 1044, 1050, 1051], "engemann": [135, 1037, 1038, 1042], "x_homo": 135, "x_hetero": 135, "pca_scor": 135, "fa_scor": 135, "shrunk_cov_scor": 135, "lw_score": 135, "n_components_pca": 135, "n_components_fa": 135, "n_components_pca_ml": 135, "axhlin": [135, 168, 213, 279, 283], "violet": [135, 1051], "106": [135, 177, 264, 384, 882, 988, 1015, 1036], "plot_pca_vs_fa_model_select": [135, 1015], "contrast": [136, 196, 225, 256, 260, 280, 282, 309, 325, 362, 401, 413, 414, 417, 421, 424, 454, 457, 467, 624, 648, 817, 862, 984, 987, 989, 990, 994, 997, 999, 1002, 1004, 1007, 1008, 1010, 1045], "92461872": 136, "05306648": 136, "x_r": [136, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "x_r2": 136, "196": [136, 903, 1007, 1015], "plot_pca_vs_lda": [136, 1015], "ricker": 137, "mexican": 137, "piecewis": [137, 332, 412, 985, 990, 1004, 1010], "matter": [137, 272, 353, 370, 414, 415, 421, 572, 673, 681, 683, 990, 1039], "motiv": [137, 387, 389, 401, 986, 994, 1004, 1018, 1048], "heavier": [137, 416, 990], "ricker_funct": 137, "ricker_matrix": 137, "d_fix": 137, "d_multi": 137, "first_quart": 137, "transform_n_nozero_coef": 137, "lasso_lar": [137, 536, 542, 547, 553, 1045], "n_nonzero": 137, "coder": [137, 547, 721], "flatnonzero": [137, 211, 279, 288, 289, 785], "debias": 137, "lstsq": [137, 387, 662, 675], "rcond": 137, "270": [137, 207, 267, 339, 1015], "plot_sparse_cod": [137, 1015], "convex": [137, 154, 155, 192, 201, 230, 243, 358, 362, 414, 416, 419, 427, 451, 457, 467, 478, 480, 481, 484, 485, 486, 663, 681, 697, 990, 991, 997, 998, 1008, 1015, 1048], "uncov": [138, 700], "inher": [138, 218, 370, 414, 419, 984, 986, 988, 989, 991, 995], "varimax": [138, 419, 537, 1047], "jona": [138, 1047, 1052], "sassenhagen": [138, 1047, 1052], "set_yticklabel": [138, 182, 190, 191, 198, 291, 363], "n_comp": [138, 200], "unrot": 138, "52106591": 138, "37741762": 138, "26934744": 138, "92329566": 138, "5804131": 138, "02449161": 138, "56485654": 138, "06694199": 138, "88096009": 138, "4472869": 138, "41691605": 138, "55390036": 138, "99918858": 138, "01915283": 138, "96228895": 138, "05840206": 138, "98633022": 138, "05752333": 138, "16052385": 138, "67443065": 138, "90809432": 138, "41726413": 138, "85857475": 138, "43847489": 138, "plot_varimax_fa": [138, 1015], "subclass": [140, 389, 424, 579, 960, 1040, 1043, 1048, 1052], "showcas": [140, 143, 148, 152, 155, 156, 158, 192, 389], "statu": [140, 188, 336, 381, 391, 405, 501, 846, 847, 1052], "_is_fit": 140, "snippet": [140, 370, 387, 392, 395, 399, 411, 421, 422, 423, 984, 1004, 1017, 1048], "customestim": 140, "kushan": [140, 1052], "kushansharma1": 140, "classes_": [140, 215, 232, 251, 257, 289, 338, 339, 387, 389, 401, 439, 442, 443, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 598, 599, 615, 636, 663, 664, 671, 673, 679, 680, 681, 702, 705, 707, 792, 803, 806, 807, 817, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 848, 853, 856, 863, 866, 873, 874, 877, 887, 901, 902, 903, 906, 908, 911, 914, 916, 919, 994, 1005, 1008, 1036, 1039, 1040, 1042, 1045, 1047], "track": [140, 146, 154, 339, 387, 390, 391, 411, 539, 963, 995, 1013, 1014, 1042, 1045], "logic": [140, 375, 388, 389, 394, 411, 421, 1010, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "sklearn_is_fit": [140, 1015], "oob": [141, 154, 192, 421, 520, 569, 1014, 1015, 1037, 1048, 1052], "depict": [142, 282, 421, 993], "zhu": [142, 421, 524, 558, 663, 901], "principl": [142, 186, 305, 363, 387, 399, 401, 402, 418, 421, 943, 983, 993, 997, 1008, 1042], "repeatedli": [142, 333, 370, 401, 414, 421, 424, 513, 551, 671, 672, 681, 682, 683, 785, 984, 998, 1023], "zou": [142, 211, 421, 524, 558, 661, 990, 1008], "rosset": [142, 421, 524, 558], "sphere": [142, 192, 242, 243, 246, 247, 248, 300, 362, 420, 524, 594, 693, 694, 695, 696, 697, 768, 929, 988, 992, 997, 1015], "roughli": [142, 155, 212, 272, 290, 300, 325, 374, 401, 419, 422, 524, 991, 1035], "2_000": 142, "percent": [142, 497, 605, 1007], "predecessor": [142, 455, 460, 461, 462, 1052], "mistak": [142, 174, 339, 370, 414, 418, 739, 877, 891, 892, 894, 895, 896, 897, 990, 995], "incorrect": [142, 194, 287, 341, 370, 387, 414, 612, 613, 637, 638, 738, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "consecut": [142, 153, 224, 399, 413, 418, 422, 448, 452, 454, 455, 457, 461, 464, 467, 542, 543, 544, 551, 607, 650, 671, 672, 673, 681, 682, 683, 801, 802, 808, 841, 842, 843, 844, 845, 863, 864, 983, 1004, 1028, 1043], "weak_learn": 142, "max_leaf_nod": [142, 148, 157, 223, 332, 369, 421, 562, 563, 564, 565, 566, 567, 569, 570, 571, 914, 915, 916, 917, 1038, 1044, 1046], "adaboost_clf": 142, "misclassification_error": 142, "preval": [142, 329, 401, 705, 717, 994], "dummy_clf": [142, 556], "weak_learners_misclassification_error": 142, "dummy_classifiers_misclassification_error": 142, "475": 142, "692": 142, "surpass": [142, 353, 863, 864], "staged_predict": [142, 153, 156, 421, 558, 559, 564, 565, 566, 567, 1035, 1047], "conclud": [142, 195, 203, 241, 280, 363, 370, 402, 866], "boosting_error": 142, "missclassif": 142, "jitter": [142, 655, 659, 1046], "stagewis": 142, "estimator_errors_": [142, 558, 559], "estimator_weights_": [142, 558, 559], "weak_learners_info": 142, "layout": [142, 320, 399, 906, 907, 908, 911, 927, 1009, 1038, 1040, 1052], "get_figur": 142, "reweight": [142, 362, 401, 416, 421, 595, 596, 653, 674, 685], "formul": [142, 179, 188, 227, 289, 387, 414, 416, 419, 422, 424, 427, 480, 554, 555, 562, 569, 655, 656, 659, 660, 661, 663, 664, 670, 675, 767, 773, 802, 908, 911, 914, 916, 990, 994, 995, 998, 1004, 1016, 1030, 1052], "th": [142, 260, 332, 369, 400, 414, 418, 421, 429, 446, 450, 456, 458, 464, 468, 477, 562, 563, 564, 565, 566, 567, 569, 570, 571, 598, 599, 637, 653, 654, 674, 676, 685, 701, 723, 784, 824, 887, 931, 984, 990, 994, 998, 1001, 1008, 1009, 1050], "boil": [142, 390, 401, 416], "forc": [142, 179, 208, 227, 300, 324, 361, 381, 385, 391, 410, 418, 421, 455, 462, 501, 611, 614, 651, 652, 657, 658, 662, 665, 666, 667, 668, 677, 678, 679, 686, 689, 692, 758, 782, 785, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 908, 909, 910, 911, 912, 924, 926, 927, 1004, 1030, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1051], "plot_adaboost_multiclass": [142, 1015], "299": [143, 685], "drucker": [143, 421, 559], "1997": [143, 382, 419, 421, 540, 559, 695, 699, 990, 991, 994], "regr_1": [143, 367, 368], "regr_2": [143, 367, 368], "y_1": [143, 367, 368, 417, 994, 998, 1008], "y_2": [143, 367, 368, 998], "plot_adaboost_regress": [143, 1015], "stump": [144, 421, 564, 1046], "puriti": [144, 918, 920], "plot_adaboost_twoclass": [144, 1015], "bdt": 144, "plot_color": [144, 366], "br": 144, "plot_step": [144, 151, 366], "class_nam": [144, 274, 887, 918, 919, 920, 1010, 1051], "xx0": [144, 636], "xx1": [144, 636], "twoclass_output": 144, "plot_rang": 144, "628": [144, 362, 1015], "irreduc": [145, 994], "dark": [145, 195, 349, 382, 1052], "light": [145, 382], "beam": [145, 1035], "pointwis": [145, 186, 425, 449], "offset": [145, 200, 399, 416, 419, 474, 513, 514, 568, 637, 638, 646, 647, 649, 650, 682, 732, 779, 781, 852, 910, 994, 1008, 1026, 1043], "bootstrap": [145, 146, 154, 190, 283, 292, 331, 418, 421, 559, 560, 561, 562, 563, 568, 569, 570, 932, 965, 990, 1035, 1036, 1038, 1040, 1043, 1045, 1048], "stem": [145, 153, 197, 222, 272, 418, 422, 986, 996], "tibshirani": [145, 146, 157, 177, 211, 279, 384, 418, 421, 525, 564, 565, 633, 661, 726, 727, 728, 836, 853, 914, 915, 984, 988, 990, 995, 1001, 1010], "springer": [145, 146, 157, 184, 279, 413, 414, 418, 419, 421, 525, 540, 564, 565, 695, 699, 701, 710, 725, 730, 744, 745, 760, 801, 914, 915, 991, 994, 995, 1001, 1010], "0255": 145, "0003": 145, "0152": 145, "0098": 145, "0196": 145, "0004": [145, 325, 609], "0092": 145, "n_repeat": [145, 149, 156, 176, 195, 197, 198, 280, 297, 329, 418, 520, 639, 818, 819, 1002], "knn": [145, 164, 169, 190, 303, 308, 309, 312, 325, 331, 340, 361, 421, 607, 855, 901, 902, 997, 1007, 1026, 1041], "y_predict": [145, 389, 1035], "y_error": [145, 229], "y_nois": 145, "y_bia": 145, "y_var": 145, "114": [145, 334, 715, 1015, 1035], "plot_bias_vari": [145, 1015], "z_i": [146, 998], "y_i": [146, 332, 357, 413, 421, 985, 986, 990, 994, 998, 1008, 1009, 1010], "whilst": [146, 245], "practition": [146, 227], "suitabl": [146, 155, 207, 209, 227, 316, 363, 381, 382, 393, 396, 414, 419, 422, 457, 467, 473, 492, 510, 513, 632, 640, 841, 842, 845, 880, 881, 904, 959, 963, 988, 990, 993, 1004, 1006, 1008, 1013, 1028, 1049, 1050], "ed": [146, 157, 414, 421, 525, 564, 565, 1006, 1035, 1042], "p592": 146, "593": 146, "kian": [146, 1040, 1050, 1051, 1052], "ho": [146, 421, 560, 561, 994, 1040, 1043, 1044, 1049], "hui": [146, 211, 543, 545, 552, 661, 990], "ordereddict": 146, "warm_start": [146, 183, 216, 332, 389, 393, 401, 421, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 615, 651, 653, 654, 657, 663, 665, 667, 671, 672, 673, 674, 681, 682, 683, 685, 801, 802, 855, 863, 864, 1000, 1016, 1030, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1049, 1051], "disabl": [146, 327, 336, 361, 385, 387, 406, 422, 454, 465, 473, 542, 543, 544, 551, 564, 565, 566, 567, 865, 883, 895, 904, 926, 927, 1004, 1041, 1044, 1048, 1050, 1053], "trajectori": 146, "ensemble_clf": 146, "oob_scor": [146, 421, 560, 561, 562, 563, 569, 570, 1040, 1042], "log2": [146, 233, 262, 562, 563, 564, 565, 569, 570, 914, 915, 916, 917, 995], "error_r": 146, "min_estim": 146, "max_estim": 146, "oob_error": 146, "oob_score_": [146, 560, 561, 562, 563, 564, 565, 569, 570, 1037, 1051], "clf_err": 146, "486": [146, 207, 225, 1015], "plot_ensemble_oob": [146, 1015], "betatim": [147, 162, 1050], "leak": [147, 285, 361, 370, 415, 418, 866, 891, 892, 894, 895, 896, 897, 1004, 1035, 1042, 1045, 1051, 1052], "80_000": 147, "x_full_train": 147, "y_full_train": 147, "x_train_ensembl": 147, "x_train_linear": 147, "y_train_ensembl": 147, "y_train_linear": 147, "random_forest": 147, "gradient_boost": [147, 1037, 1038, 1044], "random_tree_embed": 147, "rt_model": 147, "randomtreesembeddingrandomtreesembed": 147, "rf_appli": 147, "rf_leaves_yield": 147, "kw_arg": [147, 870, 1004, 1041], "rf_model": 147, "0x7f94502aedc0": 147, "functiontransformerfunctiontransform": 147, "gbdt_appli": 147, "gbdt_leaves_yield": 147, "gbdt_model": 147, "0x7f943a580790": 147, "rt": 147, "rf": [147, 148, 162, 165, 166, 197, 329, 370, 421, 572, 574, 575], "gbdt": [147, 196, 329, 330, 335, 392, 421], "model_displai": 147, "622": [147, 160, 239, 546, 1015], "plot_feature_transform": [147, 1015], "hgbt": [148, 158, 421], "20640": [148, 191, 382, 495], "n_core": 148, "only_physical_cor": 148, "unnecessari": [148, 266, 392, 448, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 710, 997, 1004, 1014, 1018, 1038, 1040, 1045, 1046, 1048, 1051], "min_samples_leaf": [148, 154, 155, 197, 329, 332, 365, 421, 562, 563, 564, 565, 566, 567, 569, 570, 571, 914, 915, 916, 917, 1010, 1041], "early_stop": [148, 158, 196, 231, 315, 332, 361, 401, 421, 566, 567, 671, 672, 673, 681, 682, 683, 863, 864, 1008, 1043, 1046, 1049, 1050], "return_train_scor": [148, 284, 326, 418, 803, 806, 807, 817, 829, 1041, 1042, 1044], "wast": [148, 393, 418, 419, 983], "plotli": [148, 281, 387, 405, 408], "cursor": [148, 281], "px": [148, 281], "make_subplot": 148, "shared_yax": 148, "subplot_titl": 148, "model_nam": [148, 260, 299], "colors_list": 148, "param_nam": [148, 281, 295, 335, 357, 406, 825, 833, 989, 1028], "param_": 148, "scatter_fig": 148, "mean_fit_tim": [148, 302, 803, 817], "error_x": [148, 281], "std_fit_tim": [148, 302, 803, 817], "error_i": [148, 281], "hover_data": [148, 281], "line_fig": 148, "scatter_trac": 148, "line_trac": 148, "add_trac": 148, "mean_score_tim": [148, 278, 281, 803, 817], "std_score_tim": [148, 281, 803, 817], "update_layout": [148, 281], "xaxis2": 148, "traceord": 148, "borderwidth": 148, "plateau": [148, 153, 176, 278, 282], "earlier": [148, 196, 227, 381, 387, 417, 837, 840, 1004, 1033, 1036, 1048, 1050], "never": [148, 258, 370, 387, 396, 399, 409, 414, 415, 417, 418, 455, 462, 528, 560, 561, 562, 569, 866, 867, 986, 1004, 1045, 1048], "hgbdt": 148, "domin": [148, 191, 198, 223, 228, 260, 289, 325, 382, 393, 413, 886, 996, 1004, 1010, 1051], "ever": [148, 162, 396, 421, 1018], "disput": 148, "alwai": [148, 152, 155, 202, 223, 241, 248, 254, 283, 286, 290, 327, 346, 353, 357, 362, 370, 374, 375, 381, 385, 387, 388, 389, 393, 400, 401, 405, 413, 414, 415, 418, 421, 422, 423, 424, 431, 437, 448, 454, 469, 470, 472, 474, 487, 488, 489, 493, 501, 513, 514, 549, 554, 556, 557, 559, 561, 563, 564, 565, 566, 567, 569, 570, 573, 575, 586, 593, 594, 596, 599, 616, 632, 633, 635, 637, 638, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 676, 677, 678, 681, 683, 684, 700, 710, 714, 720, 726, 727, 728, 736, 738, 739, 743, 786, 789, 790, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 839, 840, 849, 850, 857, 858, 864, 871, 879, 884, 886, 889, 891, 892, 893, 894, 895, 896, 897, 899, 907, 908, 909, 911, 912, 914, 915, 917, 944, 953, 954, 983, 984, 986, 988, 990, 993, 994, 997, 1000, 1002, 1006, 1007, 1009, 1010, 1018, 1019, 1026, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "694": [148, 1015], "plot_forest_hist_grad_boosting_comparison": [148, 1015], "feature_importances_": [149, 150, 156, 177, 197, 198, 401, 421, 423, 558, 559, 562, 563, 564, 565, 569, 570, 571, 598, 599, 602, 914, 915, 916, 917, 1037, 1040, 1044], "estimators_": [149, 151, 258, 329, 401, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 834, 835, 836, 837, 838, 839, 840, 1036, 1042, 1049], "forest_import": 149, "mdi": [149, 156, 192, 193, 198, 421, 469, 501, 569, 635, 639, 832, 866, 880, 1002, 1015], "overcom": [149, 227, 374, 422], "importances_mean": [149, 156, 197, 198, 329, 639, 1002], "347": 149, "importances_std": [149, 639, 1002], "omit": [149, 194, 195, 343, 392, 427, 480, 539, 671, 673, 681, 810, 812, 834, 835, 838, 841, 842, 843, 844, 845, 863, 992, 999], "823": [149, 300, 1015], "plot_forest_import": [149, 1015], "multicollinear": [149, 150, 192, 193, 197, 286, 341, 417, 505, 569, 639, 660, 832, 990, 1002, 1015], "hotter": 150, "job": [150, 158, 269, 387, 391, 395, 421, 425, 442, 449, 451, 453, 455, 457, 462, 463, 466, 469, 472, 473, 477, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 607, 612, 613, 615, 639, 644, 662, 693, 694, 695, 696, 697, 698, 699, 778, 782, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 865, 868, 901, 902, 904, 960, 1018, 1021], "five": [150, 158, 267, 339, 342, 382, 536, 544, 550, 991, 997, 1009, 1018, 1035], "drawback": [150, 240, 986, 989], "img_shap": 150, "imp_reshap": 150, "met": [150, 257, 389, 423, 539, 546, 632, 676, 990, 994, 1043], "plot_forest_importances_fac": [150, 1015], "fourth": [151, 1019], "descend": [151, 632, 1045], "decisiontre": [151, 558, 1040], "consol": [151, 385, 1020], "extratre": [151, 161, 374, 1038], "9266666666666666": 151, "9933333333333333": 151, "9866666666666667": 151, "rdylbu": [151, 366], "plot_step_coars": 151, "plot_idx": 151, "model_titl": 151, "model_detail": 151, "blend": [151, 163, 326, 401, 418, 1013], "estimator_alpha": 151, "coarser": [151, 155], "regularli": [151, 297, 399, 996], "xx_coarser": 151, "yy_coars": 151, "z_points_coars": 151, "cs_point": 151, "244": [151, 297, 589, 1015], "plot_forest_iri": [151, 1015], "equidist": [152, 697], "iowa": [152, 163, 260], "sale": [152, 260, 280, 994, 1018], "42165": 152, "categorical_columns_subset": 152, "bldgtype": 152, "garagefinish": 152, "lotconfig": 152, "masvnrtyp": [152, 163], "housestyl": [152, 163], "fireplacequ": 152, "extercond": 152, "exterqu": [152, 163], "poolqc": 152, "numerical_columns_subset": 152, "3ssnporch": 152, "fireplac": 152, "bsmthalfbath": 152, "halfbath": 152, "garagecar": [152, 163], "totrmsabvgrd": 152, "bsmtfinsf1": [152, 163], "bsmtfinsf2": 152, "grlivarea": 152, "screenporch": 152, "n_categorical_featur": [152, 566, 567, 637, 638], "n_numerical_featur": 152, "1460": [152, 163], "dropper": 152, "hist_drop": 152, "hist_one_hot": 152, "ordinal_encod": [152, 260], "use_encoded_valu": [152, 163, 197, 260, 326, 880, 1004, 1047], "unknown_valu": [152, 163, 197, 260, 326, 880, 1004, 1047, 1049, 1050], "verbose_feature_names_out": [152, 195, 196, 197, 264, 326, 332, 333, 334, 336, 415, 469, 472, 865, 1048, 1052, 1053], "hist_ordin": 152, "hist_n": 152, "n_cv_fold": [152, 326, 809, 825, 830, 833], "dropped_result": 152, "one_hot_result": 152, "ordinal_result": 152, "native_result": 152, "figure_titl": 152, "plot_info": 152, "test_scor": [152, 154, 156, 158, 231, 279, 282, 297, 326, 357, 365, 400, 418, 809, 825, 829, 830, 833], "y_limit": 152, "mape_cv_mean": 152, "mape_cv_std": 152, "c0": [152, 253, 326], "slowest": [152, 942, 943], "poorer": [152, 370, 419], "slight": [152, 228, 331, 421, 454, 1045], "acf": 152, "bde": 152, "bcde": 152, "histgradientboostingregressor__max_depth": 152, "histgradientboostingregressor__max_it": 152, "altogeth": [152, 393, 1043], "137": [152, 260, 393, 1015, 1036], "plot_gradient_boosting_categor": [152, 1015], "asid": [153, 231, 409, 564, 565, 566, 567, 671, 672, 673, 681, 683, 863, 864], "validation_fract": [153, 158, 231, 332, 421, 564, 565, 566, 567, 671, 672, 673, 681, 683, 863, 864, 1008, 1043, 1049], "monitor": [153, 207, 231, 390, 401, 558, 559, 564, 565, 566, 567, 998, 1017, 1038, 1043, 1045, 1047], "worsen": 153, "n_estimators_": [153, 564, 565], "valuabl": [153, 387, 984, 1018], "strike": [153, 196, 227], "x_val": [153, 1002], "y_val": [153, 1002], "gbm_full": 153, "gbm_early_stop": 153, "training_time_ful": 153, "n_estimators_ful": 153, "training_time_early_stop": 153, "estimators_early_stop": 153, "train_errors_without": 153, "val_errors_without": 153, "train_errors_with": 153, "val_errors_with": 153, "train_pr": 153, "val_pr": 153, "set_yscal": [153, 223, 809], "training_tim": [153, 361], "174": [153, 154, 318, 393, 589, 1015], "plot_gradient_boosting_early_stop": [153, 1015], "fly": [154, 392, 395, 513, 514, 587, 1035, 1037, 1044], "pessimist": [154, 421], "demand": [154, 158, 401, 422, 803, 817, 827, 828], "6860": 154, "special": [154, 195, 213, 241, 297, 310, 326, 349, 381, 383, 389, 393, 399, 401, 414, 417, 419, 469, 472, 558, 560, 564, 827, 918, 983, 988, 990, 992, 993, 994, 995, 997, 1010, 1042, 1045, 1047, 1049], "expit": [154, 213, 421, 566, 990, 1042], "ridgewai": [154, 421], "gbm": [154, 421, 1038], "x3": [154, 415, 1027], "binomi": [154, 157, 421, 558, 564, 566, 990, 1049, 1052], "acc": 154, "heldout_scor": 154, "y_proba": [154, 157, 325, 401, 714, 866, 1053], "staged_predict_proba": [154, 157, 558, 564, 566, 1035], "cv_estim": 154, "cv_clf": 154, "val_scor": 154, "cv_score": 154, "cumsum": [154, 223, 241, 1042], "oob_improvement_": [154, 421, 564, 565, 1037], "oob_best_it": 154, "test_best_it": 154, "cv_best_it": 154, "brew": [154, 385, 405], "oob_color": 154, "test_color": 154, "127": [154, 329, 1015, 1035], "201": [154, 177, 290, 326, 384, 589, 1015], "cv_color": 154, "253": [154, 368, 539, 1015], "192": [154, 316, 393, 1015, 1035], "oob_lin": 154, "test_lin": 154, "cv_line": 154, "dashdot": [154, 179, 182, 260], "xticks_po": 154, "xticks_label": 154, "735": [154, 331, 1015], "plot_gradient_boosting_oob": [154, 1015], "atleast_2d": [155, 389], "expected_i": 155, "amplitud": [155, 184, 186, 217, 990], "lognorm": [155, 185, 204, 270, 324, 1004], "imposs": [155, 363, 1014], "all_model": 155, "min_samples_split": [155, 156, 157, 284, 292, 321, 331, 421, 562, 563, 564, 565, 569, 570, 571, 806, 807, 914, 915, 916, 917, 983, 1010, 1041], "gbr": 155, "gbr_l": 155, "y_med": 155, "unfortun": [155, 194, 195, 241, 395, 399, 421, 513, 514], "sinoisoid": 155, "highlight_min": [155, 212], "pbl": 155, "715413": 155, "750348": 155, "127128": 155, "253445": 155, "379763": 155, "933253": 155, "305438": 155, "622811": 155, "940184": 155, "827917": 155, "909909": 155, "145957": 155, "382005": 155, "667219": 155, "asymmetr": [155, 225, 401, 1040], "nor": [155, 283, 361, 370, 374, 392, 399, 413, 422, 442, 451, 599, 930, 998, 1010, 1046], "917281": 155, "767498": 155, "617715": 155, "692901": 155, "144204": 155, "245961": 155, "347717": 155, "648026": 155, "412021": 155, "607752": 155, "803483": 155, "874771": 155, "354394": 155, "355445": 155, "356497": 155, "852774": 155, "coverage_fract": 155, "y_low": 155, "y_high": 155, "868": [155, 173], "hypothesi": [155, 280, 286, 418, 695, 699, 831, 991], "neg_mean_pinball_loss_05p_scor": 155, "greater_is_bett": [155, 746, 994], "search_05p": 155, "max_resourc": [155, 806, 807, 983], "min_resourc": [155, 806, 807], "neg_mean_pinball_loss_95p_scor": 155, "search_95p": 155, "estimator__alpha": 155, "did": [155, 179, 195, 198, 223, 231, 241, 267, 327, 382, 632, 717, 822, 908, 1027, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "untun": 155, "joint": [155, 192, 196, 201, 207, 209, 210, 212, 222, 243, 415, 616, 657, 667, 697, 841, 842, 843, 844, 845, 906, 990, 991, 995, 999, 1001, 1005, 1015, 1035], "9026666666666666": 155, "796": 155, "sadli": 155, "902": [155, 1015], "plot_gradient_boosting_quantil": [155, 1015], "basic": [155, 178, 179, 184, 185, 187, 188, 191, 192, 221, 327, 354, 374, 376, 387, 389, 391, 399, 401, 414, 418, 419, 421, 616, 627, 902, 914, 915, 916, 917, 983, 984, 997, 1008, 1012, 1013, 1014, 1015, 1018, 1026], "introductori": [155, 178, 179, 184, 185, 187, 188, 192, 249, 424, 616, 627, 1015, 1018], "tackl": [156, 280, 375, 387, 414, 843, 996, 1018, 1022], "katrina": [156, 1046], "ni": [156, 1041, 1046], "nilichen": 156, "reg": [156, 195, 203, 257, 321, 330, 354, 421, 563, 565, 573, 655, 656, 658, 659, 660, 661, 662, 668, 669, 670, 675, 676, 683, 684, 694, 698, 917, 990, 1040], "3044": 156, "4733": 156, "train_score_": [156, 421, 564, 565, 566, 567], "impur": [156, 198, 369, 404, 421, 423, 558, 559, 562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917, 918, 920, 1010, 1030, 1040, 1041, 1042, 1043], "feature_import": 156, "sorted_idx": [156, 329], "po": [156, 246, 422], "vert": [156, 197, 198, 329, 1008], "377": [156, 362, 1015], "plot_gradient_boosting_regress": [156, 1015], "consider": [157, 158, 180, 183, 260, 275, 281, 287, 387, 424, 624, 803, 817, 983, 990, 996, 1000, 1008, 1018, 1052], "return_invers": [157, 389], "original_param": 157, "test_devi": 157, "plot_gradient_boosting_regular": [157, 1015], "lightgbm": [158, 421, 566, 567, 1013, 1044, 1051], "xgboost": [158, 160, 421, 1013], "usabl": [158, 381, 387, 389, 401, 409, 422, 803, 962, 1035, 1042, 1049, 1050], "australian": [158, 405], "wale": 158, "suppli": [158, 399, 414, 651, 926, 927, 997, 1018, 1039, 1041, 1043, 1048], "transfer": [158, 406, 411, 990, 1014], "victoria": 158, "elec2": 158, "312": [158, 165, 1015, 1038], "1998": [158, 280, 382, 384, 419, 421, 560, 561, 836, 841, 872, 995, 996, 998, 1004, 1008], "nswprice": 158, "nswdemand": 158, "vicpric": 158, "vicdemand": 158, "schedul": [158, 316, 375, 681, 682, 683, 863, 864, 1008, 1018, 1042], "stepwis": [158, 640, 659, 660, 661, 687, 688, 990], "17_760": 158, "414912": 158, "500526": 158, "pointplot": 158, "lineplot": [158, 280], "hue": [158, 271, 280, 325, 384], "labl": 158, "get_legend_handles_label": [158, 256, 282, 287], "capac": [158, 179, 197], "16531": 158, "11021": 158, "max_iter_list": 158, "prediction_df": 158, "average_pr": 158, "anymor": [158, 197, 223, 282, 329, 330, 349, 370, 391, 415, 675, 1041, 1044, 1047, 1048, 1049, 1051, 1052], "alon": [158, 195, 227, 286, 349, 401, 409, 413, 653, 674, 685, 746, 1042, 1044], "degrad": [158, 196, 250, 320, 357, 362, 420, 782, 1002], "hbgt": 158, "validation_score_": [158, 566, 567], "overwrit": [158, 451, 501, 636, 1019, 1035, 1046, 1051, 1052], "ceil": [158, 260, 562, 563, 564, 565, 568, 569, 570, 571, 599, 676, 806, 807, 914, 915, 916, 917, 1008], "grower": [158, 421, 566, 567], "child": [158, 257, 361, 369, 375, 399, 401, 406, 414, 421, 447, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 914, 915, 916, 917, 951, 952, 954, 962, 1010, 1042], "sent": [158, 414, 835], "accordingli": [158, 196, 260, 353, 387, 391, 392, 1042, 1043, 1050], "mcar": 158, "missing": [158, 421, 632, 633, 635, 1044], "unobserv": [158, 194, 195, 419], "first_week": 158, "336": [158, 256, 393, 1004], "missing_fraction_list": 158, "generate_missing_valu": 158, "missing_fract": 158, "total_cel": 158, "num_missing_cel": 158, "row_indic": 158, "col_indic": 158, "x_miss": [158, 190, 191], "x_train_miss": 158, "x_test_miss": 158, "hgbt_quantil": 158, "tendenc": [158, 248, 990, 991, 993, 996, 999], "domain": [158, 223, 326, 401, 404, 418, 640, 726, 727, 728, 804, 805, 810, 811, 812, 990, 1014], "regulatori": 158, "ethic": 158, "polici": [158, 194, 195, 223, 241, 401, 540, 546, 990, 1050], "monotonic_cst": [158, 160, 330, 332, 336, 421, 562, 563, 566, 567, 569, 570, 914, 915, 916, 917, 1050], "hgbt_no_cst": 158, "hgbt_cst": 158, "line_kw": [158, 160, 261, 282, 330, 336, 637, 809, 825], "unconstrain": [158, 160, 196, 330, 336, 382, 1008], "axes_": [158, 160, 261, 330, 336, 394, 637], "overconstrain": 158, "103": [158, 209, 299, 300, 382, 421, 502, 560, 561, 1035], "030": [158, 362], "034": [158, 362, 476], "said": [158, 195, 250, 281, 382, 387, 796, 992, 1000, 1019, 1026], "422": [158, 598, 599, 730, 760, 994, 1015], "plot_hgbt_regress": [158, 1015], "deform": [159, 271, 359], "notat": [159, 401, 415, 419, 422, 595, 717, 990, 994, 1019, 1044, 1051], "120": [159, 196, 244, 336, 423, 595, 1035], "cluster_1": 159, "cluster_2": 159, "nuniformli": 159, "max_sampl": [159, 190, 421, 560, 561, 562, 563, 568, 569, 570, 639, 1045, 1048, 1051], "isolationforestifittedisolationforest": 159, "ax_": [159, 274, 283, 287, 289, 295, 303, 325, 329, 394, 443, 636, 702, 703, 705, 706, 707, 809, 825], "nof": 159, "451": [159, 355, 651, 1015], "plot_isolation_forest": [159, 1015], "trend": [160, 184, 196, 253, 316, 1018, 1042], "f_0": 160, "f_1": [160, 287, 994], "gbdt_no_cst": [160, 330], "histgradientboostingregressorifittedhistgradientboostingregressor": [160, 334], "gbdt_with_monotonic_cst": 160, "f_idx": 160, "oscil": [160, 196, 228, 414, 445], "x_df": 160, "gbdt_with_monotonic_cst_df": 160, "plot_monotonic_constraint": [160, 1015], "excel": [161, 381, 387, 421, 695, 699, 990, 1018], "hasher": [161, 363, 422], "transformed_grid": 161, "y_grid_pr": 161, "plot_random_forest_embed": [161, 1015], "centr": 162, "regr_multirf": 162, "regr_rf": 162, "y_multirf": 162, "y_rf": 162, "cornflowerblu": [162, 217, 226, 233, 267, 269, 272, 287, 289, 305, 311, 367, 368], "494": [162, 1015], "plot_random_forest_regression_multioutput": [162, 1015], "compil": [163, 300, 363, 374, 375, 387, 388, 389, 390, 395, 396, 399, 1013, 1035], "dean": [163, 1043, 1049, 1051], "cock": [163, 1044], "becam": [163, 402, 1043], "kaggl": [163, 400], "residenti": 163, "won": [163, 317, 362, 391, 414, 473, 501, 632, 633, 635, 692, 709, 722, 740, 741, 759, 761, 799, 993, 1004, 1040, 1041, 1046], "load_ames_h": 163, "yrsold": 163, "heatingqc": 163, "street": [163, 177, 384], "yearremodadd": 163, "heat": [163, 349, 414, 457, 467, 700], "bsmtunfsf": 163, "mssubclass": 163, "condition2": 163, "garagetyp": 163, "overallqu": 163, "totalbsmtsf": 163, "miscfeatur": 163, "mosold": 163, "cat_selector": 163, "num_selector": 163, "besid": [163, 253, 387, 392, 594, 983, 1043], "cat_tree_processor": 163, "encoded_missing_valu": [163, 197, 880, 1004, 1049, 1050], "num_tree_processor": 163, "add_ind": [163, 191, 632, 633, 635, 984, 1044, 1047, 1051], "tree_preprocessor": [163, 223], "0x7f9450fd1700": 163, "0x7f9450fd1190": 163, "columntransformerinot": [163, 196], "fittedcolumntransform": [163, 196], "ordinalencoderordinalencod": [163, 196, 197, 326], "cat_linear_processor": 163, "num_linear_processor": 163, "linear_preprocessor": 163, "tediou": 163, "wrote": [163, 382], "lasso_pipelin": 163, "pipelineinot": [163, 252, 262, 281, 326, 330], "fittedpipelin": [163, 252, 262, 281, 326, 330], "lassocvlassocv": 163, "rf_pipelin": 163, "randomforestregressorrandomforestregressor": [163, 166], "gbdt_pipelin": 163, "histgradientboostingregressorhistgradientboostingregressor": [163, 326], "stacking_regressor": 163, "final_estim": [163, 329, 421, 572, 573], "unknown_v": 163, "stackingregressorinot": 163, "fittedstackingregressor": 163, "ridgecvridgecv": [163, 195], "line_kwarg": [163, 706], "nevalu": 163, "plot_stack_predictor": [163, 1015], "exemplari": [164, 165], "eclf": [164, 165, 421], "axarr": [164, 320], "tt": [164, 275, 470], "plot_voting_decision_region": [164, 1015], "class1_1": 165, "class2_1": 165, "lightgreen": [165, 229, 240], "p3": 165, "p4": 165, "nweight": 165, "plot_voting_proba": [165, 1015], "cohort": 166, "reg1": [166, 421], "reg2": [166, 421], "reg3": [166, 421], "ereg": [166, 421], "gb": [166, 421, 558, 638], "votingregressorifittedvotingregressor": 166, "gradientboostingregressorgradientboostingregressor": 166, "linearregressionlinearregress": 166, "xt": [166, 300, 401, 450, 543, 545, 632, 634, 803, 806, 807, 817, 850, 858, 866, 871, 876, 883, 895, 924, 1051], "pred1": 166, "pred2": 166, "pred3": 166, "pred4": 166, "labelbottom": [166, 280], "plot_voting_regressor": [166, 1015], "n_fold": [168, 652, 656, 658, 660, 664, 666, 668, 1036, 1037, 1041], "scores_std": [168, 1023], "semilogx": [168, 212, 293, 1023], "std_error": 168, "transluc": 168, "999999999999999e": 168, "31622776601683794": 168, "answer": [168, 194, 280, 387, 399, 730, 760, 994, 1018], "extern": [168, 179, 376, 380, 384, 387, 389, 392, 399, 401, 412, 414, 422, 423, 424, 598, 615, 616, 722, 741, 799, 990, 993, 994, 997, 1010, 1014, 1020, 1026, 1030, 1043, 1047], "lasso_cv": 168, "k_fold": [168, 1023], "maximis": [168, 267, 308, 988, 997], "5f": [168, 333], "moreov": [168, 185, 322, 333, 370, 391, 414, 418, 424, 899, 964, 994, 1002, 1018, 1043, 1049, 1050], "substanti": [168, 302, 306, 307, 321, 387, 852, 1000, 1039, 1042], "05968": 168, "54209": 168, "04520": 168, "15521": 168, "07880": 168, "45192": 168, "529": [168, 240, 1015], "plot_cv_diabet": [168, 1015], "961111": 169, "933333": [169, 855], "plot_digits_classification_exercis": [169, 1015], "200j": 170, "plot_iris_exercis": [170, 1015], "x_2": [172, 182, 220, 419, 421, 422, 424, 618, 630, 990, 998, 1004], "x_3": [172, 1004], "irrelev": [172, 207, 370, 393, 416, 421, 423, 609, 744, 994], "percept": [172, 196, 1001], "f_test": 172, "x_": [172, 180, 272, 280, 329, 389, 414, 417, 419, 632, 640, 768, 861, 901, 902, 990, 996, 1001, 1041], "217": [172, 540, 546, 1015], "plot_f_test_vs_mi": [172, 1015], "examin": [173, 393, 395, 414, 855], "log10": [173, 185, 195, 208, 216, 281, 349], "pvalues_": [173, 597, 600, 601, 603, 604, 605, 1035], "x_indic": 173, "p_": [173, 994, 997, 1010], "svm_weight": 173, "789": [173, 421], "clf_select": 173, "svm_weights_select": 173, "get_support": [173, 177, 331, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 1037], "plot_feature_select": [173, 1015], "anova_filt": 174, "anova_svm": 174, "selectkbestselectkbest": [174, 333], "Be": [174, 188, 361, 387, 416, 572, 573, 653, 659, 660, 661, 663, 664, 674, 685, 709, 821, 822, 881, 1004, 1032, 1036], "75788833": 174, "27161955": 174, "26113448": 174, "plot_feature_selection_pipelin": [174, 1015], "n_features_to_select": [175, 177, 331, 423, 598, 607, 1047, 1049], "ranking_": [175, 598, 599], "plot_rfe_digit": [175, 1015], "introduct": [176, 241, 278, 387, 418, 419, 422, 595, 792, 793, 841, 845, 990, 992, 994, 996, 1012, 1020, 1026, 1029, 1030], "class_sep": [176, 310, 520], "min_features_to_select": [176, 599, 1043], "n_features_": [176, 598, 599, 1048, 1050], "n_score": 176, "413": [176, 1015], "plot_rfe_with_cross_valid": [176, 1015], "greedi": [177, 421, 423, 452, 454, 465, 564, 565, 607, 990, 1010], "442": [177, 187, 191, 384, 506, 1026], "descr": [177, 380, 381, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 512, 515, 1025, 1043], "_diabetes_dataset": 177, "mass": [177, 261, 384, 451, 801, 990, 1001], "blood": [177, 251, 384, 1026], "pressur": [177, 384, 1026], "six": [177, 224, 244, 324, 384, 1044], "serum": [177, 384], "bmi": [177, 211, 212, 261, 384, 1002], "tc": [177, 384, 402], "cholesterol": [177, 384], "ldl": [177, 384], "lipoprotein": [177, 384], "hdl": [177, 384], "s4": [177, 211, 212, 384], "tch": [177, 384], "s5": [177, 211, 212, 384, 1002], "ltg": [177, 384, 506], "triglycerid": [177, 384], "s6": [177, 211, 212, 384], "glu": [177, 384], "sugar": [177, 384], "www4": [177, 384], "ncsu": [177, 384], "boo": [177, 384], "bradlei": [177, 384, 990], "efron": [177, 384, 687, 688, 990], "trevor": [177, 211, 334, 384, 633, 661, 726, 727, 728, 984, 990, 1006, 1039, 1040, 1043, 1044, 1045, 1047], "iain": [177, 384, 990], "johnston": [177, 384, 990, 1044], "annal": [177, 207, 211, 384, 421, 479, 521, 522, 523, 564, 565, 661, 990], "407": [177, 384], "499": [177, 384, 393], "web": [177, 381, 382, 384, 387, 390, 395, 414, 422, 526, 899, 994, 1004, 1031, 1035], "stanford": [177, 384, 654, 687, 688, 841, 844, 845, 899, 992], "leastangle_2002": [177, 384], "pdf": [177, 280, 305, 320, 384, 387, 414, 423, 447, 454, 536, 539, 542, 546, 646, 649, 654, 663, 669, 671, 672, 676, 681, 684, 687, 688, 690, 691, 697, 843, 844, 855, 862, 899, 901, 990, 1007, 1010, 1017, 1031, 1035], "pitfal": [177, 192, 193, 194, 197, 219, 227, 228, 331, 400, 401, 404, 418, 470, 472, 501, 658, 677, 678, 706, 757, 818, 829, 832, 867, 879, 886, 990, 1015, 1030], "e501": [177, 361], "accept": [177, 179, 257, 277, 329, 349, 361, 363, 370, 374, 375, 381, 387, 389, 396, 399, 400, 401, 402, 406, 409, 411, 414, 422, 442, 446, 449, 450, 453, 466, 469, 472, 513, 514, 560, 561, 566, 567, 574, 575, 586, 587, 598, 599, 602, 633, 640, 644, 648, 651, 652, 657, 658, 684, 731, 746, 782, 801, 802, 806, 807, 848, 849, 856, 857, 866, 870, 924, 926, 927, 930, 990, 992, 994, 997, 1002, 1004, 1009, 1013, 1014, 1023, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "tic": [177, 196, 260, 291, 996], "sfm": 177, "toc": [177, 260], "sf": [177, 280, 331, 382, 423, 497, 607], "backward": [177, 257, 331, 390, 401, 423, 501, 582, 607, 619, 620, 623, 624, 625, 627, 628, 919, 922, 994, 998, 1014, 1035, 1038, 1043, 1044, 1045, 1047, 1049, 1051], "tic_fwd": 177, "sfs_forward": 177, "toc_fwd": 177, "tic_bwd": 177, "sfs_backward": 177, "toc_bwd": 177, "464": 177, "isn": [177, 329, 361, 363, 370, 375, 387, 395, 520, 566, 567, 599, 798, 806, 807, 879, 997, 1009, 1045], "sound": [177, 370], "finish": [177, 269, 991], "569": [177, 341, 363, 384, 505, 597, 600, 601, 603], "breast_cancer_data": 177, "_breast_cancer_dataset": 177, "diagnost": [177, 198, 283, 380, 401, 505, 717, 828, 829, 994, 1002, 1013, 1014, 1030], "perimet": [177, 384], "textur": [177, 384, 762, 763, 992], "compact": [177, 200, 320, 374, 384, 846, 847, 1010, 1037], "concav": [177, 384], "symmetri": [177, 384, 704, 879, 882, 894, 992], "fractal": [177, 384], "worst": [177, 223, 326, 384, 414, 449, 452, 713, 733, 734, 787, 788, 791, 796, 797, 831, 994, 1018, 1035, 1048], "field": [177, 241, 384, 412, 414, 415, 422, 503, 506, 622, 990, 992, 1001, 1009, 1013, 1017, 1028, 1036], "se": [177, 245, 384, 405], "wdbc": [177, 384], "malign": [177, 384, 505], "benign": [177, 384, 505], "981": [177, 384, 994], "43": [177, 186, 220, 254, 280, 300, 384, 392, 803, 817, 887], "188": [177, 184, 384, 393, 589], "143": [177, 384, 476, 477, 1006, 1035, 1036], "2501": [177, 384], "163": [177, 297, 384, 1002], "019": [177, 384, 393, 476], "345": [177, 384], "427": [177, 384, 511, 512, 588, 589, 592], "304": [177, 281, 324, 384], "873": [177, 384], "757": [177, 278, 300, 384], "031": [177, 179, 333, 384, 1015], "008": [177, 362, 384, 393], "079": [177, 384], "251": [177, 245, 275, 384, 1015], "4254": [177, 384], "071": [177, 384, 442], "027": [177, 252, 384, 1015], "058": [177, 278, 384], "252": [177, 245, 384, 539, 882, 894], "291": [177, 362, 382, 384], "156": [177, 195, 384], "664": [177, 323, 384, 1015], "055": [177, 384, 994], "208": [177, 300, 346, 384, 1015], "357": [177, 384, 505, 907], "creator": [177, 381, 384], "william": [177, 382, 384, 424, 615, 616, 619, 624, 627, 644, 986, 994, 998, 1042, 1043, 1044, 1045, 1050, 1051], "wolberg": [177, 384], "nick": [177, 384, 1035, 1041, 1042, 1043, 1044], "olvi": [177, 384], "mangasarian": [177, 384], "donor": [177, 384], "novemb": [177, 223, 241, 384, 1040, 1041, 1043], "1995": [177, 280, 384, 413, 421, 558, 559, 836, 903, 995], "goo": [177, 384], "gl": [177, 384], "u2uwz2": [177, 384], "needl": [177, 384], "aspir": [177, 384, 387], "fna": [177, 384], "nuclei": [177, 384], "multisurfac": [177, 384], "msm": [177, 384], "bennett": [177, 384, 994], "4th": [177, 187, 384], "midwest": [177, 384], "cognit": [177, 384], "societi": [177, 384, 414, 416, 474, 479, 546, 632, 882, 894, 990, 1008], "1992": [177, 382, 384, 418, 421, 572, 573, 650, 990], "insepar": [177, 384], "uw": [177, 384, 1047], "ftp": [177, 384, 687, 688], "wisc": [177, 384, 901], "prog": [177, 384], "cpo": [177, 384], "dropdown": [177, 387], "nuclear": [177, 384], "tumor": [177, 384], "diagnosi": [177, 283, 384, 853], "spie": [177, 384], "1993": [177, 384, 479, 669, 690, 691, 1010], "symposium": [177, 384, 414, 465], "technologi": [177, 384, 414, 1013, 1018], "1905": [177, 384], "861": [177, 384, 792, 793, 994], "870": [177, 384], "san": [177, 384, 422, 1006], "jose": [177, 384, 663, 994, 1043, 1045], "ca": [177, 384, 414, 447, 914, 915, 1006, 1010], "prognosi": [177, 384], "570": [177, 363, 384, 1026], "577": [177, 384], "juli": [177, 384, 423, 738, 887, 1004, 1038, 1042, 1043, 1044], "august": [177, 384, 414, 516, 539, 1009, 1035, 1037, 1038, 1042, 1049], "diagnos": [177, 283, 384, 395, 404, 415], "letter": [177, 187, 382, 384, 391, 422, 792, 793, 809, 825, 994], "1994": [177, 382, 384, 649], "feature_selector": 177, "ntol": 177, "975": [177, 194, 1009], "733": [177, 300], "590": [177, 194, 1015], "998": [177, 998], "139": [177, 241, 300, 393, 421, 457, 467, 696, 700, 995, 1015], "plot_select_from_model_diabet": [177, 1015], "co2": [178, 185, 186, 192, 424, 501, 616, 620, 627, 628, 630, 1015, 1042], "mona": [178, 185, 186, 192, 424, 501, 616, 620, 627, 628, 630, 1015], "loa": [178, 185, 186, 192, 424, 501, 616, 620, 627, 628, 630, 1015], "xor": [178, 180, 181, 182, 184, 186, 192, 233, 236, 323, 355, 615, 619, 627, 990, 1010, 1015, 1042], "drastic": [179, 254, 288, 414, 418, 997, 1007], "reus": [179, 216, 281, 329, 363, 389, 401, 414, 415, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 639, 651, 653, 654, 657, 663, 665, 667, 671, 672, 673, 674, 681, 682, 683, 685, 863, 864, 1002, 1006, 1018, 1042, 1052], "training_sample_indic": 179, "training_data": 179, "training_noisy_target": 179, "newer": [179, 386, 405, 419], "emb": [179, 244, 254, 309, 380, 381, 467, 700, 991], "length_scal": [179, 180, 183, 184, 185, 186, 188, 424, 617, 620, 623, 624, 626, 627, 628, 629], "tell": [179, 195, 196, 257, 280, 349, 354, 375, 382, 414, 422, 568, 584, 983, 988, 1001, 1028], "1e0": [179, 256, 272, 288, 983], "kernel__length_scal": 179, "kernel__period": 179, "1e1": [179, 185, 223, 256, 349], "kernel_ridge_tun": 179, "9915849773450223": 179, "7986499491396727": 179, "607275806426107": 179, "predictions_kr": 179, "periodicity_bound": [179, 184, 188, 620], "kernel_": [179, 180, 181, 182, 183, 184, 185, 186, 188, 615, 616], "675": 179, "noise_level": [179, 184, 185, 617, 630], "182": [179, 215, 271, 318, 393, 421, 1015], "mean_predictions_gpr": 179, "std_predictions_gpr": 179, "return_std": [179, 184, 185, 186, 188, 202, 203, 401, 557, 572, 573, 616, 618, 619, 620, 621, 630, 632, 649, 650, 866, 1042, 1043, 1047, 1052], "length_scale_bound": [179, 185, 186, 188, 424, 616, 620, 624, 627, 628], "attenu": 179, "plot_compare_gpr_krr": [179, 1015], "arbitrarili": [180, 267, 272, 361, 401, 424, 437, 470, 487, 488, 489, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 685, 726, 727, 728, 750, 789, 793, 839, 840, 849, 857, 864, 887, 907, 909, 912, 915, 917, 994, 997, 1004, 1010], "lml": [180, 181, 185, 424], "exhibit": [180, 228, 353, 361, 404, 418, 419, 421, 424, 1002], "319": [180, 1028], "gp_fix": 180, "gp_opt": 180, "log_marginal_likelihood": [180, 181, 183, 185, 188, 424, 615, 616, 1045], "theta": [180, 181, 183, 185, 187, 188, 258, 419, 424, 528, 541, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 697, 996, 1010], "landscap": 180, "theta0": 180, "theta1": 180, "pcolor": 180, "xscale": [180, 185, 256, 809], "yscale": [180, 185, 223, 256, 361, 809], "016": [180, 362, 1015], "plot_gpc": [180, 1015], "gpc_rbf_isotrop": 181, "gpc_rbf_anisotrop": 181, "m_max": 181, "129": [181, 225, 1015, 1024, 1035], "plot_gpc_iri": [181, 1015], "0256": 182, "sigma_0": [182, 183, 188, 424, 619], "lim": [182, 539], "61611719": 182, "00099547": 182, "10469096": 182, "32782448": 182, "00000000": 182, "50000000": 182, "17289014": 182, "6984743": 182, "3109306": 182, "93271427": 182, "03823144": 182, "10584743": 182, "87600388": 182, "74310541": 182, "21301203": 182, "26386883": 182, "gp": [182, 187, 424, 615, 616, 627, 1041], "cb": [182, 254, 270], "widehat": 182, "mathbf": [182, 353, 419, 990, 994, 998, 999, 1008], "leq": [182, 419, 421, 990, 994, 997, 1008, 1009, 1010], "clim": 182, "666": [182, 341, 342, 414, 848, 984, 1015], "clabel": [182, 234], "334": 182, "plot_gpc_isoprob": [182, 1015], "stationari": [183, 424, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "coincid": [183, 225, 424], "452": [183, 185], "k1__constant_valu": 183, "100000": [183, 256, 266, 387, 618, 619, 620, 624, 625, 627, 628, 630, 895, 987, 1026, 1028], "puor_r": [183, 355], "plot_gpc_xor": [183, 1015], "ascent": [184, 424], "monthli": [184, 402, 994], "atmospher": 184, "ppm": 184, "mauna": 184, "observatori": 184, "hawaii": 184, "1958": [184, 419, 421, 537], "rasmussen": [184, 424, 615, 616, 619, 624, 627], "carl": [184, 424, 615, 616, 619, 624, 627], "edward": [184, 619, 624, 627, 1038, 1043, 1044, 1045, 1046, 1050], "berlin": [184, 414, 419, 540, 701, 730, 760, 994], "heidelberg": [184, 414, 419, 540, 701, 730, 760, 994], "air": [184, 768], "41187": 184, "flag": [184, 260, 336, 385, 387, 388, 390, 406, 411, 469, 615, 616, 632, 678, 680, 732, 789, 1009, 1041, 1045, 1046, 1048, 1049, 1050, 1051], "station": 184, "mlo": 184, "316": [184, 188, 616, 619, 630, 882], "317": [184, 362], "co2_data": 184, "to_datetim": 184, "timestamp": 184, "march": [184, 730, 760, 994, 1035, 1039, 1043, 1045, 1050], "co2_data_resampled_monthli": 184, "me": [184, 361], "nfrom": 184, "upcom": [184, 385], "to_numpi": 184, "rise": 184, "irregular": [184, 353, 414, 997], "long_term_trend_kernel": 184, "decai": [184, 549, 863, 864, 943, 994, 1008, 1039], "seasonal_kernel": 184, "diffus": 184, "accommod": [184, 1043], "irregularities_kernel": 184, "shall": 184, "phenomena": 184, "noise_kernel": 184, "noise_level_bound": [184, 185, 630], "co2_kernel": 184, "subtract": [184, 195, 260, 417, 419, 448, 452, 464, 539, 649, 650, 1042, 1052], "normalize_i": [184, 424, 616, 1049], "y_mean": [184, 185, 188, 616, 649, 650], "gaussianprocessregressorifittedgaussianprocessregressor": 184, "todai": [184, 1028], "current_month": 184, "mean_y_pr": 184, "std_y_pr": 184, "536": [184, 269, 300, 1015], "968": [184, 194, 278], "0367": 184, "6ppm": 184, "plot_gpr_co2": [184, 1015], "target_gener": 185, "add_nois": 185, "minima": [185, 211, 419, 452, 697, 991, 1027, 1043], "y_std": [185, 188, 557, 616, 649, 650, 1048], "k1__k2__length_scal": [185, 424], "noptimum": 185, "nlog": 185, "length_scale_grid": 185, "noise_level_grid": 185, "newshap": 185, "472": [185, 186, 195, 1015], "plot_gpr_noisi": [185, 1015], "tikhonov": [186, 424, 677], "training_indic": 186, "n_restarts_optim": [186, 424, 615, 616], "std_predict": 186, "whenev": [186, 194, 370, 381, 395, 401, 405, 413, 487, 488, 489, 501, 633, 635, 985, 993, 1014, 1045], "noise_std": 186, "y_train_noisi": 186, "plot_gpr_noisy_target": [186, 1015], "gene": [187, 381, 412, 456, 518, 598, 599, 853, 886], "brighter": 187, "6th": 187, "haussler": 187, "1999": [187, 382, 413, 414, 416, 419, 421, 442, 455, 462, 474, 479, 539, 546, 560, 561, 564, 565, 727, 900, 908, 909, 911, 912, 1000, 1006], "646": 187, "technic": [187, 224, 244, 333, 382, 384, 387, 401, 421, 657, 669, 690, 691, 901, 990, 991, 997], "depart": [187, 414], "santa": [187, 1050], "cruz": 187, "generickernelmixin": [187, 1045], "sequencekernel": 187, "baseline_similar": 187, "baseline_similarity_bound": 187, "hyperparameter_baseline_similar": 187, "_f": [187, 990], "_g": 187, "__call__": [187, 349, 401, 422, 424, 471, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 933, 960, 1042], "eval_gradi": [187, 424, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "is_stationari": [187, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "clone_with_theta": [187, 424, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "agct": 187, "agc": 187, "aact": 187, "taa": 187, "aaa": 187, "gaaca": 187, "training_idx": 187, "cga": 187, "taac": 187, "tcg": 187, "cttt": 187, "tgct": 187, "atag": 187, "ctc": 187, "216": [187, 1007, 1015], "plot_gpr_on_structured_data": [187, 1015], "plot_gpr_sampl": 188, "gpr_model": 188, "y_sampl": [188, 616], "sample_i": [188, 424, 616, 1049], "single_prior": 188, "pm": [188, 196, 290, 421, 994], "dev": [188, 195, 241, 285, 290, 385, 387, 391, 393, 395, 994, 1018, 1031, 1042, 1047, 1050, 1051], "279": [188, 990], "067": 188, "alpha_bound": [188, 628], "1e15": 188, "05e": 188, "799": [188, 362], "791": 188, "sigma_0_bound": [188, 619], "_gpr": 188, "663": [188, 900, 1002, 1006], "lbfg": [188, 315, 389, 653, 654, 663, 664, 674, 677, 679, 685, 692, 837, 840, 863, 864, 990, 998, 1039, 1040, 1042, 1043, 1048, 1049, 1050, 1052], "abnormal_termination_in_lnsrch": 188, "479": 188, "7337046907": 188, "481": 188, "609": [188, 393], "484": 188, "plot_gpr_prior_posterior": [188, 1015], "robin": [190, 191, 632, 984, 1041, 1044, 1049, 1050], "mimic": [190, 223, 361, 821], "missforest": [190, 984], "x_full": [190, 191, 320], "y_full": [190, 191, 320], "2k": 190, "br_estim": 190, "score_full_data": 190, "neg_mean_squared_error": [190, 191, 225, 256, 294, 336, 829, 994, 1002, 1041], "y_miss": [190, 191], "missing_sampl": [190, 191], "missing_featur": [190, 191], "score_simple_imput": 190, "missing_valu": [190, 191, 262, 401, 632, 633, 634, 635, 773, 984, 1043, 1044], "score_iterative_imput": 190, "stricter": 190, "impute_estim": 190, "__class__": [190, 223, 225, 257, 260, 282, 322, 361, 362, 363, 394], "xerr": [190, 191, 362], "plot_iterative_imputer_variants_comparison": [190, 1015], "ness": [191, 241], "auxiliari": [191, 385, 1018, 1050], "district": [191, 382], "neither": [191, 195, 329, 361, 370, 399, 413, 442, 599, 633, 930, 997, 1010], "x_diabet": [191, 1023], "y_diabet": [191, 1023], "x_california": 191, "y_california": 191, "add_missing_valu": 191, "missing_r": 191, "n_missing_sampl": 191, "x_miss_california": 191, "y_miss_california": 191, "x_miss_diabet": 191, "y_miss_diabet": 191, "get_scores_for_imput": 191, "impute_scor": 191, "x_label": 191, "mses_california": 191, "stds_california": 191, "mses_diabet": 191, "stds_diabet": 191, "get_full_scor": 191, "full_scor": 191, "get_impute_zero_scor": 191, "fill_valu": [191, 252, 262, 330, 428, 431, 437, 438, 632, 635, 1004, 1043, 1051, 1052], "zero_impute_scor": 191, "unweight": [191, 236, 468, 652, 658, 683, 712, 718, 733, 734, 742, 787, 788, 791, 792, 841, 842, 843, 844, 845, 984], "get_impute_knn_scor": 191, "knn_impute_scor": 191, "get_impute_mean": 191, "mean_impute_scor": 191, "obvious": [191, 374, 1028], "get_impute_it": 191, "n_nearest_featur": [191, 632], "sample_posterior": [191, 632, 984], "iterative_impute_scor": 191, "n_bar": 191, "xval": 191, "invert_yaxi": [191, 363], "149": [191, 995, 1015, 1035], "plot_missing_valu": [191, 1015], "prune": [192, 364, 369, 423, 505, 562, 563, 564, 565, 569, 570, 598, 649, 832, 914, 915, 916, 917, 997, 1015, 1016, 1030, 1035, 1038, 1045, 1046], "insur": [192, 201, 223, 469, 501, 557, 653, 674, 685, 711, 749, 754, 756, 832, 867, 870, 871, 879, 886, 990, 1015], "claim": [192, 201, 387, 469, 501, 557, 653, 674, 685, 711, 749, 754, 756, 832, 867, 870, 871, 879, 886, 990, 1015], "failur": [192, 193, 195, 218, 387, 395, 405, 662, 789, 832, 926, 927, 1015, 1017, 1018, 1048, 1049, 1053], "causal": [192, 193, 218, 662, 789, 832, 1015], "hole": [192, 242, 243, 248, 535, 697, 698, 1015, 1049], "perplex": [192, 242, 243, 245, 247, 300, 519, 530, 541, 697, 991, 1015, 1040, 1042, 1049], "set_output": [192, 196, 249, 262, 325, 326, 390, 438, 447, 448, 450, 452, 454, 469, 473, 487, 488, 489, 490, 501, 509, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 663, 693, 694, 697, 832, 850, 855, 858, 862, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 904, 1015, 1050, 1051, 1052], "novelti": [192, 237, 250, 260, 301, 307, 348, 852, 1015, 1016, 1029, 1030, 1035, 1043], "mlp": [192, 196, 261, 314, 316, 501, 832, 863, 864, 998, 1015], "tie": [192, 215, 344, 399, 421, 517, 834, 911, 995, 1009, 1010, 1015, 1036, 1051], "auto_examples_python": 192, "auto_examples_jupyt": 192, "unless": [194, 257, 267, 272, 387, 389, 390, 399, 401, 413, 414, 417, 425, 442, 449, 451, 453, 455, 457, 462, 463, 466, 469, 472, 477, 494, 501, 513, 514, 536, 540, 541, 542, 544, 547, 548, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 616, 637, 639, 644, 651, 652, 656, 657, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 714, 719, 778, 782, 785, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 848, 849, 852, 854, 856, 857, 859, 860, 863, 864, 865, 868, 887, 891, 892, 894, 895, 896, 897, 901, 902, 914, 915, 916, 917, 922, 926, 927, 943, 962, 990, 993, 995, 1035, 1037, 1041, 1043, 1046, 1047, 1052], "willing": [194, 277], "econom": [194, 195, 280], "educ": [194, 195, 336, 387, 501, 721, 995], "earn": [194, 195, 402], "maker": [194, 195], "ovb": [194, 195], "parent_hourly_wag": 194, "college_degre": 194, "true_coef": [194, 207, 218, 651, 652, 657, 665, 666, 667, 686, 687, 688], "hourly_wag": 194, "stori": [194, 280, 297, 382, 993, 1053], "pairplot": [194, 195], "diag_kind": [194, 195], "kde": [194, 195, 297, 304, 305, 313, 420, 851], "features_nam": [194, 1042], "regressor_with_": 194, "y_pred_with_": 194, "r2_with_abl": 194, "model_coef": 194, "intellectu": 194, "proxi": [194, 195, 419, 862, 1023, 1040], "inadvert": [194, 401], "iq": 194, "regressor_without_": 194, "y_pred_without_": 194, "r2_without_": 194, "brought": [194, 558, 559, 562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "confound": [194, 195], "conduct": [194, 280, 424, 1017, 1049], "prohibit": [194, 260, 418, 421, 632, 999, 1007, 1042], "uneth": 194, "iv": [194, 994], "plot_causal_interpret": [194, 1015], "hint": [195, 374, 388, 392, 406, 409, 453, 994, 1026], "survei": [195, 417], "1985": [195, 414, 710, 720, 790], "534": [195, 363], "race": [195, 336, 382, 501, 1038], "occup": [195, 320, 336, 501], "sector": 195, "marr": 195, "not_memb": 195, "marri": 195, "freq": [195, 207, 363], "378": [195, 421, 1028, 1035], "438": [195, 1002], "440": 195, "411": [195, 416, 426, 478, 538], "018727": 195, "822097": 195, "833333": 195, "615373": 195, "379710": 195, "726573": 195, "thereaft": [195, 202], "hispan": 195, "manufactur": [195, 421], "unmarri": 195, "dollar": [195, 382], "exploratori": [195, 1018], "emul": [195, 395], "train_dataset": [195, 381], "rangeindex": [195, 501], "533": 195, "normalis": [195, 616, 792, 1028], "numerical_column": [195, 197, 472], "if_binari": [195, 264, 879, 1004, 1046], "prepend": [195, 1035], "exp10": 195, "ufunc": [195, 1052], "transformedtargetregressortransformedtargetregressor": 195, "ridgeridg": 195, "mae_train": 195, "mae_test": 195, "learnt": [195, 327, 370, 401, 418, 887, 983, 1004], "obviou": [195, 353, 370, 374, 412, 419], "regressor_": [195, 470, 598, 599, 602], "race_hispan": 195, "013519": 195, "race_oth": 195, "009075": 195, "race_whit": 195, "022594": 195, "occupation_cler": 195, "000045": 195, "occupation_manag": 195, "090528": 195, "occupation_oth": 195, "025102": 195, "occupation_profession": 195, "071964": 195, "occupation_sal": 195, "046636": 195, "occupation_servic": 195, "091053": 195, "sector_construct": 195, "000198": 195, "sector_manufactur": 195, "031255": 195, "sector_oth": 195, "031025": 195, "marr_unmarri": 195, "032405": 195, "union_not_memb": 195, "117154": 195, "sex_mal": 195, "090808": 195, "south_y": 195, "033823": 195, "054699": 195, "035005": 195, "030867": 195, "adimension": 195, "Their": [195, 382, 384, 402, 414, 649, 1035], "gaug": 195, "decad": [195, 1014], "x_train_preprocess": 195, "multipli": [195, 227, 241, 280, 374, 396, 401, 419, 421, 422, 427, 469, 480, 520, 543, 545, 546, 552, 562, 566, 569, 651, 653, 657, 659, 663, 664, 665, 667, 673, 674, 675, 677, 681, 682, 683, 685, 691, 692, 694, 698, 768, 908, 911, 914, 916, 932, 970, 971, 972, 983, 986, 990, 994, 1008, 1046], "coef_i": 195, "std_i": 195, "emphas": [195, 359, 393, 419, 994], "perturb": [195, 240, 318, 419, 421, 993], "caution": [195, 391, 445, 459, 1043], "cv_model": 195, "stripplot": 195, "whi": [195, 197], "collinear": [195, 198, 228, 241, 421, 572, 653, 674, 685, 879, 990, 1035], "teas": 195, "apart": [195, 332, 349, 399, 401, 406, 415, 417, 423, 729, 1009, 1018, 1043], "vice": [195, 277, 361, 414, 424, 447, 612, 613, 835, 1039], "versa": [195, 277, 361, 414, 424, 447, 612, 613, 835, 1039], "column_to_drop": 195, "unchang": [195, 241, 287, 421, 438, 442, 447, 448, 449, 450, 451, 452, 454, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 697, 767, 804, 805, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 853, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 997, 1019, 1043, 1049, 1051], "neglig": [195, 997, 1038, 1052], "littl": [195, 196, 197, 198, 250, 382, 422, 467, 649, 803, 817, 943, 984, 991, 993, 1009, 1010, 1026, 1036, 1047, 1052], "suppress": [195, 374, 395, 697, 997, 1042], "bring": [195, 320, 419, 681, 683, 991, 1013, 1018], "entic": 195, "pursu": 195, "tempt": 195, "deflat": [195, 417, 426, 538], "presum": [195, 299, 414, 422, 841], "respond": [195, 387, 414], "plot_linear_model_coefficient_interpret": [195, 1015], "molnar": [196, 1001], "christoph": [196, 419, 424, 537, 615, 616, 619, 624, 627, 801, 990, 995, 1036, 1040, 1043, 1046, 1047, 1048, 1049, 1050], "goldstein": [196, 1001], "kapeln": [196, 1001], "bleich": [196, 1001], "pitkin": [196, 1001], "peek": [196, 387, 1001], "settingwithcopywarn": 196, "2284": 196, "904": [196, 209, 278, 342, 415], "287": [196, 1006], "1747": 196, "1729": 196, "mask_train": [196, 241], "8640": 196, "115": [196, 1002], "nomin": [196, 381, 401, 402, 421, 422, 586, 587, 721, 1004, 1014], "numerical_featur": [196, 326], "xtick_start": 196, "xtick_period": 196, "average_bike_rent": 196, "numeric_onli": 196, "mlp_preprocessor": 196, "quantiletransformerquantiletransform": 196, "catindex": 196, "hgbdt_preprocessor": 196, "sparse_threshold": [196, 469, 472, 1043], "mlp_model": 196, "hidden_layer_s": [196, 261, 315, 317, 863, 864, 998], "learning_rate_init": [196, 316, 317, 863, 864], "627": 196, "forget": [196, 370, 375, 381, 391, 399, 419, 991], "poor": [196, 200, 286, 295, 341, 413, 418, 419, 695, 699, 742, 843, 846, 847, 988, 989, 991, 996, 1014, 1019, 1042, 1043, 1044, 1046, 1048], "grid_resolut": [196, 331, 347, 636, 637, 638], "features_info": 196, "907": 196, "hgbdt_model": 196, "cheaper": [196, 414, 424, 678, 986, 990], "199": [196, 652, 795, 1009], "temperatur": [196, 422, 1001], "wind": [196, 995], "meaningless": [196, 422, 908, 911, 1038], "465": 196, "celsiu": [196, 1001], "interaction_cst": [196, 334, 421, 566, 567, 1050], "hgbdt_model_without_interact": 196, "histgradientboostingregressor__interaction_cst": 196, "38": [196, 214, 222, 227, 274, 289, 305, 335, 421, 637, 887, 942, 994, 1004, 1035, 1036, 1037], "heatmap": [196, 198, 202, 207, 291, 334, 349, 637, 1001], "882": [196, 280], "slope": [196, 221, 225, 240, 414, 496, 727, 752, 992, 994], "dry": 196, "wetter": 196, "091": [196, 345, 1015], "spike": 196, "somehow": 196, "forbidden": [196, 421], "noisili": 196, "grid_valu": [196, 638, 1051], "add_ax": [196, 247, 291], "surf": 196, "plot_surfac": [196, 220], "rstride": 196, "cstride": 196, "bupu": 196, "nthe": [196, 278, 369], "pretti": [196, 247, 278, 361, 374, 387, 399, 863, 864, 998, 1044], "view_init": [196, 243, 245, 247], "clb": 196, "ndepend": 196, "plot_partial_depend": [196, 329, 330, 331, 1015, 1040, 1044, 1045, 1046, 1047, 1048, 1049], "breiman": [197, 418, 421, 521, 522, 523, 560, 561, 569, 570, 639, 914, 915, 1002, 1010], "random_num": [197, 1002], "random_cat": [197, 1002], "sibsp": [197, 334], "parch": [197, 334], "categorical_encod": 197, "numerical_pip": 197, "memor": 197, "814": [197, 1026], "mdi_import": [197, 198], "sorted_importances_idx": 197, "retri": [197, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 1043, 1049, 1053], "classifier__min_samples_leaf": 197, "810": [197, 831], "832": [197, 421, 560, 561], "train_result": 197, "test_result": 197, "train_import": 197, "test_import": 197, "558": [197, 1015], "plot_permutation_import": [197, 198, 1015], "contradict": [198, 1014], "spearman": [198, 640, 641, 985], "perm_sorted_idx": 198, "tree_importance_sorted_idx": 198, "tree_indic": 198, "dilut": [198, 384], "012": [198, 200], "squareform": 198, "spearmanr": 198, "fill_diagon": [198, 246], "distance_matrix": 198, "dist_linkag": 198, "dendro": 198, "to_list": 198, "leaf_rot": 198, "dendro_idx": 198, "ivl": 198, "cluster_id": [198, 362], "fcluster": 198, "cluster_id_to_feature_id": 198, "selected_featur": 198, "selected_features_nam": 198, "x_train_sel": 198, "x_test_sel": 198, "clf_sel": 198, "687": [198, 1006, 1015], "plot_permutation_importance_multicollinear": [198, 1015], "covtyp": 200, "daniel": [200, 334, 374, 887, 1004, 1018, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1052], "lopez": 200, "sanchez": [200, 1043, 1044], "lope": 200, "usal": 200, "581": 200, "cartograph": 200, "remot": [200, 339, 387, 390], "5_000": 200, "mm": 200, "lsvm": 200, "lsvm_time": 200, "lsvm_score": 200, "condens": [200, 451], "ps_lsvm_time": 200, "ps_lsvm_score": 200, "ksvm": 200, "ksvm_time": 200, "ksvm_score": 200, "pham": [200, 986, 1042], "ninh": 200, "rasmu": [200, 1042], "pagh": [200, 986], "kdd": [200, 382, 413, 442, 1006], "doi": [200, 223, 241, 387, 414, 681], "1145": [200, 414, 681], "2487575": 200, "2487591": 200, "csie": [200, 381, 492, 513, 514, 663], "ntu": [200, 381, 492, 513, 514, 663], "tw": [200, 381, 492, 513, 514, 663, 1009], "cjlin": [200, 381, 492, 513, 514, 663, 1038], "libsvmtool": [200, 381, 492, 513, 514], "087": [200, 1015], "plot_scalable_poly_kernel": [200, 1015], "ol": [202, 213, 218, 220, 221, 229, 240, 332, 661, 990], "true_weight": 202, "olr": 202, "brr": 202, "symlognorm": [202, 207], "linthresh": [202, 207], "10e": [202, 207], "cbar_kw": [202, 207], "seismic_r": [202, 207], "stabilis": 202, "ard_scor": 202, "scores_": [202, 203, 597, 600, 601, 603, 604, 605, 649, 650, 664, 1035, 1045], "brr_score": 202, "cutoff": [202, 948, 1004, 1044], "full_data": 202, "input_featur": [202, 389, 401, 430, 435, 447, 448, 450, 452, 454, 469, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 865, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 1051], "x_plot": [202, 224, 229, 256, 283, 305, 325], "y_plot": [202, 224, 229, 283], "ard_poli": 202, "brr_poli": 202, "y_ard": 202, "y_ard_std": 202, "y_brr": 202, "y_brr_std": 202, "queri": [202, 303, 313, 374, 420, 425, 449, 451, 455, 462, 557, 615, 616, 633, 649, 650, 730, 760, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 994, 997, 1010, 1013, 1017, 1037, 1039, 1040, 1043], "lambda_init": [202, 203, 650, 990, 1045], "intrins": [202, 401, 419, 421, 997, 1002, 1008, 1047], "669": [202, 1015], "plot_ard": [202, 649, 1015], "alpha_init": [203, 650, 990, 1045], "yoshihiro": [203, 1045], "uchida": [203, 1045], "nimbus1after2a1sun7show": 203, "1234": [203, 269, 283, 387], "n_order": 203, "vander": 203, "ymean": 203, "ystd": 203, "pink": 203, "_init": 203, "lambda_": [203, 649, 650, 882, 990, 1042], "269": [203, 516, 1015], "plot_bayesian_ridge_curvefit": [203, 1015], "normalized_weight": 204, "x_offset": 204, "x_center": 204, "x_scale": [204, 876, 892, 1004], "uncent": 204, "incorrectli": [204, 421, 422, 558, 564, 566, 738, 744, 994, 1036, 1041, 1043, 1044, 1046, 1051], "lm": 204, "98809919e": 204, "48938813e": 204, "03237920e": 204, "25349312e": 204, "53959628e": 204, "67451144e": 204, "00768662e": 204, "19112072e": 204, "07963978e": 204, "47987268e": 204, "76195467e": 204, "00393284e": 204, "07582983e": 204, "66670169e": 204, "65799352e": 204, "99891212e": 204, "58195950e": 204, "58667835e": 204, "98350372e": 204, "60836363e": 204, "00911944e": 204, "elasticnetifittedelasticnet": 204, "773": [204, 280, 653, 844, 1015], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [204, 1015], "mks542": 205, "x_outlier": [205, 237, 306, 307, 348], "y_outlier": 205, "epsilon_valu": 205, "intercept_": [205, 213, 215, 232, 258, 347, 354, 358, 389, 401, 487, 488, 489, 554, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 906, 907, 908, 909, 910, 911, 912, 988, 990, 1008, 1009, 1035, 1042, 1047, 1049, 1052], "coef_ridg": 205, "plot_huber_vs_ridg": [205, 1015], "logreg": [206, 840], "046": [206, 1015], "plot_iris_logist": [206, 1015], "underdetermin": 207, "time_step": [207, 864], "anti": [207, 370, 611, 841, 996], "9502547": 207, "8059798": 207, "63394388": 207, "70359377": 207, "62241605": 207, "84077985": 207, "30506066": 207, "63327171": 207, "74495357": 207, "02456369": 207, "random_sampl": [207, 846, 847, 851], "sensor": 207, "superposit": 207, "y_pred_lasso": 207, "r2_score_lasso": 207, "480": [207, 362], "y_pred_ard": 207, "r2_score_ard": 207, "089": 207, "enet": [207, 293], "y_pred_enet": 207, "r2_score_enet": 207, "nlasso": 207, "meinshausen": 207, "yu": [207, 414, 457, 467, 663, 990, 998, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "plot_lasso_and_elasticnet": [207, 1015], "penalis": [208, 221, 238, 701], "alphas_lasso": 208, "coefs_lasso": 208, "alphas_positive_lasso": 208, "coefs_positive_lasso": 208, "alphas_enet": 208, "coefs_enet": 208, "alphas_positive_enet": 208, "coefs_positive_enet": 208, "neg_log_alphas_lasso": 208, "neg_log_alphas_enet": 208, "coef_l": 208, "neg_log_alphas_positive_lasso": 208, "coef_pl": 208, "neg_log_alphas_positive_enet": 208, "coef_p": 208, "295": [208, 1015], "plot_lasso_coordinate_descent_path": [208, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 1015], "sai": [209, 250, 357, 361, 362, 387, 413, 414, 415, 419, 421, 422, 451, 452, 505, 509, 515, 682, 983, 1000, 1007, 1018, 1025, 1026, 1028, 1052], "x_sp": 209, "sparse_lasso": 209, "dense_lasso": 209, "coeff_diff": 209, "2e": [209, 294], "039": [209, 278, 362, 755, 785, 994], "01e": 209, "xs_sp": 209, "tocsc": 209, "nnz": [209, 362, 382, 704], "65e": 209, "284": [209, 654, 1015], "plot_lasso_dense_vs_sparse_data": [209, 1015], "plot_lasso_lar": [210, 1015], "zht2007": 211, "2173": [211, 661, 990], "2192": [211, 661, 990], "038076": [211, 212], "050680": [211, 212], "061696": [211, 212], "021872": [211, 212], "044223": [211, 212], "034821": [211, 212], "043401": [211, 212], "002592": [211, 212], "019907": [211, 212], "017646": [211, 212], "001882": [211, 212], "044642": [211, 212], "051474": [211, 212], "026328": [211, 212], "008449": [211, 212], "019163": [211, 212], "074412": [211, 212], "039493": [211, 212], "068332": [211, 212], "092204": [211, 212], "085299": [211, 212], "044451": [211, 212], "005670": [211, 212], "045599": [211, 212], "034194": [211, 212], "032356": [211, 212], "002861": [211, 212], "025930": [211, 212], "089063": [211, 212], "011595": [211, 212], "036656": [211, 212], "012191": [211, 212], "024991": [211, 212], "036038": [211, 212], "034309": [211, 212], "022688": [211, 212], "009362": [211, 212], "005383": [211, 212], "036385": [211, 212], "003935": [211, 212], "015596": [211, 212], "008142": [211, 212], "031988": [211, 212], "046641": [211, 212], "akaik": [211, 212, 271, 661, 802, 983, 990], "lasso_lars_": [211, 212], "zou_et_al_criterion_resc": 211, "noise_vari": [211, 537, 661, 990, 1049], "aic_criterion": 211, "criterion_": [211, 212, 661], "index_alpha_path_a": 211, "alphas_": [211, 212, 652, 655, 656, 658, 659, 660, 661, 666, 668, 687, 688, 1035, 1038, 1048], "lassolarsic__criterion": [211, 212], "bic_criterion": 211, "index_alpha_path_b": 211, "095": [211, 245, 1015], "plot_lasso_lars_": [211, 1015], "n_random_featur": 212, "x_random": 212, "random_": 212, "02d": 212, "random_02": 212, "random_05": 212, "random_08": 212, "random_11": 212, "647689": 212, "234137": 212, "469474": 212, "465730": 212, "012831": 212, "412304": 212, "067528": 212, "110923": 212, "601707": 212, "057711": 212, "208864": 212, "196861": 212, "478522": 212, "057122": 212, "324084": 212, "611676": 212, "331263": 212, "185659": 212, "812526": 212, "003533": 212, "alpha_a": 212, "alpha_b": 212, "160030": 212, "5244": 212, "764779": 212, "300343": 212, "5208": 212, "250639": 212, "5212": 212, "341949": 212, "542052": 212, "4928": 212, "018900": 212, "4936": 212, "201520": 212, "034077": 212, "4869": 212, "678359": 212, "4881": [212, 1040], "952289": 212, "189631": 212, "4815": 212, "437362": 212, "4831": [212, 660], "802601": 212, "329616": 212, "4810": 212, "423641": 212, "4830": 212, "880191": 212, "306012": 212, "4803": 212, "573491": 212, "4828": 212, "121351": 212, "124225": 212, "4804": 212, "126502": 212, "4832": 212, "765671": 212, "820705": 212, "621645": 212, "4836": 212, "352124": 212, "750389": 212, "4805": 212, "012521": 212, "4841": 212, "834310": 212, "570655": 212, "290075": 212, "4846": 212, "203174": 212, "550213": 212, "4807": 212, "075887": 212, "4852": 212, "080295": 212, "358295": 212, "4806": 212, "878051": 212, "4855": 212, "973770": 212, "259297": 212, "706026": 212, "4860": 212, "893055": 212, "237703": 212, "4809": [212, 283], "440409": 212, "4866": 212, "718747": 212, "850031": 212, "989341": 212, "4867": 212, "358990": 212, "384338": 212, "4801": 212, "702266": 212, "163224": 212, "296575": 212, "4802": 212, "594754": 212, "4872": 212, "147022": 212, "031555": 212, "236720": 212, "4874": 212, "880298": 212, "618263": 212, "4798": 212, "484109": 212, "4876": 212, "218997": 212, "526599": 212, "4799": 212, "543841": 212, "370039": 212, "586798": 212, "4794": 212, "238744": 212, "4880": 212, "156252": 212, "445978": 212, "4795": 212, "589715": 212, "4885": 212, "598533": 212, "259031": 212, "4796": 212, "966981": 212, "4891": 212, "067109": 212, "032179": 212, "662409": 212, "4894": 212, "853846": 212, "019069": 212, "652739": 212, "4888": 212, "752867": 212, "626286": 212, "817724": 212, "set_xscal": [212, 228, 809], "badli": [212, 223, 361, 376, 886, 990, 1004], "3800": 212, "mse_path_": [212, 652, 656, 658, 660, 666, 668], "cv_alphas_": [212, 656, 660, 1047], "kink": 212, "heavili": [212, 374, 375, 387, 395, 654, 660, 782, 1011], "efficaci": 212, "893": [212, 1015], "plot_lasso_model_select": [212, 652, 658, 1015], "plot_logist": [213, 1015], "axes_row": 214, "clf_l1_lr": 214, "clf_l2_lr": 214, "clf_en_lr": 214, "coef_l1_lr": 214, "coef_l2_lr": 214, "coef_en_lr": 214, "sparsity_l1_lr": 214, "sparsity_l2_lr": 214, "sparsity_en_lr": 214, "nl1_ratio": 214, "448": [214, 300, 1015], "plot_logistic_l1_l2_spars": [214, 1015], "plot_logistic_multinomi": [215, 1015], "976": [215, 288], "dupr": [215, 231, 300, 302, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "m4x": [215, 239], "sag": [215, 230, 663, 664, 677, 679, 692, 990, 1008, 1013, 1040, 1041, 1042, 1044, 1045], "bry": [215, 232], "plot_hyperplan": [215, 232, 258], "looser": 216, "liblinear": [216, 347, 393, 663, 664, 792, 906, 907, 908, 911, 912, 990, 994, 1009, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1051], "intercept_sc": [216, 663, 664, 906, 907, 913, 990, 1009], "coefs_": [216, 317, 863, 864, 998, 1040], "plot_logistic_path": [216, 1015], "instant": 217, "wave": [217, 387, 993], "n_task": [217, 990], "n_relevant_featur": 217, "coef_lasso_": 217, "coef_multi_task_lasso_": 217, "spy": 217, "feature_to_plot": 217, "seagreen": 217, "235": [217, 326, 1015], "plot_multi_task_lasso_support": [217, 1015], "reg_nnl": 218, "y_pred_nnl": 218, "r2_score_nnl": 218, "nnl": [218, 662], "8225220806196525": 218, "reg_ol": 218, "y_pred_ol": 218, "r2_score_ol": 218, "7436926291700353": 218, "low_x": 218, "high_x": 218, "low_i": 218, "high_i": 218, "get_ylim": [218, 320, 321], "847222222222214": 218, "069": [218, 235, 278, 350, 1015], "plot_nnl": [218, 1015], "23786125": 219, "2548": 219, "diabetes_x": [219, 1026], "diabetes_i": [219, 1026], "diabetes_x_train": [219, 1026], "diabetes_x_test": [219, 1026], "diabetes_y_train": [219, 1026], "diabetes_y_test": [219, 1026], "regr": [219, 415, 559, 561, 570, 651, 652, 672, 839, 864, 907, 909, 912, 1009, 1026], "diabetes_y_pr": 219, "plot_ol": [219, 1015], "plot_fig": 220, "fig_num": 220, "plot_ols_3d": [220, 1015], "greatli": [221, 255, 334, 387, 395, 457, 997, 1010, 1041, 1049], "288": [221, 540, 546, 1015], "plot_ols_ridge_vari": [221, 1015], "n_nonzero_coef": [222, 531, 536, 542, 547, 550, 551, 553, 655, 669, 690, 691, 1053], "xw": [222, 332, 651, 652, 654, 657, 658, 659, 660, 661, 665, 666, 667, 668, 677, 686, 687, 688, 689, 990], "_0": [222, 690, 990, 994, 1009], "y_noisi": 222, "idx_r": 222, "omp_cv": 222, "215": [222, 589, 1015], "plot_omp": [222, 1015], "contract": [223, 241, 353, 375, 401, 1014], "compani": [223, 241, 414, 1018], "policyhold": [223, 241, 990], "vehicl": [223, 241], "driver": [223, 241, 1050], "exposur": [223, 241, 990], "car": 223, "accid": [223, 241], "noll": [223, 241], "salzmann": [223, 241], "wuthrich": [223, 241], "2139": [223, 241], "ssrn": [223, 241], "3164764": [223, 241], "ch": [223, 225, 241, 341, 343], "rth": [223, 241], "41214": [223, 241], "idpol": [223, 241], "claimnb": [223, 241], "vehpow": [223, 241], "vehag": [223, 241], "drivag": [223, 241], "bonusmalu": [223, 241], "vehbrand": [223, 241], "vehga": [223, 241], "b12": [223, 241], "1217": 223, "r82": 223, "77000": 223, "75000": 223, "diesel": [223, 241], "r22": 223, "09000": 223, "r72": 223, "84000": 223, "678008": 223, "6114326": 223, "00274": 223, "3317": 223, "r93": 223, "678009": 223, "6114327": 223, "9850": 223, "r11": [223, 241], "678010": 223, "6114328": 223, "1323": 223, "678011": 223, "6114329": 223, "r26": 223, "678012": 223, "6114330": 223, "678013": [223, 241], "10070308464041304": 223, "log_scale_transform": [223, 241], "linear_model_preprocessor": 223, "passthrough_numer": [223, 241], "binned_numer": [223, 241], "2e5": [223, 241], "log_scaled_numer": [223, 241], "onehot_categor": [223, 241], "imbalanc": [223, 283, 287, 289, 362, 399, 413, 418, 708, 713, 791, 804, 808, 843, 994, 996, 1002, 1013], "simplist": [223, 422], "pertin": 223, "df_train": [223, 241], "df_test": [223, 241], "regressor__sample_weight": 223, "score_estim": [223, 241], "n_mask": 223, "564": [223, 330, 1015], "commonli": [223, 277, 353, 380, 401, 414, 415, 424, 619, 762, 763, 801, 835, 878, 991, 992, 994, 995, 997, 1051], "ridge_glm": 223, "560": [223, 522, 523], "186": [223, 267, 318, 342, 393, 792, 994, 1015], "595": 223, "223745": 223, "597": 223, "glm": [223, 241, 330, 653, 674, 685, 990, 1035, 1046], "vanilla": [223, 411, 414, 452, 454, 465, 634], "poisson_glm": 223, "newton": [223, 241, 318, 615, 653, 663, 664, 674, 685, 863, 864, 990, 1039, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "deep": [223, 389, 401, 421, 428, 439, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 773, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 998, 999, 1013, 1014, 1018, 1040, 1046, 1047, 1049], "poisson_gbrt": 223, "566": 223, "5e5": 223, "realiz": [223, 1018], "priori": [223, 240, 289, 299, 320, 401, 414, 421, 593, 599, 993, 1051], "wrongli": [223, 349], "_mean_frequency_by_risk_group": 223, "y_true_bin": 223, "y_pred_bin": 223, "idx_sort": 223, "sl": 223, "y_true_seg": 223, "y_pred_seg": 223, "11935": 223, "11933": 223, "11932": 223, "12196": 223, "11931": 223, "portfolio": [223, 241, 988], "riskiest": [223, 241], "safest": [223, 241, 370, 381], "irrespect": [223, 254, 289, 300, 611], "lorenz": [223, 241, 1040, 1052], "summar": [223, 272, 287, 289, 363, 387, 389, 404, 421, 526, 663, 699, 711, 712, 990, 991, 994, 1000], "lorenz_curv": [223, 241], "ranked_frequ": 223, "ranked_exposur": [223, 241], "cumulated_claim": 223, "cumulated_exposur": 223, "cum_exposur": 223, "cum_claim": [223, 241], "0x7f9450bff070": 223, "circumstanti": 223, "extractor": [223, 318, 376, 382, 401, 422, 508, 586, 587, 593, 594, 596, 983, 1035], "discrim": 223, "profil": [223, 374, 387, 390, 526, 529, 990, 1018], "ideal": [223, 225, 241, 277, 280, 287, 289, 290, 370, 386, 387, 391, 392, 395, 399, 401, 413, 730, 760, 983, 993, 1008, 1009, 1014, 1017], "meaningfulli": [223, 994], "267": [223, 1015, 1035], "plot_poisson_regression_non_normal_loss": [223, 1015], "monomi": 224, "vandermond": [224, 1004], "x_0": [224, 662], "pseudo": [224, 318, 389, 418, 426, 445, 457, 459, 467, 474, 475, 476, 478, 479, 480, 481, 538, 566, 567, 568, 632, 639, 644, 646, 647, 651, 652, 657, 658, 665, 666, 667, 668, 682, 696, 700, 806, 807, 815, 817, 855, 862, 898, 899, 903, 906, 907, 908, 911, 942, 943, 990, 1006, 1040, 1049], "basis_1": 224, "basis_2": 224, "malt": [224, 1048, 1049, 1050, 1052], "londschien": [224, 1048, 1052], "prepar": [224, 257, 361, 374, 389, 390, 393, 395, 1010, 1018, 1043, 1051], "set_prop_cycl": 224, "teal": [224, 233, 287], "yellowgreen": [224, 226, 233, 367], "tomato": 224, "unwant": [224, 361], "oscillatori": [224, 1004], "danger": [224, 418], "pft": 224, "splt": 224, "bsplines_": [224, 885], "refrain": [224, 387], "dec": [224, 297, 682, 885, 910, 1009], "31st": [224, 885], "x_plot_ext": 224, "y_plot_ext": 224, "425": [224, 244, 620, 1015], "plot_polynomial_interpol": [224, 881, 885, 1015], "pareto": 225, "dale": [225, 1048], "mail": [225, 325, 382, 387, 391, 395, 399, 402, 1043, 1044], "ru": 225, "glemaitre58": 225, "y_true_mean": 225, "y_normal": 225, "y_pareto": 225, "huge": [225, 228, 374, 393, 632, 1038], "heavi": [225, 399, 412, 1014], "parse_vers": [225, 675], "sp_version": [225, 675], "incompat": [225, 391, 501, 984, 1043, 1044], "older": [225, 257, 386, 391, 1017, 1033, 1038, 1045, 1047], "interior": [225, 675, 990, 1050], "out_bounds_predict": 225, "bool_": 225, "logical_or": [225, 231, 289, 393], "hit": [225, 393], "asymmetri": [225, 361], "linger": 225, "linear_regress": [225, 294], "quantile_regress": 225, "y_pred_lr": 225, "y_pred_qr": 225, "805": 225, "670": 225, "cv_results_lr": 225, "cv_results_qr": 225, "test_neg_mean_squared_error": [225, 829], "732": 225, "690": 225, "679": [225, 906], "548": [225, 1015], "plot_quantile_regress": [225, 1015], "faulti": [226, 1035], "1903908407869": 226, "17236387": 226, "08533159": 226, "inlier_mask": 226, "inlier_mask_": [226, 676], "outlier_mask": 226, "line_x": [226, 240], "line_i": 226, "line_y_ransac": 226, "estimator_": [226, 257, 434, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 598, 599, 602, 676, 978, 1050], "117": [226, 1015, 1036], "plot_ransac": [226, 1015], "mathcal": [227, 357, 419, 421, 632, 701, 986, 988, 990, 994, 1008, 1048], "discourag": [227, 399, 405, 694], "beta_": [227, 419], "excess": [227, 451, 1004, 1042], "encourag": [227, 315, 349, 386, 387, 399, 1009, 1013], "kornel": [227, 1041], "kielczewski": [227, 1041], "plusnet": 227, "32634568": 227, "49665188": 227, "75747153": 227, "08699432": 227, "44381023": 227, "69892343": 227, "28808734": 227, "75949622": 227, "errors_coef": 227, "regularis": [227, 427, 478, 480], "logx": [227, 357], "gradual": [227, 863, 864, 1008], "formerli": [227, 1036, 1039, 1041, 1042], "intric": [227, 517], "rapidli": [227, 282, 1009, 1018, 1022], "influenti": [227, 362, 1018], "pose": [227, 288, 990, 1027], "lose": [227, 240, 363, 382, 401, 417, 422, 424, 942, 943, 984, 990, 1028], "concret": [227, 388, 402, 423, 673, 679, 680, 681, 682, 898, 899, 990, 1008, 1013], "plot_ridge_coeff": [227, 1015], "practis": 228, "10x10": 228, "hilbert": [228, 872, 986, 1004], "n_alpha": [228, 477, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 678, 680, 686, 687, 688, 689, 1038], "plot_ridge_path": [228, 1015], "theilsen": 229, "lessen": [229, 663, 664], "x_error": 229, "y_errors_larg": 229, "x_errors_larg": 229, "deviant": [229, 1000], "legend_titl": 229, "nabsolut": 229, "nto": [229, 289], "808": [229, 1015], "plot_robust_fit": [229, 1015], "asgd": [230, 1008], "rob": [230, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1047, 1050], "zinkov": [230, 1035, 1036, 1037, 1039, 1040], "heldout": 230, "squared_hing": [230, 357, 671, 681, 906, 913, 990, 1009], "0e4": 230, "yy_": 230, "834": [230, 1015], "plot_sgd_comparison": [230, 1015], "_test": [231, 322, 375, 389, 1048], "ignore_warn": [231, 322, 1041], "load_mnist": [231, 300], "class_0": [231, 384, 515], "class_1": [231, 384, 515], "554": [231, 239, 317], "mnist_784": [231, 239, 300, 317], "fit_and_scor": 231, "train_scor": [231, 326, 357, 365, 809, 825, 829, 830, 833, 989], "estimator_dict": 231, "flush": 231, "results_df": [231, 280, 326], "group_df": 231, "837": [231, 1015], "plot_sgd_early_stop": [231, 1015], "ova": [232, 671, 673, 681, 1008], "plot_sgd_iri": [232, 1015], "ugli": [232, 308, 311, 345], "dim": [232, 254, 308, 309, 311, 345, 346, 532, 704, 1052], "modified_huber_loss": 233, "darkorchid": 233, "plot_sgd_loss_funct": [233, 1015], "l1_color": 234, "l2_color": 234, "elastic_net_color": 234, "1001": [234, 264], "rho": [234, 419, 682, 990, 1008, 1036], "elastic_net": 234, "dpi": [234, 920, 1048], "elastic_net_contour": 234, "l2_contour": 234, "l1_contour": 234, "273": [234, 299, 1015], "plot_sgd_penalti": [234, 1015], "ndenumer": 235, "plot_sgd_separating_hyperplan": [235, 1015], "no_weight": 236, "samples_weight": 236, "no_weights_handl": 236, "weights_handl": 236, "plot_sgd_weighted_sampl": [236, 1015], "rc": [237, 391], "novel": [237, 306, 348, 370, 413, 983], "abnorm": [237, 250, 306, 348, 382, 497, 568, 852, 1000, 1043], "y_pred_train": [237, 348], "y_pred_test": [237, 306, 348], "y_pred_outli": [237, 306, 348], "n_error_train": [237, 348], "n_error_test": [237, 306, 348], "n_error_outli": [237, 306, 348], "clf_sgd": 237, "pipe_sgd": 237, "y_pred_train_sgd": 237, "y_pred_test_sgd": 237, "y_pred_outliers_sgd": 237, "n_error_train_sgd": 237, "n_error_test_sgd": 237, "n_error_outliers_sgd": 237, "pubu": [237, 254, 306, 348], "darkr": [237, 306, 348], "palevioletr": [237, 306, 348], "b1": [237, 306, 348], "b2": [237, 306, 348], "blueviolet": [237, 306, 348], "437": [237, 1015], "plot_sgdocsvm_vs_ocsvm": [237, 1015], "newgroups20": 238, "trim": [238, 414, 846, 847], "20newsgroup": [238, 380, 1035], "4500": 238, "130107": [238, 254, 494], "epoch": [238, 401, 541, 671, 672, 673, 681, 682, 683, 863, 864, 1008, 1042, 1043, 1048], "5960": 238, "26593496": 238, "43348936": 238, "26362917": 238, "31973683": 238, "37815029": 238, "2928359": 238, "27054655": 238, "62717609": 238, "19522393": 238, "30897646": 238, "34586917": 238, "28207552": 238, "34125758": 238, "29898468": 238, "34279478": 238, "59489497": 238, "38353048": 238, "35278655": 238, "19829832": 238, "14603365": 238, "6440": 238, "36047253": 238, "1268187": 238, "10606655": 238, "17985197": 238, "5395559": 238, "07993421": 238, "06686804": 238, "21443888": 238, "11528972": 238, "2075215": 238, "10914094": 238, "11144673": 238, "13988486": 238, "09684337": 238, "26286057": 238, "11682692": 238, "55800226": 238, "17370318": 238, "11452112": 238, "arthur": [238, 239, 414, 452, 465, 1040, 1041, 1042, 1043, 1044, 1047, 1049], "mensch": [238, 239, 1040, 1041, 1042, 1043], "timeit": [238, 269, 393], "default_tim": [238, 269], "model_param": 238, "this_max_it": 238, "train_tim": [238, 256, 361, 362], "ndataset": [238, 322], "run_tim": [238, 239], "476": [238, 1015], "plot_sparse_logistic_regression_20newsgroup": [238, 1015], "8253": 239, "l1_plot": 239, "686": [239, 1015], "plot_sparse_logistic_regression_mnist": [239, 1015], "subpopul": [240, 684, 990], "residual_threshold": [240, 676, 990, 1048], "remedi": 240, "max_subpopul": [240, 684, 1049], "florian": [240, 1018, 1035, 1039, 1041, 1045, 1052], "wilhelm": [240, 1039, 1041, 1045], "indigo": 240, "plot_theilsen": [240, 1015], "motor": 241, "parti": [241, 297, 335, 375, 386, 399, 805, 812, 962, 1035, 1046, 1051, 1052], "liabil": 241, "functool": 241, "load_mtpl2": 241, "fremtpl2freq": 241, "df_freq": 241, "fremtpl2sev": 241, "41215": 241, "df_sev": 241, "claimamount": 241, "fillna": [241, 260], "unquot": 241, "column_nam": 241, "plot_obs_pr": 241, "y_label": 241, "fill_legend": 241, "df_": 241, "tweedie_pow": 241, "d\u00b2": 241, "subset_label": 241, "score_label": [241, 286], "est_freq": 241, "est_sev": 241, "unstack": [241, 283], "fremtpl2": 241, "unreason": [241, 418], "exception": 241, "200000": 241, "column_tran": [241, 415], "purepremium": 241, "indirectli": [241, 353], "avgclaimamount": 241, "fmax": 241, "option_context": 241, "max_column": 241, "424": 241, "463": [241, 297], "27000": 241, "303": [241, 640], "404": 241, "333333": 241, "r25": 241, "1981": [241, 990], "14156": 241, "142857": 241, "4792": 241, "1456": 241, "10403": 241, "928571": 241, "10834": 241, "17474": 241, "193548": 241, "225806": 241, "r73": 241, "3986": 241, "12860": [241, 1044], "5417": 241, "seemingli": [241, 370, 399], "169504": 241, "6237": 241, "upon": [241, 248, 313, 382, 387, 399, 401, 409, 566, 567, 632, 635, 676, 793, 801, 802, 846, 847, 983, 990, 1010, 1019, 1028, 1049], "glm_freq": 241, "0448": 241, "0427": [241, 474, 479], "1379": 241, "1378": 241, "2441": 241, "surprisingli": [241, 382, 422], "bonu": [241, 385, 387, 1023, 1028], "malu": 241, "younger": 241, "infti": [241, 424, 624, 990, 1004, 1042], "mask_test": 241, "glm_sev": 241, "900000e": 241, "400000e": 241, "756746e": 241, "744042e": 241, "801770e": 241, "030677e": 241, "dummy_sev": 241, "000000e": 241, "756687e": 241, "744497e": 241, "803882e": 241, "033764e": 241, "avgclaim": 241, "nbclaim": 241, "1951": 241, "1940": 241, "1978": [241, 990], "apriori": 241, "regardless": [241, 281, 282, 283, 375, 387, 414, 540, 637, 638, 663, 709, 720, 994, 1006, 1043, 1050, 1051], "glm_pure_premium": 241, "999": [241, 280, 391, 421, 722, 863, 864], "scores_product_model": 241, "scores_glm_pure_premium": 241, "expand_frame_repr": 241, "640000e": 241, "370000e": 241, "669930e": 241, "617050e": 241, "640770e": 241, "640880e": 241, "7000": 241, "695740e": 241, "683980e": 241, "682880e": 241, "692270e": 241, "8000": [241, 283, 284], "046010e": 241, "040530e": 241, "037600e": 241, "045390e": 241, "9000": 241, "387580e": 241, "385000e": 241, "382120e": 241, "387830e": 241, "9900": 241, "015716e": 241, "015414e": 241, "015347e": 241, "015587e": 241, "9990": 241, "914573e": 241, "914370e": 241, "914538e": 241, "914387e": 241, "904751e": 241, "904556e": 241, "904747e": 241, "904558e": 241, "730119e": 241, "722128e": 241, "739865e": 241, "731249e": 241, "295040e": 241, "212197e": 241, "295505e": 241, "213056e": 241, "917618e": 241, "299546e": 241, "916555e": 241, "313276e": 241, "951751e": 241, "325198e": 241, "riski": 241, "operation": [241, 1018], "simpler": [241, 349, 374, 386, 414, 419, 990, 995, 1026, 1040], "ranked_pure_premium": 241, "cumulated_claim_amount": 241, "cumulated_sampl": 241, "y_pred_product": 241, "y_pred_tot": 241, "ordered_sampl": 241, "plot_tweedie_regression_insurance_claim": [241, 1015], "seek": [243, 245, 247, 386, 387, 399, 402, 513, 514, 991, 1020, 1022], "ticker": [243, 245, 248, 300], "s_point": 243, "s_color": 243, "plot_3d": 243, "points_color": 243, "subplot_kw": [243, 304], "set_major_loc": [243, 305], "multipleloc": [243, 305], "add_2d_scatt": 243, "set_major_formatt": [243, 245, 248, 300, 305], "nullformatt": [243, 245, 248, 300], "lle": [243, 244, 245, 247, 535, 694, 698, 991, 1047], "thought": [243, 305, 401, 414, 451, 991, 995], "analys": [243, 369, 419, 806, 807, 991, 1013, 1018], "lle_standard": 243, "s_standard": 243, "lle_ltsa": 243, "ltsa": [243, 244, 245, 694, 698, 991], "s_ltsa": 243, "lle_hessian": 243, "hessian": [243, 244, 245, 421, 653, 663, 664, 674, 685, 694, 698, 990, 998, 1029, 1030, 1050], "s_hessian": 243, "lle_mod": 243, "s_mod": 243, "lle_method": 243, "tangent": [243, 353, 694, 698, 992, 1029, 1030], "eigenmap": [243, 694, 696, 698, 700, 1029, 1030, 1036], "isometr": [243, 693, 695, 696, 697, 991], "geodes": [243, 693, 991], "s_isomap": 243, "md_scale": 243, "normalized_stress": [243, 695, 699, 991, 1050], "s_scale": 243, "s_spectral": 243, "t_sne": [243, 1043], "s_t_sne": 243, "743": [243, 278, 280, 1015, 1026], "plot_compare_method": [243, 1015], "offsetbox": 244, "plot_embed": 244, "shown_imag": 244, "someth": [244, 257, 297, 361, 387, 389, 390, 391, 395, 422, 994, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "4e": 244, "imagebox": 244, "annotationbbox": 244, "offsetimag": 244, "n_iter_without_progress": [244, 697, 1040, 1041], "nca": [244, 308, 309, 310, 855, 997], "478": [244, 1015], "plot_lle_digit": [244, 1015], "pole": 245, "thin": [245, 625], "earth": [245, 362, 768, 1013], "054": 245, "045": [245, 727], "sphere_data": 245, "trans_data": 245, "2g": [245, 248, 702, 1046], "257": [245, 278], "258": 245, "plot_manifold_spher": [245, 1015], "finfo": [246, 476, 477, 483, 611, 655, 656, 659, 660, 661, 687, 688, 745, 1050], "x_true": 246, "dissimilar": [246, 353, 401, 412, 457, 695, 699, 991, 1041, 1051], "embedding_": [246, 401, 693, 694, 695, 696, 697], "nmd": 246, "npo": 246, "198": [246, 1015, 1035], "plot_md": [246, 1015], "sr_point": 247, "sr_color": 247, "ambient": 247, "text2d": 247, "unrol": 247, "unnecessarili": [247, 1042, 1045], "clump": 247, "sr_lle": 247, "sr_err": 247, "sr_tsne": 247, "stretch": [247, 270], "byproduct": 247, "sh_point": 247, "sh_color": 247, "topologi": [247, 248], "sh_lle": 247, "sh_err": 247, "sh_tsne": 247, "plot_swissrol": [247, 1015], "clearer": [248, 1009], "distil": 248, "pub": [248, 844, 901], "misread": 248, "narin": [248, 1042, 1043], "kokhlikyan": [248, 1042, 1043], "432": [248, 280, 416, 1015], "plot_t_sne_perplex": [248, 1015], "cope": [250, 376, 382, 990], "multimod": 250, "inli": [250, 990, 1000], "unimod": [250, 479], "hypercub": [250, 520], "decent": [250, 279, 382, 996], "handpick": 250, "absenc": [250, 283, 401, 717, 869, 993, 994], "negative_linestyl": 250, "outliers_fract": 250, "n_inlier": 250, "anomaly_algorithm": 250, "blobs_param": 250, "320": [250, 382, 983, 1008, 1015, 1035], "plot_anomaly_comparison": [250, 1015], "transfus": 251, "1464": 251, "donat": 251, "cm_displai": 251, "y_score": [251, 287, 289, 401, 487, 488, 489, 712, 725, 730, 731, 743, 744, 760, 786, 792, 793, 798, 803, 806, 807, 817, 866, 994, 1041, 1049, 1051, 1053], "pos_label": [251, 260, 401, 443, 444, 703, 705, 707, 711, 712, 714, 731, 733, 734, 742, 786, 787, 788, 791, 793, 873, 890, 994, 1043, 1047, 1049, 1053], "roc_displai": 251, "previs": 251, "pr_displai": 251, "easlii": 251, "648": [251, 1015], "plot_display_object_visu": [251, 1015], "summaris": [252, 330], "num_proc": [252, 330], "cat_proc": [252, 330], "feat1": [252, 330, 422], "feat3": [252, 330, 422], "feat0": [252, 330], "feat2": [252, 330, 422], "plot_estimator_represent": [252, 1015], "ir": [253, 419, 595, 730, 760, 841, 845, 992, 994], "out_of_bound": [253, 640], "y_": [253, 267, 271, 272, 312, 389, 417, 419, 642, 653, 674, 685, 733, 734, 742, 768, 787, 788, 791, 990, 994, 1041], "linearregressionifittedlinearregress": 253, "x_thresholds_": [253, 640, 1047], "y_thresholds_": [253, 640, 1047], "151": [253, 334, 393, 421, 506, 1006, 1015], "plot_isotonic_regress": [253, 1015], "achliopta": [254, 899, 900, 1006], "_compon": [254, 541], "geq": [254, 413, 419, 421, 990, 994, 1004, 1008, 1009], "_sampl": [254, 419, 543, 545, 552], "admiss": [254, 375], "eps_rang": 254, "min_n_compon": 254, "nn_sampl": [254, 292], "semilogi": 254, "nn_compon": [254, 255], "100k": [254, 1021], "n_components_rang": 254, "rp": 254, "projected_data": 254, "n_byte": 254, "projected_dist": 254, "min_dist": 254, "max_dist": 254, "hexbin": 254, "gridsiz": 254, "268": 254, "782": 254, "607": 254, "jl": [254, 899], "436": [254, 362], "plot_johnson_lindenstrauss_bound": [254, 1015], "mont": [255, 424, 616, 646, 647, 986, 999], "acceler": [255, 334, 374, 399, 411, 414, 473, 697, 904, 991, 1013, 1018, 1044, 1048, 1050, 1052], "data_train": [255, 281, 361, 514], "targets_train": 255, "data_test": [255, 281, 361, 514], "targets_test": 255, "kernel_svm": 255, "linear_svm": 255, "feature_map_fouri": 255, "feature_map_nystroem": [255, 644], "fourier_approx_svm": 255, "feature_map": [255, 320], "nystroem_approx_svm": 255, "kernel_svm_tim": 255, "kernel_svm_scor": 255, "linear_svm_tim": 255, "linear_svm_scor": 255, "fourier_scor": 255, "nystroem_scor": 255, "fourier_tim": 255, "nystroem_tim": 255, "feature_map__n_compon": 255, "timescal": 255, "ly": [255, 854, 856, 857, 858, 1039], "flat_grid": 255, "lv_ep": 255, "tab10": [255, 271], "764": [255, 726, 994, 1015], "plot_kernel_approxim": [255, 1015], "krr": [256, 648, 987], "insensit": [256, 648, 681, 683, 792, 907, 987, 1008, 1009, 1035], "fifth": [256, 987, 1019], "kr": [256, 280, 1049], "svr_fit": 256, "kr_fit": 256, "sv_ratio": 256, "support_": [256, 356, 474, 479, 598, 599, 607, 908, 909, 910, 911, 912, 1009], "y_svr": 256, "svr_predict": 256, "y_kr": 256, "kr_predict": 256, "09999999999999999": [256, 288, 349], "737": [256, 529], "527": 256, "228": 256, "340": [256, 338], "sv_ind": 256, "arithmet": [256, 393, 395, 414, 556, 653, 674, 685, 709, 722, 740, 741, 761, 799, 994, 1043], "test_tim": [256, 361], "train_test_s": 256, "negate_scor": [256, 809, 825], "score_typ": [256, 282, 295, 335, 809, 825, 1051], "std_display_styl": [256, 282, 809, 825], "866": [256, 1002, 1015], "plot_kernel_ridge_regress": [256, 1015], "my_group": [257, 406], "my_weight": [257, 406], "my_other_weight": [257, 406], "enable_metadata_rout": [257, 336, 406, 442, 448, 449, 452, 454, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 599, 602, 615, 616, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 803, 804, 805, 806, 807, 810, 812, 817, 821, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 865, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 1051], "check_metadata": 257, "obj": [257, 409, 572, 573, 933, 951, 952, 953, 954, 955, 960], "print_rout": 257, "get_metadata_rout": [257, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 950, 951, 952, 953, 954, 994, 1052], "_serial": 257, "exampleclassifi": 257, "smart": [257, 448, 464, 465, 595], "accomplish": [257, 389, 413, 551, 991, 995, 997, 1018, 1052], "magic": [257, 388, 393, 424, 621, 626, 629], "set_fit_request": [257, 336, 406, 442, 448, 449, 452, 454, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 593, 596, 599, 640, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 695, 838, 839, 841, 842, 843, 844, 845, 851, 871, 872, 885, 886, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917], "set_predict_request": [257, 448, 452, 454, 487, 488, 489, 557, 616, 640, 649, 650, 914, 915, 916, 917], "set_score_request": [257, 336, 406, 442, 448, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 848, 849, 853, 856, 857, 863, 864, 866, 901, 902, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 994], "inherit": [257, 387, 389, 400, 401, 428, 582, 681, 935, 937, 990, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052], "metaclassifi": [257, 258], "owner": [257, 382, 384, 950, 951], "method_map": [257, 951], "fit_param": [257, 401, 438, 442, 447, 450, 470, 537, 539, 541, 542, 544, 547, 548, 554, 560, 561, 572, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 635, 640, 643, 644, 645, 646, 647, 670, 676, 809, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 850, 855, 858, 862, 865, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 898, 899, 954, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "request_rout": 257, "validate_metadata": [257, 951], "routed_param": [257, 954], "route_param": [257, 951], "predict_param": [257, 470, 572, 573, 1048], "object_nam": [257, 951, 954], "method_nam": [257, 951, 954], "silent": [257, 422, 586, 862, 1004, 1040, 1041, 1043, 1044, 1048, 1049], "bug": [257, 329, 330, 331, 332, 333, 334, 335, 336, 385, 389, 390, 392, 395, 399, 401, 1014, 1035, 1036, 1037, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "notabl": [257, 320, 381, 401, 501, 732, 879, 991, 993, 997, 1039, 1042, 1049], "metaclassifierifittedmetaclassifi": 257, "exampleclassifierexampleclassifi": 257, "typeerror": [257, 332, 392, 716, 930, 951, 978, 1042, 1043, 1046, 1048, 1052], "got": [257, 287, 370, 392, 556, 654, 670, 1048, 1050, 1052], "sample_weight1": 257, "sample_weight2": 257, "aliased_sample_weight": 257, "alia": [257, 388, 391, 395, 401, 406, 442, 448, 449, 452, 454, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 538, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 599, 615, 616, 622, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 810, 812, 821, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 853, 856, 857, 863, 864, 866, 869, 871, 872, 873, 878, 885, 886, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 968, 1000, 1014, 1035, 1049], "predict_log_proba": [257, 389, 401, 554, 555, 556, 558, 560, 562, 564, 569, 598, 599, 663, 664, 681, 803, 806, 807, 817, 827, 837, 841, 842, 843, 844, 845, 863, 866, 903, 908, 911, 914, 916, 1009, 1035, 1048, 1052], "meta_est": 257, "routerconsumerclassifi": 257, "add_self_request": [257, 951], "self_request": 257, "clf_sample_weight": 257, "meta_clf_sample_weight": 257, "routerconsumerclassifierifittedrouterconsumerclassifi": 257, "simplepipelin": 257, "_required_paramet": [257, 389, 434], "transformer_": [257, 470], "boilerpl": [257, 389, 1018, 1028], "exampletransform": 257, "set_transform_request": [257, 487, 488, 489, 538, 587, 593, 595, 596, 640, 869, 872, 878, 886], "metaregressor": 257, "weightedmetaregressor": 257, "__metadata_request__fit": 257, "compat": [257, 283, 300, 330, 381, 390, 396, 397, 399, 401, 405, 406, 422, 468, 474, 513, 571, 582, 594, 608, 619, 620, 623, 624, 625, 627, 628, 637, 638, 639, 663, 664, 678, 680, 778, 782, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 850, 851, 866, 871, 879, 880, 918, 919, 922, 957, 991, 994, 997, 999, 1013, 1014, 1018, 1030, 1035, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "silenc": 257, "exampleregressor": 257, "commun": [257, 380, 386, 390, 392, 395, 401, 414, 421, 543, 545, 552, 697, 715, 878, 984, 991, 997, 1004, 1008, 1013, 1017, 1018, 1043, 1044], "vendor": [257, 1040, 1043, 1044], "NOT": [257, 306, 384, 390, 813, 846, 847], "signatur": [257, 361, 362, 382, 493, 494, 562, 563, 569, 570, 599, 615, 616, 664, 678, 680, 716, 746, 809, 825, 828, 830, 833, 879, 954, 983, 1042, 1048, 1052], "047": [257, 393, 1015], "plot_metadata_rout": [257, 1015], "theta_c": [258, 528], "reject": [258, 401, 402, 528, 676, 731, 926, 927, 990, 994, 1043], "likewis": [258, 414, 528], "surround": [258, 387, 852, 1000], "min_x": 258, "max_x": 258, "plot_subfigur": 258, "min_i": 258, "max_i": [258, 996], "zero_class": 258, "one_class": 258, "nfor": 258, "194": [258, 318, 1015], "plot_multilabel": [258, 1015], "n_face": 259, "face_id": 259, "n_pixel": [259, 278], "nn": [259, 422, 700, 1026], "y_test_predict": 259, "true_fac": 259, "completed_fac": 259, "718": [259, 1015], "plot_multioutput_face_complet": [259, 1015], "iforest": 260, "pharuj": 260, "rajborirug": 260, "ra": 260, "kmitl": 260, "ac": [260, 535, 669, 690, 691, 990, 1007, 1028], "make_estim": 260, "iforest_kw": 260, "lof_kw": 260, "outlier_detector": [260, 436], "perf_count": 260, "negative_outlier_factor_": [260, 307, 852, 1000], "expected_n_anomali": 260, "expected_anomaly_fract": 260, "kddcup": [260, 380, 497, 1030], "inject": [260, 382, 421], "attack": [260, 382], "percent10": [260, 497], "int32": [260, 300, 327, 387, 401, 448, 452, 454, 456, 458, 464, 908, 909, 910, 911, 912, 959, 1009, 1044, 1050, 1051, 1052], "anomaly_frac": 260, "10065": 260, "338": 260, "protocol_typ": 260, "cat_column": 260, "wilderness_area": 260, "soil_typ": 260, "x_forestcov": 260, "14302": 260, "forestcov": 260, "usd": 260, "sqft": 260, "ames_h": 260, "div": [260, 939], "lot_area": 260, "misc_featur": 260, "add_categori": 260, "noinfo": 260, "mas_vnr_typ": 260, "2714": 260, "categorical_columns_selector": 260, "fetal": 260, "cardiotocogram": 260, "heart": 260, "fhr": 260, "minor": [260, 283, 287, 382, 390, 402, 501, 994, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "x_cardiotocographi": 260, "2126": 260, "datasets_nam": 260, "dataset_nam": [260, 300], "model_idx": 260, "plot_chance_level": [260, 287, 289, 290, 705, 707, 1051], "chance_level_kw": [260, 705, 707, 1051], "privileg": [260, 395], "n_neighbors_list": [260, 302], "localoutlierfactor__n_neighbor": 260, "preprocessor_list": 260, "interquartil": [260, 884, 896], "iqr": [260, 884, 896], "75th": [260, 884], "squash": [260, 391, 424, 536, 542, 547, 553], "428": [260, 1015], "plot_outlier_detection_bench": [260, 1015], "recalcul": [261, 263, 414, 1032, 1035], "mlpregressormlpregressor": 261, "tree_disp": 261, "mlp_disp": 261, "0x7f9450805d60": 261, "836": [261, 1015], "plot_partial_dependence_visualization_api": [261, 1015], "deactiv": [262, 381, 388, 393, 405, 415, 806, 807, 1049], "standard_scal": 262, "polynomialfeaturespolynomialfeatur": 262, "pcapca": 262, "svcsvc": [262, 278, 280, 331], "numeric_preprocessor": 262, "imputation_mean": 262, "categorical_preprocessor": [262, 326], "imputation_const": 262, "onehot": [262, 321, 322, 415, 871, 1004], "gender": [262, 879, 1004], "classifier__n_estim": 262, "classifier__max_featur": 262, "classifier__max_depth": 262, "classifier__criterion": 262, "gridsearchcvinot": 262, "fittedgridsearchcv": 262, "094": [262, 477, 1015], "plot_pipeline_displai": [262, 1015], "svcifittedsvc": 263, "svc_disp": [263, 329, 1032], "rfc_disp": [263, 329, 1032], "plot_roc_curve_visualization_api": [263, 1015], "transform_output": [264, 327, 473, 904, 1050, 1051], "slep018": [264, 389, 1050], "x_test_scal": 264, "894264": 264, "798301": 264, "271411": 264, "327605": 264, "244466": 264, "086944": 264, "327407": 264, "459074": 264, "660797": 264, "462234": 264, "576989": 264, "159419": 264, "933197": 264, "427329": 264, "414810": 264, "039497": 264, "275851": 264, "scaler2": 264, "x_test_np": 264, "x_test_df": 264, "feature_names_in_": [264, 327, 332, 401, 435, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 1048, 1049, 1050, 1051, 1053], "num_pip": 264, "num_col": 264, "7621951219512195": 264, "log_reg": [264, 333], "reset": [264, 370, 395, 539, 681, 682, 683, 846, 847, 875, 876, 886, 1037], "standardscalerifittedstandardscal": 264, "1088": 264, "151101": 264, "479229": 264, "188153": 264, "660": 264, "393297": 264, "263234": 264, "657": [264, 280], "975455": 264, "532843": 264, "546068": 264, "1511007": 264, "47922861": 264, "18815268": 264, "39329747": 264, "26323428": 264, "97545464": 264, "53284267": 264, "54606834": 264, "plot_set_output": [264, 1015], "weight_concentration_prior_typ": [266, 272, 801, 993, 1041], "dirichlet_distribut": [266, 801, 993, 1041], "dirichlet_process": [266, 272, 801, 993, 1041], "weight_concentration_prior": [266, 272, 801, 993], "covar": [266, 267, 272], "eig_val": 266, "eig_vec": 266, "unit_eig_vec": 266, "arctan2": [266, 268, 271], "56b4e9": 266, "plot_titl": 266, "weights_": [266, 801, 802, 1049], "covariances_": [266, 267, 268, 271, 272, 801, 802, 1042], "get_xaxi": [266, 310, 320], "set_tick_param": 266, "labelleft": 266, "0072b2": 266, "f0e442": 266, "d55e00": 266, "mean_precision_prior": [266, 272, 801], "nprior": 266, "gamma_0": [266, 272], "reg_covar": [266, 801, 802], "init_param": [266, 269, 272, 801, 802], "concentrations_prior": 266, "plot_concentration_prior": [266, 1015], "_base": [267, 389], "color_it": [267, 271, 272], "splot": [267, 272], "dp": [267, 272], "shouldn": [267, 272, 387], "em": [267, 268, 272, 448, 452, 464, 541, 801, 802, 993, 1049], "dpgmm": [267, 272, 1035, 1039, 1041], "plot_gmm": [267, 1015], "ronweiss": 268, "make_ellips": 268, "datalim": 268, "skf": [268, 418, 822], "train_index": [268, 341, 418, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "test_index": [268, 341, 418, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "cov_typ": [268, 496], "means_init": [268, 269, 802], "y_train_pr": 268, "train_accuraci": 268, "y_test_pr": 268, "test_accuraci": [268, 281], "plot_gmm_covari": [268, 1015], "random_from_data": [269, 801, 802, 993], "diamond": 269, "colour": [269, 384, 422, 592, 995], "walsh": [269, 1047, 1049], "timer": [269, 393], "_samples_gener": 269, "row_norm": 269, "x_squared_norm": [269, 465], "get_initial_mean": 269, "times_init": 269, "relative_tim": 269, "ini": 269, "init_tim": 269, "2fx": 269, "plot_gmm_init": [269, 1015], "shifted_gaussian": 270, "stretched_gaussian": 270, "score_sampl": [270, 305, 306, 307, 313, 401, 420, 474, 537, 546, 568, 682, 801, 802, 803, 806, 807, 817, 851, 852, 862, 866, 910, 1000, 1038, 1043, 1045, 1047], "116": [270, 1015, 1035], "plot_gmm_pdf": [270, 1015], "component_1": 271, "component_2": 271, "best_parameters_": 271, "gmm_bic_scor": 271, "0x7f943b61a550": 271, "gaussianmixturegaussianmixtur": 271, "param_n_compon": 271, "param_covariance_typ": 271, "829429": 271, "1084": 271, "038689": 271, "1114": 271, "517272": 271, "1148": 271, "512281": 271, "1179": 271, "977890": 271, "catplot": 271, "plot_gmm_select": [271, 1015], "loos": [272, 277, 1009, 1043], "liberti": 272, "judgment": [272, 994], "panel": [272, 305, 320, 420, 1013], "primarili": [272, 285, 387, 401, 411, 414, 952, 1018, 1044, 1045], "covariance_prior": [272, 801], "410": [272, 1015], "plot_gmm_sin": [272, 1015], "mislabel": [274, 421, 996], "imbal": [274, 283, 418, 712, 733, 734, 742, 787, 788, 791, 792, 994], "set_printopt": 274, "titles_opt": 274, "plot_confusion_matrix": [274, 329, 1015, 1045, 1046, 1047, 1048], "1338": 275, "cmap_data": 275, "cmap_cv": 275, "coolwarm": [275, 346], "n_point": [275, 846, 847], "percentiles_class": 275, "perc": 275, "group_prior": 275, "visualize_group": 275, "yticklabel": [275, 361], "ngroup": 275, "nclass": 275, "plot_cv_indic": [275, 1015], "tr": [275, 384, 391, 414, 416, 474, 475, 476, 477, 478, 479, 480, 481, 844], "_split": 275, "843": 275, "this_cv": 275, "2317": 275, "1206": 275, "plot_cv_predict": [276, 1015], "fnr": [277, 703, 731], "ax_roc": 277, "ax_det": 277, "feedback": [277, 386, 387, 388, 402, 1013, 1017, 1043], "aid": [277, 414, 796, 797, 991, 1018, 1035, 1047], "187": [277, 280, 393, 589, 995, 1015, 1026, 1037], "plot_det": [277, 1015], "n_imag": 278, "print_datafram": 278, "filtered_cv_result": 278, "mean_precis": 278, "std_precis": 278, "mean_recal": 278, "std_recal": 278, "mean_test_precis": [278, 284], "std_test_precis": 278, "mean_test_recal": 278, "std_test_recal": 278, "03f": 278, "refit_strategi": 278, "best_index": [278, 284], "precision_threshold": 278, "high_precision_cv_result": 278, "rank_test_recal": 278, "rank_test_precis": [278, 284], "best_recall_std": 278, "best_recal": 278, "best_recall_threshold": 278, "high_recall_cv_result": 278, "fastest_top_recall_high_precision_index": 278, "idxmin": 278, "854": 278, "063": [278, 280, 442], "780": 278, "083": 278, "905": 278, "889": [278, 442], "074": 278, "890": [278, 366, 1015], "073": [278, 476, 477], "695": 278, "065": [278, 393], "066": [278, 653], "611": [278, 280, 546], "028": [278, 362], "744": [278, 300], "618": 278, "005451": 278, "877206": 278, "069196": 278, "0x7f9439b7daf0": 278, "807": [278, 280], "559": [278, 621, 1015], "plot_grid_search_digit": [278, 1015], "minimis": [279, 414, 418, 663, 664, 1010], "219": 279, "260": [279, 1048], "york": [279, 792, 801, 984, 994, 1006], "usa": [279, 382, 903, 984, 991, 1006, 1007], "best_index_": [279, 284, 803, 806, 807, 817], "wenhao": [279, 1043, 1044], "zhang": [279, 414, 447, 669, 684, 690, 691, 694, 698, 762, 763, 990, 991, 992, 996, 1008, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1053], "wenhaoz": 279, "ucla": [279, 990], "lower_bound": 279, "best_score_idx": 279, "best_low_complex": 279, "fewest": [279, 632], "candidate_idx": 279, "param_reduce_dim__n_compon": 279, "plot_grid_search_refit_cal": [279, 1015], "moon": [280, 316, 322, 361, 362, 527], "moder": [280, 387, 424, 459, 1000], "352": [280, 393], "repetit": [280, 297, 392, 418, 818, 819, 1002, 1049], "rank_test_scor": [280, 288, 803, 817, 1041], "rename_axi": 280, "9400": 280, "079297": 280, "9300": 280, "077846": 280, "3_poli": 280, "9044": [280, 1042], "098776": 280, "2_poli": 280, "6852": 280, "169106": 280, "certainti": [280, 389, 746, 994], "repreat": 280, "model_scor": [280, 299], "regex": [280, 363, 469, 471], "_test_scor": [280, 477, 599, 1048], "set1": [280, 309, 310], "labelpad": 280, "882561": 280, "783392": 280, "351390": 280, "746492": 280, "298688": 280, "355440": 280, "nadeau": [280, 1043], "bengio": [280, 863, 864, 983, 1007], "framework": [280, 374, 389, 399, 401, 409, 414, 642, 693, 801, 990, 991, 998, 1014, 1018, 1035, 1041], "diebold": 280, "mariano": 280, "proven": [280, 988, 992, 1018], "replic": [280, 386, 389], "cdot": [280, 353, 412, 414, 419, 420, 424, 619, 620, 624, 627, 628, 872, 986, 988, 994, 998, 1004], "sum_": [280, 289, 357, 412, 413, 414, 419, 420, 421, 543, 545, 552, 701, 759, 988, 990, 991, 994, 996, 998, 999, 1001, 1002, 1004, 1008, 1009, 1010], "ij": [280, 310, 412, 414, 419, 543, 545, 552, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 990, 991, 994, 996, 999, 1004, 1009], "corrected_std": 280, "crossvalid": [280, 294], "corrected_var": 280, "ddof": [280, 886, 897], "compute_corrected_ttest": 280, "t_stat": 280, "p_val": 280, "model_1_scor": 280, "model_2_scor": 280, "ncorrect": 280, "227": [280, 414, 729], "uncorrect": [280, 600, 603], "t_stat_uncorrect": 280, "p_val_uncorrect": 280, "benavoli": 280, "colleagu": 280, "conjug": [280, 457, 467, 677, 679, 692, 700, 990], "overlin": [280, 412], "t_post": 280, "ppf": 280, "minu": [280, 764, 994], "better_prob": 280, "cdf": 280, "essenti": [280, 334, 385, 389, 414, 418, 419, 514, 994, 997, 1014, 1018, 1043], "rope": 280, "rope_interv": 280, "rope_prob": 280, "x_rope": 280, "uncertain": [280, 339, 386], "credibl": 280, "cred_interv": 280, "cred_int_df": 280, "000977": 280, "019023": 280, "005422": 280, "025422": 280, "016445": 280, "036445": 280, "bonferroni": 280, "n_comparison": 280, "pairwise_t_test": 280, "model_i": 280, "model_k": 280, "model_i_scor": 280, "model_k_scor": 280, "pairwise_comp_df": 280, "model_1": 280, "model_2": 280, "302": [280, 632], "565": 280, "276": 280, "851": 280, "pairwise_bayesian": 280, "worse_prob": 280, "pairwise_bayesian_df": 280, "018": [280, 362, 477], "dietterich": [280, 836, 995], "bouckaert": 280, "frank": [280, 837, 995, 1040, 1044, 1045], "pacif": 280, "asia": [280, 1004], "confer": [280, 382, 414, 419, 425, 444, 449, 455, 516, 540, 568, 701, 713, 730, 760, 862, 863, 864, 994, 1000, 1006, 1010], "corani": 280, "dem\u0161ar": 280, "zaffalon": 280, "accompani": [280, 1043], "144": [280, 393, 1035], "plot_grid_search_stat": [280, 1015], "857": [281, 362], "tfidfvectorizertfidfvector": 281, "complementnbcomplementnb": 281, "vect__": 281, "clf__": 281, "parameter_grid": 281, "vect__max_df": 281, "vect__min_df": 281, "vect__ngram_rang": [281, 1028], "unigram": [281, 382, 422, 593, 594, 596, 1042], "bigram": [281, 422, 593, 594, 596, 1028], "vect__norm": 281, "clf__alpha": [281, 1028], "parallelis": [281, 473, 904, 1042], "random_search": [281, 288], "best_paramet": 281, "get_param": [281, 390, 401, 424, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 983, 1045, 1046, 1047, 1049, 1050], "816": [281, 476, 477], "709": 281, "ambigu": [281, 392, 422, 577, 717, 943, 997, 1044, 1046, 1048], "shorten_param": 281, "xanchor": 281, "yanchor": 281, "autom": [281, 391, 405, 697, 983, 990, 991, 994, 1013, 1018], "parallel_coordin": 281, "understood": [281, 387, 414, 951, 1025], "column_result": 281, "transform_func": 281, "fromkei": [281, 921], "ngram_rang": [281, 342, 422, 593, 594, 596], "color_continuous_scal": 281, "viridis_r": 281, "slide": [281, 649, 990, 1012, 1013], "intersect": [281, 346, 412, 414, 742], "undo": [281, 876, 1039], "stronger": [281, 648, 657, 663, 664, 677, 678, 679, 680, 681, 683, 692], "483": [281, 653, 1015], "plot_grid_search_text_feature_extract": [281, 1015], "ax_idx": 282, "resort": [282, 382, 560, 1045], "return_tim": [282, 830, 1045], "test_scores_nb": 282, "fit_times_nb": 282, "score_times_nb": 282, "test_scores_svm": 282, "fit_times_svm": 282, "score_times_svm": 282, "score_tim": [282, 418, 829, 830], "inflect": 282, "176": [282, 393, 839, 995, 1002, 1015], "plot_learning_curv": [282, 1015], "medicin": [283, 717, 994], "medic": [283, 418, 717, 990, 1018], "truli": [283, 287, 376, 717, 994], "odd": [283, 421, 519, 717, 994, 1042, 1043], "suppos": [283, 338, 374, 375, 389, 393, 416, 421, 422, 423, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 746, 852, 906, 908, 911, 914, 916, 932, 998, 1044, 1046, 1052], "physiolog": [283, 384, 1026], "hopefulli": [283, 395, 1035], "indirect": [283, 388, 401], "bio": 283, "pos_lr": 283, "neg_lr": 283, "raise_warn": [283, 717, 980], "positive_likelihood_ratio": [283, 717], "negative_likelihood_ratio": [283, 717], "extract_scor": 283, "test_positive_likelihood_ratio": 283, "test_negative_likelihood_ratio": 283, "661086": 283, "724702": 283, "383973": 283, "054045": 283, "108843": 283, "986989": 283, "268147": 283, "034278": 283, "most_frequ": [283, 556, 632, 635, 856, 984, 994, 1043, 1045, 1047], "373333": 283, "5557": 283, "235430": 283, "stand": [283, 363, 391, 399, 419, 536, 542, 550, 551, 601, 614, 683, 710, 722, 740, 741, 761, 790, 792, 799, 993, 994, 1000], "lr_base": 283, "pos_lr_bas": 283, "pos_lr_base_std": 283, "neg_lr_bas": 283, "neg_lr_base_std": 283, "plot_indic": 283, "scoring_on_bootstrap": 283, "n_bootstrap": [283, 1036], "results_for_preval": 283, "bootstrap_indic": 283, "default_rng": 283, "2039": 283, "507943": 283, "113516": 283, "207667": 283, "009778": 283, "3419": 283, "443238": 283, "125140": 283, "198766": 283, "008915": 283, "421087": 283, "123828": 283, "192913": 283, "006360": 283, "6196": [283, 1040], "409717": 283, "164009": 283, "193949": 283, "005861": 283, "7578": [283, 1042], "334795": 283, "175298": 283, "189267": 283, "005840": 283, "8963": 283, "197666": 283, "238955": 283, "185654": 283, "005027": 283, "plot_likelihood_ratio": [283, 1015], "scorer_nam": [284, 803, 817], "rvraghav93": [284, 320], "403": [284, 362], "402": 284, "maskedarrai": [284, 1041], "param_min_samples_split": 284, "sample_score_mean": 284, "sample_score_std": 284, "std_": [284, 1040], "rank_test_": 284, "best_scor": 284, "mean_test_": 284, "plot_multi_metric_evalu": [284, 1015], "cawlei": [285, 994], "talbot": 285, "mach": [285, 413, 418, 598, 599], "2079": 285, "2107": 285, "007581": 285, "007833": 285, "num_trial": 285, "x_iri": [285, 1027], "y_iri": [285, 1027], "p_grid": 285, "non_nested_scor": 285, "nested_scor": 285, "inner_cv": [285, 336], "outer_cv": [285, 336], "non_nest": 285, "score_differ": 285, "non_nested_scores_lin": 285, "nested_lin": 285, "difference_plot": 285, "177": [285, 393, 1015], "plot_nested_cross_validation_iri": [285, 1015], "plant": [286, 289, 290, 380, 994, 1030], "n_uncorrelated_featur": 286, "x_rand": 286, "undergo": 286, "score_iri": 286, "perm_scores_iri": 286, "pvalue_iri": 286, "n_permut": [286, 418, 831], "score_rand": 286, "perm_scores_rand": 286, "pvalue_rand": 286, "evid": [286, 361, 395, 414, 418, 419, 421, 649, 801, 993], "ndata": 286, "destroi": [286, 422, 799, 875, 1004], "ojala": [286, 418, 831], "garriga": [286, 418, 831], "172": [286, 351, 393, 498, 499, 654, 990, 1015], "plot_permutation_tests_for_classif": [286, 1015], "t_p": 287, "plu": [287, 384, 392, 684, 837, 840, 995, 1008], "f_p": 287, "f_n": 287, "2t_p": 287, "denomin": [287, 422, 427, 480, 595, 709, 761, 988], "stairstep": 287, "sum_n": [287, 712, 994], "r_n": [287, 712, 994], "p_n": [287, 712, 994], "nth": [287, 712, 994], "r_k": 287, "p_k": [287, 994], "mt19937": [287, 292, 929, 1046], "0x7f9439ea9c40": 287, "average_precis": [287, 705, 712, 746, 994], "prevalence_pos_label": [287, 705], "setup": [287, 289, 374, 385, 389, 393, 395, 997, 1020], "f_score": 287, "extens": [287, 289, 305, 374, 375, 381, 382, 385, 388, 390, 391, 395, 396, 399, 409, 414, 419, 501, 508, 539, 745, 937, 945, 991, 993, 994, 1012, 1013, 1018, 1035, 1041, 1048, 1049, 1051, 1052], "plot_precision_recal": [287, 1015], "deem": [288, 289, 539, 1002, 1048], "991": [288, 994], "05063247886572012": 288, "13822072286080167": 288, "987": [288, 362], "010877306503748912": 288, "9226260871125187": 288, "023": [288, 907, 1002], "7271482064048191": 288, "25183501383331797": 288, "993": [288, 362], "1111111111111111": 288, "5555555555555556": 288, "n_top": 288, "param_dist": [288, 292, 331], "n_iter_search": 288, "537": [288, 1015], "plot_randomized_search": [288, 1015], "unambigu": [289, 995, 1041], "notion": [289, 353, 362, 376, 399, 414, 419, 421, 990, 994], "scheme": [289, 305, 326, 327, 382, 401, 414, 418, 420, 422, 571, 595, 663, 664, 710, 816, 873, 874, 877, 879, 883, 887, 890, 895, 906, 911, 983, 990, 1004, 1008, 1035, 1043, 1046, 1047, 1052], "harder": [289, 290, 324, 382, 386, 389, 395, 399, 414, 520, 566, 567], "bulk": [289, 425, 449], "scrutin": 289, "y_onehot_test": 289, "class_id": [289, 290], "nvirginica": 289, "tp_c": 289, "fn_c": 289, "fp_c": 289, "tn_c": 289, "briefli": [289, 386, 400, 421, 983, 1045], "nreceiv": 289, "micro_roc_auc_ovr": 289, "mcclish": [289, 792], "deci": 289, "1989": [289, 640, 792, 863, 864, 990, 997], "jul": 289, "fpr_grid": 289, "mean_tpr": [289, 290], "interp": [289, 290, 349], "macro_roc_auc_ovr": 289, "deeppink": 289, "aqua": 289, "role": [289, 374, 386, 419], "pair_list": 289, "pair_scor": 289, "label_a": 289, "label_b": 289, "a_mask": 289, "b_mask": 289, "ab_mask": 289, "a_tru": 289, "b_true": 289, "idx_a": 289, "idx_b": 289, "fpr_a": 289, "tpr_a": 289, "fpr_b": 289, "tpr_b": 289, "macro_roc_auc_ovo": 289, "ovo_tpr": 289, "pool": [289, 399, 450, 640, 963, 1014, 1046], "761": [289, 1015], "plot_roc": [289, 1015], "mean_fpr": 290, "viz": [290, 394], "interp_tpr": 290, "mean_auc": 290, "std_auc": 290, "std_tpr": 290, "tprs_upper": 290, "tprs_lower": 290, "plot_roc_crossv": [290, 1015], "1e4": [291, 664, 684, 900, 1006], "gsh": 291, "gsh_time": 291, "gs_time": 291, "make_heatmap": 291, "is_sh": 291, "make_cbar": 291, "param_c": [291, 803], "param_gamma": [291, 803, 817], "sh": [291, 391, 395, 983], "scores_matrix": 291, "pivot_t": 291, "aggfunc": 291, "0e": [291, 554, 555], "get_xticklabel": 291, "rotation_mod": 291, "cbar_ax": 291, "plot_successive_halving_heatmap": [291, 1015], "rsh": [292, 331], "0x7f94505e0340": 292, "_distn_infrastructur": 292, "rv_discrete_frozen": 292, "0x7f945096d2e0": 292, "0x7f94509a6070": 292, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 292, "params_str": 292, "drop_dupl": 292, "n_resources_": [292, 806, 807, 983], "nn_candid": 292, "n_candidates_": [292, 806, 807, 983], "n_iterations_": [292, 806, 807], "multialign": 292, "278": [292, 384, 846, 847, 1015], "plot_successive_halving_iter": [292, 1015], "n_samples_train": [293, 908, 909, 910, 911, 912], "n_samples_test": [293, 908, 909, 910, 911, 912, 997, 1004], "train_error": 293, "test_error": 293, "i_alpha_optim": 293, "alpha_optim": 293, "00020991037201085544": 293, "711": [293, 1015], "plot_train_error_vs_test_error": [293, 1015], "nonlinear": [294, 332, 649, 693, 694, 698, 701, 872, 990, 991, 999, 1004], "true_fun": 294, "polynomial_featur": 294, "206": [294, 1015], "plot_underfitting_overfit": [294, 1015], "subset_mask": 295, "isin": [295, 339], "param_rang": [295, 335, 357, 825, 833, 989, 1051], "652": [295, 362, 1015], "plot_validation_curv": [295, 1015], "ovo": [297, 329, 792, 834, 908, 911, 994, 995, 1009], "review": [297, 326, 374, 382, 389, 390, 391, 392, 393, 399, 402, 418, 419, 540, 546, 994, 1004, 1020], "sort_index": 297, "class_protein_loc": 297, "cyt": 297, "erl": 297, "exc": [297, 978], "me1": 297, "me2": 297, "me3": 297, "mit": [297, 382, 393, 414, 424, 615, 616, 619, 624, 627, 648, 671, 672, 681, 843, 987], "nuc": 297, "429": 297, "pox": 297, "vac": 297, "code_s": [297, 836, 995], "ovo_tre": 297, "ovr_tre": 297, "ecoc": 297, "cv_results_tre": 297, "cv_results_ovo": 297, "cv_results_ovr": 297, "cv_results_ecoc": 297, "glanc": [297, 386], "tree_optim": 297, "unifi": [297, 388, 396, 399, 400, 421, 642, 1013, 1035], "allwein": 297, "erin": [297, 1047], "yoram": [297, 739], "singer": [297, 671, 672, 739, 990, 994, 1008, 1009], "141": [297, 506, 539, 906, 995], "defens": 297, "853": [297, 1015], "plot_multiclass_overview": [297, 1015], "assembl": [299, 327, 363, 866], "multitask": [299, 422, 995], "adam": [299, 316, 863, 864, 998, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "kleczewski": [299, 1042, 1043], "yeast": [299, 837], "417": 299, "40597": 299, "base_lr": [299, 837], "y_pred_ovr": 299, "ovr_jaccard_scor": 299, "y_pred_chain": 299, "chain_jaccard_scor": 299, "y_pred_ensembl": 299, "ensemble_jaccard_scor": 299, "x_po": 299, "takeawai": 299, "plot_classifier_chain_yeast": [299, 1015], "nmslib": 300, "pynndesc": 300, "pip": [300, 329, 330, 331, 332, 333, 334, 335, 336, 375, 385, 387, 391, 393, 405, 411, 1010], "pynndescenttransform": 300, "csr_matrix": [300, 330, 445, 449, 457, 501, 539, 549, 562, 563, 564, 565, 568, 569, 570, 571, 593, 598, 599, 719, 832, 861, 879, 881, 908, 909, 911, 912, 914, 915, 916, 917, 944, 949, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 995, 1004, 1008, 1009, 1010, 1050], "nmslibtransform": 300, "sw": 300, "n_samples_fit_": [300, 848, 849, 850, 852, 854, 856, 857, 858], "cosinesimil": 300, "nmslib_": 300, "adddatapointbatch": 300, "createindex": 300, "n_samples_transform": [300, 850, 858], "thread": [300, 330, 333, 385, 399, 401, 414, 421, 838, 839, 960, 961, 962, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052], "num_thread": 300, "knnquerybatch": 300, "benchmark": [300, 331, 362, 363, 374, 380, 382, 387, 399, 405, 408, 413, 473, 520, 904], "mnist_10000": 300, "mnist_20000": 300, "20_000": 300, "tsne_param": 300, "barnes_hut": [300, 697, 1042, 1043], "parallel_batch_queri": 300, "msg": [300, 978], "transformer_nam": 300, "longest": 300, "fit_dur": 300, "transform_dur": 300, "884": 300, "769": 300, "077": [300, 362], "759": 300, "numba": [300, 1014], "cold": 300, "i_ax": 300, "828": 300, "994": 300, "brute": [300, 399, 410, 418, 425, 449, 451, 455, 462, 637, 638, 693, 694, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 1001, 1030, 1039, 1043, 1047, 1050, 1051, 1052], "spent": [300, 326, 388, 393, 830, 1050], "approximate_nearest_neighbor": [300, 1015], "slow": [302, 320, 361, 374, 381, 385, 387, 419, 422, 452, 704, 880, 881, 885, 908, 911, 943, 991, 997, 1014, 1027, 1042], "temporarydirectori": [302, 329], "graph_model": 302, "classifier_model": 302, "sklearn_graph_cache_": 302, "tmpdir": [302, 329], "full_model": 302, "classifier__n_neighbor": 302, "grid_model": 302, "365": [302, 416, 478, 1015], "plot_caching_nearest_neighbor": [302, 1015], "beforehand": [303, 1010], "entitl": [303, 452, 616, 848, 986], "knn__weight": 303, "unifom": 303, "plot_classif": [303, 1015], "79269019073225": 304, "new_data": [304, 389], "4x11": 304, "real_data": 304, "set_clim": 304, "plot_digits_kde_sampl": [304, 1015], "wildli": [305, 993], "kd": [305, 414, 420, 997, 1043, 1044, 1045], "jakevdp": [305, 313], "aaaaff": [305, 308], "tophat": [305, 420, 846, 847, 851], "log_den": 305, "x_src": 305, "format_func": 305, "ih": 305, "epanechnikov": [305, 420, 846, 847, 851], "funcformatt": 305, "nullloc": 305, "true_den": 305, "plot_kde_1d": [305, 1015], "637": [306, 1015], "plot_lof_novelty_detect": [306, 1015], "x_inlier": 307, "n_error": 307, "x_score": [307, 487, 488, 489, 490], "legend_handl": 307, "handlerpathcollect": 307, "update_legend_marker_s": 307, "update_from": 307, "set_siz": 307, "handler_map": 307, "update_func": 307, "085": [307, 1015], "plot_lof_outlier_detect": [307, 1015], "cmap_light": [308, 311], "ffaaaa": 308, "aaffaa": 308, "cmap_bold": [308, 311], "00ff00": 308, "plot_nca_classif": [308, 1015], "neighborhoodcomponentanalysi": 309, "dim_reduction_method": 309, "acc_knn": 309, "x_embed": [309, 310, 697, 701, 855, 997], "ntest": 309, "plot_nca_dim_reduct": [309, 1015], "logsumexp": [310, 1042], "get_yaxi": [310, 320], "link_thickness_i": 310, "diff_embed": 310, "dist_embed": 310, "einsum": 310, "exp_dist_embed": 310, "relate_point": 310, "pt_i": 310, "pt_j": 310, "161": [310, 1015], "plot_nca_illustr": [310, 1015], "8133333333333334": 311, "darkblu": 311, "shrink_threshold": [311, 853, 997, 1035, 1047], "plot_nearest_centroid": [311, 1015], "barycent": [312, 1035], "plot_regress": [312, 1015], "geospati": [313, 420], "latitud": [313, 320, 382, 503, 704, 768], "longitud": [313, 320, 382, 503, 704, 768], "xtrain": 313, "ytrain": 313, "radian": [313, 704, 768], "land_mask": 313, "ball_tre": [313, 425, 449, 451, 455, 462, 693, 694, 848, 849, 850, 851, 852, 854, 856, 857, 858, 997, 1035, 1052], "ocean": 313, "502": [313, 1015], "plot_species_kd": [313, 1015], "combat": [315, 419], "lesser": [315, 401, 447, 546, 990], "curvatur": 315, "383": [315, 1015], "plot_mlp_alpha": [315, 1015], "bfg": [316, 615, 616, 653, 654, 663, 674, 677, 679, 685, 692, 997, 998, 1050], "980000": 316, "096950": 316, "momentum": [316, 863, 864, 998], "049530": 316, "nesterov": [316, 863, 864, 998, 1051, 1052], "049540": 316, "360000": 316, "978444": 316, "860000": 316, "504185": 316, "503452": 316, "045311": 316, "956038": 316, "243802": 316, "992766": 316, "041297": 316, "993879": 316, "042898": 316, "638843": 316, "855465": 316, "909293": 316, "318387": 316, "912632": 316, "290584": 316, "991653": 316, "045934": 316, "840000": 316, "601052": 316, "157334": 316, "154453": 316, "692470": 316, "689751": 316, "689143": 316, "150527": 316, "850000": 316, "341523": 316, "336188": 316, "335919": 316, "689015": 316, "830000": 316, "513034": 316, "512595": 316, "930000": 316, "170087": 316, "nesterovs_momentum": [316, 863, 864], "invscal": [316, 681, 682, 683, 863, 864, 1008], "plot_arg": 316, "plot_on_dataset": 316, "nlearn": 316, "loss_": [316, 863, 864, 998, 1049], "loss_curve_": [316, 863, 864], "data_set": 316, "get_lin": 316, "plot_mlp_training_curv": [316, 1015], "28x28": 317, "784": 317, "infrastructur": [317, 335, 1013, 1014], "44139186": 317, "19174891": 317, "13983521": 317, "11378556": 317, "09443967": 317, "07846529": 317, "06506307": 317, "05534985": 317, "986429": 317, "953061": 317, "plot_mnist_filt": [317, 1015], "greyscal": 318, "yann": [318, 1035, 1037], "dauphin": [318, 1037], "gabriel": [318, 1043, 1044, 1045, 1048, 1049], "synnaev": 318, "convolv": 318, "nudge_dataset": 318, "1px": 318, "direction_vector": 318, "apply_along_axi": 318, "feature_rang": [318, 876, 892, 1004, 1037, 1047], "cg": [318, 663, 664, 677, 679, 692, 990, 1039, 1040, 1042, 1046, 1048, 1049, 1052], "rbm_features_classifi": 318, "6000": [318, 632], "raw_pixel_classifi": 318, "logisticregressionifittedlogisticregress": 318, "_classif": 318, "1515": 318, "zero_divis": [318, 718, 733, 734, 742, 787, 788, 791, 994, 1045, 1047, 1051], "207": [318, 1035], "154": [318, 656, 995], "050": [318, 1002, 1015], "plot_rbm_logistic_classif": [318, 1015], "incom": [320, 382, 445], "unscal": [320, 325, 990, 994, 1043, 1049], "unterthin": [320, 1038, 1039, 1040], "medinc": [320, 331, 382, 495], "houseag": [320, 331, 382, 495], "averoom": [320, 331, 382, 495], "room": [320, 382, 392, 414, 1017], "avebedrm": [320, 382, 495], "bedroom": [320, 382], "aveoccup": [320, 331, 382, 495], "features_idx": 320, "quantile_rang": [320, 884, 896, 1041], "yeo": [320, 324, 882, 894, 1004, 1043, 1049, 1051], "cox": [320, 324, 882, 894, 1004, 1043, 1051], "plasma": 320, "plasma_r": 320, "create_ax": 320, "bottom_h": 320, "left_h": 320, "rect_scatt": 320, "rect_histx": 320, "rect_histi": 320, "ax_scatt": 320, "ax_histx": 320, "ax_histi": 320, "ax_scatter_zoom": 320, "ax_histx_zoom": 320, "ax_histy_zoom": 320, "rect_colorbar": 320, "ax_colorbar": 320, "plot_distribut": 320, "hist_nbin": 320, "x0_label": 320, "x1_label": 320, "hist_x1": 320, "hist_x0": 320, "aesthet": [320, 1010, 1040], "tick_bottom": 320, "tick_left": 320, "outward": 320, "ec": [320, 535], "make_plot": 320, "item_idx": 320, "ax_zoom_out": 320, "ax_zoom_in": 320, "zoom_in_percentile_rang": 320, "cutoffs_x0": 320, "cutoffs_x1": 320, "non_outliers_mask": 320, "colorbarbas": 320, "OR": [320, 414, 425, 449, 1046], "indistinguish": 320, "quadrant": 320, "237": [320, 1015, 1026], "plot_all_sc": [320, 1015], "straightforward": [321, 386, 419, 1018], "anywher": 321, "qinhanmin2005": 321, "sina": [321, 1048], "rnd": 321, "enc": [321, 323, 333, 335, 879, 880, 1004], "x_bin": 321, "line_bin": 321, "plot_discret": [321, 1015], "get_nam": 322, "broader": [322, 990, 1017], "logisticregression__c": 322, "linearsvc__c": 322, "kbinsdiscretizer__n_bin": 322, "gradientboostingclassifier__learning_r": 322, "svc__c": [322, 866], "cm_piyg": 322, "piyg": 322, "b30065": 322, "178000": 322, "est_idx": 322, "plot_discretization_classif": [322, 1015], "centers_0": 323, "centers_1": 323, "x_list": 323, "grid_encod": 323, "stripe": 323, "plot_discretization_strategi": [323, 1015], "johnwon": 324, "weibul": 324, "bimod": [324, 420], "ineffect": [324, 1004, 1043, 1044], "eric": [324, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "ericchang2017": 324, "northwestern": [324, 663], "contact": [324, 399, 1013], "font_siz": 324, "bc": 324, "qt": [324, 883], "x_lognorm": [324, 1004], "x_chisq": 324, "chisquar": 324, "x_weibul": 324, "x_gaussian": 324, "x_uniform": 324, "loc_a": 324, "loc_b": 324, "105": 324, "x_a": 324, "x_b": 324, "x_bimod": 324, "d81b60": 324, "0188ff": 324, "ffc107": 324, "b7a2ff": 324, "2ec5ac": 324, "figaspect": 324, "axes_idx": 324, "axes_list": 324, "x_trans_bc": 324, "lmbda_bc": 324, "lambdas_": [324, 882, 1048, 1051], "x_trans_yj": 324, "lmbda_yj": 324, "x_trans_qt": 324, "ax_origin": 324, "ax_bc": 324, "ax_yj": 324, "ax_qt": 324, "x_tran": [324, 335, 389, 411, 447, 469, 882, 887, 894, 1004], "meth_nam": 324, "lmbda": 324, "plot_map_data_to_norm": [324, 1015], "involv": [325, 327, 329, 349, 353, 374, 376, 382, 385, 387, 391, 401, 402, 417, 424, 704, 834, 835, 991, 995, 997, 1001, 1002, 1009, 1013, 1018, 1026, 1043], "kneighbor": [325, 333, 848, 849, 850, 852, 854, 997, 1039, 1044, 1048, 1049, 1050, 1051], "obatin": 325, "tyler": [325, 1042, 1048, 1049, 1050], "lanigan": [325, 1042], "tylerlanigan": 325, "sebastian": [325, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "raschka": [325, 1040, 1041, 1042, 1043, 1044, 1047], "sebastianraschka": 325, "alcohol": [325, 384], "malic": [325, 384], "acid": [325, 384], "scaled_x_train": 325, "x_plot_scal": 325, "fit_and_plot_model": 325, "scaled_pca": 325, "x_train_transform": [325, 370, 418], "x_train_std_transform": 325, "first_pca_compon": 325, "target_class": 325, "repercuss": 325, "unscaled_clf": 325, "scaled_clf": 325, "y_pred_scal": 325, "y_proba_sc": 325, "0825": 325, "vastli": 325, "792": [325, 1015], "plot_scaling_import": [325, 1015], "wine_review": 326, "42074": 326, "countri": [326, 336, 501, 991], "provinc": 326, "region_1": 326, "region_2": 326, "wineri": 326, "tremend": [326, 421], "variet": 326, "hail": 326, "martha": 326, "vineyard": 326, "napa": 326, "vallei": 326, "cabernet": 326, "sauvignon": 326, "heitz": 326, "spain": 326, "ripe": 326, "aroma": 326, "blackberri": 326, "cassi": 326, "carodorum": 326, "selecci\u00f3n": 326, "reserva": 326, "northern": 326, "toro": 326, "tinta": 326, "bodega": 326, "carmen": 326, "rodr\u00edguez": 326, "watson": [326, 415], "honor": 326, "late": [326, 376], "harvest": 326, "knight": 326, "sonoma": 326, "blanc": 326, "macaulei": 326, "oak": 326, "reserv": [326, 566, 567, 1018, 1019], "oregon": 326, "willamett": 326, "pinot": 326, "noir": 326, "ponzi": 326, "franc": [326, 768], "b\u00e9gude": 326, "aft": [326, 1038], "br\u00fblade": 326, "provenc": 326, "bandol": 326, "one_hot": 326, "max_categori": [326, 333, 335, 879, 880, 1004, 1049, 1051], "target_typ": [326, 887, 930, 957, 1052], "evaluate_model_and_stor": 326, "rmse_test_scor": 326, "rmse_train_scor": 326, "rmse_test_mean": 326, "rmse_test_std": 326, "rmse_train_mean": 326, "rmse_train_std": 326, "n_unique_categori": 326, "nuniqu": 326, "14810": 326, "1236": 326, "632": 326, "455": 326, "workaround": [326, 387, 803, 817], "high_cardinality_featur": 326, "low_cardinality_featur": 326, "mixed_encoded_preprocessor": 326, "high_cardin": 326, "low_cardin": 326, "mixed_pip": 326, "high_cardinalityindex": 326, "targetencodertargetencod": 326, "low_cardinalityindex": 326, "mixed_target": 326, "name_to_color": 326, "rmse_": 326, "_mean": 326, "_std": 326, "explod": 326, "unrel": [326, 375, 392, 395, 422, 520], "plot_target_encod": [326, 1015], "near_uniqu": 327, "50_000": [327, 362], "n_categori": [327, 842, 880, 1004], "kbin": [327, 334], "x_inform": 327, "permuted_categori": 327, "x_shuffl": 327, "catastroph": [327, 767, 1014], "x_near_unique_categori": 327, "raw_model": 327, "0049896314219657345": 327, "00457762158159003": 327, "model_with_cf": 327, "cf": [327, 414, 417, 447, 705, 990, 1004, 1014], "8000184677460285": 327, "7927845601690948": 327, "coefs_cf": 327, "target_encod": 327, "x_train_no_cf_encod": 327, "x_test_no_cf_encod": 327, "model_no_cf": 327, "858486250088675": 327, "6338211367110066": 327, "coefs_no_cf": 327, "292": [327, 405, 421, 739, 1015], "plot_target_encoder_cross_v": [327, 1015], "announc": [329, 330, 331, 332, 333, 334, 335, 336, 391], "latest": [329, 330, 331, 332, 333, 334, 335, 336, 385, 387, 391, 393, 395, 1010, 1049], "upgrad": [329, 330, 331, 332, 333, 334, 335, 336, 405, 1014, 1035, 1040, 1043], "conda": [329, 330, 331, 332, 333, 334, 335, 336, 375, 387, 388, 390, 391, 393, 395, 405, 408, 1010], "forg": [329, 330, 331, 332, 333, 334, 335, 336, 375, 388, 390, 391, 395, 405], "plot_roc_curv": [329, 1045, 1047], "plot_precision_recall_curv": [329, 1045, 1047, 1048], "9473684210526315": 329, "sklearn_cache_": 329, "isomap__n_neighbor": 329, "ccp_alpha": [329, 365, 562, 563, 564, 565, 569, 570, 914, 915, 916, 917, 1010, 1045], "tree_": [329, 365, 369, 851, 914, 915, 916, 917], "node_count": [329, 365, 369, 914, 915, 916, 917], "test_sklearn_compatible_estim": [329, 938], "decision_function_shap": [329, 358, 908, 911, 1009, 1040, 1041, 1044, 1045], "9932": 329, "plot_release_highlights_0_22_0": [329, 1015], "await": 330, "lam": [330, 331, 1046, 1053], "35776189065725783": 330, "42425183539869404": 330, "openmp": [330, 385, 390, 399, 401, 414, 421, 962, 1046, 1048, 1051], "6229268209877846": 330, "10k": [330, 452, 1021], "monotoinc": 330, "usecas": [330, 333, 335, 414, 567], "gbdt_cst": 330, "999791942438998": 330, "plot_release_highlights_0_23_0": [330, 1015], "art": [331, 393, 654, 697, 1013, 1018], "footprint": [331, 334, 374, 376, 414, 419, 560, 561, 562, 563, 568, 569, 570, 571, 1037, 1040, 1041, 1046, 1047, 1050], "yarowski": [331, 903, 1007], "random_unlabeled_point": [331, 901, 902, 903], "self_training_model": [331, 903], "base_estim": [331, 389, 413, 558, 559, 560, 561, 837, 840, 903, 983, 1046, 1048, 1049, 1050, 1051], "selftrainingclassifierifittedselftrainingclassifi": 331, "linear_baselin": 331, "714": 331, "decisiontreeregressorifitteddecisiontreeregressor": 331, "effort": [331, 387, 393, 1013, 1018, 1046, 1048], "623": [331, 843, 996, 1015], "plot_release_highlights_0_24_0": [331, 1015], "l2_regular": [332, 421, 566, 567], "max_bin": [332, 333, 421, 566, 567, 1052], "min_": [332, 414, 421, 876, 990, 1004, 1008, 1009, 1010], "sum_i": [332, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 985, 986, 990, 992, 994, 999], "pb_q": [332, 990], "_1": [332, 353, 416, 419, 422, 536, 542, 543, 545, 550, 551, 552, 651, 652, 657, 658, 659, 660, 661, 665, 666, 667, 668, 686, 687, 688, 689, 770, 990, 992, 994, 1009], "get_feature_nam": [332, 1043, 1044, 1046, 1047, 1048], "pet": [332, 336, 792, 994], "dog": [332, 333, 335, 336, 587, 787, 887, 1004], "fish": 332, "pet_cat": 332, "pet_dog": 332, "pet_fish": 332, "plot_": [332, 405], "015": [332, 362, 365, 1002, 1015], "plot_release_highlights_1_0_0": [332, 1015], "x_1d": 333, "hist_quantil": 333, "log_reg_input_featur": 333, "gather": [333, 335, 395, 402, 414, 1004, 1018], "min_frequ": [333, 335, 879, 880, 1004, 1049, 1051], "rabbit": [333, 335, 1004], "snake": [333, 335, 587, 887, 1004], "infrequent_categories_": [333, 335, 879, 880, 887, 1004], "x0_cat": [333, 1004], "x0_rabbit": [333, 1004], "x0_infrequent_sklearn": [333, 1004], "refactor": [333, 1035, 1037, 1038, 1039, 1045, 1048, 1049, 1050], "radius_neighbor": [333, 854, 856, 857, 858, 1039, 1044, 1045, 1047, 1048, 1049, 1050], "blog": [333, 374, 387, 393, 395, 402, 1046], "readili": [333, 419, 1010, 1018], "true_w": 333, "true_h": 333, "x_reconstruct": [333, 487, 488, 489, 588], "00364": 333, "divis": [333, 414, 422, 595, 596, 599, 717, 718, 733, 734, 742, 750, 787, 788, 791, 994, 1027, 1039, 1043, 1044, 1047, 1051, 1052], "bisect_km": 333, "plot_release_highlights_1_1_0": [333, 1015], "video": [334, 381, 390, 508, 995, 1018, 1020], "sepal_col": 334, "petal_col": 334, "x_out": [334, 870, 879, 880], "052506": 334, "592373": 334, "189830": 334, "973554": 334, "416010": 334, "630382": 334, "765012": 334, "362176": 334, "021849": 334, "788808": 334, "hist_no_interact": 334, "v1": [334, 381, 405, 566, 567, 801, 802, 1047, 1050, 1051, 1052], "liac": [334, 381, 387, 501, 1050, 1051], "arff": [334, 387, 501, 1047, 1050, 1051], "ticket": [334, 387], "cabin": 334, "boat": 334, "allen": [334, 1038, 1040, 1042, 1045], "elisabeth": [334, 1052], "walton": 334, "24160": 334, "3375": 334, "b5": 334, "loui": [334, 1040, 1041, 1045, 1047, 1049, 1051, 1052], "mo": [334, 1046], "allison": 334, "hudson": 334, "9167": 334, "113781": 334, "5500": [334, 693, 991], "c22": 334, "c26": 334, "montreal": 334, "pq": 334, "chestervil": 334, "ON": 334, "helen": 334, "lorain": 334, "joshua": [334, 382, 1037, 1038, 1040, 1041, 1047, 1050, 1051], "creighton": 334, "bessi": 334, "waldo": 334, "compliant": [334, 387], "cupi": [334, 399, 411, 1052], "gpu": [334, 411, 998, 1014, 1028, 1052], "changelog": [334, 391, 401, 1033], "528": [334, 1015], "plot_release_highlights_1_2_0": [334, 1015], "throughout": [335, 370, 401, 632, 804, 863, 864, 1019, 1038, 1043], "codebas": [335, 370, 387, 388, 389, 422, 1035, 1041], "ongo": [335, 388, 402], "incorpor": [335, 387, 415, 421, 993, 1013, 1018], "contrib": [335, 387, 389, 395, 399, 401, 414, 451, 1013, 1014, 1051], "adpot": 335, "true_label": [335, 338, 339], "non_noisy_label": 335, "9694149248180188": 335, "encodings_": [335, 887, 1004], "geomspac": 335, "46858513287221654": 335, "372": [335, 1015], "plot_release_highlights_1_3_0": [335, 1015], "x_adult": 336, "y_adult": 336, "adult": [336, 501, 1004], "fnlwgt": [336, 501], "workclass": [336, 501], "marit": [336, 501], "y_decis": [336, 837], "9283904272173097": 336, "df_out": 336, "heightpet_catpet_dogf64f64f64": 336, "2156660": 336, "8626621": 336, "4018260": 336, "7548291": 336, "2939931": 336, "rf_no_cst": 336, "rf_cst": 336, "icon": [336, 389], "hover": 336, "randomforestclassifierinot": 336, "fittedrandomforestclassifi": 336, "routin": [336, 376, 381, 384, 387, 388, 389, 390, 395, 399, 401, 423, 677, 679, 692, 849, 908, 909, 910, 911, 912, 991, 997, 1004, 1005, 1008, 1013, 1018, 1035, 1049, 1050, 1051], "hyperparameter_grid": 336, "scoring_inner_cv": 336, "test_ms": 336, "interfer": [336, 1045], "42074287": 336, "40515048": 336, "66530929": 336, "35461203": 336, "25027943": 336, "levarag": 336, "linearoper": [336, 692], "x_spars": [336, 539, 965, 968], "x_dens": [336, 549], "time_spars": 336, "time_dens": 336, "speedup": [336, 374, 419, 421, 655, 659, 662, 1035, 1036, 1037, 1038, 1050], "6x": 336, "738": [336, 1015], "plot_release_highlights_1_4_0": [336, 1015], "semisupervis": [338, 401], "clai": [338, 339, 340, 343, 1035], "woolam": [338, 339, 340, 343, 1035], "n_total_sampl": [338, 339], "n_labeled_point": [338, 339], "unlabeled_set": 338, "everyth": [338, 370, 391, 393, 399, 469, 949, 1013, 1014, 1035], "lp_model": [338, 339], "predicted_label": [338, 339], "transduction_": [338, 339, 340, 901, 902, 903], "_plot": 338, "0x7f943ac7c4f0": 338, "pred_entropi": [338, 339], "label_distributions_": [338, 339, 901, 902, 1046], "uncertainty_index": [338, 339], "image_index": [338, 339], "329": [338, 455, 1015], "plot_label_propagation_digit": [338, 1015], "max_iter": 339, "______________________________________________________________________": 339, "290": [339, 693, 694, 698, 991], "330": 339, "280": 339, "unlabeled_indic": 339, "transduc": 339, "delete_indic": 339, "183": [339, 393, 995, 1035], "nfit": 339, "delete_index": 339, "501": [339, 1015], "plot_label_propagation_digits_active_learn": [339, 1015], "label_spread": 340, "labelspreadingifittedlabelspread": 340, "output_label": 340, "output_label_arrai": 340, "outer_numb": 340, "inner_numb": 340, "plot_label_propagation_structur": [340, 1015], "breast_canc": 341, "oliv": [341, 343, 1043, 1044, 1046, 1047, 1048], "rausch": [341, 343, 1043, 1044, 1047], "rauscho": [341, 343], "ethz": [341, 343], "total_sampl": [341, 541], "base_classifi": [341, 343, 1007], "x_valu": 341, "99999": 341, "amount_label": 341, "amount_iter": 341, "self_training_clf": 341, "skfold": 341, "y_test_tru": 341, "labeled_iter_": [341, 903], "return_count": [341, 362, 858], "capsiz": 341, "twinx": 341, "plot_self_training_varying_threshold": [341, 1015], "2823": 342, "2117": 342, "441": [342, 362], "758": 342, "1676": 342, "1108": 342, "847": 342, "sdg_param": 342, "vectorizer_param": 342, "selftrain": 342, "st_pipelin": 342, "ls_pipelin": 342, "eval_and_print_metr": 342, "y_mask": 342, "x_20": 342, "y_20": 342, "754": [342, 1015], "plot_semi_supervised_newsgroup": [342, 1015], "y_rand": 343, "y_30": 343, "y_50": 343, "ls30": 343, "ls50": 343, "ls100": 343, "st30": 343, "st50": 343, "rbf_svc": [343, 1009], "color_map": 343, "939": [343, 673, 1015, 1023], "plot_semi_supervised_versus_svm_iri": [343, 1015], "my_kernel": [345, 1009], "plot_custom_kernel": [345, 1015], "2x2": [346, 414, 758], "plot_iris_svc": [346, 1015], "convention": [347, 401, 902], "support_vector_indic": 347, "191": [347, 393, 995, 1015], "plot_linearsvc_support_vector": [347, 1015], "plot_oneclass": [348, 1015], "midpoint": 349, "blink": 349, "act": [349, 361, 387, 400, 420, 421, 718, 733, 734, 742, 787, 788, 791, 881, 885, 991, 994, 997, 1009, 1043], "spuriou": [349, 395, 1004, 1048, 1049, 1050], "c_rang": 349, "gamma_rang": 349, "midpointnorm": 349, "masked_arrai": [349, 803, 817], "x_2d": 349, "y_2d": 349, "c_2d_rang": 349, "gamma_2d_rang": 349, "bright": 349, "brutal": 349, "147": [349, 995, 1015], "plot_rbf_paramet": [349, 1015], "plot_separating_hyperplan": [350, 1015], "plain": [351, 424, 662, 1008], "n_samples_1": [351, 1009], "n_samples_2": [351, 1009], "clusters_std": 351, "wclf": 351, "wdisp": 351, "plot_separating_hyperplane_unbalanc": [351, 1015], "blown": 352, "score_mean": 352, "score_std": 352, "this_scor": [352, 1023], "plot_svm_anova": [352, 1015], "outermost": 353, "enrich": 353, "plot_training_data_with_decision_boundari": 353, "untransform": [353, 469, 472, 1005], "bend": 353, "tanh": [353, 781, 863, 864, 992, 1009], "hyperbol": [353, 647, 863, 864, 992, 998], "generaliz": [353, 421], "comprehens": [353, 422, 762, 763, 992, 1018, 1043], "460": [353, 1015], "plot_svm_kernel": [353, 1015], "plot_svm_margin": [354, 1015], "fignum": 354, "unreg": 354, "yy_down": 354, "yy_up": 354, "plot_svm_nonlinear": [355, 1015], "svr_rbf": 356, "svr_lin": 356, "svr_poli": 356, "kernel_label": 356, "model_color": 356, "setdiff1d": 356, "fancybox": 356, "plot_svm_regress": [356, 1015], "omega": [357, 417, 988], "dependen": 357, "reparametr": 357, "model_l1": 357, "shuffle_param": 357, "best_c": 357, "idxmax": 357, "train_size_idx": 357, "results_sc": 357, "c_scale": 357, "best_c_scal": 357, "somewhat": [357, 370, 376, 387, 389, 419, 421, 908, 911, 990, 1009, 1010], "dantzig": 357, "model_l2": 357, "218": [357, 384, 476, 720, 790, 1015], "plot_svm_scale_c": [357, 1015], "break_ti": [358, 908, 911, 1009, 1045], "accent": [358, 593, 594, 596, 1045], "plot_svm_tie_break": [358, 1015], "emphasi": [359, 417, 908, 909, 910, 911, 912, 1001, 1013], "subtl": [359, 370, 993, 1014], "plot_decision_funct": 359, "sample_weight_last_ten": 359, "sample_weight_const": 359, "clf_no_weight": 359, "clf_weight": 359, "498": [359, 1015], "plot_weighted_sampl": [359, 1015], "size_mb": 361, "utf": [361, 363, 422, 492, 508, 587, 593, 594, 596], "load_dataset": 361, "sublinear_tf": [361, 419, 422, 595, 596], "duration_train": 361, "duration_test": 361, "data_train_size_mb": 361, "data_test_size_mb": 361, "2034": [361, 382], "98mb": 361, "1353": 361, "87mb": 361, "786mb": 361, "7831": 361, "337mb": 361, "sparse_cg": [361, 677, 679, 692, 990, 1036, 1042, 1044, 1045, 1049, 1051], "rarer": [361, 363, 422], "deeper": [361, 1010], "plot_feature_effect": 361, "average_feature_effect": 361, "top5": 361, "top_indic": 361, "predictive_word": 361, "bar_siz": 361, "y_loc": 361, "keyword": [361, 381, 387, 389, 392, 394, 401, 414, 425, 428, 443, 449, 450, 455, 457, 462, 469, 472, 501, 508, 540, 543, 545, 564, 565, 572, 573, 574, 575, 625, 633, 636, 637, 644, 648, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 693, 697, 702, 703, 704, 705, 706, 707, 778, 782, 783, 784, 785, 796, 797, 809, 825, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 866, 870, 938, 961, 983, 991, 994, 997, 1007, 1035, 1039, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "keith": [361, 1035, 1040], "atheist": 361, "orbit": [361, 362], "caltech": 361, "expectedli": 361, "pollut": [361, 732, 789, 994, 1000], "sender": [361, 382], "livesei": 361, "solntz": 361, "wpd": 361, "sgi": 361, "jon": [361, 1042, 1045, 1046, 1048, 1049, 1052], "nntp": [361, 382, 1028], "1qlettinn8oi": 361, "cco": 361, "allan": [361, 413, 1047], "schneider": [361, 1048], "instinct": 361, "happi": [361, 399, 402, 821, 822], "listen": 361, "murder": 361, "voluntari": 361, "disregard": [361, 401, 422, 437, 470, 487, 488, 489, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 726, 727, 728, 789, 839, 840, 849, 857, 864, 875, 876, 882, 883, 886, 891, 894, 895, 897, 907, 909, 912, 915, 917, 994, 1043], "beings": 361, "bahavior": 361, "theirs": 361, "mimicri": 361, "imit": 361, "parrot": 361, "polli": 361, "pulchritud": 361, "anim": [361, 422], "kill": [361, 399], "Or": [361, 369, 418, 419, 879, 994, 1000, 1008], "sigh": 361, "wonder": [361, 385], "bahaviour": 361, "believ": [361, 362, 395, 399, 1018], "primat": 361, "arbitarili": 361, "poster": [361, 386, 387, 1027], "weren": [361, 880, 1044], "slai": 361, "mate": 361, "ritual": 361, "whatnot": 361, "ye": [361, 395, 401, 873, 890, 990], "gorilla": 361, "dolphin": 361, "platypu": 361, "writer": 361, "launch": [361, 362, 405, 1018], "custom_nam": 361, "clf_descr": 361, "rocchio": [361, 853], "000597": 361, "5316": 361, "0314": 361, "000633": 361, "000931": 361, "0895": 361, "704": 361, "0312": 361, "00066": 361, "752": 361, "0272": 361, "000623": 361, "762": 361, "00264": 361, "00137": 361, "748": [361, 393], "00198": 361, "000452": 361, "779": 361, "txt": [361, 381, 498, 508], "curs": [361, 362, 414, 420, 996, 997, 1022, 1027], "harm": [361, 389, 422, 799], "552": [361, 1015], "plot_document_classification_20newsgroup": [361, 1015], "discov": [362, 414, 419, 422, 425, 449, 453, 1019, 1050], "category_s": 362, "true_k": 362, "3387": 362, "evaluations_std": 362, "fit_and_evalu": 362, "evaluation_std": 362, "score_valu": 362, "std_score": [362, 1048], "collis": [362, 363, 422, 587, 594], "x_tfidf": 362, "420": 362, "7929": [362, 1042], "prod": [362, 626], "phenomenon": [362, 1004], "cluster_s": 362, "1638": 362, "309": 362, "447": 362, "1689": 362, "638": [362, 393], "580": [362, 846, 847], "3384": 362, "1887": 362, "311": 362, "332": [362, 894], "1771": 362, "973": [362, 418], "354": 362, "redo": 362, "x_lsa": 362, "explained_vari": [362, 994], "419": [362, 621], "310": 362, "029": [362, 1002], "minibatch_kmean": 362, "342": 362, "093": [362, 476], "371": 362, "051": [362, 477], "297": [362, 382], "original_space_centroid": 362, "order_centroid": 362, "ve": [362, 387, 422, 1018, 1028, 1042], "shuttl": 362, "bibl": 362, "sparciti": 362, "lsa_vector": 362, "x_hashed_lsa": 362, "610": 362, "393": 362, "355": 362, "037": [362, 714], "024": 362, "df_std": 362, "speak": [362, 374, 387, 1008], "safer": [362, 370, 385, 414, 418, 1035], "plot_document_clust": [362, 1015], "18000": [363, 382], "raw_data": 363, "data_size_mb": 363, "3803": 363, "245mb": 363, "anyth": [363, 391, 393, 401, 406, 415, 418, 954, 958, 1049], "unicod": [363, 422, 492, 508, 587, 593, 594, 596, 959, 1035, 1043, 1047], "charact": [363, 387, 392, 401, 422, 508, 513, 514, 593, 594, 596, 918, 999, 1028, 1035, 1048, 1050], "underscor": [363, 389, 401, 978, 1025, 1035, 1045, 1048], "tok": [363, 422], "findal": 363, "token_freq": 363, "dict_count_vector": 363, "098": 363, "47928": 363, "vocabulary_": [363, 422, 586, 593, 596, 1028, 1035], "19145": 363, "n_nonzero_column": 363, "43873": 363, "inact": [363, 381, 387], "47668": 363, "input_typ": [363, 422, 587], "y_po": 363, "downsid": 363, "featureheash": 363, "implicitli": [363, 396, 421, 602, 637, 638, 885, 984, 986, 1001, 1004, 1009], "token_pattern": [363, 422, 593, 594, 596], "683": 363, "47885": 363, "497": 363, "plot_hashing_vs_dict_vector": [363, 1015], "parameter": [365, 424, 619, 620, 627, 628, 801, 802, 990, 991, 999, 1004, 1010], "weakest": [365, 1010], "cost_complexity_pruning_path": [365, 914, 915, 916, 917], "drawstyl": [365, 705], "3272984419327777": 365, "plot_cost_complexity_prun": [365, 1015], "ryb": 366, "pairidx": 366, "borderpad": 366, "handletextpad": 366, "plot_iris_dtc": [366, 1015], "plot_tree_regress": [367, 1015], "regr_3": 368, "y_3": 368, "plot_tree_regression_multioutput": [368, 1015], "decision_path": [369, 562, 563, 569, 570, 571, 914, 915, 916, 917, 1041, 1046], "decisiontreeclassifierifitteddecisiontreeclassifi": 369, "compute_node_depth": 369, "children_left": 369, "children_right": 369, "n_node_sampl": 369, "weighted_n_node_sampl": 369, "travers": [369, 997, 1001], "n_node": [369, 446, 450, 468, 562, 563, 569, 570, 571, 914, 915, 916, 917, 948], "node_depth": 369, "is_leav": 369, "pop": [369, 399, 921, 1023, 1043], "visit": [369, 387, 1001, 1017], "node_id": [369, 918, 920], "is_split_nod": 369, "children": [369, 414, 421, 446, 450, 468, 571, 1039, 1052], "33035714": 369, "30357143": 369, "36607143": 369, "800000011920929": 369, "45333333": 369, "54666667": 369, "950000047683716": 369, "91666667": 369, "08333333": 369, "02564103": 369, "97435897": 369, "n_output": [369, 401, 421, 431, 437, 438, 442, 447, 450, 470, 474, 487, 488, 489, 537, 539, 541, 542, 544, 547, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 633, 635, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 726, 727, 732, 749, 750, 752, 754, 755, 757, 758, 789, 792, 794, 795, 803, 806, 807, 809, 817, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 853, 855, 856, 857, 862, 863, 864, 865, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 898, 899, 901, 902, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 932, 965, 994, 995, 1010, 1042, 1045], "node_index": 369, "node_ind": 369, "leaf_id": 369, "sample_id": [369, 382, 502], "threshold_sign": 369, "inequ": [369, 401, 414, 448, 452, 464, 704, 991, 992, 997], "common_nod": 369, "common_node_id": 369, "plot_unveil_tree_structur": [369, 1015], "x_test_transform": [370, 418], "tip": [370, 373, 387, 390, 393, 410, 422, 539, 546, 650, 697, 990, 1016, 1017, 1029, 1030, 1038], "standard_norm": [370, 692], "unfair": 370, "x_select": 370, "gbc": 370, "x_train_select": 370, "x_test_select": 370, "mtrand": 370, "_rand": 370, "85418642": 370, "79084103": 370, "13077794": 370, "11915045": 370, "56479934": 370, "70814003": 370, "25291366": 370, "55212743": 370, "18197458": 370, "37845099": 370, "mutat": [370, 1043], "govern": [370, 374, 387, 401, 1018], "implic": [370, 387], "rf_123": 370, "rf_inst": 370, "didn": [370, 401, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "strict": [370, 385, 401, 419, 508, 540, 593, 594, 596, 990, 1035, 1044, 1047], "pervas": [370, 387], "unlucki": 370, "lucki": 370, "fairer": 370, "temptat": [370, 387], "throughput": [373, 1013, 1030, 1038], "switch": [373, 683, 709, 722, 741, 759, 761, 799, 846, 847, 942, 943, 994, 997, 1030, 1035], "offlin": [374, 387], "bottleneck": [374, 393, 421, 453, 863, 864], "hurt": [374, 539, 1043], "toolkit": [374, 1013, 1018], "branch": [374, 385, 387, 390, 391, 414, 421, 447, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 914, 915, 916, 917, 919, 997, 1001, 1010], "sklearn_assume_finit": 374, "assume_finit": [374, 375, 473, 904], "nm": 374, "multithread": [374, 414, 782, 906, 907, 908, 909, 910, 911, 912], "bla": [374, 375, 385, 388, 393, 782, 1035, 1043, 1044, 1046, 1047], "sparsity_ratio": 374, "gbt": 374, "speedi": 374, "packet": 374, "reuter": [374, 382], "carefulli": [374, 419, 1009], "spawn": [374, 399, 803, 817, 827, 828, 829, 1046], "gil": [374, 375, 388, 962, 1038, 1043, 1044, 1047, 1048, 1052], "ought": 374, "lapack": [374, 375, 385, 537, 540, 546, 693, 1050], "dgemm": 374, "atla": [374, 385], "rebuild": [374, 409, 422, 447], "openbla": [374, 375, 385, 399, 962, 1048, 1052], "mkl": [374, 375, 385, 399, 962, 1035], "veclib": [374, 399], "osx": 374, "nouri": [374, 1036, 1038], "instruct": [374, 387, 388, 389, 390, 391, 392, 395, 399, 400, 401, 508, 593, 594, 596, 1017, 1019, 1028, 1035], "ubuntu": [374, 385, 393, 395], "1gb": 374, "mib": [374, 473, 904], "working_memori": [374, 375, 473, 785, 904, 1043], "facilit": [374, 401, 409, 1013, 1014, 1041, 1044], "moment": [374, 419, 424, 445, 620, 628, 863, 864, 958, 998, 999], "000024": 374, "027400": 374, "mileag": 374, "deploi": [374, 404, 409, 1014, 1018], "upstream": [374, 387, 391, 395, 399, 1004, 1044], "lighter": [374, 705, 707, 786, 793, 1051], "threadpoolctl": [375, 385, 405, 408], "worker": [375, 401, 422, 960, 961, 962, 1050], "14228": 375, "loki": [375, 962, 994, 1043, 1046], "duplic": [375, 386, 387, 401, 414, 425, 449, 453, 454, 520, 640, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 830, 877, 980, 997, 1035, 1038, 1047, 1049, 1051, 1052], "memmap": [375, 382, 401, 419, 513, 539, 1043, 1052], "1mb": [375, 1040], "exclus": [375, 399, 401, 419, 421, 632, 633, 635, 983, 990, 994, 995, 1018, 1042, 1046], "omp_num_thread": 375, "my_script": 375, "algebra": [375, 385, 390, 399, 419, 422, 467, 872, 1004], "bli": [375, 385, 399], "mkl_num_thread": 375, "openblas_num_thread": 375, "blis_num_thread": 375, "bash": [375, 395], "zsh": 375, "termin": [375, 392, 393, 395, 405, 414, 428, 453, 466, 558, 559, 563, 564, 565, 568, 570, 671, 672, 673, 681, 683, 863, 864, 915, 917, 1000, 1010], "pypi": [375, 385, 387, 389, 391, 393, 405, 1010, 1043, 1047, 1049, 1050, 1052], "channel": [375, 382, 385, 405, 422, 498, 499, 588, 589, 591, 592, 1017], "subscript": [375, 1048], "max_thread": [375, 388], "n_cpu": [375, 401], "preced": [375, 387, 492, 994, 1035], "lib": [375, 385, 405, 1013], "_num_thread": 375, "singleton": [375, 811, 929, 1048, 1051], "aforement": [375, 995], "global_random_se": 375, "fixtur": [375, 387], "build_numb": 375, "disrupt": 375, "config": [375, 385, 387, 388, 395, 631, 1043], "contributor": [375, 390, 391, 392, 395, 399, 401, 994, 1014, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "encount": [375, 385, 405, 409, 414, 421, 422, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 566, 567, 586, 841, 842, 843, 845, 879, 969, 1004, 1008, 1013, 1017, 1018, 1028, 1043, 1046], "annoi": 375, "test_your_test_nam": 375, "skip": [375, 387, 389, 396, 411, 422, 473, 573, 651, 652, 657, 665, 666, 667, 676, 686, 904, 1028, 1039, 1042, 1045, 1047, 1049, 1051], "global_dtyp": 375, "boundscheck": [375, 388], "segfault": [375, 388, 1035, 1043, 1048], "posix": [375, 399], "pairwisedistancesreduct": 375, "adequ": [375, 393, 572, 1019, 1048], "unset": [375, 401, 1043], "_get_warnings_filters_info_list": 375, "sklearn_warning_as_error": 375, "syntax": [375, 387, 392, 395, 415, 473, 865, 866, 904, 983, 1019, 1046, 1048], "rst": [375, 387, 391, 395, 1028, 1035], "drive": [376, 419, 420, 554, 1008, 1018, 1028], "passiveaggress": [376, 422], "fledg": [376, 422], "naivebay": 376, "dramat": 376, "fetcher": [380, 1040, 1042, 1051], "miscellan": [380, 381, 1015, 1041, 1042, 1049, 1050, 1052, 1053], "linnerrud": [380, 1030], "jpeg": [381, 382, 498, 499], "publish": [381, 382, 389, 391, 395, 401, 1006, 1014, 1047], "creativ": 381, "spare": [381, 679, 680], "pyplpt": 381, "test_dataset": 381, "everybodi": [381, 387], "upload": [381, 385, 391, 399, 676], "mice": [381, 632, 984], "brain": 381, "miceprotein": 381, "1080": [381, 414], "sc": [381, 414], "clara": [381, 1047], "higuera": 381, "katheleen": 381, "gardin": 381, "krzysztof": 381, "cio": 381, "protein": 381, "cite": [381, 414], "kj": [381, 996], "critic": [381, 387, 400, 409, 421, 697, 991, 994, 1002, 1009, 1018, 1046], "syndrom": 381, "plo": [381, 612, 613], "ONE": [381, 612, 613], "e0129126": 381, "40966": 381, "upload_d": 381, "08t16": 381, "17928620": 381, "file_id": 381, "default_target_attribut": 381, "row_id_attribut": 381, "mouseid": 381, "ignore_attribut": 381, "genotyp": 381, "cc18": 381, "study_135": 381, "study_98": 381, "study_99": 381, "md5_checksum": 381, "3c479a6885bfa0438971388283a1ce32": 381, "websit": [381, 382, 384, 387, 402, 405, 998, 1008, 1017, 1018, 1028, 1036, 1037, 1038], "4550": 381, "17t14": 381, "1804243": 381, "pone": 381, "0129126": 381, "openml100": 381, "study_14": 381, "study_34": 381, "earliest": [381, 991], "iris_61": 381, "iris_969": 381, "969": 381, "iris_version_3": 381, "vanschoren": [381, 1047], "rijn": [381, 1043], "bischl": 381, "torgo": 381, "acm": [381, 382, 414, 425, 449, 455, 462, 465, 516, 568, 681, 730, 760, 852, 994, 997, 1000, 1006], "sigkdd": [381, 382, 516, 681, 887, 1004, 1006], "newslett": 381, "legaci": [381, 391, 401, 962, 1035, 1042, 1047], "my": [381, 387, 392, 395, 501], "columnar": [381, 469, 1013], "io": [381, 384, 385, 387, 391, 393, 395, 401, 409, 697, 1013, 1033], "json": [381, 387, 405], "sql": 381, "smoothli": 381, "mat": [381, 422], "audio": [381, 508], "wish": [381, 387, 394, 396, 405, 414, 943, 1020, 1028, 1042], "imageio": 381, "wavfil": 381, "wav": 381, "hdf5": 381, "h5py": 381, "pytabl": 381, "april": [382, 669, 690, 691, 1039, 1047], "laboratori": [382, 1013], "cambridg": [382, 419, 595, 841, 845, 990, 992, 996], "facial": 382, "glass": 382, "upright": 382, "frontal": 382, "movement": 382, "credit": [382, 395, 421, 990, 1018], "18846": [382, 493, 494], "20news_hom": 382, "newsgroups_train": [382, 493], "11314": 382, "1073": [382, 493], "20new": [382, 1028], "34118": 382, "30000": 382, "01327": 382, "newsgroups_test": 382, "vectors_test": 382, "class_prior": [382, 841, 842, 843, 845, 1036, 1039], "fit_prior": [382, 841, 842, 843, 845], "88213": 382, "suspici": 382, "show_top10": 382, "top10": 382, "affili": 382, "abund": 382, "clue": [382, 395, 991], "bare": [382, 991, 1028], "quotat": 382, "77310": 382, "76995": 382, "cleveland": 382, "indian": 382, "leagu": 382, "team": [382, 390, 399, 401, 1013, 1018, 1035], "ohio": 382, "spark": [382, 1014], "death": 382, "floyd": [382, 693, 991], "reckon": 382, "coloni": 382, "paul": [382, 1038, 1041, 1042, 1043, 1044, 1048, 1049], "dolan": 382, "nicknam": 382, "tribe": 382, "theme": [382, 405, 408, 1035], "mlb": [382, 877], "inappropri": [382, 418, 424, 714, 824], "nlp": [382, 419, 422, 841, 845, 992, 1018], "cultur": 382, "inflammatori": 382, "famou": [382, 384, 421, 1009], "internet": [382, 392, 1004, 1026], "offici": [382, 389, 401, 405, 498, 502, 1013, 1028, 1043, 1044, 1047], "verif": [382, 994, 1018], "identif": [382, 387, 414, 502, 983, 1020], "viola": [382, 1043], "opencv": 382, "detector": [382, 401, 852], "5749": [382, 498, 499], "13233": [382, 498, 499], "5828": [382, 498, 499], "200m": 382, "lfw_home": 382, "rectangular": [382, 401, 943, 1014], "1140": 382, "lfw_pairs_train": [382, 498], "subdivid": [382, 424], "10_fold": [382, 498], "gari": [382, 1042], "huang": [382, 663, 1041, 1046], "manu": 382, "ramesh": [382, 1018, 1038, 1041, 1045], "tamara": [382, 1052], "berg": [382, 1036, 1037, 1047, 1052], "erik": [382, 1018, 1038], "miller": [382, 1043, 1044, 1048], "massachusett": 382, "amherst": 382, "30m": 382, "seven": [382, 987], "homepag": [382, 535, 1010], "581012": [382, 496], "newswir": 382, "ltd": 382, "804414": [382, 502], "47236": [382, 502], "v2": [382, 502, 669, 690, 691, 990], "chronolog": [382, 502], "23149": [382, 502, 1049], "781265": [382, 502], "lyrl2004": [382, 502], "2286": 382, "810596": 382, "2287": 382, "2288": 382, "uint32": [382, 502], "gmil": 382, "381327": 382, "ccat": 382, "e11": 382, "ecat": 382, "m11": 382, "656": 382, "lewi": [382, 1042, 1046], "yang": [382, 414, 419, 539, 644, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1052], "rose": 382, "361": [382, 421, 560, 561], "397": 382, "cup": [382, 994], "tcpdump": 382, "darpa": 382, "intrus": 382, "lincoln": 382, "unrealist": 382, "sa": [382, 497], "logged_in": 382, "smtp": [382, 497], "resp": [382, 421, 602, 801, 802, 1008, 1043], "4898431": [382, 497], "976158": 382, "699691": 382, "619052": 382, "95373": 382, "richard": [382, 423, 663, 1036, 1045, 1047, 1049, 1050], "lippmann": 382, "hain": 382, "jonathan": [382, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051], "korba": 382, "da": [382, 1050, 1051], "yamanishi": 382, "takeuchi": 382, "miln": 382, "sixth": 382, "press": [382, 414, 419, 424, 425, 449, 595, 615, 616, 619, 624, 627, 648, 841, 845, 987, 990, 992, 996], "household": 382, "statlib": 382, "dcc": 382, "ltorgo": 382, "cal_hous": 382, "1990": 382, "censu": 382, "bureau": 382, "resid": 382, "vacat": 382, "pace": 382, "kellei": [382, 1037, 1038], "ronald": [382, 998, 1038, 1048], "barri": [382, 1043], "autoregress": 382, "hyperspher": [383, 1013], "simplif": [383, 386, 392, 1035, 1041], "realiti": 383, "reciproc": [383, 994], "7826": 384, "4194": 384, "9490": 384, "9565": 384, "fisher": [384, 421, 509, 641, 1013], "michael": [384, 413, 414, 455, 633, 642, 696, 801, 984, 990, 1018, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1052], "marshal": 384, "arc": [384, 421], "1988": 384, "sir": 384, "referenc": [384, 387, 389, 395, 401, 898, 899, 997, 1042, 1048], "duda": [384, 988], "hart": [384, 988, 1043], "taxonom": 384, "annual": [384, 414, 730, 760, 903, 994, 1007], "eugen": [384, 1036, 1041], "1936": 384, "john": [384, 422, 541, 713, 739, 773, 881, 908, 909, 911, 912, 984, 990, 994, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1048, 1050, 1051, 1052], "wilei": [384, 984], "1950": [384, 994], "1973": [384, 413], "scene": [384, 385, 997, 999, 1048], "q327": 384, "d83": 384, "son": [384, 984], "isbn": [384, 414, 990], "471": 384, "22361": 384, "dasarathi": 384, "1980": 384, "nose": [384, 1038, 1042], "pami": [384, 414, 729], "gate": [384, 1048], "1972": 384, "431": 384, "433": 384, "mlc": 384, "cheeseman": 384, "autoclass": 384, "conceptu": [384, 421, 992], "alpaydin": 384, "boun": 384, "nist": [384, 994], "bitmap": 384, "preprint": 384, "32x32": 384, "nonoverlap": 384, "4x4": [384, 419, 422], "garri": 384, "candela": 384, "dimmick": 384, "geist": 384, "grother": 384, "janet": 384, "handprint": 384, "nistir": 384, "5469": 384, "kaynak": 384, "msc": 384, "graduat": 384, "bogazici": 384, "cascad": 384, "kybernetika": 384, "ken": [384, 1028, 1037, 1044], "tang": [384, 1045, 1046, 1047], "ponnuthurai": 384, "suganthan": 384, "kai": [384, 568, 1000, 1042], "dimensionalityreduct": 384, "nanyang": 384, "technolog": 384, "claudio": [384, 1049, 1050, 1052], "gentil": [384, 1047], "men": 384, "club": 384, "waist": 384, "puls": 384, "chin": [384, 1039], "situp": 384, "tenenhau": 384, "pratiqu": 384, "alcalin": 384, "magnesium": 384, "phenol": 384, "nonflavanoid": 384, "proanthocyanin": 384, "od280": 384, "od315": 384, "class_2": [384, 515], "1680": 384, "746": 384, "chemic": 384, "grown": [384, 421, 558, 559, 560, 561, 562, 563, 569, 570, 914, 915, 916, 917, 1010], "itali": 384, "cultiv": 384, "thirteen": 384, "constitu": 384, "forina": 384, "parvu": 384, "pharmaceut": 384, "food": 384, "brigata": 384, "salerno": 384, "16147": 384, "genoa": 384, "lichman": 384, "irvin": 384, "aeberhard": 384, "cooman": 384, "vel": 384, "rep": 384, "dept": 384, "cook": [384, 499, 1035, 1041], "north": [384, 414], "queensland": 384, "submit": [384, 385, 386, 389, 390, 391, 392, 395, 401, 402, 405], "technometr": [384, 416, 474, 479, 1000], "rda": 384, "1nn": 384, "THE": 384, "OF": 384, "chemometr": 384, "wheel": [385, 387, 391, 405, 1021, 1045, 1047, 1049], "quickest": 385, "registri": [385, 405, 1013], "uninstal": 385, "git": [385, 389, 391, 393, 395, 1017, 1031, 1035, 1051], "fork": [385, 387, 391, 395, 399], "miniforge3": [385, 395], "miniforg": [385, 395, 405], "env": [385, 395, 405], "prompt": [385, 387, 405, 408, 422, 1019], "newli": [385, 400, 421, 468, 1001, 1041, 1042, 1050], "virtualenv": [385, 387], "python3": [385, 405], "venv": [385, 405], "pep517": [385, 387], "dev0": [385, 391, 1017, 1031], "pyx": [385, 387, 388, 393, 395], "pxd": [385, 387], "sklearn_fail_no_openmp": 385, "checkout": [385, 387, 391, 395], "cumbersom": 385, "reinstal": [385, 405], "setuptool": 385, "unix": [385, 422], "makefil": 385, "ninja": [385, 1018], "recompil": [385, 388, 393, 405], "pyproject": [385, 391], "toml": [385, 391], "mesonpi": 385, "spin": 385, "studio": [385, 1018], "vs_buildtool": 385, "desktop": 385, "screenshot": 385, "secondli": [385, 399, 414, 421, 662, 990, 1028], "architectur": [385, 389, 395, 399, 405, 409, 473, 904, 998, 1018, 1035, 1052], "cmd": 385, "powershel": 385, "struct": [385, 401, 1038], "calcsiz": 385, "distutils_use_sdk": 385, "x86": 385, "buildtool": 385, "vc": 385, "vcvarsal": 385, "bat": 385, "x64": 385, "clang": [385, 388], "confusingli": 385, "usr": 385, "gcc": [385, 388, 393, 399], "libomp": [385, 1047], "silicon": 385, "m1": [385, 411], "januari": [385, 387, 1035, 1036, 1045, 1047, 1050, 1052], "arm64": [385, 390], "llvm": 385, "toolchain": 385, "xcode": 385, "conflict": [385, 387, 391, 395, 405, 1042, 1043], "condarc": 385, "channel_prior": 385, "echo": [385, 391], "cxx": 385, "cflag": 385, "cxxflag": 385, "ldflag": 385, "fopenmp": [385, 388], "cppflag": 385, "xpreprocessor": 385, "wl": 385, "rpath": 385, "lomp": 385, "sudo": [385, 405], "apt": [385, 395, 405], "pip3": [385, 405], "pythonx": 385, "site": [385, 387, 390, 395, 405, 421, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 1018, 1043], "precompil": 385, "arm": [385, 387, 395, 983], "cython3": 385, "cento": 385, "yum": 385, "devel": 385, "gnu": 385, "port": [385, 405, 1045], "pkg": 385, "build_ext": [385, 393], "build_clib": 385, "linker": [385, 388], "sysconfig": 385, "counterpart": [385, 983, 991, 1009, 1023], "get_config_var": 385, "sklearn_build_parallel": 385, "tracker": [386, 390, 395, 399, 402, 405, 409, 1014], "prioriti": [386, 637, 834, 835, 1014, 1038], "reformul": 386, "xyz": 386, "someestim": 386, "welcom": [386, 387, 395, 402, 1014], "relabel": [386, 821, 822, 903], "stall": [386, 390], "sprint": [386, 387, 1035], "unfinish": [386, 387], "supersed": [386, 1040], "overflow": [386, 395, 399, 1017, 1038, 1042, 1043, 1044, 1045, 1046, 1048], "submitt": 386, "strive": [386, 402, 1018], "expertis": [386, 387, 399], "unclear": [386, 387, 506], "pleasant": [386, 1018], "chime": 386, "permiss": [386, 391, 402, 405, 1018, 1050], "rocklin": [386, 392], "acknowledg": [386, 614, 1052], "struggl": [386, 402, 414], "everyon": [387, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "underrepres": 387, "merit": [387, 391, 402], "teach": 387, "priceless": 387, "abid": 387, "codeofconduct": 387, "hesit": 387, "typo": [387, 402, 406, 1035], "send": [387, 414, 426, 538], "burden": [387, 878, 1014], "slep": [387, 401], "templat": [387, 391, 392, 401, 402, 562, 563, 568, 569, 570, 571, 1013], "ecosystem": [387, 984, 1012, 1018], "numpydoc": [387, 401, 405, 408], "compli": [387, 401, 937, 1014], "fulfil": [387, 414, 421, 803, 806, 807, 817, 866, 870, 990], "anyon": [387, 402, 1017, 1018], "gist": [387, 395, 1017], "repo": [387, 391, 1014, 1017], "feasibl": [387, 875, 876, 886], "traceback": [387, 392, 395, 399, 473, 1017, 1052], "curat": [387, 390, 391], "doubt": [387, 388, 391, 990, 1000, 1013], "companion": [387, 1004], "transcript": 387, "inclus": [387, 389, 395, 455, 461, 758, 790, 994, 995, 1035, 1049], "yourlogin": 387, "ruff": [387, 405, 408], "mypi": [387, 391, 405, 408, 1046], "synchron": [387, 422], "my_featur": 387, "commit": [387, 391, 395, 1017, 1035, 1036, 1037, 1038], "modified_fil": 387, "committ": [387, 1035], "modif": [387, 417, 421, 422, 451, 1007, 1052, 1053], "approv": [387, 402, 421], "mrg": [387, 395], "incomplet": [387, 405, 411, 414, 710, 799, 984, 991, 1028, 1039, 1041], "wip": [387, 395, 405], "matur": [387, 1013, 1014], "broad": [387, 401, 1013], "collabor": 387, "_logist": 387, "doctest": [387, 401, 1020, 1035], "test_logist": [387, 395], "test_common": [387, 395], "caught": [387, 395, 409], "submodul": [387, 391, 393, 986, 992, 1035], "intricaci": 387, "narr": [387, 401, 663, 906, 911, 1035, 1036], "unittest": 387, "tests_for_packag": 387, "static": [387, 389, 393, 395, 651, 652, 657, 658, 665, 666, 667, 668], "astropi": 387, "linux": [387, 389, 390, 395, 1013, 1035], "gh": 387, "lint": [387, 395], "nogil": [387, 388], "cpython": [387, 388, 393, 1050], "pyodid": [387, 962], "sklearn_run_float32_test": 387, "lengthi": [387, 399], "etiquett": 387, "she": [387, 896, 897, 1045], "he": [387, 730, 760, 863, 864, 896, 897, 994, 1028, 1042, 1049, 1050], "shorten": [387, 1009, 1048], "leader": [387, 1018], "grab": 387, "familiar": [387, 420, 1043], "acquaint": 387, "experienc": 387, "abandon": 387, "someon": [387, 391, 401, 1035], "glad": 387, "restructuredtext": 387, "some_param": 387, "hello": [387, 395, 955, 959], "goodby": 387, "liter": [387, 391, 1018], "array_paramet": 387, "list_param": 387, "typed_ndarrai": 387, "multioutput_arrai": 387, "bracket": [387, 990], "delimit": [387, 1000, 1050], "colon": 387, "defer": 387, "backtick": [387, 392], "nowadai": 387, "pragmat": 387, "bibliograph": 387, "arxiv": [387, 467], "_my": 387, "ref": [387, 395, 984, 1041], "currentmodul": 387, "succeed": 387, "editor": [387, 395, 399], "_build": 387, "viewabl": 387, "pillow": [387, 405, 408], "sphinxext": [387, 405, 408], "opengraph": [387, 405, 408], "copybutton": [387, 405, 408], "vast": 387, "examples_pattern": 387, "your_regex_goes_her": 387, "no_mathjax": 387, "latexpdf": 387, "stone": [387, 914, 915, 1010], "subdirectori": 387, "subpackag": [387, 391, 1039, 1044], "cleanup": [387, 1035], "charg": 387, "test_requiring_mpl_fixtur": 387, "hang": [387, 1045, 1046], "fruit": [387, 995], "asv": 387, "asv_benchmark": 387, "airspe": 387, "veloc": 387, "publicli": [387, 1045], "zero_on": [387, 1036], "futurewarn": [387, 395, 1042, 1043, 1044, 1046, 1048, 1051, 1052], "example_funct": 387, "exampleestim": 387, "_n_cluster": 387, "versionchang": 387, "meet": [387, 399, 402, 423, 577, 608, 863, 864, 903, 994, 1007, 1018, 1043, 1044, 1045], "nit": 387, "retract": 387, "grammar": 387, "disambigu": [387, 834, 903, 1007, 1050], "Will": [387, 502, 539, 632, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 678, 680, 712, 719, 792, 871, 875, 885, 886, 1038, 1039, 1041, 1043], "clariti": [387, 395], "unhelp": 387, "extran": 387, "rewritten": [387, 654, 1037, 1039], "generos": 387, "reward": 387, "heard": 387, "enemi": 387, "courtesi": 387, "justifi": [387, 393, 413, 570], "occas": 387, "deserv": [387, 393], "digest": [387, 1050], "overwhelm": 387, "sheer": [387, 1018], "myself": 387, "trickiest": 387, "buri": 387, "grep": 387, "some_funct": [387, 933], "some_iter": 387, "flavor": [387, 997], "pointer": [387, 395, 447, 1044], "mandatori": [387, 422, 434, 636], "favorit": [387, 399, 1018], "Being": [387, 401, 402, 409, 990, 997], "killer": [387, 1018], "blame": 387, "migrat": [387, 1035], "ignorerevsfil": 387, "rev": [387, 612, 613], "ruin": 387, "maco": [388, 390, 405, 411, 1043, 1047, 1049], "sklearn_enable_debug_cython_direct": 388, "scratch": [388, 447, 994, 1037], "gdb": [388, 390, 1017], "entrypoint_to_bug_reproduc": 388, "cdef": 388, "state_to_print": 388, "test_val": 388, "fuse": [388, 1041, 1051], "shell": [388, 395, 399, 1019, 1028], "cythonx": 388, "language_level": 388, "wraparound": 388, "initializedcheck": 388, "nonecheck": 388, "cdivis": 388, "pep073": 388, "pathwai": 388, "memoryview": 388, "cnp": 388, "lightweight": [388, 803, 817, 827, 828, 1013], "virtual": [388, 405, 418, 1018], "enter": [388, 391, 414, 447, 1001], "prang": 388, "void": 388, "my_func": [388, 393], "st\u00e9fan": 388, "benhel": 388, "_cython_bla": 388, "protect": [388, 391, 960], "_openmp_help": 388, "cimport": [388, 396, 1043], "omp_get_max_thread": 388, "prolifer": 389, "adopt": [389, 399, 401, 902, 994, 1008, 1043, 1050, 1052], "predomin": [389, 1036], "overrid": [389, 422, 451, 455, 462, 547, 553, 593, 594, 596, 598, 599, 602, 661, 669, 690, 691, 809, 825, 848, 849, 850, 852, 854, 856, 857, 858, 1035, 1043, 1045, 1049, 1051], "creation": [389, 516, 517, 518, 520, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 661, 846, 847, 1018, 1042, 1043, 1044, 1048], "optimis": [389, 414, 997, 1038, 1048, 1050], "param1": [389, 1025], "param2": [389, 1025], "param3": 389, "postpon": [389, 391], "requisit": 389, "liner": [389, 832], "ipython": [389, 392, 393, 395, 1020, 1028], "session": [389, 393, 399, 405, 1012, 1018, 1028], "trainabl": 389, "trail": [389, 978], "overridden": [389, 401, 424, 547, 553, 621, 626, 629, 699, 1043, 1044, 1051], "n_features_in_": [389, 401, 435, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 1046, 1048, 1050, 1053], "slep010": [389, 1046], "duck": [389, 401, 1045], "templateclassifi": 389, "demo_param": 389, "myestim": [389, 428, 430, 431, 433, 434, 435, 436, 437], "subestim": 389, "my_extra_param": 389, "my_estim": [389, 415], "subestimator__c": 389, "subestimator__class_weight": 389, "subestimator__du": 389, "subestimator__fit_intercept": 389, "subestimator__intercept_sc": 389, "subestimator__l1_ratio": 389, "subestimator__max_it": 389, "subestimator__multi_class": 389, "subestimator__n_job": 389, "subestimator__penalti": 389, "subestimator__random_st": 389, "subestimator__solv": 389, "subestimator__tol": 389, "subestimator__verbos": 389, "subestimator__warm_start": 389, "__c": 389, "__class_weight": 389, "unpack": 389, "easiest": [389, 395, 415, 991], "__repr__": [389, 1014, 1044], "setattr": 389, "deepcopi": 389, "__sklearn_clone__": [389, 439, 1051], "frozen": 389, "frozentransform": 389, "fitted_transform": [389, 469], "__getattr__": 389, "_estimator_typ": [389, 401, 431, 432, 433, 436, 437, 1040], "programmat": [389, 504, 1044], "_get_tag": [389, 1046], "allow_nan": [389, 925, 927, 1051], "array_api_support": [389, 411], "binary_onli": [389, 1045, 1046], "multioutput_onli": 389, "no_valid": 389, "non_determinist": [389, 1049], "primari": [389, 401, 419, 520, 1001, 1017, 1018], "_safe_split": 389, "preserves_dtyp": 389, "poor_scor": 389, "requires_fit": 389, "requires_positive_x": [389, 1045, 1050], "requires_i": [389, 431, 437, 1046], "requires_positive_i": 389, "_skip_test": 389, "_xfail_check": 389, "check_nam": 389, "xfail": [389, 395], "skiptestwarn": 389, "x_type": 389, "2darrai": 389, "signifi": [389, 414, 586, 814, 999], "1dlabel": 389, "2dlabel": 389, "_more_tag": 389, "mymultioutputestim": 389, "ridgeregress": 389, "idiosyncrat": 389, "auto_wrap_output_kei": 389, "mytransform": [389, 438], "__init_subclass__": 389, "invok": [389, 536, 542, 544, 550, 551, 572, 574, 575, 827, 903, 1047, 1052], "_doc_link_modul": 389, "_doc_link_templ": 389, "_doc_link_url_param_gener": 389, "estimator_modul": 389, "ownership": 389, "pep8": [389, 391, 395], "indent": [389, 960], "nsampl": [389, 801, 802], "statement": [389, 392, 395, 399, 401, 419, 1028], "flow": 389, "client": [389, 962], "corollari": 389, "foo": [389, 586, 998], "baz": [389, 586], "pyflak": 389, "asanyarrai": 389, "hadamard": 389, "choose_random_sampl": 389, "freestand": 389, "unmodifi": [389, 401], "random_state_": [389, 541, 632, 855, 1049], "gaussiannois": 389, "quasi": [389, 863, 864, 990], "assert_allclos": 389, "rtol": [389, 846, 847, 851], "atol": [389, 677, 679, 846, 847, 851], "checklist": 390, "unclaim": 390, "workflow": [390, 391, 400, 418, 1017], "craft": 390, "markdown": 390, "saniti": [390, 870, 994, 1035, 1036], "outdat": 390, "diff": [390, 994], "valgrind": 390, "platform": [390, 401, 402, 409, 1013, 1017, 1018, 1040, 1043, 1044, 1046, 1048, 1049, 1052], "x86_64": [390, 405], "yep": 390, "gperftool": 390, "debugg": [390, 395], "gprof": 390, "callgrind": 390, "kcachegrind": 390, "warm": [390, 401, 536, 542, 548, 550, 551, 615, 658, 664, 671, 672, 673, 681, 682, 683, 990, 1014, 1045, 1047, 1049], "meson": 390, "homebrew": [390, 405], "freebsd": 390, "rrrcn": 391, "pep101": 391, "build_tool": 391, "blocker": 391, "mileston": 391, "maint_tool": 391, "sort_whats_new": 391, "whats_miss": 391, "fixm": [391, 401], "feedstock": 391, "recip": [391, 991, 1018], "yaml": 391, "whats_new": [391, 395], "v0": [391, 476, 477, 483, 517, 593, 594, 596, 803, 817, 865, 868, 1036, 1043, 1044, 1045], "freez": [391, 405, 409, 1014, 1018, 1043], "0rc1": [391, 1031], "__version__": 391, "draft": [391, 402], "rebas": 391, "bugfix": [391, 1035, 1049], "backport": [391, 396, 1042], "maint": 391, "enh": 391, "blindli": 391, "invit": 391, "cherri": 391, "shortlog": 391, "f2": [391, 995], "sed": [391, 1035], "front": [391, 1042], "rc1": 391, "suffix": [391, 405, 829, 994, 1045], "brows": 391, "oldest": [391, 501], "abi": 391, "acronym": 391, "deliveri": 391, "whl": 391, "went": [391, 994], "bot": [391, 999, 1049, 1052], "sync": 391, "testpypi": 391, "tarbal": [391, 1050], "wheelhouse_upload": 391, "twine": 391, "rrr": 391, "symlink": 391, "latestst": 391, "tmp": 391, "ln": [391, 990, 998, 1004], "versionwarn": 391, "secur": [391, 401, 1013, 1014, 1018, 1030], "twitter": 391, "linkedin": 391, "authorship": 391, "permalink": 391, "_hist_gradient_boost": 391, "_iter": 391, "pickl": [391, 401, 409, 422, 593, 594, 596, 846, 847, 1013, 1014, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052], "type_check": 391, "test_enable_hist_gradient_boost": 391, "enable_hist_gradient_boost": [391, 1044], "enable_my_experimental_featur": 391, "indefinit": 391, "incentiv": 391, "workabl": 392, "stackoverflow": [392, 395, 399], "blogpost": 392, "mcve": [392, 399], "my_data": 392, "with_mean": [392, 886, 897, 1004, 1043, 1048], "default_scor": 392, "other_scor": 392, "scrollbar": 392, "tripl": 392, "fenc": 392, "qualifi": 392, "a674e682c281": 392, "lda_featur": 392, "lda_model": 392, "n_topic": [392, 541, 1042], "minimalist": [392, 422, 1017], "continuous_featur": 392, "positive_featur": 392, "invest": [393, 1018], "idiom": 393, "crunch": 393, "performancetip": 393, "reimplement": [393, 399, 401, 1041, 1045], "spottabl": 393, "amen": [393, 399, 424, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 983], "cpp": 393, "engag": [393, 402], "tent": 393, "somewher": [393, 994, 1028], "prun": 393, "14496": [393, 1044], "682": 393, "ncall": 393, "tottim": 393, "percal": 393, "cumtim": 393, "lineno": 393, "_nls_subproblem": 393, "1263": 393, "_po": 393, "057": [393, 831], "_initialize_nmf": 393, "010": [393, 831, 1002], "_spars": 393, "_neg": 393, "337": 393, "461": 393, "hotspot": 393, "16159": [393, 1046], "840": 393, "2833": 393, "653": [393, 616, 619, 630], "_dotbla": 393, "651": 393, "1397": 393, "2780": 393, "167": [393, 1035], "064": [393, 1002], "1542": 393, "043": 393, "2734": 393, "fromnumer": 393, "1185": 393, "lapack_lit": 393, "dgesdd": 393, "rewrit": [393, 399, 1010, 1027, 1035], "shallow": [393, 421, 566, 567, 921], "4x": [393, 1050], "line_profil": 393, "wire": [393, 539, 546], "profile_default": 393, "ipython_config": 393, "terminalipythonapp": 393, "interactiveshellapp": 393, "lprun": 393, "qtconsol": 393, "_nmf": 393, "73153": 393, "h_init": 393, "5863": 393, "nl": 393, "175": [393, 1004], "112141": 393, "2336": 393, "wtv": 393, "16144": 393, "wtw": 393, "1880": 393, "195133": 393, "grad": [393, 1018], "495761": 393, "777": 393, "proj_gradi": 393, "2449": 393, "130": 393, "1474": 393, "4474": 393, "inner_it": 393, "83833": 393, "hn": 393, "194239": 393, "48858": 393, "150407": 393, "gradd": 393, "193": [393, 421, 720, 790, 1007], "515390": 393, "dqd": 393, "pin": 393, "memory_profil": [393, 405, 408], "memit": 393, "mprun": 393, "1e7": 393, "402344": 393, "standalon": [393, 663, 906], "bianp": 393, "reactiv": 393, "conda_prefix": 393, "pydebug": 393, "extra_cflag": 393, "dpy_debug": 393, "num_cor": 393, "dbg": 393, "fortun": [393, 421, 1028, 1048, 1049], "my_fil": 393, "callgrin": 393, "prof": 393, "encapsul": [394, 415, 428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 474, 475, 476, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917], "artist": [394, 443, 637, 703, 705, 706, 707, 809, 825, 920], "classmethod": [394, 443, 636, 637, 702, 703, 704, 705, 706, 707, 809, 825, 952], "line_": [394, 443, 703, 705, 706, 707, 809, 825], "gridspecfromsubplotspec": 394, "subplot_spec": 394, "get_subplotspec": 394, "ax_top_left": 394, "ax_top_right": 394, "ax_bottom": 394, "bounding_ax_": [394, 637], "lines_": [394, 637, 809, 825], "contours_": [394, 637], "advic": [395, 424, 627, 628], "forth": 395, "userscript": 395, "tampermonkei": 395, "greasemonkei": 395, "shortcut": [395, 424], "pr_number": 395, "navig": [395, 1037], "overlai": [395, 637], "codecov": 395, "test_sparsifi": 395, "pdb": 395, "ipdb": [395, 1028], "pdbcl": 395, "terminalpdb": 395, "lf": 395, "ff": 395, "tb": 395, "runxfail": 395, "werror": 395, "mailman": 395, "listinfo": 395, "crowd": [395, 402, 991, 1014], "imped": 395, "attent": [395, 612, 613, 1008], "minimal_reproduc": 395, "pytb": 395, "stdin": [395, 1028], "perman": 395, "25163598": 395, "issuenumb": 395, "1506": 395, "volunt": 395, "establish": [395, 399, 402, 984], "clarifi": [395, 402, 797], "regression_test": 395, "0008": 395, "patienc": [395, 401], "crop": [395, 1050], "manifest": [395, 991, 997], "fault": [395, 1043, 1045, 1047], "glibc": 395, "uniniti": 395, "trace": [395, 414, 427, 478, 480, 481, 484, 485, 486, 694, 698, 991, 1046], "supp": 395, "readm": [395, 422, 498], "my_test_script": 395, "mobil": 395, "deploy": [395, 1013, 1014, 1018], "scalewai": 395, "aw": 395, "graviton": 395, "workstat": 395, "qemu": 395, "docker": [395, 409, 1048, 1049], "multiarch": 395, "ppc64le": 395, "filesystem": [395, 405, 1048], "pushd": 395, "wget": 395, "aarch64": 395, "arm64v8": 395, "mount": 395, "pwd": 395, "reinit": 395, "bashrc": 395, "ephemer": 395, "persist": [395, 399, 419, 451, 615, 616, 862, 999, 1013, 1030, 1041, 1044], "evolv": [396, 1050], "multitarget": 396, "multi_output": [396, 926], "safe_index": [396, 1045], "denot": [396, 401, 405, 413, 414, 418, 421, 593, 594, 596, 803, 809, 817, 825, 879, 880, 979, 983, 986, 990, 992, 994, 995, 1004, 1007, 1019, 1052], "5488135": 396, "71518937": 396, "60276338": 396, "54488318": 396, "cholesky_delet": 396, "least_angl": 396, "n_popul": [396, 963], "dijkstra": [396, 693, 991], "graph_shortest_path": [396, 1048], "murmurhash3_x86_32": [396, 959], "cryptograph": 396, "lookup": [396, 959, 1044], "bloom": [396, 959], "384616559": 396, "3910350737": 396, "murmurhash": 396, "kit": 399, "toolbox": [399, 1013, 1018], "multilay": [399, 992], "kera": [399, 1013], "forese": 399, "redesign": [399, 1035], "pystruct": [399, 1013], "ssvm": 399, "seqlearn": 399, "harwar": 399, "fusion": 399, "22438": 399, "4143": 399, "meanwhil": [399, 1009], "pipegraph": 399, "squared_loss": [399, 1048], "undertak": 399, "slowli": [399, 401, 549, 943], "ordinarili": [399, 401], "corrobor": 399, "proof": [399, 421, 900, 1006], "road": 399, "bridg": [399, 991, 1013], "reproduct": [399, 990], "guidanc": [399, 424], "value_kei": [399, 921], "levenshtein": 399, "dna": [399, 633, 984], "rna": 399, "pain": 399, "leven": 399, "acctcctagaag": 399, "acctactagaagtt": 399, "gaatattaggccga": 399, "lev_metr": 399, "multiprocess": [399, 401, 960, 962, 997, 1035, 1043, 1049], "exec": 399, "cuda": [399, 411], "reiniti": 399, "culprit": 399, "refus": [399, 896, 897], "forkserv": 399, "joblib_start_method": 399, "set_start_method": 399, "dozen": [400, 424], "leakag": [400, 401, 415, 1030], "disclos": 400, "entail": [400, 884, 886, 1008], "r_squar": 400, "searchcv": [400, 1050], "tacit": 401, "elsewher": [401, 467, 468, 476, 477, 483], "formal": [401, 402, 414, 421, 846, 847, 991, 994, 995, 998], "thereof": 401, "transduct": [401, 414, 901, 902, 1014], "position": 401, "serial": [401, 428, 950, 1013, 1014, 1030, 1035, 1043, 1047, 1052], "pep257": 401, "promis": [401, 1014], "simd": [401, 1050], "negat": [401, 809, 825, 994], "unexpectedli": [401, 1043], "nuanc": 401, "flaw": [401, 421], "terminologi": [401, 1043], "est1": [401, 637], "est2": [401, 637], "exemplifi": 401, "_score": [401, 803, 817, 829, 994, 1035, 1048], "_loss": [401, 994], "divers": [401, 421], "abstract": [401, 419, 424, 623, 773, 1013, 1035], "descriptor": [401, 513, 514], "hoc": 401, "astrai": 401, "readthedoc": 401, "entireti": 401, "shield": 401, "n_target": [401, 417, 487, 488, 489, 490, 529, 561, 616, 648, 651, 652, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 676, 677, 678, 679, 680, 686, 689, 690, 691, 692, 995, 1047, 1049, 1051], "synonym": [401, 848, 849, 850, 856, 857, 858], "themat": 401, "alphanumer": [401, 593, 594, 596], "statistician": [401, 886], "prescrib": 401, "estimator__max_depth": [401, 983], "improp": [401, 1042], "redundantli": 401, "di": [401, 414, 419, 536, 542, 669, 690, 691, 899, 1039, 1048], "vectori": [401, 1045], "noun": 401, "venu": 401, "broadli": [401, 414], "consolid": [401, 402, 1035], "coo": [401, 558, 559, 697, 873, 922, 926, 927, 997, 1036, 1052], "lil": [401, 558, 559, 873, 922, 948, 997], "csgraph": [401, 1048], "absent": [401, 422, 733, 758, 827], "densifi": [401, 663, 664, 671, 672, 673, 681, 682, 683, 906, 984, 1037], "lossili": 401, "unnorm": [401, 541, 991, 1041, 1042], "encompass": [401, 455, 461, 560, 561, 991], "get_n_split": [401, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "estimatorcv": [401, 1014], "loo": [401, 811, 1046], "lexicograph": [401, 572, 792, 798, 848, 856], "hashabl": [401, 874, 877, 1005], "canonic": 401, "xxx": 401, "everywher": 401, "nonetheless": [401, 994], "wherein": 401, "amber": 401, "return_cov": [401, 572, 573, 616, 866], "_idx": 401, "label1": 401, "label2": 401, "class_label": [401, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 914, 916, 932, 1009], "bincount": [401, 418, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 906, 908, 911, 914, 916, 931, 932, 1042], "rebalanc": 401, "obei": [401, 992], "triangl": [401, 419, 448, 452, 464, 704, 992, 997], "concurr": [401, 422, 960, 1047, 1049], "uppercas": [401, 1048], "unavail": [401, 663, 664, 955, 1042, 1048], "deadlock": 402, "meritocrat": 402, "somebodi": 402, "unanim": 402, "emeritu": 402, "recant": 402, "outreach": 402, "brand": [402, 405], "social": [402, 414, 1018], "authorit": 402, "strateg": 402, "entiti": [402, 730, 760], "duti": 402, "resign": 402, "occasion": [402, 731, 1044], "escal": 402, "fallback": [402, 405, 834, 835, 994], "hereaft": 402, "lazi": [402, 422, 1008, 1039], "opinion": 402, "slep020": 402, "veto": 402, "appeal": 402, "revis": [402, 675], "slep000": 402, "insuffici": [404, 993, 1027], "afraid": 405, "packg": 405, "miniconda": 405, "administr": 405, "dnf": 405, "pacman": 405, "raspberri": 405, "pyarrow": [405, 408], "sphinxcontrib": [405, 408], "sass": [405, 408], "toctre": [405, 408], "lock": [405, 408, 960, 962], "py3": 405, "apk": 405, "bind": [405, 1013, 1035, 1042, 1043], "pkgsrc": 405, "py39": 405, "intelex": [405, 1013], "oned": 405, "sklearnex": 405, "plugin": 405, "appdata": 405, "usernam": 405, "windowsapp": 405, "oserror": [405, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503], "errno": 405, "pythonsoftwarefound": 405, "7_qbz5n2kfra8p0": 405, "localcach": 405, "python37": 405, "data_nam": 405, "data_vers": 405, "lift": 405, "regedit": 405, "menu": 405, "hkey_local_machin": 405, "currentcontrolset": 405, "longpathsen": 405, "broken": [405, 418, 604, 605, 640, 725, 922, 994, 1010, 1038, 1042, 1043, 1044, 1046, 1049], "unsupport": [406, 409, 498, 1043, 1048], "conjunct": [406, 414, 599, 809, 825, 827, 828, 829, 830, 833, 961, 984, 990, 1050], "set_": 406, "_request": 406, "substitut": [406, 978, 1014, 1041], "weighted_acc": 406, "unsetmetadatapassederror": 406, "sel": [406, 423], "scoring_weight": 406, "fitting_weight": 406, "hasn": 406, "retrain": [409, 1014, 1051], "simplefilt": 409, "model_from_prevision_vers": 409, "original_sklearn_vers": [409, 581], "untrust": 409, "malici": 409, "inadvis": 409, "immut": 409, "snapshot": [409, 564, 565, 1014], "portabl": [409, 1013], "alex": [409, 422, 1009, 1035, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "gaynor": 409, "sio": 409, "get_untrusted_typ": 409, "unknown_typ": 409, "exchang": [409, 1017], "markup": 409, "pmml": [409, 1013], "onnx": [409, 1013, 1014], "xml": 409, "sklearn2pmml": [409, 1013], "affero": 409, "gplv3": 409, "datastructur": [411, 1043, 1047], "namespac": 411, "array_api": 411, "x_np": 411, "y_np": 411, "x_cu": 411, "y_cu": 411, "array_api_dispatch": [411, 473, 904], "_estimator_with_converted_arrai": 411, "_array_api": 411, "cupy_to_ndarrai": 411, "lda_np": 411, "torch": 411, "x_torch": 411, "y_torch": 411, "power_iteration_norm": [411, 546, 549, 942, 943, 1049], "array_api_compat": 411, "metal": 411, "shader": 411, "m2": 411, "chip": [411, 1018], "77764": 411, "pytorch_enable_mps_fallback": 411, "submatrix": [412, 429, 456, 458], "submatric": 412, "bipartit": [412, 458, 516, 999], "subgraph": 412, "a_n": 412, "lceil": [412, 1000], "log_2": [412, 568, 1000], "rceil": [412, 1000], "bmatrix": [412, 986], "u_2": [412, 986], "u_": [412, 487, 488, 489], "n_column": [412, 456, 458], "inderjit": [412, 458], "blockwis": [412, 990], "bistochast": [412, 456], "l_": [412, 616, 657, 745, 994], "k_": [412, 424, 621, 624, 626, 629, 778, 986, 1004], "u_1": [412, 986], "v_1": 412, "v_2": 412, "v_": [412, 422], "yuval": [412, 456], "microarrai": [412, 456, 518, 633, 984], "cap": [412, 414, 759, 994, 1044], "hochreit": [412, 724], "hungarian": [412, 724], "bodenhof": [412, 724], "fabia": [412, 724], "acquisit": [412, 724], "murphi": [413, 648, 987], "discriminatori": 413, "wilk": 413, "tricki": [413, 991], "unpen": [413, 653, 674, 685, 990], "f_i": 413, "train_set": 413, "test_set": 413, "disjoint": [413, 414, 415, 442, 709, 735, 759, 761, 991], "platt": [413, 442, 908, 909, 911, 912, 1009], "_i": [413, 421, 985, 990, 994, 998, 1009], "_j": [413, 985], "f_j": [413, 1002], "meteorologi": 413, "climatologi": 413, "precipit": 413, "wea": 413, "640": [413, 495, 511, 512, 588, 589, 592, 983], "650": 413, "1990a": 413, "menon": 413, "ak": [413, 1049, 1050], "jiang": [413, 1039, 1046], "xj": 413, "vembu": 413, "ohno": 413, "machado": [413, 727], "703": [413, 518], "710": 413, "kull": [413, 994], "silva": [413, 693, 991, 1046, 1048], "filho": 413, "flach": [413, 994], "mario": [413, 1039, 1041, 1049, 1050, 1051], "w\u00fcthrich": 413, "merz": 413, "actuari": 413, "mu_j": 414, "coher": 414, "elong": 414, "lloyd": [414, 448, 452, 454, 464, 1049, 1050], "distant": [414, 697, 714, 997], "comapar": 414, "sergei": [414, 1037, 1041, 1042, 1043, 1044, 1045], "vassilvitskii": [414, 452, 465], "eighteenth": 414, "siam": [414, 418, 457, 465, 467, 540, 546], "industri": [414, 1013], "predetermin": [414, 991], "scullei": 414, "19th": 414, "exemplar": [414, 445, 459, 1027], "leftarrow": [414, 998, 1008], "foral": [414, 424, 618], "neq": [414, 994, 996, 1004], "notin": 414, "hill": [414, 453, 466, 1045], "climb": [414, 453, 466], "maxima": 414, "x_j": [414, 424, 619, 620, 624, 627, 628, 630, 985, 986, 990, 997, 1009, 1010], "dictat": 414, "solvabl": 414, "stella": [414, 457, 467], "jianbo": [414, 457, 467, 696], "shi": [414, 457, 467, 696], "anil": [414, 457, 467], "daml": [414, 457, 467], "victor": [414, 457, 467, 1042, 1045], "minden": [414, 457, 467], "lex": [414, 457, 467], "ying": [414, 457, 467, 1049], "adjac": [414, 419, 457, 467, 590, 591, 640, 696, 700, 948, 991, 997, 1027], "adjacency_matrix": 414, "ulrik": [414, 457, 467, 696], "von": [414, 457, 467, 696, 1013, 1042, 1043], "luxburg": [414, 457, 467, 696], "jitendra": [414, 457, 467, 696], "malik": [414, 457, 467, 696], "walk": [414, 420, 1038], "marina": 414, "meila": 414, "ng": [414, 419, 696, 852, 998, 1000, 1046], "jordan": [414, 419, 696, 801, 1045, 1046, 1049, 1050], "yair": [414, 696], "precondit": [414, 457, 467, 700, 1010, 1051], "zhuzhunashvili": [414, 467], "forbid": [414, 421], "macroscop": 414, "occupi": [414, 994], "manhattan": [414, 446, 450, 455, 462, 704, 766, 775, 782, 783, 784, 853, 992, 997, 1039, 1044, 1051], "bisecting_strategi": [414, 448], "largest_clust": [414, 448], "biggest_inertia": [414, 448], "biggest": [414, 417, 419, 448], "steinbach": [414, 1050, 1052], "karypi": 414, "vipin": 414, "egin": 414, "minnesota": 414, "june": [414, 991, 1041, 1051], "weblog": 414, "abirami": 414, "mayilvahanan": 414, "emerg": [414, 1018], "ijet": 414, "jian": 414, "xinyu": 414, "gou": 414, "baod": 414, "hebei": 414, "knee": 414, "triangular": [414, 468, 616, 991], "whichev": [414, 421, 451, 549, 566, 567, 638, 655, 659, 661, 669, 687, 688, 702], "extract_dbscan": 414, "ester": [414, 425, 449], "kriegel": [414, 425, 449, 455, 462, 852, 1000], "sander": [414, 425, 449, 451, 455, 462, 852, 1000, 1044, 1045], "xu": [414, 417, 425, 449, 1008, 1048, 1049, 1052], "portland": [414, 425, 449], "aaai": [414, 425, 449, 841, 996], "revisit": [414, 425, 449], "schubert": [414, 425, 449, 455, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049], "tod": [414, 425, 449], "lj2017": 414, "d_c": 414, "x_p": [414, 990], "d_m": 414, "x_q": 414, "g_": 414, "varepsilon": [414, 1008, 1009], "cm2013": 414, "mst": 414, "minimum_cluster_s": 414, "campello": [414, 451], "moulavi": [414, 451], "pei": [414, 1042], "tseng": 414, "cao": 414, "motoda": 414, "pakdd": 414, "lectur": [414, 649, 986, 1012], "7819": [414, 1042], "mcinn": [414, 1041, 1042, 1043, 1045, 1046, 1051], "heali": 414, "icdmw": 414, "max_ep": [414, 455, 460, 461, 462], "nearbi": [414, 997], "cluster_hierarchy_": [414, 455], "planar": 414, "peripheri": 414, "wall": 414, "ankerst": [414, 455, 462], "mihael": [414, 455, 462], "marku": [414, 455, 462, 1043, 1045, 1046, 1047], "breunig": [414, 455, 462, 852, 1000], "han": [414, 447, 455, 462, 1035, 1043, 1044, 1048], "j\u00f6rg": [414, 455, 462, 1043], "sigmod": [414, 455, 462, 852, 1000], "cft": 414, "lossi": 414, "subclust": [414, 447], "till": [414, 447, 792, 994], "temporarili": [414, 1040], "farthest": 414, "brc": [414, 447], "tian": [414, 447, 1040, 1041, 1042], "raghu": [414, 447], "ramakrishnan": [414, 447], "maron": [414, 447], "livni": [414, 447], "sfu": [414, 447], "coursecentr": [414, 447], "zhang96": [414, 447], "roberto": [414, 447], "perdisci": [414, 447], "jbirch": [414, 447], "java": [414, 447, 1013], "satisfi": [414, 655, 659, 704, 722, 740, 741, 846, 847], "labels_pr": [414, 709, 710, 719, 720, 722, 735, 740, 741, 759, 761, 790, 799], "unadjust": [414, 994, 1047], "ri": [414, 710, 790], "c_2": [414, 991], "unord": [414, 421, 1004], "esp": [414, 1035], "hubert": [414, 710, 720, 790], "arabi": [414, 710, 720, 790], "steinlei": [414, 710], "psycholog": [414, 710, 721], "22504": 414, "10526": 414, "u_i": [414, 487, 488, 489, 759], "v_j": [414, 759, 999], "veb2009": 414, "a_i": 414, "b_j": 414, "yat2016": 414, "average_method": [414, 709, 761, 1043], "vinh": [414, 709], "veb2010": 414, "strehl": 414, "joydeep": 414, "583": [414, 1026], "1162": 414, "153244303321897735": 414, "epp": [414, 709], "bailei": [414, 709], "26th": [414, 730, 760, 994], "1553374": 414, "1553511": 414, "9781605585161": 414, "csail": [414, 671, 672, 681, 843], "volume11": 414, "vinh10a": 414, "algesheim": 414, "tesson": 414, "30750": 414, "1038": 414, "srep30750": 414, "rosenberg": [414, 722, 741, 799], "hirschberg": [414, 722, 741, 799], "b2011": 414, "n_k": [414, 555], "n_c": [414, 664], "julia": [414, 722, 741, 799], "media": [414, 1018], "hila": 414, "becker": [414, 1018, 1038, 1047], "fmi": [414, 735], "tp": [414, 717, 723, 733, 734, 735, 786, 787, 788, 791, 918, 994], "fn": [414, 717, 723, 733, 734, 735, 786, 787, 788, 791, 994, 995], "47140": 414, "fowkl": [414, 735], "1983": [414, 735, 886], "tandfonlin": 414, "01621459": 414, "10478008": 414, "kmeans_model": 414, "1987": [414, 612, 613, 796, 797], "561": 414, "n_e": 414, "mathrm": [414, 416, 419, 423, 990, 1010], "b_k": 414, "w_k": [414, 990], "c_q": 414, "n_q": 414, "c_e": 414, "cali\u0144ski": 414, "1974": [414, 422, 715], "dendrit": [414, 715], "bould": 414, "c_i": [414, 997], "c_j": [414, 999], "s_i": [414, 990, 1004], "diamet": 414, "nonneg": [414, 419, 458, 543, 545, 552, 883], "s_j": 414, "max_": [414, 994], "1979": [414, 729, 773], "halkidi": 414, "batistaki": 414, "yanni": 414, "vazirgianni": 414, "michali": 414, "permit": [415, 472, 593, 594, 596, 803, 806, 807, 817, 828, 867, 868, 994, 995, 996, 1041], "clf__c": 415, "pca1": [415, 430], "svm1": 415, "77484909e": 415, "07058917e": 415, "pca2": [415, 430], "svm2": 415, "raw_target_regr": 415, "bypass": [415, 604, 651, 657, 914, 915, 916, 917, 1051], "check_invers": [415, 470, 870, 1004, 1043, 1049, 1050], "linear_pca": 415, "unreli": 415, "citi": [415, 422, 471, 1028], "london": [415, 422, 471], "sallisaw": [415, 471], "bow": 415, "moveabl": 415, "feast": 415, "grape": 415, "wrath": 415, "expert_r": 415, "user_r": 415, "city_categori": 415, "title_bow": 415, "city_london": 415, "city_pari": 415, "city_sallisaw": 415, "507": 415, "301": [415, 1008], "ignored_new_col": 415, "sigma_": [416, 649, 650, 1048, 1052], "wiesel": [416, 427, 480], "eldar": [416, 427, 480], "hero": [416, 427, 480], "5016": [416, 427, 480], "5029": [416, 427, 480], "_k": [416, 988, 990], "glasso": [416, 483], "biostatist": [416, 483], "uncommon": [416, 663, 906, 1009], "downweight": [416, 541], "driessen": [416, 474, 479, 1000], "fastmcd": [416, 474, 479], "raw_location_": [416, 474, 479], "raw_covariance_": [416, 474, 479], "plsw2a": 417, "u_k": [417, 419], "v_k": [417, 419, 536, 542, 550, 551], "x_k": [417, 419, 988, 997], "y_k": [417, 1004], "xi_k": 417, "omega_k": [417, 988], "gamma_k": 417, "delta_k": 417, "nipal": [417, 488, 489], "xp": [417, 881], "x_rotations_": [417, 487, 488, 489], "y_rotations_": [417, 487, 488, 489], "ty": 417, "x_weights_": [417, 487, 488, 489, 490], "y_weights_": [417, 487, 488, 489, 490], "yv": 417, "tx": 417, "pls1": [417, 489], "pls2": [417, 489], "tx_k": [417, 988], "ty_k": 417, "ja": [417, 1042], "wegelin": 417, "methodolog": [418, 1017], "academ": [418, 1018], "commerci": [418, 1018], "flowchart": [418, 1021], "f1_macro": [418, 994, 1039], "custom_cv_2fold": 418, "custom_cv": 418, "9333": 418, "scorer1_nam": 418, "scorer2_nam": 418, "return_indic": [418, 829, 1051], "precision_macro": [418, 1023], "recall_macro": [418, 994], "test_precision_macro": 418, "test_recall_macro": 418, "prec_macro": 418, "rec_macro": 418, "test_prec_macro": 418, "test_rec_macro": 418, "train_prec_macro": 418, "train_rec_macro": 418, "undistinguish": 418, "devic": [418, 587, 1013], "kf": [418, 808], "12883823": 418, "rkf": [418, 818], "weigh": [418, 1042], "caveat": [418, 424], "part3": 418, "spector": 418, "submodel": 418, "kohavi": 418, "jnt": 418, "bharat": [418, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "rao": [418, 1047, 1050], "fung": 418, "rosal": 418, "witten": 418, "ss": 418, "test_fold": [418, 816], "gkf": 418, "sgkf": [418, 821], "suboptim": [418, 705, 707, 786, 793, 997, 1043, 1051], "n_group": [418, 812, 1023, 1041], "lpgo": [418, 812], "gss": [418, 805], "withheld": 418, "train_indx": 418, "test_indx": 418, "autocorrel": 418, "superset": [418, 824, 994], "surplu": 418, "tscv": [418, 824], "inbuilt": 418, "some_integ": 418, "n_cv": [418, 442], "isotropi": 419, "alik": [419, 992], "halko": [419, 540, 546, 549, 942, 943], "szlam": [419, 942, 943], "disadvantag": [419, 424, 990, 991, 998, 1008, 1009, 1010], "parsimoni": [419, 1004], "jen09": 419, "mrl09": 419, "ell_1": [419, 990], "underset": [419, 990, 997, 1010], "operatornam": [419, 745, 990, 994, 1010], "fro": [419, 543, 545, 552, 698, 990], "gentli": 419, "spirit": 419, "mairal": [419, 536, 542], "bach": [419, 536, 541, 542, 543, 663, 990], "ponc": [419, 536, 542], "sapiro": [419, 536, 542], "jenatton": 419, "obozinski": 419, "scholkopf1997": 419, "bakir2003": 419, "smola": [419, 422, 540, 872, 1004, 1009], "klau": [419, 540, 872], "eigendecompos": 419, "eigensolv": [419, 457, 467, 540, 549, 700, 991], "eigsh": [419, 540, 1041, 1042], "lehoucq": 419, "sorensen": 419, "columnwis": 419, "synonymi": 419, "polysemi": 419, "lsi": 419, "sigma_k": [419, 988], "sublinear": [419, 595, 596], "use_idf": [419, 422, 595, 596, 1028], "textual": [419, 428, 1010, 1044], "man": [419, 595, 773, 841, 845, 992, 994, 996], "prabhakar": 419, "raghavan": [419, 595, 841, 845, 992, 994, 996], "hinrich": 419, "sch\u00fctze": [419, 595, 992, 994, 996], "transform_method": 419, "split_cod": 419, "overcomplet": 419, "mammalian": 419, "cortex": 419, "inpaint": 419, "h_i": [419, 999], "psi": 419, "sim": [419, 1026], "wh_i": 419, "ww": 419, "superflu": 419, "psi_1": 419, "psi_2": 419, "psi_n": 419, "superimpos": 419, "plug": [419, 990, 1018, 1028], "wh": [419, 543, 545, 552], "hoyer": [419, 1038], "nndsvd": [419, 543, 545, 552, 1044, 1047], "nndsvdar": [419, 543, 545, 552, 1044], "elementwis": [419, 543, 545, 552], "_featur": [419, 543, 545, 552], "kl": [419, 991, 1043], "itakura": [419, 543, 545, 552, 1042], "saito": [419, 543, 545, 552, 1042], "w_new": 419, "forget_factor": [419, 543], "lee": [419, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1050], "seung": 419, "boutsidi": 419, "gallopoulo": 419, "cichocki": [419, 543, 545, 552], "phan": 419, "fevott": [419, 543, 545, 552], "idier": [419, 543, 545, 552], "lefevr": [419, 543], "corpora": 419, "hoffman": [419, 541, 1040, 1047], "unshad": 419, "beta_k": 419, "eta": [419, 541, 681, 682, 683, 998, 1008, 1040], "topic_word_prior": [419, 541], "theta_d": 419, "doc_topic_prior": [419, 541], "z_": 419, "w_": [419, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 990, 994, 996, 999], "elbo": 419, "overset": [419, 1001], "e_": 419, "blei": [419, 541, 801], "wang": [419, 541, 684, 694, 698, 730, 760, 990, 991, 994, 1038, 1040, 1041, 1042, 1043, 1047, 1050, 1051], "paislei": [419, 541], "kaiser": [419, 537], "talli": 420, "disproportion": 420, "41075698": 420, "41076071": 420, "rho_k": 420, "unsmooth": 420, "scott": [420, 851, 1035, 1036, 1041, 1043, 1044, 1045, 1050, 1051], "silvermann": 420, "propto": [420, 996], "2h": 420, "angular": [420, 697, 768], "contin": [420, 719, 1004], "semin": 421, "friedman2001": 421, "8965": 421, "fisher1958": 421, "loan": [421, 539, 990, 1018], "mayer2022": 421, "mayer": [421, 1047, 1049, 1052], "bourassa": 421, "hoesli": 421, "scognamiglio": 421, "valuat": 421, "tianqi": 421, "guestrin": 421, "ke": [421, 1046, 1047], "boostingdecis": 421, "913": [421, 564], "nr": 421, "f_m": 421, "h_m": 421, "f_": [421, 640, 734, 994], "l_m": 421, "taylor": [421, 1043, 1045, 1046, 1049], "g_i": [421, 654], "sum_m": 421, "softmax": [421, 566, 663, 664, 990, 997, 998], "superior": 421, "htf": 421, "r2007": 421, "friedman2002": 421, "1189": 421, "1232": 421, "367": [421, 1035], "b1998": 421, "decoupl": [421, 996], "cancel": [421, 422, 767], "b2001": 421, "bear": [421, 1013], "geurt": [421, 560, 561, 562, 563, 570, 571, 916, 917], "ernst": [421, 562, 563, 570, 571, 916, 917], "wehenkel": [421, 562, 563, 570, 571, 916, 917], "l2014": 421, "lieg": 421, "flavour": 421, "b1999": 421, "b1996": 421, "h1998": 421, "lg2012": 421, "bootstrap_featur": [421, 560, 561], "844": [421, 560, 561], "346": [421, 506, 560, 561], "w2": 421, "w3": 421, "lr__c": 421, "rf__n_estim": 421, "w1992": 421, "knr": 421, "stack_method": [421, 572], "286": 421, "225": 421, "126": 421, "stack_method_": [421, 572, 573], "final_layer_rfr": 421, "final_layer_gbr": 421, "final_lay": 421, "multi_layer_regressor": 421, "wolpert": [421, 572, 573], "241": [421, 572, 573], "freund": [421, 558, 559], "fs1995": 421, "w_1": [421, 990, 998], "w_2": [421, 990, 998], "w_n": 421, "w_i": [421, 985, 994], "reappli": 421, "zzrh2009": 421, "d1997": 421, "dubai": 422, "francisco": [422, 1006], "movi": [422, 1020], "movie_entri": 422, "thriller": [422, 877], "drama": 422, "000e": 422, "003e": 422, "011e": 422, "974e": 422, "unseen_featur": [422, 586], "speech": [422, 994], "chunker": 422, "pos_window": 422, "pos_vector": 422, "1x6": 422, "part_of_speech": 422, "token_featur": 422, "isupp": 422, "uppercase_initi": 422, "all_uppercas": 422, "raw_x": [422, 587], "pos_tagg": 422, "weinberg": 422, "modulo": [422, 1046], "kilian": [422, 1050, 1051], "anirban": 422, "dasgupta": [422, 451, 900, 1006], "langford": [422, 693, 991], "josh": [422, 1042], "attenberg": 422, "punctuat": [422, 593, 594, 596], "diminish": 422, "4x9": 422, "build_analyz": [422, 593, 594, 596, 1045], "interrog": 422, "bigram_vector": 422, "cool": [422, 1035], "feature_index": 422, "him": 422, "constru": 422, "nqy18": 422, "smooth_idf": [422, 595, 596], "_n": [422, 994], "textbook": [422, 595], "6x3": 422, "81940995": 422, "57320793": 422, "47330339": 422, "88089948": 422, "58149261": 422, "81355169": 422, "term1": 422, "term2": 422, "term3": 422, "0986": [422, 870], "819": 422, "573": 422, "8473": 422, "8515": [422, 1042], "5243": 422, "85151335": 422, "52433293": 422, "55422893": 422, "83236428": 422, "63035731": 422, "77630514": 422, "idf_": [422, 595, 596, 1043], "western": 422, "europ": [422, 1004], "koi8": 422, "russian": 422, "unicodedecodeerror": [422, 593, 594, 596], "told": 422, "troubleshoot": 422, "chardet": 422, "chardetect": 422, "damag": 422, "sloppili": 422, "ftfy": 422, "mish": 422, "mash": 422, "text1": 422, "sei": 422, "mir": 422, "gegr": 422, "xc3": 422, "xbc": 422, "x9ft": 422, "mein": 422, "sauerkraut": 422, "text2": 422, "holdselig": 422, "sind": 422, "dein": 422, "ger": 422, "xfcche": 422, "text3": 422, "xff": 422, "xfea": 422, "x00u": 422, "x00f": 422, "x00": 422, "x00l": 422, "xfc": 422, "x00g": 422, "x00e": 422, "x00n": 422, "x00d": 422, "x00a": 422, "x00h": 422, "x00r": 422, "x00z": 422, "x00i": 422, "x00b": 422, "x00c": 422, "x00t": 422, "x00o": 422, "spolski": 422, "nnmf": [422, 1029, 1030, 1035], "phrase": 422, "misspel": 422, "rescu": 422, "resili": 422, "wprd": 422, "ngram_vector": 422, "char_wb": [422, 593, 594, 596], "rd": 422, "wo": 422, "wp": [422, 662, 676], "char": [422, 593, 594, 596, 1035], "jumpi": 422, "fox": [422, 1051], "1x4": 422, "umpi": 422, "1x5": 422, "mpy": 422, "fo": 422, "paragraph": [422, 508, 1028], "barrier": 422, "hv": 422, "4x10": 422, "discrep": [422, 1028, 1039], "4x1048576": 422, "collid": 422, "ingest": 422, "spend": 422, "my_token": 422, "lowercas": [422, 430, 447, 448, 450, 452, 454, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 593, 594, 596, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 867, 872, 898, 899, 1048], "lucen": 422, "build_preprocessor": [422, 593, 594, 596, 1045], "whitespac": 422, "fanci": 422, "lemmat": 422, "nltk": [422, 1012, 1013], "word_token": 422, "wordnetlemmat": 422, "lemmatoken": 422, "wnl": 422, "british": 422, "spell": 422, "to_british": 422, "1or": 422, "bt": 422, "1er": 422, "ing": 422, "ation": 422, "1z": 422, "ogu": 422, "og": 422, "customvector": 422, "asian": 422, "one_imag": [422, 589, 592], "fake": 422, "assert_array_equ": 422, "five_imag": 422, "nonparametr": [423, 424, 612, 613], "bewar": 423, "importance_gett": [423, 598, 599, 602, 1047], "unimport": [423, 1002], "lsvc": 423, "baraniuk": 423, "isr": 423, "ist": 423, "utl": 423, "aguiar": 423, "cs_note": 423, "ferri": [423, 994], "versatil": [424, 1009, 1018], "optima": 424, "rw2006": [424, 615, 616], "markov": [424, 616, 999, 1013, 1035], "nuisanc": 424, "one_vs_on": [424, 615, 995], "ingredi": 424, "duv2014": 424, "theta_l": 424, "x_bound": [424, 622], "operand": 424, "k1__": 424, "k2__": 424, "constant_valu": [424, 618, 622], "constant_value_bound": [424, 616, 618, 622], "k1__k1__constant_valu": 424, "value_typ": [424, 622], "n_element": [424, 622], "k2__length_scal": 424, "k1": [424, 626, 629], "k1__k1": 424, "k1__k1__constant_value_bound": 424, "k1__k2": 424, "k1__k2__length_scale_bound": 424, "k2": [424, 626, 629], "k2__length_scale_bound": 424, "69314718": [424, 617, 1004], "30258509": 424, "interoper": [424, 1014, 1030], "_valu": [424, 618], "_level": [424, 630], "__add__": [424, 629], "__mul___": 424, "__pow__": [424, 621], "2l": [424, 627], "bigg": [424, 624], "bessel": [424, 624], "rightarrow": [424, 624, 998], "quad": [424, 997, 1008], "tfrac": 424, "3l": 424, "pp84": 424, "x_d": [424, 619], "inhomogen": [424, 619], "expon": [424, 621, 681, 682, 683, 815, 863, 864, 881, 983], "duvenaud": [424, 627, 628], "cookbook": [424, 627, 628], "minkowski": [425, 449, 455, 460, 461, 462, 693, 704, 782, 783, 784, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 997, 1035, 1038, 1049, 1050, 1051], "metric_param": [425, 449, 451, 455, 460, 461, 462, 693, 697, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 1039, 1042, 1049], "leaf_siz": [425, 449, 451, 455, 460, 461, 462, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 997], "kd_tree": [425, 449, 451, 455, 462, 693, 694, 848, 849, 850, 851, 852, 854, 856, 857, 858, 997, 1048, 1052], "ckdtree": [425, 449, 1037], "inhibit": [425, 449], "core_sampl": 425, "n_core_sampl": [425, 449], "attract": [425, 449, 988, 997, 1013], "fun": [426, 538, 1018], "logcosh": [426, 538], "fun_arg": [426, 538], "w_init": [426, 538], "whiten_solv": [426, 538, 1050], "return_x_mean": 426, "compute_sourc": 426, "return_n_it": [426, 459, 464, 483, 550, 551, 651, 652, 657, 658, 665, 666, 667, 668, 686, 687, 688, 689, 690, 691, 692, 699, 1049], "cube": [426, 538], "my_g": [426, 538], "x_mean": 426, "AS": 426, "fortran": [426, 546, 651, 652, 657, 658, 665, 666, 667, 668, 670, 686, 689, 690, 691, 926, 927, 1035, 1038, 1039, 1043], "hyvarinen": [426, 538], "oja": [426, 538], "shrunk_cov": [427, 484, 486], "eq": [427, 480, 726, 727, 728], "7533": [427, 480, 1042], "2763": [427, 480], "3964": [427, 480], "0195": [427, 480], "friend": [428, 1039], "is_fitted_": [428, 431, 433, 436, 437], "subobject": [428, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 801, 802, 803, 806, 807, 817, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917], "get_submatrix": [429, 456, 458], "dummybiclust": 429, "row_ind": [429, 456, 458], "intp": [429, 456, 458], "col_ind": [429, 456, 458], "pca0": 430, "_n_features_out": 430, "myestimator0": 430, "myestimator1": 430, "class_name0": [430, 447, 448, 450, 452, 454, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 872, 898, 899], "class_name1": [430, 447, 448, 450, 452, 454, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 872, 898, 899], "class_name2": [430, 447, 448, 450, 452, 454, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 872, 898, 899], "feature_names_out": [430, 435, 447, 448, 450, 452, 454, 469, 487, 488, 489, 490, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 850, 855, 858, 862, 865, 866, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 898, 899, 1049, 1052], "mro": [431, 437, 1045, 1046], "harsh": [431, 442, 474, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 615, 663, 671, 673, 679, 680, 681, 834, 835, 836, 837, 841, 842, 843, 844, 845, 848, 853, 856, 863, 901, 902, 906, 908, 911, 914, 916, 1045, 1047, 1050], "mycluster": 432, "densityestim": 433, "n_samples_fit": [437, 470, 487, 488, 489, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 693, 839, 840, 848, 849, 850, 852, 854, 856, 857, 858, 864, 907, 909, 912, 915, 917], "uniform_averag": [437, 470, 487, 488, 489, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 726, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 839, 840, 849, 857, 864, 907, 909, 912, 915, 917, 994, 1044], "n_features_new": [438, 447, 450, 537, 539, 541, 542, 544, 547, 548, 554, 572, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 635, 640, 643, 644, 645, 646, 647, 855, 862, 869, 870, 871, 872, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 898, 899], "cloned_classifi": 439, "base_clf": 442, "calibrated_clf": 442, "927": 442, "x_calib": 442, "y_calib": 442, "prob_tru": [443, 444], "prob_pr": [443, 444], "ref_lin": 443, "alexandru": 444, "22nd": 444, "525": [444, 633, 984], "convergence_it": [445, 459], "hardcod": [445, 459, 1043], "affinity_matrix_": [445, 457, 696], "cluster_center_indic": [445, 459], "compute_full_tre": [446, 450, 1039], "compute_dist": [446, 450, 1047], "inferior": [446, 450, 1046], "n_leaves_": [446, 450], "n_connected_components_": [446, 450, 1044], "branching_factor": 447, "compute_label": [447, 454], "promot": [447, 713, 1013, 1046, 1048, 1052], "redistribut": 447, "overwritten": [447, 537, 538, 539, 541, 546, 553, 612, 613, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 677, 679, 684, 686, 687, 688, 689, 691, 962, 964, 1048], "root_": 447, "_cfnode": 447, "cftree": 447, "dummy_leaf_": 447, "subcluster_labels_": 447, "centroids_": [447, 451, 853], "copy_x": [448, 452, 464, 540, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 677, 679, 684, 686, 687, 688, 689, 690, 1037, 1043, 1044], "k_init": [448, 464], "sse": 448, "bisect_mean": 448, "denser": 449, "pooling_func": [450, 1043], "xred": [450, 1051], "cluster_selection_epsilon": 451, "max_cluster_s": 451, "cluster_selection_method": 451, "eom": 451, "store_cent": [451, 1052], "neighbour": [451, 467, 697, 999], "medoid": 451, "medoids_": 451, "zimek": 451, "chaudhuri": 451, "jaskowiak": 451, "malzer": 451, "baum": 451, "hybrid": [451, 654, 1013], "dbscan_clust": 451, "border": [451, 1045], "unclust": 451, "socg2006": 452, "min_bin_freq": [453, 466], "cluster_al": [453, 466], "get_bin_se": 453, "orphan": [453, 466, 1035], "reassignment_ratio": 454, "eec": [454, 646], "tuft": 454, "dscullei": 454, "fastkmean": 454, "55102041": 454, "48979592": 454, "06896552": 454, "set_partial_fit_request": [454, 539, 543, 671, 672, 673, 681, 682, 683, 834, 835, 838, 839, 841, 842, 843, 844, 845, 863, 886], "cluster_method": 455, "predecessor_correct": [455, 461], "unprocess": [455, 593, 594, 596], "heap": 455, "braycurti": [455, 462, 704, 782, 783, 784, 997], "canberra": [455, 462, 704, 782, 783, 784, 997], "chebyshev": [455, 462, 704, 782, 783, 784, 997], "dice": [455, 462, 704, 782, 783, 784, 997], "kulsinski": [455, 462, 704, 782, 783, 784], "rogerstanimoto": [455, 462, 704, 782, 783, 784, 997], "russellrao": [455, 462, 704, 782, 783, 784, 997], "seuclidean": [455, 462, 704, 782, 783, 784, 853, 997, 1043, 1046, 1047], "sokalmichen": [455, 462, 704, 782, 783, 784, 997], "sokalsneath": [455, 462, 704, 782, 783, 784, 997], "yule": [455, 462, 782, 783, 784], "minkowski_dist": [455, 462, 693, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860], "l_p": [455, 462, 693, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860], "upward": [455, 461], "successor": [455, 461, 1010, 1013], "predecessor_": [455, 462], "erich": [455, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049], "gertz": 455, "lernen": 455, "wissen": 455, "daten": [455, 1043, 1044], "analysen": 455, "lwda": 455, "318": 455, "n_best": 456, "n_svd_vec": [456, 458], "mini_batch": [456, 458], "n_row_clust": [456, 458, 518], "n_column_clust": [456, 458, 518], "ncv": [456, 458], "n_oversampl": [456, 458, 546, 549, 943, 1049], "kernel_param": [457, 540, 644, 648], "precomputed_nearest_neighbor": [457, 696], "eigen": [457, 554, 678, 696, 700, 988, 1041, 1044], "dist_matrix": 457, "541": [457, 467], "csc_matrix": [457, 562, 563, 568, 569, 570, 571, 883, 914, 915, 916, 917, 984, 1004, 1010, 1040], "best_n_it": 464, "n_local_tri": 465, "n_seed": 466, "multigrid": 467, "eigendecomposit": [467, 678, 696, 700, 872, 986], "multiscal": 467, "preliminari": 467, "heapq": 468, "topolog": [468, 1013], "n_connected_compon": 468, "n_leav": [468, 914, 915, 916, 917], "transformers_": [469, 1052], "remaining_column": 469, "named_transformers_": 469, "sparse_output_": [469, 556], "output_indices_": [469, 1048], "datatyp": [469, 471, 1042, 1045], "norm1": 469, "norm2": 469, "text_preprocess": 469, "num_preprocess": 469, "x_t": [469, 632, 865], "sum_n_compon": [469, 865], "notimplementederror": [470, 477, 558, 559, 572, 573, 598, 599, 607, 893, 903, 1042, 1052], "y_hat": 470, "90453403": 471, "50755672": 471, "30151134": 471, "print_changed_onli": [473, 904, 1044, 1046, 1047], "pairwise_dist_chunk_s": [473, 904], "enable_cython_pairwise_dist": [473, 904], "skip_parameter_valid": [473, 904, 1051], "cache_s": [473, 904, 908, 909, 910, 911, 912, 1009], "offset_": [474, 568, 682, 852, 910, 1043], "raw_support_": [474, 479], "dist_": [474, 479], "true_cov": [474, 476, 477, 483], "7411": [474, 479, 1041], "2535": [474, 479], "3053": [474, 479], "0813": [474, 479], "correct_covari": [474, 479], "rvd": [474, 479], "covariance_correct": [474, 479], "comp_cov": [474, 475, 476, 477, 478, 479, 480, 481], "get_precis": [474, 475, 476, 477, 478, 479, 480, 481, 537, 539, 546], "getter": [474, 475, 476, 477, 478, 479, 480, 481, 598, 599, 602], "is_inli": [474, 568, 852], "reweight_covari": [474, 479], "rvdriessen": [474, 479], "location_reweight": [474, 479], "covariance_reweight": [474, 479], "support_reweight": [474, 479], "negative_mahal_dist": 474, "7569": 475, "2818": 475, "3928": 475, "0622": [475, 481], "0193": [475, 481], "enet_tol": [476, 477, 483, 1040], "220446049250313e": [476, 477, 483, 655, 656, 659, 660, 661, 687, 688], "graphlasso": [476, 1040, 1043], "costs_": [476, 477, 1051], "dual_gap": [476, 477, 483, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "return_cost": [476, 477, 483], "049": 476, "364": [476, 477, 1036], "038": [476, 477, 863], "n_refin": 477, "graphlassocv": [477, 1037, 1043], "dualiti": [477, 990], "block_siz": [478, 484, 485, 1039], "4406": 478, "1616": 478, "0595": 478, "0075": [478, 546], "rouseeuw1984": 479, "butlerdavi": 479, "butler": [479, 1038, 1046, 1047], "jhun": 479, "1385": 479, "7833": 480, "2431": 480, "3889": 480, "7387": 481, "2536": 481, "4110": 481, "cov_init": [483, 1051], "graph_lasso": [483, 1043], "n_dim": [483, 532, 534, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 1052], "shrinkage_coeffici": 485, "x_loadings_": [487, 488, 489], "y_loadings_": [487, 488, 489], "x_c": [487, 488, 490, 1001], "y_c": [487, 488, 490], "y_reconstruct": [487, 488, 489], "x_scores_": [489, 1047], "y_scores_": [489, 1047], "y_transform": 490, "data_hom": [491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 1042, 1051], "zero_bas": [492, 513, 514], "query_id": [492, 513, 514], "grok": 492, "qid": [492, 513, 514, 1036, 1041], "output_fil": 492, "my_dataset": 492, "download_if_miss": [493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 1042], "n_retri": [493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 1049, 1053], "stopword": [494, 1028], "target_column": [494, 495, 501], "newsgroups_vector": 494, "7532": 494, "horizontal_distance_to_hydrologi": 496, "494021": 497, "slice_": [498, 499, 1050], "195": [498, 499], "unrestrict": 498, "2914": 499, "5748": 499, "aj": [499, 1049], "lama": 499, "aaron": [499, 990, 1038, 1039, 1040, 1045], "eckhart": 499, "guiel": 499, "patterson": [499, 1040], "olivetti_fac": 500, "pathlik": [501, 1051], "read_csv_kwarg": [501, 1051], "timeout": [501, 960, 1049], "412": [501, 990], "ith": [501, 778, 782, 842, 863, 864, 879, 880], "48842": 501, "48841": 501, "46043": 501, "46033": 501, "47985": 501, "1592": 503, "1212": 503, "1624": 503, "620": 503, "microryzomys_minutu": 503, "8333": 503, "3333": 503, "8833": 503, "2667": 503, "9833": 503, "s22": 503, "f4": 503, "data_home_path": 504, "data_filenam": [506, 510], "target_filenam": [506, 510], "container_path": 508, "load_cont": 508, "allowed_extens": 508, "container_fold": 508, "category_1_fold": 508, "file_1": 508, "file_2": 508, "file_42": 508, "category_2_fold": 508, "file_43": 508, "file_44": 508, "image_nam": 511, "first_img_data": 512, "backup": [513, 1035], "instantan": 513, "mycach": [513, 514], "get_data": [513, 514], "mysvmlightfil": 513, "xn": 514, "yn": [514, 995, 996], "q1": 514, "qn": 514, "yi": [514, 996, 1039, 1043, 1044, 1047], "qi": [514, 1047], "triplet": 514, "target_train": 514, "target_test": 514, "svmlight_file_train": 514, "svmlight_file_test": 514, "minval": [516, 518], "maxval": [516, 518], "seventh": [516, 1006], "274": 516, "return_cent": [517, 1046], "basri": 518, "gerstein": 518, "716": 518, "flip_i": 520, "interdepend": 520, "polytop": 520, "guyon": [520, 598, 599, 994], "madelon": 520, "1991": [521, 522, 523], "1229": 522, "12000": 525, "24000": 525, "effective_rank": [526, 529], "tail_strength": [526, 529], "fat": [526, 529], "crawl": [526, 935], "return_ind": 528, "4967": 529, "1382": 529, "6476": 529, "523": 529, "2341": 529, "4694": 529, "5425": 529, "579": 529, "7674": [529, 1042], "4017": 529, "data_transpos": [531, 1049, 1051], "norm_diag": 532, "sparse_format": [532, 1052], "celeux": 533, "el": [533, 1048, 1050, 1051], "anbari": 533, "marin": 533, "frequentist": 533, "marsland": 535, "vuw": 535, "nz": 535, "marslast": 535, "ch6": 535, "code_init": [536, 550], "dict_init": [536, 542, 550, 551], "callback": [536, 542, 544, 550, 551, 855, 960, 1014, 1051], "split_sign": [536, 542, 547], "transform_max_it": [536, 542, 543, 547, 1045], "_fro": [536, 542, 550, 551, 651, 652, 657, 665, 666, 667, 686], "lasso_cd": [536, 542, 547, 553], "error_": [536, 548], "sierra": [536, 542], "icml09": [536, 542], "x_hat": [536, 542, 550, 551], "noise_variance_init": 537, "quartimax": [537, 1047], "loglike_": 537, "barber": 537, "bishop": [537, 539, 546, 745, 801, 990, 995, 1009], "get_covari": [537, 539, 546], "unmixing_matrix": 538, "whitening_": 538, "set_inverse_transform_request": [538, 586, 873, 886], "unsaf": 539, "singular_values_": [539, 546, 549, 1042], "var_": [539, 844, 886, 1048], "miketip": [539, 546], "mppca": [539, 546], "n_samples_seen_": [539, 875, 876, 886, 1043], "batch_size_": 539, "ross": [539, 612, 613, 1010, 1049, 1050], "vision": [539, 762, 763, 986, 990, 992, 1010, 1013, 1018, 1036], "toronto": [539, 649, 862], "dross": 539, "ivt": 539, "rosslimlinyang_ijcv": 539, "karhunen": 539, "loev": 539, "levi": [539, 1042], "lindenbaum": 539, "1371": 539, "1374": 539, "abstain": 539, "holub": 539, "opportun": [539, 1008], "golub": [539, 844, 886], "sigma2": [539, 546], "x_origin": [539, 544, 546, 548, 549, 635, 898, 899], "check_input": [539, 553, 651, 652, 657, 665, 666, 667, 686, 692, 914, 915, 916, 917, 1043], "remove_zero_eig": [540, 1037, 1044], "x_fit_": [540, 648], "eigenvalues_": [540, 1048], "eigenvectors_": [540, 1048], "dual_coef_": [540, 648, 908, 909, 910, 911, 912, 1009, 1039], "x_transformed_fit_": 540, "gamma_": [540, 1051], "nathan": [540, 1043, 1047, 1050], "gunnar": [540, 943], "tropp": [540, 546], "vladimir": [540, 943, 990, 1045, 1049, 1052], "rokhlin": [540, 546, 943], "tygert": [540, 546, 943], "learning_decai": 541, "evaluate_everi": 541, "perp_tol": 541, "mean_change_tol": 541, "max_doc_update_it": 541, "tau_0": 541, "pseudocount": [541, 1043], "exp_dirichlet_component_": 541, "n_batch_iter_": 541, "bound_": 541, "doc_topic_prior_": 541, "topic_word_prior_": 541, "franci": [541, 663, 990, 1041], "onlineldavb": 541, "chong": 541, "00360392": 541, "25499205": 541, "0036211": 541, "64236448": 541, "09541846": 541, "15297572": 541, "00362644": 541, "44412786": 541, "39568399": 541, "003586": 541, "vb": 541, "sub_sampl": 541, "doc_topic_distr": [541, 1042], "fresh_restart": 543, "fresh_restarts_max_it": 543, "_w": [543, 545, 552], "_ratio": [543, 545, 552], "_h": [543, 545, 552], "fresh": [543, 1014, 1045], "reconstruction_err_": [543, 545], "andrzej": [543, 545, 552], "anh": [543, 545, 552], "ieic": [543, 545, 552], "708": [543, 545, 552, 754], "721": [543, 545, 552], "waspa": 543, "ridge_alpha": [544, 548, 1042], "500x500": 546, "lu": [546, 549, 942, 943, 1041, 1042, 1043, 1044, 1051, 1052], "n_samples_": 546, "royal": [546, 632, 882, 894, 1008], "methodologi": [546, 879, 984, 994, 1018], "9924": 546, "30061": 546, "54980": 546, "00755": 546, "99244": 546, "ascontiguousarrai": 546, "u_init": 548, "v_init": 548, "9666": 548, "oversampl": [549, 1035], "indeterminaci": 549, "0157": 549, "0512": 549, "0499": 549, "0479": 549, "0453": 549, "2102": 549, "5981": 549, "5420": 549, "4486": 549, "3288": 549, "method_max_it": [550, 551, 1045], "return_cod": 551, "update_h": 552, "_n_compon": 552, "hal": [552, 663, 762, 763, 992], "copy_cov": 553, "sum_k": [554, 1010], "prior_k": 554, "c_k": 554, "priors_": [554, 555], "scalings_": [554, 555], "xbar_": 554, "reg_param": 555, "scaling_": 555, "colinear": 555, "rotations_": 555, "vt": 555, "n_classes_": [556, 558, 560, 562, 564, 569, 615, 834, 835, 914, 916, 1036, 1045, 1047], "class_prior_": [556, 844], "n_outputs_": [556, 557, 562, 563, 569, 570, 571, 863, 864, 914, 915, 916, 917], "constant_": 557, "dummy_regr": 557, "base_estimator_": [558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 615, 903, 1050], "weaklearn": 558, "dok": [558, 559, 873, 1048], "staged_decision_funct": [558, 564, 566], "staged_scor": [558, 559], "7972": 559, "9771": 559, "estimators_samples_": [560, 561, 562, 563, 568, 569, 570, 571, 1041, 1043, 1046, 1052], "estimators_features_": [560, 561, 568], "oob_decision_function_": [560, 562, 569], "oob_prediction_": [561, 563, 570], "8720": [561, 1043], "min_weight_fraction_leaf": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917, 1010, 1038, 1041, 1042], "min_impurity_decreas": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917, 1010, 1042], "shannon": [562, 569, 914, 916, 991, 1010], "unlimit": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "n_t": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "n_t_r": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "right_impur": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "n_t_l": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "left_impur": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "balanced_subsampl": [562, 569, 1043], "subtre": [562, 563, 564, 565, 569, 570, 914, 915, 916, 917, 1010], "unprun": [562, 563, 569, 570, 914, 915, 916, 917], "x_leav": [562, 563, 564, 565, 569, 570, 571, 914, 915, 916, 917], "n_nodes_ptr": [562, 563, 569, 570, 571], "friedman_ms": [563, 564, 565, 570, 915, 917, 1010, 1051, 1052], "2727": 563, "dummyestim": [564, 565], "eras": [564, 565, 651, 657, 663, 665, 667, 671, 672, 673, 681, 682, 683, 863, 864], "n_trees_per_iteration_": [564, 565, 566, 567], "oob_scores_": [564, 565, 1051], "init_": [564, 565], "max_features_": [564, 565, 602, 914, 915, 916, 917, 1049], "_fit_stag": [564, 565], "crossentropi": 566, "deepest": [566, 567, 1046], "__dataframe__": [566, 567], "no_interact": [566, 567, 1050], "do_early_stopping_": [566, 567], "is_categorical_": [566, 567], "n_trees_per_iter": 566, "max_samples_": 568, "fei": [568, 1000], "ting": [568, 1000, 1043, 1044], "ming": [568, 1000, 1039, 1043, 1044, 1045, 1049], "zhou": [568, 644, 902, 1000, 1043, 1051, 1052], "zhi": [568, 1000], "hua": [568, 1000], "icdm": [568, 1000], "eighth": [568, 1000], "tkdd": 568, "n_left": 568, "32987858": 570, "n_out": 571, "one_hot_encoder_": 571, "moosmann": 571, "trigg": 571, "juri": 571, "random_tre": 571, "x_sparse_embed": 571, "randomtreesembedding_": 571, "final_estimator_": [572, 573], "named_estimators_": [572, 573, 574, 575, 1043, 1045], "named_estim": [572, 573, 574, 575], "parameter_nam": [572, 573, 574, 575], "new_valu": [572, 573, 574, 575], "flatten_transform": [574, 1042], "le_": 574, "eclf1": 574, "array_equ": [574, 1042], "eclf2": 574, "eclf3": 574, "maj": 574, "probabilities_or_label": 574, "n_regressor": 575, "r1": 575, "r3": 575, "er": 575, "current_sklearn_vers": 581, "repr": [582, 1046, 1047, 1049], "linter": 584, "flake8": 584, "spam": [586, 714, 745, 841, 994, 996, 1018], "feature_names_": 586, "xa": 586, "dict_typ": 586, "1048576": [587, 594], "non_neg": [587, 1042], "eleph": 587, "bird": [587, 723, 758, 994], "patch_height": [588, 589, 592], "patch_width": [588, 589, 592], "img_height": 588, "img_width": 588, "pe": 588, "pe_tran": 588, "263758": [588, 592], "image_height": [588, 589, 592], "image_width": [588, 589, 592], "n_channel": [588, 589, 592], "n_patch": [588, 589, 592], "272214": 589, "230": 589, "243": 589, "n_z": 590, "return_a": [590, 591, 960, 1038], "_coo": [590, 591], "shape_img": 590, "image_s": 592, "image_patch": 592, "image_reconstruct": 592, "strip_acc": [593, 594, 596], "nfkd": [593, 594, 596, 1045], "unicodedata": [593, 594, 596], "regexp": [593, 594, 596], "min_n": [593, 594, 596, 1035], "max_n": [593, 594, 596, 1035], "fixed_vocabulary_": [593, 596], "stop_words_": [593, 596], "delattr": [593, 596, 1047], "vectorizer2": 593, "raw_docu": [593, 596], "get_stop_word": [593, 594, 596], "x_inv": [593, 596], "con": [594, 993], "yates2011": 595, "baeza": [595, 734, 1038], "yate": [595, 734], "ribeiro": [595, 734, 1048], "neto": [595, 734, 1053], "addison": [595, 734], "weslei": [595, 734], "mrs2008": 595, "118": 595, "tfid": 595, "22314355": 595, "51082562": 595, "91629073": 595, "_check_stop_list": 596, "k_best": [597, 903, 1007, 1052], "fdr": 597, "fwe": 597, "iff": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 877], "retent": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "n_selected_featur": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "n_original_featur": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "attrgett": [598, 602], "barnhil": [598, 599], "vapnik": [598, 599], "389": [598, 599, 1028], "n_subsets_of_featur": 599, "narrai": 599, "benjamini": [600, 1041, 1042], "hochberg": [600, 1041, 1042], "false_discovery_r": 600, "norm_ord": [602, 1042], "threshold_": [602, 1042], "3252": 602, "8345": 602, "4976": 602, "55249": 602, "half_cal": 602, "half_selector": 602, "partial_fit_param": [602, 834, 835, 838, 839], "unspecifi": [604, 605, 805, 991], "_get_support_mask": 606, "featureselector": 606, "n_features_to_select_": 607, "variances_": 608, "weed": 609, "p_valu": [609, 610, 611], "chi2_stat": 609, "0387": 609, "0116": 609, "f_statist": [610, 611], "force_finit": [611, 614, 732, 789, 994, 1049], "discrete_featur": [612, 613], "nat": [612, 613, 709, 759, 761, 1049], "essenc": [612, 613, 747, 991, 994], "kraskov": [612, 613], "stogbauer": [612, 613], "grassberg": [612, 613], "phy": [612, 613], "kozachenko": [612, 613], "leonenko": [612, 613], "probl": [612, 613], "peredachi": [612, 613], "correlation_coeffici": 614, "fmin_l_bfgs_b": [615, 616], "max_iter_predict": 615, "copy_x_train": [615, 616], "one_vs_rest": [615, 995], "obj_func": [615, 616], "initial_theta": [615, 616], "theta_opt": [615, 616], "func_min": [615, 616], "_posterior_mod": 615, "log_marginal_likelihood_value_": [615, 616], "9866": [615, 624, 627], "83548752": 615, "03228706": 615, "13222543": 615, "79064206": 615, "06525643": 615, "14410151": 615, "clone_kernel": [615, 616, 1045], "n_kernel_param": [615, 616], "log_likelihood_gradi": [615, 616], "x_train_": 616, "y_train_": 616, "3680": [616, 619, 630], "y_cov": 616, "n_samples_x": [616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785], "51292546": 617, "09861229": [617, 1004], "n_samples_i": [617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785], "n_kernel": 617, "k_gradient": [617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630], "k_diag": [617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "requires_vector_input": [617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "3696": 618, "606": [618, 836, 995], "0144": 620, "457": 620, "3894": 620, "3467": 620, "hyperparameter_length_scal": 620, "maxsiz": 622, "customkernel": 623, "mat\u00e9rn": 624, "appr": 624, "8513": 624, "0368": 624, "1117": 624, "8086": [624, 1042], "0693": 624, "1220": 624, "gamma_bound": 625, "pairwise_kernels_kwarg": 625, "additive_chi2": [625, 643, 769, 778], "pairwise_kernel_funct": [625, 648, 778], "9733": [625, 628], "8880": 625, "05663": 625, "05532": 625, "8676": [625, 1042], "07073": 625, "06165": 625, "__mul__": 626, "8354": [627, 1042], "03228": 627, "1322": 627, "7906": [627, 654], "0652": 627, "1441": 627, "8881": 628, "0566": 628, "05518": 628, "8678": 628, "0707": 628, "0614": 628, "dict_kei": 631, "initial_strategi": 632, "imputation_ord": [632, 1045], "skip_complet": 632, "max_valu": [632, 1046, 1047], "keep_empty_featur": [632, 633, 635, 984, 1050], "nullabl": [632, 633, 634, 635, 1046, 1050], "na": [632, 633, 634, 635, 773, 782, 924, 926, 927, 1045, 1046, 1049, 1050, 1051, 1052], "known_val": 632, "Nearness": 632, "arab": 632, "broadcast": 632, "initial_imputer_": 632, "imputation_sequence_": 632, "feat_idx": 632, "neighbor_feat_idx": 632, "n_features_with_missing_": 632, "indicator_": [632, 633, 635], "knp": 632, "stef": [632, 984], "buuren": [632, 984], "karin": [632, 984], "groothui": [632, 984], "oudshoorn": [632, 984], "buck": 632, "1960": [632, 721], "306": 632, "imp_mean": [632, 635], "9584": [632, 1042], "nan_euclidean": [633, 766, 782], "_pairwise_cal": 633, "kwd": [633, 775, 778, 782, 785, 796, 797], "olga": [633, 984], "troyanskaya": [633, 984], "cantor": [633, 984], "gavin": [633, 984], "sherlock": [633, 984], "pat": [633, 984], "botstein": [633, 984], "russ": [633, 984], "altman": [633, 984], "bioinformat": [633, 984], "520": [633, 855, 984, 997], "n_output_featur": 633, "error_on_new": 634, "features_": [634, 984], "n_missing_featur": 634, "x2_tr": 634, "n_features_with_miss": 634, "statistics_": 635, "n_features_missing_ind": 635, "x_imput": 635, "n_features_out": 635, "surface_": 636, "quadcontourset": 636, "quadmesh": 636, "feature_1": [636, 919], "feature_2": 636, "nicer": 636, "pd_result": 637, "target_idx": 637, "decil": [637, 1046], "is_categor": 637, "nonexist": 637, "deciles_vlines_": 637, "vlines_": 637, "deciles_hlines_": 637, "bars_": 637, "heatmaps_": 637, "pdp_lim": 637, "ice_lines_kw": 637, "pd_line_kw": 637, "contour_kw": 637, "disp1": 637, "disp2": 637, "pdp_line_kw": 637, "bar_kw": 637, "heatmap_kw": 637, "seq": 638, "n_values_feature_j": 638, "4666": 639, "2211": 639, "x_min_": 640, "x_max_": 640, "n_threshold": [640, 731, 786, 793], "increasing_": 640, "secondari": [640, 1039], "leeuw": 640, "1977": 640, "nilotp": [640, 642], "chakravarti": [640, 642], "308": 640, "pava": 640, "hornik": 640, "mair": 640, "kruskal": [640, 695, 699, 991], "psychometrica": 640, "iso_reg": 640, "8628": 640, "7256": 640, "isotonicregression0": 640, "increasing_bool": 641, "fisher_transform": 641, "sample_step": 643, "sample_interv": 643, "sample_interval_": [643, 1051], "vedaldi": [643, 986], "zisserman": [643, 986, 994], "chi2sampl": 643, "9499": 643, "component_indices_": [644, 1048], "normalization_": [644, 986], "seeger": [644, 986], "mahdavi": 644, "jin": [644, 1046, 1047], "data_transform": 644, "9987": 644, "fft": 645, "indexhash": 645, "bithash": 645, "indexhash_": 645, "bithash_": 645, "kitchen": [646, 986], "sink": [646, 986], "random_offset_": [646, 647], "random_weights_": [646, 647], "rahimi": [646, 986], "benjamin": [646, 1037, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "recht": [646, 986], "berkelei": [646, 914, 915], "brecht": 646, "rah": 646, "rbf_featur": [646, 986], "skewed": [647, 1042], "secant": 647, "fuxin": 647, "catalin": 647, "ionescu": [647, 986, 1045], "cristian": 647, "sminchisescu": [647, 986], "chi2_featur": 647, "2c": [648, 657, 677, 678, 679, 680, 692, 986], "kevin": [648, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1052], "492": [648, 987, 1026], "493": [648, 906, 987], "alpha_1": [649, 650, 990], "alpha_2": [649, 650, 990], "lambda_1": [649, 650, 990], "lambda_2": [649, 650, 990], "threshold_lambda": 649, "x_offset_": [649, 650, 1047], "x_scale_": [649, 650, 1047], "mackai": [649, 650, 990], "ashra": 649, "salakhutdinov": [649, 855, 997], "utstat": 649, "rsalakhu": 649, "sta4273": 649, "lecture2": 649, "computed_scor": 650, "appendix": [650, 681, 990, 1004], "wipf": [650, 990], "nagarajan": [650, 990], "2_2": [651, 652, 657, 658, 659, 660, 661, 665, 666, 667, 668, 677, 686, 687, 688, 689], "glmnet": [651, 652, 1035], "sparse_coef_": [651, 657, 665, 667, 1035], "dual_gap_": [651, 652, 657, 658, 665, 666, 667, 668, 1048], "max_j": [651, 657], "w_j": [651, 657, 994, 1008], "ext": 651, "83816048": 651, "55968825": 651, "coef_init": [651, 652, 657, 658, 665, 666, 667, 668, 671, 672, 673, 681, 682, 683, 686, 689], "mono": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "_21": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "sum_j": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 990, 994, 999], "alpha_min": [651, 652, 655, 657, 658, 659, 661, 665, 666, 667, 668, 686, 687, 688, 689], "alpha_max": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "ndim": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 926, 927], "estimated_coef": [651, 652, 657, 665, 666, 667, 686, 687, 688], "l1_ratio_": [652, 664, 666], "n_l1_ratio": [652, 664, 666, 1038], "398": [652, 1028], "raphson": [653, 674, 685], "g_j": [653, 674, 685], "896": 653, "795": 653, "pg_i": 654, "scale_": [654, 875, 876, 884, 886, 896, 1004, 1040], "outliers_": 654, "elvezio": [654, 990], "ronchetti": [654, 990], "concomit": [654, 990], "owen": [654, 1044, 1045], "statweb": [654, 687, 688], "hhu": [654, 1044], "806": 654, "7200": 654, "4923": 654, "1698": 654, "0106": 654, "9221": 654, "0226": 654, "fit_path": [655, 659, 660, 661, 687, 688], "coef_path_": [655, 656, 659, 660, 990], "active_": [655, 656, 659, 660], "1111": [655, 661], "max_n_alpha": [656, 660], "n_cv_alpha": [656, 660], "cv_alpha": [656, 660], "9996": 656, "2961": 656, "3996": 656, "2_f": 657, "_11": 657, "4951": 658, "2_fro": [658, 667, 668, 689], "coef_path": [658, 668, 689], "46874778": [658, 668, 689], "2159048": [658, 668, 689], "4425765": [658, 668, 689], "23689075": [658, 668, 689], "coef_path_lar": [658, 668, 689], "coef_path_continu": [658, 668, 689], "interp1d": [658, 668, 689], "46915237": [658, 668, 689], "23668876": [658, 668, 689], "congruenc": [659, 660, 661, 687, 688], "fragil": 660, "3972": 660, "2222": 661, "rank_": 662, "singular_": 662, "primal": [663, 664, 682, 906, 907, 1008, 1009], "synthetic_feature_weight": [663, 664], "ciyou": 663, "byrd": 663, "jorg": [663, 1038, 1047, 1049], "noced": 663, "lui": [663, 1036, 1038, 1039, 1043, 1052], "iem": 663, "lbfgsb": 663, "schmidt": [663, 990, 1038], "le": [663, 874, 985, 990, 997, 1005, 1007, 1043, 1047, 1048, 1052], "roux": [663, 990, 1007], "00860051": 663, "defazio": [663, 990], "lacost": [663, 990], "hsiang": [663, 1039], "fu": [663, 1039], "fang": [663, 1042, 1043], "lan": [663, 1050, 1051], "chih": [663, 1040], "jen": [663, 1043], "maxent_du": 663, "cs_": 664, "l1_ratios_": 664, "coefs_paths_": [664, 1045], "coefs_path": 664, "n_l1_ratios_": 664, "score_param": [664, 1052], "w_ij": 665, "eps_": [665, 667], "45663524": 665, "45612256": 665, "0872422": 665, "fro_2": [666, 668], "52875032": 666, "46958558": 666, "00166409": 666, "60809415": 667, "94592424": 667, "41888636": 667, "87382323": 667, "9994": 668, "5713": 668, "153": 668, "7971": 668, "9015": [668, 1043], "n_nonzero_coefs_": [669, 670, 1053], "mallat": [669, 690, 691, 990], "3397": [669, 690, 691], "3415": [669, 690, 691], "papier": [669, 690, 691], "mallatpursuit93": [669, 690, 691], "rubinstein": [669, 690, 691], "zibulevski": [669, 690, 691], "elad": [669, 690, 691], "technion": [669, 690, 691, 990], "ronrubin": [669, 690, 691, 990], "ksvd": [669, 690, 691, 990], "9991": [669, 670, 1043], "3854": [669, 670], "previous_loss": [671, 672, 673, 682], "pa": [671, 672, 903, 990, 994, 1007], "preset": [671, 673, 681, 998], "t_": [671, 672, 673, 681, 682, 683, 863, 864, 1008], "loss_function_": [671, 673, 681, 682, 1052], "volume7": [671, 672], "crammer06a": [671, 672], "crammer": [671, 672, 739, 990, 994, 1009], "dekel": [671, 672, 990], "keshat": [671, 672, 990], "shalev": [671, 672, 990, 1008], "shwartz": [671, 672, 990, 1008], "26642044": 671, "45070924": 671, "67251877": 671, "64185414": 671, "84127814": 671, "intercept_init": [671, 672, 673, 681, 683], "y_all": [671, 673, 681, 834, 835, 863], "epsilon_insensit": [672, 681, 683, 907, 990, 1008], "squared_epsilon_insensit": [672, 681, 683, 907, 990, 1041], "48736655": 672, "18818427": 672, "59122734": 672, "94731329": 672, "02306214": 672, "eta0": [673, 681, 682, 683, 1008], "lossfunct": [673, 681, 682, 1044], "therein": 673, "990": [674, 994], "088": [674, 1002], "676": 674, "solver_opt": 675, "ipm": 675, "linprog": [675, 990], "is_data_valid": [676, 990], "is_model_valid": [676, 990], "max_trial": [676, 990], "max_skip": 676, "stop_n_inli": [676, 990], "stop_scor": [676, 990], "stop_prob": 676, "mad": [676, 1041], "costlier": 676, "n_trials_": 676, "n_skips_no_inliers_": 676, "n_skips_invalid_data_": 676, "n_skips_invalid_model_": 676, "sri": [676, 990, 1042, 1043], "bmva": 676, "bmvc": [676, 990], "paper355": 676, "9885": 676, "9417": 676, "15000": [677, 692, 863, 864], "btol": [677, 679], "gcv_mode": [678, 1037], "store_cv_valu": [678, 680, 1043, 1046], "alpha_per_target": [678, 1047], "cv_values_": [678, 680], "5166": 678, "gcv": [678, 680], "9595": 679, "9630": 680, "power_t": [681, 682, 683, 863, 864, 1008], "best_loss": [681, 683], "leon": [681, 682, 683, 1035], "bottou": [681, 682, 683, 998, 1008], "pow": [681, 682, 683, 863, 864], "dl": 681, "775047": 681, "775151": 681, "justif": 681, "volume2": 681, "zhang02c": 681, "offset_init": 682, "unshifft": 682, "n_subsampl": [684, 932], "breakdown_": 684, "n_subpopulation_": 684, "xin": [684, 990, 1043], "dang": [684, 990, 1053], "hanxiang": [684, 990], "peng": [684, 990, 1041, 1042, 1043, 1045, 1047], "xueqin": [684, 990], "hepe": [684, 990], "olemiss": 684, "xdang": 684, "mtse": 684, "9884": 684, "5871": 684, "coeff": 685, "839": 685, "599": 685, "copy_gram": [687, 688, 691], "return_path": [687, 688, 690, 691], "tib": [687, 688], "xgamma": 690, "norms_squar": 691, "copy_xi": 691, "return_intercept": [692, 1044], "_preprocess_data": 692, "path_method": [693, 991], "neighbors_algorithm": [693, 694], "arnoldi": [693, 694, 698], "fw": 693, "warshal": [693, 991], "kernel_pca_": 693, "nbrs_": [693, 694], "dist_matrix_": 693, "tenenbaum": [693, 991], "reconstruction_error": 693, "frobenius_norm": 693, "d_fit": 693, "x_fit": 693, "n_queri": [693, 848, 849, 850, 852, 854, 856, 857, 858], "hessian_tol": [694, 698], "modified_tol": [694, 698], "reconstruction_error_": 694, "rowei": [694, 698, 855, 991, 997], "saul": [694, 698, 991, 1042, 1043, 1045], "2323": [694, 698, 991], "donoho": [694, 698, 991], "grime": [694, 698, 991], "natl": [694, 698, 991], "acad": [694, 698, 991], "5591": [694, 698, 991], "mlle": [694, 698, 991], "zha": [694, 698, 991], "shanghai": [694, 698, 991], "univ": [694, 698, 991], "406": [694, 698, 991], "immers": [695, 699], "nonmetr": [695, 699, 991], "stress": [695, 699, 991, 1050], "stress_": 695, "dispar": [695, 699, 991], "dissimilarity_matrix_": 695, "psychometrika": [695, 699, 991], "1964": [695, 699, 882, 894, 991], "borg": [695, 699, 991], "groenen": [695, 699, 991], "affinity_matrix": [696, 700], "n_neighbors_": [696, 852], "early_exagger": 697, "min_grad_norm": [697, 1041], "der": [697, 701, 991, 1038, 1039, 1043], "maaten": [697, 701, 991], "bhtsne": [697, 1042], "opentsn": 697, "abort": 697, "pdist": [697, 782, 785], "pairwise_distance_funct": [697, 701, 782, 785, 997], "barn": [697, 991, 1040, 1042, 1045], "hut": [697, 991, 1040, 1042, 1045], "nlogn": 697, "kl_divergence_": [697, 1042], "learning_rate_": [697, 864], "hinton": [697, 855, 862, 863, 864, 991, 997, 998, 999], "2579": 697, "2605": 697, "lvdmaaten": [697, 1042], "oct": [697, 773, 991, 997], "3221": [697, 991], "3245": [697, 991], "jmlr_2014": 697, "belkina": [697, 991], "ciccolella": [697, 991], "anno": [697, 991], "halpert": [697, 991], "spidlen": [697, 991], "snyder": [697, 991], "cappion": [697, 991], "kobak": [697, 1048], "beren": 697, "transcriptom": 697, "guttman": 699, "mds_result": 699, "norm_laplacian": 700, "drop_first": 700, "nk": 701, "2n": [701, 986, 998], "3k": 701, "jarkko": 701, "venna": 701, "samuel": [701, 1018, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "kaski": 701, "icann": 701, "verlag": 701, "485": 701, "491": 701, "twelfth": 701, "pmlr": 701, "384": [701, 907], "391": 701, "im_": 702, "axesimag": 702, "text_": 702, "include_valu": 702, "values_format": [702, 1045], "im_kw": [702, 1049], "text_kw": [702, 1050], "get_metr": 704, "euclideandist": 704, "manhattandist": 704, "chebyshevdist": 704, "minkowskidist": [704, 1048], "seuclideandist": 704, "mahalanobisdist": 704, "haversinedist": 704, "arcsin": [704, 768], "hammingdist": 704, "n_unequ": 704, "n_tot": 704, "canberradist": 704, "braycurtisdist": 704, "abbrevi": 704, "ntt": 704, "ntf": 704, "nft": 704, "nff": 704, "nneq": 704, "jaccarddist": 704, "matchingdist": 704, "dicedist": 704, "kulsinskidist": [704, 1051], "rogerstanimotodist": 704, "russellraodist": 704, "sokalmichenerdist": 704, "sokalsneathdist": 704, "pyfunc": [704, 997], "pyfuncdist": 704, "metric_obj": 704, "chance_level_": [705, 707, 1051], "drop_intermedi": [705, 707, 786, 793, 1051], "errors_lines_": 706, "with_error": 706, "scatter_": 706, "imperfectli": [708, 738, 994], "label_tru": [709, 722, 741, 759, 761, 799], "upperlimit": 709, "expected_ri": 710, "discord": [710, 1017], "hubert1985": 710, "1007": 710, "2fbf01908075": 710, "steinley2004": 710, "wk": 710, "rand_index": 710, "adjusted_rand_index": 710, "chacon": 710, "chac\u00f3n": 710, "rastrojo": 710, "balanced_accuraci": [713, 994, 1043], "brodersen": 713, "ong": 713, "stephan": [713, 1038, 1044, 1045, 1047], "buhmann": 713, "20th": 713, "3121": 713, "kelleh": [713, 994], "aoif": [713, 994], "arci": [713, 994], "y_true_categor": [714, 994], "allow_non": 716, "thrown": [716, 1044, 1045], "tn": [717, 723, 994], "negative_class": 717, "zebra": 717, "output_dict": [718, 1043, 1047], "n_classes_tru": [719, 759], "n_classes_pr": [719, 759], "p_o": 721, "p_e": 721, "artstein": 721, "poesio": 721, "linguist": [721, 903, 1007], "555": 721, "596": 721, "neutral": 721, "6875": 721, "label_pr": [722, 740, 741, 759, 761, 799], "ant": [723, 758, 994], "a_row": 724, "a_column": 724, "b_row": 724, "b_column": 724, "tsoumaka": [725, 738, 744, 994], "kataki": [725, 738, 744, 994], "vlahava": [725, 744, 994], "handbook": [725, 744, 994], "667": [725, 744, 994], "685": [725, 744, 994], "raw_valu": [726, 727, 732, 749, 750, 752, 754, 755, 757, 789, 794, 795, 994, 1043, 1046], "wainwright": [726, 727, 728], "su": [726, 727, 728], "statlearnspars": [726, 727, 728], "691": 726, "8125": 726, "57142857": 726, "d2": 727, "koenker": [727, 990], "roger": [727, 1042, 1043, 1047], "jos\u00e9": [727, 1038, 1048], "487": 728, "630": 728, "farther": 729, "log_bas": 730, "ignore_ti": [730, 760], "ndcg": [730, 760, 994, 1042], "sharper": 730, "discounted_cumulative_gain": 730, "dcg": [730, 760, 994, 1042], "jarvelin": [730, 760, 994], "kekalainen": [730, 760, 994], "446": [730, 760, 994], "colt": [730, 760, 994], "mcsherri": [730, 760, 994], "najork": [730, 760, 994], "european": [730, 760, 994], "421": [730, 760, 994], "groud": [730, 760], "true_relev": [730, 760], "imperfect": [732, 789, 994, 1037], "variance_weight": [732, 789, 994], "983": 732, "n_unique_label": [733, 734, 742, 787, 788, 791, 958], "y_true_empti": 733, "y_pred_empti": [733, 734], "66666667": [733, 786, 856, 1004], "328": 734, "fowlk": [735, 1041], "mallow": [735, 1041], "all_scor": 737, "forgiv": 738, "upperbound": 738, "grigorio": 738, "ioanni": 738, "wareh": 738, "septemb": [738, 994, 1035, 1038, 1041, 1043, 1048, 1051], "pred_decis": [739, 994, 1048], "disagre": [739, 1001], "kobi": 739, "265": [739, 841, 845, 996], "AND": 739, "denero": 739, "v_measur": [740, 799], "6666": [742, 994, 1041], "5833": [742, 994], "lrap": [743, 994], "416": [743, 994], "21616": 745, "needs_proba": [746, 1044, 1052], "needs_threshold": [746, 1052], "ftwo_scor": [746, 994], "baldi": 747, "brunak": 747, "chauvin": 747, "andersen": [747, 1049], "nielsen": [747, 1043], "gorodkin": 747, "jurman": 747, "riccadonna": 747, "furlanello": 747, "cen": 747, "3273": 750, "5515": 750, "6198": 750, "112589990684262": 750, "0568": 751, "4260": [753, 756], "41666667": 754, "825": 754, "msle": [755, 994], "rmsle": [755, 994], "00462428": 755, "08377444": 755, "samplewis": [758, 994], "mcm": [758, 994], "mcm_": 758, "multi_confus": 758, "056": [759, 1002], "normalized_discounted_cumulative_gain": 760, "marszalek": [762, 763, 992], "lazebnik": [762, 763, 992], "schmid": [762, 763, 992], "ouvert": [762, 763, 992], "00171412": [762, 763, 992], "dense_output": [765, 771, 899, 944, 1043], "y_norm_squar": 767, "x_norm_squar": [767, 1040, 1052], "41421356": [767, 773, 997], "lon": 768, "ezeiza": 768, "airport": 768, "bueno": 768, "argentina": 768, "gaull": 768, "bsa": 768, "83333": 768, "5166646": 768, "0083899664": 768, "53844117956": 768, "bsas_in_radian": 768, "paris_in_radian": 768, "6371000": 768, "kilomet": 768, "11099": 768, "54035582": 768, "sq": 773, "dixon": [773, 1045, 1046], "cybernet": 773, "ieeexplor": 773, "4310090": 773, "filter_param": 778, "jth": [778, 782], "force_all_finit": [782, 924, 926, 927, 1046, 1049], "oversubscript": [782, 962, 1049], "metric_kwarg": [783, 784], "reduce_func": [785, 1046], "d_chunk": 785, "sought": 785, "neigh": [785, 848, 849, 850, 852, 854, 856, 857, 858], "gen": 785, "probas_pr": [786, 1053], "warn_for": 787, "shantanu": 787, "godbol": 787, "sunita": 787, "sarawagi": 787, "pig": 787, "948": [789, 994], "max_fpr": [792, 994, 1043], "provost": [792, 994], "ceder": [792, 994], "stern": [792, 994], "fawcett": [792, 793, 994], "generalis": [792, 994, 1014], "612": 794, "822": 794, "n_samples_a": [796, 797], "favour": [796, 991, 993, 1044], "mean_prior": 801, "degrees_of_freedom_prior": 801, "verbose_interv": [801, 802], "wishart": 801, "emipr": 801, "precisions_": [801, 802], "precisions_cholesky_": [801, 802, 1049], "converged_": [801, 802, 1052], "lower_bound_": [801, 802, 1043], "weight_concentration_prior_": 801, "weight_concentration_": 801, "mean_precision_prior_": 801, "mean_precision_": 801, "mean_prior_": 801, "degrees_of_freedom_prior_": 801, "degrees_of_freedom_": 801, "covariance_prior_": 801, "hagai": 801, "attia": 801, "bgm": 801, "n_dimens": [801, 802], "log_prob": [801, 802], "weights_init": 802, "precisions_init": [802, 1049, 1051], "gm": 802, "pre_dispatch": [803, 809, 817, 825, 827, 828, 829, 830, 833, 960, 1038], "error_scor": [803, 806, 807, 809, 817, 825, 828, 829, 830, 833, 983, 1039, 1043, 1047, 1050], "explos": [803, 817, 827, 828, 829], "param_kernel": [803, 817], "param_degre": 803, "split0_test_scor": [803, 817, 1041], "rank_t": 803, "split1_test_scor": [803, 817], "split0_train_scor": [803, 817, 1041], "split1_train_scor": [803, 817], "mean_train_scor": [803, 817, 1041], "std_train_scor": [803, 817, 1041], "split0_test_precis": [803, 817], "mean_train_precis": [803, 817], "best_estim": [803, 806, 807, 817], "scorer_": [803, 806, 807, 817], "n_splits_": [803, 806, 807, 817], "refit_time_": [803, 806, 807, 817, 1043], "multimetric_": [803, 806, 807, 817], "split2_test_scor": 803, "num_sampl": [803, 817, 1050], "versionad": [803, 806, 807, 817], "stratif": [804, 805, 811, 812, 821, 822, 823, 965, 1044], "group_kfold": 804, "set_split_request": [804, 805, 810, 812, 821], "aggressive_elimin": [806, 807, 983], "r0": [806, 807], "replai": [806, 807], "n_remaining_candidates_": [806, 807], "n_candid": [806, 807, 983], "max_resources_": [806, 807], "min_resources_": [806, 807], "n_required_iterations_": [806, 807], "n_possible_iterations_": [806, 807], "exceed": [806, 807, 1041], "n_unique_tick": [809, 830], "n_tick": [809, 825, 830, 833], "neg_": [809, 825, 1041], "errorbar_": [809, 825], "errorbarcontain": [809, 825], "fill_between_": [809, 825], "polycollect": [809, 825], "exploit_incremental_learn": [809, 830], "log_scal": [809, 1051], "fill_between_kw": [809, 825], "errorbar_kw": [809, 825], "predispatch": [809, 825, 830, 833], "combinator": 813, "lpo": 813, "param_list": 815, "rounded_list": 815, "89856": 815, "923223": 815, "878964": 815, "038159": 815, "2652124": 818, "rskf": 819, "36851234": 819, "sizeabl": [820, 823], "sad": [821, 822], "sss": 823, "logistic_regress": [825, 833], "n_valu": [825, 833, 1043], "checked_cv": 826, "3315057": [828, 829], "08022103": [828, 829], "03531816": [828, 829], "test_r2": 829, "test_auc": 829, "train_r2": 829, "train_auc": 829, "3635": 829, "3573": 829, "6114": 829, "28009951": 829, "3908844": 829, "22784907": 829, "train_sizes_ab": 830, "train_size_ab": 830, "cv_train_scor": 830, "cv_test_scor": 830, "permutation_scor": 831, "pairwise_indices_": 834, "label_binarizer_": 835, "multilabel_": [835, 1040], "code_book_": 836, "bakiri": [836, 995], "pict": [836, 995], "chain_method": [837, 1053], "order_": [837, 840], "chain_method_": 837, "jess": [837, 995, 1048], "pfahring": [837, 995], "geoff": [837, 995], "holm": [837, 995, 1052], "eib": [837, 995], "8387": 837, "9431": 837, "4576": 837, "8878": 837, "3684": 837, "2640": 837, "0321": 837, "9935": 837, "0626": 837, "y_log_prob": 837, "force_alpha": [841, 842, 843, 845, 1050], "lidston": [841, 842, 843, 845, 996], "class_count_": [841, 842, 843, 844, 845], "class_log_prior_": [841, 842, 843, 845], "feature_count_": [841, 843, 845], "feature_log_prob_": [841, 842, 843, 845], "schuetz": [841, 845], "htmledit": [841, 845, 992], "mccallum": [841, 996], "nigam": [841, 996], "metsi": [841, 996], "androutsopoulo": [841, 996], "palioura": [841, 996], "cea": [841, 996], "predict_joint_log_proba": [841, 842, 843, 844, 845, 1050], "min_categori": [842, 1047], "category_count_": 842, "n_categories_": 842, "mirror": [843, 983], "mahout": 843, "weka": 843, "feature_all_": 843, "shih": [843, 996], "teevan": [843, 996], "karger": [843, 996], "616": [843, 996, 1004], "jrenni": 843, "icml03": 843, "var_smooth": [844, 1043], "stan": [844, 1052], "levequ": [844, 886], "cstr": 844, "epsilon_": 844, "theta_": [844, 996], "clf_pf": 844, "distancemetric64": [846, 847], "valid_metr": [846, 847, 997, 1051], "19662693": [846, 847], "29473397": [846, 847], "tree_copi": [846, 847], "query_radiu": [846, 847], "count_onli": [846, 847], "kernel_dens": [846, 847], "94114649": [846, 847], "83281226": [846, 847], "2071716": [846, 847], "two_point_correl": [846, 847], "get_arrai": [846, 847], "get_n_cal": [846, 847], "n_call": [846, 847], "get_tree_stat": [846, 847], "tree_stat": [846, 847], "breadth_first": [846, 847, 851], "return_log": [846, 847], "k_true": [846, 847], "k_ret": [846, 847], "breadth": [846, 847, 851, 1018, 1037], "dualtre": [846, 847], "sort_result": [846, 847, 854, 856, 857, 858, 1047], "radii": [846, 847], "reset_n_cal": [846, 847], "effective_metric_": [848, 849, 850, 852, 854, 856, 857, 858, 997], "callbl": 848, "effective_metric_params_": [848, 849, 850, 852, 854, 856, 857, 858], "outputs_2d_": [848, 856, 1045], "nearest_neighbor_algorithm": [848, 856, 857], "333": 848, "n_index": [848, 849, 850, 852, 854, 856, 857], "neigh_dist": [848, 849, 850, 852, 854, 856, 857, 858], "neigh_ind": [848, 849, 850, 852, 854, 856, 857, 858], "nearest_neighbors_algorithm": [849, 854], "x_dist_graph": 850, "silverman": [851, 1050], "binarytre": [851, 1039, 1043, 1047], "bandwidth_": 851, "log_dens": 851, "52955942": 851, "51462041": 851, "60244657": 851, "logprob": 851, "negative_outlier_factor": 852, "9821": 852, "0370": 852, "3697": 852, "shifted_opposite_lof_scor": 852, "opposite_lof_scor": 852, "wminkowski": [853, 1047, 1049], "narasimhan": 853, "chu": [853, 1051], "shrunken": [853, 1035], "6567": 853, "6572": 853, "nbr": [854, 997], "neighborsclassifi": [854, 856, 857, 858, 1035], "n_features_a": 855, "n_features_b": 855, "goldberg": [855, 997], "neighbourhood": [855, 997], "ncanip": 855, "neighbourhood_components_analysi": 855, "961904": 855, "outlier_label": [856, 1045], "outlier_label_": 856, "33333333": [856, 1004], "x_cluster": 858, "warn_when_not_sort": 861, "sml": [862, 999], "pcd": [862, 999], "sweep": 862, "gibb": [862, 999, 1013], "intercept_hidden_": 862, "intercept_visible_": 862, "h_samples_": 862, "osindero": [862, 999], "teh": [862, 999], "1527": 862, "1554": 862, "absp": 862, "fastnc": 862, "tieleman": [862, 999], "v_new": 862, "pseudo_likelihood": 862, "relu": [863, 864], "beta_1": [863, 864], "beta_2": [863, 864], "max_fun": [863, 864, 1045], "n_layer": [863, 864], "neuron": [863, 864, 992, 998], "tan": [863, 864, 998, 1042], "rectifi": [863, 864], "kingma": [863, 864, 998], "diederik": [863, 864, 998, 1050], "jimmi": [863, 864, 998, 1041, 1043], "effective_learning_r": [863, 864], "best_loss_": [863, 864, 1050], "best_validation_score_": [863, 864, 1050], "validation_scores_": [863, 864, 1050], "intercepts_": [863, 864, 998], "n_layers_": [863, 864], "out_activation_": [863, 864], "geoffrei": [863, 864, 998, 1046, 1047, 1048, 1049, 1051], "connectionist": [863, 864], "glorot": [863, 864], "xavier": [863, 864, 1043, 1044, 1045, 1047, 1048], "yoshua": [863, 864, 1007], "feedforward": [863, 864], "kaim": [863, 864], "delv": [863, 864], "imagenet": [863, 864], "log_y_prob": 863, "named_transform": [865, 1050], "svd__n_compon": 865, "transform_list": 865, "s__p": 866, "n_transformed_featur": 866, "y_log_proba": 866, "analyst": 869, "x_tr": [869, 875, 878, 879, 880, 884, 886, 889, 891, 892, 896, 897], "accept_spars": [870, 926, 927, 1042, 1052], "inv_kw_arg": 870, "pickleabl": [870, 1041], "6931": 870, "3862": 870, "n_bins_": 871, "regener": 871, "xinv": 871, "tild": [872, 1002, 1004], "k_fit_rows_": 872, "k_fit_all_": 872, "1299": [872, 1004], "1319": [872, 1004], "n_samples1": 872, "n_samples2": 872, "k_new": 872, "neg_label": [873, 890], "y_type_": 873, "sparse_input_": 873, "lb": [873, 1005], "tokyo": [874, 1005], "amsterdam": [874, 1005], "max_abs_": 875, "x_std": [876, 892, 1004], "data_min_": [876, 1040], "data_max_": [876, 1040], "data_range_": [876, 1040], "unwieldi": 877, "fi": 877, "comedi": 877, "y_indic": 877, "yt": 877, "ands": 877, "feature_name_combin": [879, 1051], "categories_": [879, 880, 887, 1004, 1043, 1050], "unregular": [879, 902, 1026, 1044], "intact": [879, 1028], "infrequ": [879, 880, 887, 994, 1035, 1049, 1050, 1051], "infrequent_if_exist": [879, 1004], "x_6": 879, "x_7": 879, "drop_idx_": [879, 1046, 1050], "drop_idx": 879, "gender_femal": 879, "gender_mal": 879, "group_1": 879, "group_2": 879, "group_3": 879, "drop_enc": [879, 1004], "drop_binary_enc": 879, "custom_combin": 879, "custom_fnames_enc": 879, "x0_str_femal": 879, "x0_str_male": 879, "x1_int_1": 879, "x1_int_2": 879, "x1_int_3": 879, "oh": [879, 1045], "infrequent_sklearn": [879, 1004], "n_encoded_featur": [879, 880], "_csr": 879, "onward": [880, 1039], "bpo": 880, "43475": 880, "lenient": [880, 1014, 1052], "min_degre": [881, 1048], "max_degre": [881, 1048], "powers_": 881, "n_output_features_": 881, "nystrom": [881, 1044, 1045], "hugh": [881, 1037, 1048], "biometrika": [882, 894], "954": [882, 894], "959": [882, 894], "386": 882, "707": [882, 894], "ignore_implicit_zero": [883, 895], "landmark": [883, 895, 1004], "n_quantiles_": 883, "quantiles_": [883, 1004, 1045], "references_": 883, "with_cent": [884, 896], "with_scal": [884, 896], "unit_vari": [884, 896, 1047], "quartil": 884, "q_min": [884, 896], "q_max": [884, 896], "center_": 884, "interquartile_rang": 884, "bspline": 885, "n_features_out_": 885, "with_std": [886, 897, 1004, 1043], "n_samples_seen": 886, "5a": 886, "randal": [886, 1039, 1049], "242": [886, 1035], "mic": [887, 1004], "target_mean_": [887, 1004], "target_type_": 887, "f0_c0": 887, "f0_c1": 887, "f0_c2": 887, "f1_c0": 887, "f1_c1": 887, "f1_c2": 887, "micci": [887, 1004], "barreca": [887, 1004], "newsl": [887, 1004], "enc_auto": 887, "enc_high_smooth": 887, "enc_low_smooth": 887, "type_of_target_": 887, "ahead": 890, "return_norm": [893, 1042], "compute_inverse_compon": [898, 899, 1006], "inverse_components_": [898, 899, 1006, 1049], "2759": [898, 899], "afor": [898, 899], "baserandomproject": [898, 899], "ping": [899, 1006, 1041, 1042], "density_": 899, "church": [899, 1006], "kdd06_rp": 899, "cgi": 899, "uoa": 899, "gr": 899, "opta": 899, "0182": 899, "e2": [900, 990], "93lindenstrauss_lemma": 900, "sanjoi": [900, 1006], "anupam": [900, 1006, 1050], "gupta": [900, 1006, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052], "elementari": [900, 1006], "11841": [900, 1006], "1112658": [900, 1006], "7894": [900, 1006], "9868": [900, 1006], "steadi": [901, 902], "xiaojin": 901, "zoubin": 901, "ghahramani": 901, "cmu": 901, "cald": 901, "carnegi": 901, "mellon": 901, "jerryzhu": 901, "label_prop_model": [901, 902], "clamp": [902, 1007], "dengyong": 902, "bousquet": 902, "navin": 902, "lal": 902, "schoelkopf": 902, "termination_condition_": 903, "no_chang": 903, "all_label": 903, "33rd": [903, 1007], "acl": [903, 1007, 1008], "stroudsburg": [903, 1007], "crammer_sing": [906, 995, 1009, 1035], "seldom": 906, "w_x_1": [906, 907], "w_x_n": [906, 907], "w_intercept": [906, 907], "readonli": [906, 907, 1048, 1050, 1051], "raw_coef_": [906, 907], "smo": [906, 907], "526": 906, "1693": 906, "unsur": 907, "582": 907, "522": 907, "class_weight_": [908, 911, 1050], "n_sv": [908, 909, 910, 911, 912, 1009, 1045], "fit_status_": [908, 909, 910, 911, 912], "n_support_": [908, 909, 910, 911, 912, 1009, 1045], "proba_": [908, 911, 1046], "probb_": [908, 911, 1046], "shape_fit_": [908, 909, 910, 911, 912], "n_dimensions_of_x": [908, 909, 910, 911, 912], "7798": 910, "0547": 910, "0556": 910, "0561": 910, "7332": 910, "unshift": 910, "impract": 911, "tube": [912, 1009], "0044": 913, "_tree": [914, 915, 916, 917, 1036, 1038], "decision_tree_learn": [914, 915, 1010], "olshen": [914, 915, 1010], "wadsworth": [914, 915, 1010], "belmont": [914, 915, 1010], "cutler": [914, 915], "cc_home": [914, 915], "htm": [914, 915], "ccp_path": [914, 915, 916, 917], "get_depth": [914, 915, 916, 917, 1044], "get_n_leav": [914, 915, 916, 917, 1044], "set_predict_proba_request": [914, 916], "extra_tre": [916, 917], "8947": 916, "decision_tre": [918, 919, 920, 1010], "out_fil": [918, 1010], "leaves_parallel": 918, "special_charact": [918, 1010], "fontnam": [918, 1048], "helvetica": [918, 920], "graphviz": [918, 1010], "postscript": 918, "tpng": 918, "paint": [918, 920], "dot_data": [918, 1010], "digraph": 918, "show_weight": 919, "feature_0": 919, "unrepresent": 921, "keyerror": [921, 1045], "popitem": 921, "lifo": 921, "min_val": [923, 930], "input_nam": [925, 927, 957, 1049], "accept_large_spars": [926, 927, 1043], "ensure_2d": [926, 927], "allow_nd": [926, 927], "ensure_min_sampl": [926, 927], "ensure_min_featur": [926, 927], "y_numer": 926, "bsr": [926, 927, 1048], "x_convert": 926, "y_convert": 926, "array_convert": 927, "x_check": 927, "0x": 929, "max_val": 930, "include_boundari": [930, 1049], "y_org": 931, "class_weight_vect": 931, "king": 931, "zen": 931, "sample_weight_vect": 932, "parenthes": 933, "type_filt": 935, "_bay": 935, "_weight_boost": 935, "_bag": 935, "generate_onli": [937, 1045], "checks_gener": 937, "test_check_estim": 938, "check_estimators_fit_returns_self": 938, "_estimator_html_repr": 939, "array_lik": 941, "logdet": 941, "slogdet": 941, "6375861597263857": 941, "flip_sign": 943, "svd_lapack_driv": 943, "gesdd": 943, "p5": 943, "transposit": 943, "gesvd": 943, "conquer": 943, "unitari": 943, "vh": 943, "dot_product": 944, "deweight": 945, "min_batch_s": 946, "path_length": 948, "sliceabl": 949, "3x1": 949, "methodmetadatarequest": 950, "routemappingpair": 951, "routing_info": 951, "from_str": [951, 952], "methodpair": 952, "_obj": 954, "_method": 954, "any_method": 954, "helloifeven": 955, "_x_is_even": 955, "say_hello": 955, "3565178": 959, "temp_fold": 960, "max_nbyt": 960, "1m": 960, "mmap_mod": 960, "delayed_funct": 960, "dispatch_next": 960, "dispatch_one_batch": 960, "unprotect": 960, "prefetch": 960, "print_progress": 960, "inner_max_num_thread": 962, "backend_param": 962, "parallel_config": 962, "dask": [962, 1014, 1043], "localclust": 962, "workload": [962, 1013], "register_rai": 962, "backend_nam": 962, "threadpool": 962, "effective_n_job": 962, "tracking_select": 963, "reservoir_sampl": 963, "reservoir": 963, "make_default": 964, "parallelbackendbas": 964, "resampled_arrai": 965, "3x2": [965, 968], "shuffled_arrai": 968, "last_mean": 969, "last_var": 969, "last_n": 969, "todens": [969, 970, 971, 972, 973, 974, 975], "return_sum_weight": 975, "sum_weight": 975, "1875": 975, "csr_arrai": 976, "all_or_ani": [978, 1045], "eg": 978, "caching_dir": 979, "raise_except": 980, "array_sym": 980, "symmetric_arrai": 980, "sparse_symmetric_arrai": 980, "3x3": 980, "is_paramet": 982, "enclos": 983, "set_stat": 983, "bergstra": [983, 1035, 1036], "tournament": 983, "dispos": [983, 1028], "n_resources_i": 983, "n_resources_0": 983, "n_candidates_i": 983, "n_candidates_0": 983, "r_0": 983, "n_resourc": 983, "983667": 983, "951958": 983, "947958": 983, "961009": 983, "955989": 983, "jamieson": 983, "talwalkar": 983, "desalvo": 983, "rostamizadeh": 983, "hyperband": 983, "bandit": 983, "multimetr": [983, 1045, 1050], "calibrated_forest": 983, "select__k": 983, "model__estimator__max_depth": 983, "imp": 984, "sophist": [984, 996], "14338": 984, "13286": 984, "15611": 984, "amelia": 984, "scientist": [984, 1018], "roderick": 984, "rubin": 984, "1986": [984, 1010], "ol2001": 984, "mask_missing_values_onli": 984, "mask_al": 984, "3_": 986, "2_": 986, "ws2001": 986, "unsampl": 986, "equiv": [986, 1009], "elucid": 986, "frac12": 986, "rr2007": 986, "2x_iy_i": 986, "vz2010": 986, "vvz2010": 986, "prod_i": 986, "ls2010": 986, "c_0": [986, 992], "tensorsketch": 986, "pp2013": 986, "wikic": 986, "ccf2002": 986, "mercer": 986, "langl": [986, 994, 1008, 1009], "rangl": [986, 994, 1008, 1009], "y_j": [986, 994, 996, 1004, 1009], "obviat": 986, "dagm": 986, "vempati": 986, "jawahar": 986, "charikar": 986, "farach": 986, "colton": 986, "m2012": 987, "mu_k": 988, "cst": 988, "omega_": 988, "k0": 988, "h_l": 988, "extrema": 988, "honei": 988, "stork": 988, "dilemma": 989, "valid_scor": 989, "w_0": 990, "w_p": 990, "34545455": 990, "13636": [990, 1044], "rl2007": 990, "rifkin": 990, "lippert": 990, "2n_": 990, "softw": 990, "kim": [990, 1043, 1044, 1045, 1049], "koh": [990, 1018], "lustig": 990, "boyd": 990, "gorinevski": 990, "c_p": 990, "cherkasski": 990, "yunqian": 990, "1691": 990, "1714": 990, "ell_2": 990, "equiangular": 990, "weisberg": 990, "ell_0": [990, 994], "nonzero_coef": 990, "mp": 990, "ell_": 990, "posteriori": [990, 996], "radford": 990, "neal": [990, 1048], "50000013": 990, "49999993": 990, "lambda_i": [990, 1004], "srikantan": 990, "tristan": 990, "fletcher": [990, 1035, 1039], "nomenclatur": [990, 1041], "deliber": 990, "overparameter": 990, "ldot": [990, 994, 996, 998, 1008], "w_l": 990, "min_w": 990, "iverson": 990, "hood": [990, 1009], "broyden": 990, "goldfarb": 990, "shanno": 990, "shortcom": 990, "simon": [990, 1018, 1038, 1039, 1048, 1049, 1050, 1051], "93fletcher": 990, "93goldfarb": 990, "93shanno_algorithm": 990, "noah": 990, "multirespons": 990, "statsmodel": [990, 1013], "edm": 990, "agricultur": 990, "rainfal": 990, "paid": 990, "fraud": [990, 1018], "cash": 990, "fraudul": [990, 1018], "interrupt": 990, "drug": 990, "cure": 990, "entertain": 990, "mccullagh": 990, "nelder": 990, "boca": 990, "raton": 990, "chapman": 990, "hall": [990, 1042, 1046], "crc": 990, "31760": 990, "j\u00f8rgensen": [990, 1052], "monografia": 990, "matem\u00e1tica": 990, "2463": 990, "4337": 990, "7638": 990, "disappear": [990, 1035], "photogrammetr": 990, "hypothes": 990, "paradigm": 990, "cartographi": 990, "fischler": 990, "boll": 990, "sunglok": 990, "choi": 990, "taemin": 990, "wonpil": 990, "binom": 990, "infeas": [990, 997, 999], "k\u00e4rkk\u00e4inen": 990, "\u00e4yr\u00e4m\u00f6": 990, "h_": 990, "oarc": 990, "dae": 990, "bassett": 990, "jr": 990, "econometrica": 990, "econometr": 990, "portnoi": [990, 1052], "hare": 990, "tortois": 990, "paraboloid": 990, "w_3": 990, "w_4": 990, "w_5": 990, "z_1": 990, "z_2": 990, "z_3": 990, "z_4": 990, "z_5": 990, "streamlin": 990, "gotten": [990, 1004], "necess": [991, 997], "strife": 991, "mother": 991, "baloo": 991, "song": 991, "jungl": 991, "rubric": 991, "defici": [991, 1008], "hlle": 991, "revolv": 991, "belkin": 991, "niyogi": 991, "1373": 991, "1396": 991, "molecul": 991, "jk": 991, "delta_": 991, "c_1": 991, "disentangl": 991, "legitim": 991, "die": 991, "noisier": 991, "5415": 991, "brief": 992, "num_featur": [992, 1050], "quantum": 992, "nutshel": 992, "36787944": 992, "89483932": 992, "58364548": 992, "51341712": 992, "83822343": 992, "7768366": 992, "facil": 993, "equi": 993, "pro": 993, "agnost": [993, 1002], "cue": 993, "came": 993, "quicker": 993, "unpract": 993, "analogi": [993, 994], "top_k_accuraci": 994, "neg_brier_scor": [994, 1045], "f1_micro": [994, 1039], "f1_weight": [994, 1039], "f1_sampl": 994, "roc_auc_ovr": [994, 1045], "roc_auc_ovo": [994, 1045], "roc_auc_ovr_weight": [994, 1045], "roc_auc_ovo_weight": [994, 1045], "neg_mean_squared_log_error": 994, "neg_root_mean_squared_log_error": 994, "neg_median_absolute_error": 994, "neg_mean_poisson_devi": 994, "neg_mean_gamma_devi": 994, "invalidparametererror": 994, "_error": 994, "my_custom_loss_func": 994, "protocol": [994, 1038, 1051, 1052], "custom_scoring_funct": 994, "custom_scorer_modul": 994, "confusion_matrix_scor": 994, "test_tp": 994, "test_fn": 994, "untru": 994, "dividend": 994, "divisor": 994, "quotient": 994, "texttt": 994, "_class": 994, "youden": 994, "informed": 994, "mosley2013": 994, "kelleher2015": 994, "guyon2015": 994, "urbanowicz2015": 994, "escalant": 994, "escalera": 994, "maci\u00e0": [994, 1048, 1050], "saeed": 994, "statnikov": 994, "viega": 994, "chalearn": 994, "automl": [994, 1013], "ijcnn": 994, "moslei": 994, "ijcv": 994, "urbanowicz": 994, "exstrac": 994, "evol": 994, "intel": [994, 1013], "4285714285714286": 994, "manning2008": 994, "everingham2010": 994, "davis2006": 994, "flach2015": 994, "everingham": 994, "gool": 994, "winn": 994, "pascal": 994, "voc": 994, "goadrich": 994, "ob2019": 994, "y_l": 994, "_l": 994, "emptyset": 994, "f_beta": 994, "opitz": 994, "burst": 994, "ne": [994, 997], "1738": 994, "t_k": [994, 1010], "ik": 994, "ki": 994, "kk": 994, "auroc": 994, "ht2001": 994, "fc2009": 994, "pd2000": 994, "f2006": 994, "f2001": 994, "inner_clf": 994, "c\u00e8sar": 994, "hernandez": 994, "orallo": 994, "modroiu": 994, "wikipediadet2017": 994, "martin1997": 994, "navratil2007": 994, "consult": 994, "encyclopedia": 994, "utc": 994, "php": [994, 1013], "detection_error_tradeoff": 994, "oldid": 994, "798982054": 994, "doddington": 994, "kamm": 994, "ordowski": 994, "przybocki": 994, "navractil": 994, "klusacek": 994, "acoust": 994, "icassp": 994, "honolulu": 994, "brier1950": 994, "p_i": [994, 997], "bella2012": 994, "flach2008": 994, "bella": 994, "hern\u00e1ndez": 994, "ram\u00edrez": 994, "quintana": 994, "khosrow": 994, "pour": 994, "hershei": 994, "edson": [994, 1040], "matsubara": 994, "dagstuhl": 994, "seminar": 994, "schloss": 994, "leibniz": 994, "zentrum": 994, "lr_": 994, "brenner": 994, "gefel": 994, "grade": 994, "unalt": 994, "epsilon_i": 994, "908": 994, "925": [994, 1023], "7083": 994, "rsme": 994, "log_": 994, "growth": [994, 1040, 1041], "commod": 994, "mapd": 994, "2e6": 994, "2666": 994, "y_n": [994, 998, 1008], "elicit": 994, "2500": 994, "mean_pinball_loss_95p": 994, "skill": 994, "mcfadden": 994, "d2_tweedie_score_15": 994, "d2_pinball_score_08": 994, "heteroschedast": 994, "homoschedast": 994, "pear": 995, "y_dens": 995, "y_spars": 995, "advoc": 995, "elabor": 995, "financ": 995, "f3": 995, "y3": 995, "multi_target_forest": 995, "75474165": 995, "03498585": 995, "03812219": 995, "12165031": 995, "12914884": 995, "46081961": 995, "8948621": 995, "44373091": 995, "88978285": 995, "62745778": 995, "02891072": 995, "48204257": 995, "03260883": 995, "165": 995, "34867495": 995, "52003279": 995, "92529176": 995, "25719016": 995, "84253": 995, "25193977": 995, "16443186": 995, "12274212": 995, "170388": 995, "80956739": 995, "16979946": 995, "72667194": 995, "50941682": 995, "50447799": 995, "37967282": 995, "15699552": 995, "72850319": 995, "prod_": 996, "downarrow": 996, "spite": 996, "famous": 996, "serious": 996, "flair": 996, "2_y": 996, "mu_i": 996, "sigma_i": [996, 1004], "theta_i": 996, "cnb": 996, "mnb": 996, "inventor": 996, "alpha_i": [996, 1009], "cj": [996, 1038, 1039, 1040, 1041, 1042], "summat": [996, 998], "min_c": 996, "t_i": 996, "poorest": 996, "n_i": [996, 1004], "satellit": 997, "kdt": 997, "farawai": 997, "invent": 997, "orthotrop": 997, "bentlei": 997, "1975": 997, "omohundro": 997, "characteris": 997, "unaffect": 997, "amort": 997, "cache_path": 997, "gettempdir": 997, "unsort": [997, 1036, 1039, 1043], "5807": 997, "nca_pip": 997, "96190476": 997, "limits_": 997, "lx": 997, "x_m": 998, "leftmost": 998, "w_1x_1": 998, "w_2x_2": 998, "w_mx_m": 998, "backpropag": 998, "b_1": 998, "b_2": 998, "z_l": 998, "dfrac": [998, 1004], "nabla": 998, "deduct": 998, "rumelhart": 998, "jiquan": 998, "ngiam": 998, "chuan": 998, "yifan": 998, "carolin": 998, "suen": 998, "backprop": [998, 1008], "lecun": [998, 1008], "orr": [998, 1008], "strai": 999, "v_ih_j": 999, "b_iv_i": 999, "c_jh_j": 999, "h_j": 999, "v_i": 999, "b_i": 999, "sum_h": 999, "fantasi": 999, "particl": 999, "thoroughli": 999, "hereund": 1000, "1443": 1000, "1471": 1000, "outlying": 1000, "h2009": 1001, "g2015": 1001, "absurd": 1001, "m2019": 1001, "bike": 1001, "mc_clf": 1001, "466": 1001, "624": 1001, "overlaid": 1001, "obscur": [1001, 1051], "cice": [1001, 1049], "pd_": 1001, "dx_c": 1001, "footnot": [1001, 1013], "opaqu": 1002, "categr": 1002, "356": 1002, "probe": 1002, "204": [1002, 1007], "048": 1002, "r_multi": 1002, "1013": 1002, "726": 1002, "298": 1002, "022": 1002, "277": [1002, 1037], "376": 1002, "i_j": 1002, "min_max_scal": 1004, "x_train_minmax": 1004, "x_test_minmax": 1004, "max_abs_scal": 1004, "x_train_maxab": 1004, "x_test_maxab": 1004, "unintention": 1004, "semidefinit": [1004, 1009], "scholkopf1998": 1004, "1_": 1004, "x_train_tran": 1004, "x_test_tran": 1004, "8pt": 1004, "x_normal": 1004, "firefox": 1004, "chrome": 1004, "safari": 1004, "africa": 1004, "dragon": 1004, "lexicon": 1004, "par": 1004, "tau": 1004, "iy_j": 1004, "l_i": 1004, "pargent": 1004, "pfister": 1004, "2671": 1004, "2692": 1004, "infant": 1004, "kid": 1004, "teen": 1004, "senior": [1004, 1018], "citizen": 1004, "retbin": 1004, "x_1x_2": 1004, "x_1x_3": 1004, "x_2x_3": 1004, "x_1x_2x_3": 1004, "rung": 1004, "eiler": 1004, "marx": 1004, "perperogl": 1004, "sauerbrei": 1004, "abrahamowicz": 1004, "bmc": 1004, "methodol": 1004, "38629436": 1004, "sixteenth": 1006, "uai": 1006, "craig": [1006, 1038, 1043], "boutili": 1006, "mois\u00e9": 1006, "goldszmidt": 1006, "morgan": [1006, 1010], "kaufmann": [1006, 1010, 1047], "ella": 1006, "bingham": 1006, "heikki": 1006, "mannila": 1006, "245": [1006, 1037], "explic": 1006, "3947": 1006, "671": 1006, "kenneth": [1006, 1035, 1036, 1041, 1042, 1049, 1050], "12th": 1006, "296": 1006, "x_new_invers": 1006, "x_new_again": 1006, "delalleau": 1007, "aistat": 1007, "gatsbi": 1007, "ucl": 1007, "uk": [1007, 1028], "fullpap": 1007, "xi_i": 1008, "slack": 1008, "t_0": 1008, "l\u00e9on": [1008, 1049, 1050, 1051], "_init_t": 1008, "basesgd": 1008, "eta_0": 1008, "_t": 1008, "svmsgd": 1008, "pegaso": 1008, "srebro": 1008, "tsuruoka": 1008, "tsujii": 1008, "ananiad": 1008, "afnlp": 1008, "lin_clf": 1009, "grasp": [1009, 1014], "sv": 1009, "builtin": 1009, "qp": 1009, "linear_svc": 1009, "gram_train": 1009, "gram_test": 1009, "zeta": 1009, "zeta_i": 1009, "textrm": [1009, 1026], "q_": 1009, "reparameter": 1009, "wu": [1009, 1039, 1047], "weng": 1009, "1005": 1009, "rong": 1009, "aug": 1009, "1871": 1009, "1874": 1009, "ofmulticlass": 1009, "fitter": 1010, "pariti": 1010, "multiplex": 1010, "dumont": 1010, "subwindow": 1010, "dichotomis": 1010, "quinlan": 1010, "multiwai": 1010, "proprietari": 1010, "ruleset": 1010, "q_m": 1010, "n_m": 1010, "t_m": 1010, "setminu": 1010, "mk": 1010, "_m": 1010, "ge0": 1010, "widetild": 1010, "tradition": 1010, "t_t": 1010, "eff": 1010, "predictive_analyt": 1010, "foot": 1012, "gear": 1012, "neuroimag": [1012, 1018], "astronom": 1012, "pycon": 1012, "thirti": 1012, "nyc": [1012, 1018], "sister": 1013, "sklearn_panda": 1013, "sklearn_xarrai": 1013, "xarrai": 1013, "autoviml": 1013, "tpot": 1013, "featuretool": 1013, "neuraxl": 1013, "neat": [1013, 1035], "checkpoint": 1013, "funki": 1013, "saver": 1013, "evalml": 1013, "mlflow": 1013, "lifecycl": [1013, 1014], "neptun": 1013, "mlop": 1013, "sacr": 1013, "dtreeviz": 1013, "eli5": 1013, "yellowbrick": 1013, "deap": 1013, "evolutionari": 1013, "interchang": [1013, 1052], "skop": [1013, 1030], "jpmml": 1013, "porter": 1013, "transpil": 1013, "javascript": 1013, "m2cgen": 1013, "dart": 1013, "haskel": 1013, "rust": 1013, "treelit": 1013, "micromlgen": 1013, "microml": 1013, "microcontrol": 1013, "emlearn": 1013, "c99": 1013, "arima": 1013, "skforecast": 1013, "tslearn": 1013, "hmmlearn": 1013, "pomegran": 1013, "crfsuit": 1013, "skorch": 1013, "scikera": 1013, "scikit_learn": 1013, "feder": 1013, "privaci": 1013, "homomorph": 1013, "encrypt": 1013, "mlxtend": 1013, "lego": 1013, "subsembl": 1013, "lightn": 1013, "sdca": 1013, "adagrad": 1013, "svrg": 1013, "gplearn": 1013, "genet": 1013, "multilearn": 1013, "seglearn": 1013, "fastfm": 1013, "kmode": 1013, "sphereclust": 1013, "mise": 1013, "giotto": 1013, "tda": 1013, "pymc": 1013, "censor": 1013, "lightfm": 1013, "openrec": 1013, "gensim": 1013, "nilearn": 1013, "neuro": 1013, "astroml": 1013, "astronomi": 1013, "dissemin": 1013, "chines": 1013, "persian": 1013, "spanish": 1013, "korean": 1013, "disclaim": 1013, "eleven": 1014, "incept": 1014, "scala": 1014, "reinforc": 1014, "era": 1014, "7242": 1014, "12147": 1014, "5523": 1014, "10733": 1014, "13902": [1014, 1045], "12800": 1014, "12866": 1014, "15550": 1014, "5853": 1014, "11805": 1014, "15319": 1014, "11977": 1014, "12852": [1014, 1045], "13911": [1014, 1045], "amput": 1014, "6284": 1014, "beginn": 1014, "priorit": [1014, 1042], "4497": 1014, "7646": 1014, "6425": 1014, "6424": 1014, "8480": 1014, "6231": 1014, "8100": 1014, "6599": 1014, "6715": 1014, "14582": 1014, "3855": 1014, "13227": 1014, "6323": 1014, "14180": [1014, 1046], "9173": 1014, "13146": [1014, 1045], "8614": 1014, "7608": 1014, "5082": 1014, "8243": 1014, "searchgrid": 1014, "6929": 1014, "__array_function__": [1014, 1045], "etl": [1014, 1018], "8370": 1014, "6451": 1014, "8157": 1014, "7382": 1014, "drift": 1014, "11047": [1014, 1045], "9326": 1014, "slep011": 1014, "1626": 1014, "10463": 1014, "674": 1015, "release_highlight": 1015, "developing_estim": 1015, "id3": [1016, 1030], "cart": [1016, 1030], "printabl": 1017, "indispens": 1018, "stephen": [1018, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "simmon": 1018, "vp": 1018, "athena": 1018, "music": 1018, "bernhardsson": 1018, "pariet": [1018, 1035], "lear": 1018, "visag": 1018, "fantast": 1018, "startup": 1018, "bitli": 1018, "chartbeat": 1018, "digg": [1018, 1042], "poncho": 1018, "gilad": 1018, "lotan": 1018, "chief": 1018, "chat": 1018, "bread": 1018, "butter": 1018, "chaumond": [1018, 1043], "offic": 1018, "ayzenshtat": [1018, 1043], "undergrad": 1018, "professor": 1018, "hotel": 1018, "destin": 1018, "agent": 1018, "melani": [1018, 1042, 1043], "awesom": 1018, "stuff": 1018, "randomizedpca": [1018, 1035, 1037, 1038, 1040, 1041, 1042], "boston": 1018, "mdbecker": 1018, "pydata_2013": 1018, "thorough": 1018, "notch": 1018, "production": 1018, "greg": [1018, 1041, 1042, 1044, 1045], "lamp": 1018, "founder": 1018, "prototyp": 1018, "jurgen": 1018, "director": 1018, "commerc": 1018, "inventori": 1018, "bertin": 1018, "mahieux": 1018, "invalu": 1018, "vijai": [1018, 1038], "surrog": 1018, "traine": 1018, "impress": 1018, "traffic": 1018, "tenur": 1018, "matchmak": 1018, "weitzenfeld": 1018, "tweet": 1018, "ferenc": 1018, "huszar": 1018, "shop": 1018, "ourselv": 1018, "jeremi": [1018, 1040, 1041, 1042, 1043, 1046, 1047], "achin": 1018, "ceo": 1018, "marketplac": 1018, "frid": [1018, 1038], "radar": 1018, "partnership": 1018, "lebourgeoi": 1018, "charron": [1018, 1038, 1039, 1046, 1047, 1048], "cornerston": 1018, "sheep": 1018, "featureforg": 1018, "rafael": [1018, 1036, 1037, 1039, 1042], "carrascosa": [1018, 1039], "law": 1018, "semiconductor": 1018, "fab": [1018, 1045, 1046], "bleed": 1018, "smartphon": 1018, "automobil": 1018, "trent": [1018, 1041], "mcconaghi": 1018, "rapid": 1018, "immens": 1018, "thorsten": 1018, "kranz": 1018, "coma": 1018, "dss": 1018, "douetteau": 1018, "b2c": 1018, "retail": 1018, "palladium": 1018, "rammig": [1018, 1041], "peer": 1018, "lend": 1018, "billion": 1018, "gbp": 1018, "grate": 1018, "vlasio": [1018, 1042], "vasilei": [1018, 1042], "petfood": 1018, "cocoa": 1018, "worldwid": 1018, "toolset": 1018, "equip": 1018, "fitzk": 1018, "sr": 1018, "fondat": 1018, "s\u00e9bastien": [1018, 1041, 1043], "conort": 1018, "salmon": 1019, "nine": 1019, "sentiment": 1020, "cli": 1020, "doctest_mod": 1020, "hardest": 1021, "scroll": 1021, "drag": 1021, "pan": 1021, "ml_map": 1021, "startstart": 1021, "50sampl": 1021, "getmoredataget": 1021, "nonopredict": 1021, "acategorypredict": 1021, "yesyesdo": 1021, "havelabeleddatado": 1021, "hav": 1021, "yesyespredict": 1021, "aquantitypredict": 1021, "nonojustlookingjust": 1021, "nonopredictingstructurepredict": 1021, "nonotoughlucktough": 1021, "100ksampl": 1021, "yesyessgdclassifiersgd": 1021, "nonolinearsvclinear": 1021, "yesyestextdatatext": 1021, "kernelapproximationkernel": 1021, "kneighborsclassifierkneighbor": 1021, "nonosvcsvcensembleclassifiersensembl": 1021, "naivebayesna": 1021, "yesyesclassificationclassificationnumb": 1021, "ofcategoriesknownnumb": 1021, "nono": 1021, "10ksampl": 1021, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 1021, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 1021, "gmmgmm": 1021, "yesyesfew": 1021, "featuresshould": 1021, "beimportantfew": 1021, "yesyessgdregressorsgd": 1021, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 1021, "linea": 1021, "nonosvr": 1021, "ensembleregressorsensembl": 1021, "regressionregressionramdomizedpcaramdom": 1021, "yesy": 1021, "nonoisomapisomapspectralembeddingspectr": 1021, "yesyesllel": 1021, "dimensionalityreductiondimension": 1021, "learnalgorithm": 1021, "sheetscikit": 1021, "tightli": 1022, "knit": 1022, "x_fold": 1023, "array_split": 1023, "y_fold": 1023, "934": 1023, "train_indic": 1023, "test_indic": 1023, "963": 1023, "922": 1023, "930": 1023, "96388889": 1023, "92222222": 1023, "9637883": 1023, "93036212": 1023, "96578289": 1023, "92708922": 1023, "96681476": 1023, "96362897": 1023, "93192644": 1023, "0077": 1023, "943": 1023, "00375": 1023, "lfw_": 1024, "_lfw": 1024, "gerhard_schroed": 1024, "donald_rumsfeld": 1024, "tony_blair": 1024, "colin_powel": 1024, "george_w_bush": 1024, "282": [1024, 1035], "estimated_param_": 1025, "iris_x": 1026, "iris_i": 1026, "iris_x_train": 1026, "iris_y_train": 1026, "iris_x_test": 1026, "iris_y_test": 1026, "pave": 1026, "paltri": 1026, "exabyt": 1026, "30349955": 1026, "63931533": 1026, "510": 1026, "53060544": 1026, "73698041": 1026, "13170937": 1026, "81458798": 1026, "84845219": 1026, "60648906": 1026, "51961675": 1026, "09517222": 1026, "585": 1026, "5854": 1026, "5855": 1026, "occam": 1026, "razor": 1026, "best_alpha": [1026, 1035], "025118864315095794": 1026, "313": 1026, "508": 1026, "knew": 1027, "taxonomist": 1027, "face_compress": 1027, "x_approx": 1027, "images_approx": 1027, "zlabel": 1027, "18565811e": 1027, "19346747e": 1027, "43026679e": 1027, "text_analyt": 1028, "skeleton": [1028, 1038], "sklearn_tut_workspac": 1028, "cp": 1028, "work_directori": 1028, "tutorial_hom": 1028, "fetch_data": 1028, "lang": 1028, "newsweed": 1028, "netnew": 1028, "bydat": 1028, "twenty_train": 1028, "holder": 1028, "2257": 1028, "sd345": 1028, "collier": 1028, "laserjet": 1028, "iii": [1028, 1049, 1052], "hampton": 1028, "4gb": 1028, "count_vect": 1028, "x_train_count": 1028, "35788": 1028, "4690": 1028, "downscal": 1028, "tf_transform": 1028, "x_train_tf": 1028, "tfidf_transform": 1028, "x_train_tfidf": 1028, "na\u00efv": 1028, "docs_new": 1028, "love": 1028, "opengl": 1028, "x_new_count": 1028, "x_new_tfidf": 1028, "text_clf": 1028, "twenty_test": 1028, "docs_test": 1028, "8348": 1028, "9101": [1028, 1043], "1502": 1028, "380": 1028, "tfidf__use_idf": 1028, "searcher": 1028, "eight": 1028, "gs_clf": 1028, "workspac": 1028, "fear": 1028, "fire": 1028, "exercise_xx_script": 1028, "arg1": 1028, "arg2": 1028, "arg3": 1028, "mortem": 1028, "exercise_01_language_train_model": 1028, "exercise_02_senti": 1028, "movie_review": 1028, "txt_sentoken": 1028, "cpickl": 1028, "subtleti": 1030, "subscrib": 1033, "post1": 1033, "64bit": 1035, "gzip": 1035, "bzip2": 1035, "decompress": 1035, "auc_scor": [1035, 1037], "kernc": [1035, 1049, 1050], "led": 1035, "probabilisticpca": [1035, 1038], "hmm": [1035, 1036, 1037, 1038, 1040], "gaussianhmm": 1035, "multinomialhmm": 1035, "n_gram_rang": 1035, "alexi": [1035, 1038, 1039, 1042, 1052], "mignon": [1035, 1038, 1039, 1042], "subhodeep": [1035, 1036, 1037], "moitra": [1035, 1036, 1037], "yannick": [1035, 1037], "schwartz": [1035, 1037, 1049], "duckworth": 1035, "benediktsson": [1035, 1036, 1037], "marko": [1035, 1044, 1045, 1051], "burjek": 1035, "pinto": 1035, "abraham": [1035, 1036, 1041, 1045], "hoenig": 1035, "flyingimmidev": 1035, "francoi": [1035, 1048], "savard": 1035, "hann": 1035, "schulz": 1035, "welind": 1035, "companioni": 1035, "brandyn": 1035, "bussonni": [1035, 1047], "matthia": [1035, 1037, 1038, 1041, 1042, 1043, 1047, 1050], "pierr": [1035, 1043, 1044, 1046, 1048, 1050, 1052, 1053], "astolfi": 1035, "huiginn": 1035, "goodman": [1035, 1040], "ludwig": 1035, "schwardt": 1035, "hervieu": 1035, "sergio": [1035, 1037, 1038, 1047, 1050], "medina": [1035, 1037], "sheerman": 1035, "buguen": 1035, "seq_dataset": [1035, 1045], "weight_vector": [1035, 1045], "reuben": 1035, "costin": 1035, "_basehmm": 1035, "neighborsregressor": 1035, "gone": [1035, 1036], "vbgmm": [1035, 1039, 1041], "_pvalu": 1035, "charset": [1035, 1037], "test_fract": 1035, "train_fract": 1035, "239": 1035, "marek": [1035, 1052], "fcostin": 1035, "adrien": 1035, "gaidon": 1035, "joona": 1035, "sillanp\u00e4\u00e4": 1035, "mccarthi": [1035, 1043], "roi": [1035, 1049], "hyunjin": 1035, "ibay": 1035, "scheidegg": 1035, "clair": 1035, "revillet": 1035, "conrad": [1035, 1036, 1050], "meng": [1035, 1036, 1039, 1041, 1042], "xinfan": [1035, 1036, 1039], "udi": 1035, "weinsberg": 1035, "janso": 1035, "palafox": 1035, "overwrite_": 1035, "copy_": 1035, "buffer_mb": 1035, "sparse_encode_parallel": 1035, "accident": [1035, 1039, 1044], "basedictionarylearn": 1035, "sparsecodingmixin": 1035, "fast_svd": 1035, "arnold": [1035, 1036], "bala": [1035, 1038], "subrahmanyam": [1035, 1038], "varanasi": [1035, 1038], "draxu": 1035, "eickenberg": [1035, 1037, 1038, 1039, 1040], "bogdan": 1035, "trach": 1035, "f\u00e9lix": [1035, 1037, 1038, 1039, 1043], "antoin": [1035, 1037, 1038, 1039, 1042], "fortin": [1035, 1037, 1038, 1039], "manuel": [1035, 1039, 1043, 1044, 1047, 1048], "caicedo": 1035, "carvaj": 1035, "tiziano": 1035, "zito": [1035, 1048], "jean": [1035, 1038, 1039, 1040, 1041, 1042, 1048], "kossaifi": [1035, 1039, 1040], "thumbnail": 1035, "mldata": [1035, 1043], "pietro": [1035, 1038, 1052], "berk": 1035, "macosx": 1035, "xarg": 1035, "bscikit": 1035, "cross_val": 1035, "bcross_val": 1035, "lurk": 1035, "l1_distanc": 1035, "sum_over_featur": [1035, 1050], "387": 1035, "168": 1035, "andi": [1035, 1042], "amit": [1035, 1049, 1050], "salvator": [1035, 1049, 1050, 1052], "masecchia": 1035, "schut": 1035, "metaireau": [1035, 1038], "bryan": [1035, 1038, 1044, 1045, 1048], "silverthorn": 1035, "minwoo": 1035, "luca": [1035, 1045, 1046, 1047, 1048], "wiman": 1035, "schl\u00fcter": [1035, 1043], "malet": 1035, "miott": [1035, 1038], "feth": 1035, "arezki": 1035, "yamin": 1035, "notes_neighbor": 1035, "netbsd": 1035, "kamel": 1035, "ibn": 1035, "hassen": 1035, "derouich": 1035, "virgilefritsch": 1035, "example_gaussian_process_plot_gp_regress": 1035, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1035, "tast": 1035, "2x": 1035, "10x": 1035, "200x": 1035, "ann": [1035, 1047, 1049], "laur": 1035, "fouqu": 1035, "ronan": [1035, 1038, 1043], "amicel": [1035, 1038], "osendorf": [1035, 1036], "gmmhmm": [1035, 1036], "latex": 1035, "mlcomp": 1035, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1035, "pybrain": 1035, "262": 1035, "rokem": [1035, 1041], "100x": [1035, 1038, 1052], "obsolet": [1035, 1051], "attrselect": 1035, "unmaintain": 1035, "lite": 1035, "filo": [1035, 1038], "mailhot": 1035, "huard": 1035, "dave": [1035, 1042, 1043, 1049, 1051], "morril": 1035, "schofield": 1035, "travi": [1035, 1043], "oliph": 1035, "pearu": 1035, "peterson": [1035, 1037], "0d": 1036, "marchman": [1036, 1037], "hrishikesh": [1036, 1037], "huilgolkar": [1036, 1037], "bastiaan": [1036, 1037], "diego": [1036, 1037], "molla": [1036, 1037], "cunha": [1036, 1037], "almeida": [1036, 1037, 1048], "rolando": [1036, 1037], "espinoza": [1036, 1037], "fuent": [1036, 1037], "beauchamp": [1036, 1039], "longstand": [1036, 1042], "shaun": 1036, "jackman": 1036, "winterman": 1036, "seberg": 1036, "n_atom": 1036, "label_propag": 1036, "learn_rat": 1036, "basegradientboost": 1036, "mean_square_error": 1036, "gmm_": 1036, "eig_tol": 1036, "chunk_siz": 1036, "zero_one_scor": 1036, "aymer": 1036, "masurel": 1036, "syhw": [1036, 1037], "corei": [1036, 1043, 1044], "lynch": [1036, 1042], "shu": [1036, 1039, 1043], "tadej": [1036, 1037], "jane\u017e": [1036, 1037], "caje": 1036, "tiago": [1036, 1040], "nune": 1036, "cow": 1036, "anz": 1036, "jauvin": 1036, "jacqu": [1036, 1038], "kvam": [1036, 1038], "doug": [1036, 1037, 1047], "coleman": [1036, 1037], "dickerson": 1036, "approximateident": 1036, "veronda": 1036, "matti": [1036, 1039, 1040], "lyra": [1036, 1039, 1040], "mikhail": [1036, 1037, 1038, 1041, 1042, 1050, 1051], "korobov": [1036, 1037, 1038, 1041, 1042], "alejandro": [1036, 1041, 1052], "weinstein": 1036, "deil": [1036, 1046, 1047], "nizhibitski": 1036, "coelho": [1036, 1038, 1039, 1043], "miroslav": [1036, 1037, 1040], "batchkarov": [1036, 1040], "pavel": [1036, 1044], "bob": [1036, 1042], "dengemann": 1036, "emanuel": 1036, "x006": 1036, "justin": [1037, 1043, 1047], "stochastic_gradi": [1037, 1038, 1044], "crombach": 1037, "sheet": 1037, "jaccard_similarity_scor": [1037, 1039, 1044], "jochen": 1037, "wersd\u00f6rfer": 1037, "sinayev": 1037, "unpleas": 1037, "novic": 1037, "tini": [1037, 1050, 1053], "hyperlink": 1037, "luessi": 1037, "philipp": [1037, 1038, 1041, 1050], "gervai": [1037, 1038], "cleverless": 1037, "nosetest": 1037, "compute_import": 1037, "return_model": [1037, 1039], "itergrid": 1037, "tacitli": 1037, "charset_error": 1037, "precompute_gram": 1037, "2224": 1037, "jim": 1037, "holmstr\u00f6m": 1037, "steven": [1037, 1038, 1040, 1042, 1043, 1048, 1050, 1051], "gryze": [1037, 1040], "sergeyf": 1037, "ben": [1037, 1038, 1039, 1042, 1043, 1044, 1047, 1052], "speer": 1037, "federico": [1037, 1038, 1043, 1044, 1049], "vaggi": [1037, 1038], "raul": [1037, 1038], "garreta": [1037, 1038], "gei": 1037, "flaxman": [1037, 1039], "denton": 1037, "cockburn": 1037, "dougal": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "sutherland": [1037, 1039, 1040, 1042, 1043, 1044, 1045], "ian": [1037, 1039, 1044, 1045, 1047, 1050, 1051], "ozsvald": 1037, "johann": [1037, 1038, 1043, 1045, 1046, 1049], "sch\u00f6nberger": [1037, 1038], "szabo": [1037, 1038], "roland": [1037, 1038], "imran": [1037, 1038, 1039], "haqu": [1037, 1038, 1039], "karayev": 1037, "jamestwebb": [1037, 1038], "abhijeet": 1037, "kolh": 1037, "velkov": 1037, "fazlul": 1037, "shahriar": 1037, "felix": [1037, 1042, 1043, 1045, 1047, 1048, 1049], "brockherd": 1037, "harikrishnan": 1037, "jack": [1037, 1040, 1048, 1049, 1050, 1051], "hale": [1037, 1049], "jakemick": 1037, "mcdermott": [1037, 1052], "zwinck": 1037, "vredevoogd": [1037, 1038], "pati": 1037, "ekman": [1037, 1041], "shubernetskii": 1037, "naoki": [1037, 1047], "orii": 1037, "seamu": 1037, "absher": 1037, "feldman": [1037, 1042, 1043, 1044, 1045], "stefano": 1037, "lattarini": 1037, "steve": [1037, 1039, 1043, 1048, 1050], "koch": [1037, 1043, 1044, 1046, 1047], "sturla": 1037, "molden": 1037, "jarosch": 1037, "nikolai": [1038, 1039, 1040, 1041, 1043, 1044, 1049, 1051], "mayorov": [1038, 1039, 1040, 1041], "msvc": 1038, "mingw": 1038, "resourcewarn": 1038, "calvin": [1038, 1039], "gile": [1038, 1039], "billing": [1038, 1039, 1040], "safe_realloc": 1038, "bradshaw": [1038, 1039, 1042], "pico": [1038, 1039], "restor": [1038, 1043, 1044, 1045, 1046, 1050], "raff": 1038, "__array__": [1038, 1045], "jeffrei": [1038, 1041], "blackburn": [1038, 1041], "danni": [1038, 1039, 1040], "sullivan": [1038, 1039, 1040], "wignal": [1038, 1039, 1045, 1046], "grid_tograph": 1038, "gracefulli": [1038, 1039], "novak": 1038, "tulloch": [1038, 1039], "wardagglomer": 1038, "wardclust": 1038, "mean_l1_ratio": 1038, "phlypo": 1038, "148": 1038, "bommarito": [1038, 1039], "brook": [1038, 1039, 1047], "osborn": [1038, 1039], "eltermann": 1038, "bwignal": 1038, "ankit": [1038, 1045, 1047, 1049], "agraw": [1038, 1043, 1049, 1050], "carei": [1038, 1039, 1040, 1041, 1042], "ugurthemast": [1038, 1039], "schumach": [1038, 1039, 1040], "baptist": [1038, 1046], "lagard": 1038, "rajat": [1038, 1045], "khanduja": 1038, "pascual": 1038, "ignacio": 1038, "rossi": 1038, "s\u00e4ger": [1038, 1041], "ilambharathi": [1038, 1039], "kanniah": [1038, 1039], "sdenton4": 1038, "alyssa": [1038, 1042], "amo": 1038, "waterland": 1038, "murad": 1038, "maud": 1038, "karol": 1038, "pysniak": 1038, "cgohlk": [1038, 1039], "jacobsen": 1038, "collin": 1038, "kaushik94": 1038, "erwin": 1038, "marsi": 1038, "csytraci": 1038, "lk": 1038, "laurent": [1038, 1039, 1042, 1043, 1050, 1051], "direr": [1038, 1039, 1042, 1043], "shilt": 1038, "yoshiki": [1038, 1041], "v\u00e1zquez": 1038, "yung": [1038, 1041], "siang": 1038, "liau": 1038, "abhishek": [1038, 1039, 1045, 1049, 1051, 1052], "thakur": [1038, 1039], "rohit": [1038, 1039, 1043, 1044], "sivaprasad": [1038, 1039], "amormachin": 1038, "oscar": [1038, 1042], "carlsson": 1038, "nanta": 1038, "nardelli": 1038, "jess010": 1038, "kowalski87": 1038, "clegg": 1038, "ralf": [1038, 1041, 1042, 1050, 1051], "gommer": [1038, 1041, 1042, 1050, 1051], "rupesh": 1038, "srivastava": [1038, 1050], "ryan": [1038, 1041, 1043, 1044], "skipper": [1038, 1040, 1041], "seabold": [1038, 1040, 1041], "stefan": [1038, 1039, 1043, 1045], "walt": [1038, 1039, 1043], "riddel": [1038, 1040, 1042], "valentin": [1038, 1040, 1050, 1051], "haenel": 1038, "myer": [1038, 1042], "yoni": 1038, "meshulam": 1038, "yuri": [1038, 1040], "zaytsev": 1038, "adrinjalali": [1038, 1047], "ai8rahim": 1038, "alemagnani": 1038, "chalmerlow": 1038, "dziki": 1038, "dro\u017cd\u017c": 1038, "matrixorz": 1038, "popo": 1038, "samuela": 1038, "boulogn": 1038, "ethan": [1038, 1041], "guilherm": 1038, "trein": 1038, "heuer": 1038, "ivicajov": 1038, "rouli": 1038, "eduardo": [1038, 1040, 1048, 1049], "ari\u00f1o": 1038, "rubia": 1038, "jell": 1038, "zijlstra": 1038, "eddi": [1038, 1052], "jansson": [1038, 1050], "ca\u00f1ardo": 1038, "alastuei": 1038, "joseph": [1038, 1039, 1040, 1041, 1047, 1049, 1050], "perla": 1038, "ricardo": [1038, 1048, 1049, 1052], "kenta": 1038, "sato": 1038, "medri": 1038, "luce": 1038, "pierron": 1038, "danielweitzenfeld": 1038, "thompson": [1038, 1050, 1051], "brett": [1038, 1040, 1041, 1042, 1043, 1050], "feurer": [1038, 1043], "earl": 1038, "hank": 1038, "orr\u00f9": 1038, "lunt": 1038, "kearn": 1038, "pawe\u0142": [1038, 1042, 1047, 1048], "mandera": 1038, "zambelli": 1038, "staubda": 1038, "dedupl": 1039, "heilman": [1039, 1040], "precompute_dist": [1039, 1046], "lshforest": [1039, 1042], "qiang": 1039, "luo": 1039, "clemen": 1039, "brunner": 1039, "matteo": [1039, 1041, 1049], "visconti": 1039, "oleggio": 1039, "castello": 1039, "linkage_tre": 1039, "jatin": [1039, 1041], "shah": [1039, 1040, 1041, 1047], "saurabh": [1039, 1040, 1041, 1042, 1043, 1047], "jha": [1039, 1045, 1049], "blanchard": [1039, 1040], "michal": [1039, 1042, 1048, 1049], "romaniuk": 1039, "gilmor": 1039, "stapl": 1039, "hedyati": 1039, "antoni": [1039, 1041, 1047, 1050], "parel": 1039, "herv\u00e9": 1039, "bredin": 1039, "hasil": 1039, "sharma": [1039, 1041, 1043, 1044, 1046, 1047, 1049, 1052], "ducktyp": [1039, 1052], "download_20newsgroup": 1039, "cathi": [1039, 1045], "deng": [1039, 1040, 1041], "dawson": 1039, "garret": 1039, "hanna": [1039, 1040, 1046], "wallach": [1039, 1040], "yan": [1039, 1047], "artem": [1039, 1042, 1052], "sobolev": 1039, "fit_ovr": 1039, "predict_ovr": 1039, "predict_proba_ovr": 1039, "fit_ovo": 1039, "predict_ovo": 1039, "fit_ecoc": 1039, "predict_ecoc": 1039, "lamond": 1039, "outweigh": 1039, "thresh": 1039, "akshai": [1039, 1042, 1047], "akshayah3": 1039, "aldrian": 1039, "obaja": 1039, "ander": [1039, 1045], "aagaard": 1039, "cranenburgh": 1039, "walker": 1039, "banilo": [1039, 1040], "barmalei": [1039, 1040], "benedikt": 1039, "koehler": 1039, "bhsu": 1039, "bori": [1039, 1047, 1051], "feld": [1039, 1051], "borja": 1039, "ayerdi": 1039, "boyuan": [1039, 1040, 1041], "brent": [1039, 1043, 1044], "pedersen": [1039, 1051], "celeo": 1039, "chebee7i": 1039, "stade": 1039, "schuldt": 1039, "christof": [1039, 1040], "angermuel": [1039, 1040], "daiki": 1039, "aminaka": 1039, "danfrankj": 1039, "dmitrij": 1039, "milajev": 1039, "floydsoft": 1039, "garrett": 1039, "gpassino": 1039, "gwulf": [1039, 1040], "hampu": 1039, "bengtsson": 1039, "harri": [1039, 1041, 1047, 1048], "mavroforaki": [1039, 1041], "helder": [1039, 1048, 1049], "herv": 1039, "hugu": 1039, "salamin": 1039, "ism": 1039, "dlabal": 1039, "javier": 1039, "l\u00f3pez": [1039, 1043, 1044, 1047], "pe\u00f1a": 1039, "jdcaballero": 1039, "jeff": [1039, 1041, 1048, 1049], "hammerbach": 1039, "helmu": 1039, "kaicheng": 1039, "markham": [1039, 1046, 1047], "lagacheri": 1039, "leepei": 1039, "loic": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "estev": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "luka": [1039, 1046, 1052], "michelbach": 1039, "krell": [1039, 1041], "ku": [1039, 1040], "mateusz": [1039, 1046, 1047, 1052], "susik": 1039, "mehdi": [1039, 1048], "cherti": 1039, "mlg": 1039, "montecchio": 1039, "okal": 1039, "billi": 1039, "\u00f3scar": [1039, 1040, 1041, 1042], "n\u00e1jera": [1039, 1040, 1041, 1042], "puggioni": 1039, "pratap": [1039, 1042, 1049], "vardhan": 1039, "pvnguyen": 1039, "queqichao": 1039, "rahiel": 1039, "kasim": 1039, "mason": 1039, "saket": [1039, 1040, 1047], "choudhari": [1039, 1040, 1049, 1051], "sam": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "nichol": 1039, "sethdandridg": 1039, "sinhrk": [1039, 1040], "snuderl": 1039, "ott": 1039, "tjoa": 1039, "swu": 1039, "zimmer": [1039, 1049], "tejesh95": 1039, "terrycojon": 1039, "delteil": 1039, "toma": 1039, "kazmar": 1039, "trevorstephen": [1039, 1041], "tttthomasssss": 1039, "tzu": 1039, "kuo": 1039, "ugurcaliskan": 1039, "vinayak": [1039, 1040, 1041, 1043, 1044, 1050, 1051], "mehta": [1039, 1040, 1041, 1043, 1044, 1045, 1046, 1050, 1051], "vjacheslav": 1039, "murashkin": 1039, "wadawson": 1039, "x0l": 1039, "6147": 1040, "presort": [1040, 1045], "5857": 1040, "mcculloh": [1040, 1041], "6258": 1040, "giorgio": [1040, 1041, 1042], "patrini": [1040, 1041, 1042], "joe": 1040, "jevnik": 1040, "labelkfold": [1040, 1041], "labelshufflesplit": [1040, 1041], "mcfee": [1040, 1041], "3659": 1040, "4738": 1040, "projectedgradientnmf": 1040, "nls_max_it": 1040, "erick": 1040, "moodi": 1040, "4025": 1040, "martino": 1040, "sorbaro": 1040, "cori": 1040, "konstantin": [1040, 1041, 1042], "shmelkov": 1040, "backlink": 1040, "jaidev": 1040, "deshpand": [1040, 1041], "dictlearn": 1040, "kashif": 1040, "rasul": [1040, 1042, 1043], "galvez": 1040, "sonni": 1040, "hu": [1040, 1043, 1045], "santi": [1040, 1042, 1043], "villalba": [1040, 1043, 1047], "5186": 1040, "stolbunov": 1040, "booster": 1040, "graham": [1040, 1041], "clenaghan": [1040, 1041], "clyde": 1040, "subproblem": 1040, "forestclassifi": 1040, "ankur": [1040, 1051], "ankan": 1040, "henri": [1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "5431": 1040, "buddha": 1040, "prakash": [1040, 1042, 1048], "5182": 1040, "lamb": [1040, 1048], "5282": 1040, "5355": 1040, "5360": 1040, "4478": 1040, "5337": 1040, "4362": 1040, "5495": 1040, "elvi": [1040, 1041, 1042], "dohmatob": [1040, 1041, 1042], "data_min": 1040, "data_max": 1040, "data_rang": 1040, "vighnesh": [1040, 1041, 1043], "birodkar": [1040, 1041, 1043], "_learntselectormixin": 1040, "gradientboost": 1040, "metatransfom": 1040, "load_lfw_pair": 1040, "wardagglom": 1040, "residues_": 1040, "indicator_matrix_": 1040, "adithya": 1040, "ganesh": [1040, 1052], "akitti": 1040, "alexei": 1040, "grigorev": 1040, "ali": [1040, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "baharev": 1040, "ando": 1040, "saaba": 1040, "anish": [1040, 1041], "anthoni": [1040, 1042, 1043], "erling": 1040, "rouvinen": 1040, "rachez": [1040, 1041], "benjaminirv": 1040, "naul": [1040, 1041], "gohlk": 1040, "bourguignat": 1040, "cindi": [1040, 1048, 1052], "sridharan": 1040, "kronovet": 1040, "data1010": 1040, "dotson": 1040, "djipei": [1040, 1041], "dmitri": [1040, 1042, 1043, 1044, 1048, 1051, 1052], "spikhalskii": 1040, "donn": 1040, "duart": [1040, 1048, 1050], "caro": 1040, "larson": [1040, 1044, 1045, 1047, 1049], "fernando": [1040, 1047], "carrillo": 1040, "eckert": 1040, "zalkow": 1040, "ganiev": [1040, 1041, 1042], "ibraim": [1040, 1041, 1042], "giorgiop": 1040, "gryllo": [1040, 1043], "prokopi": [1040, 1043], "hsuan": 1040, "tien": 1040, "ishank": [1040, 1041, 1042], "gulati": [1040, 1041, 1042], "jeffrey04": [1040, 1041], "jfraj": 1040, "jiali": 1040, "mei": [1040, 1045], "kirkham": [1040, 1041, 1043], "wittenau": 1040, "loyal": 1040, "jungkook": 1040, "park": [1040, 1045, 1047, 1050, 1051], "kamalakerdadi": [1040, 1041], "kyler": 1040, "lilian": [1040, 1041, 1052], "besson": [1040, 1041], "tiao": [1040, 1041], "marktab": 1040, "spacek": 1040, "martinbpr": [1040, 1041], "martinosorb": 1040, "maryanmorel": [1040, 1041], "masafumi": 1040, "oyamada": 1040, "krump": 1040, "kolganov": 1040, "mbilling": 1040, "mhg": 1040, "omer": 1040, "katz": [1040, 1047, 1048], "pauli": 1040, "virtanen": 1040, "fischer": [1040, 1041], "pianomania": 1040, "preston": [1040, 1041, 1042], "parri": [1040, 1041, 1042], "rohan": [1040, 1041, 1043, 1044, 1048], "ramanath": 1040, "bansod": [1040, 1041, 1042], "scls19fr": 1040, "saeger": [1040, 1041, 1042], "shivan": 1040, "sornarajah": 1040, "simonpl": 1040, "sseg": 1040, "hoover": [1040, 1041, 1042, 1044], "seguin": 1040, "theodor": 1040, "vasiloudi": 1040, "freita": [1040, 1042, 1043], "pereira": [1040, 1043, 1044], "timothi": [1040, 1048], "hopper": 1040, "tokoroten": 1040, "vstolbunov": 1040, "wangz10": 1040, "yucheng": 1040, "zhauniarovich": 1040, "zac": 1040, "stewart": [1040, 1045, 1048, 1050], "zhai_pro": 1040, "zichen": 1040, "7946": 1041, "8355": 1041, "9010": 1041, "8040": 1041, "9149": 1041, "aman": [1041, 1042, 1043, 1049, 1050], "dalmia": [1041, 1042, 1043], "nate": [1041, 1042, 1048], "guerin": [1041, 1042], "lebedev": [1041, 1042], "utilis": 1041, "6497": 1041, "7724": 1041, "bing": [1041, 1042], "explained_variance_ratio": 1041, "7632": 1041, "jpfrancoia": [1041, 1042], "7676": 1041, "moham": [1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "affan": 1041, "7756": 1041, "7786": 1041, "srivatsan": [1041, 1042, 1045], "7799": 1041, "7490": [1041, 1042], "6282": 1041, "7301": 1041, "6178": 1041, "7680": 1041, "n_iters_": 1041, "7553": 1041, "ekaterina": [1041, 1042, 1043, 1044, 1046, 1051], "krivich": [1041, 1042, 1044], "5874": 1041, "7593": 1041, "7594": 1041, "7660": 1041, "7750": 1041, "7732": 1041, "artsion": 1041, "lieu": [1041, 1042], "grid_scores_": [1041, 1047, 1048], "leaveonelabelout": 1041, "leaveplabelout": 1041, "plural": 1041, "mean_tim": 1041, "std_time": 1041, "3204": 1041, "5291": 1041, "sounder": 1041, "7295": 1041, "5299": 1041, "bravi": 1041, "fouchet": 1041, "calinski_harabaz_scor": [1041, 1043], "harabaz": 1041, "6586": 1041, "4294": 1041, "6667": 1041, "6954": 1041, "unveil": 1041, "yelit": 1041, "basebag": [1041, 1043], "staub": 1041, "5805": 1041, "5251": 1041, "imacul": 1041, "1000x": 1041, "arfa": 1041, "6691": 1041, "6913": 1041, "5762": 1041, "utkarsh": [1041, 1042, 1043, 1044], "upadhyai": [1041, 1042, 1043, 1044], "6846": 1041, "5929": 1041, "podshumok": [1041, 1042], "6173": 1041, "ryad": 1041, "zenin": 1041, "devashish": 1041, "asish": [1041, 1042], "dowl": 1041, "6697": 1041, "ori": 1041, "ziv": 1041, "sear": 1041, "merritt": 1041, "7325": 1041, "7239": 1041, "hong": [1041, 1043, 1047, 1048, 1049, 1051], "guangguo": 1041, "jensen": [1041, 1047], "7419": 1041, "gregori": [1041, 1045, 1046, 1047, 1048], "stupp": [1041, 1042], "bernardo": 1041, "stein": 1041, "sparse_func": [1041, 1047], "7049": 1041, "7152": 1041, "load_boston": [1041, 1043, 1048], "7154": 1041, "manvendra": [1041, 1042], "singh": [1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "5540": 1041, "7248": 1041, "6764": 1041, "wenhua": 1041, "6817": 1041, "6902": 1041, "leonieborn": 1041, "5141": 1041, "4995": 1041, "5012": 1041, "_transform_select": 1041, "7194": 1041, "caio": [1041, 1043, 1045], "oliveira": [1041, 1043, 1045, 1049], "6182": 1041, "6121": 1041, "6472": 1041, "7350": 1041, "russel": [1041, 1042], "smith": [1041, 1042, 1043, 1044, 1045, 1047], "7159": 1041, "yichuan": [1041, 1042], "5460": 1041, "document_clust": 1041, "7353": 1041, "_search": 1041, "_check_param_grid": 1041, "xrang": 1041, "7323": 1041, "viacheslav": 1041, "kovalevskyi": 1041, "7101": 1041, "residual_metr": 1041, "6651": 1041, "reorgan": 1041, "7187": 1041, "7260": 1041, "sebasti\u00e1n": 1041, "vanrel": 1041, "leaveplabelsout": 1041, "6660": 1041, "unprefix": 1041, "7261": 1041, "aditya": [1041, 1043, 1044, 1045, 1049, 1050], "joshi": [1041, 1043, 1049, 1052], "loginov": 1041, "minyushkin": 1041, "rudi": 1041, "abadi": [1041, 1042], "saint": 1041, "alexfield": 1041, "alvaro": [1041, 1043], "ulloa": 1041, "alyssaq": 1041, "amlan": 1041, "kar": 1041, "giessel": 1041, "jackson": [1041, 1042, 1044], "murrai": [1041, 1042], "arafat": 1041, "archit": 1041, "asnt": 1041, "b0noi": 1041, "behzad": 1041, "tabibian": 1041, "kratzwald": 1041, "bhargav": 1041, "mangipudi": 1041, "blakeflei": 1041, "brandon": [1041, 1042, 1049, 1050], "carter": [1041, 1042, 1050], "camilo": 1041, "lamu": 1041, "carol": [1041, 1042], "Willing": [1041, 1042], "cass": 1041, "ceshin": 1041, "truong": 1041, "codevig": 1041, "shiebler": 1041, "hnyk": [1041, 1042], "elli": [1041, 1044], "nicholson": [1041, 1042, 1043], "thaler": 1041, "warshaw": 1041, "lasagna": 1041, "deborah": [1041, 1042, 1052], "definitelyuncertain": 1041, "didi": [1041, 1042, 1043, 1044], "zev": [1041, 1042, 1043, 1044], "dsquareindia": 1041, "edwinensa": 1041, "elia": 1041, "kuth": 1041, "fabio": 1041, "ticconi": 1041, "fisach": 1041, "donovan": 1041, "ghg": 1041, "giovanni": [1041, 1043], "cherubin": 1041, "lanzani": 1041, "glenn": 1041, "qian": [1041, 1046], "mohr": 1041, "govin": 1041, "vatsan": 1041, "reda": 1041, "gustav": 1041, "m\u00f6rtberg": 1041, "halwai": 1041, "harizo": [1041, 1042], "rajaona": [1041, 1042], "hashcode55": 1041, "hdmetor": 1041, "hobson": 1041, "lane": 1041, "bown": 1041, "igor": [1041, 1042, 1048], "andriushchenko": [1041, 1042], "inki": 1041, "hwang": 1041, "isaac": [1041, 1042, 1044, 1045, 1052], "sijaranamu": 1041, "iver": 1041, "jordal": 1041, "jackmartin": 1041, "fiedler": 1041, "routlei": 1041, "zike": 1041, "janna": 1041, "brettingen": 1041, "jarfa": 1041, "laska": 1041, "jblackburn": 1041, "levesqu": 1041, "hintz": 1041, "jeremynixon": 1041, "jeroen": 1041, "jessica": 1041, "jill": 1041, "j\u00eann": 1041, "vie": 1041, "jia": 1041, "jiyuan": 1041, "johannah": 1041, "boersma": 1041, "moeller": 1041, "striebel": [1041, 1042], "joncral": 1041, "jordi": 1041, "munoz": [1041, 1047], "jrfiedler": 1041, "juliankahnert": 1041, "juliathebrav": 1041, "kaichogami": 1041, "lyon": [1041, 1042], "kingjr": 1041, "kjell": 1041, "krishna": [1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "kalyan": 1041, "krishnakalyan3": 1041, "kvle": 1041, "putnam": 1041, "ldavid": 1041, "leig": 1041, "leightonzhang": 1041, "leland": [1041, 1042, 1043, 1045, 1046, 1051], "liang": [1041, 1046, 1047, 1052], "hsieh": 1041, "lizsz": 1041, "l\u00e9oni": 1041, "born": 1041, "maniteja": [1041, 1042, 1043], "nandana": [1041, 1042, 1043], "marco": [1041, 1043, 1044, 1048, 1049, 1050, 1053], "bao": [1041, 1049], "szepieniec": 1041, "madsen": [1041, 1043], "massil": 1041, "matheu": 1041, "duboi": [1041, 1043], "moroz": 1041, "scherer": 1041, "michiaki": 1041, "ariga": 1041, "moussa": 1041, "taifi": 1041, "mrandrewandrad": 1041, "mridul": 1041, "seth": 1041, "nadya": 1041, "naoya": [1041, 1042, 1043, 1044], "kanai": [1041, 1042, 1043], "nickledav": 1041, "nico": [1041, 1048], "ningchi": 1041, "nlathia": 1041, "okbalefthand": 1041, "okhlopkov": [1041, 1042], "pano": 1041, "lourida": 1041, "strickland": 1041, "perrin": 1041, "letelli": 1041, "pestrickland": 1041, "practicalswift": 1041, "qimu": 1041, "zheng": [1041, 1042, 1047], "rachit": [1041, 1047, 1050], "kansal": 1041, "ramana": [1041, 1042], "randi": 1041, "olson": 1041, "lutz": [1041, 1045, 1048, 1052], "schucker": 1041, "jain": [1041, 1042, 1043, 1047, 1049, 1050], "ruifeng": [1041, 1042, 1047], "r\u00e9my": 1041, "l\u00e9one": 1041, "saihttam": 1041, "saiw": 1041, "yeung": 1041, "shleifer": [1041, 1042], "sartaj": 1041, "sasank": 1041, "chilamkurthi": 1041, "seal": 1041, "shagun": 1041, "sodhani": 1041, "shanmuga": 1041, "shashank": [1041, 1047], "shekhar": 1041, "shawpan": 1041, "shengxiduan": 1041, "shota": 1041, "shuckle16": 1041, "smedbergm": 1041, "srvanrel": 1041, "leriqu": [1041, 1043], "taranjeet": 1041, "themrmax": [1041, 1042], "hallock": 1041, "moreau": [1041, 1042, 1043, 1044, 1045], "tkammi": 1041, "toastedcornflak": [1041, 1042], "tomdlt": 1041, "toshihiro": [1041, 1042, 1048], "kamishima": [1041, 1042], "tracer0tong": 1041, "hauck": 1041, "vo": [1041, 1049], "varun": [1041, 1042, 1043, 1049, 1050], "jewalikar": 1041, "vikram": [1041, 1050, 1051], "villu": 1041, "ruusmann": 1041, "walter": 1041, "waterponei": [1041, 1042], "wenjian": 1041, "welch": 1041, "wyseguy7": 1041, "xyguo": [1041, 1043], "yanlend": 1041, "yen": [1041, 1042], "yenchenlin": 1041, "yoav": 1041, "zivori": 1041, "10723": [1042, 1043], "9623": 1042, "undocu": 1042, "deleteri": 1042, "9677": 1042, "ashutosh": [1042, 1043, 1045, 1047], "correlation_model": 1042, "regression_model": 1042, "belatedli": 1042, "9717": 1042, "9693": 1042, "steingold": [1042, 1043], "9711": 1042, "goncalo": [1042, 1043], "rodrigu": [1042, 1043, 1048], "9641": 1042, "bourbeau": [1042, 1043, 1044], "9865": 1042, "sachin": [1042, 1043, 1049], "kelkar": [1042, 1043, 1045], "9922": 1042, "charli": [1042, 1043, 1051], "brummitt": [1042, 1043], "9945": 1042, "9830": 1042, "9600": 1042, "kerimov": [1042, 1043], "9593": 1042, "reiichiro": [1042, 1043], "nakano": [1042, 1043], "9604": 1042, "interim": 1042, "9558": 1042, "9847": 1042, "joan": [1042, 1043, 1044, 1045], "massich": [1042, 1043, 1044, 1045], "oli": 1042, "blum": 1042, "9697": 1042, "9750": 1042, "9788": 1042, "9815": 1042, "9802": 1042, "vrishank": [1042, 1043], "bhardwaj": [1042, 1043], "nagarjuna": [1042, 1043], "nathaniel": [1042, 1043, 1045], "diegodlh": [1042, 1043], "jkleint": [1042, 1043], "oliblum90": [1042, 1043], "pasbi": [1042, 1043], "gitter": [1042, 1043], "lawson": [1042, 1043, 1044], "nielsenmarkus11": [1042, 1043], "excit": 1042, "cautiou": 1042, "min_impurity_split": 1042, "7823": [1042, 1043], "8446": 1042, "5279": 1042, "8363": 1042, "5295": 1042, "7388": 1042, "userguid": 1042, "7655": 1042, "karan": [1042, 1043, 1044], "desai": [1042, 1044, 1047, 1048, 1050, 1051], "7739": 1042, "gasquez": 1042, "8120": 1042, "neeraj": 1042, "gangwar": 1042, "7548": 1042, "9206": 1042, "7441": 1042, "6101": 1042, "8698": 1042, "7794": 1042, "herilalaina": [1042, 1043, 1045], "rakotoarison": [1042, 1043, 1045], "5036": 1042, "4939": 1042, "esuli": [1042, 1047], "n_skips_": 1042, "7914": 1042, "horrel": 1042, "8591": 1042, "hadrien": [1042, 1045], "7838": 1042, "8835": 1042, "8061": 1042, "cordier": 1042, "6288": 1042, "9145": 1042, "reddi": [1042, 1043, 1044, 1049, 1052], "chinthala": 1042, "7721": 1042, "crall": [1042, 1048], "7685": 1042, "tommi": [1042, 1043, 1044], "l\u00f6fstedt": 1042, "9277": 1042, "hongkahjun": 1042, "7089": 1042, "randomized_svd_low_rank": 1042, "9067": 1042, "6181": 1042, "wendling": 1042, "8065": 1042, "lejeun": 1042, "7567": 1042, "jay": 1042, "doepk": 1042, "7573": 1042, "romain": [1042, 1047], "brault": 1042, "5229": 1042, "7990": 1042, "8586": 1042, "7723": 1042, "8028": 1042, "booth": 1042, "8005": 1042, "7863": 1042, "7506": 1042, "5991": 1042, "8845": 1042, "8053": 1042, "8282": 1042, "8117": 1042, "9259": 1042, "8094": 1042, "8335": 1042, "poughon": 1042, "7880": 1042, "karnofski": 1042, "935": 1042, "8931": 1042, "attractador": [1042, 1043], "8002": 1042, "8549": 1042, "zerodivisionerror": [1042, 1045, 1051], "7501": 1042, "dominik": [1042, 1051], "krzeminski": 1042, "7970": 1042, "8006": 1042, "p\u00f6lsterl": [1042, 1045, 1048], "8936": 1042, "8672": 1042, "mike": 1042, "benfield": 1042, "broke": 1042, "8068": 1042, "5732": 1042, "ytrue": 1042, "ypred": 1042, "8087": 1042, "7983": 1042, "8512": 1042, "8251": 1042, "aivision2020": 1042, "5814": 1042, "7849": 1042, "jair": 1042, "montoya": 1042, "martinez": 1042, "randomizedlasso": 1042, "5359": 1042, "9302": 1042, "8160": 1042, "8224": 1042, "gedeck": 1042, "vathsala": [1042, 1043, 1044, 1045], "achar": [1042, 1043, 1044, 1045], "9022": 1042, "mehmet": [1042, 1048], "basbug": 1042, "9024": 1042, "8973": 1042, "paulo": [1042, 1048, 1050], "haddad": 1042, "unmeaning": 1042, "6573": 1042, "quazi": [1042, 1043], "marufur": 1042, "rahman": [1042, 1043, 1047], "baselabelpropag": 1042, "9239": 1042, "andr": [1042, 1049], "ambrosio": 1042, "boechat": 1042, "early_exager": 1042, "assertionerror": 1042, "8992": 1042, "7954": 1042, "foreman": 1042, "9105": 1042, "9108": 1042, "8306": 1042, "7872": 1042, "_c_step": 1042, "3367": 1042, "steward": 1042, "8768": 1042, "detomaso": 1042, "6507": 1042, "jayzed82": 1042, "6126": 1042, "7814": 1042, "7702": 1042, "9219": 1042, "7771": 1042, "ang": 1042, "randomizedlogisticregress": 1042, "8259": 1042, "mandatorili": 1042, "7565": 1042, "8181": 1042, "basesearchcv": [1042, 1043], "8344": 1042, "eriksson": 1042, "7661": 1042, "8295": 1042, "batula": 1042, "dylan": [1042, 1045], "werner": [1042, 1047], "meier": 1042, "7365": 1042, "aleksandr": 1042, "sandrovskii": 1042, "5697": 1042, "stijn": 1042, "tonk": 1042, "6250": 1042, "8093": 1042, "bull": 1042, "9507": 1042, "7356": 1042, "dingwal": 1042, "_check_target": 1042, "8377": 1042, "5211": 1042, "rhinehart": 1042, "8159": 1042, "8198": 1042, "fetch_": 1042, "7944": 1042, "7825": 1042, "kathleen": 1042, "7376": 1042, "7331": 1042, "yangarbit": 1042, "__getstate__": [1042, 1050], "obstruct": 1042, "8316": 1042, "holger": 1042, "8010": 1042, "7986": 1042, "najera": 1042, "9289": 1042, "makedir": 1042, "9284": 1042, "sebastin": [1042, 1043], "alert": 1042, "lgtm": 1042, "9278": 1042, "heli": 1042, "8449": 1042, "9078": 1042, "purport": 1042, "sergul": [1042, 1043, 1046], "aydor": [1042, 1043, 1046], "8922": 1042, "8137": 1042, "8139": 1042, "8995": 1042, "2879": 1042, "7459": 1042, "7812": 1042, "9100": 1042, "8481": 1042, "8174": 1042, "tahar": 1042, "zanouda": 1042, "8854": 1042, "8874": 1042, "7998": 1042, "jiacheng": 1042, "argpartit": 1042, "frombuffer_empti": 1042, "in1d": 1042, "rankdata": 1042, "safe_copi": 1042, "eig": 1042, "fast_dot": 1042, "pinvh": [1042, 1044], "graph_laplacian": 1042, "sparsetool": 1042, "connected_compon": 1042, "check_decision_proba_consist": 1042, "shubham": [1042, 1045], "9019": 1042, "baseensembl": [1042, 1045], "7464": 1042, "rishikesh": 1042, "taehoon": [1042, 1043], "aashil": 1042, "balakumaran": [1042, 1043], "manoharan": [1042, 1043], "petrov": [1042, 1043, 1051], "minghui": [1042, 1043], "jc": [1042, 1043], "alexandercbooth": 1042, "chkoar": 1042, "aarshai": [1042, 1043], "gilliam": 1042, "subramanyam": 1042, "clement": [1042, 1043, 1047], "joudet": [1042, 1043], "robl": 1042, "kati": 1042, "luangkot": 1042, "lacchia": 1042, "akshay0724": 1042, "omtcyfz": 1042, "rickiepark": 1042, "jbdelafoss": 1042, "vivek": [1042, 1043, 1044, 1052], "elliott": 1042, "ldirer": 1042, "sid": 1042, "kapur": 1042, "midina": 1042, "mikebenfield": 1042, "sourav": [1042, 1045], "aseem": 1042, "bansal": 1042, "aishwaryark": 1042, "howel": 1042, "dokato": 1042, "kathi": [1042, 1045], "ferria": 1042, "nikita": [1042, 1043, 1045, 1048, 1049, 1050], "basil": 1042, "beirouti": 1042, "possa": 1042, "bednar": 1042, "janin": 1042, "harper": 1042, "artsiom": 1042, "ligo": 1042, "rahn": [1042, 1045], "seanpwilliam": 1042, "julian": [1042, 1043], "kuhlmann": [1042, 1043], "aubert": 1042, "j\u00f6rn": 1042, "hee": [1042, 1045], "shivamgargsya": [1042, 1046, 1048], "kat": 1042, "hempstalk": 1042, "kaushik": [1042, 1049, 1050, 1051], "lakshmikanth": 1042, "kennedi": [1042, 1045, 1052], "yap": 1042, "kiril": [1042, 1043, 1045, 1047], "bobyrev": 1042, "imbert": [1042, 1044, 1047, 1049, 1052], "lera": 1042, "douillard": 1042, "mainak": 1042, "tobychees": [1042, 1043], "manraj": 1042, "marc": [1042, 1044, 1045, 1051], "meketon": 1042, "marcofalk": 1042, "gilch": 1042, "mehul": 1042, "ahuja": [1042, 1049, 1050], "goetz": [1042, 1043], "dezub": 1042, "baumgartn": 1042, "vibrantabhi19": 1042, "golubin": 1042, "milen": 1042, "paskov": 1042, "antonin": 1042, "carett": 1042, "morikko": 1042, "mrmjauh": 1042, "nalepa": 1042, "namiya": 1042, "narinek": [1042, 1043], "angu": [1042, 1043, 1049], "nicol": 1042, "vavrova": 1042, "nitish": 1042, "pandei": [1042, 1047], "daniil": 1042, "olegovich": 1042, "craze": 1042, "om": 1042, "parmind": 1042, "patrick": [1042, 1043, 1048, 1049, 1052], "carlson": 1042, "ganssl": 1042, "lorek": 1042, "pete": [1042, 1046, 1047], "bachant": 1042, "csizsek": 1042, "jong": 1042, "puneet": 1042, "mathur": [1042, 1044, 1045, 1050, 1051], "quentin": [1042, 1043, 1044, 1051, 1052], "hibon": 1042, "1kastner": 1042, "rameshwar": [1042, 1043], "bhaskaran": [1042, 1043], "rebecca": 1042, "bilbro": 1042, "remi": 1042, "rampin": 1042, "pratik": 1042, "agarw": [1042, 1043, 1045], "sailesh": [1042, 1043], "choyal": [1042, 1043], "samson": 1042, "samu\u00ebl": 1042, "weber": 1042, "sarah": [1042, 1044, 1047], "abhyudai": 1042, "sharan": [1042, 1043], "yalburgi": [1042, 1043], "willduan": 1042, "siddharth": [1042, 1046], "almer": 1042, "theofilo": 1042, "papapanagiot": 1042, "alison": 1042, "boucher": 1042, "folkman": 1042, "jung": [1042, 1046, 1050], "shenoi": 1042, "vilhelm": [1042, 1043], "ehrenheim": [1042, 1043], "alan": [1042, 1043, 1046, 1048, 1049], "yee": [1042, 1043], "warut": [1042, 1043], "vijitbenjaronk": [1042, 1043], "yuichi": 1042, "fujikawa": 1042, "affanv14": 1042, "andreh7": 1042, "bradi": 1042, "salz": 1042, "campustrampu": 1042, "agamemnon": [1042, 1043, 1044, 1045, 1047, 1048], "krasouli": [1042, 1043, 1044, 1045, 1047, 1048], "ditenberg": 1042, "elena": 1042, "sharova": 1042, "filipj8": [1042, 1043], "fukatani": 1042, "guiniol": 1042, "guoci": 1042, "hakaa1": [1042, 1043], "xhy": 1042, "jakirkham": [1042, 1043, 1044, 1050, 1051], "jaroslaw": 1042, "jeroko": 1042, "jmontoyam": 1042, "josephsalmon": [1042, 1043, 1044], "jschendel": [1042, 1043], "leereev": 1042, "hahn": [1042, 1043], "mathurinm": [1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mehak": 1042, "sachdeva": 1042, "mlewis1729": 1042, "mlliou112": 1042, "mthorrel": [1042, 1045], "ndingwal": 1042, "nuff": 1042, "plagre": 1042, "pldtc325": 1042, "breno": [1042, 1043], "olsen": 1042, "alfano": 1042, "burn": [1042, 1043], "polmauri": 1042, "charlton": 1042, "austin": 1042, "chayant": 1042, "t15h": 1042, "chinmaya": 1042, "pancholi": 1042, "danielsen": 1042, "chung": [1042, 1043], "pravarmahajan": [1042, 1043], "dariu": [1042, 1043], "morawiec": [1042, 1043], "haberth\u00fcr": 1042, "heryanto": 1042, "kirkbi": [1042, 1043], "rashchedrin": 1042, "gertrud": 1042, "devansh": [1042, 1043], "dickson": 1042, "baxlei": 1042, "don86": 1042, "klarup": 1042, "elizabeth": [1042, 1044, 1047], "ferriss": 1042, "ellen": 1042, "egli": [1042, 1052], "chieh": [1042, 1043], "chou": [1042, 1043], "grzegorz": [1042, 1045], "szpak": [1042, 1045], "zxcvbniu": 1042, "icyblad": 1042, "ilya": 1042, "laughlin": 1042, "iv\u00e1n": [1042, 1048], "vall\u00e9": 1042, "aur\u00e9lien": [1042, 1043, 1044, 1048, 1049], "bellet": [1042, 1043, 1044], "mahapatra": 1042, "couldn": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bundl": [1043, 1044], "indexerror": [1043, 1044], "11756": [1043, 1044], "14237": [1043, 1044], "schuder": [1043, 1044, 1045], "13903": [1043, 1044], "13124": [1043, 1044], "13772": [1043, 1044], "vya": [1043, 1044, 1045], "12949": 1043, "prabakaran": [1043, 1044, 1047, 1049, 1050], "kumaresshan": [1043, 1044, 1047], "12946": 1043, "tallott": 1043, "13276": 1043, "13005": 1043, "13312": 1043, "11295": 1043, "vacaliuc": [1043, 1044], "13046": 1043, "12360": 1043, "aakanksha": 1043, "13134": 1043, "sandro": [1043, 1050], "casagrand": [1043, 1044], "12881": 1043, "13165": 1043, "13221": 1043, "bertrandhaut": [1043, 1044], "raghunathan": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "dowon": [1043, 1044], "aria": [1043, 1044, 1050], "fibins": [1043, 1044], "finn": [1043, 1044], "shea": [1043, 1044], "joaak": [1043, 1044], "m\u00e9hault": [1043, 1044], "kms15": [1043, 1044], "kossori": [1043, 1044], "aruku": [1043, 1044], "lakshya": [1043, 1044, 1045], "ib\u00e1\u00f1ez": [1043, 1044, 1047], "gorelli": [1043, 1044, 1048, 1050, 1053], "marcogorelli": [1043, 1044], "mferrari3": [1043, 1044], "micka\u00ebl": [1043, 1044], "schoentgen": [1043, 1044], "pavlo": [1043, 1044], "kalli": [1043, 1044], "glaser": [1043, 1044], "pierretallott": [1043, 1044, 1045], "kapoor": [1043, 1044], "sandrocasagrand": [1043, 1044], "tashai": [1043, 1044], "vishaal": [1043, 1044], "zhuyi": [1043, 1044], "ziji": [1043, 1044], "zj": [1043, 1044], "poh": [1043, 1044], "12704": 1043, "12701": 1043, "12685": 1043, "12699": 1043, "adanhawth": [1043, 1044], "stine": [1043, 1044], "feda": [1043, 1044], "curic": [1043, 1044], "jeremiedbb": [1043, 1044, 1045], "katrin": [1043, 1044], "leinweb": [1043, 1044], "muhammad": [1043, 1044, 1048], "hassaan": [1043, 1044], "rafiqu": [1043, 1044], "paczuski": [1043, 1044], "waterburi": [1043, 1044], "shivam": [1043, 1044, 1045], "kotwalia": [1043, 1044], "12159": 1043, "12105": 1043, "11912": 1043, "12304": 1043, "12339": 1043, "12246": 1043, "10811": 1043, "feldbauer": [1043, 1044, 1045, 1046, 1049], "12441": 1043, "12517": 1043, "12234": 1043, "12165": 1043, "12388": 1043, "connor": [1043, 1048, 1052], "tann": [1043, 1048], "12393": 1043, "12122": 1043, "sharedmem": 1043, "12518": 1043, "12481": 1043, "12612": 1043, "12211": 1043, "lisa": [1043, 1044, 1046, 1047, 1049, 1050], "hannel": [1043, 1044], "melissa": 1043, "ferrari": 1043, "12451": 1043, "12171": 1043, "12365": 1043, "_encod": 1043, "12514": 1043, "12522": 1043, "12471": 1043, "marzinotto": [1043, 1044], "12317": 1043, "12338": 1043, "bauk": [1043, 1044], "12625": 1043, "sklearn_site_joblib": 1043, "12350": 1043, "12467": 1043, "unvendor": 1043, "12345": 1043, "navarret": [1043, 1044, 1045], "benjastudio": [1043, 1044], "cheuk": [1043, 1044], "connossor": [1043, 1044], "levinson": [1043, 1044], "kieker": [1043, 1044], "kataev": [1043, 1044], "dillon": [1043, 1044, 1045], "gardner": [1043, 1044], "vukolov": [1043, 1044], "caselli": [1043, 1044], "gauravahlawat": [1043, 1044], "gustavo": [1043, 1044, 1049], "haroldfox": [1043, 1044], "jacklangerman": [1043, 1044], "jacopo": [1043, 1044], "notarstefano": [1043, 1044], "janvanrijn": [1043, 1044], "jdethuren": [1043, 1044], "koen": [1043, 1044], "kushal": [1043, 1044], "chauhan": [1043, 1044, 1050, 1051], "jie": [1043, 1044, 1047], "lili": [1043, 1044], "xiong": [1043, 1044, 1049], "liam": [1043, 1044], "melsyt": [1043, 1044], "nichola": [1043, 1044, 1046], "shebanov": [1043, 1044], "oleksandr": [1043, 1044, 1045, 1046, 1049], "pavlyk": [1043, 1044, 1045, 1046], "hausamann": [1043, 1044], "pulkit": [1043, 1044, 1046], "maloo": [1043, 1044], "batista": [1043, 1044, 1048], "radostin": [1043, 1044], "stoyanov": [1043, 1044], "ramil": [1043, 1044], "nugmanov": [1043, 1044], "rebekah": [1043, 1044, 1045], "roopam": [1043, 1044], "tiernei": [1043, 1044, 1045], "sylvainlan": [1043, 1044, 1045, 1046, 1047], "takingitcasu": [1043, 1044], "tulio": [1043, 1044], "xing": [1043, 1044], "zach": [1043, 1044, 1049], "mountain": 1043, "sorri": 1043, "basemultilayerperceptron": [1043, 1045], "11924": 1043, "macbook": 1043, "9354": 1043, "9372": 1043, "astel": 1043, "10933": 1043, "hansen": 1043, "10471": 1043, "gaurav": [1043, 1044, 1045, 1046, 1047, 1049], "dhingra": [1043, 1044, 1047, 1052], "8003": 1043, "jo\u00ebl": 1043, "billaud": 1043, "10059": 1043, "braun": 1043, "9612": 1043, "jonatan": 1043, "samoocha": 1043, "8129": 1043, "margeta": 1043, "k_means_elkan": 1043, "11353": 1043, "11901": 1043, "9875": 1043, "9012": 1043, "11315": 1043, "9041": 1043, "9858": 1043, "artiem": 1043, "krinitsyn": 1043, "9908": 1043, "8617": 1043, "maskani": [1043, 1045, 1046, 1047], "filali": 1043, "konstantino": [1043, 1052], "katriopla": 1043, "10774": 1043, "catalfo": 1043, "10795": 1043, "takeshi": [1043, 1048, 1049, 1050], "yoshizawa": 1043, "11082": 1043, "sadhana": 1043, "srinivasan": [1043, 1046], "9731": 1043, "10045": 1043, "fetch_mldata": 1043, "11466": 1043, "6374": 1043, "normalize_compon": [1043, 1045], "11585": 1043, "ivan": [1043, 1044, 1047, 1050], "panico": [1043, 1047], "11420": 1043, "6452": 1043, "walli": 1043, "gauz": 1043, "9492": 1043, "8484": 1043, "9886": 1043, "underflow": [1043, 1048], "10142": 1043, "5956": 1043, "_class_mean": 1043, "_class_cov": 1043, "10898": 1043, "nanxin": 1043, "9832": 1043, "11951": 1043, "r\u00fcdiger": [1043, 1044, 1046], "busch": [1043, 1044, 1046], "9707": 1043, "wan": 1043, "7071": 1043, "9157": 1043, "11176": 1043, "forsyth": 1043, "11542": 1043, "anna": 1043, "9524": 1043, "9723": 1043, "10908": 1043, "10899": 1043, "melderi": 1043, "10101": 1043, "10\u2079": 1043, "9147": 1043, "clae": 1043, "fredrik": 1043, "mannbi": 1043, "10441": 1043, "mayur": 1043, "kulkarni": 1043, "6689": 1043, "nihar": 1043, "sheth": 1043, "11293": 1043, "9656": 1043, "greenhal": 1043, "n_features_to_comput": 1043, "9222": 1043, "hoh": 1043, "9234": 1043, "andrewww": 1043, "8075": 1043, "11211": 1043, "9484": 1043, "dalla": 1043, "card": 1043, "9043": 1043, "10112": 1043, "logistic_regression_path": [1043, 1044], "11724": 1043, "9939": 1043, "westov": 1043, "10998": 1043, "vazelh": [1043, 1044, 1045], "10071": 1043, "10153": 1043, "d\u00f6pfert": 1043, "10095": 1043, "cv_valu": 1043, "10297": 1043, "mabel": [1043, 1047], "10581": 1043, "yacin": 1043, "mazari": 1043, "10687": 1043, "10836": 1043, "aishwarya": 1043, "10397": 1043, "10992": 1043, "11327": 1043, "11905": 1043, "9837": 1043, "10593": 1043, "10610": 1043, "8554": 1043, "9775": 1043, "10827": 1043, "osa": 1043, "8066": 1043, "10587": 1043, "3840": 1043, "niederb\u00fchl": 1043, "9521": 1043, "11124": 1043, "arya": 1043, "11160": 1043, "barkhorn": 1043, "11679": 1043, "pacha": 1043, "10845": 1043, "perez": [1043, 1050], "parra": 1043, "toledano": 1043, "10999": 1043, "memoryerror": [1043, 1047], "11135": 1043, "10377": 1043, "9786": 1043, "10093": 1043, "alexryndin": 1043, "9772": 1043, "9515": 1043, "liddel": 1043, "manh": 1043, "dao": 1043, "9851": 1043, "10280": 1043, "10336": 1043, "haoran": 1043, "basemixtur": [1043, 1044], "10740": 1043, "10869": 1043, "g\u00e9ron": 1043, "9686": 1043, "11310": 1043, "_fit_and_scor": 1043, "11576": 1043, "ronsin": [1043, 1044, 1052], "_run_search": 1043, "9599": 1043, "11006": 1043, "11557": 1043, "boucaud": 1043, "iid": 1043, "9085": 1043, "10677": 1043, "zhdanovich": 1043, "10982": 1043, "juliet": 1043, "lawton": 1043, "10928": 1043, "solutu": 1043, "immensu": 1043, "9257": 1043, "8190": 1043, "alcorn": 1043, "9681": 1043, "mottl": [1043, 1044], "10005": 1043, "10346": 1043, "tobia": [1043, 1048, 1050], "10887": 1043, "11136": 1043, "4394": 1043, "9579": 1043, "kober": 1043, "9655": 1043, "bjerr": 1043, "11556": 1043, "11774": 1043, "9456": 1043, "9304": 1043, "11144": [1043, 1044], "9151": 1043, "10521": 1043, "7668": 1043, "9647": 1043, "10195": 1043, "10192": 1043, "11272": 1043, "11467": 1043, "11505": 1043, "giusepp": [1043, 1044], "costa": [1043, 1048], "10210": 1043, "11520": 1043, "11011": 1043, "11005": 1043, "11308": 1043, "11206": 1043, "11306": 1043, "10437": 1043, "lucija": 1043, "gregov": 1043, "10452": 1043, "10181": 1043, "nirvan": [1043, 1047], "anjirbag": 1043, "9399": 1043, "10913": 1043, "rodrigo": 1043, "agundez": 1043, "10458": 1043, "9816": 1043, "newei": 1043, "11042": 1043, "11235": 1043, "active_features_": 1043, "feature_indices_": 1043, "n_values_": 1043, "9726": 1043, "10829": 1043, "gilberto": 1043, "olimpio": 1043, "10655": 1043, "python2": 1043, "10412": 1043, "jiongyan": 1043, "9497": 1043, "8361": 1043, "neo": 1043, "_criterion": 1043, "classificationcriterion": 1043, "regressioncriterion": 1043, "10325": 1043, "camil": [1043, 1051, 1052], "stap": 1043, "basedecisiontre": [1043, 1044, 1047], "10536": 1043, "ohayon": [1043, 1044, 1051], "11464": 1043, "stott": 1043, "10663": 1043, "10229": 1043, "11553": 1043, "10881": 1043, "sevin": 1043, "10306": 1043, "siebert": 1043, "11741": 1043, "11166": 1043, "pypy3": 1043, "v5": 1043, "11010": 1043, "lami": 1043, "11596": 1043, "marcu": [1043, 1052], "voss": 1043, "9569": 1043, "12462": 1043, "zachariah": 1043, "10474": 1043, "10500": 1043, "9701": 1043, "9378": 1043, "check_set_param": 1043, "7738": 1043, "alvin": 1043, "chiang": 1043, "8102": 1043, "ankita": 1043, "sinha": [1043, 1052], "check_methods_subset_invari": [1043, 1049], "10428": 1043, "check_sample_weights_pandas_seri": 1043, "11558": 1043, "211217613": 1043, "absolutelynowarranti": 1043, "richi": 1043, "halford": [1043, 1050, 1051], "adelr": 1043, "adityadaflapurkar": 1043, "aidan": 1043, "fitzgerald": 1043, "aishgrt1": 1043, "akash": 1043, "shivram": 1043, "lenail": [1043, 1047], "egg": 1043, "diaz": 1043, "amanda": [1043, 1046, 1047, 1048, 1049], "aniruddha": 1043, "annaayzenshtat": 1043, "antonio": [1043, 1045], "quinonez": 1043, "anubhav": 1043, "marwaha": 1043, "arik": 1043, "pamnani": 1043, "ozga": 1043, "arunava": 1043, "geron": [1043, 1048, 1049], "ayush": [1043, 1048], "bangda": 1043, "bastian": 1043, "venthur": 1043, "benn": 1043, "koonc": 1043, "cclauss": 1043, "chadi": 1043, "kamar": 1043, "holdgraf": 1043, "hirsch": 1043, "hogan": 1043, "cnx": 1043, "cwitt": 1043, "ferreira": [1043, 1048, 1049], "gomez": [1043, 1050, 1052], "klevebr": 1043, "shwed": 1043, "mohn": [1043, 1047], "danil": 1043, "baibak": [1043, 1044], "beach": 1043, "pickup": 1043, "derek": 1043, "niederhut": [1043, 1045], "dilutedsauc": 1043, "dlovel": 1043, "dor": 1043, "dougla": 1043, "duhaim": 1043, "tuzova": 1043, "eunji": 1043, "farahsae": 1043, "raimundo": 1043, "fenx": 1043, "frankhui": 1043, "franz": 1043, "wompner": 1043, "freija": 1043, "descamp": 1043, "frsi": 1043, "calvo": [1043, 1044], "georgi": [1043, 1046], "peev": [1043, 1046], "gkevinyen5418": 1043, "vermeil": 1043, "hongh": 1043, "hossein": [1043, 1044, 1045], "pourbozorg": [1043, 1044, 1045], "hristo": [1043, 1050], "hunan": 1043, "rostomyan": 1043, "iampat": 1043, "jaewon": 1043, "malcolm": 1043, "jami": 1043, "wolosonovich": 1043, "jeb": 1043, "bearer": 1043, "jinkun": 1043, "jjabl": 1043, "johnstott": 1043, "jotasi": 1043, "julietcl": 1043, "shenk": 1043, "karl": 1043, "kasper": 1043, "primdal": 1043, "lauritzen": 1043, "ksemb": 1043, "kuai": [1043, 1044], "kyeongpil": 1043, "kang": [1043, 1045], "kye": 1043, "kyledrogo": 1043, "l\u00e9o": 1043, "liutong": 1043, "lizao": 1043, "lkjcalc": 1043, "louib": [1043, 1044], "luciano": [1043, 1050], "luke": 1043, "persola": 1043, "markiwanchyshyn": 1043, "marsgui": 1043, "gubri": [1043, 1044], "koko": [1043, 1049, 1050], "copeland": [1043, 1044], "meghann": [1043, 1045], "minh": 1043, "jamaoui": [1043, 1044, 1047], "mohammad": [1043, 1044], "shahebaz": 1043, "muayyad": 1043, "alsadi": 1043, "nabarun": 1043, "pal": [1043, 1049], "narendran": 1043, "santhanam": 1043, "suh": 1043, "eng": 1043, "av": 1043, "nicolau": 1043, "werneck": 1043, "titov": [1043, 1045, 1048, 1049], "nilesh": 1043, "kevlani": 1043, "notmatthancock": [1043, 1045], "nzw": 1043, "oren": 1043, "milman": 1043, "osaid": 1043, "rehman": 1043, "nasir": 1043, "fernand": [1043, 1049, 1050], "olden": 1043, "pierreablin": 1043, "pietruh": 1043, "pinaki": 1043, "nath": 1043, "chowdhuri": [1043, 1049], "piotr": [1043, 1044], "szyma\u0144ski": [1043, 1044], "pradeep": [1043, 1044], "raamana": [1043, 1044], "pravar": 1043, "mahajan": [1043, 1045, 1052], "qingi": 1043, "rajendra": 1043, "arora": [1043, 1050], "rankylau": 1043, "kosobrodov": 1043, "rragundez": 1043, "sagnik": 1043, "bhattacharya": 1043, "radhakrishnan": 1043, "saqib": 1043, "nizam": 1043, "shamsi": 1043, "satish": 1043, "gigant": [1043, 1045, 1050, 1051], "flennerhag": 1043, "sebastien": 1043, "shalil": 1043, "awalei": 1043, "shangwu": [1043, 1044], "sharad": 1043, "vijalapuram": 1043, "shenhanc78": 1043, "rastogi": 1043, "siftikha": 1043, "sinclert": 1043, "p\u00e9rez": 1043, "solutusimmensu": 1043, "somya": 1043, "anand": [1043, 1047], "srajan": 1043, "paliw": 1043, "sriharsha": [1043, 1044], "hatwar": [1043, 1044], "mcdowel": 1043, "syonekura": 1043, "takanori": 1043, "hayashi": 1043, "tarcusx": 1043, "theriley106": 1043, "heavei": 1043, "augspurg": [1043, 1045], "trishnendu": 1043, "ghorai": 1043, "twosigmajab": 1043, "umar": [1043, 1044], "farouk": [1043, 1044], "urvang": [1043, 1045], "patel": [1043, 1045, 1046, 1047, 1049], "vadim": [1043, 1047, 1048], "markovtsev": 1043, "vinit": 1043, "vinod": 1043, "viraj": 1043, "mavani": 1043, "navkal": 1043, "vqean3": [1043, 1044], "vufg": 1043, "wallygauz": 1043, "wdevazelh": 1043, "barnett": 1043, "rosenfeld": 1043, "yime": 1043, "ymazari": 1043, "yufeng": 1043, "griffith": [1043, 1044], "z\u00e9": 1043, "vin\u00edciu": 1043, "zhenq": 1043, "zhiqe": 1043, "12955": 1044, "klopfer": 1044, "14197": 1044, "14024": 1044, "nicolashug": 1044, "13974": 1044, "hoang": [1044, 1045], "fhoang7": 1044, "14393": 1044, "guillem": [1044, 1045, 1050], "subi": [1044, 1045, 1050], "14087": 1044, "14067": 1044, "stalei": [1044, 1045], "14092": 1044, "14053": 1044, "13947": 1044, "instanci": 1044, "13910": 1044, "13894": 1044, "myatt": [1044, 1045], "min_max_axi": 1044, "13741": 1044, "roddi": [1044, 1045], "macsween": [1044, 1045], "14309": 1044, "13864": 1044, "paresh": [1044, 1045], "13877": 1044, "_sag": 1044, "sag_solv": 1044, "3591": 1044, "13317": 1044, "13157": 1044, "13086": 1044, "cole": 1044, "13485": 1044, "assia": 1044, "benbihi": 1044, "13651": 1044, "reloc": 1044, "13486": 1044, "13427": 1044, "couvreur": [1044, 1045], "9069": 1044, "13835": 1044, "10727": 1044, "wood": 1044, "13250": 1044, "13241": 1044, "12143": 1044, "11650": 1044, "12988": 1044, "8769": 1044, "11000": 1044, "thibault": 1044, "sejourn": 1044, "changedbehaviourwarn": 1044, "11526": 1044, "6848": 1044, "glemaitr": [1044, 1045, 1047], "11727": 1044, "13266": 1044, "13545": 1044, "sorro": 1044, "12807": 1044, "12513": 1044, "12543": 1044, "storch": 1044, "13260": 1044, "13283": 1044, "13524": 1044, "13174": 1044, "13496": 1044, "13620": 1044, "12436": 1044, "12983": 1044, "13251": 1044, "joshuakennethjon": 1044, "12715": 1044, "13164": 1044, "12834": 1044, "leastsquareserror": 1044, "update_terminal_region": 1044, "6463": 1044, "movelikeriv": 1044, "13193": 1044, "12599": 1044, "13779": 1044, "13780": 1044, "12916": 1044, "13641": 1044, "8478": 1044, "12177": 1044, "12583": 1044, "13601": 1044, "danylo": 1044, "densif": 1044, "13240": 1044, "bartosz": 1044, "13562": 1044, "11646": 1044, "11699": 1044, "make_dataset": 1044, "13336": 1044, "toleranbc": 1044, "11754": 1044, "13397": 1044, "fagan": 1044, "12174": 1044, "12972": 1044, "lucio": 1044, "fernandez": 1044, "arjona": 1044, "coeffeci": 1044, "13279": 1044, "13328": 1044, "13389": 1044, "basesgdclassifi": 1044, "13422": 1044, "cl\u00e9ment": [1044, 1048, 1050], "doumouro": 1044, "unhandl": 1044, "13363": 1044, "12821": 1044, "13350": 1044, "j\u00e9r\u00f4me": [1044, 1045, 1046, 1052], "dock\u00e8": [1044, 1045, 1046, 1052], "9907": 1044, "12232": 1044, "sangeeth": 1044, "11179": 1044, "13151": 1044, "12568": 1044, "8216": 1044, "romuald": 1044, "menuet": 1044, "12732": 1044, "12334": 1044, "13607": 1044, "12855": 1044, "pawel": 1044, "sendyk": 1044, "13628": 1044, "13447": 1044, "10580": 1044, "sandra": [1044, 1050], "mitrov": 1044, "13554": 1044, "celelibi": 1044, "13142": 1044, "11354": 1044, "12613": 1044, "12669": 1044, "torrella": [1044, 1045, 1051], "12861": 1044, "8773": 1044, "13366": 1044, "fournier": 1044, "10440": 1044, "12222": 1044, "10058": 1044, "chiotelli": 1044, "12279": 1044, "12582": 1044, "my_pipelin": 1044, "2568": 1044, "make_": 1044, "11364": 1044, "baze": 1044, "petrushev": 1044, "__len__": 1044, "13439": 1044, "12908": 1044, "drew": 1044, "13253": 1044, "12116": 1044, "12197": 1044, "12251": 1044, "float16": 1044, "13007": 1044, "raffaello": 1044, "baluyot": 1044, "13333": 1044, "13459": 1044, "hunter": 1044, "mcgushion": 1044, "8508": 1044, "6261": 1044, "vettigli": 1044, "justglow": 1044, "12300": 1044, "11458": 1044, "mitar": 1044, "milutinov": 1044, "12344": 1044, "13549": 1044, "warn_on_dtyp": 1044, "check_pairwise_arrai": 1044, "13382": 1044, "prathmesh": 1044, "saval": 1044, "11705": 1044, "11973": 1044, "our_rand_r": 1044, "madhura": [1044, 1046, 1047, 1050, 1051], "parikh": [1044, 1049, 1050, 1051, 1052], "13531": 1044, "check_fit_idempot": 1044, "alberto": [1044, 1048, 1049], "torr": 1044, "amourav": 1044, "assiaben": 1044, "micha\u0142owski": 1044, "brentfagan": 1044, "chenal": [1044, 1045, 1047], "choe": 1044, "drewmjohnston": 1044, "dror": 1044, "atariah": 1044, "esvhd": 1044, "falak": 1044, "gandenberg": 1044, "luqi": 1044, "jf": 1044, "kulbear": 1044, "leandro": [1044, 1048], "hermida": [1044, 1048], "luk": 1044, "manimaran": [1044, 1046, 1047, 1048, 1049], "gaido": 1044, "marinelm": 1044, "masstran": 1044, "roeschk": 1044, "aftab": 1044, "abdela": 1044, "ibraheem": 1044, "mwestt": 1044, "iijima": 1044, "oresti": 1044, "osman": [1044, 1050], "flanagan": [1044, 1045], "soriano": 1044, "peai": 1044, "pim": 1044, "haan": 1044, "raf": 1044, "rajdeep": 1044, "dua": 1044, "ra\u00fal": 1044, "garc\u00eda": [1044, 1045, 1050], "lekhwani": 1044, "varma": 1044, "shiyu": 1044, "duan": [1044, 1046], "smari": [1044, 1045, 1046], "st\u00e9phane": [1044, 1045, 1049, 1050], "surgan12": 1044, "thibsej": 1044, "xhan": 1044, "xinyuliu12": 1044, "zayd": 1044, "hammoudeh": 1044, "16397": [1045, 1046], "16500": 1045, "16505": 1045, "16076": 1045, "shack": [1045, 1046, 1047], "15930": 1045, "inder128": 1045, "15810": 1045, "15898": 1045, "gargsya": 1045, "15933": 1045, "15760": 1045, "15888": 1045, "15936": 1045, "dizietasahi": 1045, "15879": 1045, "bibhash": [1045, 1046], "chandra": [1045, 1046, 1049], "mitra": [1045, 1046, 1050], "15937": 1045, "blyston": [1045, 1046], "15863": 1045, "abstractmethod": 1045, "_check_x": 1045, "basenb": 1045, "15996": 1045, "brigitta": [1045, 1046, 1047, 1051], "sip\u0151cz": [1045, 1046, 1047, 1051], "15751": 1045, "tirth": [1045, 1046], "15868": 1045, "nikla": [1045, 1046], "smedemark": 1045, "marguli": 1045, "15797": 1045, "15947": 1045, "revamp": 1045, "14849": 1045, "_name_estim": 1045, "_gb": 1045, "facto": 1045, "_birch": 1045, "9250": 1045, "12927": 1045, "deprecationwarn": 1045, "hinder": 1045, "15080": 1045, "14464": 1045, "13575": 1045, "10482": 1045, "13726": 1045, "shuzh": 1045, "9288": 1045, "15057": 1045, "korolev": 1045, "15120": 1045, "7943": 1045, "12303": 1045, "14510": 1045, "14890": 1045, "miguel": 1045, "cabrera": 1045, "14544": 1045, "15304": 1045, "jaim": 1045, "ferrando": 1045, "huerta": 1045, "12068": 1045, "12145": 1045, "13609": 1045, "camila": 1045, "williamson": 1045, "15661": 1045, "15160": 1045, "14259": 1045, "14764": 1045, "14740": 1045, "st\u00e9phan": 1045, "tulken": 1045, "14623": 1045, "sarra": 1045, "habchi": 1045, "15257": 1045, "willocx": 1045, "12650": 1045, "13960": 1045, "multiouput": 1045, "14908": 1045, "martina": [1045, 1047], "vila": [1045, 1047], "15382": 1045, "14933": 1045, "15138": 1045, "cusick": 1045, "14406": 1045, "14012": 1045, "faouzi": [1045, 1046], "13769": 1045, "14194": 1045, "least_absolute_devi": [1045, 1047, 1048], "13896": 1045, "13933": 1045, "14710": 1045, "categorical_crossentropi": [1045, 1049], "14869": 1045, "14682": 1045, "hancock": 1045, "5963": 1045, "pablo": [1045, 1048, 1049], "dubou": 1045, "14287": 1045, "15375": 1045, "14305": 1045, "14114": 1045, "15084": 1045, "14294": 1045, "14907": 1045, "14602": 1045, "chawla": 1045, "vectorizermixin": 1045, "14430": 1045, "strip_accents_unicod": 1045, "15100": 1045, "gradi": 1045, "overflowerror": 1045, "15463": 1045, "norvan": 1045, "sahin": 1045, "14520": 1045, "11635": 1045, "alec": 1045, "13704": 1045, "15557": 1045, "14378": 1045, "masashi": [1045, 1047], "shibata": 1045, "ashim": 1045, "bhattarai": 1045, "15010": 1045, "skip_comput": 1045, "13773": 1045, "14356": 1045, "15393": 1045, "venkatachalam": [1045, 1046, 1047, 1048, 1049, 1052], "14646": 1045, "14028": 1045, "15429": 1045, "14706": 1045, "14108": 1045, "14170": 1045, "14296": 1045, "13618": 1045, "13995": 1045, "14458": 1045, "14591": 1045, "14864": 1045, "15044": 1045, "15086": 1045, "15038": 1045, "15082": 1045, "13213": 1045, "14647": 1045, "linalgerror": 1045, "13393": 1045, "13707": 1045, "training_data_": 1045, "14357": 1045, "14900": 1045, "socastro": [1045, 1051], "9951": 1045, "14936": 1045, "15083": 1045, "12789": 1045, "15274": 1045, "13938": 1045, "15049": 1045, "toccac": 1045, "ptocca": 1045, "13231": 1045, "dong": 1045, "13467": 1045, "14595": 1045, "14865": 1045, "l\u00e9onard": [1045, 1050], "binet": [1045, 1050], "14732": 1045, "14417": 1045, "15625": 1045, "12258": 1045, "14898": 1045, "matcovici": 1045, "14593": 1045, "reboul": 1045, "14549": 1045, "14704": 1045, "15096": 1045, "14629": 1045, "15488": 1045, "15490": 1045, "12569": 1045, "bicker": 1045, "9597": 1045, "wenbo": [1045, 1047], "zhao": [1045, 1047, 1048, 1049, 1050], "14336": 1045, "dexter": 1045, "9274": 1045, "perri": 1045, "13806": 1045, "ana\u00ebl": 1045, "beaugnon": 1045, "15119": 1045, "15053": 1045, "13290": 1045, "13987": 1045, "_pairwis": [1045, 1047], "13925": 1045, "robson": 1045, "15524": 1045, "xun": [1045, 1047], "12557": 1045, "14286": 1045, "15099": 1045, "baselibsvm": 1045, "_sparse_fit": 1045, "14894": 1045, "danna": 1045, "naser": 1045, "12887": 1045, "15028": 1045, "guan": 1045, "14381": 1045, "11232": 1045, "sievert": 1045, "10815": 1045, "14035": 1045, "14475": 1045, "14538": 1045, "14872": 1045, "upcast": [1045, 1049], "15094": 1045, "choose_check_classifiers_label": 1045, "enforce_estimator_tags_i": 1045, "mock": 1045, "mockdatafram": 1045, "checkingclassifi": 1045, "newton_cg": 1045, "random_choice_csc": 1045, "fast_dict": 1045, "parallel_help": 1045, "14902": 1045, "14971": 1045, "nep": 1045, "14702": 1045, "13013": 1045, "13875": 1045, "14680": 1045, "check_classifier_multioutput": 1045, "check_regressor_multioutput": 1045, "13392": 1045, "rok": 1045, "mihevc": 1045, "check_transformer_data_not_an_arrai": 1045, "14884": 1045, "alphonsu": 1045, "abbi": [1045, 1046], "popa": [1045, 1046], "abdur": 1045, "rahmaan": 1045, "janhang": 1045, "abenbihi": 1045, "abhinav": [1045, 1048], "sagar": 1045, "jana": 1045, "lagat": 1045, "alessandro": [1045, 1047, 1050], "surac": 1045, "siqueira": 1045, "alexgoryainov": 1045, "itk": [1045, 1046, 1047], "alexshack": [1045, 1046, 1047], "akinkunl": 1045, "kaseorg": 1045, "maldonado": [1045, 1048], "angela": [1045, 1046, 1050], "ambroz": [1045, 1046], "anisha": 1045, "keshavan": 1045, "gutierrez": 1045, "anuja": 1045, "archana": [1045, 1047], "alva": 1045, "arnaudstiegl": 1045, "arpanchowdhri": 1045, "ashimb9": 1045, "ayomid": 1045, "bamidel": 1045, "baran": 1045, "buluttekin": 1045, "barrycg": 1045, "bill": [1045, 1046], "mill": 1045, "biswadip": 1045, "mandal": 1045, "blackd0t": 1045, "barklei": 1045, "c56poni": 1045, "camilaagw": 1045, "cartman_nabana": 1045, "catajara": 1045, "cgsavard": [1045, 1046], "vesteghem": 1045, "dakota": 1045, "grusak": 1045, "datenbergwerk": 1045, "dormagen": 1045, "deeplook": 1045, "drgfreeman": 1045, "cashman": 1045, "edvardlindelof": 1045, "ndirangu": [1045, 1049], "eunseop": 1045, "jeong": 1045, "fanni": 1045, "federicopisanu": 1045, "divo": 1045, "flaviomorelli": 1045, "francidona": 1045, "franco": 1045, "luqu": 1045, "freder": 1045, "haas": 1045, "g0g0gadget": 1045, "altai": 1045, "vale": 1045, "rio": [1045, 1047, 1048, 1049], "ganevgv": 1045, "gdex1": 1045, "getgaurav2": 1045, "gideon": 1045, "sonoiya": 1045, "gpapadok": [1045, 1049], "mogavero": 1045, "h4dr1en": 1045, "hadshirt": 1045, "hailei": [1045, 1046], "nguyen": [1045, 1046, 1049, 1050], "hannah": [1045, 1047, 1049], "bruce": [1045, 1046], "macdonald": [1045, 1046], "honglu": 1045, "ingrid": 1045, "spielman": 1045, "a16": [1045, 1046], "jaehong": 1045, "jai": [1045, 1049], "jeromedock": 1045, "jesper": 1045, "dramsch": 1045, "joanna": 1045, "ortiz": [1045, 1051], "kanika": 1045, "sabharw": 1045, "katarina": [1045, 1047], "slama": [1045, 1047], "kellycarmodi": 1045, "eth": 1045, "kensuk": 1045, "arai": 1045, "kesshi": [1045, 1046], "kevad": 1045, "lofti": [1045, 1046], "winata": [1045, 1047], "sheng": 1045, "dolmatov": 1045, "kirthi": 1045, "shankar": 1045, "sivamani": 1045, "katyal": 1045, "lakshmi": 1045, "krishnan": 1045, "lalliacqua": [1045, 1048], "lbfin": 1045, "loopym": 1045, "lostcoast": 1045, "huynh": [1045, 1047], "lrjball": [1045, 1046], "roeder": 1045, "maggiecheg": [1045, 1049], "maithreyi": 1045, "venkatesh": 1045, "maltimor": 1045, "maocx": 1045, "douriez": [1045, 1046], "oywa": 1045, "aladago": 1045, "mbillingr": 1045, "clare": 1045, "micah": 1045, "miguelbarao": 1045, "mina": [1045, 1046], "naghshhnejad": [1045, 1046], "motmoti": 1045, "mschaffenroth": 1045, "natasha": 1045, "nezar": 1045, "nidhin": 1045, "pattaniyil": 1045, "nishan": 1045, "mann": 1045, "nitya": 1045, "mandyam": 1045, "novaya": [1045, 1048], "nxorabl": 1045, "oleg": 1045, "stikhin": 1045, "saleem": 1045, "panpiort8": [1045, 1047], "paula": [1045, 1046], "poorna": [1045, 1047], "pspachtholz": [1045, 1046, 1047], "qdeffens": [1045, 1048], "garg": [1045, 1046], "rapha\u00ebl": 1045, "bournhonesqu": 1045, "reza": 1045, "gharibi": 1045, "payn": 1045, "rlm": 1045, "juergen": [1045, 1050], "sanjabi": 1045, "ruchitagard": 1045, "ruth": 1045, "waithera": 1045, "sackei": 1045, "samesh": [1045, 1046], "lakhotia": [1045, 1046], "sewook": 1045, "dare": 1045, "shreya": 1045, "simoncw": 1045, "smujjiga": 1045, "s\u00f6nke": 1045, "behrend": 1045, "soumirai": 1045, "steinfurt": [1045, 1047], "cowlei": 1045, "th0rwa": [1045, 1046], "theoptip": [1045, 1046], "theotheo": 1045, "thierno": 1045, "ibrahima": 1045, "diop": 1045, "schmitt": [1045, 1046], "tilen": 1045, "kusterl": 1045, "timsaur": 1045, "tola": 1045, "topisan": 1045, "ttang131": 1045, "veerlosar": 1045, "luzgin": 1045, "jeanselm": 1045, "lostanlen": 1045, "vnherdeiro": 1045, "wendi": 1045, "willdarnel": 1045, "wolframalpha": 1045, "xcjason": 1045, "martian": 1045, "xsat": 1045, "yinglr": 1045, "yokasr": 1045, "maxin": [1045, 1046], "yulia": 1045, "zamrii": 1045, "feng": [1045, 1047, 1048, 1049], "17959": 1046, "17848": 1046, "17742": 1046, "17995": 1046, "thomaz": 1046, "santana": [1046, 1049], "dsouza": [1046, 1047, 1048, 1049], "17433": 1046, "17985": 1046, "multinomialdevi": 1046, "logloss": 1046, "17694": 1046, "rempfler": 1046, "tsutomu": 1046, "kusanagi": [1046, 1048], "17357": 1046, "18016": 1046, "x_copi": 1046, "17914": 1046, "15730": 1046, "forrest": [1046, 1047], "17309": 1046, "swier": [1046, 1047], "heer": 1046, "17812": 1046, "bruno": [1046, 1047, 1048], "idl": 1046, "17235": 1046, "17204": 1046, "changed_onli": 1046, "17205": 1046, "15005": [1046, 1048], "slep009": [1046, 1048, 1049], "estimator_samples_": 1046, "16149": 1046, "11950": 1046, "11514": 1046, "16075": 1046, "16484": 1046, "16257": 1046, "simona": [1046, 1047, 1048], "maggio": [1046, 1047, 1048], "16801": 1046, "rcwoolston": 1046, "16431": 1046, "14048": 1046, "15963": 1046, "16084": 1046, "15950": 1046, "stephani": 1046, "15980": 1046, "wconnel": 1046, "15709": 1046, "15707": 1046, "maciej": 1046, "mikulski": 1046, "16006": 1046, "rushabh": 1046, "vasani": 1046, "streamhandl": 1046, "logger": 1046, "handler": 1046, "16451": 1046, "16280": 1046, "16837": 1046, "wornbb": 1046, "15669": 1046, "chaitanya": 1046, "16224": 1046, "schwetlick": [1046, 1047], "gelavizh": 1046, "ahmadi": 1046, "marija": [1046, 1047], "vlajic": [1046, 1047], "wheeler": [1046, 1047], "16841": 1046, "16655": 1046, "16718": 1046, "miotto": 1046, "16981": 1046, "g\u00f3rski": [1046, 1047], "14696": 1046, "14516": 1046, "15582": 1046, "16069": 1046, "bail": 1046, "16183": 1046, "16182": 1046, "santhosh": 1046, "16437": 1046, "hwan": 1046, "cho": 1046, "16539": 1046, "deros": 1046, "16692": 1046, "16663": 1046, "15834": 1046, "santiago": 1046, "mola": [1046, 1052], "16103": 1046, "divyaprabha": 1046, "16132": 1046, "trimeta": 1046, "15503": 1046, "15782": 1046, "plgreenliru": 1046, "16403": 1046, "narendra": [1046, 1052], "mukherje": 1046, "16508": 1046, "15864": 1046, "14300": 1046, "15436": 1046, "15652": 1046, "15179": 1046, "angelaambroz": 1046, "15773": 1046, "15655": 1046, "14848": 1046, "absgrad": 1046, "_newton_cg": 1046, "16266": 1046, "standard_coef_": 1046, "standard_intercept_": 1046, "average_coef_": 1046, "average_intercept_": 1046, "16261": 1046, "brandt": 1046, "16849": 1046, "14264": 1046, "17021": 1046, "16323": 1046, "16362": 1046, "16442": 1046, "parson": [1046, 1048], "rick": 1046, "mackenbach": 1046, "16993": 1046, "emit": 1046, "15622": 1046, "mors": 1046, "15918": 1046, "kubin": 1046, "fit_grid_point": 1046, "16401": 1046, "pratama": 1046, "sutiono": 1046, "15953": 1046, "15959": 1046, "16111": 1046, "16090": 1046, "jayaratn": [1046, 1047, 1050, 1051], "14075": 1046, "meyer89": 1046, "16117": 1046, "15785": 1046, "16245": 1046, "16585": 1046, "15762": 1046, "16466": 1046, "16632": 1046, "maura": 1046, "pintor": 1046, "battista": 1046, "biggio": 1046, "15946": 1046, "ngshya": 1046, "32767": 1046, "mersenn": 1046, "twister": 1046, "31bit": 1046, "63bit": 1046, "crude": 1046, "postprocessor": 1046, "lemir": 1046, "13511": 1046, "kennel": 1046, "11296": 1046, "15558": 1046, "15806": 1046, "16331": 1046, "batiss": 1046, "15926": 1046, "16021": 1046, "sparsearrai": 1046, "16728": 1046, "uint": 1046, "17032": 1046, "_safe_tag": 1046, "16950": 1046, "15380": 1046, "16726": 1046, "16112": 1046, "16622": 1046, "17061": 1046, "aleksandra": 1046, "kocot": 1046, "alonso": [1046, 1048], "allend": [1046, 1048], "ana": [1046, 1048], "casado": 1046, "ankit810": 1046, "arunav": 1046, "konwar": 1046, "maingret": 1046, "beier": 1046, "berni": 1046, "bharathi": 1046, "brigi": [1046, 1047], "castachick": 1046, "castor": 1046, "corri": 1046, "bartelheim": 1046, "dani\u00ebl": 1046, "gelder": 1046, "daphn": 1046, "breuer": 1046, "cort": [1046, 1047, 1050, 1051], "dbauer9": 1046, "borovikova": 1046, "eln": 1046, "emili": [1046, 1047], "leung": 1046, "evgeni": 1046, "chasnovski": 1046, "fabiana": 1046, "facundo": [1046, 1049], "ferr\u00edn": 1046, "franziska": 1046, "boenisch": 1046, "bolmier": [1046, 1047, 1051], "gholdman1": 1046, "gonthier": 1046, "hao": [1046, 1047, 1049, 1050], "chun": [1046, 1047, 1049, 1050, 1051], "haoyin": [1046, 1048, 1049], "h\u00e9lion": 1046, "bourboux": 1046, "himanshu": [1046, 1049], "hirofumi": [1046, 1047], "suzuki": [1046, 1047], "huangk10": 1046, "kemenad": 1046, "hye": 1046, "sung": 1046, "indecisiveus": [1046, 1047], "inderjeet": 1046, "jjmistri": 1046, "haitz": [1046, 1048, 1049], "legarreta": [1046, 1048, 1049], "gorro\u00f1o": [1046, 1048, 1049], "judithabk6": 1046, "jumon": 1046, "kathryn": 1046, "krishnachaitanya9": 1046, "gia": 1046, "thuan": 1046, "lkubin": 1046, "lopusz": 1046, "lucgiffon": 1046, "lucyleeow": 1046, "kemk": 1046, "magda": 1046, "zielinska": 1046, "mandi": [1046, 1049], "gu": [1046, 1047, 1049], "manish": 1046, "aradwad": 1046, "mariana": 1046, "meirel": 1046, "mariel": 1046, "mc4229": 1046, "shoemak": 1046, "micha\u0142": 1046, "s\u0142apek": 1046, "mojca": 1046, "bertoncelj": 1046, "narendramukherje": 1046, "nicolasservel": 1046, "nkish": 1046, "noa": [1046, 1052], "tamir": [1046, 1049], "olicairn": 1046, "ur": 1046, "lenz": [1046, 1050], "delanou": 1046, "qizhi": 1046, "quang": 1046, "rachelcjordan": 1046, "raduspaimoc": 1046, "riccardo": [1046, 1052], "folloni": 1046, "ritchi": 1046, "rori": 1046, "hartong": 1046, "redden": 1046, "sambhav": 1046, "kothari": 1046, "santhoshbala18": 1046, "sarat": 1046, "addep": 1046, "scibol": 1046, "kie\u00dfl": 1046, "sergiodsr": 1046, "shiki": 1046, "shubh": 1046, "chatterje": 1046, "simonamaggio": [1046, 1047, 1048], "snowhit": 1046, "stareh": 1046, "marsh": 1046, "sunmi": 1046, "yoon": 1046, "talgatomarov": 1046, "tamirlan1": 1046, "nonner": 1046, "vink": [1046, 1048], "tiphain": 1046, "viard": 1046, "titu": 1046, "vachan": 1046, "vandana": 1046, "iyer": 1046, "waelbenamara": 1046, "wderos": 1046, "wenliwyan": 1046, "windber": 1046, "19579": 1047, "19646": 1047, "stopiter": 1047, "19922": 1047, "19732": 1047, "ishikawa": [1047, 1048], "19407": 1047, "ushtanit": [1047, 1048], "19982": 1047, "19939": 1047, "halvic": 1047, "19703": 1047, "sobkevich": 1047, "villaz\u00f3n": 1047, "terraza": 1047, "fonari": [1047, 1048], "19182": 1047, "yosuk": [1047, 1048], "kobayashi": [1047, 1048], "19721": 1047, "19659": 1047, "19211": 1047, "19847": 1047, "xiaoyu": 1047, "chai": [1047, 1050, 1051], "19308": 1047, "19234": 1047, "19727": 1047, "delong": [1047, 1048], "19888": 1047, "19924": 1047, "19271": 1047, "zhaowei": 1047, "19580": 1047, "brice": [1047, 1048], "adamson": 1047, "wil": 1047, "yegelwel": 1047, "css": 1047, "19417": 1047, "19179": 1047, "19126": 1047, "17448": 1047, "17107": 1047, "17546": 1047, "17856": 1047, "17984": 1047, "riedmann": 1047, "francesco": [1047, 1050], "casalegno": 1047, "18052": 1047, "sean": [1047, 1048, 1050], "stallei": 1047, "17937": 1047, "counts_": 1047, "init_size_": 1047, "17864": 1047, "17616": 1047, "18167": 1047, "18256": 1047, "jayratn": 1047, "16392": 1047, "17095": 1047, "18746": 1047, "norm_y_weight": 1047, "x_mean_": 1047, "y_mean_": 1047, "x_std_": 1047, "y_std_": 1047, "18768": 1047, "18302": 1047, "md5": 1047, "checksum": 1047, "14800": 1047, "17396": 1047, "jiaxiang": 1047, "17491": 1047, "18280": 1047, "17499": 1047, "17610": 1047, "18525": 1047, "11064": 1047, "17414": 1047, "18149": 1047, "17679": 1047, "18528": 1047, "villanova": [1047, 1048], "14446": 1047, "18394": 1047, "16985": 1047, "garbag": 1047, "18334": 1047, "multicor": [1047, 1048], "18341": 1047, "egor": 1047, "smirnov": 1047, "18410": 1047, "17702": 1047, "18326": 1047, "changedbehaviorwarn": 1047, "nonblasdotwarn": 1047, "17804": 1047, "17367": 1047, "15427": 1047, "gangesh": 1047, "gudmalwar": 1047, "6545": 1047, "17159": 1047, "15361": 1047, "17878": 1047, "17090": 1047, "_check_bounds_param": 1047, "12638": 1047, "lannuzel": 1047, "17526": 1047, "ayako": 1047, "yagi": 1047, "17612": 1047, "srimukh": 1047, "sripada": 1047, "16493": 1047, "darshan": 1047, "15636": 1047, "18987": 1047, "16619": 1047, "16906": 1047, "roei": 1047, "kahni": 1047, "18293": 1047, "16289": 1047, "kishimoto": 1047, "18639": 1047, "13003": 1047, "s\u00e1nchez": 1047, "18545": 1047, "laurenz": 1047, "reitsam": 1047, "17578": 1047, "knox": 1047, "6624": 1047, "marijn": 1047, "vliet": 1047, "18121": 1047, "18607": 1047, "fhaselbeck": 1047, "18622": 1047, "haesun": [1047, 1050, 1051], "10493": 1047, "17997": 1047, "maisonneuv": 1047, "square_dist": 1047, "17662": 1047, "18278": 1047, "17412": 1047, "16625": 1047, "10591": 1047, "karnowski": 1047, "plot_det_curv": [1047, 1048], "18176": 1047, "10708": 1047, "15007": 1047, "hathidara": 1047, "10711": 1047, "17192": 1047, "avi": [1047, 1048], "17225": 1047, "17569": 1047, "17651": 1047, "mato": 1047, "17777": 1047, "shubhanshu": 1047, "mishra": [1047, 1048], "17826": 1047, "decal": 1047, "willard": 1047, "17935": 1047, "cari": 1047, "goltermann": 1047, "18114": 1047, "18405": 1047, "yakov": 1047, "pchelintsev": 1047, "13900": 1047, "17478": 1047, "teon": 1047, "13204": 1047, "kosic": 1047, "18527": 1047, "18343": 1047, "devi": 1047, "sandeep": 1047, "18595": 1047, "18222": 1047, "18266": 1047, "subrat": 1047, "sahu": 1047, "15126": 1047, "17987": 1047, "17233": 1047, "zolisa": 1047, "bleki": 1047, "histgradientboost": 1047, "18124": 1047, "brocchini": 1047, "armstrong": 1047, "17427": 1047, "17038": 1047, "neighborsbas": [1047, 1050], "17148": 1047, "18691": 1047, "18370": 1047, "18612": 1047, "17603": 1047, "17604": 1047, "17606": 1047, "17608": 1047, "17609": 1047, "17633": 1047, "17661": 1047, "17932": 1047, "16352": 1047, "17759": 1047, "18269": 1047, "17876": 1047, "18429": 1047, "biernat": 1047, "17317": 1047, "17406": 1047, "wick": 1047, "18406": 1047, "17833": 1047, "yashika": 1047, "18510": 1047, "18447": 1047, "16066": 1047, "18682": 1047, "16935": 1047, "17193": 1047, "16335": 1047, "14982": 1047, "11682": 1047, "patric": [1047, 1048], "15763": 1047, "16530": 1047, "shuhua": 1047, "17386": 1047, "17187": 1047, "x_idx_sort": 1047, "17614": 1047, "check_methods_sample_order_invari": [1047, 1049], "17598": 1047, "ngo": 1047, "17992": 1047, "endian": 1047, "17644": 1047, "18508": 1047, "abo7atm": 1047, "spannbauer": 1047, "deodhar": 1047, "alexandracraciun": 1047, "amy12xx": 1047, "tiwari": 1047, "choraria": 1047, "subramaniyan": 1047, "kushwaha": 1047, "atsushi": [1047, 1048], "nukariya": [1047, 1048], "aura": 1047, "autoviz": 1047, "auto_viml": 1047, "avinash": 1047, "anak": 1047, "barankaraku": 1047, "barberogaston": 1047, "beatrizsmg": 1047, "mainy": 1047, "bossan": [1047, 1049, 1050, 1051, 1053], "pedigo": [1047, 1048], "bhavika": 1047, "devnani": 1047, "biprateep": 1047, "dei": 1047, "bmaisonn": 1047, "byron": 1047, "ceethinwa": [1047, 1048], "chaitanyamog": 1047, "clmbst": 1047, "coelhudo": 1047, "crispinlogan": [1047, 1050, 1051], "cristina": 1047, "mula": 1047, "darioka": [1047, 1049, 1050], "declan": 1047, "neill": 1047, "deeksha": 1047, "madan": 1047, "fiegel": [1047, 1048, 1050], "khoo": 1047, "eschibli": 1047, "fran": [1047, 1048, 1049], "larsson": [1047, 1048, 1049], "sheni": 1047, "genvalen": [1047, 1048, 1049, 1050, 1051], "kiragu": 1047, "gesa": 1047, "stupperich": 1047, "ghislain": 1047, "vaillant": 1047, "gim": 1047, "seng": 1047, "chevali": 1047, "bohl": [1047, 1049], "schole": 1047, "hitesh": 1047, "somani": 1047, "hoda1394": 1047, "moin": 1047, "hugorichard": 1047, "isuru": 1047, "wiryadi": 1047, "j0rd1smit": 1047, "jaehyun": 1047, "ahn": 1047, "tae": 1047, "hoctor": 1047, "vese": 1047, "jeevan": 1047, "jeroenpeterbo": 1047, "jhay": 1047, "jigna": 1047, "panchal": 1047, "jim0421": 1047, "joaquin": 1047, "gorb": 1047, "moya": 1047, "kartik": 1047, "chugh": 1047, "kaylani2": 1047, "kendrick": 1047, "cetina": 1047, "kenni": 1047, "isakov": 1047, "koki": 1047, "nishihara": 1047, "krum": [1047, 1049], "arnaudov": [1047, 1049], "oldja": 1047, "guitton": 1047, "mariam": 1047, "l\u00f6ning": 1047, "scheubrein": 1047, "megasari": 1047, "mathschi": 1047, "giudic": 1047, "milan": 1047, "straka": 1047, "muoki": 1047, "caleb": 1047, "haiat": 1047, "nadia": 1047, "tahiri": 1047, "ph": 1047, "hamada": 1047, "neil": 1047, "botelho": 1047, "nil": 1047, "noelano": 1047, "oj_lappi": 1047, "oleh": [1047, 1049], "kozynet": [1047, 1049], "pankaj": 1047, "jindal": 1047, "pardeep": 1047, "parthiv": 1047, "chigurupati": 1047, "pgithub": 1047, "probinette4": 1047, "pwalchessen": 1047, "rachel": [1047, 1050], "fischoff": 1047, "toshniw": 1047, "rafei": 1047, "iqbal": 1047, "rahul": [1047, 1052], "jakhar": 1047, "rachum": 1047, "ramyanp": [1047, 1048], "rauwuckl": 1047, "ravi": [1047, 1050], "kiran": 1047, "boggavarapu": 1047, "rishi": 1047, "advani": 1047, "rithvik": 1047, "romijnd": 1047, "tavenard": 1047, "rubi": 1047, "werman": 1047, "ryotaro": 1047, "tsukada": 1047, "sadak": 1047, "khandelw": 1047, "ezebunandu": 1047, "kimbinyi": 1047, "shail": 1047, "keller": 1047, "shao": [1047, 1048, 1049], "shooter23": [1047, 1048], "soledad": 1047, "galli": 1047, "subrat93": 1047, "sunitha": 1047, "selvan": 1047, "kusanagi2": 1047, "terenc": [1047, 1048], "honl": [1047, 1048], "thij": [1047, 1050, 1051], "thomas9292": 1047, "thorben": 1047, "tijanajovanov": 1047, "timo": 1047, "tnwei": 1047, "ufmay": 1047, "umberto": 1047, "lupo": 1047, "vika": [1047, 1049], "viniciu": [1047, 1048], "fuck": [1047, 1048], "violeta": 1047, "watchtheblur": 1047, "willpeppo": 1047, "xethan": 1047, "qianm": 1047, "yue": 1047, "yutaro": 1047, "ikeda": 1047, "zacchari": 1047, "ramzi": 1047, "zoj613": 1047, "21271": 1048, "21833": 1048, "siavash": 1048, "rezazadeh": 1048, "19210": 1048, "21295": 1048, "22050": 1048, "21991": 1048, "19869": 1048, "21481": [1048, 1049], "andr\u00e9": [1048, 1049, 1051], "babino": [1048, 1049], "disconnect": 1048, "21915": 1048, "21694": 1048, "minknowski": 1048, "cdist": 1048, "21741": 1048, "21871": 1048, "21845": 1048, "21517": 1048, "21917": 1048, "21552": 1048, "escap": [1048, 1050], "21493": 1048, "21199": 1048, "20638": 1048, "bohn\u00e9": 1048, "21179": 1048, "21195": 1048, "21130": 1048, "20761": 1048, "21251": 1048, "min_idf": 1048, "max_idf": 1048, "20752": 1048, "alek": [1048, 1049], "lefebvr": [1048, 1049], "21340": 1048, "21093": 1048, "21351": 1048, "cve": 1048, "28975": 1048, "21336": 1048, "_check_sample_weight": 1048, "only_non_neg": 1048, "20880": 1048, "andr\u00e1": [1048, 1049, 1050, 1051], "if_delegate_has_method": [1048, 1049], "21145": 1048, "zahlii": 1048, "21389": 1048, "20002": 1048, "19310": 1048, "least_squar": 1048, "19733": 1048, "lad": 1048, "absolute_loss": 1048, "20165": 1048, "18444": 1048, "18010": 1048, "threadsaf": 1048, "18736": 1048, "17443": 1048, "19641": 1048, "20087": 1048, "fauchereau": 1048, "19002": 1048, "19052": 1048, "yusuk": 1048, "nagasaka": 1048, "17622": 1048, "19024": 1048, "franki": 1048, "robertson": 1048, "20117": 1048, "natchiappan": [1048, 1049], "19883": 1048, "20597": 1048, "20899": 1048, "20200": 1048, "fit_": 1048, "partial_fit_": 1048, "19297": 1048, "20560": 1048, "18393": 1048, "bittarello": 1048, "19263": 1048, "19244": 1048, "18459": 1048, "nd": [1048, 1052], "18898": 1048, "ora": 1048, "phongpanagnam": 1048, "21080": 1048, "20416": 1048, "defoi": 1048, "20583": 1048, "19365": 1048, "ateif": 1048, "sara": 1048, "19669": 1048, "importlib": 1048, "pyoxid": 1048, "20297": 1048, "20209": 1048, "19011": 1048, "20729": 1048, "12069": 1048, "19046": 1048, "surya": [1048, 1049], "18433": 1048, "19198": 1048, "19159": 1048, "beno\u00eet": 1048, "mal\u00e9zieux": 1048, "19908": 1048, "20512": 1048, "20960": 1048, "cgroup": [1048, 1049], "quota": [1048, 1049], "20477": 1048, "19799": 1048, "19564": 1048, "19836": 1048, "19162": 1048, "10096": 1048, "fenil": 1048, "suchak": 1048, "20159": 1048, "murata": [1048, 1049], "20534": 1048, "19296": 1048, "19035": 1048, "19520": 1048, "18964": 1048, "19401": 1048, "relova": 1048, "17169": 1048, "dmytro": 1048, "lituiev": 1048, "20380": 1048, "pulido": 1048, "felip": [1048, 1049, 1050, 1051], "bidu": [1048, 1049], "rutter": 1048, "20515": 1048, "carsten": 1048, "allefeld": 1048, "19568": 1048, "shyam": 1048, "20207": 1048, "tomohiro": 1048, "endo": 1048, "20161": 1048, "shuhei": 1048, "kayawari": 1048, "arka204": [1048, 1050], "20431": 1048, "pfaffel": 1048, "19428": 1048, "hamoumi": 1048, "19411": 1048, "20959": 1048, "20554": 1048, "xiangyin": 1048, "kong": 1048, "9978": 1048, "10027": 1048, "16449": 1048, "20231": 1048, "naka": 1048, "19571": 1048, "20155": 1048, "oura": [1048, 1049, 1050], "19004": 1048, "midvidi": 1048, "19055": 1048, "19172": 1048, "19426": 1048, "19499": 1048, "strubel": 1048, "19616": 1048, "19391": 1048, "19390": 1048, "linearmodel": 1048, "17743": 1048, "17772": 1048, "17746": 1048, "17785": 1048, "17750": 1048, "17769": 1048, "20683": 1048, "19491": 1048, "19472": 1048, "shortest_path": 1048, "20531": 1048, "19415": 1048, "17036": 1048, "20326": 1048, "uttam": 1048, "9843": 1048, "19643": 1048, "attard": 1048, "19784": 1048, "18328": 1048, "20312": 1048, "divyanshu": 1048, "deoli": 1048, "18543": 1048, "20552": 1048, "19278": 1048, "20030": 1048, "tingshan": 1048, "18649": 1048, "rodion": 1048, "martynov": 1048, "20619": 1048, "baseshufflesplit": 1048, "20056": 1048, "pabloduque0": 1048, "prematur": 1048, "20904": 1048, "tomasz": 1048, "jakubek": [1048, 1049], "18925": 1048, "poznik": [1048, 1049, 1050], "18842": 1048, "19473": 1048, "jiefangxuanyan": 1048, "20072": 1048, "20842": 1048, "mart\u00edn": [1048, 1049], "19631": 1048, "19790": 1048, "flynn": [1048, 1050], "18368": 1048, "19483": 1048, "20526": 1048, "19069": 1048, "19041": 1048, "20250": 1048, "20652": 1048, "19934": 1048, "gleb": [1048, 1050, 1051, 1052], "levitskii": 1048, "19734": 1048, "robinson": 1048, "19752": 1048, "zhehao": [1048, 1049, 1050, 1051, 1053], "19527": 1048, "19788": 1048, "19356": 1048, "makoeppel": 1048, "19879": 1048, "19906": 1048, "20727": 1048, "20961": 1048, "n_input_features_": 1048, "20240": 1048, "20843": 1048, "18959": 1048, "wstate": 1048, "20023": 1048, "19336": 1048, "20272": 1048, "19459": 1048, "bezuidenhout": 1048, "clifford": 1048, "akai": 1048, "nettei": 1048, "19948": 1048, "20657": 1048, "19766": 1048, "20385": 1048, "_weighted_percentil": 1048, "huberlossfunct": 1048, "20528": 1048, "20673": 1048, "is_scalar_nan": 1048, "assert_warn": 1048, "assert_warns_messag": 1048, "20521": 1048, "abdulelah": 1048, "mesfer": 1048, "adrian": [1048, 1049, 1050], "garcia": 1048, "badaracco": 1048, "sad\u0142ocha": 1048, "rubial": 1048, "alessia": 1048, "marcolini": 1048, "alihan": 1048, "zihna": 1048, "alin": 1048, "amol": 1048, "deshmukh": 1048, "pessoa": 1048, "anavelyz": 1048, "ashish": [1048, 1051], "ashvith": 1048, "shetti": 1048, "baam": [1048, 1049], "baptbillard": 1048, "bmalezieux": 1048, "bumblebe": 1048, "caherrera": 1048, "meli": [1048, 1049, 1050], "chrissobel": 1048, "yeh": 1048, "chuliang": 1048, "cliffordemmanuel": 1048, "conner": 1048, "shen": 1048, "dimitri": [1048, 1049, 1050, 1051, 1052], "papadopoulo": [1048, 1049, 1050, 1051, 1052], "orfano": [1048, 1049, 1050, 1051, 1052], "dmallia17": 1048, "ds_ana": 1048, "jardim": 1048, "edwinwenink": 1048, "eleni": 1048, "markou": 1048, "ericellwang": [1048, 1049], "ezri": 1048, "mudd": 1048, "fato": 1048, "morina": 1048, "hafner": 1048, "flyingdutchman23": 1048, "uwha": [1048, 1049], "bereng": 1048, "frederick": 1048, "frellwan": 1048, "vicent": [1048, 1049, 1050], "geroldcsend": 1048, "glen": 1048, "gl\u00f2ria": [1048, 1050], "mu\u00f1oz": [1048, 1050], "gregorystrubel": 1048, "groceryheist": 1048, "guiweb": 1048, "haidar": [1048, 1049], "almubarak": [1048, 1049], "moritz": [1048, 1050], "g\u00fcnther": [1048, 1052], "mirza": 1048, "harutaka": 1048, "kawamura": 1048, "hassan": 1048, "alsawadi": 1048, "geovan": [1048, 1049], "gome": [1048, 1049], "lima": [1048, 1049], "ilic": 1048, "ikko": 1048, "ashimin": 1048, "isaack": 1048, "mungui": 1048, "ishaan": 1048, "bhat": [1048, 1050, 1051, 1052], "ishan": [1048, 1049], "iwhalv": 1048, "preiss": 1048, "budarz": 1048, "jannik": 1048, "jennif": 1048, "jianzhu": 1048, "guo": 1048, "jnboehm": 1048, "johanwork": 1048, "paton": 1048, "n\u00e1pole": 1048, "julio": 1048, "julyrashchenko": 1048, "jvm": 1048, "kadatatlu": 1048, "kishor": 1048, "karen": 1048, "palacio": 1048, "kmatt10": 1048, "kobaski": 1048, "kot271828": 1048, "kunj": 1048, "kurumeyuta": 1048, "kxytim": 1048, "lacrosse91": 1048, "laveen": 1048, "bagai": 1048, "leonardo": 1048, "rocco": [1048, 1049, 1050], "uieda": 1048, "leopoldo": 1048, "corona": 1048, "lsturtew": 1048, "lucca": 1048, "quadro": 1048, "ly648499246": 1048, "mabu": 1048, "manaileng": 1048, "mariangela": 1048, "marielaraj": 1048, "hirzel": 1048, "mateo": 1048, "nore\u00f1a": 1048, "mathi": 1048, "batoul": 1048, "calcot": 1048, "prieur": 1048, "\u00f6zer": 1048, "miao": 1048, "cai": 1048, "karbownik": 1048, "michalkrawczyk": [1048, 1049], "mitzi": [1048, 1049], "mlondschien": 1048, "haseeb": [1048, 1049], "khoual": 1048, "jarir": 1048, "kanji": 1048, "nadim": 1048, "kawwa": 1048, "nanshan": 1048, "naozin555": 1048, "fultz": 1048, "nic": 1048, "annau": 1048, "nigel": 1048, "bosch": 1048, "nodar": 1048, "okroshiashvili": 1048, "ogbonna": 1048, "chibuik": 1048, "ogordon100": 1048, "phongpanangam": 1048, "duqu": 1048, "ibieta": 1048, "jimenez": [1048, 1049], "lacouth": 1048, "olszewski": 1048, "dye": 1048, "pierreattard": [1048, 1049], "yve": 1048, "borgn": 1048, "pranayanchuri": 1048, "princ": 1048, "canuma": 1048, "putschblo": 1048, "ranjanikrishnan": 1048, "rene": 1048, "corneil": 1048, "ricardojnf": 1048, "richardscottoz": 1048, "sandi": 1048, "khosasi": 1048, "benhur": 1048, "flore": 1048, "shinehid": 1048, "shinnar": 1048, "tootoonian": 1048, "solosil": 1048, "kolawol": 1048, "stagg": 1048, "swpeas": 1048, "tfifi": 1048, "caswel": [1048, 1051], "timotheemathieu": 1048, "wolodzko": 1048, "tliu68": 1048, "uhmann": 1048, "tom1092": 1048, "tom\u00e1": [1048, 1049], "moreyra": 1048, "tommaso": 1048, "noto": 1048, "tsuga": 1048, "vang": 1048, "gkiasta": 1048, "vil\u00e9m": 1048, "zouhar": 1048, "vlasovet": 1048, "waijean": 1048, "whidou": 1048, "xiaoyuchai": 1048, "yasmeen": 1048, "alsaedi": 1048, "yoch": 1048, "yusukenagasaka": 1048, "yzhenman": 1048, "zeyusun": 1048, "zhaoweiwang": 1048, "msvcp140": 1049, "dll": 1049, "24631": 1049, "24446": 1049, "10805": 1049, "mathia": 1049, "23471": 1049, "24015": 1049, "23990": 1049, "23833": 1049, "24017": 1049, "sorski": [1049, 1050], "23395": 1049, "23636": 1049, "22063": 1049, "22059": 1049, "kurz": [1049, 1050], "23608": 1049, "23548": 1049, "24087": 1049, "23273": 1049, "23194": 1049, "23198": 1049, "lise": 1049, "kleiber": 1049, "23358": 1049, "23264": 1049, "feature_names_in": 1049, "23299": 1049, "23214": 1049, "collot": [1049, 1050], "baak": 1049, "23370": 1049, "23410": 1049, "23115": 1049, "22868": 1049, "multiindex": 1049, "22410": 1049, "23271": 1049, "21987": 1049, "22064": 1049, "22065": 1049, "22288": 1049, "22320": 1049, "21219": 1049, "21542": 1049, "23098": 1049, "22318": 1049, "23036": 1049, "binary_crossentropi": 1049, "23040": 1049, "23046": 1049, "22856": 1049, "21032": 1049, "18170": 1049, "21038": 1049, "14975": 1049, "22526": 1049, "23095": 1049, "silk": 1049, "20031": 1049, "krawczyk": 1049, "21148": 1049, "22255": 1049, "21881": 1049, "vassard": 1049, "22217": 1049, "21735": 1049, "22154": 1049, "22537": 1049, "iofal": 1049, "arisa": [1049, 1050], "22775": 1049, "22913": 1049, "randomgeek78": 1049, "22493": 1049, "19680": 1049, "thibaut": 1049, "22119": 1049, "22016": 1049, "22015": 1049, "19747": 1049, "attalla": 1049, "22498": 1049, "21482": 1049, "pujalt": 1049, "22412": 1049, "16605": 1049, "21901": 1049, "rileran": 1049, "23113": 1049, "ilion": 1049, "beyst": 1049, "21425": 1049, "stefanini": 1049, "16948": 1049, "patricio": 1049, "cerda": 1049, "22002": 1049, "21109": 1049, "iter_offset": 1049, "return_inner_stat": 1049, "inner_stat": 1049, "inner_stats_": 1049, "iter_offset_": 1049, "18975": 1049, "22111": 1049, "22181": 1049, "21334": 1049, "21705": 1049, "stanlei": [1049, 1050, 1051], "21432": 1049, "22806": 1049, "jihan": 1049, "benni": 1049, "21713": 1049, "haya": 1049, "21567": 1049, "maggi": 1049, "chege": 1049, "22300": 1049, "15948": 1049, "sysuresh": 1049, "22553": 1049, "19490": 1049, "ferrin": 1049, "22120": 1049, "15984": 1049, "okon": 1049, "22696": 1049, "22486": 1049, "21800": 1049, "20567": 1049, "22159": 1049, "20811": 1049, "21814": 1049, "16748": 1049, "siqi": 1049, "22215": 1049, "23047": 1049, "22695": 1049, "22697": 1049, "21762": 1049, "22106": 1049, "gijsber": 1049, "21632": 1049, "genesi": [1049, 1051], "valencia": [1049, 1051], "22566": 1049, "22908": 1049, "23097": 1049, "23079": 1049, "20803": 1049, "23023": 1049, "21573": 1049, "21832": 1049, "20145": 1049, "22356": 1049, "18482": 1049, "gameiro": 1049, "kharsa": 1049, "22370": 1049, "17819": 1049, "22235": 1049, "21837": 1049, "wagner": 1049, "22199": 1049, "aidar": 1049, "shakerimoff": 1049, "tenavi": 1049, "nakamura": 1049, "22223": 1049, "marcom": 1049, "21617": 1049, "ritter": [1049, 1050], "21114": 1049, "21078": 1049, "21448": 1049, "16061": 1049, "19438": 1049, "18310": 1049, "elfner": 1049, "22249": 1049, "22137": 1049, "22694": 1049, "22808": 1049, "22950": 1049, "21086": 1049, "22206": 1049, "21808": 1049, "22548": 1049, "22062": 1049, "trujillo": [1049, 1050], "22148": 1049, "22240": 1049, "9087": 1049, "22525": 1049, "19689": 1049, "21606": 1049, "21341": 1049, "preservs": 1049, "21767": 1049, "21724": 1049, "yar": 1049, "khine": 1049, "phyo": 1049, "21998": 1049, "22891": 1049, "22899": 1049, "23256": 1049, "19794": 1049, "21534": 1049, "22254": 1049, "21805": 1049, "jeann": 1049, "dionisi": 1049, "22685": 1049, "n_neighbour": 1049, "18832": 1049, "23033": 1049, "21565": 1049, "17266": 1049, "22118": 1049, "ohad": 1049, "22284": 1049, "19158": 1049, "nicki": 1049, "skaft": 1049, "20753": 1049, "22108": 1049, "22635": 1049, "19085": 1049, "22866": 1049, "21576": 1049, "emil": 1049, "dugnat": 1049, "21873": 1049, "21177": 1049, "20408": 1049, "ceballo": 1049, "22058": 1049, "23034": 1049, "22203": 1049, "21026": 1049, "21880": 1049, "mrinal": 1049, "tyagi": 1049, "22982": 1049, "22508": 1049, "comb": 1049, "22604": 1049, "22212": 1049, "21430": 1049, "desislava": 1049, "vasileva": 1049, "22687": 1049, "22150": 1049, "22248": 1049, "20860": 1049, "shubhraneel": 1049, "21888": 1049, "21954": 1049, "22953": 1049, "16018": 1049, "21445": 1049, "21988": 1049, "get_output_feature_nam": 1049, "21569": 1049, "21079": 1049, "20653": 1049, "21434": 1049, "19916": 1049, "22735": 1049, "compute_inverse_transform": 1049, "21701": 1049, "22114": 1049, "21330": 1049, "21408": 1049, "22149": 1049, "21436": 1049, "22191": 1049, "22476": 1049, "21278": 1049, "21316": 1049, "clickabl": 1049, "21298": 1049, "22237": 1049, "22218": 1049, "validationerror": 1049, "check_requires_y_non": 1049, "22578": 1049, "arcidiacono": [1049, 1050, 1052], "22595": 1049, "21310": 1049, "22027": 1049, "lanterni": 1049, "23077": 1049, "22188": 1049, "22830": 1049, "2357juan": [1049, 1050, 1051], "adamgonzo": 1049, "adijohar": 1049, "kumawat": 1049, "raghuwanshi": 1049, "duron": 1049, "ahmadjubair33": 1049, "druck": 1049, "peixinho": 1049, "arroyo": 1049, "alexanmv": 1049, "almeidayoel": 1049, "amar": [1049, 1050, 1051], "amrcod": 1049, "griva": [1049, 1050], "andrii": 1049, "herrou": 1049, "ducout": 1049, "arth": 1049, "arthurmello": 1049, "arturoamor": 1049, "atharva": 1049, "patil": [1049, 1052], "aufarkari": 1049, "avm19": [1049, 1050, 1052], "ayan": 1049, "bardiya": [1049, 1050], "behrouz": 1049, "ben3940": 1049, "bijil": 1049, "subhash": 1049, "bmreinig": 1049, "brenden": 1049, "kadota": 1049, "cdrig": 1049, "chalmer": 1049, "chitteti": 1049, "srinath": [1049, 1050], "chloe": 1049, "agath": 1049, "azencott": 1049, "christopherlim98": 1049, "weidemann": 1049, "combsccod": 1049, "daniela": [1049, 1050], "darren": [1049, 1050], "eargl": 1049, "gilbertson": [1049, 1050], "dea": [1049, 1050, 1051], "mar\u00eda": [1049, 1050, 1051], "denni": 1049, "osei": 1049, "dessyvv": 1049, "dev514": 1049, "diwakar": 1049, "ries": 1049, "drskd": 1049, "emiko": 1049, "sano": 1049, "emmanouil": 1049, "gionanidi": 1049, "ermolaevpa": [1049, 1050], "estefania": 1049, "barreto": 1049, "ojeda": 1049, "eyast": 1049, "fatima": [1049, 1052], "gasmi": 1049, "luna": 1049, "glushchenkov": 1049, "fkaren27": 1049, "fpgawesom": 1049, "francoisgoupil": 1049, "ftorres16": [1049, 1050], "gabor": 1049, "berei": 1049, "kertesz": 1049, "gauthier": 1049, "giancarlo": 1049, "glennfrutiz": 1049, "guillermo": 1049, "fern\u00e1ndez": 1049, "hansin": [1049, 1050], "henrymooresc": [1049, 1050], "hideaki": 1049, "imamura": 1049, "hind": 1049, "hmasdev": 1049, "hvassard": 1049, "aki": [1049, 1050, 1051], "iasoon": 1049, "ingela": 1049, "cowton": 1049, "jalexand3r": 1049, "jauhar": 1049, "jaya": 1049, "kommireddi": 1049, "je": 1049, "jelfner": 1049, "jenni": 1049, "jirka": 1049, "borovec": 1049, "cipri\u00e1n": 1049, "loayza": 1049, "chazalon": 1049, "mess": 1049, "jovan": [1049, 1050], "stojanov": [1049, 1050], "jschuerz": 1049, "katotten": 1049, "ken4git": 1049, "doucet": 1049, "kimayoung": 1049, "koushik": 1049, "kranthi": 1049, "sedamaki": 1049, "krumetoft": 1049, "lesne": 1049, "casino": [1049, 1050], "logan": [1049, 1050, 1051], "lucieclair": 1049, "luiz": 1049, "magali": 1049, "mandjev": 1049, "wurp": [1049, 1050], "boerner": 1049, "wimld": 1049, "martel": 1049, "corentin": 1049, "mat\u00eda": 1049, "matjansen": 1049, "francia": 1049, "megabyt": 1049, "mehrdad": 1049, "moradizadeh": 1049, "melemo2": 1049, "micky774": [1049, 1050], "milana2": 1049, "millawel": 1049, "miwojc": 1049, "mizuki": 1049, "mlant": 1049, "mohit": [1049, 1052], "moonkyung94": 1049, "mpoemsl": 1049, "mrinaltyagi": 1049, "leu": 1049, "msabati": 1049, "nadirhan": 1049, "\u015fahin": 1049, "naipawat": [1049, 1050], "poolsawat": [1049, 1050], "nartayxd": 1049, "nastegiano": 1049, "nathansquan": 1049, "detlefsen": 1049, "niket": 1049, "nikhil": 1049, "suresh": 1049, "kondratyev": 1049, "husak": 1049, "partev": [1049, 1050, 1051, 1052], "pelennor": 1049, "piet": [1049, 1050], "br\u00f6mmel": [1049, 1050], "pinki": 1049, "poloso": 1049, "pramod": 1049, "anantharam": 1049, "puhuk": [1049, 1050], "purna": 1049, "mansingh": 1049, "quadv": 1049, "rahil": [1049, 1050, 1051, 1052], "boy": 1049, "raz": 1049, "hoshia": 1049, "rishabh": 1049, "barnowski": [1049, 1050], "rsnegrin": 1049, "yadav": 1049, "sakinaouisrani": 1049, "sanjai": 1049, "marreddi": 1049, "seel": 1049, "sele": [1049, 1050], "seyedsaman": 1049, "emami": 1049, "shandeng123": 1049, "sharmadharmp": 1049, "shaymernaturalint": 1049, "shuangchi": [1049, 1050], "siavrez": 1049, "slishak": 1049, "spikebh": 1049, "sply88": 1049, "kailasa": [1049, 1050], "sultan": 1049, "orazbayev": 1049, "sumit": 1049, "saha": 1049, "sven": [1049, 1050], "eschlbeck": 1049, "stehl": [1049, 1050], "swapnil": 1049, "teunp": 1049, "ferr\u00e9": 1049, "hjortkj\u00e6r": 1049, "thiruvenkadam": 1049, "toastedyeast": [1049, 1050], "mctiernan": [1049, 1050], "udit": 1049, "ugo": 1049, "marchand": 1049, "vera": [1049, 1050], "komey": [1049, 1050], "victoireloui": 1049, "vishwakarma": 1049, "vikrant": 1049, "khedkar": 1049, "chernyi": 1049, "weijiadu": 1049, "yuan": [1049, 1050, 1051, 1052], "yiyangq": 1049, "yosshi999": 1049, "yuki": 1049, "koyama": 1049, "zeel": 1049, "zempleni": 1049, "zhenfish": 1049, "\u8d75\u4e30": 1049, "25747": 1050, "base_estimator__": 1050, "25477": 1050, "25563": 1050, "25570": 1050, "25664": 1050, "25774": 1050, "25500": 1050, "25589": 1050, "25704": 1050, "min_sample_split": 1050, "25744": 1050, "25619": 1050, "25638": 1050, "25354": 1050, "25174": 1050, "25089": 1050, "25129": 1050, "25363": 1050, "25188": 1050, "25295": 1050, "spec": [1050, 1051], "25312": 1050, "backslash": 1050, "25511": 1050, "25172": 1050, "25341": 1050, "25094": 1050, "25250": 1050, "25370": 1050, "23101": 1050, "24873": 1050, "25694": 1050, "25274": 1050, "25296": 1050, "25147": 1050, "23619": 1050, "24354": 1050, "safiuddin": 1050, "khaja": 1050, "gsiisg": 1050, "23935": 1050, "22527": 1050, "_sgd_fast": 1050, "_plain_sgd": 1050, "oversc": 1050, "23798": 1050, "24543": 1050, "24465": 1050, "23734": 1050, "24699": 1050, "23865": 1050, "primit": 1050, "23446": 1050, "23197": 1050, "23604": 1050, "23585": 1050, "24556": 1050, "maladi\u00e8r": [1050, 1051], "24617": 1050, "sim4n6": 1050, "24688": 1050, "22054": 1050, "roic": 1050, "24264": 1050, "maladier": 1050, "14736": 1050, "hunt": 1050, "zhan": 1050, "20802": 1050, "pokorni": 1050, "22965": 1050, "22968": 1050, "23038": 1050, "23210": 1050, "24258": 1050, "23470": 1050, "21938": 1050, "23127": 1050, "19075": 1050, "ramo": 1050, "carre\u00f1o": 1050, "24951": 1050, "22268": 1050, "mohamedbsh": 1050, "23905": 1050, "11860": 1050, "ablin": 1050, "24528": 1050, "23726": 1050, "24421": 1050, "kshitij": [1050, 1051], "22554": 1050, "24218": 1050, "molin": 1050, "21020": 1050, "24856": 1050, "22014": 1050, "23252": 1050, "24538": 1050, "24889": 1050, "24146": 1050, "peretti": 1050, "nestor": 1050, "navarro": 1050, "nati": 1050, "tomatti": 1050, "24855": 1050, "24849": 1050, "20415": 1050, "24283": 1050, "24894": 1050, "23819": [1050, 1051], "edoardo": [1050, 1052], "abati": [1050, 1052], "24747": 1050, "24245": 1050, "24405": 1050, "16695": 1050, "vitor": 1050, "rosa": 1050, "18298": 1050, "25077": 1050, "24317": 1050, "24350": 1050, "24755": 1050, "levitski": [1050, 1051, 1052], "24637": 1050, "24767": 1050, "23275": 1050, "maxwelllzh": 1050, "24433": 1050, "yogendrasingh": 1050, "23637": 1050, "23877": 1050, "10168": 1050, "\u0142ukasz": 1050, "borchmann": 1050, "12285": 1050, "miltenberg": 1050, "13042": 1050, "parizi": 1050, "18094": 1050, "22562": 1050, "24714": 1050, "23834": 1050, "24051": 1050, "22518": 1050, "18020": 1050, "24338": 1050, "23442": 1050, "atukorala": 1050, "22710": 1050, "conroi": 1050, "trinh": 1050, "23461": 1050, "24365": 1050, "24630": 1050, "rushil": [1050, 1051], "24084": 1050, "iinfo": 1050, "24141": 1050, "24539": 1050, "23977": 1050, "23683": 1050, "andrei": [1050, 1052, 1053], "melnik": 1050, "16747": 1050, "18805": 1050, "hongshaoyang": 1050, "22269": 1050, "23139": 1050, "24645": 1050, "10468": 1050, "ruben": 1050, "22993": 1050, "24750": 1050, "rudresh": 1050, "veerkhar": 1050, "23874": 1050, "24075": 1050, "22665": 1050, "24683": 1050, "24058": 1050, "perdok": 1050, "20331": 1050, "23993": 1050, "22629": 1050, "24412": 1050, "22898": 1050, "23480": 1050, "21469": 1050, "lapack_svd_driv": 1050, "20617": 1050, "25067": 1050, "14862": 1050, "24512": 1050, "24667": 1050, "25080": 1050, "24523": 1050, "mia": 1050, "bajic": 1050, "3llobo": 1050, "kania": [1050, 1051], "anulekh": 1050, "admir": [1050, 1051], "demiraj": [1050, 1051], "adoublet": [1050, 1051], "ahmedbgh": [1050, 1051], "aiko": 1050, "akshita": 1050, "prasanth": 1050, "ala": [1050, 1051], "miola": 1050, "lebel": 1050, "buzenet": [1050, 1051], "kassa": [1050, 1051], "bera": 1050, "maennel": 1050, "aniket": [1050, 1052], "shirsat": 1050, "anthony22": [1050, 1051], "apostolo": 1050, "tsetogl": 1050, "aravindh": 1050, "artur": [1050, 1051], "hermano": [1050, 1051], "ashah002": [1050, 1051, 1052], "ashwin": [1050, 1051], "azaria": [1050, 1051], "gebremichael": [1050, 1051], "b0rxington": 1050, "badr": 1050, "moufad": 1050, "bart\u0142omiej": 1050, "go\u0144da": 1050, "bdegraaff": 1050, "berkecanrizai": 1050, "bernd": 1050, "fritzk": 1050, "bhoomika": 1050, "biswaroop": 1050, "cannon": 1050, "bsh": 1050, "ceh": 1050, "chalulu": 1050, "changyao": [1050, 1051], "zablit": 1050, "veenhui": [1050, 1051, 1052], "christianwaldmann": 1050, "christin": [1050, 1051], "verrier": 1050, "dangonite57": [1050, 1051], "danielgaerb": 1050, "davidblnc": [1050, 1051], "dayn": [1050, 1051], "khant": 1050, "dhanshre": 1050, "diadochokinet": 1050, "diederikwp": 1050, "litsidi": [1050, 1051], "drewhogg": 1050, "oc": 1050, "dwight": 1050, "lindquist": 1050, "eden": 1050, "brekk": 1050, "edern": [1050, 1051], "eleanor": 1050, "eliaschiavon": 1050, "emir": [1050, 1051], "fabrizio": 1050, "damicelli": 1050, "fcharra": 1050, "siola": [1050, 1051], "tuveri": 1050, "franck": [1050, 1052], "charra": [1050, 1052], "geevarghes": 1050, "georgiamaydai": 1050, "gianr": 1050, "lazz": 1050, "guitar": 1050, "gunesbayir": [1050, 1051], "harshit5674": 1050, "hasan": 1050, "yaman": 1050, "vrigazov": 1050, "htsedebenham": 1050, "humahn": 1050, "ido": [1050, 1051], "iglesi": 1050, "iliya": 1050, "zhechev": 1050, "iren": [1050, 1051], "ivanllt": 1050, "sedykh": 1050, "mcivor": [1050, 1051], "janfidor": [1050, 1051], "jiten": 1050, "sidhpura": 1050, "jkarolczak": 1050, "jo\u00e3o": 1050, "johnathanpi": [1050, 1051], "koumenti": 1050, "panga": [1050, 1051], "johnthagen": 1050, "fleme": 1050, "choo": [1050, 1051], "yun": [1050, 1051], "keat": [1050, 1051], "juanfe88": 1050, "juliaschoepp": [1050, 1051], "jygerardi": [1050, 1051], "ka00ri": [1050, 1051], "kanishk": 1050, "sachdev": 1050, "kanissh": 1050, "kendal": 1050, "kento": [1050, 1051], "nozawa": [1050, 1051], "eliasi": [1050, 1051, 1052], "kluge": [1050, 1051], "lieret": 1050, "kirandevraj": 1050, "kraig": 1050, "vamsi": 1050, "kapadni": 1050, "lingyi1110": 1050, "mantovani": 1050, "maascha": 1050, "madinak": 1050, "maksym": 1050, "mansi": 1050, "kostelac": [1050, 1051], "marvin": [1050, 1051], "krawutschk": [1050, 1051], "masanori": [1050, 1051], "kanazu": [1050, 1051], "haberland": [1050, 1051], "mauroantonioserrano": 1050, "maxi": 1050, "marufo": 1050, "maximesaur": [1050, 1051], "smolskii": 1050, "bou": [1050, 1051], "mehgarg": 1050, "mehmetcanakbai": 1050, "baji\u0107": 1050, "flak": 1050, "hornstein": 1050, "ruiter": 1050, "paradi": 1050, "iljin": [1050, 1051], "misa": 1050, "ogura": 1050, "wilksch": 1050, "mrastgoo": [1050, 1052], "naois": [1050, 1052], "holohan": [1050, 1052], "nass": 1050, "jacobi": 1050, "nawazish": [1050, 1051], "alam": [1050, 1051], "nguy\u1ec5n": 1050, "v\u0103n": 1050, "di\u1ec5n": 1050, "fanelli": [1050, 1051], "nihal": 1050, "thukarama": 1050, "jare": 1050, "nima10khodaveisi": 1050, "nima": 1050, "sarajpoor": 1050, "nitinramvelraj": 1050, "nnlnr": [1050, 1051], "npach": [1050, 1051], "nwanna": 1050, "nymark": 1050, "kho": 1050, "holman": 1050, "oll": 1050, "lukowski": 1050, "hassoun": 1050, "tamer": 1050, "ouss1508": [1050, 1051], "oyindamola": 1050, "olatunji": 1050, "pab": [1050, 1051], "pandata": [1050, 1051], "soar": 1050, "petar": 1050, "mlinari\u0107": 1050, "pooja": [1050, 1051, 1052], "subramaniam": [1050, 1051, 1052], "priyam": 1050, "kakati": 1050, "freeland": 1050, "keerti": 1050, "rafal": [1050, 1051], "wojdyla": [1050, 1051], "raghuv": [1050, 1051], "makhija": 1050, "rehan": 1050, "guha": 1050, "klima": 1050, "crockett": 1050, "homm": 1050, "roman4oo": 1050, "rowan": 1050, "mankoo": 1050, "sabri": 1050, "monaf": 1050, "safikh": 1050, "salahuddin": 1050, "yojana": 1050, "menes": 1050, "ephrem": 1050, "sangam": 1050, "sangamswadik": 1050, "sanjai_3": [1050, 1051], "sarahremu": 1050, "sashka": [1050, 1051], "savkomax": 1050, "gustafson": [1050, 1051], "sec65": 1050, "seljak": 1050, "shadi": [1050, 1051], "gewili": [1050, 1051], "shellyfung": 1050, "shinsuk": 1050, "mori": 1050, "shiva": [1050, 1051], "shoaib": 1050, "khan": [1050, 1051], "shogo": [1050, 1051], "hida": [1050, 1051], "shrankhla": 1050, "sonniv": [1050, 1051], "sortofamudkip": [1050, 1051], "stanislav": [1050, 1051], "modrak": [1050, 1051], "stellalin7": 1050, "vaerenbergh": [1050, 1051], "schmerler": 1050, "tabea": [1050, 1051], "kossen": [1050, 1051], "thedevpanda": 1050, "syd": 1050, "sre": 1050, "weezel": [1050, 1051], "bonald": 1050, "germer": [1050, 1051], "ion": 1050, "timofei": 1050, "kornev": 1050, "pitter": 1050, "tomiock": [1050, 1051], "mathew": 1050, "tspeng": [1050, 1051], "egashira": 1050, "rey": 1050, "puerta": 1050, "vishal": 1050, "vyom": [1050, 1051], "pathak": [1050, 1051], "wattai": 1050, "wchathura": 1050, "wen": 1050, "x110": 1050, "xuniu": 1050, "yanhong": 1050, "ef": 1050, "yusuf": [1050, 1051], "raji": [1050, 1051], "adil": 1050, "khwaja": 1050, "zeeshan": [1050, 1051], "lone": [1050, 1051], "27468": 1051, "27583": 1051, "paralel": 1051, "27573": 1051, "27580": 1051, "18488": 1051, "26814": 1051, "27044": 1051, "26913": 1051, "27167": 1051, "27243": 1051, "26602": 1051, "26521": 1051, "26748": 1051, "26600": 1051, "shreesha": [1051, 1052], "27002": 1051, "26416": 1051, "tao": [1051, 1052], "26772": 1051, "reintroduc": 1051, "26754": 1051, "26893": 1051, "26760": 1051, "26940": 1051, "26931": 1051, "26903": 1051, "roehr": [1051, 1052], "27292": 1051, "25196": 1051, "24871": 1051, "25752": 1051, "25438": 1051, "yotam": 1051, "avidar": 1051, "constantini": 1051, "26337": 1051, "25120": 1051, "27311": 1051, "25294": 1051, "25308": 1051, "25291": 1051, "25367": 1051, "25402": 1051, "25044": 1051, "smt": 1051, "26082": 1051, "24027": 1051, "25815": 1051, "24568": 1051, "26121": 1051, "25805": 1051, "26385": 1051, "26657": 1051, "binesh": [1051, 1052], "bannerje": [1051, 1052], "25251": 1051, "26503": 1051, "26286": 1051, "26323": 1051, "26033": 1051, "26108": 1051, "barth\u00e9lemi": [1051, 1052], "26433": 1051, "26386": 1051, "26551": 1051, "26579": 1051, "25784": 1051, "25490": 1051, "25956": 1051, "22409": 1051, "25177": 1051, "24882": 1051, "25186": 1051, "breve": 1051, "26318": 1051, "25506": 1051, "25601": 1051, "fidor": 1051, "25931": 1051, "25629": 1051, "26242": 1051, "toplak": 1051, "sckit": 1051, "25297": 1051, "24230": 1051, "25102": 1051, "25973": 1051, "25232": 1051, "26454": 1051, "25209": 1051, "26644": 1051, "lemo": [1051, 1052], "21809": 1051, "25732": 1051, "25190": 1051, "26207": 1051, "25587": 1051, "25697": 1051, "25214": 1051, "26653": 1051, "25531": 1051, "17388": 1051, "24769": 1051, "25713": 1051, "18723": 1051, "sahil": 1051, "24677": 1051, "24668": 1051, "dberenbaum": 1051, "25987": 1051, "26019": 1051, "25432": 1051, "25672": 1051, "lene": 1051, "preuss": 1051, "25299": 1051, "omarmanzoor": 1051, "26194": 1051, "26264": 1051, "barata": 1051, "onggo": 1051, "23099": 1051, "26021": 1051, "jiawei": [1051, 1052, 1053], "25659": 1051, "26333": 1051, "24140": 1051, "24076": 1051, "25417": 1051, "24083": 1051, "25443": 1051, "feature_union": 1051, "25093": 1051, "25220": 1051, "26325": 1051, "25334": 1051, "25677": 1051, "20524": 1051, "niuk": 1051, "23731": 1051, "24145": 1051, "22506": 1051, "24935": 1051, "seladu": 1051, "25257": 1051, "26424": 1051, "26400": 1051, "26566": 1051, "26093": 1051, "23595": 1051, "26376": 1051, "25387": 1051, "26289": 1051, "25813": 1051, "26106": 1051, "25814": 1051, "check_transformers_unfitted_stateless": 1051, "25733": 1051, "19664": 1051, "environmenterror": 1051, "ioerror": 1051, "windowserror": 1051, "26466": 1051, "kushwah": [1051, 1052], "handk": 1051, "adien": 1051, "mansouri": 1051, "alexl": [1051, 1052], "amai": 1051, "annegnx": 1051, "ansam": 1051, "zedan": 1051, "dutt": 1051, "aymericbasset": 1051, "tripramudya": 1051, "benedek": 1051, "harsanyi": 1051, "brevin": [1051, 1052], "kund": [1051, 1052], "troillard": [1051, 1052], "carla": 1051, "berenbaum": 1051, "proding": 1051, "butyugina": 1051, "elabonga": [1051, 1052], "atuo": [1051, 1052], "farhan": 1051, "hujiahong726": 1051, "ili": [1051, 1052], "jb": [1051, 1052], "mountford": [1051, 1052], "jessicakk0711": 1051, "joei": 1051, "hedlund": 1051, "linu": [1051, 1052], "fouquet": [1051, 1052], "harfouch": 1051, "mdarii": 1051, "murezzda": 1051, "nightwalkx": 1051, "nishu": 1051, "piontek": 1051, "pnucci": 1051, "sadra": 1051, "barikbin": 1051, "searchforpass": 1051, "seoeun": 1051, "th\u00e9ophil": 1051, "barang": 1051, "veghit": 1051, "vignesh": 1051, "vijeth": [1051, 1052], "moudgalya": [1051, 1052], "windiana42": 1051, "yuchen": [1051, 1052], "tba": 1052, "2024": 1052, "28435": 1052, "28399": 1052, "vineet": 1052, "26837": 1052, "krsto": 1052, "prorokovi\u0107": 1052, "28306": 1052, "28521": 1052, "28188": 1052, "28256": 1052, "28240": 1052, "28195": 1052, "28191": 1052, "28235": 1052, "28262": 1052, "rerais": 1052, "28167": 1052, "28247": 1052, "28121": 1052, "peterlongo": 1052, "28165": 1052, "int64dtyp": 1052, "28385": 1052, "27702": 1052, "same_kind": 1052, "28365": 1052, "leo": 1052, "grinsztajn": 1052, "28184": 1052, "28377": 1052, "bergman": 1052, "28241": 1052, "28263": 1052, "28233": 1052, "hopfensperg": 1052, "28295": 1052, "28327": 1052, "28198": 1052, "28222": 1052, "sooner": 1052, "26721": 1052, "27670": 1052, "27315": 1052, "26464": 1052, "26616": 1052, "cappuzzo": 1052, "Ines": 1052, "ibnukhsein": 1052, "boulard": 1052, "26648": 1052, "27538": 1052, "27308": 1052, "26789": 1052, "26896": 1052, "27058": 1052, "27005": 1052, "26525": 1052, "27490": 1052, "27500": 1052, "27478": 1052, "27389": 1052, "27104": 1052, "27250": 1052, "27179": 1052, "nurseit": 1052, "kamchyev": 1052, "27100": 1052, "virshup": 1052, "27239": 1052, "korobko": 1052, "27240": 1052, "27274": 1052, "27161": 1052, "27219": 1052, "27277": 1052, "27301": 1052, "lohit": 1052, "sundaramahalingam": 1052, "27252": 1052, "27166": 1052, "27314": 1052, "jax": 1052, "27137": 1052, "26855": 1052, "27601": 1052, "26315": 1052, "27098": 1052, "27431": 1052, "sok\u00f3\u0142": 1052, "27556": 1052, "27110": 1052, "26243": 1052, "27558": 1052, "28048": 1052, "26506": 1052, "correspondingli": 1052, "26831": 1052, "26786": 1052, "26909": 1052, "27185": 1052, "27668": 1052, "nolan": 1052, "mcmahon": 1052, "depedend": 1052, "26459": 1052, "haoi": 1052, "27678": 1052, "tata": 1052, "27651": 1052, "27898": 1052, "26744": 1052, "27828": 1052, "26683": 1052, "27734": 1052, "25275": 1052, "27204": 1052, "27438": 1052, "28111": 1052, "27718": 1052, "sparrai": 1052, "spmatrix": 1052, "70x": 1052, "tarashanski": 1052, "scanpi": 1052, "18689": 1052, "26634": 1052, "landeau": 1052, "vigni": 1052, "27834": 1052, "26391": 1052, "26411": 1052, "27835": 1052, "27139": 1052, "13649": 1052, "reilli": 1052, "dealloc": 1052, "27865": 1052, "26278": 1052, "28095": 1052, "26957": 1052, "26163": 1052, "26736": 1052, "27645": 1052, "27817": 1052, "ongari": 1052, "27710": 1052, "28074": 1052, "26830": 1052, "24838": 1052, "hertel": 1052, "27721": 1052, "27841": 1052, "21807": 1052, "27291": 1052, "27675": 1052, "cant": 1052, "27417": 1052, "27899": 1052, "27979": 1052, "5x": 1052, "26765": 1052, "27006": 1052, "26366": 1052, "mojdeh": 1052, "rastgoo": 1052, "neg_root_mean_squared_log_error_scor": 1052, "26734": 1052, "27650": 1052, "27624": 1052, "27577": 1052, "26840": 1052, "26299": 1052, "27720": 1052, "27018": 1052, "26828": 1052, "23317": 1052, "26410": 1052, "26267": 1052, "27017": 1052, "xuefeng": 1052, "27760": 1052, "26944": 1052, "26674": 1052, "27309": 1052, "27328": 1052, "27801": 1052, "27821": 1052, "26862": 1052, "goh": 1052, "yisheng": 1052, "dia": 1052, "datastuctur": 1052, "27372": 1052, "may_share_memori": 1052, "27336": 1052, "check_estimators_pickl": 1052, "readonly_memmap": 1052, "misdetect": 1052, "27614": 1052, "27757": 1052, "28090": 1052, "furrer": 1052, "log_logist": 1052, "logaddexp": 1052, "27544": 1052, "101alexmartin": 1052, "adarsh": 1052, "wase": 1052, "advik": 1052, "feghali": 1052, "anam": 1052, "andyscanzio": 1052, "kislovskii": 1052, "mare": 1052, "benoit": 1052, "chevalli": 1052, "mame": 1052, "chad": 1052, "parmet": 1052, "clauss": 1052, "boyl": 1052, "cynthias13w": 1052, "damink": 1052, "schmitz": 1052, "tinoco": 1052, "brochart": 1052, "devanshkyada27": 1052, "duong": 1052, "eitan": 1052, "heme": 1052, "emma": 1052, "carbal": 1052, "ferdman": 1052, "epimorph": 1052, "erwan": 1052, "floch": 1052, "filip": [1052, 1053], "karlo": [1052, 1053], "do\u0161ilovi\u0107": [1052, 1053], "idelberg": 1052, "harmanan": 1052, "kohli": 1052, "ioangatop": 1052, "isaactrost": 1052, "iwona": 1052, "zdzieblo": 1052, "jakub": 1052, "kaczmarzyk": 1052, "nordbi": 1052, "waweru": 1052, "kishan": 1052, "ved": 1052, "pita": 1052, "koustav": 1052, "ldwy4": 1052, "silvestrin": 1052, "luk\u00e1\u0161": 1052, "folwarczn\u00fd": 1052, "geiger": 1052, "fraa\u00df": 1052, "hanu\u0161": 1052, "elliot": [1052, 1053], "larrald": 1052, "mecopur": 1052, "higgin": 1052, "miki": 1052, "watanab": 1052, "milton": 1052, "mn193": 1052, "hamdi": 1052, "naman": 1052, "dangi": 1052, "malem": 1052, "shinitski": 1052, "oleksii": 1052, "kachaiev": 1052, "hull": 1052, "fr\u00e9minvil": [1052, 1053], "puneeth": 1052, "qmarcou": 1052, "raj": 1052, "pulapakura": 1052, "raphael": 1052, "pere": 1052, "salim": 1052, "dohri": 1052, "sandip": 1052, "dutta": 1052, "qaiser": 1052, "scaja": 1052, "shubhal": 1052, "s\u00f8ren": 1052, "fugled": 1052, "tanjina": 1052, "afroj": 1052, "tharak": 1052, "hegd": 1052, "thebabush": 1052, "tialo": 1052, "tongyu": 1052, "fokow": 1052, "yuusuk": 1052, "hiramatsu": 1052, "28040": 1053, "settl": 1053, "28187": 1053, "28432": 1053, "27560": 1053, "28261": 1053, "27584": 1053, "28205": 1053, "28491": 1053, "thanh": 1053, "__getitem__": 1053, "27990": 1053, "28483": 1053, "28160": 1053, "28498": 1053, "27937": 1053, "vd": 1053, "boom": 1053, "27844": 1053, "28102": 1053, "18843": 1053, "montesel": 1053, "28136": 1053, "28085": 1053, "menoci": 1053, "florin": 1053, "28053": 1053, "27576": 1053, "28425": 1053, "28557": 1053, "28582": 1053, "28471": 1053, "28051": 1053, "28360": 1053, "28092": 1053, "28210": 1053, "28352": 1053, "27700": 1053, "25991": 1053, "27636": 1053, "ralph": 1053, "urlu": 1053}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [473, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [631, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [904, 4, 1, "", "set_config"], [905, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[428, 1, 1, "", "BaseEstimator"], [429, 1, 1, "", "BiclusterMixin"], [430, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [431, 1, 1, "", "ClassifierMixin"], [432, 1, 1, "", "ClusterMixin"], [433, 1, 1, "", "DensityMixin"], [434, 1, 1, "", "MetaEstimatorMixin"], [435, 1, 1, "", "OneToOneFeatureMixin"], [436, 1, 1, "", "OutlierMixin"], [437, 1, 1, "", "RegressorMixin"], [438, 1, 1, "", "TransformerMixin"], [439, 4, 1, "", "clone"], [440, 4, 1, "", "is_classifier"], [441, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[428, 2, 1, "", "get_metadata_routing"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[429, 3, 1, "", "biclusters_"], [429, 2, 1, "", "get_indices"], [429, 2, 1, "", "get_shape"], [429, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[430, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[431, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[432, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[433, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[435, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[436, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[437, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[438, 2, 1, "", "fit_transform"], [438, 2, 1, "", "set_output"]], "sklearn.calibration": [[442, 1, 1, "", "CalibratedClassifierCV"], [443, 1, 1, "", "CalibrationDisplay"], [444, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "predict_proba"], [442, 2, 1, "", "score"], [442, 2, 1, "", "set_fit_request"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[443, 2, 1, "", "from_estimator"], [443, 2, 1, "", "from_predictions"], [443, 2, 1, "", "plot"]], "sklearn.cluster": [[445, 1, 1, "", "AffinityPropagation"], [446, 1, 1, "", "AgglomerativeClustering"], [447, 1, 1, "", "Birch"], [448, 1, 1, "", "BisectingKMeans"], [449, 1, 1, "", "DBSCAN"], [450, 1, 1, "", "FeatureAgglomeration"], [451, 1, 1, "", "HDBSCAN"], [452, 1, 1, "", "KMeans"], [453, 1, 1, "", "MeanShift"], [454, 1, 1, "", "MiniBatchKMeans"], [455, 1, 1, "", "OPTICS"], [456, 1, 1, "", "SpectralBiclustering"], [457, 1, 1, "", "SpectralClustering"], [458, 1, 1, "", "SpectralCoclustering"], [459, 4, 1, "", "affinity_propagation"], [460, 4, 1, "", "cluster_optics_dbscan"], [461, 4, 1, "", "cluster_optics_xi"], [462, 4, 1, "", "compute_optics_graph"], [425, 4, 1, "", "dbscan"], [463, 4, 1, "", "estimate_bandwidth"], [464, 4, 1, "", "k_means"], [465, 4, 1, "", "kmeans_plusplus"], [466, 4, 1, "", "mean_shift"], [467, 4, 1, "", "spectral_clustering"], [468, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "partial_fit"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_fit_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_predict_request"], [448, 2, 1, "", "set_score_request"], [448, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[450, 2, 1, "", "fit"], [450, 3, 1, "", "fit_predict"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "inverse_transform"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[451, 2, 1, "", "dbscan_clustering"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "fit_transform"], [452, 2, 1, "", "get_feature_names_out"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "predict"], [452, 2, 1, "", "score"], [452, 2, 1, "", "set_fit_request"], [452, 2, 1, "", "set_output"], [452, 2, 1, "", "set_params"], [452, 2, 1, "", "set_predict_request"], [452, 2, 1, "", "set_score_request"], [452, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "predict"], [453, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "fit_transform"], [454, 2, 1, "", "get_feature_names_out"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "partial_fit"], [454, 2, 1, "", "predict"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_fit_request"], [454, 2, 1, "", "set_output"], [454, 2, 1, "", "set_params"], [454, 2, 1, "", "set_partial_fit_request"], [454, 2, 1, "", "set_predict_request"], [454, 2, 1, "", "set_score_request"], [454, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_predict"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[456, 3, 1, "", "biclusters_"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "get_indices"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "get_shape"], [456, 2, 1, "", "get_submatrix"], [456, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[457, 2, 1, "", "fit"], [457, 2, 1, "", "fit_predict"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[458, 3, 1, "", "biclusters_"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "get_indices"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "get_shape"], [458, 2, 1, "", "get_submatrix"], [458, 2, 1, "", "set_params"]], "sklearn.compose": [[469, 1, 1, "", "ColumnTransformer"], [470, 1, 1, "", "TransformedTargetRegressor"], [471, 1, 1, "", "make_column_selector"], [472, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[469, 2, 1, "", "fit"], [469, 2, 1, "", "fit_transform"], [469, 2, 1, "", "get_feature_names_out"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 3, 1, "", "named_transformers_"], [469, 2, 1, "", "set_output"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 3, 1, "", "n_features_in_"], [470, 2, 1, "", "predict"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[471, 2, 1, "", "__call__"]], "sklearn.covariance": [[474, 1, 1, "", "EllipticEnvelope"], [475, 1, 1, "", "EmpiricalCovariance"], [476, 1, 1, "", "GraphicalLasso"], [477, 1, 1, "", "GraphicalLassoCV"], [478, 1, 1, "", "LedoitWolf"], [479, 1, 1, "", "MinCovDet"], [480, 1, 1, "", "OAS"], [481, 1, 1, "", "ShrunkCovariance"], [482, 4, 1, "", "empirical_covariance"], [483, 4, 1, "", "graphical_lasso"], [484, 4, 1, "", "ledoit_wolf"], [485, 4, 1, "", "ledoit_wolf_shrinkage"], [427, 4, 1, "", "oas"], [486, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[474, 2, 1, "", "correct_covariance"], [474, 2, 1, "", "decision_function"], [474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "fit_predict"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "predict"], [474, 2, 1, "", "reweight_covariance"], [474, 2, 1, "", "score"], [474, 2, 1, "", "score_samples"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[479, 2, 1, "", "correct_covariance"], [479, 2, 1, "", "error_norm"], [479, 2, 1, "", "fit"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "get_precision"], [479, 2, 1, "", "mahalanobis"], [479, 2, 1, "", "reweight_covariance"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[480, 2, 1, "", "error_norm"], [480, 2, 1, "", "fit"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "get_precision"], [480, 2, 1, "", "mahalanobis"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[481, 2, 1, "", "error_norm"], [481, 2, 1, "", "fit"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "get_precision"], [481, 2, 1, "", "mahalanobis"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[487, 1, 1, "", "CCA"], [488, 1, 1, "", "PLSCanonical"], [489, 1, 1, "", "PLSRegression"], [490, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[487, 2, 1, "", "fit"], [487, 2, 1, "", "fit_transform"], [487, 2, 1, "", "get_feature_names_out"], [487, 2, 1, "", "get_metadata_routing"], [487, 2, 1, "", "get_params"], [487, 2, 1, "", "inverse_transform"], [487, 2, 1, "", "predict"], [487, 2, 1, "", "score"], [487, 2, 1, "", "set_output"], [487, 2, 1, "", "set_params"], [487, 2, 1, "", "set_predict_request"], [487, 2, 1, "", "set_score_request"], [487, 2, 1, "", "set_transform_request"], [487, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[488, 2, 1, "", "fit"], [488, 2, 1, "", "fit_transform"], [488, 2, 1, "", "get_feature_names_out"], [488, 2, 1, "", "get_metadata_routing"], [488, 2, 1, "", "get_params"], [488, 2, 1, "", "inverse_transform"], [488, 2, 1, "", "predict"], [488, 2, 1, "", "score"], [488, 2, 1, "", "set_output"], [488, 2, 1, "", "set_params"], [488, 2, 1, "", "set_predict_request"], [488, 2, 1, "", "set_score_request"], [488, 2, 1, "", "set_transform_request"], [488, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[489, 2, 1, "", "fit"], [489, 2, 1, "", "fit_transform"], [489, 2, 1, "", "get_feature_names_out"], [489, 2, 1, "", "get_metadata_routing"], [489, 2, 1, "", "get_params"], [489, 2, 1, "", "inverse_transform"], [489, 2, 1, "", "predict"], [489, 2, 1, "", "score"], [489, 2, 1, "", "set_output"], [489, 2, 1, "", "set_params"], [489, 2, 1, "", "set_predict_request"], [489, 2, 1, "", "set_score_request"], [489, 2, 1, "", "set_transform_request"], [489, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[490, 2, 1, "", "fit"], [490, 2, 1, "", "fit_transform"], [490, 2, 1, "", "get_feature_names_out"], [490, 2, 1, "", "get_metadata_routing"], [490, 2, 1, "", "get_params"], [490, 2, 1, "", "set_output"], [490, 2, 1, "", "set_params"], [490, 2, 1, "", "transform"]], "sklearn.datasets": [[491, 4, 1, "", "clear_data_home"], [492, 4, 1, "", "dump_svmlight_file"], [493, 4, 1, "", "fetch_20newsgroups"], [494, 4, 1, "", "fetch_20newsgroups_vectorized"], [495, 4, 1, "", "fetch_california_housing"], [496, 4, 1, "", "fetch_covtype"], [497, 4, 1, "", "fetch_kddcup99"], [498, 4, 1, "", "fetch_lfw_pairs"], [499, 4, 1, "", "fetch_lfw_people"], [500, 4, 1, "", "fetch_olivetti_faces"], [501, 4, 1, "", "fetch_openml"], [502, 4, 1, "", "fetch_rcv1"], [503, 4, 1, "", "fetch_species_distributions"], [504, 4, 1, "", "get_data_home"], [505, 4, 1, "", "load_breast_cancer"], [506, 4, 1, "", "load_diabetes"], [507, 4, 1, "", "load_digits"], [508, 4, 1, "", "load_files"], [509, 4, 1, "", "load_iris"], [510, 4, 1, "", "load_linnerud"], [511, 4, 1, "", "load_sample_image"], [512, 4, 1, "", "load_sample_images"], [513, 4, 1, "", "load_svmlight_file"], [514, 4, 1, "", "load_svmlight_files"], [515, 4, 1, "", "load_wine"], [516, 4, 1, "", "make_biclusters"], [517, 4, 1, "", "make_blobs"], [518, 4, 1, "", "make_checkerboard"], [519, 4, 1, "", "make_circles"], [520, 4, 1, "", "make_classification"], [521, 4, 1, "", "make_friedman1"], [522, 4, 1, "", "make_friedman2"], [523, 4, 1, "", "make_friedman3"], [524, 4, 1, "", "make_gaussian_quantiles"], [525, 4, 1, "", "make_hastie_10_2"], [526, 4, 1, "", "make_low_rank_matrix"], [527, 4, 1, "", "make_moons"], [528, 4, 1, "", "make_multilabel_classification"], [529, 4, 1, "", "make_regression"], [530, 4, 1, "", "make_s_curve"], [531, 4, 1, "", "make_sparse_coded_signal"], [532, 4, 1, "", "make_sparse_spd_matrix"], [533, 4, 1, "", "make_sparse_uncorrelated"], [534, 4, 1, "", "make_spd_matrix"], [535, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[536, 1, 1, "", "DictionaryLearning"], [537, 1, 1, "", "FactorAnalysis"], [538, 1, 1, "", "FastICA"], [539, 1, 1, "", "IncrementalPCA"], [540, 1, 1, "", "KernelPCA"], [541, 1, 1, "", "LatentDirichletAllocation"], [542, 1, 1, "", "MiniBatchDictionaryLearning"], [543, 1, 1, "", "MiniBatchNMF"], [544, 1, 1, "", "MiniBatchSparsePCA"], [545, 1, 1, "", "NMF"], [546, 1, 1, "", "PCA"], [547, 1, 1, "", "SparseCoder"], [548, 1, 1, "", "SparsePCA"], [549, 1, 1, "", "TruncatedSVD"], [550, 4, 1, "", "dict_learning"], [551, 4, 1, "", "dict_learning_online"], [426, 4, 1, "", "fastica"], [552, 4, 1, "", "non_negative_factorization"], [553, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_covariance"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "get_precision"], [537, 2, 1, "", "score"], [537, 2, 1, "", "score_samples"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_inverse_transform_request"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "set_transform_request"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_covariance"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_precision"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "set_partial_fit_request"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "partial_fit"], [541, 2, 1, "", "perplexity"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "partial_fit"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "partial_fit"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "set_partial_fit_request"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_covariance"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "get_precision"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "score"], [546, 2, 1, "", "score_samples"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 3, 1, "", "n_components_"], [547, 3, 1, "", "n_features_in_"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "inverse_transform"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "inverse_transform"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[554, 1, 1, "", "LinearDiscriminantAnalysis"], [555, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[554, 2, 1, "", "decision_function"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_transform"], [554, 2, 1, "", "get_feature_names_out"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_output"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[555, 2, 1, "", "decision_function"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[556, 1, 1, "", "DummyClassifier"], [557, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_predict_request"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[558, 1, 1, "", "AdaBoostClassifier"], [559, 1, 1, "", "AdaBoostRegressor"], [560, 1, 1, "", "BaggingClassifier"], [561, 1, 1, "", "BaggingRegressor"], [562, 1, 1, "", "ExtraTreesClassifier"], [563, 1, 1, "", "ExtraTreesRegressor"], [564, 1, 1, "", "GradientBoostingClassifier"], [565, 1, 1, "", "GradientBoostingRegressor"], [566, 1, 1, "", "HistGradientBoostingClassifier"], [567, 1, 1, "", "HistGradientBoostingRegressor"], [568, 1, 1, "", "IsolationForest"], [569, 1, 1, "", "RandomForestClassifier"], [570, 1, 1, "", "RandomForestRegressor"], [571, 1, 1, "", "RandomTreesEmbedding"], [572, 1, 1, "", "StackingClassifier"], [573, 1, 1, "", "StackingRegressor"], [574, 1, 1, "", "VotingClassifier"], [575, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[558, 2, 1, "", "decision_function"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_decision_function"], [558, 2, 1, "", "staged_predict"], [558, 2, 1, "", "staged_predict_proba"], [558, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[560, 2, 1, "", "decision_function"], [560, 3, 1, "", "estimators_samples_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[561, 3, 1, "", "estimators_samples_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[562, 2, 1, "", "apply"], [562, 2, 1, "", "decision_path"], [562, 3, 1, "", "estimators_samples_"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_path"], [563, 3, 1, "", "estimators_samples_"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_function"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_log_proba"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "staged_decision_function"], [564, 2, 1, "", "staged_predict"], [564, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[565, 2, 1, "", "apply"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[566, 2, 1, "", "decision_function"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_iter_"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "predict_proba"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "staged_decision_function"], [566, 2, 1, "", "staged_predict"], [566, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_iter_"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[568, 2, 1, "", "decision_function"], [568, 3, 1, "", "estimators_samples_"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_predict"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score_samples"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[569, 2, 1, "", "apply"], [569, 2, 1, "", "decision_path"], [569, 3, 1, "", "estimators_samples_"], [569, 3, 1, "", "feature_importances_"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_log_proba"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[570, 2, 1, "", "apply"], [570, 2, 1, "", "decision_path"], [570, 3, 1, "", "estimators_samples_"], [570, 3, 1, "", "feature_importances_"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[571, 2, 1, "", "apply"], [571, 2, 1, "", "decision_path"], [571, 3, 1, "", "estimators_samples_"], [571, 3, 1, "", "feature_importances_"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[572, 2, 1, "", "decision_function"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 3, 1, "", "n_features_in_"], [572, 3, 1, "", "named_estimators"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "predict_proba"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "set_score_request"], [572, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "n_features_in_"], [573, 3, 1, "", "named_estimators"], [573, 2, 1, "", "predict"], [573, 2, 1, "", "score"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_score_request"], [573, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "n_features_in_"], [574, 3, 1, "", "named_estimators"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "predict_proba"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_fit_request"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "set_score_request"], [574, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "n_features_in_"], [575, 3, 1, "", "named_estimators"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_fit_request"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_score_request"], [575, 2, 1, "", "transform"]], "sklearn.exceptions": [[576, 5, 1, "", "ConvergenceWarning"], [577, 5, 1, "", "DataConversionWarning"], [578, 5, 1, "", "DataDimensionalityWarning"], [579, 5, 1, "", "EfficiencyWarning"], [580, 5, 1, "", "FitFailedWarning"], [581, 5, 1, "", "InconsistentVersionWarning"], [582, 5, 1, "", "NotFittedError"], [583, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[584, 0, 0, "-", "enable_halving_search_cv"], [585, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[586, 1, 1, "", "DictVectorizer"], [587, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "restrict"], [586, 2, 1, "", "set_inverse_transform_request"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "set_transform_request"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[588, 1, 1, "", "PatchExtractor"], [589, 4, 1, "", "extract_patches_2d"], [590, 4, 1, "", "grid_to_graph"], [591, 4, 1, "", "img_to_graph"], [592, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[593, 1, 1, "", "CountVectorizer"], [594, 1, 1, "", "HashingVectorizer"], [595, 1, 1, "", "TfidfTransformer"], [596, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[593, 2, 1, "", "build_analyzer"], [593, 2, 1, "", "build_preprocessor"], [593, 2, 1, "", "build_tokenizer"], [593, 2, 1, "", "decode"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_stop_words"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_fit_request"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "set_transform_request"], [593, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[594, 2, 1, "", "build_analyzer"], [594, 2, 1, "", "build_preprocessor"], [594, 2, 1, "", "build_tokenizer"], [594, 2, 1, "", "decode"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_stop_words"], [594, 2, 1, "", "partial_fit"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "set_transform_request"], [595, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[596, 2, 1, "", "build_analyzer"], [596, 2, 1, "", "build_preprocessor"], [596, 2, 1, "", "build_tokenizer"], [596, 2, 1, "", "decode"], [596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_stop_words"], [596, 3, 1, "", "idf_"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_fit_request"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "set_transform_request"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection": [[597, 1, 1, "", "GenericUnivariateSelect"], [598, 1, 1, "", "RFE"], [599, 1, 1, "", "RFECV"], [600, 1, 1, "", "SelectFdr"], [601, 1, 1, "", "SelectFpr"], [602, 1, 1, "", "SelectFromModel"], [603, 1, 1, "", "SelectFwe"], [604, 1, 1, "", "SelectKBest"], [605, 1, 1, "", "SelectPercentile"], [606, 1, 1, "", "SelectorMixin"], [607, 1, 1, "", "SequentialFeatureSelector"], [608, 1, 1, "", "VarianceThreshold"], [609, 4, 1, "", "chi2"], [610, 4, 1, "", "f_classif"], [611, 4, 1, "", "f_regression"], [612, 4, 1, "", "mutual_info_classif"], [613, 4, 1, "", "mutual_info_regression"], [614, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[598, 3, 1, "", "classes_"], [598, 2, 1, "", "decision_function"], [598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "predict"], [598, 2, 1, "", "predict_log_proba"], [598, 2, 1, "", "predict_proba"], [598, 2, 1, "", "score"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[599, 3, 1, "", "classes_"], [599, 2, 1, "", "decision_function"], [599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "predict"], [599, 2, 1, "", "predict_log_proba"], [599, 2, 1, "", "predict_proba"], [599, 2, 1, "", "score"], [599, 2, 1, "", "set_fit_request"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 3, 1, "", "n_features_in_"], [602, 2, 1, "", "partial_fit"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "threshold_"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "get_support"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "get_support"], [608, 2, 1, "", "inverse_transform"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[615, 1, 1, "", "GaussianProcessClassifier"], [616, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_metadata_routing"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "kernel_"], [615, 2, 1, "", "log_marginal_likelihood"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "predict_proba"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "get_metadata_routing"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "log_marginal_likelihood"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "sample_y"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "set_predict_request"], [616, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[617, 1, 1, "", "CompoundKernel"], [618, 1, 1, "", "ConstantKernel"], [619, 1, 1, "", "DotProduct"], [620, 1, 1, "", "ExpSineSquared"], [621, 1, 1, "", "Exponentiation"], [622, 1, 1, "", "Hyperparameter"], [623, 1, 1, "", "Kernel"], [624, 1, 1, "", "Matern"], [625, 1, 1, "", "PairwiseKernel"], [626, 1, 1, "", "Product"], [627, 1, 1, "", "RBF"], [628, 1, 1, "", "RationalQuadratic"], [629, 1, 1, "", "Sum"], [630, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameter_length_scale"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[622, 6, 1, "", "bounds"], [622, 2, 1, "", "count"], [622, 6, 1, "", "fixed"], [622, 2, 1, "", "index"], [622, 6, 1, "", "n_elements"], [622, 6, 1, "", "name"], [622, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[630, 2, 1, "", "__call__"], [630, 3, 1, "", "bounds"], [630, 2, 1, "", "clone_with_theta"], [630, 2, 1, "", "diag"], [630, 2, 1, "", "get_params"], [630, 3, 1, "", "hyperparameters"], [630, 2, 1, "", "is_stationary"], [630, 3, 1, "", "n_dims"], [630, 3, 1, "", "requires_vector_input"], [630, 2, 1, "", "set_params"], [630, 3, 1, "", "theta"]], "sklearn.impute": [[632, 1, 1, "", "IterativeImputer"], [633, 1, 1, "", "KNNImputer"], [634, 1, 1, "", "MissingIndicator"], [635, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "inverse_transform"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.inspection": [[636, 1, 1, "", "DecisionBoundaryDisplay"], [637, 1, 1, "", "PartialDependenceDisplay"], [638, 4, 1, "", "partial_dependence"], [639, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[636, 2, 1, "", "from_estimator"], [636, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[637, 2, 1, "", "from_estimator"], [637, 2, 1, "", "plot"]], "sklearn.isotonic": [[640, 1, 1, "", "IsotonicRegression"], [641, 4, 1, "", "check_increasing"], [642, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_predict_request"], [640, 2, 1, "", "set_score_request"], [640, 2, 1, "", "set_transform_request"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[643, 1, 1, "", "AdditiveChi2Sampler"], [644, 1, 1, "", "Nystroem"], [645, 1, 1, "", "PolynomialCountSketch"], [646, 1, 1, "", "RBFSampler"], [647, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "fit_transform"], [646, 2, 1, "", "get_feature_names_out"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "set_output"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "fit_transform"], [647, 2, 1, "", "get_feature_names_out"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "set_output"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[648, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[649, 1, 1, "", "ARDRegression"], [650, 1, 1, "", "BayesianRidge"], [651, 1, 1, "", "ElasticNet"], [652, 1, 1, "", "ElasticNetCV"], [653, 1, 1, "", "GammaRegressor"], [654, 1, 1, "", "HuberRegressor"], [655, 1, 1, "", "Lars"], [656, 1, 1, "", "LarsCV"], [657, 1, 1, "", "Lasso"], [658, 1, 1, "", "LassoCV"], [659, 1, 1, "", "LassoLars"], [660, 1, 1, "", "LassoLarsCV"], [661, 1, 1, "", "LassoLarsIC"], [662, 1, 1, "", "LinearRegression"], [663, 1, 1, "", "LogisticRegression"], [664, 1, 1, "", "LogisticRegressionCV"], [665, 1, 1, "", "MultiTaskElasticNet"], [666, 1, 1, "", "MultiTaskElasticNetCV"], [667, 1, 1, "", "MultiTaskLasso"], [668, 1, 1, "", "MultiTaskLassoCV"], [669, 1, 1, "", "OrthogonalMatchingPursuit"], [670, 1, 1, "", "OrthogonalMatchingPursuitCV"], [671, 1, 1, "", "PassiveAggressiveClassifier"], [672, 1, 1, "", "PassiveAggressiveRegressor"], [673, 1, 1, "", "Perceptron"], [674, 1, 1, "", "PoissonRegressor"], [675, 1, 1, "", "QuantileRegressor"], [676, 1, 1, "", "RANSACRegressor"], [677, 1, 1, "", "Ridge"], [678, 1, 1, "", "RidgeCV"], [679, 1, 1, "", "RidgeClassifier"], [680, 1, 1, "", "RidgeClassifierCV"], [681, 1, 1, "", "SGDClassifier"], [682, 1, 1, "", "SGDOneClassSVM"], [683, 1, 1, "", "SGDRegressor"], [684, 1, 1, "", "TheilSenRegressor"], [685, 1, 1, "", "TweedieRegressor"], [686, 4, 1, "", "enet_path"], [687, 4, 1, "", "lars_path"], [688, 4, 1, "", "lars_path_gram"], [689, 4, 1, "", "lasso_path"], [690, 4, 1, "", "orthogonal_mp"], [691, 4, 1, "", "orthogonal_mp_gram"], [692, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_predict_request"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_predict_request"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"], [651, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "path"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"], [657, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "path"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[663, 2, 1, "", "decision_function"], [663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "predict_log_proba"], [663, 2, 1, "", "predict_proba"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[664, 2, 1, "", "decision_function"], [664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "predict_log_proba"], [664, 2, 1, "", "predict_proba"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "path"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"], [665, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "path"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "path"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"], [667, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "path"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[671, 2, 1, "", "decision_function"], [671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "set_score_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[672, 2, 1, "", "densify"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "partial_fit"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_partial_fit_request"], [672, 2, 1, "", "set_score_request"], [672, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[673, 2, 1, "", "decision_function"], [673, 2, 1, "", "densify"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "partial_fit"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_partial_fit_request"], [673, 2, 1, "", "set_score_request"], [673, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[679, 3, 1, "", "classes_"], [679, 2, 1, "", "decision_function"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[680, 3, 1, "", "classes_"], [680, 2, 1, "", "decision_function"], [680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[681, 2, 1, "", "decision_function"], [681, 2, 1, "", "densify"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "partial_fit"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "predict_log_proba"], [681, 2, 1, "", "predict_proba"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_partial_fit_request"], [681, 2, 1, "", "set_score_request"], [681, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[682, 2, 1, "", "decision_function"], [682, 2, 1, "", "densify"], [682, 2, 1, "", "fit"], [682, 2, 1, "", "fit_predict"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "partial_fit"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score_samples"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_partial_fit_request"], [682, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[683, 2, 1, "", "densify"], [683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "partial_fit"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_partial_fit_request"], [683, 2, 1, "", "set_score_request"], [683, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[684, 2, 1, "", "fit"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "score"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[685, 2, 1, "", "fit"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "predict"], [685, 2, 1, "", "score"], [685, 2, 1, "", "set_fit_request"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[693, 1, 1, "", "Isomap"], [694, 1, 1, "", "LocallyLinearEmbedding"], [695, 1, 1, "", "MDS"], [696, 1, 1, "", "SpectralEmbedding"], [697, 1, 1, "", "TSNE"], [698, 4, 1, "", "locally_linear_embedding"], [699, 4, 1, "", "smacof"], [700, 4, 1, "", "spectral_embedding"], [701, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_feature_names_out"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "reconstruction_error"], [693, 2, 1, "", "set_output"], [693, 2, 1, "", "set_params"], [693, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[694, 2, 1, "", "fit"], [694, 2, 1, "", "fit_transform"], [694, 2, 1, "", "get_feature_names_out"], [694, 2, 1, "", "get_metadata_routing"], [694, 2, 1, "", "get_params"], [694, 2, 1, "", "set_output"], [694, 2, 1, "", "set_params"], [694, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "set_fit_request"], [695, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[696, 2, 1, "", "fit"], [696, 2, 1, "", "fit_transform"], [696, 2, 1, "", "get_metadata_routing"], [696, 2, 1, "", "get_params"], [696, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[697, 2, 1, "", "fit"], [697, 2, 1, "", "fit_transform"], [697, 2, 1, "", "get_feature_names_out"], [697, 2, 1, "", "get_metadata_routing"], [697, 2, 1, "", "get_params"], [697, 2, 1, "", "set_output"], [697, 2, 1, "", "set_params"]], "sklearn.metrics": [[702, 1, 1, "", "ConfusionMatrixDisplay"], [703, 1, 1, "", "DetCurveDisplay"], [704, 1, 1, "", "DistanceMetric"], [705, 1, 1, "", "PrecisionRecallDisplay"], [706, 1, 1, "", "PredictionErrorDisplay"], [707, 1, 1, "", "RocCurveDisplay"], [708, 4, 1, "", "accuracy_score"], [709, 4, 1, "", "adjusted_mutual_info_score"], [710, 4, 1, "", "adjusted_rand_score"], [711, 4, 1, "", "auc"], [712, 4, 1, "", "average_precision_score"], [713, 4, 1, "", "balanced_accuracy_score"], [714, 4, 1, "", "brier_score_loss"], [715, 4, 1, "", "calinski_harabasz_score"], [716, 4, 1, "", "check_scoring"], [717, 4, 1, "", "class_likelihood_ratios"], [718, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [721, 4, 1, "", "cohen_kappa_score"], [722, 4, 1, "", "completeness_score"], [723, 4, 1, "", "confusion_matrix"], [724, 4, 1, "", "consensus_score"], [725, 4, 1, "", "coverage_error"], [726, 4, 1, "", "d2_absolute_error_score"], [727, 4, 1, "", "d2_pinball_score"], [728, 4, 1, "", "d2_tweedie_score"], [729, 4, 1, "", "davies_bouldin_score"], [730, 4, 1, "", "dcg_score"], [731, 4, 1, "", "det_curve"], [732, 4, 1, "", "explained_variance_score"], [733, 4, 1, "", "f1_score"], [734, 4, 1, "", "fbeta_score"], [735, 4, 1, "", "fowlkes_mallows_score"], [736, 4, 1, "", "get_scorer"], [737, 4, 1, "", "get_scorer_names"], [738, 4, 1, "", "hamming_loss"], [739, 4, 1, "", "hinge_loss"], [740, 4, 1, "", "homogeneity_completeness_v_measure"], [741, 4, 1, "", "homogeneity_score"], [742, 4, 1, "", "jaccard_score"], [743, 4, 1, "", "label_ranking_average_precision_score"], [744, 4, 1, "", "label_ranking_loss"], [745, 4, 1, "", "log_loss"], [746, 4, 1, "", "make_scorer"], [747, 4, 1, "", "matthews_corrcoef"], [748, 4, 1, "", "max_error"], [749, 4, 1, "", "mean_absolute_error"], [750, 4, 1, "", "mean_absolute_percentage_error"], [751, 4, 1, "", "mean_gamma_deviance"], [752, 4, 1, "", "mean_pinball_loss"], [753, 4, 1, "", "mean_poisson_deviance"], [754, 4, 1, "", "mean_squared_error"], [755, 4, 1, "", "mean_squared_log_error"], [756, 4, 1, "", "mean_tweedie_deviance"], [757, 4, 1, "", "median_absolute_error"], [758, 4, 1, "", "multilabel_confusion_matrix"], [759, 4, 1, "", "mutual_info_score"], [760, 4, 1, "", "ndcg_score"], [761, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [782, 4, 1, "", "pairwise_distances"], [783, 4, 1, "", "pairwise_distances_argmin"], [784, 4, 1, "", "pairwise_distances_argmin_min"], [785, 4, 1, "", "pairwise_distances_chunked"], [786, 4, 1, "", "precision_recall_curve"], [787, 4, 1, "", "precision_recall_fscore_support"], [788, 4, 1, "", "precision_score"], [789, 4, 1, "", "r2_score"], [790, 4, 1, "", "rand_score"], [791, 4, 1, "", "recall_score"], [792, 4, 1, "", "roc_auc_score"], [793, 4, 1, "", "roc_curve"], [794, 4, 1, "", "root_mean_squared_error"], [795, 4, 1, "", "root_mean_squared_log_error"], [796, 4, 1, "", "silhouette_samples"], [797, 4, 1, "", "silhouette_score"], [798, 4, 1, "", "top_k_accuracy_score"], [799, 4, 1, "", "v_measure_score"], [800, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[703, 2, 1, "", "from_estimator"], [703, 2, 1, "", "from_predictions"], [703, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[704, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[706, 2, 1, "", "from_estimator"], [706, 2, 1, "", "from_predictions"], [706, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[707, 2, 1, "", "from_estimator"], [707, 2, 1, "", "from_predictions"], [707, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[719, 4, 1, "", "contingency_matrix"], [720, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[762, 4, 1, "", "additive_chi2_kernel"], [763, 4, 1, "", "chi2_kernel"], [764, 4, 1, "", "cosine_distances"], [765, 4, 1, "", "cosine_similarity"], [766, 4, 1, "", "distance_metrics"], [767, 4, 1, "", "euclidean_distances"], [768, 4, 1, "", "haversine_distances"], [769, 4, 1, "", "kernel_metrics"], [770, 4, 1, "", "laplacian_kernel"], [771, 4, 1, "", "linear_kernel"], [772, 4, 1, "", "manhattan_distances"], [773, 4, 1, "", "nan_euclidean_distances"], [774, 4, 1, "", "paired_cosine_distances"], [775, 4, 1, "", "paired_distances"], [776, 4, 1, "", "paired_euclidean_distances"], [777, 4, 1, "", "paired_manhattan_distances"], [778, 4, 1, "", "pairwise_kernels"], [779, 4, 1, "", "polynomial_kernel"], [780, 4, 1, "", "rbf_kernel"], [781, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[801, 1, 1, "", "BayesianGaussianMixture"], [802, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[801, 2, 1, "", "fit"], [801, 2, 1, "", "fit_predict"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "sample"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[802, 2, 1, "", "aic"], [802, 2, 1, "", "bic"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "fit_predict"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "sample"], [802, 2, 1, "", "score"], [802, 2, 1, "", "score_samples"], [802, 2, 1, "", "set_params"]], "sklearn.model_selection": [[803, 1, 1, "", "GridSearchCV"], [804, 1, 1, "", "GroupKFold"], [805, 1, 1, "", "GroupShuffleSplit"], [806, 1, 1, "", "HalvingGridSearchCV"], [807, 1, 1, "", "HalvingRandomSearchCV"], [808, 1, 1, "", "KFold"], [809, 1, 1, "", "LearningCurveDisplay"], [810, 1, 1, "", "LeaveOneGroupOut"], [811, 1, 1, "", "LeaveOneOut"], [812, 1, 1, "", "LeavePGroupsOut"], [813, 1, 1, "", "LeavePOut"], [814, 1, 1, "", "ParameterGrid"], [815, 1, 1, "", "ParameterSampler"], [816, 1, 1, "", "PredefinedSplit"], [817, 1, 1, "", "RandomizedSearchCV"], [818, 1, 1, "", "RepeatedKFold"], [819, 1, 1, "", "RepeatedStratifiedKFold"], [820, 1, 1, "", "ShuffleSplit"], [821, 1, 1, "", "StratifiedGroupKFold"], [822, 1, 1, "", "StratifiedKFold"], [823, 1, 1, "", "StratifiedShuffleSplit"], [824, 1, 1, "", "TimeSeriesSplit"], [825, 1, 1, "", "ValidationCurveDisplay"], [826, 4, 1, "", "check_cv"], [827, 4, 1, "", "cross_val_predict"], [828, 4, 1, "", "cross_val_score"], [829, 4, 1, "", "cross_validate"], [830, 4, 1, "", "learning_curve"], [831, 4, 1, "", "permutation_test_score"], [832, 4, 1, "", "train_test_split"], [833, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "inverse_transform"], [803, 3, 1, "", "n_features_in_"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "set_split_request"], [804, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[806, 3, 1, "", "classes_"], [806, 2, 1, "", "decision_function"], [806, 2, 1, "", "fit"], [806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "inverse_transform"], [806, 3, 1, "", "n_features_in_"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_log_proba"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "score"], [806, 2, 1, "", "score_samples"], [806, 2, 1, "", "set_params"], [806, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[807, 3, 1, "", "classes_"], [807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "inverse_transform"], [807, 3, 1, "", "n_features_in_"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "score_samples"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[809, 2, 1, "", "from_estimator"], [809, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "set_split_request"], [810, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "set_split_request"], [812, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[817, 3, 1, "", "classes_"], [817, 2, 1, "", "decision_function"], [817, 2, 1, "", "fit"], [817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "inverse_transform"], [817, 3, 1, "", "n_features_in_"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "predict_log_proba"], [817, 2, 1, "", "predict_proba"], [817, 2, 1, "", "score"], [817, 2, 1, "", "score_samples"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "set_split_request"], [821, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[825, 2, 1, "", "from_estimator"], [825, 2, 1, "", "plot"]], "sklearn.multiclass": [[834, 1, 1, "", "OneVsOneClassifier"], [835, 1, 1, "", "OneVsRestClassifier"], [836, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[834, 2, 1, "", "decision_function"], [834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 3, 1, "", "n_classes_"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[835, 2, 1, "", "decision_function"], [835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 3, 1, "", "multilabel_"], [835, 3, 1, "", "n_classes_"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[837, 1, 1, "", "ClassifierChain"], [838, 1, 1, "", "MultiOutputClassifier"], [839, 1, 1, "", "MultiOutputRegressor"], [840, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[837, 2, 1, "", "decision_function"], [837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_log_proba"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[841, 1, 1, "", "BernoulliNB"], [842, 1, 1, "", "CategoricalNB"], [843, 1, 1, "", "ComplementNB"], [844, 1, 1, "", "GaussianNB"], [845, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_joint_log_proba"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_joint_log_proba"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[846, 1, 1, "", "BallTree"], [847, 1, 1, "", "KDTree"], [848, 1, 1, "", "KNeighborsClassifier"], [849, 1, 1, "", "KNeighborsRegressor"], [850, 1, 1, "", "KNeighborsTransformer"], [851, 1, 1, "", "KernelDensity"], [852, 1, 1, "", "LocalOutlierFactor"], [853, 1, 1, "", "NearestCentroid"], [854, 1, 1, "", "NearestNeighbors"], [855, 1, 1, "", "NeighborhoodComponentsAnalysis"], [856, 1, 1, "", "RadiusNeighborsClassifier"], [857, 1, 1, "", "RadiusNeighborsRegressor"], [858, 1, 1, "", "RadiusNeighborsTransformer"], [859, 4, 1, "", "kneighbors_graph"], [860, 4, 1, "", "radius_neighbors_graph"], [861, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[846, 2, 1, "", "get_arrays"], [846, 2, 1, "", "get_n_calls"], [846, 2, 1, "", "get_tree_stats"], [846, 2, 1, "", "kernel_density"], [846, 2, 1, "", "query"], [846, 2, 1, "", "query_radius"], [846, 2, 1, "", "reset_n_calls"], [846, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[847, 2, 1, "", "get_arrays"], [847, 2, 1, "", "get_n_calls"], [847, 2, 1, "", "get_tree_stats"], [847, 2, 1, "", "kernel_density"], [847, 2, 1, "", "query"], [847, 2, 1, "", "query_radius"], [847, 2, 1, "", "reset_n_calls"], [847, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "kneighbors"], [848, 2, 1, "", "kneighbors_graph"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "kneighbors"], [849, 2, 1, "", "kneighbors_graph"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "sample"], [851, 2, 1, "", "score"], [851, 2, 1, "", "score_samples"], [851, 2, 1, "", "set_fit_request"], [851, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[852, 2, 1, "", "decision_function"], [852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_predict"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "score_samples"], [852, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "score"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "kneighbors"], [854, 2, 1, "", "kneighbors_graph"], [854, 2, 1, "", "radius_neighbors"], [854, 2, 1, "", "radius_neighbors_graph"], [854, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "predict_proba"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "radius_neighbors"], [857, 2, 1, "", "radius_neighbors_graph"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "radius_neighbors"], [858, 2, 1, "", "radius_neighbors_graph"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.neural_network": [[862, 1, 1, "", "BernoulliRBM"], [863, 1, 1, "", "MLPClassifier"], [864, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "gibbs"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "score_samples"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "partial_fit"], [863, 2, 1, "", "predict"], [863, 2, 1, "", "predict_log_proba"], [863, 2, 1, "", "predict_proba"], [863, 2, 1, "", "score"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "set_partial_fit_request"], [863, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "partial_fit"], [864, 2, 1, "", "predict"], [864, 2, 1, "", "score"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[865, 1, 1, "", "FeatureUnion"], [866, 1, 1, "", "Pipeline"], [867, 4, 1, "", "make_pipeline"], [868, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[865, 3, 1, "", "feature_names_in_"], [865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 3, 1, "", "n_features_in_"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[866, 3, 1, "", "classes_"], [866, 2, 1, "", "decision_function"], [866, 3, 1, "", "feature_names_in_"], [866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_predict"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 3, 1, "", "n_features_in_"], [866, 3, 1, "", "named_steps"], [866, 2, 1, "", "predict"], [866, 2, 1, "", "predict_log_proba"], [866, 2, 1, "", "predict_proba"], [866, 2, 1, "", "score"], [866, 2, 1, "", "score_samples"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "set_score_request"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing": [[869, 1, 1, "", "Binarizer"], [870, 1, 1, "", "FunctionTransformer"], [871, 1, 1, "", "KBinsDiscretizer"], [872, 1, 1, "", "KernelCenterer"], [873, 1, 1, "", "LabelBinarizer"], [874, 1, 1, "", "LabelEncoder"], [875, 1, 1, "", "MaxAbsScaler"], [876, 1, 1, "", "MinMaxScaler"], [877, 1, 1, "", "MultiLabelBinarizer"], [878, 1, 1, "", "Normalizer"], [879, 1, 1, "", "OneHotEncoder"], [880, 1, 1, "", "OrdinalEncoder"], [881, 1, 1, "", "PolynomialFeatures"], [882, 1, 1, "", "PowerTransformer"], [883, 1, 1, "", "QuantileTransformer"], [884, 1, 1, "", "RobustScaler"], [885, 1, 1, "", "SplineTransformer"], [886, 1, 1, "", "StandardScaler"], [887, 1, 1, "", "TargetEncoder"], [888, 4, 1, "", "add_dummy_feature"], [889, 4, 1, "", "binarize"], [890, 4, 1, "", "label_binarize"], [891, 4, 1, "", "maxabs_scale"], [892, 4, 1, "", "minmax_scale"], [893, 4, 1, "", "normalize"], [894, 4, 1, "", "power_transform"], [895, 4, 1, "", "quantile_transform"], [896, 4, 1, "", "robust_scale"], [897, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "set_transform_request"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_fit_request"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "set_fit_request"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "set_transform_request"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_inverse_transform_request"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "partial_fit"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "partial_fit"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "set_transform_request"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 3, 1, "", "infrequent_categories_"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "infrequent_categories_"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "powers_"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "set_fit_request"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "partial_fit"], [886, 2, 1, "", "set_fit_request"], [886, 2, 1, "", "set_inverse_transform_request"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "set_partial_fit_request"], [886, 2, 1, "", "set_transform_request"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 3, 1, "", "infrequent_categories_"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.random_projection": [[898, 1, 1, "", "GaussianRandomProjection"], [899, 1, 1, "", "SparseRandomProjection"], [900, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[898, 2, 1, "", "fit"], [898, 2, 1, "", "fit_transform"], [898, 2, 1, "", "get_feature_names_out"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "inverse_transform"], [898, 2, 1, "", "set_output"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[899, 2, 1, "", "fit"], [899, 2, 1, "", "fit_transform"], [899, 2, 1, "", "get_feature_names_out"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "inverse_transform"], [899, 2, 1, "", "set_output"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[901, 1, 1, "", "LabelPropagation"], [902, 1, 1, "", "LabelSpreading"], [903, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_proba"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_proba"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[903, 2, 1, "", "decision_function"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_log_proba"], [903, 2, 1, "", "predict_proba"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_params"]], "sklearn.svm": [[906, 1, 1, "", "LinearSVC"], [907, 1, 1, "", "LinearSVR"], [908, 1, 1, "", "NuSVC"], [909, 1, 1, "", "NuSVR"], [910, 1, 1, "", "OneClassSVM"], [911, 1, 1, "", "SVC"], [912, 1, 1, "", "SVR"], [913, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[906, 2, 1, "", "decision_function"], [906, 2, 1, "", "densify"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"], [906, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[908, 3, 1, "", "coef_"], [908, 2, 1, "", "decision_function"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 3, 1, "", "n_support_"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "predict_log_proba"], [908, 2, 1, "", "predict_proba"], [908, 3, 1, "", "probA_"], [908, 3, 1, "", "probB_"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[909, 3, 1, "", "coef_"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 3, 1, "", "n_support_"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "decision_function"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "fit_predict"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score_samples"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "decision_function"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "predict_log_proba"], [911, 2, 1, "", "predict_proba"], [911, 3, 1, "", "probA_"], [911, 3, 1, "", "probB_"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[912, 3, 1, "", "coef_"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 3, 1, "", "n_support_"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"]], "sklearn.tree": [[914, 1, 1, "", "DecisionTreeClassifier"], [915, 1, 1, "", "DecisionTreeRegressor"], [916, 1, 1, "", "ExtraTreeClassifier"], [917, 1, 1, "", "ExtraTreeRegressor"], [918, 4, 1, "", "export_graphviz"], [919, 4, 1, "", "export_text"], [920, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[914, 2, 1, "", "apply"], [914, 2, 1, "", "cost_complexity_pruning_path"], [914, 2, 1, "", "decision_path"], [914, 3, 1, "", "feature_importances_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_depth"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_n_leaves"], [914, 2, 1, "", "get_params"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "predict_log_proba"], [914, 2, 1, "", "predict_proba"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_predict_proba_request"], [914, 2, 1, "", "set_predict_request"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 3, 1, "", "feature_importances_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_predict_request"], [915, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[916, 2, 1, "", "apply"], [916, 2, 1, "", "cost_complexity_pruning_path"], [916, 2, 1, "", "decision_path"], [916, 3, 1, "", "feature_importances_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_depth"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_n_leaves"], [916, 2, 1, "", "get_params"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "predict_log_proba"], [916, 2, 1, "", "predict_proba"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_predict_proba_request"], [916, 2, 1, "", "set_predict_request"], [916, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[917, 2, 1, "", "apply"], [917, 2, 1, "", "cost_complexity_pruning_path"], [917, 2, 1, "", "decision_path"], [917, 3, 1, "", "feature_importances_"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_depth"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_n_leaves"], [917, 2, 1, "", "get_params"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_predict_request"], [917, 2, 1, "", "set_score_request"]], "sklearn.utils": [[921, 1, 1, "", "Bunch"], [922, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [924, 4, 1, "", "as_float_array"], [925, 4, 1, "", "assert_all_finite"], [926, 4, 1, "", "check_X_y"], [927, 4, 1, "", "check_array"], [928, 4, 1, "", "check_consistent_length"], [929, 4, 1, "", "check_random_state"], [930, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [933, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [939, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [946, 4, 1, "", "gen_batches"], [947, 4, 1, "", "gen_even_slices"], [41, 0, 0, "-", "graph"], [949, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [959, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [962, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [964, 4, 1, "", "register_parallel_backend"], [965, 4, 1, "", "resample"], [966, 4, 1, "", "safe_mask"], [967, 4, 1, "", "safe_sqr"], [968, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[921, 2, 1, "", "clear"], [921, 2, 1, "", "copy"], [921, 2, 1, "", "fromkeys"], [921, 2, 1, "", "get"], [921, 2, 1, "", "items"], [921, 2, 1, "", "keys"], [921, 2, 1, "", "pop"], [921, 2, 1, "", "popitem"], [921, 2, 1, "", "setdefault"], [921, 2, 1, "", "update"], [921, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[923, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[931, 4, 1, "", "compute_class_weight"], [932, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[933, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[934, 4, 1, "", "all_displays"], [935, 4, 1, "", "all_estimators"], [936, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[937, 4, 1, "", "check_estimator"], [938, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[940, 4, 1, "", "density"], [941, 4, 1, "", "fast_logdet"], [942, 4, 1, "", "randomized_range_finder"], [943, 4, 1, "", "randomized_svd"], [944, 4, 1, "", "safe_sparse_dot"], [945, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[948, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[950, 1, 1, "", "MetadataRequest"], [951, 1, 1, "", "MetadataRouter"], [952, 1, 1, "", "MethodMapping"], [953, 4, 1, "", "get_routing_for_object"], [954, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[950, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[951, 2, 1, "", "add"], [951, 2, 1, "", "add_self_request"], [951, 2, 1, "", "consumes"], [951, 2, 1, "", "route_params"], [951, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[952, 2, 1, "", "add"], [952, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[955, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[956, 4, 1, "", "is_multilabel"], [957, 4, 1, "", "type_of_target"], [958, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[960, 1, 1, "", "Parallel"], [961, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[960, 2, 1, "", "__call__"], [960, 2, 1, "", "dispatch_next"], [960, 2, 1, "", "dispatch_one_batch"], [960, 2, 1, "", "format"], [960, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[963, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[969, 4, 1, "", "incr_mean_variance_axis"], [970, 4, 1, "", "inplace_column_scale"], [971, 4, 1, "", "inplace_csr_column_scale"], [972, 4, 1, "", "inplace_row_scale"], [973, 4, 1, "", "inplace_swap_column"], [974, 4, 1, "", "inplace_swap_row"], [975, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[976, 4, 1, "", "inplace_csr_row_normalize_l1"], [977, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[978, 4, 1, "", "check_is_fitted"], [979, 4, 1, "", "check_memory"], [980, 4, 1, "", "check_symmetric"], [981, 4, 1, "", "column_or_1d"], [982, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 399], "u": 0, "histori": [0, 1033], "govern": [0, 402], "author": [0, 1035], "document": [0, 49, 60, 192, 331, 332, 360, 361, 362, 387, 402, 1013, 1014, 1017, 1031, 1035, 1038, 1039, 1042, 1043], "team": [0, 386, 402], "contributor": [0, 386, 387, 402, 1039, 1040, 1041, 1042, 1043], "experi": [0, 75, 386, 402], "commun": [0, 387, 402], "emeritu": 0, "core": [0, 49, 376, 386, 391, 393, 399, 402, 996], "develop": [0, 139, 140, 192, 257, 385, 388, 389, 390, 391, 394, 395, 396, 983, 1030, 1051], "cite": 0, "scikit": [0, 41, 257, 275, 329, 330, 331, 332, 333, 334, 335, 336, 373, 374, 385, 388, 389, 391, 392, 399, 402, 405, 1013, 1014, 1018, 1019, 1020, 1025, 1028, 1031], "learn": [0, 41, 46, 53, 88, 128, 131, 178, 192, 194, 195, 196, 200, 242, 243, 244, 245, 256, 257, 275, 282, 310, 316, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 373, 374, 376, 383, 385, 387, 388, 389, 391, 392, 399, 402, 405, 419, 421, 989, 991, 999, 1007, 1013, 1014, 1016, 1018, 1019, 1020, 1022, 1025, 1026, 1027, 1028, 1029, 1031], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 121, 133, 136, 254, 387, 389, 399, 1006, 1011, 1013], "infrastructur": 0, "support": [0, 65, 152, 158, 192, 217, 326, 329, 330, 331, 332, 334, 335, 336, 344, 347, 356, 399, 405, 406, 411, 413, 421, 1009, 1010, 1017, 1026, 1052, 1053], "recent": 1, "deprec": [1, 257, 387, 933, 1045], "api": [2, 41, 140, 263, 264, 329, 332, 334, 375, 389, 394, 401, 406, 411, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1052], "refer": [2, 52, 65, 67, 117, 131, 145, 200, 207, 297, 313, 424, 984], "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "base": [4, 41, 44, 45, 120, 149, 150, 177, 192, 207, 256, 329, 330, 332, 334, 335, 336, 387, 414, 418, 421, 423, 990, 1002, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "calibr": [5, 63, 64, 65, 66, 67, 155, 192, 223, 413, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "visual": [5, 29, 53, 96, 138, 153, 251, 256, 263, 275, 317, 330, 349, 414, 415, 994, 1032], "cluster": [6, 27, 53, 60, 62, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 90, 93, 94, 96, 98, 101, 102, 103, 104, 105, 128, 192, 333, 335, 362, 383, 412, 414, 419, 994, 1027, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "compos": [7, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "covari": [8, 73, 113, 114, 116, 117, 118, 192, 268, 416, 988, 1043, 1047, 1048, 1049, 1051, 1052], "cross_decomposit": [9, 1045, 1047, 1049, 1051], "dataset": [10, 44, 45, 46, 49, 54, 64, 65, 67, 71, 82, 96, 100, 107, 120, 122, 123, 124, 125, 126, 128, 136, 142, 148, 151, 152, 163, 168, 179, 181, 183, 184, 186, 188, 192, 194, 195, 196, 202, 205, 207, 212, 223, 225, 232, 241, 243, 244, 250, 255, 260, 261, 278, 286, 287, 297, 299, 327, 342, 343, 346, 353, 361, 366, 379, 380, 381, 382, 383, 384, 392, 399, 424, 1019, 1025, 1026, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "loader": 10, "sampl": [10, 41, 61, 76, 93, 101, 114, 129, 130, 173, 204, 236, 256, 281, 293, 312, 330, 356, 359, 381, 396, 401, 421, 990], "gener": [10, 25, 54, 61, 64, 73, 76, 85, 87, 93, 95, 101, 102, 104, 105, 114, 116, 118, 125, 126, 129, 130, 131, 149, 159, 173, 176, 179, 185, 186, 188, 192, 201, 202, 203, 207, 217, 223, 225, 256, 271, 277, 293, 307, 312, 318, 330, 338, 356, 357, 370, 383, 387, 401, 419, 421, 990, 1004, 1014, 1023], "decomposit": [11, 119, 120, 127, 128, 145, 192, 383, 417, 419, 1027, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "discriminant_analysi": [12, 1043, 1044, 1047, 1049, 1050, 1051], "dummi": [13, 994, 1043, 1044, 1045, 1048, 1049, 1053], "ensembl": [14, 141, 147, 151, 192, 333, 421, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "except": [15, 396, 1047, 1051], "experiment": [16, 334, 391, 411, 1051], "feature_extract": [17, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "from": [17, 53, 131, 177, 197, 326, 329, 375, 381, 385, 399, 422, 994, 1019, 1026, 1027, 1028, 1045], "imag": [17, 46, 85, 88, 91, 104, 131, 381, 422], "text": [17, 49, 192, 252, 281, 342, 360, 361, 362, 363, 382, 422, 1028], "feature_select": [18, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "gaussian_process": [19, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "kernel": [19, 45, 46, 133, 179, 184, 185, 187, 188, 192, 199, 200, 255, 256, 304, 305, 313, 331, 345, 348, 353, 356, 419, 420, 424, 623, 986, 987, 992, 1004, 1009, 1026], "imput": [20, 189, 190, 191, 192, 329, 984, 1004, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "inspect": [21, 192, 193, 404, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "plot": [21, 27, 40, 48, 49, 51, 61, 64, 69, 73, 76, 79, 85, 87, 88, 95, 101, 102, 104, 105, 114, 118, 120, 124, 125, 126, 129, 130, 143, 148, 151, 156, 159, 163, 164, 165, 166, 168, 176, 191, 196, 202, 203, 207, 215, 216, 217, 227, 228, 232, 244, 251, 255, 260, 261, 263, 271, 276, 277, 282, 284, 287, 289, 293, 295, 299, 307, 318, 326, 329, 331, 332, 338, 346, 347, 352, 353, 361, 366, 394, 989, 1001, 1032], "isoton": [22, 253, 413, 985, 1043, 1044, 1045, 1047, 1049, 1050], "kernel_approxim": [23, 1045, 1047, 1048, 1049, 1050, 1051], "kernel_ridg": [24, 1052], "linear_model": [25, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "linear": [25, 45, 65, 72, 73, 155, 179, 192, 195, 201, 202, 219, 223, 226, 229, 243, 244, 255, 330, 348, 353, 355, 356, 374, 396, 399, 988, 990, 991, 992, 1004, 1026], "classifi": [25, 41, 64, 65, 67, 70, 140, 166, 206, 262, 277, 299, 303, 329, 343, 346, 349, 361, 369, 413, 421, 988, 997, 1026, 1028], "classic": 25, "regressor": [25, 51, 143, 155, 202, 227, 327, 329, 332, 421], "variabl": [25, 120, 194, 195, 375, 399, 1026], "select": [25, 27, 92, 98, 109, 135, 168, 171, 173, 176, 177, 192, 211, 212, 217, 271, 273, 352, 399, 406, 410, 418, 423, 983, 990, 1023, 1041], "bayesian": [25, 202, 203, 266, 280, 990, 993], "multi": [25, 93, 142, 162, 196, 217, 232, 246, 259, 284, 287, 315, 368, 393, 990, 991, 994, 998, 1009, 1010], "task": [25, 217, 990, 1013], "outlier": [25, 50, 205, 240, 250, 260, 306, 307, 320, 990, 1000, 1004], "robust": [25, 93, 116, 117, 202, 226, 229, 370, 416, 983, 990], "model": [25, 27, 29, 45, 48, 52, 54, 95, 112, 120, 129, 135, 148, 149, 150, 152, 153, 156, 159, 176, 177, 179, 184, 192, 195, 196, 197, 200, 201, 202, 207, 211, 212, 217, 223, 226, 241, 251, 256, 260, 261, 265, 267, 271, 272, 273, 279, 280, 282, 287, 299, 307, 312, 318, 325, 330, 332, 336, 353, 356, 361, 374, 389, 399, 400, 402, 409, 410, 418, 983, 989, 990, 993, 994, 996, 998, 999, 1019, 1023, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "glm": 25, "regress": [25, 27, 45, 54, 110, 112, 120, 121, 143, 155, 156, 166, 179, 184, 185, 186, 187, 202, 203, 206, 212, 214, 215, 216, 219, 221, 223, 225, 238, 240, 241, 253, 256, 312, 356, 367, 368, 383, 415, 424, 985, 987, 990, 994, 995, 997, 998, 1008, 1009, 1010, 1026], "miscellan": [25, 192, 249, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "manifold": [26, 192, 242, 243, 244, 245, 383, 991, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "metric": [27, 75, 78, 155, 284, 411, 414, 418, 983, 992, 994, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "interfac": [27, 406], "classif": [27, 49, 66, 68, 69, 71, 72, 107, 125, 169, 180, 181, 182, 183, 187, 192, 239, 258, 283, 286, 287, 290, 299, 303, 311, 318, 329, 337, 342, 353, 361, 383, 424, 990, 994, 995, 997, 998, 1008, 1009, 1010, 1026, 1028], "multilabel": [27, 126, 258, 299, 383, 396, 994, 995, 1019], "rank": [27, 223, 994], "biclust": [27, 59, 60, 61, 192, 383, 412], "distanc": [27, 116], "pairwis": [27, 45, 280, 992], "mixtur": [28, 192, 265, 266, 267, 270, 271, 272, 993, 1043, 1044, 1048, 1049, 1051, 1052], "model_select": [29, 335, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "splitter": [29, 370], "hyper": [29, 155, 278, 331, 983], "paramet": [29, 41, 48, 114, 155, 278, 331, 349, 357, 387, 389, 400, 401, 415, 421, 983, 990, 994, 1009, 1019, 1023, 1028], "optim": [29, 41, 393, 983], "valid": [29, 41, 45, 168, 176, 212, 254, 275, 276, 278, 279, 283, 285, 290, 295, 352, 370, 374, 389, 396, 418, 983, 989, 990, 1023], "multiclass": [30, 41, 192, 238, 289, 296, 297, 329, 396, 413, 994, 995, 1019, 1026, 1044, 1047, 1048, 1049], "multioutput": [31, 192, 298, 995, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "naive_bay": [32, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "neighbor": [33, 105, 192, 243, 300, 301, 302, 303, 308, 312, 325, 329, 984, 991, 997, 1026, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "neural_network": [34, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "pipelin": [35, 106, 107, 109, 110, 163, 174, 192, 195, 252, 257, 262, 281, 326, 352, 389, 399, 400, 415, 423, 866, 1011, 1024, 1028, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "preprocess": [36, 156, 163, 192, 195, 196, 260, 262, 319, 335, 363, 370, 399, 1004, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "random_project": [37, 1049], "semi_supervis": [38, 1045, 1046, 1047, 1051], "svm": [39, 47, 170, 173, 174, 200, 237, 255, 332, 343, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 990, 1000, 1008, 1026, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tree": [40, 142, 143, 147, 149, 150, 151, 158, 161, 192, 197, 223, 329, 334, 335, 336, 364, 365, 366, 367, 368, 369, 399, 421, 423, 997, 1002, 1010, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "export": [40, 399], "util": [41, 380, 392, 396, 1028, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "input": [41, 374, 389, 411, 414, 1004], "meta": [41, 162, 297, 331, 421], "estim": [41, 106, 113, 114, 115, 116, 117, 118, 139, 140, 145, 152, 154, 162, 185, 191, 192, 202, 226, 229, 252, 257, 259, 260, 270, 288, 297, 304, 305, 313, 329, 330, 331, 334, 336, 370, 389, 399, 400, 401, 411, 415, 416, 418, 420, 421, 983, 984, 988, 990, 994, 1009, 1013, 1021, 1023, 1025, 1036, 1043, 1044, 1045], "weight": [41, 142, 202, 204, 236, 317, 330, 359, 406, 421, 422], "handl": [41, 198, 984], "class": [41, 66, 75, 142, 144, 165, 206, 232, 237, 283, 287, 289, 332, 348, 351, 401, 418, 421, 422, 994, 997, 1000, 1008, 1009, 1035, 1036], "label": [41, 75, 287, 338, 339, 340, 382, 383, 414, 418, 421, 994, 1005, 1007], "deal": [41, 399], "target": [41, 112, 186, 241, 326, 327, 399, 401, 415, 995, 1004, 1005], "mathemat": [41, 412, 421, 986, 988, 997, 1001, 1008, 1009, 1010], "oper": [41, 289, 290, 386, 396, 424, 994], "work": [41, 192, 360, 374, 386, 399, 1028], "spars": [41, 118, 128, 137, 195, 207, 209, 238, 329, 336, 361, 362, 396, 416, 419, 423, 1004, 1006, 1008, 1052], "matric": [41, 396, 1004], "arrai": [41, 334, 369, 396, 411, 1019, 1052], "graph": [41, 53, 329, 396, 399, 414, 422], "random": [41, 58, 128, 146, 148, 161, 162, 197, 198, 254, 263, 286, 288, 336, 370, 389, 396, 418, 419, 421, 983, 990, 1006, 1011], "auxiliari": 41, "function": [41, 51, 73, 188, 213, 227, 228, 233, 244, 275, 293, 331, 352, 363, 396, 418, 421, 424, 986, 990, 994, 1009, 1026, 1052], "metadata": [41, 257, 335, 336, 361, 401, 406, 1052, 1053], "rout": [41, 257, 335, 336, 401, 406, 1052, 1053], "discov": 41, "object": [41, 251, 275, 389, 399, 983, 994, 1025, 1032], "compat": [41, 329, 387, 389, 411], "checker": 41, "parallel": [41, 150, 375, 385, 393, 414, 421, 960, 983], "comput": [41, 58, 76, 85, 87, 101, 102, 105, 114, 148, 216, 228, 293, 373, 374, 415, 418, 1001, 1015], "exampl": [44, 47, 50, 91, 97, 112, 122, 134, 140, 159, 186, 192, 219, 220, 227, 354, 358, 376, 392, 399, 406, 411, 422, 424, 428, 431, 434, 437, 438, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 589, 592, 593, 594, 595, 596, 598, 599, 602, 604, 605, 607, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 633, 635, 636, 637, 638, 639, 640, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 657, 658, 660, 661, 662, 663, 664, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 693, 694, 695, 696, 697, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 718, 722, 723, 724, 731, 733, 736, 738, 739, 741, 742, 745, 746, 749, 750, 752, 753, 754, 756, 757, 759, 761, 765, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 859, 862, 863, 864, 865, 866, 867, 870, 871, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 892, 895, 899, 900, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 920, 921, 929, 938, 940, 947, 951, 952, 953, 954, 955, 968, 978, 1019, 1025, 1026, 1027, 1035], "real": [44, 50, 112, 192, 382], "world": [44, 112, 192, 382], "time": [45, 54, 148, 217, 255, 256, 361, 418, 1015], "relat": [45, 49, 387, 1002, 1013, 1042], "featur": [45, 54, 89, 92, 111, 133, 147, 149, 150, 152, 156, 158, 160, 161, 171, 173, 175, 176, 177, 192, 197, 198, 200, 202, 217, 220, 241, 255, 261, 281, 318, 321, 322, 325, 326, 329, 331, 332, 352, 361, 362, 374, 376, 387, 391, 406, 415, 421, 422, 423, 984, 1002, 1004, 1011, 1027, 1028, 1038, 1039, 1040, 1041, 1042], "engin": [45, 54, 197, 1013, 1018], "data": [45, 48, 50, 53, 58, 61, 64, 66, 73, 76, 85, 87, 88, 93, 95, 96, 101, 102, 104, 105, 107, 112, 114, 116, 118, 120, 121, 129, 130, 133, 134, 135, 143, 149, 150, 153, 156, 158, 159, 163, 173, 176, 177, 185, 187, 191, 194, 197, 198, 200, 203, 209, 216, 217, 227, 251, 256, 263, 271, 275, 277, 281, 286, 287, 289, 290, 293, 303, 307, 312, 318, 320, 324, 325, 326, 336, 338, 349, 352, 356, 357, 362, 363, 370, 374, 376, 382, 392, 399, 401, 414, 415, 418, 423, 1004, 1008, 1018, 1019, 1022, 1025, 1027, 1028], "explor": 45, "bike": [45, 54, 196], "share": [45, 54, 196], "demand": [45, 54], "cross": [45, 119, 120, 168, 176, 192, 212, 275, 276, 278, 279, 283, 285, 290, 327, 352, 370, 417, 418, 983, 990, 1023], "gradient": [45, 148, 152, 153, 154, 155, 156, 157, 158, 196, 223, 231, 237, 329, 330, 332, 334, 335, 421, 990, 1008], "boost": [45, 148, 152, 153, 154, 155, 156, 157, 158, 196, 223, 329, 330, 332, 334, 335, 421], "naiv": [45, 54, 64, 65, 996], "step": [45, 262, 400, 415], "categori": [45, 333, 335, 1004], "trigonometr": 45, "period": [45, 224], "spline": [45, 224, 332, 1004], "qualit": [45, 54], "analysi": [45, 67, 72, 73, 98, 128, 135, 138, 142, 155, 196, 207, 266, 282, 283, 290, 308, 309, 310, 361, 417, 419, 988, 997, 1011, 1027, 1028], "impact": [45, 99, 1050, 1051, 1052], "predict": [45, 51, 54, 64, 121, 143, 155, 166, 180, 194, 203, 223, 256, 276, 287, 338, 374, 399, 400, 418, 424, 994, 1005, 1019, 1026], "interact": [45, 196, 334, 421, 1026], "polynomi": [45, 200, 202, 203, 224, 353, 986, 990, 992, 1004, 1026], "non": [45, 56, 128, 155, 218, 223, 227, 243, 285, 348, 355, 356, 419, 990, 1004], "conclud": [45, 247], "remark": [45, 95, 247, 254], "denois": [46, 131], "us": [46, 47, 53, 58, 86, 128, 129, 131, 160, 161, 163, 177, 184, 210, 226, 237, 239, 280, 284, 289, 299, 321, 356, 361, 362, 369, 370, 376, 388, 392, 393, 395, 399, 418, 419, 422, 423, 988, 990, 991, 994, 998, 1008, 1009, 1010, 1018, 1026, 1028, 1045], "pca": [46, 96, 110, 124, 128, 129, 132, 133, 134, 135, 136, 325, 336, 419, 546, 1011, 1027], "load": [46, 48, 58, 88, 96, 124, 148, 150, 152, 156, 168, 177, 197, 216, 241, 244, 251, 255, 263, 281, 289, 290, 299, 303, 325, 326, 349, 352, 361, 362, 363, 380, 381, 392, 399, 422, 1019, 1027, 1028], "via": [46, 54, 91, 211, 212, 241, 421, 986], "openml": [46, 326, 329, 381], "basi": [46, 188, 424, 986, 990, 1026], "reconstruct": [46, 55, 131], "test": [46, 114, 172, 283, 286, 293, 361, 365, 385, 387, 389, 395, 396, 418, 1019, 1026, 1028], "face": [47, 88, 128, 259, 382, 1018, 1024], "recognit": [47, 382, 384, 1024], "eigenfac": [47, 128, 1024], "complex": [48, 252, 262, 279, 282, 340, 365, 374, 990, 997, 998, 1008, 1009, 1010], "influenc": [48, 51, 374], "benchmark": [48, 51, 96, 361], "choos": [48, 983, 1019, 1021, 1023], "run": [48, 96, 284], "code": [48, 128, 137, 387, 389, 392, 393, 395, 419, 1039, 1040, 1041, 1042, 1043], "result": [48, 49, 61, 67, 76, 85, 87, 88, 95, 96, 101, 102, 105, 114, 116, 118, 129, 130, 143, 148, 163, 166, 191, 200, 207, 228, 256, 260, 284, 293, 299, 307, 326, 356, 362, 370, 983], "conclus": [48, 54, 179, 207, 212, 297, 303, 327, 353], "out": [49, 154, 376, 395, 418, 983, 990, 996], "reuter": 49, "routin": [49, 375, 396], "main": [49, 223], "detect": [50, 250, 260, 277, 306, 307, 994, 1000, 1009], "set": [50, 112, 114, 134, 163, 191, 227, 287, 349, 365, 399, 418, 990, 1019, 1025, 1026, 1028], "first": [50, 75, 387], "second": [50, 75], "latenc": [51, 374], "helper": [51, 188, 244, 396], "bulk": [51, 374], "atom": [51, 374], "speed": [51, 393], "variou": [51, 90, 230, 248], "n_featur": 51, "throughput": [51, 374], "speci": [52, 313, 382], "distribut": [52, 241, 243, 313, 324, 382, 405, 991, 1004], "stock": [53, 1024], "market": [53, 1024], "structur": [53, 77, 85, 105, 187, 340, 369, 1024], "retriev": [53, 329], "internet": 53, "affin": [53, 76, 414, 992], "propag": [53, 76, 338, 339, 340, 414, 1007], "embed": [53, 90, 243, 244, 254, 310, 421, 991], "2d": [53, 90, 130, 136, 196], "space": [53, 133, 415, 983, 991], "lag": 54, "seri": [54, 217, 418], "forecast": [54, 184], "analyz": [54, 983], "panda": [54, 334, 392, 399], "evalu": [54, 75, 96, 99, 117, 223, 260, 281, 284, 318, 326, 362, 400, 410, 412, 414, 418, 421, 983, 989, 994, 1028], "next": [54, 400], "hour": 54, "proper": [54, 184], "uncertainti": 54, "quantil": [54, 155, 158, 225, 332, 333, 990], "A": [54, 61, 62, 85, 96, 101, 223, 332, 386, 393, 409, 418, 1022, 1025], "look": [54, 256, 356], "compress": [55, 91, 374], "sens": 55, "tomographi": 55, "l1": [55, 207, 214, 216, 239, 357, 423], "prior": [55, 188, 266], "lasso": [55, 207, 208, 209, 210, 211, 212, 217, 330, 657, 990], "topic": 56, "extract": [56, 111, 131, 241, 281, 362, 374, 376, 422, 1028], "neg": [56, 128, 177, 218, 419, 990], "matrix": [56, 58, 187, 204, 274, 414, 419, 994], "factor": [56, 128, 135, 138, 306, 307, 419, 1000], "latent": [56, 120, 419], "dirichlet": [56, 419, 993], "alloc": [56, 419], "libsvm": [57, 381], "gui": 57, "wikipedia": 58, "princip": [58, 121, 419, 1011, 1027], "eigenvector": 58, "download": [58, 163, 191, 381], "alreadi": 58, "disk": 58, "redirect": 58, "file": [58, 405, 422, 1028], "adjac": 58, "singular": [58, 419], "vector": [58, 65, 91, 192, 344, 347, 356, 361, 363, 422, 1009, 1026, 1027], "svd": [58, 128, 419], "central": 58, "score": [58, 120, 148, 168, 176, 191, 202, 271, 279, 286, 287, 352, 406, 414, 418, 989, 994, 1009, 1023], "spectral": [60, 61, 62, 104, 243, 412, 414, 991], "co": [60, 62, 412], "algorithm": [60, 61, 62, 76, 82, 87, 93, 101, 102, 103, 243, 250, 393, 399, 988, 990, 995, 997, 998, 1002, 1010, 1026], "demo": [61, 62, 76, 85, 87, 93, 96, 101, 103], "fit": [61, 66, 95, 129, 135, 149, 150, 155, 156, 184, 202, 203, 204, 217, 220, 225, 229, 287, 299, 307, 312, 327, 356, 370, 389, 400, 406, 421, 996, 1000, 1019], "spectralbiclust": [61, 456], "probabl": [64, 65, 66, 69, 165, 182, 413, 421, 1009], "synthet": [64, 112, 202, 207, 277, 327, 392], "gaussian": [64, 65, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 265, 266, 267, 270, 271, 272, 320, 424, 993, 996, 1004, 1006], "bay": [64, 65, 996], "curv": [65, 67, 203, 256, 263, 272, 277, 282, 287, 289, 295, 413, 989], "summari": [65, 153, 212, 362, 363, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "3": [66, 206, 335, 1028, 1043, 1044, 1049, 1051], "compar": [66, 80, 82, 100, 114, 120, 148, 162, 173, 200, 202, 209, 225, 230, 250, 256, 280, 288, 308, 316, 320, 326, 399], "comparison": [67, 70, 73, 81, 102, 116, 136, 152, 153, 172, 179, 243, 244, 256, 280, 291, 297, 363, 990], "recogn": 71, "hand": 71, "written": 71, "digit": [71, 90, 96, 123, 169, 244, 318, 338, 339, 384, 1025], "normal": [72, 200, 223, 320, 324, 878, 893, 994, 1004], "ledoit": [72, 115, 416], "wolf": [72, 115, 416], "oa": [72, 114, 115, 427, 480], "discrimin": [72, 73, 988], "quadrat": [73, 424, 988], "ellipsoid": [73, 267], "lda": [73, 136, 419, 988], "qda": [73, 988], "adjust": 75, "chanc": 75, "perform": [75, 81, 283, 325, 331, 333, 338, 362, 374, 387, 388, 414, 418, 1028], "defin": [75, 85, 96, 105, 243, 275, 277, 278, 363, 994], "list": [75, 1017], "fix": [75, 391, 1035, 1038, 1039, 1040, 1041, 1042, 1048], "ground": [75, 202], "truth": [75, 202], "grow": 75, "number": [75, 98, 152, 158, 176, 292, 374, 389, 983, 984], "vari": [75, 315, 341, 414], "agglom": [77, 78, 90, 1027], "without": [77, 308, 361], "differ": [78, 82, 100, 114, 188, 196, 320, 323, 326, 346, 353, 389, 399, 406, 414, 990, 1026], "hierarch": [79, 85, 100, 105, 335, 414, 1027], "dendrogram": 79, "birch": [80, 414, 447], "minibatchkmean": [80, 102, 128, 454], "bisect": [81, 414], "k": [81, 83, 86, 95, 96, 97, 99, 102, 105, 120, 303, 325, 362, 414, 418, 994, 997, 1004, 1026, 1027], "mean": [81, 83, 86, 95, 96, 97, 99, 101, 102, 149, 150, 191, 197, 227, 362, 414, 994, 1004, 1027], "regular": [81, 114, 157, 195, 216, 227, 228, 315, 357, 990, 998], "toi": [82, 100, 250, 384], "segment": [84, 104], "pictur": 84, "greek": 84, "coin": [84, 85], "region": [84, 280], "ward": [85, 105, 414, 1027], "an": [85, 97, 140, 191, 204, 212, 310, 329, 333, 399, 422, 983, 1000, 1019, 1025, 1026], "color": 86, "quantiz": [86, 91, 1027], "dbscan": [87, 414, 425, 449], "onlin": [88, 230, 332, 333, 1008], "dictionari": [88, 128, 131, 137, 419], "part": [88, 423], "agglomer": [89, 92, 1011, 1027], "origin": [91, 133, 286, 310, 320], "encod": [91, 152, 326, 327, 335, 1004, 1005], "strategi": [91, 278, 297, 316, 323, 335, 376, 414, 994], "memori": [91, 336, 374, 393, 395], "footprint": 91, "v": [92, 105, 114, 115, 117, 121, 133, 176, 196, 197, 205, 215, 241, 283, 289, 293, 294, 365, 414, 421, 984, 1019], "univari": [92, 120, 173, 352, 423, 984], "hdbscan": [93, 335, 414, 451], "scale": [93, 195, 243, 246, 325, 357, 376, 897, 991, 1000, 1004, 1011], "invari": [93, 283], "hyperparamet": [93, 184, 185, 281, 288, 297, 622], "min_cluster_s": 93, "min_sampl": 93, "dbscan_clust": 93, "induct": 94, "demonstr": [95, 284, 323, 338], "assumpt": 95, "possibl": [95, 392], "solut": 95, "final": [95, 179], "handwritten": [96, 244, 384], "our": [96, 275, 278, 387], "reduc": [96, 374], "initi": [97, 99, 269], "silhouett": [98, 414], "kmean": [98, 102, 330, 452], "empir": [99, 117, 254, 416], "linkag": [100, 414], "method": [100, 111, 120, 141, 179, 192, 243, 245, 269, 296, 298, 401, 414, 986, 1000, 1001, 1027], "shift": [101, 414], "meanshift": [101, 453], "establish": [102, 200], "pariti": 102, "between": [102, 291, 990], "optic": [103, 384, 414, 455], "four": 104, "circl": 104, "two": [104, 144, 209, 261, 280], "unstructur": 105, "we": 105, "ar": [105, 332, 399], "nearest": [105, 192, 300, 301, 302, 303, 308, 311, 312, 329, 984, 997, 1026], "10": [105, 1035], "composit": [106, 192, 415, 983], "column": [107, 108, 262], "transform": [107, 108, 109, 112, 120, 147, 161, 262, 331, 332, 333, 379, 399, 400, 415, 997, 1004, 1005, 1006, 1027], "heterogen": [107, 415], "sourc": [107, 129, 385], "20": [107, 361, 382, 1028, 1043], "newsgroup": [107, 361, 382, 1028], "creat": [107, 135, 142, 227, 251, 287, 327, 352, 353, 399], "mix": 108, "type": [108, 266, 389, 401, 414, 1019], "dimension": [109, 243, 246, 262, 309, 325, 362, 988, 991, 997, 1011, 1026], "reduct": [109, 243, 247, 262, 309, 325, 362, 988, 997, 1011], "gridsearchcv": [109, 168, 284, 803], "illustr": [109, 183, 188, 310, 424], "cach": [109, 302, 415], "within": 109, "chain": [110, 262, 299, 400, 415], "logist": [110, 206, 213, 214, 215, 216, 238, 239, 990, 1026], "concaten": 111, "multipl": [111, 262, 284, 370, 394, 418, 983, 984, 994, 1043, 1044], "effect": [112, 158, 194, 248, 320, 325, 341, 365], "shrinkag": [114, 416, 421, 988, 1026], "ledoitwolf": [114, 478], "max": [114, 994], "likelihood": [114, 202, 203, 283, 994, 999], "approach": [114, 212, 280], "mahalanobi": 116, "relev": [116, 207, 990], "minimum": [117, 416], "determin": [117, 207, 416, 990, 994], "invers": [118, 416, 1006], "canon": [120, 417], "symmetr": 120, "pl": 120, "scatter": [120, 124], "multivari": [120, 984], "respons": [120, 402], "pls2": 120, "pls1": 120, "cca": [120, 487], "mode": [120, 374, 385], "b": 120, "deflat": 120, "compon": [121, 128, 308, 309, 310, 419, 997, 1011, 1027], "partial": [121, 194, 196, 261, 1001], "least": [121, 155, 212, 218, 221, 990], "squar": [121, 155, 188, 218, 221, 227, 424, 986, 990, 992, 994], "The": [121, 123, 124, 194, 195, 223, 248, 254, 278, 287, 297, 382, 391, 418, 422, 993, 994, 1006, 1026, 1027], "one": [121, 152, 261, 990, 994], "power": [121, 223], "iri": [124, 134, 136, 151, 181, 232, 343, 346, 366, 384, 424, 1025], "represent": [124, 196, 252, 330, 374, 389, 422, 1027], "randomli": [125, 126], "prepar": [128, 143, 153, 158, 200, 243, 289, 290, 325, 349, 391], "nmf": [128, 333, 419, 545], "independ": [128, 419, 1027], "fastica": [128, 129, 130, 426, 538], "minibatchsparsepca": [128, 419, 544], "center": [128, 1004], "fa": [128, 135], "posit": [128, 332], "blind": 129, "separ": [129, 235, 350, 351], "ica": [129, 419, 1027], "point": [130, 310], "cloud": 130, "distort": 131, "displai": [131, 228, 251, 252, 262, 334, 335, 336, 395, 1032, 1051], "patch": [131, 422], "noisi": [131, 186, 227], "them": [131, 386], "increment": [132, 376, 419], "kernelpca": [133, 540], "probabilist": [135, 180, 419, 424], "precomput": [137, 204, 329, 419], "rotat": 138, "pattern": 138, "__sklearn_is_fitted__": 140, "custom": [140, 278, 345, 422, 1004, 1009], "implement": [140, 209, 399, 994, 997, 1008, 1009], "simpl": [140, 179, 257, 305, 393, 1025], "adaboost": [142, 143, 144, 421], "decis": [142, 143, 151, 159, 164, 192, 255, 303, 335, 343, 353, 364, 365, 366, 367, 368, 369, 399, 402, 1010], "train": [142, 143, 153, 156, 159, 166, 176, 227, 251, 256, 260, 261, 263, 271, 293, 297, 318, 326, 327, 331, 341, 349, 353, 361, 365, 366, 369, 418, 997, 1007, 1019, 1026, 1028], "adaboostclassifi": [142, 558], "converg": 142, "error": [142, 146, 153, 155, 168, 202, 227, 277, 293, 395, 405, 990, 994], "weak": [142, 421], "learner": [142, 421], "decisiontre": 143, "singl": [145, 163, 241, 251, 383, 414, 984], "versu": [145, 237, 285, 343, 374], "bag": [145, 154, 361, 421, 422, 983, 1028], "bia": 145, "varianc": [145, 221, 423, 994, 1004], "oob": 146, "forest": [146, 148, 149, 150, 162, 197, 198, 260, 263, 336, 382, 421, 1000], "histogram": [148, 158, 330, 332, 334, 420, 421], "import": [149, 150, 156, 177, 197, 198, 255, 297, 325, 329, 421, 1002], "decreas": [149, 150, 197], "impur": [149, 150, 197, 365, 1002], "permut": [149, 197, 198, 286, 329, 418, 1002], "pixel": 150, "mdi": [150, 197], "surfac": [151, 255, 366], "categor": [152, 326, 331, 336, 399, 421, 996, 1004], "am": [152, 260], "hous": [152, 260, 382], "drop": 152, "hot": 152, "ordin": 152, "nativ": [152, 326, 329, 331, 336], "limit": [152, 179, 374, 405, 409, 422], "split": [152, 331, 370, 418], "earli": [153, 158, 231], "stop": [153, 158, 231, 422, 1008], "calcul": [153, 165], "interv": 155, "confid": 155, "tune": [155, 278, 281, 331, 983, 1028], "devianc": [156, 994], "miss": [158, 189, 190, 191, 192, 329, 335, 336, 421, 984, 1004, 1010], "valu": [158, 177, 189, 190, 191, 192, 248, 257, 329, 335, 336, 369, 387, 419, 421, 984, 994, 1002, 1004, 1010], "loss": [158, 223, 233, 330, 333, 335, 421, 994, 1052], "monoton": [158, 160, 336, 421], "constraint": [158, 160, 334, 336, 414, 421], "isolationforest": [159, 568], "discret": [159, 187, 321, 322, 1004], "boundari": [159, 164, 303, 343, 353], "path": [159, 210, 216, 228, 369, 405], "length": [159, 405], "name": [160, 332, 399, 415], "specifi": [160, 399, 983], "hash": [161, 396, 422], "total": [161, 365, 421], "output": [162, 259, 320, 334, 336, 368, 1010, 1026], "combin": [163, 251], "predictor": 163, "stack": [163, 329, 421], "make": [163, 166, 191, 387, 391, 402], "measur": [163, 283, 414, 994], "votingclassifi": [164, 165, 574], "individu": [166, 196, 331, 1001], "vote": [166, 421], "tutori": [167, 192, 1012, 1020, 1022, 1028], "exercis": [167, 168, 169, 170, 192, 1023, 1026, 1028], "diabet": [168, 261, 384, 1026], "appli": 168, "line": [168, 182], "show": [168, 289], "std": [168, 202], "bonu": 168, "how": [168, 370, 387, 393, 399], "much": 168, "can": [168, 399], "you": [168, 399], "trust": 168, "alpha": [168, 365], "f": [172, 994], "mutual": [172, 414], "inform": [172, 191, 211, 212, 391, 414, 983, 990], "anova": [174, 352], "recurs": [175, 176, 423], "elimin": [175, 176, 423, 983], "sequenti": [177, 423], "coeffici": [177, 195, 202, 227, 228, 414, 994], "toler": 177, "process": [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 195, 370, 402, 424, 993, 1022], "machin": [178, 192, 194, 195, 196, 318, 344, 395, 999, 1009, 1019, 1026], "ridg": [179, 203, 205, 221, 227, 228, 256, 327, 677, 987, 990], "gpc": [180, 181, 182, 183, 424], "iso": [182, 287], "xor": [183, 424], "co2": 184, "level": [184, 185, 375, 414, 421], "mona": 184, "loa": 184, "gpr": [184, 185, 424], "build": [184, 191, 385, 387, 395, 415, 1028, 1053], "design": 184, "extrapol": 184, "interpret": [184, 195, 227, 260, 299, 419, 421], "abil": 185, "nois": [185, 186, 203], "optimis": 185, "basic": [186, 241, 400, 416, 424], "introductori": 186, "free": 186, "sequenc": [187, 399], "similar": [187, 992, 994], "under": [187, 399, 1030, 1051], "posterior": 188, "cookbook": 188, "radial": [188, 424, 986, 1026], "ration": [188, 424], "quadradt": 188, "exp": [188, 424], "sine": [188, 272, 424], "dot": [188, 424], "product": [188, 241, 395, 399, 424, 626], "mat\u00e9rn": [188, 424], "variant": 190, "iterativeimput": [190, 632, 984], "befor": [191, 391], "replac": 191, "0": [191, 329, 330, 331, 332, 1010, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "knn": [191, 329], "iter": [191, 292, 418, 983], "releas": [192, 328, 329, 330, 331, 332, 333, 334, 335, 336, 391, 405, 1033], "highlight": [192, 328, 329, 330, 331, 332, 333, 334, 335, 336, 1035, 1038, 1039, 1042, 1043], "approxim": [192, 199, 200, 255, 300, 331, 416, 986], "neural": [192, 196, 314, 998, 999], "network": [192, 196, 314, 998, 999], "semi": [192, 337, 338, 342, 343, 1007], "supervis": [192, 337, 338, 342, 343, 998, 1007, 1016, 1026], "failur": [194, 983], "infer": 194, "causal": [194, 195], "simul": 194, "hourli": 194, "wage": [194, 195], "descript": 194, "incom": 194, "fulli": 194, "observ": [194, 1026, 1027], "lesson": [194, 195], "common": [195, 370, 401, 411, 422, 994], "pitfal": [195, 370], "matter": 195, "check": [195, 282, 329, 395, 411, 1043, 1044, 1045], "problem": [195, 419, 1009, 1010, 1019, 1024, 1026, 1027], "correl": [195, 198, 417, 994, 1002], "numer": [195, 375, 389], "wrong": [195, 399], "depend": [196, 257, 261, 385, 1001, 1035, 1048, 1049], "condit": [196, 331, 1001], "expect": [196, 331, 1001], "preprocessor": 196, "1": [196, 220, 332, 333, 334, 335, 336, 399, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wai": [196, 385, 387, 399], "layer": [196, 315, 998], "perceptron": [196, 315, 673, 990, 998], "ic": [196, 1001], "pdp": 196, "3d": 196, "accuraci": [197, 255, 361, 365, 994], "": [197, 325, 327, 390, 399, 421, 994], "multicollinear": 198, "breast": [198, 384], "cancer": [198, 384], "scalabl": [200, 282, 330], "partit": 200, "baselin": [200, 223], "recov": 202, "true": [202, 203], "margin": [202, 203, 235, 350, 354], "log": [202, 203, 994], "expans": 202, "sinusoid": 203, "cubic": 203, "l": 203, "elast": [204, 208, 990], "net": [204, 208, 990], "gram": 204, "huberregressor": [205, 654], "strong": 205, "signal": [207, 419, 1027], "automat": [207, 400, 990], "ard": [207, 990], "elasticnet": [207, 330, 651], "dens": 209, "lar": [210, 655, 990], "criteria": [211, 399, 990, 1010], "aic": [212, 990], "bic": [212, 271, 990], "criterion": [212, 331, 983, 1008], "coordin": 212, "descent": [212, 231, 237, 990, 1008], "angl": [212, 990], "penalti": [214, 234, 357], "sparsiti": [214, 220, 422, 1026], "multinomi": [215, 239, 990, 996], "One": [215, 237, 289, 332, 348, 418, 1000, 1008], "rest": [215, 289], "joint": 217, "onli": [220, 240, 1046, 1048], "2": [220, 334, 1028, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ordinari": [221, 990], "orthogon": [222, 990], "match": [222, 990], "pursuit": [222, 990], "poisson": [223, 241, 330, 331, 994], "french": 223, "motor": 223, "third": [223, 257, 405], "parti": [223, 257, 405], "liabil": 223, "claim": [223, 241], "constant": [223, 984], "takeawai": 223, "interpol": 224, "quantileregressor": [225, 675], "linearregress": [225, 662], "ransac": [226, 990], "l2": [227, 357], "purpos": [227, 363, 1014], "thi": [227, 1014], "solver": [230, 419, 990], "stochast": [231, 237, 243, 316, 990, 991, 999, 1008], "sgd": [232, 233, 234, 235, 236, 990, 1008], "convex": 233, "maximum": [235, 350, 999], "hyperplan": [235, 350, 351], "20newgroup": 238, "mnist": [239, 317], "theil": [240, 990], "sen": [240, 990], "y": [240, 399, 1005, 1007], "direct": 240, "x": 240, "tweedi": [241, 994], "insur": 241, "definit": [241, 318, 1001, 1045], "frequenc": [241, 1028], "sever": [241, 245], "gamma": [241, 335, 994], "pure": 241, "premium": 241, "tweedieregressor": [241, 685], "local": [243, 244, 306, 307, 991, 1000], "isomap": [243, 244, 693, 991], "multidimension": 243, "t": [243, 248, 991], "techniqu": 244, "sphere": 245, "swiss": 247, "roll": [247, 389], "And": [247, 402], "hole": 247, "sne": [248, 991], "perplex": 248, "shape": [248, 1019], "anomali": 250, "confusionmatrixdisplai": [251, 702], "roccurvedisplai": [251, 707], "precisionrecalldisplai": [251, 705], "compact": 252, "rich": [252, 330], "html": [252, 389], "johnson": [254, 1006], "lindenstrauss": [254, 1006], "bound": 254, "theoret": 254, "explicit": 255, "map": [255, 324, 1004], "rbf": [255, 348, 349, 353, 424, 627, 992, 1009, 1026], "python": [255, 375, 393, 409, 1012, 1013], "packag": [255, 1013, 1047], "svr": [256, 356, 912, 1009], "construct": 256, "router": 257, "consum": 257, "default": [257, 307, 387], "chang": [257, 387, 402, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "complet": [259, 414], "kddcup99": 260, "sa": 260, "covertyp": [260, 382], "cardiotocographi": 260, "ablat": 260, "studi": 260, "advanc": [261, 385], "With": [261, 1028], "togeth": [261, 289, 1024, 1027], "grid": [262, 278, 280, 288, 291, 983, 1023, 1028], "search": [262, 278, 280, 288, 291, 297, 400, 983, 1023, 1028], "over": 262, "roc": [263, 277, 289, 290, 329, 994], "svc": [263, 353, 357, 911, 1009], "introduc": 264, "set_output": [264, 334, 336, 389], "concentr": 266, "variat": [266, 993], "gmm": [268, 269], "densiti": [270, 304, 305, 313, 335, 420, 940, 1009], "best": [271, 388, 399], "confus": [274, 414, 994], "behavior": 275, "indic": 275, "mani": [275, 334, 375, 399, 1052], "cv": [275, 370], "tradeoff": [277, 994], "det": [277, 994], "refit": [278, 1019], "balanc": [279, 994], "statist": [280, 1013, 1022, 1025], "frequentist": 280, "practic": [280, 370, 388, 392, 991, 998, 1008, 1009, 1010], "equival": 280, "all": [280, 289, 333, 405, 1024, 1050, 1051, 1052], "take": 280, "home": 280, "messag": 280, "ratio": [283, 994], "pre": [283, 370, 400], "post": [283, 365], "respect": 283, "preval": 283, "cross_val_scor": [284, 828], "nest": [285, 415, 1023], "signific": 286, "precis": [287, 994], "recal": [287, 994], "In": 287, "binari": [287, 299, 990, 994], "averag": [287, 289, 414, 421, 994], "micro": [287, 289], "each": [287, 292, 361, 983], "f1": 287, "receiv": [289, 290, 994], "characterist": [289, 290, 994], "specif": [289, 385, 389, 409, 983, 1013, 1014], "ovr": 289, "macro": 289, "ovo": 289, "success": [291, 292, 331, 983], "halv": [291, 292, 331, 983], "candid": [292, 983], "amount": [292, 983], "resourc": [292, 375, 387, 983, 1012, 1017], "underfit": 294, "overfit": 294, "overview": [297, 394, 414, 1000], "yeast": 297, "uci": 297, "logisticregress": [299, 663], "wrap": 299, "onevsrestclassifi": [299, 835, 995], "tsne": [300, 697], "1d": 305, "novelti": [306, 1000, 1009], "lof": [306, 307], "neighborhood": [308, 309, 310, 997], "centroid": [311, 997], "mlpclassifi": [316, 863], "mlp": 317, "restrict": [318, 999], "boltzmann": [318, 999], "scaler": 320, "standardscal": [320, 886], "minmaxscal": [320, 876], "maxabsscal": [320, 875], "robustscal": [320, 884], "powertransform": [320, 882], "quantiletransform": [320, 883], "uniform": [320, 1004], "kbinsdiscret": [321, 323, 871], "continu": [321, 387], "rescal": 325, "other": [326, 381, 399, 421, 1013, 1035], "intern": 327, "22": [329, 1045], "new": [329, 331, 332, 334, 335, 387, 399, 1012, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "prune": [329, 365, 1010], "datafram": [329, 336, 399, 1052], "auc": [329, 711], "now": [329, 332, 1045], "23": [330, 1046], "stabil": 330, "improv": [330, 331, 332, 333, 334, 336, 386, 387, 1038, 1039], "24": [331, 1047], "histgradientboost": [331, 336], "self": [331, 341, 1007], "sequentialfeatureselector": [331, 607], "polynomialcountsketch": [331, 645], "decisiontreeregressor": [331, 915], "keyword": [332, 1046, 1048], "argument": [332, 389, 1046, 1048], "more": [332, 385, 399, 409, 998], "flexibl": [332, 984], "stabl": 332, "histgradientboostingregressor": [333, 567], "get_feature_names_out": 333, "avail": [333, 983, 1031, 1032], "group": [333, 335, 418, 1018, 1027], "infrequ": [333, 335, 1004], "onehotencod": [333, 879], "minibatchnmf": [333, 543], "version": [333, 381, 385, 391, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bisectingkmean": [333, 448], "divid": 333, "enhanc": [334, 402, 1013, 1038, 1039, 1040, 1041, 1042], "faster": [334, 421], "parser": [334, 381], "fetch_openml": [334, 501], "lineardiscriminantanalysi": [334, 554], "effici": [334, 336, 396], "targetencod": [335, 887], "validationcurvedisplai": [335, 825], "ordinalencod": [335, 880], "4": [336, 1035, 1043, 1052], "dtype": 336, "polar": 336, "add": [336, 399], "enrich": 336, "runtim": [336, 385], "most": 338, "uncertain": 338, "activ": 339, "threshold": 341, "linearsvc": [347, 906], "unbalanc": [351, 1009], "some": 352, "plai": 352, "percentil": 352, "sigmoid": [353, 413, 992, 1026], "case": [357, 990, 994], "tie": 358, "break": 358, "word": [361, 422, 1028], "strip": 361, "quantifi": [362, 994], "qualiti": [362, 994], "tfidfvector": [362, 363, 596], "lsa": 362, "top": [362, 994], "term": [362, 401, 422], "per": 362, "hashingvector": [362, 594], "featurehash": [363, 587], "dictvector": [363, 586], "special": 363, "cost": [365, 1010], "leav": [365, 418, 990], "understand": 369, "what": [369, 399], "i": [369, 392, 399, 418, 1018], "here": [369, 1028], "recommend": [370, 382, 1013], "inconsist": 370, "leakag": 370, "avoid": [370, 415], "dure": 370, "control": [370, 421, 998], "none": 370, "randomst": 370, "instanc": [370, 376], "repeat": [370, 415, 418], "call": [370, 386], "subtleti": 370, "get": [370, 399, 400], "reproduc": [370, 392], "across": 370, "execut": [370, 399], "configur": [374, 375], "overhead": 374, "tip": [374, 388, 395, 983, 991, 998, 1008, 1009, 1010], "trick": [374, 393, 395, 422], "algebra": [374, 396], "librari": [374, 375], "reshap": [374, 1025], "link": [374, 994], "manag": [375, 405], "higher": 375, "joblib": [375, 393], "lower": 375, "openmp": [375, 388], "numpi": [375, 392], "scipi": [375, 1052], "oversubscript": 375, "spawn": 375, "too": 375, "thread": 375, "switch": 375, "environ": 375, "sklearn_assume_finit": 375, "sklearn_working_memori": 375, "sklearn_se": 375, "sklearn_tests_global_random_se": 375, "sklearn_skip_network_test": 375, "sklearn_run_float32_test": 375, "sklearn_enable_debug_cython_direct": 375, "sklearn_build_enable_debug_symbol": 375, "sklearn_pairwise_dist_chunk_s": 375, "sklearn_warnings_as_error": 375, "computation": 376, "bigger": 376, "stream": 376, "note": [376, 411, 418], "svmlight": 381, "format": [381, 392, 399, 409, 995], "org": [381, 391, 1018], "repositori": 381, "arff": 381, "extern": [381, 1012, 1019, 1035, 1044], "olivetti": 382, "consider": 382, "wild": 382, "rcv1": 382, "kddcup": 382, "99": 382, "california": 382, "plant": 384, "linnerrud": 384, "wine": 384, "wisconsin": 384, "diagnost": 384, "instal": [385, 405], "nightli": 385, "tag": [385, 387, 389], "edit": 385, "meson": [385, 1053], "simplest": 385, "platform": [385, 395, 405], "instruct": 385, "window": [385, 405], "maco": 385, "compil": [385, 393], "conda": 385, "forg": 385, "homebrew": 385, "linux": [385, 399, 405], "system": 385, "freebsd": 385, "altern": [385, 983], "bug": [386, 387, 391, 1017, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "triag": 386, "issu": [386, 387], "curat": 386, "fruit": 386, "discuss": 386, "pr": [386, 391], "help": [386, 387, 399], "review": [386, 387, 395, 1028], "member": 386, "close": 386, "tough": 386, "typic": 386, "workflow": [386, 387], "contribut": [387, 399], "submit": 387, "report": [387, 392, 994], "request": [387, 391, 395, 399], "good": [387, 392], "video": [387, 1012], "git": 387, "pull": [387, 391, 395, 399], "checklist": [387, 391], "integr": 387, "ci": 387, "stall": 387, "unclaim": 387, "easi": 387, "want": 387, "github": 387, "action": 387, "coverag": [387, 395, 994], "write": 387, "matplotlib": 387, "monitor": 387, "tracker": [387, 1017], "maintain": [387, 391, 402, 409], "backward": 387, "guidelin": [387, 389], "read": 387, "exist": 387, "cython": [388, 393, 395], "convent": [388, 1019], "knowledg": 388, "eas": 388, "instanti": 389, "attribut": [389, 401, 983], "option": 389, "univers": 389, "your": [389, 392, 994], "own": [389, 399, 994], "templat": 389, "baseestim": [389, 428], "mixin": 389, "get_param": 389, "set_param": 389, "init": 389, "clone": [389, 439], "check_is_fit": [389, 978], "assert": 389, "guid": [390, 1030], "major": [391, 421, 1043, 1044], "minor": 391, "also": 391, "known": [391, 1043, 1044], "merg": 391, "web": 391, "site": 391, "craft": 392, "minim": [392, 1010, 1048, 1049], "provid": 392, "fail": 392, "comment": 392, "boil": 392, "down": 392, "script": 392, "someth": 392, "small": 392, "do": [392, 399], "NOT": 392, "unless": 392, "extrem": [392, 421], "necessari": 392, "markdown": 392, "make_regress": [392, 529], "make_classif": [392, 520], "make_blob": [392, 517], "c": 393, "profil": 393, "usag": [393, 399, 406, 411, 413, 415, 421, 422, 990], "extens": [393, 405], "yep": 393, "gperftool": 393, "debugg": 393, "gdb": 393, "gprof": 393, "valgrind": [393, 395], "callgrind": 393, "kcachegrind": 393, "warm": 393, "restart": 393, "ax": 394, "saniti": 395, "preserv": 395, "fold": [395, 418], "unfold": 395, "outdat": 395, "diff": 395, "remot": 395, "track": [395, 415], "branch": 395, "pytest": 395, "alias": 395, "flag": 395, "standard": [395, 1004], "repli": 395, "debug": 395, "arm64": 395, "x86_64": 395, "tool": [396, 399, 411], "warn": 396, "dispatch": 397, "frequent": 399, "ask": 399, "question": [399, 1017], "tabl": 399, "content": [399, 1019], "lot": 399, "peopl": [399, 1035, 1036, 1037, 1038], "pronounc": 399, "why": [399, 421], "pypi": 399, "deep": 399, "reinforc": 399, "Will": 399, "futur": 399, "graphic": [399, 999], "did": 399, "remov": [399, 423, 1004, 1035], "hmm": 399, "gpu": 399, "need": 399, "doe": 399, "directli": 399, "plan": 399, "so": 399, "my": 399, "ani": 399, "attent": 399, "inclus": 399, "includ": 399, "should": 399, "save": 399, "deploi": 399, "bunch": [399, 921], "usabl": 399, "string": 399, "sometim": 399, "crash": 399, "freez": 399, "n_job": 399, "osx": [399, 405], "job": 399, "than": 399, "random_st": 399, "entir": 399, "start": 400, "processor": 400, "glossari": 401, "element": 401, "concept": [401, 990], "properti": 401, "role": 402, "technic": 402, "committe": 402, "propos": 402, "slep": 402, "latest": 405, "alpin": 405, "arch": 405, "debian": 405, "ubuntu": 405, "fedora": 405, "netbsd": 405, "macport": 405, "mac": 405, "anaconda": 405, "enthought": 405, "deploy": 405, "intel": 405, "winpython": 405, "troubleshoot": 405, "caus": 405, "unweight": 406, "statu": 406, "persist": 409, "serial": 409, "secur": 409, "skop": 409, "interoper": [409, 1013], "pytorch": 411, "mp": 411, "devic": 411, "formul": [412, 421, 988, 997, 1008, 1009, 1010], "low": [414, 421, 423], "mini": [414, 419], "batch": [414, 419], "assign": 414, "featureagglomer": [414, 450], "hierarchi": 414, "ad": 414, "connect": [414, 422, 1027], "reachabl": 414, "rand": 414, "index": [414, 949], "advantag": 414, "drawback": 414, "homogen": 414, "fowlk": 414, "mallow": 414, "calinski": 414, "harabasz": 414, "davi": 414, "bouldin": 414, "conting": 414, "pair": 414, "access": 415, "featureunion": [415, 865], "columntransform": [415, 469], "shrunk": 416, "oracl": 416, "plscanon": [417, 488], "plssvd": [417, 490], "plsregress": [417, 489], "cross_valid": [418, 829], "obtain": 418, "d": [418, 997], "loo": 418, "p": [418, 1018], "lpo": 418, "shuffl": [418, 968], "stratif": 418, "stratifi": 418, "predefin": [418, 994], "stratifiedgroupkfold": [418, 821], "decompos": 419, "exact": 419, "sparsepca": [419, 548], "kpca": 419, "choic": 419, "truncat": 419, "semant": 419, "nnmf": 419, "frobeniu": 419, "norm": 419, "beta": 419, "diverg": 419, "gradientboostingclassifi": [421, 564], "histgradientboostingclassifi": [421, 566], "gradientboostingregressor": [421, 565], "addit": [421, 986], "size": 421, "rate": 421, "subsampl": 421, "hard": 421, "soft": 421, "dict": 422, "tf": 422, "idf": 422, "decod": 422, "applic": [422, 1027], "larg": 422, "corpu": 422, "selectfrommodel": [423, 602], "galleri": [428, 431, 434, 437, 438, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 589, 592, 593, 594, 595, 596, 598, 599, 602, 604, 605, 607, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 633, 635, 636, 637, 638, 639, 640, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 657, 658, 660, 661, 662, 663, 664, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 693, 694, 695, 696, 697, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 718, 722, 723, 724, 731, 733, 736, 738, 739, 741, 742, 745, 746, 749, 750, 752, 753, 754, 756, 757, 759, 761, 765, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 859, 862, 863, 864, 865, 866, 867, 870, 871, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 892, 895, 899, 900, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 914, 915, 920, 921, 929, 938, 940, 947, 951, 952, 953, 954, 955, 968, 978], "biclustermixin": 429, "classnameprefixfeaturesoutmixin": 430, "classifiermixin": 431, "clustermixin": 432, "densitymixin": 433, "metaestimatormixin": 434, "onetoonefeaturemixin": 435, "outliermixin": 436, "regressormixin": 437, "transformermixin": 438, "is_classifi": 440, "is_regressor": 441, "calibratedclassifiercv": 442, "calibrationdisplai": 443, "calibration_curv": 444, "affinitypropag": 445, "agglomerativeclust": 446, "spectralclust": 457, "spectralcoclust": 458, "affinity_propag": 459, "cluster_optics_dbscan": 460, "cluster_optics_xi": 461, "compute_optics_graph": 462, "estimate_bandwidth": 463, "k_mean": 464, "kmeans_plusplu": 465, "mean_shift": 466, "spectral_clust": 467, "ward_tre": 468, "transformedtargetregressor": 470, "make_column_selector": 471, "make_column_transform": 472, "config_context": 473, "ellipticenvelop": 474, "empiricalcovari": 475, "graphicallasso": 476, "graphicallassocv": 477, "mincovdet": 479, "shrunkcovari": 481, "empirical_covari": 482, "graphical_lasso": 483, "ledoit_wolf": 484, "ledoit_wolf_shrinkag": 485, "shrunk_covari": 486, "clear_data_hom": 491, "dump_svmlight_fil": 492, "fetch_20newsgroup": 493, "fetch_20newsgroups_vector": 494, "fetch_california_h": 495, "fetch_covtyp": 496, "fetch_kddcup99": 497, "fetch_lfw_pair": 498, "fetch_lfw_peopl": 499, "fetch_olivetti_fac": 500, "fetch_rcv1": 502, "fetch_species_distribut": 503, "get_data_hom": 504, "load_breast_canc": 505, "load_diabet": 506, "load_digit": 507, "load_fil": 508, "load_iri": 509, "load_linnerud": 510, "load_sample_imag": [511, 512], "load_svmlight_fil": [513, 514], "load_win": 515, "make_biclust": 516, "make_checkerboard": 518, "make_circl": 519, "make_friedman1": 521, "make_friedman2": 522, "make_friedman3": 523, "make_gaussian_quantil": 524, "make_hastie_10_2": 525, "make_low_rank_matrix": 526, "make_moon": 527, "make_multilabel_classif": 528, "make_s_curv": 530, "make_sparse_coded_sign": 531, "make_sparse_spd_matrix": 532, "make_sparse_uncorrel": 533, "make_spd_matrix": 534, "make_swiss_rol": 535, "dictionarylearn": 536, "factoranalysi": 537, "incrementalpca": 539, "latentdirichletalloc": 541, "minibatchdictionarylearn": 542, "sparsecod": 547, "truncatedsvd": 549, "dict_learn": 550, "dict_learning_onlin": 551, "non_negative_factor": 552, "sparse_encod": 553, "quadraticdiscriminantanalysi": 555, "dummyclassifi": 556, "dummyregressor": 557, "adaboostregressor": 559, "baggingclassifi": 560, "baggingregressor": 561, "extratreesclassifi": 562, "extratreesregressor": 563, "randomforestclassifi": 569, "randomforestregressor": 570, "randomtreesembed": 571, "stackingclassifi": 572, "stackingregressor": 573, "votingregressor": 575, "convergencewarn": 576, "dataconversionwarn": 577, "datadimensionalitywarn": 578, "efficiencywarn": 579, "fitfailedwarn": 580, "inconsistentversionwarn": 581, "notfittederror": 582, "undefinedmetricwarn": 583, "enable_halving_search_cv": 584, "enable_iterative_imput": 585, "patchextractor": 588, "extract_patches_2d": 589, "grid_to_graph": 590, "img_to_graph": 591, "reconstruct_from_patches_2d": 592, "countvector": 593, "tfidftransform": 595, "genericunivariateselect": 597, "rfe": 598, "rfecv": 599, "selectfdr": 600, "selectfpr": 601, "selectfw": 603, "selectkbest": 604, "selectpercentil": 605, "selectormixin": 606, "variancethreshold": 608, "chi2": 609, "f_classif": 610, "f_regress": 611, "mutual_info_classif": 612, "mutual_info_regress": 613, "r_regress": 614, "gaussianprocessclassifi": 615, "gaussianprocessregressor": 616, "compoundkernel": 617, "constantkernel": 618, "dotproduct": 619, "expsinesquar": 620, "exponenti": 621, "matern": 624, "pairwisekernel": 625, "rationalquadrat": 628, "sum": 629, "whitekernel": 630, "get_config": 631, "knnimput": 633, "missingind": 634, "simpleimput": 635, "decisionboundarydisplai": 636, "partialdependencedisplai": 637, "partial_depend": 638, "permutation_import": 639, "isotonicregress": 640, "check_increas": 641, "isotonic_regress": 642, "additivechi2sampl": 643, "nystroem": [644, 986], "rbfsampler": 646, "skewedchi2sampl": 647, "kernelridg": 648, "ardregress": 649, "bayesianridg": 650, "elasticnetcv": 652, "gammaregressor": 653, "larscv": 656, "lassocv": 658, "lassolar": 659, "lassolarscv": 660, "lassolars": 661, "logisticregressioncv": 664, "multitaskelasticnet": 665, "multitaskelasticnetcv": 666, "multitasklasso": 667, "multitasklassocv": 668, "orthogonalmatchingpursuit": 669, "orthogonalmatchingpursuitcv": 670, "passiveaggressiveclassifi": 671, "passiveaggressiveregressor": 672, "poissonregressor": 674, "ransacregressor": 676, "ridgecv": 678, "ridgeclassifi": 679, "ridgeclassifiercv": 680, "sgdclassifi": 681, "sgdoneclasssvm": 682, "sgdregressor": 683, "theilsenregressor": 684, "enet_path": 686, "lars_path": 687, "lars_path_gram": 688, "lasso_path": 689, "orthogonal_mp": 690, "orthogonal_mp_gram": 691, "ridge_regress": 692, "locallylinearembed": 694, "md": [695, 991], "spectralembed": 696, "locally_linear_embed": 698, "smacof": 699, "spectral_embed": 700, "trustworthi": 701, "detcurvedisplai": 703, "distancemetr": 704, "predictionerrordisplai": 706, "accuracy_scor": 708, "adjusted_mutual_info_scor": 709, "adjusted_rand_scor": 710, "average_precision_scor": 712, "balanced_accuracy_scor": 713, "brier_score_loss": 714, "calinski_harabasz_scor": 715, "check_scor": 716, "class_likelihood_ratio": 717, "classification_report": 718, "contingency_matrix": 719, "pair_confusion_matrix": 720, "cohen_kappa_scor": 721, "completeness_scor": 722, "confusion_matrix": 723, "consensus_scor": 724, "coverage_error": 725, "d2_absolute_error_scor": 726, "d2_pinball_scor": 727, "d2_tweedie_scor": 728, "davies_bouldin_scor": 729, "dcg_score": 730, "det_curv": 731, "explained_variance_scor": 732, "f1_score": 733, "fbeta_scor": 734, "fowlkes_mallows_scor": 735, "get_scor": 736, "get_scorer_nam": 737, "hamming_loss": 738, "hinge_loss": 739, "homogeneity_completeness_v_measur": 740, "homogeneity_scor": 741, "jaccard_scor": 742, "label_ranking_average_precision_scor": 743, "label_ranking_loss": 744, "log_loss": 745, "make_scor": 746, "matthews_corrcoef": 747, "max_error": 748, "mean_absolute_error": 749, "mean_absolute_percentage_error": 750, "mean_gamma_devi": 751, "mean_pinball_loss": 752, "mean_poisson_devi": 753, "mean_squared_error": 754, "mean_squared_log_error": 755, "mean_tweedie_devi": 756, "median_absolute_error": 757, "multilabel_confusion_matrix": 758, "mutual_info_scor": 759, "ndcg_score": 760, "normalized_mutual_info_scor": 761, "additive_chi2_kernel": 762, "chi2_kernel": 763, "cosine_dist": 764, "cosine_similar": 765, "distance_metr": 766, "euclidean_dist": 767, "haversine_dist": 768, "kernel_metr": 769, "laplacian_kernel": 770, "linear_kernel": 771, "manhattan_dist": 772, "nan_euclidean_dist": 773, "paired_cosine_dist": 774, "paired_dist": 775, "paired_euclidean_dist": 776, "paired_manhattan_dist": 777, "pairwise_kernel": 778, "polynomial_kernel": 779, "rbf_kernel": 780, "sigmoid_kernel": 781, "pairwise_dist": 782, "pairwise_distances_argmin": 783, "pairwise_distances_argmin_min": 784, "pairwise_distances_chunk": 785, "precision_recall_curv": 786, "precision_recall_fscore_support": 787, "precision_scor": 788, "r2_score": 789, "rand_scor": 790, "recall_scor": 791, "roc_auc_scor": 792, "roc_curv": 793, "root_mean_squared_error": 794, "root_mean_squared_log_error": 795, "silhouette_sampl": 796, "silhouette_scor": 797, "top_k_accuracy_scor": 798, "v_measure_scor": 799, "zero_one_loss": 800, "bayesiangaussianmixtur": 801, "gaussianmixtur": 802, "groupkfold": 804, "groupshufflesplit": 805, "halvinggridsearchcv": 806, "halvingrandomsearchcv": 807, "kfold": 808, "learningcurvedisplai": 809, "leaveonegroupout": 810, "leaveoneout": 811, "leavepgroupsout": 812, "leavepout": 813, "parametergrid": 814, "parametersampl": 815, "predefinedsplit": 816, "randomizedsearchcv": 817, "repeatedkfold": 818, "repeatedstratifiedkfold": 819, "shufflesplit": 820, "stratifiedkfold": 822, "stratifiedshufflesplit": 823, "timeseriessplit": 824, "check_cv": 826, "cross_val_predict": 827, "learning_curv": 830, "permutation_test_scor": 831, "train_test_split": 832, "validation_curv": 833, "onevsoneclassifi": [834, 995], "outputcodeclassifi": [836, 995], "classifierchain": [837, 995], "multioutputclassifi": [838, 995], "multioutputregressor": [839, 995], "regressorchain": [840, 995], "bernoullinb": 841, "categoricalnb": 842, "complementnb": 843, "gaussiannb": 844, "multinomialnb": 845, "balltre": [846, 997], "kdtree": [847, 997], "kneighborsclassifi": 848, "kneighborsregressor": 849, "kneighborstransform": 850, "kerneldens": 851, "localoutlierfactor": 852, "nearestcentroid": 853, "nearestneighbor": 854, "neighborhoodcomponentsanalysi": 855, "radiusneighborsclassifi": 856, "radiusneighborsregressor": 857, "radiusneighborstransform": 858, "kneighbors_graph": 859, "radius_neighbors_graph": 860, "sort_graph_by_row_valu": 861, "bernoullirbm": 862, "mlpregressor": 864, "make_pipelin": 867, "make_union": 868, "binar": [869, 889, 1004, 1005], "functiontransform": 870, "kernelcenter": 872, "labelbinar": [873, 1005], "labelencod": 874, "multilabelbinar": [877, 1005], "polynomialfeatur": 881, "splinetransform": 885, "add_dummy_featur": 888, "label_binar": 890, "maxabs_scal": 891, "minmax_scal": 892, "power_transform": 894, "quantile_transform": 895, "robust_scal": 896, "gaussianrandomproject": 898, "sparserandomproject": 899, "johnson_lindenstrauss_min_dim": 900, "labelpropag": 901, "labelspread": 902, "selftrainingclassifi": 903, "set_config": 904, "show_vers": 905, "linearsvr": 907, "nusvc": 908, "nusvr": 909, "oneclasssvm": 910, "l1_min_c": 913, "decisiontreeclassifi": 914, "extratreeclassifi": 916, "extratreeregressor": 917, "export_graphviz": 918, "export_text": 919, "plot_tre": 920, "_safe_index": 922, "min_po": 923, "as_float_arrai": 924, "assert_all_finit": 925, "check_x_i": 926, "check_arrai": 927, "check_consistent_length": 928, "check_random_st": 929, "check_scalar": 930, "compute_class_weight": 931, "compute_sample_weight": 932, "all_displai": 934, "all_estim": 935, "all_funct": 936, "check_estim": 937, "parametrize_with_check": 938, "estimator_html_repr": 939, "fast_logdet": 941, "randomized_range_find": 942, "randomized_svd": 943, "safe_sparse_dot": 944, "weighted_mod": 945, "gen_batch": 946, "gen_even_slic": 947, "single_source_shortest_path_length": 948, "metadatarequest": 950, "metadatarout": 951, "methodmap": 952, "get_routing_for_object": 953, "process_rout": 954, "available_if": 955, "is_multilabel": 956, "type_of_target": 957, "unique_label": 958, "murmurhash3_32": 959, "delai": 961, "parallel_backend": 962, "sample_without_replac": 963, "register_parallel_backend": 964, "resampl": 965, "safe_mask": 966, "safe_sqr": 967, "incr_mean_variance_axi": 969, "inplace_column_scal": 970, "inplace_csr_column_scal": 971, "inplace_row_scal": 972, "inplace_swap_column": 973, "inplace_swap_row": 974, "mean_variance_axi": 975, "inplace_csr_row_normalize_l1": 976, "inplace_csr_row_normalize_l2": 977, "check_memori": 979, "check_symmetr": 980, "column_or_1d": 981, "has_fit_paramet": 982, "exhaust": 983, "min_resourc": 983, "aggress": [983, 990], "cv_results_": 983, "brute": [983, 997], "forc": [983, 997], "keep": 984, "mark": 984, "nan": 984, "chi": [986, 992], "skew": 986, "tensor": 986, "sketch": 986, "detail": [986, 1008, 1009], "omp": 990, "passiv": 990, "scenario": 990, "trade": 990, "off": 990, "which": 990, "consensu": 990, "median": [990, 994], "huber": 990, "extend": 990, "introduct": [991, 1019], "modifi": 991, "hessian": 991, "eigenmap": 991, "tangent": 991, "align": 991, "cosin": 992, "laplacian": 992, "rule": 994, "cohen": 994, "kappa": 994, "ham": 994, "jaccard": 994, "hing": 994, "matthew": 994, "zero": 994, "brier": 994, "discount": 994, "cumul": 994, "gain": 994, "r\u00b2": 994, "absolut": 994, "logarithm": 994, "percentag": 994, "explain": 994, "pinbal": 994, "d\u00b2": 994, "complement": 996, "bernoulli": [996, 999], "unsupervis": [997, 999, 1011, 1027, 1029], "find": 997, "ball": 997, "shrunken": 997, "warm_start": 998, "parametr": 999, "up": 1000, "ellipt": 1000, "envelop": 1000, "isol": 1000, "outlin": 1002, "mislead": 1002, "strongli": 1002, "rang": 1004, "bin": 1004, "lemma": 1006, "unlabel": 1007, "entri": 1007, "id3": 1010, "c4": 1010, "5": [1010, 1035, 1053], "c5": 1010, "cart": 1010, "talk": 1012, "scientif": [1012, 1022], "framework": 1013, "domain": 1013, "translat": 1013, "roadmap": 1014, "statement": 1014, "2018": 1014, "architectur": 1014, "goal": 1014, "subpackag": 1014, "mail": 1017, "user": [1017, 1030], "social": 1017, "media": 1017, "gitter": 1017, "who": 1018, "j": 1018, "morgan": 1018, "spotifi": 1018, "inria": 1018, "betawork": 1018, "hug": 1018, "evernot": 1018, "t\u00e9l\u00e9com": 1018, "paristech": 1018, "book": 1018, "com": 1018, "aweb": 1018, "yhat": 1018, "rangespan": 1018, "birchbox": 1018, "bestofmedia": 1018, "phimeca": 1018, "howaboutw": 1018, "peerindex": 1018, "datarobot": 1018, "okcupid": 1018, "love": 1018, "publica": 1018, "machinali": 1018, "solido": 1018, "infonea": 1018, "dataiku": 1018, "otto": 1018, "zopa": 1018, "mar": 1018, "bnp": 1018, "pariba": 1018, "cardif": 1018, "section": 1019, "cast": 1019, "updat": [1019, 1045], "right": 1021, "put": 1024, "open": 1024, "ship": 1025, "would": 1025, "high": 1026, "solv": [1026, 1027], "vocabulari": 1026, "curs": 1026, "iris": 1026, "same": 1026, "seek": 1027, "constrain": 1027, "inverse_transform": 1027, "setup": 1028, "token": 1028, "occurr": 1028, "languag": 1028, "identif": 1028, "sentiment": 1028, "movi": 1028, "cli": 1028, "where": 1028, "older": 1035, "12": 1035, "changelog": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "11": 1035, "9": 1035, "8": 1035, "7": 1035, "6": 1035, "modul": [1035, 1043, 1044, 1050, 1051, 1052], "misc": 1035, "earlier": 1035, "13": 1036, "14": 1037, "15": 1038, "16": 1039, "17": 1040, "18": 1041, "19": 1042, "21": 1044, "sparsefunc": 1044, "post1": 1045, "websit": 1045, "clear": 1045, "public": 1045, "futurewarn": 1045, "enforc": [1046, 1048], "privat": 1052}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1035, "authors"], [1035, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [402, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Recently Deprecated": [[1, "recently-deprecated"]], "API Reference": [[2, "api-reference"]], "sklearn": [[3, "module-sklearn"], [1051, "sklearn"]], "sklearn.base": [[4, "module-sklearn.base"], [1044, "sklearn-base"], [1045, "sklearn-base"], [1047, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1050, "sklearn-base"], [1050, "id2"], [1050, "id10"], [1051, "sklearn-base"], [1052, "sklearn-base"]], "sklearn.calibration": [[5, "module-sklearn.calibration"], [1044, "sklearn-calibration"], [1045, "sklearn-calibration"], [1047, "sklearn-calibration"], [1048, "sklearn-calibration"], [1048, "id7"], [1049, "sklearn-calibration"], [1050, "sklearn-calibration"], [1050, "id11"], [1051, "sklearn-calibration"], [1051, "id7"], [1052, "sklearn-calibration"], [1052, "id6"]], "Visualization": [[5, "visualization"], [29, "visualization"], [53, "visualization"], [349, "visualization"]], "sklearn.cluster": [[6, "module-sklearn.cluster"], [1043, "sklearn-cluster"], [1043, "id2"], [1043, "id11"], [1043, "id24"], [1044, "sklearn-cluster"], [1044, "id8"], [1045, "sklearn-cluster"], [1045, "id5"], [1046, "sklearn-cluster"], [1046, "id2"], [1046, "id5"], [1047, "sklearn-cluster"], [1048, "sklearn-cluster"], [1048, "id1"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id12"], [1051, "sklearn-cluster"], [1051, "id8"], [1052, "sklearn-cluster"], [1052, "id7"], [1053, "sklearn-cluster"]], "sklearn.compose": [[7, "module-sklearn.compose"], [1043, "sklearn-compose"], [1043, "id3"], [1043, "id6"], [1043, "id12"], [1043, "id25"], [1044, "sklearn-compose"], [1044, "id9"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1047, "id5"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1052, "id8"], [1053, "sklearn-compose"]], "sklearn.covariance": [[8, "module-sklearn.covariance"], [1043, "sklearn-covariance"], [1043, "id26"], [1047, "sklearn-covariance"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"], [1051, "sklearn-covariance"], [1052, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition"], [1045, "sklearn-cross-decomposition"], [1047, "sklearn-cross-decomposition"], [1047, "id6"], [1049, "sklearn-cross-decomposition"], [1051, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, "module-sklearn.datasets"], [1043, "sklearn-datasets"], [1043, "id13"], [1043, "id27"], [1044, "sklearn-datasets"], [1044, "id10"], [1045, "sklearn-datasets"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1048, "id9"], [1049, "sklearn-datasets"], [1049, "id9"], [1050, "sklearn-datasets"], [1050, "id13"], [1051, "sklearn-datasets"], [1051, "id9"], [1052, "sklearn-datasets"], [1053, "sklearn-datasets"]], "Loaders": [[10, "loaders"]], "Sample generators": [[10, "sample-generators"]], "sklearn.decomposition": [[11, "module-sklearn.decomposition"], [1043, "sklearn-decomposition"], [1043, "id4"], [1043, "id14"], [1043, "id28"], [1044, "sklearn-decomposition"], [1044, "id11"], [1045, "sklearn-decomposition"], [1046, "sklearn-decomposition"], [1046, "id6"], [1047, "sklearn-decomposition"], [1047, "id7"], [1048, "sklearn-decomposition"], [1048, "id10"], [1049, "sklearn-decomposition"], [1049, "id10"], [1050, "sklearn-decomposition"], [1050, "id14"], [1051, "sklearn-decomposition"], [1051, "id10"], [1052, "sklearn-decomposition"], [1053, "sklearn-decomposition"]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis"], [1043, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, "module-sklearn.dummy"], [1043, "sklearn-dummy"], [1044, "sklearn-dummy"], [1045, "sklearn-dummy"], [1048, "sklearn-dummy"], [1049, "sklearn-dummy"], [1053, "sklearn-dummy"]], "sklearn.ensemble": [[14, "module-sklearn.ensemble"], [1043, "sklearn-ensemble"], [1043, "id29"], [1044, "sklearn-ensemble"], [1044, "id12"], [1045, "sklearn-ensemble"], [1046, "sklearn-ensemble"], [1046, "id7"], [1047, "sklearn-ensemble"], [1047, "id8"], [1048, "sklearn-ensemble"], [1048, "id2"], [1048, "id11"], [1049, "sklearn-ensemble"], [1050, "sklearn-ensemble"], [1050, "id3"], [1050, "id15"], [1051, "sklearn-ensemble"], [1051, "id11"], [1052, "sklearn-ensemble"], [1052, "id9"], [1053, "sklearn-ensemble"]], "sklearn.exceptions": [[15, "module-sklearn.exceptions"], [1047, "sklearn-exceptions"], [1051, "sklearn-exceptions"]], "sklearn.experimental": [[16, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction"], [1043, "sklearn-feature-extraction"], [1043, "id15"], [1043, "id30"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"], [1046, "sklearn-feature-extraction"], [1046, "id8"], [1047, "sklearn-feature-extraction"], [1047, "id9"], [1048, "sklearn-feature-extraction"], [1048, "id12"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection"], [1043, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"], [1048, "id13"], [1049, "sklearn-feature-selection"], [1049, "id2"], [1049, "id11"], [1050, "sklearn-feature-selection"], [1050, "id16"], [1051, "sklearn-feature-selection"], [1051, "id12"], [1052, "sklearn-feature-selection"], [1053, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process"], [1043, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1047, "id10"], [1048, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[20, "module-sklearn.impute"], [1043, "sklearn-impute"], [1043, "id31"], [1044, "sklearn-impute"], [1044, "id13"], [1045, "sklearn-impute"], [1045, "id6"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1049, "id12"], [1050, "sklearn-impute"], [1051, "sklearn-impute"], [1051, "id13"], [1052, "sklearn-impute"], [1053, "sklearn-impute"]], "sklearn.inspection": [[21, "module-sklearn.inspection"], [1044, "sklearn-inspection"], [1044, "id3"], [1044, "id14"], [1045, "sklearn-inspection"], [1045, "id7"], [1046, "sklearn-inspection"], [1046, "id11"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1050, "id17"], [1051, "sklearn-inspection"], [1052, "sklearn-inspection"], [1052, "id10"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [318, "plotting"]], "sklearn.isotonic": [[22, "module-sklearn.isotonic"], [1043, "sklearn-isotonic"], [1044, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1047, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1050, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation"], [1045, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge"], [1052, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, "module-sklearn.linear_model"], [1043, "sklearn-linear-model"], [1043, "id16"], [1043, "id32"], [1044, "sklearn-linear-model"], [1044, "id15"], [1045, "sklearn-linear-model"], [1046, "sklearn-linear-model"], [1046, "id9"], [1047, "sklearn-linear-model"], [1047, "id11"], [1048, "sklearn-linear-model"], [1048, "id3"], [1048, "id14"], [1049, "sklearn-linear-model"], [1049, "id13"], [1050, "sklearn-linear-model"], [1050, "id18"], [1051, "sklearn-linear-model"], [1052, "sklearn-linear-model"], [1052, "id11"], [1053, "sklearn-linear-model"]], "Linear classifiers": [[25, "linear-classifiers"]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Miscellaneous": [[25, "miscellaneous"], [192, "miscellaneous"], [249, "miscellaneous"], [1043, "miscellaneous"], [1043, "id40"], [1044, "miscellaneous"], [1045, "miscellaneous"], [1046, "miscellaneous"], [1046, "id13"], [1047, "miscellaneous"], [1048, "miscellaneous"], [1051, "miscellaneous"]], "sklearn.manifold": [[26, "module-sklearn.manifold"], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1048, "id15"], [1049, "sklearn-manifold"], [1049, "id14"], [1050, "sklearn-manifold"], [1050, "id19"], [1051, "sklearn-manifold"], [1053, "sklearn-manifold"]], "sklearn.metrics": [[27, "module-sklearn.metrics"], [1043, "sklearn-metrics"], [1043, "id17"], [1043, "id33"], [1044, "sklearn-metrics"], [1044, "id4"], [1044, "id16"], [1045, "sklearn-metrics"], [1045, "id2"], [1045, "id8"], [1046, "sklearn-metrics"], [1046, "id10"], [1047, "sklearn-metrics"], [1047, "id2"], [1047, "id12"], [1048, "sklearn-metrics"], [1048, "id16"], [1049, "sklearn-metrics"], [1049, "id3"], [1049, "id15"], [1050, "sklearn-metrics"], [1051, "sklearn-metrics"], [1051, "id2"], [1051, "id14"], [1052, "sklearn-metrics"], [1052, "id12"], [1053, "sklearn-metrics"]], "Model selection interface": [[27, "model-selection-interface"]], "Classification metrics": [[27, "classification-metrics"], [994, "classification-metrics"]], "Regression metrics": [[27, "regression-metrics"], [994, "regression-metrics"]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [994, "multilabel-ranking-metrics"]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [994, "clustering-metrics"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Distance metrics": [[27, "distance-metrics"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[28, "module-sklearn.mixture"], [1043, "sklearn-mixture"], [1043, "id34"], [1044, "sklearn-mixture"], [1048, "sklearn-mixture"], [1049, "sklearn-mixture"], [1051, "sklearn-mixture"], [1051, "id15"], [1052, "sklearn-mixture"]], "sklearn.model_selection": [[29, "module-sklearn.model_selection"], [1043, "sklearn-model-selection"], [1043, "id35"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1045, "id9"], [1045, "id13"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1047, "id13"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1050, "id20"], [1051, "sklearn-model-selection"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"]], "Splitters": [[29, "splitters"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Model validation": [[29, "model-validation"]], "sklearn.multiclass": [[30, "module-sklearn.multiclass"], [1044, "sklearn-multiclass"], [1047, "sklearn-multiclass"], [1048, "sklearn-multiclass"], [1049, "sklearn-multiclass"]], "sklearn.multioutput": [[31, "module-sklearn.multioutput"], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1047, "id14"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes"], [1043, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1045, "id10"], [1046, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"], [1050, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, "module-sklearn.neighbors"], [1043, "sklearn-neighbors"], [1043, "id7"], [1043, "id18"], [1043, "id36"], [1044, "sklearn-neighbors"], [1044, "id5"], [1044, "id17"], [1045, "sklearn-neighbors"], [1045, "id11"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"], [1048, "id4"], [1048, "id17"], [1049, "sklearn-neighbors"], [1050, "sklearn-neighbors"], [1051, "sklearn-neighbors"], [1051, "id16"], [1052, "sklearn-neighbors"], [1052, "id13"]], "sklearn.neural_network": [[34, "module-sklearn.neural_network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1050, "id21"], [1051, "sklearn-neural-network"]], "sklearn.pipeline": [[35, "module-sklearn.pipeline"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1048, "id18"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1053, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing"], [1043, "sklearn-preprocessing"], [1043, "id19"], [1043, "id37"], [1044, "sklearn-preprocessing"], [1044, "id18"], [1045, "sklearn-preprocessing"], [1045, "id12"], [1046, "sklearn-preprocessing"], [1047, "sklearn-preprocessing"], [1047, "id15"], [1048, "sklearn-preprocessing"], [1048, "id19"], [1049, "sklearn-preprocessing"], [1049, "id4"], [1049, "id16"], [1050, "sklearn-preprocessing"], [1050, "id4"], [1050, "id22"], [1051, "sklearn-preprocessing"], [1051, "id17"], [1052, "sklearn-preprocessing"], [1052, "id14"], [1053, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, "module-sklearn.random_projection"], [1049, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised"], [1045, "sklearn-semi-supervised"], [1046, "sklearn-semi-supervised"], [1047, "sklearn-semi-supervised"], [1047, "id3"], [1047, "id16"], [1051, "sklearn-semi-supervised"]], "sklearn.svm": [[39, "module-sklearn.svm"], [1043, "sklearn-svm"], [1043, "id38"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1048, "id20"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1051, "sklearn-svm"]], "sklearn.tree": [[40, "module-sklearn.tree"], [1043, "sklearn-tree"], [1044, "sklearn-tree"], [1044, "id19"], [1045, "sklearn-tree"], [1046, "sklearn-tree"], [1047, "sklearn-tree"], [1047, "id17"], [1048, "sklearn-tree"], [1048, "id21"], [1049, "sklearn-tree"], [1049, "id5"], [1049, "id17"], [1050, "sklearn-tree"], [1050, "id5"], [1050, "id23"], [1051, "sklearn-tree"], [1051, "id3"], [1051, "id18"], [1052, "sklearn-tree"], [1052, "id15"]], "Exporting": [[40, "exporting"]], "sklearn.utils": [[41, "module-sklearn.utils"], [1043, "sklearn-utils"], [1043, "id20"], [1043, "id39"], [1044, "sklearn-utils"], [1045, "sklearn-utils"], [1045, "id14"], [1046, "sklearn-utils"], [1046, "id12"], [1047, "sklearn-utils"], [1047, "id18"], [1048, "sklearn-utils"], [1048, "id5"], [1048, "id22"], [1049, "sklearn-utils"], [1049, "id18"], [1050, "sklearn-utils"], [1050, "id6"], [1050, "id24"], [1051, "sklearn-utils"], [1052, "sklearn-utils"], [1052, "id3"], [1052, "id16"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Examples based on real world datasets": [[44, "examples-based-on-real-world-datasets"], [192, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[45, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[45, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[45, "time-based-cross-validation"]], "Gradient Boosting": [[45, "gradient-boosting"]], "Naive linear regression": [[45, "naive-linear-regression"]], "Time-steps as categories": [[45, "time-steps-as-categories"]], "Trigonometric features": [[45, "trigonometric-features"]], "Periodic spline features": [[45, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[45, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[45, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[45, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[45, "concluding-remarks"], [247, "concluding-remarks"]], "Image denoising using kernel PCA": [[46, "image-denoising-using-kernel-pca"]], "Load the dataset via OpenML": [[46, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[46, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[46, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[47, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[48, "model-complexity-influence"]], "Load the data": [[48, "load-the-data"], [88, "load-the-data"], [156, "load-the-data"], [303, "load-the-data"]], "Benchmark influence": [[48, "benchmark-influence"]], "Choose parameters": [[48, "choose-parameters"]], "Run the code and plot the results": [[48, "run-the-code-and-plot-the-results"]], "Conclusion": [[48, "conclusion"], [54, "conclusion"], [212, "conclusion"], [297, "conclusion"], [303, "conclusion"], [327, "conclusion"], [353, "conclusion"]], "Out-of-core classification of text documents": [[49, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[49, "reuters-dataset-related-routines"]], "Main": [[49, "main"]], "Plot results": [[49, "plot-results"], [87, "plot-results"], [114, "plot-results"], [129, "plot-results"], [130, "plot-results"], [148, "plot-results"], [299, "plot-results"], [307, "plot-results"]], "Outlier detection on a real data set": [[50, "outlier-detection-on-a-real-data-set"]], "First example": [[50, "first-example"]], "Second example": [[50, "second-example"]], "Prediction Latency": [[51, "prediction-latency"], [374, "prediction-latency"]], "Benchmark and plot helper functions": [[51, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[51, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[51, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[51, "benchmark-throughput"]], "Species distribution modeling": [[52, "species-distribution-modeling"]], "References": [[52, "references"], [65, "references"], [67, "references"], [117, "references"], [145, "references"], [200, "references"], [207, "references"], [297, "references"], [313, "references"], [424, "references"], [984, "references"]], "Visualizing the stock market structure": [[53, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[53, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[53, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[53, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[53, "embedding-in-2d-space"]], "Lagged features for time series forecasting": [[54, "lagged-features-for-time-series-forecasting"]], "Analyzing the Bike Sharing Demand dataset": [[54, "analyzing-the-bike-sharing-demand-dataset"]], "Generating pandas-engineered lagged features": [[54, "generating-pandas-engineered-lagged-features"]], "Naive evaluation of the next hour bike demand regression": [[54, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Proper next hour forecasting evaluation": [[54, "proper-next-hour-forecasting-evaluation"]], "Modeling predictive uncertainty via quantile regression": [[54, "modeling-predictive-uncertainty-via-quantile-regression"]], "A qualitative look at the predictions": [[54, "a-qualitative-look-at-the-predictions"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[55, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[56, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Libsvm GUI": [[57, "libsvm-gui"]], "Wikipedia principal eigenvector": [[58, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[58, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[58, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[58, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[58, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[58, "computing-centrality-scores"]], "Biclustering": [[59, "biclustering"], [192, "biclustering"], [383, "biclustering"], [412, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[60, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[61, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[61, "generate-sample-data"], [76, "generate-sample-data"], [93, "generate-sample-data"], [101, "generate-sample-data"], [114, "generate-sample-data"], [129, "generate-sample-data"], [130, "generate-sample-data"], [173, "generate-sample-data"], [256, "generate-sample-data"], [293, "generate-sample-data"], [312, "generate-sample-data"], [356, "generate-sample-data"]], "Fitting SpectralBiclustering": [[61, "fitting-spectralbiclustering"]], "Plotting results": [[61, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[62, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[63, "calibration"], [192, "calibration"]], "Probability calibration of classifiers": [[64, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[64, "generate-synthetic-dataset"], [202, "generate-synthetic-dataset"], [202, "id1"], [207, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[64, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[64, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[65, "probability-calibration-curves"]], "Dataset": [[65, "dataset"], [67, "dataset"], [212, "dataset"], [286, "dataset"]], "Calibration curves": [[65, "calibration-curves"], [67, "calibration-curves"], [413, "calibration-curves"]], "Gaussian Naive Bayes": [[65, "gaussian-naive-bayes"], [996, "gaussian-naive-bayes"]], "Linear support vector classifier": [[65, "linear-support-vector-classifier"]], "Summary": [[65, "summary"], [153, "summary"], [363, "summary"]], "Probability Calibration for 3-class classification": [[66, "probability-calibration-for-3-class-classification"]], "Data": [[66, "data"]], "Fitting and calibration": [[66, "fitting-and-calibration"]], "Compare probabilities": [[66, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[67, "comparison-of-calibration-of-classifiers"]], "Analysis of the results": [[67, "analysis-of-the-results"]], "Classification": [[68, "classification"], [71, "classification"], [187, "classification"], [192, "classification"], [990, "classification"], [997, "id4"], [998, "classification"], [1008, "classification"], [1009, "classification"], [1010, "classification"], [1026, "classification"]], "Plot classification probability": [[69, "plot-classification-probability"]], "Classifier comparison": [[70, "classifier-comparison"]], "Recognizing hand-written digits": [[71, "recognizing-hand-written-digits"]], "Digits dataset": [[71, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[72, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[73, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[73, "data-generation"], [87, "data-generation"], [95, "data-generation"], [159, "data-generation"], [176, "data-generation"], [185, "data-generation"], [271, "data-generation"], [338, "data-generation"], [357, "data-generation"]], "Plotting Functions": [[73, "plotting-functions"]], "Comparison of LDA and QDA": [[73, "comparison-of-lda-and-qda"]], "Clustering": [[74, "clustering"], [192, "clustering"], [414, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[75, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[75, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[75, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[75, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[76, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[76, "compute-affinity-propagation"]], "Plot result": [[76, "plot-result"], [101, "plot-result"], [105, "plot-result"], [105, "id2"]], "Agglomerative clustering with and without structure": [[77, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[78, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[79, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[80, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[81, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[82, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[83, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[84, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[85, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[85, "generate-data"], [105, "generate-data"], [116, "generate-data"], [217, "generate-data"], [318, "generate-data"]], "Define structure of the data": [[85, "define-structure-of-the-data"]], "Compute clustering": [[85, "compute-clustering"], [105, "compute-clustering"], [105, "id1"]], "Plot the results on an image": [[85, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[86, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[87, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[87, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[88, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[88, "learn-the-dictionary-of-images"]], "Plot the results": [[88, "plot-the-results"], [118, "plot-the-results"], [166, "plot-the-results"], [191, "plot-the-results"]], "Feature agglomeration": [[89, "feature-agglomeration"], [1011, "feature-agglomeration"], [1027, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[90, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[91, "vector-quantization-example"]], "Original image": [[91, "original-image"]], "Compression via vector quantization": [[91, "compression-via-vector-quantization"]], "Encoding strategy": [[91, "encoding-strategy"]], "Memory footprint": [[91, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[92, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[93, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[93, "scale-invariance"]], "Multi-Scale Clustering": [[93, "multi-scale-clustering"]], "Hyperparameter Robustness": [[93, "hyperparameter-robustness"]], "min_cluster_size": [[93, "min-cluster-size"]], "min_samples": [[93, "min-samples"]], "dbscan_clustering": [[93, "dbscan-clustering"]], "Inductive Clustering": [[94, "inductive-clustering"]], "Demonstration of k-means assumptions": [[95, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[95, "fit-models-and-plot-results"]], "Possible solutions": [[95, "possible-solutions"]], "Final remarks": [[95, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[96, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[96, "load-the-dataset"]], "Define our evaluation benchmark": [[96, "define-our-evaluation-benchmark"]], "Run the benchmark": [[96, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[96, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[97, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[98, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[99, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[100, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[101, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[101, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[102, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[102, "generate-the-data"], [104, "generate-the-data"], [118, "generate-the-data"]], "Compute clustering with KMeans": [[102, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[102, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[102, "establishing-parity-between-clusters"]], "Plotting the results": [[102, "plotting-the-results"], [143, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[103, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[104, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[104, "plotting-four-circles"]], "Plotting two circles": [[104, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[105, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[105, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[106, "pipelines-and-composite-estimators"], [192, "pipelines-and-composite-estimators"], [415, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[107, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[107, "newsgroups-dataset"]], "Creating transformers": [[107, "creating-transformers"]], "Classification pipeline": [[107, "classification-pipeline"]], "Column Transformer with Mixed Types": [[108, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[109, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[109, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[109, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[110, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[111, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[112, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[112, "synthetic-example"]], "Real-world data set": [[112, "real-world-data-set"]], "Covariance estimation": [[113, "covariance-estimation"], [192, "covariance-estimation"], [416, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[114, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[114, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[114, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[115, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[116, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "Comparison of results": [[116, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[117, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[117, "minimum-covariance-determinant-estimator"]], "Evaluation": [[117, "evaluation"], [318, "evaluation"]], "Sparse inverse covariance estimation": [[118, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[118, "estimate-the-covariance"]], "Cross decomposition": [[119, "cross-decomposition"], [192, "cross-decomposition"], [417, "cross-decomposition"]], "Compare cross decomposition methods": [[120, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[120, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[120, "canonical-symmetric-pls"]], "Transform data": [[120, "transform-data"]], "Scatter plot of scores": [[120, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[120, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[120, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[120, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[121, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[121, "the-data"]], "Projection on one component and predictive power": [[121, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[122, "dataset-examples"], [192, "dataset-examples"]], "The Digit Dataset": [[123, "the-digit-dataset"]], "The Iris Dataset": [[124, "the-iris-dataset"]], "Loading the iris dataset": [[124, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[124, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[124, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[125, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[126, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[127, "decomposition"], [128, "decomposition"], [192, "decomposition"]], "Faces dataset decompositions": [[128, "faces-dataset-decompositions"]], "Dataset preparation": [[128, "dataset-preparation"], [243, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[128, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[128, "non-negative-components-nmf"]], "Independent components - FastICA": [[128, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[128, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[128, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[128, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[128, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[128, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[128, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[128, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[128, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[129, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[129, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[130, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[131, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[131, "generate-distorted-image"]], "Display the distorted image": [[131, "display-the-distorted-image"]], "Extract reference patches": [[131, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[131, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[131, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[132, "incremental-pca"], [419, "incremental-pca"]], "Kernel PCA": [[133, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[133, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[133, "projecting-into-the-original-feature-space"]], "PCA example with Iris Data-set": [[134, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[135, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Create the data": [[135, "create-the-data"]], "Fit the models": [[135, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[136, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[137, "sparse-coding-with-a-precomputed-dictionary"], [419, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[138, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[139, "developing-estimators"], [192, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[140, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[140, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[141, "ensemble-methods"], [192, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[142, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[142, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[142, "training-the-adaboostclassifier"]], "Analysis": [[142, "analysis"]], "Convergence of the AdaBoostClassifier": [[142, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[142, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[143, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[143, "preparing-the-data"], [158, "preparing-the-data"], [200, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[143, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[144, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[145, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[146, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[147, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[148, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[148, "load-dataset"]], "Compute score and computation times": [[148, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[149, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[149, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[149, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[149, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[150, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[150, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[150, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[151, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[152, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[152, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[152, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[152, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[152, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[152, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[152, "model-comparison"]], "Limiting the number of splits": [[152, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[153, "early-stopping-in-gradient-boosting"]], "Data Preparation": [[153, "data-preparation"]], "Model Training and Comparison": [[153, "model-training-and-comparison"]], "Error Calculation": [[153, "error-calculation"]], "Visualize Comparison": [[153, "visualize-comparison"]], "Gradient Boosting Out-of-Bag estimates": [[154, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[155, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[155, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[155, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[155, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[155, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[156, "gradient-boosting-regression"]], "Data preprocessing": [[156, "data-preprocessing"]], "Fit regression model": [[156, "fit-regression-model"], [312, "fit-regression-model"], [356, "fit-regression-model"]], "Plot training deviance": [[156, "plot-training-deviance"]], "Plot feature importance": [[156, "plot-feature-importance"]], "Gradient Boosting regularization": [[157, "gradient-boosting-regularization"]], "Features in Histogram Gradient Boosting Trees": [[158, "features-in-histogram-gradient-boosting-trees"]], "Effect of number of trees and early stopping": [[158, "effect-of-number-of-trees-and-early-stopping"]], "Support for missing values": [[158, "support-for-missing-values"]], "Support for quantile loss": [[158, "support-for-quantile-loss"]], "Monotonic constraints": [[158, "monotonic-constraints"]], "IsolationForest example": [[159, "isolationforest-example"]], "Training of the model": [[159, "training-of-the-model"]], "Plot discrete decision boundary": [[159, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[159, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[160, "monotonic-constraints"], [421, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[160, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[161, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[162, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[163, "combine-predictors-using-stacking"]], "Download the dataset": [[163, "download-the-dataset"]], "Make pipeline to preprocess the data": [[163, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[163, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[163, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[164, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[165, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[166, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[166, "training-classifiers"]], "Making predictions": [[166, "making-predictions"]], "Tutorial exercises": [[167, "tutorial-exercises"], [192, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[168, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[168, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[168, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[168, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Digits Classification Exercise": [[169, "digits-classification-exercise"]], "SVM Exercise": [[170, "svm-exercise"]], "Feature Selection": [[171, "feature-selection"], [192, "feature-selection"]], "Comparison of F-test and mutual information": [[172, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[173, "univariate-feature-selection"]], "Univariate feature selection": [[173, "id1"], [423, "univariate-feature-selection"]], "Compare with SVMs": [[173, "compare-with-svms"]], "Pipeline ANOVA SVM": [[174, "pipeline-anova-svm"]], "Recursive feature elimination": [[175, "recursive-feature-elimination"], [423, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[176, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[176, "model-training-and-selection"], [271, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[176, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[177, "model-based-and-sequential-feature-selection"]], "Loading the data": [[177, "loading-the-data"]], "Feature importance from coefficients": [[177, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[177, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[177, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[177, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[178, "gaussian-process-for-machine-learning"], [192, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[179, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[179, "generating-a-dataset"]], "Limitations of a simple linear model": [[179, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[179, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[179, "kernel-ridge"]], "Gaussian process regression": [[179, "gaussian-process-regression"]], "Final conclusion": [[179, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[180, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[181, "gaussian-process-classification-gpc-on-iris-dataset"], [424, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[182, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[183, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[184, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[184, "build-the-dataset"]], "Design the proper kernel": [[184, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[184, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[184, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[185, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[185, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[186, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[186, "dataset-generation"], [225, "dataset-generation"]], "Example with noise-free target": [[186, "example-with-noise-free-target"]], "Example with noisy targets": [[186, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[187, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[187, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[187, "regression"], [990, "regression"], [998, "regression"], [1008, "regression"], [1009, "regression"], [1010, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[188, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[188, "helper-function"]], "Dataset and Gaussian process generation": [[188, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[188, "kernel-cookbook"]], "Radial Basis Function kernel": [[188, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[188, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[188, "exp-sine-squared-kernel"], [424, "exp-sine-squared-kernel"]], "Dot-product kernel": [[188, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[188, "matern-kernel"], [424, "matern-kernel"]], "Missing Value Imputation": [[189, "missing-value-imputation"], [192, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[190, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[191, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[191, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[191, "impute-the-missing-data-and-score"]], "Missing information": [[191, "missing-information"]], "Estimate the score": [[191, "estimate-the-score"]], "Replace missing values by 0": [[191, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[191, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[191, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[191, "iterative-imputation-of-the-missing-values"]], "Examples": [[192, "examples"], [376, "examples"], [1035, "examples"]], "Release Highlights": [[192, "release-highlights"], [328, "release-highlights"]], "Decision Trees": [[192, "decision-trees"], [364, "decision-trees"], [1010, "decision-trees"]], "Gaussian Mixture Models": [[192, "gaussian-mixture-models"], [265, "gaussian-mixture-models"]], "Generalized Linear Models": [[192, "generalized-linear-models"], [201, "generalized-linear-models"], [990, "generalized-linear-models"]], "Inspection": [[192, "inspection"], [193, "inspection"], [404, "inspection"]], "Kernel Approximation": [[192, "kernel-approximation"], [199, "kernel-approximation"], [986, "kernel-approximation"]], "Manifold learning": [[192, "manifold-learning"], [242, "manifold-learning"], [991, "manifold-learning"]], "Model Selection": [[192, "model-selection"], [273, "model-selection"]], "Multiclass methods": [[192, "multiclass-methods"], [296, "multiclass-methods"]], "Multioutput methods": [[192, "multioutput-methods"], [298, "multioutput-methods"]], "Nearest Neighbors": [[192, "nearest-neighbors"], [301, "nearest-neighbors"], [997, "nearest-neighbors"]], "Neural Networks": [[192, "neural-networks"], [314, "neural-networks"]], "Preprocessing": [[192, "preprocessing"], [319, "preprocessing"]], "Semi Supervised Classification": [[192, "semi-supervised-classification"], [337, "semi-supervised-classification"]], "Support Vector Machines": [[192, "support-vector-machines"], [344, "support-vector-machines"], [1009, "support-vector-machines"]], "Working with text documents": [[192, "working-with-text-documents"], [360, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[194, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[194, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[194, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[194, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[194, "income-prediction-with-partial-observations"]], "Lessons learned": [[194, "lessons-learned"], [195, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[195, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[195, "the-dataset-wages"]], "The machine-learning pipeline": [[195, "the-machine-learning-pipeline"]], "Processing the dataset": [[195, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[195, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[195, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[195, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[195, "preprocessing-numerical-variables"]], "Linear models with regularization": [[195, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[195, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[195, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[196, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[196, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[196, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[196, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[196, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[196, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[196, "multi-layer-perceptron"]], "Gradient boosting": [[196, "gradient-boosting"]], "Analysis of the plots": [[196, "analysis-of-the-plots"]], "ICE vs. PDP": [[196, "ice-vs-pdp"]], "2D interaction plots": [[196, "d-interaction-plots"]], "3D representation": [[196, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[197, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[197, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[197, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[197, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[198, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[198, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[198, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[200, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[200, "partitioning-the-data"]], "Feature normalization": [[200, "feature-normalization"]], "Establishing a baseline model": [[200, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[200, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[200, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[200, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[202, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[202, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[202, "fit-the-regressors"], [202, "id2"]], "Plot the true and estimated coefficients": [[202, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[202, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[202, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[202, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[203, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[203, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[203, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[203, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[204, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[205, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[206, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[207, "l1-based-models-for-sparse-signals"]], "Lasso": [[207, "lasso"], [657, "lasso"], [990, "lasso"]], "Automatic Relevance Determination (ARD)": [[207, "automatic-relevance-determination-ard"]], "ElasticNet": [[207, "elasticnet"], [651, "elasticnet"]], "Plot and analysis of the results": [[207, "plot-and-analysis-of-the-results"]], "Conclusions": [[207, "conclusions"]], "Lasso and Elastic Net": [[208, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[209, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[209, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[209, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[210, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[211, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[212, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[212, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[212, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[212, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[212, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[212, "summary-of-cross-validation-approach"]], "Logistic function": [[213, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[214, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[215, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[216, "regularization-path-of-l1-logistic-regression"]], "Load data": [[216, "load-data"]], "Compute regularization path": [[216, "compute-regularization-path"]], "Plot regularization path": [[216, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[217, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[217, "fit-models"], [299, "fit-models"]], "Plot support and time series": [[217, "plot-support-and-time-series"]], "Non-negative least squares": [[218, "non-negative-least-squares"]], "Linear Regression Example": [[219, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[220, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[221, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[222, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[223, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[223, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[223, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[223, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[223, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[223, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[223, "evaluation-of-the-ranking-power"]], "Main takeaways": [[223, "main-takeaways"]], "Polynomial and Spline interpolation": [[224, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[224, "periodic-splines"]], "Quantile regression": [[225, "quantile-regression"]], "Fitting a QuantileRegressor": [[225, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[225, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[226, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[227, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[227, "purpose-of-this-example"]], "Creating a non-noisy data set": [[227, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[227, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[227, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[227, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[228, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[228, "compute-paths"]], "Display results": [[228, "display-results"]], "Robust linear estimator fitting": [[229, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[230, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[231, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[232, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[233, "sgd-convex-loss-functions"]], "SGD: Penalties": [[234, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[235, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[236, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[237, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[238, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[239, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[240, "theil-sen-regression"]], "Outliers only in the y direction": [[240, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[240, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[241, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[241, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[241, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[241, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[241, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[243, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[243, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[243, "locally-linear-embeddings"]], "Isomap Embedding": [[243, "isomap-embedding"]], "Multidimensional scaling": [[243, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[243, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[243, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[244, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[244, "load-digits-dataset"]], "Helper function to plot embedding": [[244, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[244, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[245, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[246, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[247, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[247, "swiss-roll"]], "Swiss-Hole": [[247, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[248, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[250, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[251, "visualizations-with-display-objects"]], "Load Data and train model": [[251, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[251, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[251, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[251, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[251, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[252, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[252, "compact-text-representation"]], "Rich HTML representation": [[252, "rich-html-representation"]], "Isotonic Regression": [[253, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[254, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[254, "theoretical-bounds"]], "Empirical validation": [[254, "empirical-validation"]], "Remarks": [[254, "remarks"]], "Explicit feature map approximation for RBF kernels": [[255, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[255, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[255, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[255, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[256, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[256, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[256, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[256, "look-at-the-results"], [356, "look-at-the-results"]], "Visualize training and prediction times": [[256, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[256, "visualize-the-learning-curves"]], "Metadata Routing": [[257, "metadata-routing"], [335, "metadata-routing"], [401, "metadata-routing"], [406, "metadata-routing"], [1052, "metadata-routing"], [1052, "id1"], [1052, "id4"], [1053, "metadata-routing"], [1053, "id1"]], "Estimators": [[257, "estimators"], [370, "estimators"], [370, "id2"], [389, "estimators"], [411, "estimators"]], "Router and Consumer": [[257, "router-and-consumer"]], "Simple Pipeline": [[257, "simple-pipeline"]], "Deprecation / Default Value Change": [[257, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[257, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[258, "multilabel-classification"], [995, "multilabel-classification"]], "Face completion with a multi-output estimators": [[259, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[260, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[260, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[260, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[260, "forest-covertypes-dataset"]], "Ames Housing dataset": [[260, "ames-housing-dataset"]], "Cardiotocography dataset": [[260, "cardiotocography-dataset"]], "Plot and interpret results": [[260, "plot-and-interpret-results"]], "Ablation study": [[260, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[261, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[261, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[261, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[261, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[261, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[262, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[262, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[262, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[262, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[262, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[262, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[263, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[263, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[263, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[263, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[264, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[266, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[267, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[268, "gmm-covariances"]], "GMM Initialization Methods": [[269, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[270, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[271, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[271, "plot-the-bic-scores"]], "Plot the best model": [[271, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[272, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[274, "confusion-matrix"], [994, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[275, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[275, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[275, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[275, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[276, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[277, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[277, "generate-synthetic-data"]], "Define the classifiers": [[277, "define-the-classifiers"]], "Plot ROC and DET curves": [[277, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[278, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[278, "the-dataset"]], "Define our grid-search strategy": [[278, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[278, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[279, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[280, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[280, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[280, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[280, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[280, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[280, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[280, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[281, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[281, "data-loading"]], "Pipeline with hyperparameter tuning": [[281, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[282, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[282, "learning-curve"]], "Complexity analysis": [[282, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[283, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[283, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[283, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[283, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[284, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[284, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[284, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[285, "nested-versus-non-nested-cross-validation"]], "Test with permutations the significance of a classification score": [[286, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[286, "permutation-test-score"], [418, "permutation-test-score"]], "Original data": [[286, "original-data"], [320, "original-data"]], "Random data": [[286, "random-data"]], "Precision-Recall": [[287, "precision-recall"]], "In binary classification settings": [[287, "in-binary-classification-settings"]], "Dataset and model": [[287, "dataset-and-model"]], "Plot the Precision-Recall curve": [[287, "plot-the-precision-recall-curve"]], "In multi-label settings": [[287, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[287, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[287, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[287, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[287, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[288, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[289, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[289, "load-and-prepare-data"], [290, "load-and-prepare-data"], [325, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[289, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[289, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[289, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[289, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[289, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[289, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[289, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[289, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[290, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[290, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[291, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[292, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[292, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[293, "train-error-vs-test-error"]], "Compute train and test errors": [[293, "compute-train-and-test-errors"]], "Plot results functions": [[293, "plot-results-functions"]], "Underfitting vs. Overfitting": [[294, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[295, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[297, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[297, "the-yeast-uci-dataset"]], "Strategies comparison": [[297, "strategies-comparison"]], "The importance of hyperparameters search": [[297, "the-importance-of-hyperparameters-search"]], "Multilabel classification using a classifier chain": [[299, "multilabel-classification-using-a-classifier-chain"]], "Loading a dataset": [[299, "loading-a-dataset"]], "LogisticRegression wrapped by OneVsRestClassifier": [[299, "logisticregression-wrapped-by-onevsrestclassifier"]], "Chain of binary classifiers": [[299, "chain-of-binary-classifiers"]], "Results interpretation": [[299, "results-interpretation"]], "Approximate nearest neighbors in TSNE": [[300, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[302, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[303, "nearest-neighbors-classification"], [997, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[303, "k-nearest-neighbors-classifier"]], "Decision boundary": [[303, "decision-boundary"]], "Kernel Density Estimation": [[304, "kernel-density-estimation"], [420, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[305, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[306, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[307, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[307, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[307, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[308, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[309, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[310, "neighborhood-components-analysis-illustration"]], "Original points": [[310, "original-points"]], "Learning an embedding": [[310, "learning-an-embedding"]], "Nearest Centroid Classification": [[311, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[312, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[313, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[315, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[316, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[317, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[318, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[318, "models-definition"]], "Training": [[318, "training"], [997, "training"]], "Compare the effect of different scalers on data with outliers": [[320, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[320, "standardscaler"], [886, "standardscaler"]], "MinMaxScaler": [[320, "minmaxscaler"], [876, "minmaxscaler"]], "MaxAbsScaler": [[320, "maxabsscaler"], [875, "maxabsscaler"]], "RobustScaler": [[320, "robustscaler"], [884, "robustscaler"]], "PowerTransformer": [[320, "powertransformer"], [882, "powertransformer"]], "QuantileTransformer (uniform output)": [[320, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[320, "quantiletransformer-gaussian-output"]], "Normalizer": [[320, "normalizer"], [878, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[321, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[322, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[323, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[324, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[325, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[325, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[325, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[325, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[326, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[326, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[326, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[326, "native-categorical-feature-support"]], "Plotting the Results": [[326, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[327, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[327, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[327, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[329, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[329, "new-plotting-api"]], "Stacking Classifier and Regressor": [[329, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[329, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[329, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[329, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[329, "knn-based-imputation"]], "Tree pruning": [[329, "tree-pruning"]], "Retrieve dataframes from OpenML": [[329, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[329, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[329, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[330, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[330, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[330, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[330, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[330, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[330, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[331, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[331, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[331, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[331, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[331, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[331, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[331, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[331, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[331, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[331, "new-documentation-improvements"], [332, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[332, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[332, "keyword-and-positional-arguments"]], "Spline Transformers": [[332, "spline-transformers"]], "Quantile Regressor": [[332, "quantile-regressor"]], "Feature Names Support": [[332, "feature-names-support"]], "A more flexible plotting API": [[332, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[332, "online-one-class-svm"], [1008, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[332, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[333, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[333, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[333, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[333, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[333, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[333, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[333, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[334, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[334, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[334, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[334, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[334, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[334, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[334, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[335, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[335, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[335, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[335, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[335, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[335, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[335, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Release Highlights for scikit-learn 1.4": [[336, "release-highlights-for-scikit-learn-1-4"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[336, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Polars output in set_output": [[336, "polars-output-in-set-output"]], "Missing value support for Random Forest": [[336, "missing-value-support-for-random-forest"]], "Add support for monotonic constraints in tree-based models": [[336, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Enriched estimator displays": [[336, "enriched-estimator-displays"]], "Metadata Routing Support": [[336, "metadata-routing-support"]], "Improved memory and runtime efficiency for PCA on sparse data": [[336, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Label Propagation digits: Demonstrating performance": [[338, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[338, "semi-supervised-learning"], [1007, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[338, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[339, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[340, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[341, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[342, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[343, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[345, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[346, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[347, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[348, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[349, "rbf-svm-parameters"]], "Load and prepare data set": [[349, "load-and-prepare-data-set"]], "Train classifiers": [[349, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[350, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[351, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[352, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[352, "load-some-data-to-play-with"]], "Create the pipeline": [[352, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[352, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[353, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[353, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[353, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[353, "linear-kernel"], [992, "linear-kernel"], [1026, "linear-kernel"]], "Polynomial kernel": [[353, "polynomial-kernel"], [992, "polynomial-kernel"], [1026, "polynomial-kernel"]], "RBF kernel": [[353, "rbf-kernel"], [992, "rbf-kernel"]], "Sigmoid kernel": [[353, "sigmoid-kernel"], [992, "sigmoid-kernel"], [1026, "sigmoid-kernel"]], "SVM Margins Example": [[354, "svm-margins-example"]], "Non-linear SVM": [[355, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[356, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[357, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[357, "l1-penalty-case"]], "L2-penalty case": [[357, "l2-penalty-case"]], "SVM Tie Breaking Example": [[358, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[359, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[361, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[361, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[361, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[361, "model-without-metadata-stripping"]], "Model with metadata stripping": [[361, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[361, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[361, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[362, "clustering-text-documents-using-k-means"]], "Loading text data": [[362, "loading-text-data"]], "Quantifying the quality of clustering results": [[362, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[362, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[362, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[362, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[362, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[362, "top-terms-per-cluster"]], "HashingVectorizer": [[362, "hashingvectorizer"], [594, "hashingvectorizer"]], "Clustering evaluation summary": [[362, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[363, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[363, "load-data"]], "Define preprocessing functions": [[363, "define-preprocessing-functions"]], "DictVectorizer": [[363, "dictvectorizer"], [586, "dictvectorizer"]], "FeatureHasher": [[363, "featurehasher"], [587, "featurehasher"]], "Comparison with special purpose text vectorizers": [[363, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[363, "tfidfvectorizer"], [596, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[365, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[365, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[365, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[366, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[367, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[368, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[369, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[369, "train-tree-classifier"]], "Tree structure": [[369, "tree-structure"]], "What is the values array used here?": [[369, "what-is-the-values-array-used-here"]], "Decision path": [[369, "decision-path"]], "Common pitfalls and recommended practices": [[370, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[370, "inconsistent-preprocessing"]], "Data leakage": [[370, "data-leakage"]], "How to avoid data leakage": [[370, "how-to-avoid-data-leakage"]], "Data leakage during pre-processing": [[370, "data-leakage-during-pre-processing"]], "Controlling randomness": [[370, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[370, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[370, "cv-splitters"], [370, "id3"]], "Common pitfalls and subtleties": [[370, "common-pitfalls-and-subtleties"]], "General recommendations": [[370, "general-recommendations"]], "Getting reproducible results across multiple executions": [[370, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[370, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[373, "computing-with-scikit-learn"]], "Computational Performance": [[374, "computational-performance"]], "Bulk versus Atomic mode": [[374, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[374, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[374, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[374, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[374, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[374, "feature-extraction-latency"]], "Prediction Throughput": [[374, "prediction-throughput"]], "Tips and Tricks": [[374, "tips-and-tricks"]], "Linear algebra libraries": [[374, "linear-algebra-libraries"]], "Limiting Working Memory": [[374, "limiting-working-memory"]], "Model Compression": [[374, "model-compression"]], "Model Reshaping": [[374, "model-reshaping"]], "Links": [[374, "links"]], "Parallelism, resource management, and configuration": [[375, "parallelism-resource-management-and-configuration"]], "Parallelism": [[375, "parallelism"], [983, "parallelism"]], "Higher-level parallelism with joblib": [[375, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[375, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[375, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[375, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[375, "configuration-switches"]], "Python API": [[375, "python-api"]], "Environment variables": [[375, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[375, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[375, "sklearn-working-memory"]], "SKLEARN_SEED": [[375, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[375, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[375, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[375, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[375, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[375, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[375, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_WARNINGS_AS_ERRORS": [[375, "sklearn-warnings-as-errors"]], "Strategies to scale computationally: bigger data": [[376, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[376, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[376, "streaming-instances"]], "Extracting features": [[376, "extracting-features"]], "Incremental learning": [[376, "incremental-learning"]], "Notes": [[376, "notes"]], "Dataset transformations": [[379, "dataset-transformations"]], "Dataset loading utilities": [[380, "dataset-loading-utilities"], [392, "dataset-loading-utilities"]], "Loading other datasets": [[381, "loading-other-datasets"]], "Sample images": [[381, "sample-images"]], "Datasets in svmlight / libsvm format": [[381, "datasets-in-svmlight-libsvm-format"]], "Downloading datasets from the openml.org repository": [[381, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[381, "dataset-versions"]], "ARFF parser": [[381, "arff-parser"]], "Loading from external datasets": [[381, "loading-from-external-datasets"], [1019, null]], "Real world datasets": [[382, "real-world-datasets"]], "The Olivetti faces dataset": [[382, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[382, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[382, null]], "Recommendation": [[382, null]], "The Labeled Faces in the Wild face recognition dataset": [[382, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[382, "forest-covertypes"]], "RCV1 dataset": [[382, "rcv1-dataset"]], "Kddcup 99 dataset": [[382, "kddcup-99-dataset"]], "California Housing dataset": [[382, "california-housing-dataset"]], "Species distribution dataset": [[382, "species-distribution-dataset"]], "Generated datasets": [[383, "generated-datasets"]], "Generators for classification and clustering": [[383, "generators-for-classification-and-clustering"]], "Single label": [[383, "single-label"]], "Multilabel": [[383, "multilabel"]], "Generators for regression": [[383, "generators-for-regression"]], "Generators for manifold learning": [[383, "generators-for-manifold-learning"]], "Generators for decomposition": [[383, "generators-for-decomposition"]], "Toy datasets": [[384, "toy-datasets"]], "Iris plants dataset": [[384, "iris-plants-dataset"]], "Diabetes dataset": [[384, "diabetes-dataset"], [1026, null]], "Optical recognition of handwritten digits dataset": [[384, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[384, "linnerrud-dataset"]], "Wine recognition dataset": [[384, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[384, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[385, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[385, "installing-nightly-builds"]], "Building from source": [[385, "building-from-source"]], "Dependencies": [[385, "dependencies"]], "Runtime dependencies": [[385, "runtime-dependencies"]], "Build dependencies": [[385, "build-dependencies"]], "Test dependencies": [[385, "test-dependencies"]], "Building a specific version from a tag": [[385, "building-a-specific-version-from-a-tag"]], "Editable mode": [[385, "editable-mode"]], "Building with Meson": [[385, "building-with-meson"]], "Simplest way to build with Meson": [[385, "simplest-way-to-build-with-meson"]], "More advanced way to build with Meson": [[385, "more-advanced-way-to-build-with-meson"]], "Platform-specific instructions": [[385, "platform-specific-instructions"]], "Windows": [[385, "windows"]], "macOS": [[385, "macos"]], "macOS compilers from conda-forge": [[385, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[385, "macos-compilers-from-homebrew"]], "Linux": [[385, "linux"]], "Linux compilers from the system": [[385, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[385, "linux-compilers-from-conda-forge"]], "FreeBSD": [[385, "freebsd"]], "Alternative compilers": [[385, "alternative-compilers"]], "Parallel builds": [[385, "parallel-builds"]], "Bug triaging and issue curation": [[386, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[386, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[386, null]], "Working on PRs to help review": [[386, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[386, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[386, null]], "A typical workflow for triaging issues": [[386, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[387, "contributing"], [399, "contributing"]], "Our community, our values": [[387, null]], "Ways to contribute": [[387, "ways-to-contribute"]], "Contributing to related projects": [[387, null]], "Submitting a bug report or a feature request": [[387, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[387, "how-to-make-a-good-bug-report"]], "Contributing code": [[387, "contributing-code"]], "Video resources": [[387, "video-resources"]], "How to contribute": [[387, "how-to-contribute"]], "Learning git:": [[387, null]], "Pull request checklist": [[387, "pull-request-checklist"]], "Continuous Integration (CI)": [[387, "continuous-integration-ci"]], "Stalled pull requests": [[387, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[387, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[387, "issues-for-new-contributors"]], "good first issue tag": [[387, null]], "Easy tag": [[387, null]], "help wanted tag": [[387, null]], "Documentation": [[387, "documentation"], [1035, "documentation"]], "Building the documentation": [[387, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[387, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[387, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[387, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[387, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[387, "monitoring-performance"]], "Issue Tracker Tags": [[387, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[387, "maintaining-backwards-compatibility"]], "Deprecation": [[387, "deprecation"]], "Change the default value of a parameter": [[387, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[387, "code-review-guidelines"]], "Communication Guidelines": [[387, "communication-guidelines"]], "Reading the existing code base": [[387, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[388, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[388, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[388, "tips-to-ease-development"]], "Tips for performance": [[388, "tips-for-performance"]], "Using OpenMP": [[388, "using-openmp"]], "Developing scikit-learn estimators": [[389, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[389, "apis-of-scikit-learn-objects"]], "Different objects": [[389, "different-objects"]], "Instantiation": [[389, "instantiation"]], "Fitting": [[389, "fitting"]], "Estimated Attributes": [[389, "estimated-attributes"]], "Optional Arguments": [[389, "optional-arguments"]], "Universal attributes": [[389, "universal-attributes"]], "Rolling your own estimator": [[389, "rolling-your-own-estimator"]], "Project template:": [[389, null]], "BaseEstimator and mixins:": [[389, null]], "get_params and set_params": [[389, "get-params-and-set-params"]], "Parameters and init": [[389, "parameters-and-init"]], "Cloning": [[389, "cloning"]], "Pipeline compatibility": [[389, "pipeline-compatibility"]], "Estimator types": [[389, "estimator-types"]], "Specific models": [[389, "specific-models"]], "Estimator Tags": [[389, "estimator-tags"]], "Developer API for set_output": [[389, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[389, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[389, "developer-api-for-html-representation"]], "Coding guidelines": [[389, "coding-guidelines"]], "Input validation": [[389, "input-validation"]], "Random Numbers": [[389, "random-numbers"]], "Numerical assertions in tests": [[389, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[390, "developer-s-guide"]], "Maintainer / core-developer information": [[391, "maintainer-core-developer-information"]], "Releasing": [[391, "releasing"]], "Before a release": [[391, "before-a-release"]], "Preparing a release PR": [[391, "preparing-a-release-pr"]], "Major version release": [[391, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[391, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[391, "making-a-release"]], "Release checklist": [[391, "release-checklist"]], "Merging Pull Requests": [[391, "merging-pull-requests"]], "The scikit-learn.org web site": [[391, "the-scikit-learn-org-web-site"]], "Experimental features": [[391, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[392, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[392, "good-practices"]], "Provide a failing code example with minimal comments": [[392, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[392, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[392, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[392, "use-markdown-formatting"]], "Synthetic dataset": [[392, "synthetic-dataset"]], "NumPy": [[392, "numpy"]], "Pandas": [[392, "pandas"]], "make_regression": [[392, "make-regression"], [529, "make-regression"]], "make_classification": [[392, "make-classification"], [520, "make-classification"]], "make_blobs": [[392, "make-blobs"], [517, "make-blobs"]], "How to optimize for speed": [[393, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[393, "python-cython-or-c-c"]], "Profiling Python code": [[393, "profiling-python-code"]], "Memory usage profiling": [[393, "memory-usage-profiling"]], "Using Cython": [[393, "using-cython"]], "Profiling compiled extensions": [[393, "profiling-compiled-extensions"]], "Using yep and gperftools": [[393, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[393, "using-a-debugger-gdb"]], "Using gprof": [[393, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[393, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[393, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[393, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[393, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[394, "developing-with-the-plotting-api"]], "Plotting API Overview": [[394, "plotting-api-overview"]], "Plotting with Multiple Axes": [[394, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[395, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[395, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[395, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[395, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[395, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[395, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[395, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[395, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[395, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[396, "utilities-for-developers"]], "Validation Tools": [[396, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[396, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[396, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[396, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[396, "graph-routines"]], "Testing Functions": [[396, "testing-functions"]], "Multiclass and multilabel utility function": [[396, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[396, "helper-functions"]], "Hash Functions": [[396, "hash-functions"]], "Warnings and Exceptions": [[396, "warnings-and-exceptions"]], "Dispatching": [[397, "dispatching"]], "Frequently Asked Questions": [[399, "frequently-asked-questions"]], "Table of Contents": [[399, "table-of-contents"]], "About the project": [[399, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[399, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[399, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[399, "why-scikit"]], "Do you support PyPy?": [[399, "do-you-support-pypy"]], "Implementation decisions": [[399, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[399, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[399, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[399, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[399, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[399, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[399, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[399, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[399, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[399, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[399, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms?": [[399, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[399, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[399, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[399, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[399, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[399, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[399, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[399, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[399, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[399, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[399, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[400, "getting-started"]], "Fitting and predicting: estimator basics": [[400, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[400, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[400, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[400, "model-evaluation"]], "Automatic parameter searches": [[400, "automatic-parameter-searches"]], "Next steps": [[400, "next-steps"]], "Glossary of Common Terms and API Elements": [[401, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[401, "general-concepts"]], "Class APIs and Estimator Types": [[401, "class-apis-and-estimator-types"]], "Target Types": [[401, "target-types"]], "Methods": [[401, "methods"]], "Parameters": [[401, "parameters"], [421, "parameters"]], "Attributes": [[401, "attributes"]], "Data and sample properties": [[401, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[402, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[402, "roles-and-responsibilities"]], "Contributors": [[402, "contributors"]], "Core Contributors": [[402, "core-contributors"]], "Communication team": [[402, "communication-team"]], "Documentation team": [[402, "documentation-team"]], "Maintainers": [[402, "maintainers"]], "Technical Committee": [[402, "technical-committee"]], "Decision Making Process": [[402, "decision-making-process"]], "Governance Model Changes": [[402, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[402, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[405, "installing-scikit-learn"]], "Installing the latest release": [[405, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[405, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[405, "alpine-linux"]], "Arch Linux": [[405, "arch-linux"]], "Debian/Ubuntu": [[405, "debian-ubuntu"]], "Fedora": [[405, "fedora"]], "NetBSD": [[405, "netbsd"]], "MacPorts for Mac OSX": [[405, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[405, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[405, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[405, "winpython-for-windows"]], "Troubleshooting": [[405, "troubleshooting"]], "Error caused by file path length limit on Windows": [[405, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[406, "usage-examples"]], "Weighted scoring and fitting": [[406, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[406, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[406, "unweighted-feature-selection"]], "Different scoring and fitting weights": [[406, "different-scoring-and-fitting-weights"]], "API Interface": [[406, "api-interface"]], "Metadata Routing Support Status": [[406, "metadata-routing-support-status"]], "Model persistence": [[409, "model-persistence"]], "Python specific serialization": [[409, "python-specific-serialization"]], "Security & maintainability limitations": [[409, "security-maintainability-limitations"]], "A more secure format: skops": [[409, "a-more-secure-format-skops"]], "Interoperable formats": [[409, "interoperable-formats"]], "Model selection and evaluation": [[410, "model-selection-and-evaluation"]], "Array API support (experimental)": [[411, "array-api-support-experimental"]], "Example usage": [[411, "example-usage"]], "PyTorch Support": [[411, "pytorch-support"]], "Support for Array API-compatible inputs": [[411, "support-for-array-api-compatible-inputs"]], "Metrics": [[411, "metrics"]], "Tools": [[411, "tools"]], "Common estimator checks": [[411, "common-estimator-checks"]], "Note on MPS device support": [[411, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[412, "spectral-co-clustering"]], "Mathematical formulation": [[412, "mathematical-formulation"], [412, "id3"], [421, "mathematical-formulation"], [997, "mathematical-formulation"], [1008, "mathematical-formulation"], [1009, "mathematical-formulation"], [1010, "mathematical-formulation"]], "Spectral Biclustering": [[412, "spectral-biclustering"]], "Biclustering evaluation": [[412, "biclustering-evaluation"]], "Probability calibration": [[413, "probability-calibration"]], "Calibrating a classifier": [[413, "calibrating-a-classifier"]], "Usage": [[413, "usage"], [415, "usage"], [415, "id1"], [421, "usage"], [421, "id22"], [421, "id23"], [421, "id25"], [421, "id33"], [990, "usage"]], "Sigmoid": [[413, "sigmoid"]], "Isotonic": [[413, "isotonic"]], "Multiclass support": [[413, "multiclass-support"]], "Input data": [[414, null]], "Overview of clustering methods": [[414, "overview-of-clustering-methods"]], "K-means": [[414, "k-means"]], "Low-level parallelism": [[414, "low-level-parallelism"], [421, "low-level-parallelism"]], "Mini Batch K-Means": [[414, "mini-batch-k-means"]], "Affinity Propagation": [[414, "affinity-propagation"]], "Mean Shift": [[414, "mean-shift"]], "Spectral clustering": [[414, "spectral-clustering"]], "Different label assignment strategies": [[414, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[414, "spectral-clustering-graphs"]], "Hierarchical clustering": [[414, "hierarchical-clustering"]], "FeatureAgglomeration": [[414, null], [450, "featureagglomeration"]], "Different linkage type: Ward, complete, average, and single linkage": [[414, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[414, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[414, "adding-connectivity-constraints"]], "Varying the metric": [[414, "varying-the-metric"]], "Bisecting K-Means": [[414, "bisecting-k-means"]], "DBSCAN": [[414, "dbscan"], [449, "dbscan"]], "HDBSCAN": [[414, "hdbscan"], [451, "hdbscan"]], "Mutual Reachability Graph": [[414, "mutual-reachability-graph"]], "Hierarchical Clustering": [[414, "id11"]], "OPTICS": [[414, "optics"], [455, "optics"]], "BIRCH": [[414, "birch"]], "Clustering performance evaluation": [[414, "clustering-performance-evaluation"]], "Rand index": [[414, "rand-index"]], "Advantages:": [[414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null]], "Drawbacks:": [[414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null]], "Mutual Information based scores": [[414, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[414, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[414, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[414, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[414, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[414, "davies-bouldin-index"]], "Contingency Matrix": [[414, "contingency-matrix"]], "Pair Confusion Matrix": [[414, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[415, "pipeline-chaining-estimators"]], "Build a pipeline": [[415, "build-a-pipeline"]], "Access pipeline steps": [[415, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[415, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[415, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[415, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[415, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[415, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[415, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[415, "visualizing-composite-estimators"]], "Empirical covariance": [[416, "empirical-covariance"]], "Shrunk Covariance": [[416, "shrunk-covariance"]], "Basic shrinkage": [[416, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[416, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[416, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[416, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[416, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[416, "minimum-covariance-determinant"]], "PLSCanonical": [[417, "plscanonical"], [488, "plscanonical"]], "PLSSVD": [[417, "plssvd"], [490, "plssvd"]], "PLSRegression": [[417, "plsregression"], [489, "plsregression"]], "Canonical Correlation Analysis": [[417, "canonical-correlation-analysis"]], "Cross-validation: evaluating estimator performance": [[418, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[418, "computing-cross-validated-metrics"]], "The cross_validate function and multiple metric evaluation": [[418, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[418, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[418, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[418, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[418, "k-fold"]], "Repeated K-Fold": [[418, "repeated-k-fold"]], "Leave One Out (LOO)": [[418, "leave-one-out-loo"]], "Leave P Out (LPO)": [[418, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[418, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels": [[418, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[418, "stratified-k-fold"]], "Stratified Shuffle Split": [[418, "stratified-shuffle-split"]], "Predefined fold-splits / Validation-sets": [[418, "predefined-fold-splits-validation-sets"]], "Cross-validation iterators for grouped data": [[418, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[418, "group-k-fold"]], "StratifiedGroupKFold": [[418, "stratifiedgroupkfold"], [821, "stratifiedgroupkfold"]], "Leave One Group Out": [[418, "leave-one-group-out"]], "Leave P Groups Out": [[418, "leave-p-groups-out"]], "Group Shuffle Split": [[418, "group-shuffle-split"]], "Using cross-validation iterators to split train and test": [[418, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[418, "cross-validation-of-time-series-data"]], "Time Series Split": [[418, "time-series-split"]], "A note on shuffling": [[418, "a-note-on-shuffling"]], "Cross validation and model selection": [[418, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[419, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[419, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[419, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[419, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[419, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[419, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[419, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[419, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[419, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[419, "dictionary-learning"]], "Generic dictionary learning": [[419, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[419, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[419, null]], "Factor Analysis": [[419, "factor-analysis"]], "Independent component analysis (ICA)": [[419, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[419, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[419, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[419, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[419, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[419, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[420, "density-estimation"]], "Density Estimation: Histograms": [[420, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[421, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[421, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[421, null]], "Histogram-Based Gradient Boosting": [[421, "histogram-based-gradient-boosting"]], "Missing values support": [[421, "missing-values-support"]], "Sample weight support": [[421, "sample-weight-support"]], "Categorical Features Support": [[421, "categorical-features-support"]], "Interaction constraints": [[421, "interaction-constraints"]], "Why it\u2019s faster": [[421, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[421, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[421, "fitting-additional-weak-learners"]], "Controlling the tree size": [[421, "controlling-the-tree-size"]], "Loss Functions": [[421, "loss-functions"]], "Shrinkage via learning rate": [[421, "shrinkage-via-learning-rate"]], "Subsampling": [[421, "subsampling"]], "Interpretation with feature importance": [[421, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[421, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[421, "random-forests"]], "Extremely Randomized Trees": [[421, "extremely-randomized-trees"]], "Parallelization": [[421, "parallelization"]], "Feature importance evaluation": [[421, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[421, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[421, "bagging-meta-estimator"]], "Voting Classifier": [[421, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[421, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[421, "weighted-average-probabilities-soft-voting"]], "Voting Regressor": [[421, "voting-regressor"]], "Stacked generalization": [[421, "stacked-generalization"]], "AdaBoost": [[421, "adaboost"]], "Feature extraction": [[422, "feature-extraction"]], "Loading features from dicts": [[422, "loading-features-from-dicts"]], "Feature hashing": [[422, "feature-hashing"]], "Text feature extraction": [[422, "text-feature-extraction"]], "The Bag of Words representation": [[422, "the-bag-of-words-representation"]], "Sparsity": [[422, "sparsity"], [1026, "sparsity"]], "Common Vectorizer usage": [[422, "common-vectorizer-usage"]], "Using stop words": [[422, "using-stop-words"]], "Tf\u2013idf term weighting": [[422, "tfidf-term-weighting"]], "Decoding text files": [[422, "decoding-text-files"]], "Applications and examples": [[422, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[422, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[422, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[422, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[422, "image-feature-extraction"]], "Patch extraction": [[422, "patch-extraction"]], "Connectivity graph of an image": [[422, "connectivity-graph-of-an-image"]], "Feature selection": [[423, "feature-selection"]], "Removing features with low variance": [[423, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[423, null]], "Feature selection using SelectFromModel": [[423, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[423, "l1-based-feature-selection"]], "Tree-based feature selection": [[423, "tree-based-feature-selection"]], "Sequential Feature Selection": [[423, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[423, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[424, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[424, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[424, "gaussian-process-classification-gpc"]], "GPC examples": [[424, "gpc-examples"]], "Probabilistic predictions with GPC": [[424, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[424, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[424, "kernels-for-gaussian-processes"]], "Basic kernels": [[424, "basic-kernels"]], "Kernel operators": [[424, "kernel-operators"]], "Radial basis function (RBF) kernel": [[424, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[424, "rational-quadratic-kernel"]], "Dot-Product kernel": [[424, "dot-product-kernel"]], "dbscan": [[425, "dbscan"]], "fastica": [[426, "fastica"]], "oas": [[427, "oas"]], "BaseEstimator": [[428, "baseestimator"]], "Gallery examples": [[428, "gallery-examples"], [431, "gallery-examples"], [434, "gallery-examples"], [437, "gallery-examples"], [438, "gallery-examples"], [442, "gallery-examples"], [443, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [458, "gallery-examples"], [459, "gallery-examples"], [460, "gallery-examples"], [463, "gallery-examples"], [465, "gallery-examples"], [467, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [477, "gallery-examples"], [478, "gallery-examples"], [479, "gallery-examples"], [480, "gallery-examples"], [481, "gallery-examples"], [482, "gallery-examples"], [484, "gallery-examples"], [487, "gallery-examples"], [488, "gallery-examples"], [489, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [494, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [503, "gallery-examples"], [504, "gallery-examples"], [505, "gallery-examples"], [506, "gallery-examples"], [507, "gallery-examples"], [509, "gallery-examples"], [511, "gallery-examples"], [515, "gallery-examples"], [516, "gallery-examples"], [517, "gallery-examples"], [518, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [532, "gallery-examples"], [535, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [549, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [574, "gallery-examples"], [575, "gallery-examples"], [586, "gallery-examples"], [587, "gallery-examples"], [589, "gallery-examples"], [592, "gallery-examples"], [593, "gallery-examples"], [594, "gallery-examples"], [595, "gallery-examples"], [596, "gallery-examples"], [598, "gallery-examples"], [599, "gallery-examples"], [602, "gallery-examples"], [604, "gallery-examples"], [605, "gallery-examples"], [607, "gallery-examples"], [609, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [612, "gallery-examples"], [613, "gallery-examples"], [615, "gallery-examples"], [616, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [620, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [624, "gallery-examples"], [627, "gallery-examples"], [628, "gallery-examples"], [630, "gallery-examples"], [632, "gallery-examples"], [633, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [644, "gallery-examples"], [645, "gallery-examples"], [646, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [654, "gallery-examples"], [657, "gallery-examples"], [658, "gallery-examples"], [660, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [663, "gallery-examples"], [664, "gallery-examples"], [667, "gallery-examples"], [669, "gallery-examples"], [670, "gallery-examples"], [671, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [687, "gallery-examples"], [689, "gallery-examples"], [693, "gallery-examples"], [694, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [702, "gallery-examples"], [703, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [712, "gallery-examples"], [714, "gallery-examples"], [717, "gallery-examples"], [718, "gallery-examples"], [722, "gallery-examples"], [723, "gallery-examples"], [724, "gallery-examples"], [731, "gallery-examples"], [733, "gallery-examples"], [736, "gallery-examples"], [738, "gallery-examples"], [739, "gallery-examples"], [741, "gallery-examples"], [742, "gallery-examples"], [745, "gallery-examples"], [746, "gallery-examples"], [749, "gallery-examples"], [750, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [754, "gallery-examples"], [756, "gallery-examples"], [757, "gallery-examples"], [759, "gallery-examples"], [761, "gallery-examples"], [765, "gallery-examples"], [782, "gallery-examples"], [783, "gallery-examples"], [786, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [796, "gallery-examples"], [797, "gallery-examples"], [799, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [817, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [839, "gallery-examples"], [841, "gallery-examples"], [843, "gallery-examples"], [844, "gallery-examples"], [845, "gallery-examples"], [848, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [859, "gallery-examples"], [862, "gallery-examples"], [863, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [866, "gallery-examples"], [867, "gallery-examples"], [870, "gallery-examples"], [871, "gallery-examples"], [873, "gallery-examples"], [875, "gallery-examples"], [876, "gallery-examples"], [878, "gallery-examples"], [879, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [890, "gallery-examples"], [892, "gallery-examples"], [895, "gallery-examples"], [899, "gallery-examples"], [900, "gallery-examples"], [902, "gallery-examples"], [903, "gallery-examples"], [904, "gallery-examples"], [906, "gallery-examples"], [908, "gallery-examples"], [909, "gallery-examples"], [910, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [920, "gallery-examples"], [921, "gallery-examples"], [929, "gallery-examples"], [938, "gallery-examples"], [940, "gallery-examples"], [947, "gallery-examples"], [951, "gallery-examples"], [952, "gallery-examples"], [953, "gallery-examples"], [954, "gallery-examples"], [955, "gallery-examples"], [968, "gallery-examples"], [978, "gallery-examples"]], "BiclusterMixin": [[429, "biclustermixin"]], "ClassNamePrefixFeaturesOutMixin": [[430, "classnameprefixfeaturesoutmixin"]], "ClassifierMixin": [[431, "classifiermixin"]], "ClusterMixin": [[432, "clustermixin"]], "DensityMixin": [[433, "densitymixin"]], "MetaEstimatorMixin": [[434, "metaestimatormixin"]], "OneToOneFeatureMixin": [[435, "onetoonefeaturemixin"]], "OutlierMixin": [[436, "outliermixin"]], "RegressorMixin": [[437, "regressormixin"]], "TransformerMixin": [[438, "transformermixin"]], "clone": [[439, "clone"]], "is_classifier": [[440, "is-classifier"]], "is_regressor": [[441, "is-regressor"]], "CalibratedClassifierCV": [[442, "calibratedclassifiercv"]], "CalibrationDisplay": [[443, "calibrationdisplay"]], "calibration_curve": [[444, "calibration-curve"]], "AffinityPropagation": [[445, "affinitypropagation"]], "AgglomerativeClustering": [[446, "agglomerativeclustering"]], "Birch": [[447, "birch"]], "BisectingKMeans": [[448, "bisectingkmeans"]], "KMeans": [[452, "kmeans"]], "MeanShift": [[453, "meanshift"]], "MiniBatchKMeans": [[454, "minibatchkmeans"]], "SpectralBiclustering": [[456, "spectralbiclustering"]], "SpectralClustering": [[457, "spectralclustering"]], "SpectralCoclustering": [[458, "spectralcoclustering"]], "affinity_propagation": [[459, "affinity-propagation"]], "cluster_optics_dbscan": [[460, "cluster-optics-dbscan"]], "cluster_optics_xi": [[461, "cluster-optics-xi"]], "compute_optics_graph": [[462, "compute-optics-graph"]], "estimate_bandwidth": [[463, "estimate-bandwidth"]], "k_means": [[464, "k-means"]], "kmeans_plusplus": [[465, "kmeans-plusplus"]], "mean_shift": [[466, "mean-shift"]], "spectral_clustering": [[467, "spectral-clustering"]], "ward_tree": [[468, "ward-tree"]], "ColumnTransformer": [[469, "columntransformer"]], "TransformedTargetRegressor": [[470, "transformedtargetregressor"]], "make_column_selector": [[471, "make-column-selector"]], "make_column_transformer": [[472, "make-column-transformer"]], "config_context": [[473, "config-context"]], "EllipticEnvelope": [[474, "ellipticenvelope"]], "EmpiricalCovariance": [[475, "empiricalcovariance"]], "GraphicalLasso": [[476, "graphicallasso"]], "GraphicalLassoCV": [[477, "graphicallassocv"]], "LedoitWolf": [[478, "ledoitwolf"]], "MinCovDet": [[479, "mincovdet"]], "OAS": [[480, "oas"]], "ShrunkCovariance": [[481, "shrunkcovariance"]], "empirical_covariance": [[482, "empirical-covariance"]], "graphical_lasso": [[483, "graphical-lasso"]], "ledoit_wolf": [[484, "ledoit-wolf"]], "ledoit_wolf_shrinkage": [[485, "ledoit-wolf-shrinkage"]], "shrunk_covariance": [[486, "shrunk-covariance"]], "CCA": [[487, "cca"]], "clear_data_home": [[491, "clear-data-home"]], "dump_svmlight_file": [[492, "dump-svmlight-file"]], "fetch_20newsgroups": [[493, "fetch-20newsgroups"]], "fetch_20newsgroups_vectorized": [[494, "fetch-20newsgroups-vectorized"]], "fetch_california_housing": [[495, "fetch-california-housing"]], "fetch_covtype": [[496, "fetch-covtype"]], "fetch_kddcup99": [[497, "fetch-kddcup99"]], "fetch_lfw_pairs": [[498, "fetch-lfw-pairs"]], "fetch_lfw_people": [[499, "fetch-lfw-people"]], "fetch_olivetti_faces": [[500, "fetch-olivetti-faces"]], "fetch_openml": [[501, "fetch-openml"]], "fetch_rcv1": [[502, "fetch-rcv1"]], "fetch_species_distributions": [[503, "fetch-species-distributions"]], "get_data_home": [[504, "get-data-home"]], "load_breast_cancer": [[505, "load-breast-cancer"]], "load_diabetes": [[506, "load-diabetes"]], "load_digits": [[507, "load-digits"]], "load_files": [[508, "load-files"]], "load_iris": [[509, "load-iris"]], "load_linnerud": [[510, "load-linnerud"]], "load_sample_image": [[511, "load-sample-image"]], "load_sample_images": [[512, "load-sample-images"]], "load_svmlight_file": [[513, "load-svmlight-file"]], "load_svmlight_files": [[514, "load-svmlight-files"]], "load_wine": [[515, "load-wine"]], "make_biclusters": [[516, "make-biclusters"]], "make_checkerboard": [[518, "make-checkerboard"]], "make_circles": [[519, "make-circles"]], "make_friedman1": [[521, "make-friedman1"]], "make_friedman2": [[522, "make-friedman2"]], "make_friedman3": [[523, "make-friedman3"]], "make_gaussian_quantiles": [[524, "make-gaussian-quantiles"]], "make_hastie_10_2": [[525, "make-hastie-10-2"]], "make_low_rank_matrix": [[526, "make-low-rank-matrix"]], "make_moons": [[527, "make-moons"]], "make_multilabel_classification": [[528, "make-multilabel-classification"]], "make_s_curve": [[530, "make-s-curve"]], "make_sparse_coded_signal": [[531, "make-sparse-coded-signal"]], "make_sparse_spd_matrix": [[532, "make-sparse-spd-matrix"]], "make_sparse_uncorrelated": [[533, "make-sparse-uncorrelated"]], "make_spd_matrix": [[534, "make-spd-matrix"]], "make_swiss_roll": [[535, "make-swiss-roll"]], "DictionaryLearning": [[536, "dictionarylearning"]], "FactorAnalysis": [[537, "factoranalysis"]], "FastICA": [[538, "fastica"]], "IncrementalPCA": [[539, "incrementalpca"]], "KernelPCA": [[540, "kernelpca"]], "LatentDirichletAllocation": [[541, "latentdirichletallocation"]], "MiniBatchDictionaryLearning": [[542, "minibatchdictionarylearning"]], "MiniBatchNMF": [[543, "minibatchnmf"]], "MiniBatchSparsePCA": [[544, "minibatchsparsepca"]], "NMF": [[545, "nmf"]], "PCA": [[546, "pca"]], "SparseCoder": [[547, "sparsecoder"]], "SparsePCA": [[548, "sparsepca"]], "TruncatedSVD": [[549, "truncatedsvd"]], "dict_learning": [[550, "dict-learning"]], "dict_learning_online": [[551, "dict-learning-online"]], "non_negative_factorization": [[552, "non-negative-factorization"]], "sparse_encode": [[553, "sparse-encode"]], "LinearDiscriminantAnalysis": [[554, "lineardiscriminantanalysis"]], "QuadraticDiscriminantAnalysis": [[555, "quadraticdiscriminantanalysis"]], "DummyClassifier": [[556, "dummyclassifier"]], "DummyRegressor": [[557, "dummyregressor"]], "AdaBoostClassifier": [[558, "adaboostclassifier"]], "AdaBoostRegressor": [[559, "adaboostregressor"]], "BaggingClassifier": [[560, "baggingclassifier"]], "BaggingRegressor": [[561, "baggingregressor"]], "ExtraTreesClassifier": [[562, "extratreesclassifier"]], "ExtraTreesRegressor": [[563, "extratreesregressor"]], "GradientBoostingClassifier": [[564, "gradientboostingclassifier"]], "GradientBoostingRegressor": [[565, "gradientboostingregressor"]], "HistGradientBoostingClassifier": [[566, "histgradientboostingclassifier"]], "HistGradientBoostingRegressor": [[567, "histgradientboostingregressor"]], "IsolationForest": [[568, "isolationforest"]], "RandomForestClassifier": [[569, "randomforestclassifier"]], "RandomForestRegressor": [[570, "randomforestregressor"]], "RandomTreesEmbedding": [[571, "randomtreesembedding"]], "StackingClassifier": [[572, "stackingclassifier"]], "StackingRegressor": [[573, "stackingregressor"]], "VotingClassifier": [[574, "votingclassifier"]], "VotingRegressor": [[575, "votingregressor"]], "ConvergenceWarning": [[576, "convergencewarning"]], "DataConversionWarning": [[577, "dataconversionwarning"]], "DataDimensionalityWarning": [[578, "datadimensionalitywarning"]], "EfficiencyWarning": [[579, "efficiencywarning"]], "FitFailedWarning": [[580, "fitfailedwarning"]], "InconsistentVersionWarning": [[581, "inconsistentversionwarning"]], "NotFittedError": [[582, "notfittederror"]], "UndefinedMetricWarning": [[583, "undefinedmetricwarning"]], "enable_halving_search_cv": [[584, "module-sklearn.experimental.enable_halving_search_cv"]], "enable_iterative_imputer": [[585, "module-sklearn.experimental.enable_iterative_imputer"]], "PatchExtractor": [[588, "patchextractor"]], "extract_patches_2d": [[589, "extract-patches-2d"]], "grid_to_graph": [[590, "grid-to-graph"]], "img_to_graph": [[591, "img-to-graph"]], "reconstruct_from_patches_2d": [[592, "reconstruct-from-patches-2d"]], "CountVectorizer": [[593, "countvectorizer"]], "TfidfTransformer": [[595, "tfidftransformer"]], "GenericUnivariateSelect": [[597, "genericunivariateselect"]], "RFE": [[598, "rfe"]], "RFECV": [[599, "rfecv"]], "SelectFdr": [[600, "selectfdr"]], "SelectFpr": [[601, "selectfpr"]], "SelectFromModel": [[602, "selectfrommodel"]], "SelectFwe": [[603, "selectfwe"]], "SelectKBest": [[604, "selectkbest"]], "SelectPercentile": [[605, "selectpercentile"]], "SelectorMixin": [[606, "selectormixin"]], "SequentialFeatureSelector": [[607, "sequentialfeatureselector"]], "VarianceThreshold": [[608, "variancethreshold"]], "chi2": [[609, "chi2"]], "f_classif": [[610, "f-classif"]], "f_regression": [[611, "f-regression"]], "mutual_info_classif": [[612, "mutual-info-classif"]], "mutual_info_regression": [[613, "mutual-info-regression"]], "r_regression": [[614, "r-regression"]], "GaussianProcessClassifier": [[615, "gaussianprocessclassifier"]], "GaussianProcessRegressor": [[616, "gaussianprocessregressor"]], "CompoundKernel": [[617, "compoundkernel"]], "ConstantKernel": [[618, "constantkernel"]], "DotProduct": [[619, "dotproduct"]], "ExpSineSquared": [[620, "expsinesquared"]], "Exponentiation": [[621, "exponentiation"]], "Hyperparameter": [[622, "hyperparameter"]], "Kernel": [[623, "kernel"]], "Matern": [[624, "matern"]], "PairwiseKernel": [[625, "pairwisekernel"]], "Product": [[626, "product"]], "RBF": [[627, "rbf"]], "RationalQuadratic": [[628, "rationalquadratic"]], "Sum": [[629, "sum"]], "WhiteKernel": [[630, "whitekernel"]], "get_config": [[631, "get-config"]], "IterativeImputer": [[632, "iterativeimputer"]], "KNNImputer": [[633, "knnimputer"]], "MissingIndicator": [[634, "missingindicator"]], "SimpleImputer": [[635, "simpleimputer"]], "DecisionBoundaryDisplay": [[636, "decisionboundarydisplay"]], "PartialDependenceDisplay": [[637, "partialdependencedisplay"]], "partial_dependence": [[638, "partial-dependence"]], "permutation_importance": [[639, "permutation-importance"]], "IsotonicRegression": [[640, "isotonicregression"]], "check_increasing": [[641, "check-increasing"]], "isotonic_regression": [[642, "isotonic-regression"]], "AdditiveChi2Sampler": [[643, "additivechi2sampler"]], "Nystroem": [[644, "nystroem"]], "PolynomialCountSketch": [[645, "polynomialcountsketch"]], "RBFSampler": [[646, "rbfsampler"]], "SkewedChi2Sampler": [[647, "skewedchi2sampler"]], "KernelRidge": [[648, "kernelridge"]], "ARDRegression": [[649, "ardregression"]], "BayesianRidge": [[650, "bayesianridge"]], "ElasticNetCV": [[652, "elasticnetcv"]], "GammaRegressor": [[653, "gammaregressor"]], "HuberRegressor": [[654, "huberregressor"]], "Lars": [[655, "lars"]], "LarsCV": [[656, "larscv"]], "LassoCV": [[658, "lassocv"]], "LassoLars": [[659, "lassolars"]], "LassoLarsCV": [[660, "lassolarscv"]], "LassoLarsIC": [[661, "lassolarsic"]], "LinearRegression": [[662, "linearregression"]], "LogisticRegression": [[663, "logisticregression"]], "LogisticRegressionCV": [[664, "logisticregressioncv"]], "MultiTaskElasticNet": [[665, "multitaskelasticnet"]], "MultiTaskElasticNetCV": [[666, "multitaskelasticnetcv"]], "MultiTaskLasso": [[667, "multitasklasso"]], "MultiTaskLassoCV": [[668, "multitasklassocv"]], "OrthogonalMatchingPursuit": [[669, "orthogonalmatchingpursuit"]], "OrthogonalMatchingPursuitCV": [[670, "orthogonalmatchingpursuitcv"]], "PassiveAggressiveClassifier": [[671, "passiveaggressiveclassifier"]], "PassiveAggressiveRegressor": [[672, "passiveaggressiveregressor"]], "Perceptron": [[673, "perceptron"], [990, "perceptron"]], "PoissonRegressor": [[674, "poissonregressor"]], "QuantileRegressor": [[675, "quantileregressor"]], "RANSACRegressor": [[676, "ransacregressor"]], "Ridge": [[677, "ridge"]], "RidgeCV": [[678, "ridgecv"]], "RidgeClassifier": [[679, "ridgeclassifier"]], "RidgeClassifierCV": [[680, "ridgeclassifiercv"]], "SGDClassifier": [[681, "sgdclassifier"]], "SGDOneClassSVM": [[682, "sgdoneclasssvm"]], "SGDRegressor": [[683, "sgdregressor"]], "TheilSenRegressor": [[684, "theilsenregressor"]], "TweedieRegressor": [[685, "tweedieregressor"]], "enet_path": [[686, "enet-path"]], "lars_path": [[687, "lars-path"]], "lars_path_gram": [[688, "lars-path-gram"]], "lasso_path": [[689, "lasso-path"]], "orthogonal_mp": [[690, "orthogonal-mp"]], "orthogonal_mp_gram": [[691, "orthogonal-mp-gram"]], "ridge_regression": [[692, "ridge-regression"]], "Isomap": [[693, "isomap"], [991, "isomap"]], "LocallyLinearEmbedding": [[694, "locallylinearembedding"]], "MDS": [[695, "mds"]], "SpectralEmbedding": [[696, "spectralembedding"]], "TSNE": [[697, "tsne"]], "locally_linear_embedding": [[698, "locally-linear-embedding"]], "smacof": [[699, "smacof"]], "spectral_embedding": [[700, "spectral-embedding"]], "trustworthiness": [[701, "trustworthiness"]], "ConfusionMatrixDisplay": [[702, "confusionmatrixdisplay"]], "DetCurveDisplay": [[703, "detcurvedisplay"]], "DistanceMetric": [[704, "distancemetric"]], "PrecisionRecallDisplay": [[705, "precisionrecalldisplay"]], "PredictionErrorDisplay": [[706, "predictionerrordisplay"]], "RocCurveDisplay": [[707, "roccurvedisplay"]], "accuracy_score": [[708, "accuracy-score"]], "adjusted_mutual_info_score": [[709, "adjusted-mutual-info-score"]], "adjusted_rand_score": [[710, "adjusted-rand-score"]], "auc": [[711, "auc"]], "average_precision_score": [[712, "average-precision-score"]], "balanced_accuracy_score": [[713, "balanced-accuracy-score"]], "brier_score_loss": [[714, "brier-score-loss"]], "calinski_harabasz_score": [[715, "calinski-harabasz-score"]], "check_scoring": [[716, "check-scoring"]], "class_likelihood_ratios": [[717, "class-likelihood-ratios"]], "classification_report": [[718, "classification-report"]], "contingency_matrix": [[719, "contingency-matrix"]], "pair_confusion_matrix": [[720, "pair-confusion-matrix"]], "cohen_kappa_score": [[721, "cohen-kappa-score"]], "completeness_score": [[722, "completeness-score"]], "confusion_matrix": [[723, "confusion-matrix"]], "consensus_score": [[724, "consensus-score"]], "coverage_error": [[725, "coverage-error"]], "d2_absolute_error_score": [[726, "d2-absolute-error-score"]], "d2_pinball_score": [[727, "d2-pinball-score"]], "d2_tweedie_score": [[728, "d2-tweedie-score"]], "davies_bouldin_score": [[729, "davies-bouldin-score"]], "dcg_score": [[730, "dcg-score"]], "det_curve": [[731, "det-curve"]], "explained_variance_score": [[732, "explained-variance-score"]], "f1_score": [[733, "f1-score"]], "fbeta_score": [[734, "fbeta-score"]], "fowlkes_mallows_score": [[735, "fowlkes-mallows-score"]], "get_scorer": [[736, "get-scorer"]], "get_scorer_names": [[737, "get-scorer-names"]], "hamming_loss": [[738, "hamming-loss"]], "hinge_loss": [[739, "hinge-loss"]], "homogeneity_completeness_v_measure": [[740, "homogeneity-completeness-v-measure"]], "homogeneity_score": [[741, "homogeneity-score"]], "jaccard_score": [[742, "jaccard-score"]], "label_ranking_average_precision_score": [[743, "label-ranking-average-precision-score"]], "label_ranking_loss": [[744, "label-ranking-loss"]], "log_loss": [[745, "log-loss"]], "make_scorer": [[746, "make-scorer"]], "matthews_corrcoef": [[747, "matthews-corrcoef"]], "max_error": [[748, "max-error"]], "mean_absolute_error": [[749, "mean-absolute-error"]], "mean_absolute_percentage_error": [[750, "mean-absolute-percentage-error"]], "mean_gamma_deviance": [[751, "mean-gamma-deviance"]], "mean_pinball_loss": [[752, "mean-pinball-loss"]], "mean_poisson_deviance": [[753, "mean-poisson-deviance"]], "mean_squared_error": [[754, "mean-squared-error"]], "mean_squared_log_error": [[755, "mean-squared-log-error"]], "mean_tweedie_deviance": [[756, "mean-tweedie-deviance"]], "median_absolute_error": [[757, "median-absolute-error"]], "multilabel_confusion_matrix": [[758, "multilabel-confusion-matrix"]], "mutual_info_score": [[759, "mutual-info-score"]], "ndcg_score": [[760, "ndcg-score"]], "normalized_mutual_info_score": [[761, "normalized-mutual-info-score"]], "additive_chi2_kernel": [[762, "additive-chi2-kernel"]], "chi2_kernel": [[763, "chi2-kernel"]], "cosine_distances": [[764, "cosine-distances"]], "cosine_similarity": [[765, "cosine-similarity"]], "distance_metrics": [[766, "distance-metrics"]], "euclidean_distances": [[767, "euclidean-distances"]], "haversine_distances": [[768, "haversine-distances"]], "kernel_metrics": [[769, "kernel-metrics"]], "laplacian_kernel": [[770, "laplacian-kernel"]], "linear_kernel": [[771, "linear-kernel"]], "manhattan_distances": [[772, "manhattan-distances"]], "nan_euclidean_distances": [[773, "nan-euclidean-distances"]], "paired_cosine_distances": [[774, "paired-cosine-distances"]], "paired_distances": [[775, "paired-distances"]], "paired_euclidean_distances": [[776, "paired-euclidean-distances"]], "paired_manhattan_distances": [[777, "paired-manhattan-distances"]], "pairwise_kernels": [[778, "pairwise-kernels"]], "polynomial_kernel": [[779, "polynomial-kernel"]], "rbf_kernel": [[780, "rbf-kernel"]], "sigmoid_kernel": [[781, "sigmoid-kernel"]], "pairwise_distances": [[782, "pairwise-distances"]], "pairwise_distances_argmin": [[783, "pairwise-distances-argmin"]], "pairwise_distances_argmin_min": [[784, "pairwise-distances-argmin-min"]], "pairwise_distances_chunked": [[785, "pairwise-distances-chunked"]], "precision_recall_curve": [[786, "precision-recall-curve"]], "precision_recall_fscore_support": [[787, "precision-recall-fscore-support"]], "precision_score": [[788, "precision-score"]], "r2_score": [[789, "r2-score"]], "rand_score": [[790, "rand-score"]], "recall_score": [[791, "recall-score"]], "roc_auc_score": [[792, "roc-auc-score"]], "roc_curve": [[793, "roc-curve"]], "root_mean_squared_error": [[794, "root-mean-squared-error"]], "root_mean_squared_log_error": [[795, "root-mean-squared-log-error"]], "silhouette_samples": [[796, "silhouette-samples"]], "silhouette_score": [[797, "silhouette-score"]], "top_k_accuracy_score": [[798, "top-k-accuracy-score"]], "v_measure_score": [[799, "v-measure-score"]], "zero_one_loss": [[800, "zero-one-loss"]], "BayesianGaussianMixture": [[801, "bayesiangaussianmixture"]], "GaussianMixture": [[802, "gaussianmixture"]], "GridSearchCV": [[803, "gridsearchcv"]], "GroupKFold": [[804, "groupkfold"]], "GroupShuffleSplit": [[805, "groupshufflesplit"]], "HalvingGridSearchCV": [[806, "halvinggridsearchcv"]], "HalvingRandomSearchCV": [[807, "halvingrandomsearchcv"]], "KFold": [[808, "kfold"]], "LearningCurveDisplay": [[809, "learningcurvedisplay"]], "LeaveOneGroupOut": [[810, "leaveonegroupout"]], "LeaveOneOut": [[811, "leaveoneout"]], "LeavePGroupsOut": [[812, "leavepgroupsout"]], "LeavePOut": [[813, "leavepout"]], "ParameterGrid": [[814, "parametergrid"]], "ParameterSampler": [[815, "parametersampler"]], "PredefinedSplit": [[816, "predefinedsplit"]], "RandomizedSearchCV": [[817, "randomizedsearchcv"]], "RepeatedKFold": [[818, "repeatedkfold"]], "RepeatedStratifiedKFold": [[819, "repeatedstratifiedkfold"]], "ShuffleSplit": [[820, "shufflesplit"]], "StratifiedKFold": [[822, "stratifiedkfold"]], "StratifiedShuffleSplit": [[823, "stratifiedshufflesplit"]], "TimeSeriesSplit": [[824, "timeseriessplit"]], "ValidationCurveDisplay": [[825, "validationcurvedisplay"]], "check_cv": [[826, "check-cv"]], "cross_val_predict": [[827, "cross-val-predict"]], "cross_val_score": [[828, "cross-val-score"]], "cross_validate": [[829, "cross-validate"]], "learning_curve": [[830, "learning-curve"]], "permutation_test_score": [[831, "permutation-test-score"]], "train_test_split": [[832, "train-test-split"]], "validation_curve": [[833, "validation-curve"]], "OneVsOneClassifier": [[834, "onevsoneclassifier"], [995, "onevsoneclassifier"]], "OneVsRestClassifier": [[835, "onevsrestclassifier"], [995, "onevsrestclassifier"]], "OutputCodeClassifier": [[836, "outputcodeclassifier"], [995, "outputcodeclassifier"]], "ClassifierChain": [[837, "classifierchain"], [995, "classifierchain"]], "MultiOutputClassifier": [[838, "multioutputclassifier"], [995, "multioutputclassifier"]], "MultiOutputRegressor": [[839, "multioutputregressor"], [995, "multioutputregressor"]], "RegressorChain": [[840, "regressorchain"], [995, "regressorchain"]], "BernoulliNB": [[841, "bernoullinb"]], "CategoricalNB": [[842, "categoricalnb"]], "ComplementNB": [[843, "complementnb"]], "GaussianNB": [[844, "gaussiannb"]], "MultinomialNB": [[845, "multinomialnb"]], "BallTree": [[846, "balltree"]], "KDTree": [[847, "kdtree"]], "KNeighborsClassifier": [[848, "kneighborsclassifier"]], "KNeighborsRegressor": [[849, "kneighborsregressor"]], "KNeighborsTransformer": [[850, "kneighborstransformer"]], "KernelDensity": [[851, "kerneldensity"]], "LocalOutlierFactor": [[852, "localoutlierfactor"]], "NearestCentroid": [[853, "nearestcentroid"]], "NearestNeighbors": [[854, "nearestneighbors"]], "NeighborhoodComponentsAnalysis": [[855, "neighborhoodcomponentsanalysis"]], "RadiusNeighborsClassifier": [[856, "radiusneighborsclassifier"]], "RadiusNeighborsRegressor": [[857, "radiusneighborsregressor"]], "RadiusNeighborsTransformer": [[858, "radiusneighborstransformer"]], "kneighbors_graph": [[859, "kneighbors-graph"]], "radius_neighbors_graph": [[860, "radius-neighbors-graph"]], "sort_graph_by_row_values": [[861, "sort-graph-by-row-values"]], "BernoulliRBM": [[862, "bernoullirbm"]], "MLPClassifier": [[863, "mlpclassifier"]], "MLPRegressor": [[864, "mlpregressor"]], "FeatureUnion": [[865, "featureunion"]], "Pipeline": [[866, "pipeline"]], "make_pipeline": [[867, "make-pipeline"]], "make_union": [[868, "make-union"]], "Binarizer": [[869, "binarizer"]], "FunctionTransformer": [[870, "functiontransformer"]], "KBinsDiscretizer": [[871, "kbinsdiscretizer"]], "KernelCenterer": [[872, "kernelcenterer"]], "LabelBinarizer": [[873, "labelbinarizer"], [1005, "labelbinarizer"]], "LabelEncoder": [[874, "labelencoder"]], "MultiLabelBinarizer": [[877, "multilabelbinarizer"], [1005, "multilabelbinarizer"]], "OneHotEncoder": [[879, "onehotencoder"]], "OrdinalEncoder": [[880, "ordinalencoder"]], "PolynomialFeatures": [[881, "polynomialfeatures"]], "QuantileTransformer": [[883, "quantiletransformer"]], "SplineTransformer": [[885, "splinetransformer"]], "TargetEncoder": [[887, "targetencoder"]], "add_dummy_feature": [[888, "add-dummy-feature"]], "binarize": [[889, "binarize"]], "label_binarize": [[890, "label-binarize"]], "maxabs_scale": [[891, "maxabs-scale"]], "minmax_scale": [[892, "minmax-scale"]], "normalize": [[893, "normalize"]], "power_transform": [[894, "power-transform"]], "quantile_transform": [[895, "quantile-transform"]], "robust_scale": [[896, "robust-scale"]], "scale": [[897, "scale"]], "GaussianRandomProjection": [[898, "gaussianrandomprojection"]], "SparseRandomProjection": [[899, "sparserandomprojection"]], "johnson_lindenstrauss_min_dim": [[900, "johnson-lindenstrauss-min-dim"]], "LabelPropagation": [[901, "labelpropagation"]], "LabelSpreading": [[902, "labelspreading"]], "SelfTrainingClassifier": [[903, "selftrainingclassifier"]], "set_config": [[904, "set-config"]], "show_versions": [[905, "show-versions"]], "LinearSVC": [[906, "linearsvc"]], "LinearSVR": [[907, "linearsvr"]], "NuSVC": [[908, "nusvc"]], "NuSVR": [[909, "nusvr"]], "OneClassSVM": [[910, "oneclasssvm"]], "SVC": [[911, "svc"], [1009, "svc"]], "SVR": [[912, "svr"], [1009, "svr"]], "l1_min_c": [[913, "l1-min-c"]], "DecisionTreeClassifier": [[914, "decisiontreeclassifier"]], "DecisionTreeRegressor": [[915, "decisiontreeregressor"]], "ExtraTreeClassifier": [[916, "extratreeclassifier"]], "ExtraTreeRegressor": [[917, "extratreeregressor"]], "export_graphviz": [[918, "export-graphviz"]], "export_text": [[919, "export-text"]], "plot_tree": [[920, "plot-tree"]], "Bunch": [[921, "bunch"]], "_safe_indexing": [[922, "safe-indexing"]], "min_pos": [[923, "min-pos"]], "as_float_array": [[924, "as-float-array"]], "assert_all_finite": [[925, "assert-all-finite"]], "check_X_y": [[926, "check-x-y"]], "check_array": [[927, "check-array"]], "check_consistent_length": [[928, "check-consistent-length"]], "check_random_state": [[929, "check-random-state"]], "check_scalar": [[930, "check-scalar"]], "compute_class_weight": [[931, "compute-class-weight"]], "compute_sample_weight": [[932, "compute-sample-weight"]], "deprecated": [[933, "deprecated"]], "all_displays": [[934, "all-displays"]], "all_estimators": [[935, "all-estimators"]], "all_functions": [[936, "all-functions"]], "check_estimator": [[937, "check-estimator"]], "parametrize_with_checks": [[938, "parametrize-with-checks"]], "estimator_html_repr": [[939, "estimator-html-repr"]], "density": [[940, "density"]], "fast_logdet": [[941, "fast-logdet"]], "randomized_range_finder": [[942, "randomized-range-finder"]], "randomized_svd": [[943, "randomized-svd"]], "safe_sparse_dot": [[944, "safe-sparse-dot"]], "weighted_mode": [[945, "weighted-mode"]], "gen_batches": [[946, "gen-batches"]], "gen_even_slices": [[947, "gen-even-slices"]], "single_source_shortest_path_length": [[948, "single-source-shortest-path-length"]], "indexable": [[949, "indexable"]], "MetadataRequest": [[950, "metadatarequest"]], "MetadataRouter": [[951, "metadatarouter"]], "MethodMapping": [[952, "methodmapping"]], "get_routing_for_object": [[953, "get-routing-for-object"]], "process_routing": [[954, "process-routing"]], "available_if": [[955, "available-if"]], "is_multilabel": [[956, "is-multilabel"]], "type_of_target": [[957, "type-of-target"]], "unique_labels": [[958, "unique-labels"]], "murmurhash3_32": [[959, "murmurhash3-32"]], "Parallel": [[960, "parallel"]], "delayed": [[961, "delayed"]], "parallel_backend": [[962, "parallel-backend"]], "sample_without_replacement": [[963, "sample-without-replacement"]], "register_parallel_backend": [[964, "register-parallel-backend"]], "resample": [[965, "resample"]], "safe_mask": [[966, "safe-mask"]], "safe_sqr": [[967, "safe-sqr"]], "shuffle": [[968, "shuffle"]], "incr_mean_variance_axis": [[969, "incr-mean-variance-axis"]], "inplace_column_scale": [[970, "inplace-column-scale"]], "inplace_csr_column_scale": [[971, "inplace-csr-column-scale"]], "inplace_row_scale": [[972, "inplace-row-scale"]], "inplace_swap_column": [[973, "inplace-swap-column"]], "inplace_swap_row": [[974, "inplace-swap-row"]], "mean_variance_axis": [[975, "mean-variance-axis"]], "inplace_csr_row_normalize_l1": [[976, "inplace-csr-row-normalize-l1"]], "inplace_csr_row_normalize_l2": [[977, "inplace-csr-row-normalize-l2"]], "check_is_fitted": [[978, "check-is-fitted"]], "check_memory": [[979, "check-memory"]], "check_symmetric": [[980, "check-symmetric"]], "column_or_1d": [[981, "column-or-1d"]], "has_fit_parameter": [[982, "has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[983, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[983, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[983, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[983, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[983, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[983, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[983, "choosing-a-resource"]], "Exhausting the available resources": [[983, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[983, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[983, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[983, "tips-for-parameter-search"]], "Specifying an objective metric": [[983, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[983, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[983, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[983, "model-selection-development-and-evaluation"]], "Robustness to failure": [[983, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[983, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[983, "model-specific-cross-validation"]], "Information Criterion": [[983, "information-criterion"]], "Out of Bag Estimates": [[983, "out-of-bag-estimates"]], "Imputation of missing values": [[984, "imputation-of-missing-values"], [1004, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[984, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[984, "univariate-feature-imputation"]], "Multivariate feature imputation": [[984, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[984, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[984, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[984, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[984, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[984, "marking-imputed-values"]], "Estimators that handle NaN values": [[984, "estimators-that-handle-nan-values"]], "Isotonic regression": [[985, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[986, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[986, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[986, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[986, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[986, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[986, "mathematical-details"]], "Kernel ridge regression": [[987, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[988, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[988, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[988, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[988, "qda"]], "LDA": [[988, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[988, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[988, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[988, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[989, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[989, "validation-curve"]], "Learning curve": [[989, "learning-curve"]], "Linear Models": [[990, "linear-models"]], "Ordinary Least Squares": [[990, "ordinary-least-squares"]], "Non-Negative Least Squares": [[990, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[990, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[990, "ridge-regression-and-classification"]], "Ridge Complexity": [[990, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[990, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[990, "setting-regularization-parameter"]], "Using cross-validation": [[990, "using-cross-validation"]], "Information-criteria based model selection": [[990, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[990, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[990, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[990, "multi-task-lasso"]], "Elastic-Net": [[990, "elastic-net"]], "Multi-task Elastic-Net": [[990, "multi-task-elastic-net"]], "Least Angle Regression": [[990, "least-angle-regression"]], "LARS Lasso": [[990, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[990, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[990, "bayesian-regression"]], "Bayesian Ridge Regression": [[990, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[990, "automatic-relevance-determination-ard"]], "Logistic regression": [[990, "logistic-regression"]], "Binary Case": [[990, "binary-case"]], "Multinomial Case": [[990, "multinomial-case"]], "Solvers": [[990, "solvers"]], "Differences between solvers": [[990, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[990, "stochastic-gradient-descent-sgd"]], "Passive Aggressive Algorithms": [[990, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[990, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[990, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[990, null]], "RANSAC: RANdom SAmple Consensus": [[990, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[990, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[990, "huber-regression"]], "Quantile Regression": [[990, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[990, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[991, "introduction"]], "Locally Linear Embedding": [[991, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[991, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[991, "hessian-eigenmapping"]], "Spectral Embedding": [[991, "spectral-embedding"]], "Local Tangent Space Alignment": [[991, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[991, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[991, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[991, "tips-on-practical-use"], [1010, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[992, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[992, "cosine-similarity"]], "Laplacian kernel": [[992, "laplacian-kernel"]], "Chi-squared kernel": [[992, "chi-squared-kernel"]], "Gaussian mixture models": [[993, "gaussian-mixture-models"]], "Gaussian Mixture": [[993, "gaussian-mixture"]], "Variational Bayesian Gaussian Mixture": [[993, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[993, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[994, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[994, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[994, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[994, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[994, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[994, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[994, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[994, "accuracy-score"]], "Top-k accuracy score": [[994, "top-k-accuracy-score"]], "Balanced accuracy score": [[994, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[994, "cohen-s-kappa"]], "Classification report": [[994, "classification-report"]], "Hamming loss": [[994, "hamming-loss"]], "Precision, recall and F-measures": [[994, "precision-recall-and-f-measures"]], "Binary classification": [[994, "binary-classification"]], "Multiclass and multilabel classification": [[994, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[994, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[994, "hinge-loss"]], "Log loss": [[994, "log-loss"]], "Matthews correlation coefficient": [[994, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[994, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[994, "receiver-operating-characteristic-roc"]], "Binary case": [[994, "binary-case"]], "Multi-class case": [[994, "multi-class-case"]], "Multi-label case": [[994, "multi-label-case"]], "Detection error tradeoff (DET)": [[994, "detection-error-tradeoff-det"]], "Zero one loss": [[994, "zero-one-loss"]], "Brier score loss": [[994, "brier-score-loss"]], "Class likelihood ratios": [[994, "class-likelihood-ratios"]], "Coverage error": [[994, "coverage-error"]], "Label ranking average precision": [[994, "label-ranking-average-precision"]], "Ranking loss": [[994, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[994, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[994, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[994, "mean-absolute-error"]], "Mean squared error": [[994, "mean-squared-error"]], "Mean squared logarithmic error": [[994, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[994, "mean-absolute-percentage-error"]], "Median absolute error": [[994, "median-absolute-error"]], "Max error": [[994, "max-error"]], "Explained variance score": [[994, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[994, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[994, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[994, "pinball-loss"]], "D\u00b2 score": [[994, "d2-score"]], "Visual evaluation of regression models": [[994, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[994, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[995, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[995, "multiclass-classification"], [1026, null]], "Target format": [[995, "target-format"], [995, "id5"], [995, "id8"], [995, "id10"]], "Multiclass-multioutput classification": [[995, "multiclass-multioutput-classification"]], "Multioutput regression": [[995, "multioutput-regression"]], "Naive Bayes": [[996, "naive-bayes"]], "Multinomial Naive Bayes": [[996, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[996, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[996, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[996, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[996, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[997, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[997, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[997, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[997, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[997, "nearest-neighbor-algorithms"]], "Brute Force": [[997, "brute-force"]], "K-D Tree": [[997, "k-d-tree"]], "Ball Tree": [[997, "ball-tree"]], "Nearest Centroid Classifier": [[997, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[997, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[997, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[997, "neighborhood-components-analysis"]], "Dimensionality reduction": [[997, "dimensionality-reduction"]], "Implementation": [[997, "implementation"]], "Complexity": [[997, "complexity"], [998, "complexity"], [1008, "complexity"], [1009, "complexity"], [1010, "complexity"]], "Transform": [[997, "transform"]], "Neural network models (supervised)": [[998, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[998, "multi-layer-perceptron"]], "Regularization": [[998, "regularization"]], "Algorithms": [[998, "algorithms"]], "Tips on Practical Use": [[998, "tips-on-practical-use"], [1008, "tips-on-practical-use"], [1009, "tips-on-practical-use"]], "More control with warm_start": [[998, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[999, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[999, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[999, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[999, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[999, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[1000, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[1000, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[1000, "novelty-detection"]], "Scaling up the One-Class SVM": [[1000, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[1000, "id1"]], "Fitting an elliptic envelope": [[1000, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[1000, "isolation-forest"]], "Local Outlier Factor": [[1000, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[1000, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[1001, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[1001, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[1001, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[1001, "mathematical-definition"]], "Computation methods": [[1001, "computation-methods"]], "Permutation feature importance": [[1002, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[1002, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[1002, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[1002, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[1004, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[1004, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[1004, "scaling-features-to-a-range"]], "Scaling sparse data": [[1004, "scaling-sparse-data"]], "Scaling data with outliers": [[1004, "scaling-data-with-outliers"]], "Centering kernel matrices": [[1004, "centering-kernel-matrices"]], "Non-linear transformation": [[1004, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[1004, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[1004, "mapping-to-a-gaussian-distribution"]], "Normalization": [[1004, "normalization"]], "Encoding categorical features": [[1004, "encoding-categorical-features"]], "Infrequent categories": [[1004, "infrequent-categories"]], "Target Encoder": [[1004, "target-encoder"]], "Discretization": [[1004, "discretization"]], "K-bins discretization": [[1004, "k-bins-discretization"]], "Feature binarization": [[1004, "feature-binarization"]], "Sparse input": [[1004, null]], "Generating polynomial features": [[1004, "generating-polynomial-features"]], "Polynomial features": [[1004, "polynomial-features"]], "Spline transformer": [[1004, "spline-transformer"]], "Custom transformers": [[1004, "custom-transformers"]], "Transforming the prediction target (y)": [[1005, "transforming-the-prediction-target-y"]], "Label binarization": [[1005, "label-binarization"]], "Label encoding": [[1005, "label-encoding"]], "Random Projection": [[1006, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[1006, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[1006, "gaussian-random-projection"]], "Sparse random projection": [[1006, "sparse-random-projection"]], "Inverse Transform": [[1006, "inverse-transform"]], "Unlabeled entries in y": [[1007, null]], "Self Training": [[1007, "self-training"]], "Label Propagation": [[1007, "label-propagation"]], "Stochastic Gradient Descent": [[1008, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[1008, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[1008, "stopping-criterion"]], "SGD": [[1008, "id5"]], "Implementation details": [[1008, "implementation-details"], [1009, "implementation-details"]], "Multi-class classification": [[1009, "multi-class-classification"]], "Scores and probabilities": [[1009, "scores-and-probabilities"]], "Unbalanced problems": [[1009, "unbalanced-problems"]], "Density estimation, novelty detection": [[1009, "density-estimation-novelty-detection"]], "Kernel functions": [[1009, "kernel-functions"]], "Parameters of the RBF Kernel": [[1009, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[1009, "custom-kernels"]], "Multi-output problems": [[1010, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1010, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[1010, "classification-criteria"]], "Regression criteria": [[1010, "regression-criteria"]], "Missing Values Support": [[1010, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[1010, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[1011, "unsupervised-dimensionality-reduction"]], "Pipelining": [[1011, null], [1024, "pipelining"]], "PCA: principal component analysis": [[1011, "pca-principal-component-analysis"]], "Random projections": [[1011, "random-projections"]], "Feature scaling": [[1011, null]], "External Resources, Videos and Talks": [[1012, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[1012, "new-to-scientific-python"]], "External Tutorials": [[1012, "external-tutorials"]], "Videos": [[1012, "videos"]], "Related Projects": [[1013, "related-projects"]], "Interoperability and framework enhancements": [[1013, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1013, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1013, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1013, "recommendation-engine-packages"]], "Domain specific packages": [[1013, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1013, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1014, "roadmap"]], "Purpose of this document": [[1014, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1014, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1014, "architectural-general-goals"]], "Subpackage-specific goals": [[1014, "subpackage-specific-goals"]], "Computation times": [[1015, "computation-times"]], "Supervised learning": [[1016, "supervised-learning"]], "Support": [[1017, "support"]], "Mailing Lists": [[1017, "mailing-lists"]], "User Questions": [[1017, "user-questions"]], "Bug Tracker": [[1017, "bug-tracker"]], "Social Media": [[1017, "social-media"]], "Gitter": [[1017, "gitter"]], "Documentation Resources": [[1017, "documentation-resources"]], "Who is using scikit-learn?": [[1018, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1018, "id1"]], "Spotify": [[1018, "id2"]], "Inria": [[1018, "id3"]], "betaworks": [[1018, "id4"]], "Hugging Face": [[1018, "id5"]], "Evernote": [[1018, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1018, "id7"]], "Booking.com": [[1018, "id8"]], "AWeber": [[1018, "id9"]], "Yhat": [[1018, "id10"]], "Rangespan": [[1018, "id11"]], "Birchbox": [[1018, "id12"]], "Bestofmedia Group": [[1018, "id13"]], "Change.org": [[1018, "id14"]], "PHIMECA Engineering": [[1018, "id15"]], "HowAboutWe": [[1018, "id16"]], "PeerIndex": [[1018, "id17"]], "DataRobot": [[1018, "id18"]], "OkCupid": [[1018, "id19"]], "Lovely": [[1018, "id20"]], "Data Publica": [[1018, "id21"]], "Machinalis": [[1018, "id22"]], "solido": [[1018, "id23"]], "INFONEA": [[1018, "id24"]], "Dataiku": [[1018, "id25"]], "Otto Group": [[1018, "id26"]], "Zopa": [[1018, "id27"]], "MARS": [[1018, "id28"]], "BNP Paribas Cardif": [[1018, "id29"]], "An introduction to machine learning with scikit-learn": [[1019, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1019, null]], "Machine learning: the problem setting": [[1019, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1019, null], [1026, null]], "Loading an example dataset": [[1019, "loading-an-example-dataset"]], "Shape of the data arrays": [[1019, null]], "Learning and predicting": [[1019, "learning-and-predicting"]], "Choosing the parameters of the model": [[1019, null]], "Conventions": [[1019, "conventions"]], "Type casting": [[1019, "type-casting"]], "Refitting and updating parameters": [[1019, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1019, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1020, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1021, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1022, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1022, null]], "Model selection: choosing estimators and their parameters": [[1023, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1023, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1023, "cross-validation-generators"]], "Exercise": [[1023, null], [1023, null], [1026, null], [1026, null]], "Grid-search and cross-validated estimators": [[1023, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1023, "grid-search"]], "Nested cross-validation": [[1023, null]], "Cross-validated estimators": [[1023, "cross-validated-estimators"]], "Putting it all together": [[1024, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1024, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1024, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1025, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1025, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1025, null]], "An example of reshaping data would be the digits dataset": [[1025, null]], "Estimators objects": [[1025, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1026, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1026, null]], "Vocabulary: classification and regression": [[1026, null]], "Nearest neighbor and the curse of dimensionality": [[1026, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1026, null]], "k-Nearest neighbors classifier": [[1026, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1026, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1026, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1026, "linear-regression"]], "Shrinkage": [[1026, "shrinkage"]], "Different algorithms for the same problem": [[1026, null]], "Shrinkage and sparsity with logistic regression": [[1026, null]], "Support vector machines (SVMs)": [[1026, "support-vector-machines-svms"]], "Linear SVMs": [[1026, "linear-svms"]], "Using kernels": [[1026, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1026, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1026, null]], "Unsupervised learning: seeking representations of the data": [[1027, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1027, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1027, null]], "K-means clustering": [[1027, "k-means-clustering"]], "Application example: vector quantization": [[1027, null]], "Hierarchical agglomerative clustering: Ward": [[1027, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1027, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1027, null]], "Decompositions: from a signal to components and loadings": [[1027, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1027, null]], "Principal component analysis: PCA": [[1027, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1027, "independent-component-analysis-ica"]], "Working With Text Data": [[1028, "working-with-text-data"]], "Tutorial setup": [[1028, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1028, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1028, "extracting-features-from-text-files"]], "Bags of words": [[1028, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1028, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1028, "from-occurrences-to-frequencies"]], "Training a classifier": [[1028, "training-a-classifier"]], "Building a pipeline": [[1028, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1028, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1028, "parameter-tuning-using-grid-search"]], "Exercises": [[1028, "exercises"]], "Exercise 1: Language identification": [[1028, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1028, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1028, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1028, "where-to-from-here"]], "Unsupervised learning": [[1029, "unsupervised-learning"]], "User Guide": [[1030, "user-guide"]], "Under Development": [[1030, "under-development"]], "Available documentation for scikit-learn": [[1031, "available-documentation-for-scikit-learn"]], "Visualizations": [[1032, "visualizations"]], "Available Plotting Utilities": [[1032, "available-plotting-utilities"]], "Display Objects": [[1032, "display-objects"]], "Release History": [[1033, "release-history"]], "Older Versions": [[1035, "older-versions"]], "Version 0.12.1": [[1035, "version-0-12-1"]], "Changelog": [[1035, "changelog"], [1035, "id1"], [1035, "id3"], [1035, "id6"], [1035, "id9"], [1035, "id12"], [1035, "id14"], [1035, "id16"], [1035, "id18"], [1035, "id19"], [1036, "changelog"], [1036, "id2"], [1037, "changelog"], [1038, "changelog"], [1039, "changelog"], [1039, "id2"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1041, "id1"], [1041, "id3"], [1042, "changelog"], [1042, "id2"], [1043, "changelog"], [1043, "id1"], [1043, "id5"], [1043, "id10"], [1043, "id23"], [1044, "changelog"], [1044, "id1"], [1044, "id2"], [1044, "id7"], [1045, "changelog"], [1045, "id1"], [1045, "id4"], [1046, "changelog"], [1046, "id1"], [1046, "id4"], [1047, "changelog"], [1047, "id1"], [1047, "id4"], [1048, "changelog"], [1048, "id6"], [1049, "changelog"], [1049, "id1"], [1049, "id7"], [1050, "changelog"], [1050, "id1"], [1050, "id9"], [1051, "changelog"], [1051, "id1"], [1051, "id6"], [1052, "changelog"], [1052, "id2"], [1052, "id5"], [1053, "changelog"]], "People": [[1035, "people"], [1035, "id2"], [1035, "id5"], [1035, "id8"], [1035, "id11"], [1035, "id13"], [1035, "id15"], [1035, "id17"], [1036, "people"], [1036, "id3"], [1037, "people"], [1038, "people"]], "Version 0.12": [[1035, "version-0-12"]], "API changes summary": [[1035, "api-changes-summary"], [1035, "id4"], [1035, "id7"], [1035, "id10"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1041, "id6"], [1042, "api-changes-summary"]], "Version 0.11": [[1035, "version-0-11"]], "Highlights": [[1035, "highlights"], [1038, "highlights"], [1039, "highlights"], [1042, "highlights"], [1043, "highlights"]], "Other changes": [[1035, "other-changes"]], "Version 0.10": [[1035, "version-0-10"]], "Version 0.9": [[1035, "version-0-9"]], "Version 0.8": [[1035, "version-0-8"]], "Version 0.7": [[1035, "version-0-7"]], "Version 0.6": [[1035, "version-0-6"]], "Version 0.5": [[1035, "version-0-5"]], "New classes": [[1035, "new-classes"]], "Fixes": [[1035, "fixes"]], "External dependencies": [[1035, "external-dependencies"]], "Removed modules": [[1035, "removed-modules"]], "Misc": [[1035, "misc"]], "Version 0.4": [[1035, "version-0-4"]], "Earlier versions": [[1035, "earlier-versions"]], "Version 0.13": [[1036, "version-0-13"], [1036, "changes-0-13"]], "Version 0.13.1": [[1036, "version-0-13-1"]], "New Estimator Classes": [[1036, "new-estimator-classes"]], "Version 0.14": [[1037, "version-0-14"], [1037, "changes-0-14"]], "Version 0.15": [[1038, "version-0-15"], [1038, "changes-0-15"]], "Version 0.15.2": [[1038, "version-0-15-2"]], "Bug fixes": [[1038, "bug-fixes"], [1038, "id1"], [1038, "id3"], [1039, "bug-fixes"], [1039, "id3"], [1040, "bug-fixes"], [1040, "id3"], [1041, "bug-fixes"], [1041, "id5"], [1042, "bug-fixes"], [1042, "id4"]], "Version 0.15.1": [[1038, "version-0-15-1"]], "New features": [[1038, "new-features"], [1039, "new-features"], [1040, "new-features"], [1041, "new-features"], [1042, "new-features"]], "Enhancements": [[1038, "enhancements"], [1039, "enhancements"], [1040, "enhancements"], [1041, "enhancements"], [1041, "id4"], [1042, "enhancements"], [1042, "id3"]], "Documentation improvements": [[1038, "documentation-improvements"], [1039, "documentation-improvements"]], "Version 0.16": [[1039, "version-0-16"], [1039, "changes-0-16"]], "Version 0.16.1": [[1039, "version-0-16-1"]], "Code Contributors": [[1039, "code-contributors"], [1040, "code-contributors"], [1041, "code-contributors"], [1041, "id7"]], "Version 0.17": [[1040, "version-0-17"], [1040, "changes-0-17"]], "Version 0.17.1": [[1040, "version-0-17-1"]], "Version 0.18": [[1041, "version-0-18"], [1041, "changes-0-18"]], "Version 0.18.2": [[1041, "version-0-18-2"]], "Version 0.18.1": [[1041, "version-0-18-1"]], "Model Selection Enhancements and API Changes": [[1041, "model-selection-enhancements-and-api-changes"]], "Version 0.19": [[1042, "version-0-19"], [1042, "id1"]], "Version 0.19.2": [[1042, "version-0-19-2"]], "Related changes": [[1042, "related-changes"]], "Version 0.19.1": [[1042, "version-0-19-1"]], "API changes": [[1042, "api-changes"]], "Code and Documentation Contributors": [[1042, "code-and-documentation-contributors"], [1042, "id10"], [1043, "code-and-documentation-contributors"], [1043, "id8"], [1043, "id21"], [1043, "id41"]], "Changed models": [[1042, "changed-models"], [1043, "changed-models"], [1043, "id9"], [1043, "id22"], [1044, "changed-models"], [1044, "id6"], [1045, "changed-models"], [1046, "changed-models"], [1046, "id3"], [1047, "changed-models"], [1048, "changed-models"], [1049, "changed-models"], [1049, "id6"], [1050, "changed-models"], [1050, "id7"], [1051, "changed-models"], [1051, "id4"], [1052, "changed-models"]], "Version 0.20": [[1043, "version-0-20"]], "Version 0.20.4": [[1043, "version-0-20-4"]], "Version 0.20.3": [[1043, "version-0-20-3"]], "Version 0.20.2": [[1043, "version-0-20-2"]], "Version 0.20.1": [[1043, "version-0-20-1"]], "Version 0.20.0": [[1043, "version-0-20-0"]], "Known Major Bugs": [[1043, "known-major-bugs"], [1044, "known-major-bugs"]], "Multiple modules": [[1043, "multiple-modules"], [1044, "multiple-modules"]], "Changes to estimator checks": [[1043, "changes-to-estimator-checks"], [1044, "changes-to-estimator-checks"], [1045, "changes-to-estimator-checks"]], "Version 0.21": [[1044, "version-0-21"]], "Version 0.21.3": [[1044, "version-0-21-3"]], "Version 0.21.2": [[1044, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1044, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1044, "version-0-21-1"]], "Version 0.21.0": [[1044, "version-0-21-0"]], "sklearn.externals": [[1044, "sklearn-externals"]], "Version 0.22": [[1045, "version-0-22"]], "Version 0.22.2.post1": [[1045, "version-0-22-2-post1"]], "Version 0.22.1": [[1045, "version-0-22-1"]], "Version 0.22.0": [[1045, "version-0-22-0"]], "Website update": [[1045, "website-update"]], "Clear definition of the public API": [[1045, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1045, "deprecations-using-futurewarning-from-now-on"]], "Version 0.23": [[1046, "version-0-23"]], "Version 0.23.2": [[1046, "version-0-23-2"]], "Version 0.23.1": [[1046, "version-0-23-1"]], "Version 0.23.0": [[1046, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1046, "enforcing-keyword-only-arguments"], [1048, "enforcing-keyword-only-arguments"]], "Version 0.24": [[1047, "version-0-24"]], "Version 0.24.2": [[1047, "version-0-24-2"]], "Version 0.24.1": [[1047, "version-0-24-1"]], "Packaging": [[1047, "packaging"]], "Version 0.24.0": [[1047, "version-0-24-0"]], "Version 1.0": [[1048, "version-1-0"]], "Version 1.0.2": [[1048, "version-1-0-2"]], "Version 1.0.1": [[1048, "version-1-0-1"]], "Fixed models": [[1048, "fixed-models"]], "Version 1.0.0": [[1048, "version-1-0-0"]], "Minimal dependencies": [[1048, "minimal-dependencies"], [1049, "minimal-dependencies"]], "Version 1.1": [[1049, "version-1-1"]], "Version 1.1.3": [[1049, "version-1-1-3"]], "Version 1.1.2": [[1049, "version-1-1-2"]], "Version 1.1.1": [[1049, "version-1-1-1"]], "Version 1.1.0": [[1049, "version-1-1-0"]], "Version 1.2": [[1050, "version-1-2"]], "Version 1.2.2": [[1050, "version-1-2-2"]], "Version 1.2.1": [[1050, "version-1-2-1"]], "Changes impacting all modules": [[1050, "changes-impacting-all-modules"], [1050, "id8"], [1051, "changes-impacting-all-modules"], [1051, "id5"], [1052, "changes-impacting-all-modules"]], "Version 1.2.0": [[1050, "version-1-2-0"]], "Version 1.3": [[1051, "version-1-3"]], "Version 1.3.2": [[1051, "version-1-3-2"]], "Version 1.3.1": [[1051, "version-1-3-1"]], "Version 1.3.0": [[1051, "version-1-3-0"]], "Changed displays": [[1051, "changed-displays"]], "Experimental / Under Development": [[1051, "experimental-under-development"]], "Version 1.4": [[1052, "version-1-4"]], "Version 1.4.2": [[1052, "version-1-4-2"]], "Version 1.4.1": [[1052, "version-1-4-1"]], "DataFrame Support": [[1052, "dataframe-support"]], "Changes impacting many modules": [[1052, "changes-impacting-many-modules"]], "Version 1.4.0": [[1052, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1052, "support-for-scipy-sparse-arrays"]], "Support for Array API": [[1052, "support-for-array-api"]], "Private Loss Function Module": [[1052, "private-loss-function-module"]], "Version 1.5": [[1053, "version-1-5"]], "Version 1.5.0": [[1053, "version-1-5-0"]], "Support for building with Meson": [[1053, "support-for-building-with-meson"]]}, "indexentries": {"module": [[3, "module-sklearn"], [4, "module-sklearn.base"], [5, "module-sklearn.calibration"], [6, "module-sklearn.cluster"], [7, "module-sklearn.compose"], [8, "module-sklearn.covariance"], [9, "module-sklearn.cross_decomposition"], [10, "module-sklearn.datasets"], [11, "module-sklearn.decomposition"], [12, "module-sklearn.discriminant_analysis"], [13, "module-sklearn.dummy"], [14, "module-sklearn.ensemble"], [15, "module-sklearn.exceptions"], [16, "module-sklearn.experimental"], [17, "module-sklearn.feature_extraction"], [17, "module-sklearn.feature_extraction.image"], [17, "module-sklearn.feature_extraction.text"], [18, "module-sklearn.feature_selection"], [19, "module-sklearn.gaussian_process"], [19, "module-sklearn.gaussian_process.kernels"], [20, "module-sklearn.impute"], [21, "module-sklearn.inspection"], [22, "module-sklearn.isotonic"], [23, "module-sklearn.kernel_approximation"], [24, "module-sklearn.kernel_ridge"], [25, "module-sklearn.linear_model"], [26, "module-sklearn.manifold"], [27, "module-sklearn.metrics"], [27, "module-sklearn.metrics.cluster"], [27, "module-sklearn.metrics.pairwise"], [28, "module-sklearn.mixture"], [29, "module-sklearn.model_selection"], [30, "module-sklearn.multiclass"], [31, "module-sklearn.multioutput"], [32, "module-sklearn.naive_bayes"], [33, "module-sklearn.neighbors"], [34, "module-sklearn.neural_network"], [35, "module-sklearn.pipeline"], [36, "module-sklearn.preprocessing"], [37, "module-sklearn.random_projection"], [38, "module-sklearn.semi_supervised"], [39, "module-sklearn.svm"], [40, "module-sklearn.tree"], [41, "module-sklearn.utils"], [41, "module-sklearn.utils.arrayfuncs"], [41, "module-sklearn.utils.class_weight"], [41, "module-sklearn.utils.discovery"], [41, "module-sklearn.utils.estimator_checks"], [41, "module-sklearn.utils.extmath"], [41, "module-sklearn.utils.graph"], [41, "module-sklearn.utils.metadata_routing"], [41, "module-sklearn.utils.metaestimators"], [41, "module-sklearn.utils.multiclass"], [41, "module-sklearn.utils.parallel"], [41, "module-sklearn.utils.random"], [41, "module-sklearn.utils.sparsefuncs"], [41, "module-sklearn.utils.sparsefuncs_fast"], [41, "module-sklearn.utils.validation"], [584, "module-sklearn.experimental.enable_halving_search_cv"], [585, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[3, "module-sklearn"]], "sklearn.base": [[4, "module-sklearn.base"]], "sklearn.calibration": [[5, "module-sklearn.calibration"]], "sklearn.cluster": [[6, "module-sklearn.cluster"]], "sklearn.compose": [[7, "module-sklearn.compose"]], "sklearn.covariance": [[8, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[10, "module-sklearn.datasets"]], "sklearn.decomposition": [[11, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[13, "module-sklearn.dummy"]], "sklearn.ensemble": [[14, "module-sklearn.ensemble"]], "sklearn.exceptions": [[15, "module-sklearn.exceptions"]], "sklearn.experimental": [[16, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[20, "module-sklearn.impute"]], "sklearn.inspection": [[21, "module-sklearn.inspection"]], "sklearn.isotonic": [[22, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[25, "module-sklearn.linear_model"]], "sklearn.manifold": [[26, "module-sklearn.manifold"]], "sklearn.metrics": [[27, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[28, "module-sklearn.mixture"]], "sklearn.model_selection": [[29, "module-sklearn.model_selection"]], "sklearn.multiclass": [[30, "module-sklearn.multiclass"]], "sklearn.multioutput": [[31, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[33, "module-sklearn.neighbors"]], "sklearn.neural_network": [[34, "module-sklearn.neural_network"]], "sklearn.pipeline": [[35, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[37, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised"]], "sklearn.svm": [[39, "module-sklearn.svm"]], "sklearn.tree": [[40, "module-sklearn.tree"]], "sklearn.utils": [[41, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[41, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation"]], "1d": [[401, "term-1d"]], "1d array": [[401, "term-1d-array"]], "2d": [[401, "term-2d"]], "2d array": [[401, "term-2d-array"]], "api": [[401, "term-API"]], "cv splitter": [[401, "term-CV-splitter"]], "slep": [[401, "term-SLEP"]], "sleps": [[401, "term-SLEPs"]], "x": [[401, "term-X"]], "xt": [[401, "term-Xt"]], "y": [[401, "term-Y"], [401, "term-y"]], "_estimator_type": [[401, "term-_estimator_type"]], "array-like": [[401, "term-array-like"]], "attribute": [[401, "term-attribute"]], "attributes": [[401, "term-attributes"]], "backwards compatibility": [[401, "term-backwards-compatibility"]], "binary": [[401, "term-binary"]], "callable": [[401, "term-callable"]], "categorical feature": [[401, "term-categorical-feature"]], "class_weight": [[401, "term-class_weight"]], "classes_": [[401, "term-classes_"]], "classifier": [[401, "term-classifier"]], "classifiers": [[401, "term-classifiers"]], "clone": [[401, "term-clone"]], "cloned": [[401, "term-cloned"]], "clusterer": [[401, "term-clusterer"]], "clusterers": [[401, "term-clusterers"]], "coef_": [[401, "term-coef_"]], "common tests": [[401, "term-common-tests"]], "components_": [[401, "term-components_"]], "consumer": [[401, "term-consumer"]], "continuous": [[401, "term-continuous"]], "continuous multi-output": [[401, "term-continuous-multi-output"]], "continuous multioutput": [[401, "term-continuous-multioutput"]], "cross fitting": [[401, "term-0"]], "cross validation": [[401, "term-1"]], "cross-fitting": [[401, "term-cross-fitting"]], "cross-validation": [[401, "term-cross-validation"]], "cross-validation estimator": [[401, "term-cross-validation-estimator"]], "cross-validation generator": [[401, "term-cross-validation-generator"]], "cross-validation splitter": [[401, "term-cross-validation-splitter"]], "cv": [[401, "term-cv"]], "data leakage": [[401, "term-data-leakage"]], "data type": [[401, "term-data-type"]], "decision_function": [[401, "term-decision_function"]], "density estimator": [[401, "term-density-estimator"]], "deprecation": [[401, "term-deprecation"]], "dimensionality": [[401, "term-dimensionality"]], "docstring": [[401, "term-docstring"]], "double underscore": [[401, "term-double-underscore"]], "double underscore notation": [[401, "term-double-underscore-notation"]], "dtype": [[401, "term-dtype"]], "duck typing": [[401, "term-duck-typing"]], "early stopping": [[401, "term-early-stopping"]], "embedding_": [[401, "term-embedding_"]], "estimator": [[401, "term-estimator"]], "estimator instance": [[401, "term-estimator-instance"]], "estimator tags": [[401, "term-estimator-tags"]], "estimators": [[401, "term-estimators"]], "evaluation metric": [[401, "term-evaluation-metric"]], "evaluation metrics": [[401, "term-evaluation-metrics"]], "examples": [[401, "term-examples"]], "experimental": [[401, "term-experimental"]], "feature": [[401, "term-feature"]], "feature extractor": [[401, "term-feature-extractor"]], "feature extractors": [[401, "term-feature-extractors"]], "feature vector": [[401, "term-feature-vector"]], "feature_importances_": [[401, "term-feature_importances_"]], "features": [[401, "term-features"]], "fit": [[401, "term-fit"]], "fit_predict": [[401, "term-fit_predict"]], "fit_transform": [[401, "term-fit_transform"]], "fitted": [[401, "term-fitted"]], "fitting": [[401, "term-fitting"]], "function": [[401, "term-function"]], "gallery": [[401, "term-gallery"]], "get_feature_names_out": [[401, "term-get_feature_names_out"]], "get_n_splits": [[401, "term-get_n_splits"]], "get_params": [[401, "term-get_params"]], "groups": [[401, "term-groups"]], "hyper-parameter": [[401, "term-hyper-parameter"]], "hyperparameter": [[401, "term-hyperparameter"]], "imputation": [[401, "term-imputation"]], "impute": [[401, "term-impute"]], "indexable": [[401, "term-indexable"]], "induction": [[401, "term-induction"]], "inductive": [[401, "term-inductive"]], "joblib": [[401, "term-joblib"]], "kernel": [[401, "term-kernel"]], "label indicator matrix": [[401, "term-label-indicator-matrix"]], "labels_": [[401, "term-labels_"]], "leakage": [[401, "term-leakage"]], "max_iter": [[401, "term-max_iter"]], "memmapping": [[401, "term-memmapping"]], "memory": [[401, "term-memory"]], "memory map": [[401, "term-memory-map"]], "memory mapping": [[401, "term-memory-mapping"]], "meta-estimator": [[401, "term-meta-estimator"]], "meta-estimators": [[401, "term-meta-estimators"]], "metadata": [[401, "term-metadata"]], "metaestimator": [[401, "term-metaestimator"]], "metaestimators": [[401, "term-metaestimators"]], "metric": [[401, "term-metric"]], "missing values": [[401, "term-missing-values"]], "multi-class": [[401, "term-multi-class"]], "multi-class multi-output": [[401, "term-multi-class-multi-output"]], "multi-label": [[401, "term-multi-label"]], "multi-output": [[401, "term-multi-output"]], "multi-output continuous": [[401, "term-multi-output-continuous"]], "multi-output multi-class": [[401, "term-multi-output-multi-class"]], "multiclass": [[401, "term-multiclass"]], "multiclass multioutput": [[401, "term-multiclass-multioutput"]], "multilabel": [[401, "term-multilabel"]], "multilabel indicator matrices": [[401, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[401, "term-multilabel-indicator-matrix"]], "multioutput": [[401, "term-multioutput"]], "multioutput continuous": [[401, "term-multioutput-continuous"]], "multioutput multiclass": [[401, "term-multioutput-multiclass"]], "n_components": [[401, "term-n_components"]], "n_features": [[401, "term-n_features"]], "n_iter_": [[401, "term-n_iter_"]], "n_iter_no_change": [[401, "term-n_iter_no_change"]], "n_jobs": [[401, "term-n_jobs"]], "n_outputs": [[401, "term-n_outputs"]], "n_samples": [[401, "term-n_samples"]], "n_targets": [[401, "term-n_targets"]], "narrative docs": [[401, "term-narrative-docs"]], "narrative documentation": [[401, "term-narrative-documentation"]], "np": [[401, "term-np"]], "online learning": [[401, "term-online-learning"]], "out-of-core": [[401, "term-out-of-core"]], "outlier detector": [[401, "term-outlier-detector"]], "outlier detectors": [[401, "term-outlier-detectors"]], "outputs": [[401, "term-outputs"]], "pair": [[401, "term-pair"]], "pairwise metric": [[401, "term-pairwise-metric"]], "pairwise metrics": [[401, "term-pairwise-metrics"]], "param": [[401, "term-param"]], "parameter": [[401, "term-parameter"]], "parameters": [[401, "term-parameters"]], "params": [[401, "term-params"]], "partial_fit": [[401, "term-partial_fit"]], "pd": [[401, "term-pd"]], "pos_label": [[401, "term-pos_label"]], "precomputed": [[401, "term-precomputed"]], "predict": [[401, "term-predict"]], "predict_log_proba": [[401, "term-predict_log_proba"]], "predict_proba": [[401, "term-predict_proba"]], "predictor": [[401, "term-predictor"]], "predictors": [[401, "term-predictors"]], "random_state": [[401, "term-random_state"]], "rectangular": [[401, "term-rectangular"]], "regressor": [[401, "term-regressor"]], "regressors": [[401, "term-regressors"]], "router": [[401, "term-router"]], "sample": [[401, "term-sample"]], "sample properties": [[401, "term-sample-properties"]], "sample property": [[401, "term-sample-property"]], "sample_weight": [[401, "term-sample_weight"]], "samples": [[401, "term-samples"]], "scikit-learn enhancement proposals": [[401, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[401, "term-scikit-learn-contrib"]], "score": [[401, "term-score"]], "score_samples": [[401, "term-score_samples"]], "scorer": [[401, "term-scorer"]], "scoring": [[401, "term-scoring"]], "semi-supervised": [[401, "term-semi-supervised"]], "semi-supervised learning": [[401, "term-semi-supervised-learning"]], "semisupervised": [[401, "term-semisupervised"]], "set_params": [[401, "term-set_params"]], "sparse graph": [[401, "term-sparse-graph"]], "sparse matrix": [[401, "term-sparse-matrix"]], "split": [[401, "term-split"]], "stateless": [[401, "term-stateless"]], "supervised": [[401, "term-supervised"]], "supervised learning": [[401, "term-supervised-learning"]], "target": [[401, "term-target"]], "targets": [[401, "term-targets"]], "transduction": [[401, "term-transduction"]], "transductive": [[401, "term-transductive"]], "transform": [[401, "term-transform"]], "transformer": [[401, "term-transformer"]], "transformers": [[401, "term-transformers"]], "unlabeled": [[401, "term-unlabeled"]], "unlabeled data": [[401, "term-unlabeled-data"]], "unsupervised": [[401, "term-unsupervised"]], "unsupervised learning": [[401, "term-unsupervised-learning"]], "vectorizer": [[401, "term-vectorizer"]], "vectorizers": [[401, "term-vectorizers"]], "verbose": [[401, "term-verbose"]], "warm_start": [[401, "term-warm_start"]], "dbscan() (in module sklearn.cluster)": [[425, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[426, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[427, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[428, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[428, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[428, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[428, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[429, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[429, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[429, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[429, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[429, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[430, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[430, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[431, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[431, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[432, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[432, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[433, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[433, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[434, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[435, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[435, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[436, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[436, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[437, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[437, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[438, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[438, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[438, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[439, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[440, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[441, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[442, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[442, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[443, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[443, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[443, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[443, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[444, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[445, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[445, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[445, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[445, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[445, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[445, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[445, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[446, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[446, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[446, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[446, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[446, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[446, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[447, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[447, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[448, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[448, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[449, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[449, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[449, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[449, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[449, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[449, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[449, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[450, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[450, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[450, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[451, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[451, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[451, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[451, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[451, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[451, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[451, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[452, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[452, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[453, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[453, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[453, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[453, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[453, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[453, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[453, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[454, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[454, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[455, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[455, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[455, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[455, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[455, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[455, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[456, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[456, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[456, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[456, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[456, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[456, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[456, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[456, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[456, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[457, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[457, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[457, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[457, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[457, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[457, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[458, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[458, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[458, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[458, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[458, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[458, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[458, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[458, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[458, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[459, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[460, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[461, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[462, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[463, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[464, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[465, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[466, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[467, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[468, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[469, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[469, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[469, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[470, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[470, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[470, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[470, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[470, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[470, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[470, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[470, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[470, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "__call__() (sklearn.compose.make_column_selector method)": [[471, "sklearn.compose.make_column_selector.__call__"]], "make_column_selector (class in sklearn.compose)": [[471, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[472, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[473, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[474, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[474, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[475, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[475, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[476, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[476, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[477, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[477, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[478, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[478, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[479, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[479, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[480, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[480, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[481, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[481, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[482, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[483, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[484, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[485, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[486, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[487, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[487, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[488, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[488, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[489, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[489, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[490, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[490, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[491, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[492, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[502, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[503, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[504, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[514, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[515, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[534, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[535, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[536, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[537, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[538, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[541, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[543, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[544, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[545, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[546, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[547, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[547, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[547, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[548, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[549, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[550, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[551, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[552, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[553, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[556, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[557, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.AdaBoostClassifier"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[558, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.AdaBoostRegressor"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[559, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.BaggingClassifier"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[560, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.BaggingRegressor"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[561, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[562, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[562, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[563, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[563, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[564, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[565, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[568, "sklearn.ensemble.IsolationForest"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[568, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[569, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.apply"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[569, "sklearn.ensemble.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[569, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[570, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.apply"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[570, "sklearn.ensemble.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[570, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[571, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[571, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[571, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[572, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[572, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[572, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[573, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[573, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[573, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[574, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[574, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[574, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[575, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[575, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[575, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning": [[576, "sklearn.exceptions.ConvergenceWarning"]], "dataconversionwarning": [[577, "sklearn.exceptions.DataConversionWarning"]], "datadimensionalitywarning": [[578, "sklearn.exceptions.DataDimensionalityWarning"]], "efficiencywarning": [[579, "sklearn.exceptions.EfficiencyWarning"]], "fitfailedwarning": [[580, "sklearn.exceptions.FitFailedWarning"]], "inconsistentversionwarning": [[581, "sklearn.exceptions.InconsistentVersionWarning"]], "notfittederror": [[582, "sklearn.exceptions.NotFittedError"]], "undefinedmetricwarning": [[583, "sklearn.exceptions.UndefinedMetricWarning"]], "sklearn.experimental.enable_halving_search_cv": [[584, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[585, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[586, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[587, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[589, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[590, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[591, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[592, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[593, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[594, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[595, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[598, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[599, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[602, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[602, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[607, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[608, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[613, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[614, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[631, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[632, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[633, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[634, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[635, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[636, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[636, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[636, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[637, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[637, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[637, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[638, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[639, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[640, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[641, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[642, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[644, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[646, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[648, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[649, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[650, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[651, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[651, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[651, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[652, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[653, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[654, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[655, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[657, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[657, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[657, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[658, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[665, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[665, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[667, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[667, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[667, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[668, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[673, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[677, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[678, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[679, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[679, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[680, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[680, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[681, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[682, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[683, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[684, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[685, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[692, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[693, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[694, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[695, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[696, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[697, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[698, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[699, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[700, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[701, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[702, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[702, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[702, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[703, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[703, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[703, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[703, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[704, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[704, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[705, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[705, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[705, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[706, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[706, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[706, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[706, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[707, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[707, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[707, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[707, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[711, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[714, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[716, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[717, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[718, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[719, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[720, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[723, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[725, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[731, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[736, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[737, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[739, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[740, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[743, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[745, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[746, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[747, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[757, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[758, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[782, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[783, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[784, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[785, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[786, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[787, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[793, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[794, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[795, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[796, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[797, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[798, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[799, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[800, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[801, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[801, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[802, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[802, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[803, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[803, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[803, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[804, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[805, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[806, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[806, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[806, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[807, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[808, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[809, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[809, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[812, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[814, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[815, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[816, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[817, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[817, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[817, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[818, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[820, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[821, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[822, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[823, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[824, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[825, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[825, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[825, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[834, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[834, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[834, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[835, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[835, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[835, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[835, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[836, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[836, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[836, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[836, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[836, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[836, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[836, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[836, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[837, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.predict"]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.predict_log_proba"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[837, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[838, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[838, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[839, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[839, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[840, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[840, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[840, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[840, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[840, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[840, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[840, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[840, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[841, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[841, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[842, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[843, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[844, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[845, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[845, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[846, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[846, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[847, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[847, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[848, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[849, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[850, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[851, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[851, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[852, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[852, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[853, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[853, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[853, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[853, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[853, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[853, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[853, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[853, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[854, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[854, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[855, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[856, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[857, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[858, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[859, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[860, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[861, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[862, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[862, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[863, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[863, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[864, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[864, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[865, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[865, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[865, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[865, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[866, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[866, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[866, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[866, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[866, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[866, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[867, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[868, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[869, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[870, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[871, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[872, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[873, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[874, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[875, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[876, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[877, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[878, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[879, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[879, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[880, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[880, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[881, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[881, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[882, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[883, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[884, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[885, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[886, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[887, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[887, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[898, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[898, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[899, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[899, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[900, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[901, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[901, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[902, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[902, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[903, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[904, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[905, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[906, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[906, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[907, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[907, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[908, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[908, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[908, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[908, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[908, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[908, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[909, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[909, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[909, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[909, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[910, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[910, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[910, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[910, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[911, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[911, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[911, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[911, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[911, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[911, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[912, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[912, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[912, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[912, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[913, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[914, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[914, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[914, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[915, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[915, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[915, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[916, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[916, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[916, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[917, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[917, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[917, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[918, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[919, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[920, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[921, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[921, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[922, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[923, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[924, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[925, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[926, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[927, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[928, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[929, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[930, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[931, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[932, "sklearn.utils.class_weight.compute_sample_weight"]], "__call__() (sklearn.utils.deprecated method)": [[933, "sklearn.utils.deprecated.__call__"]], "deprecated (class in sklearn.utils)": [[933, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[934, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[935, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[936, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[937, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[938, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[939, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[940, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[941, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[942, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[943, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[944, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[945, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[946, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[947, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[948, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[949, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[950, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[950, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[951, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[951, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[951, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[951, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[951, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[951, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[952, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[952, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[952, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[953, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[954, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[955, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[956, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[957, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[958, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[959, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[960, "sklearn.utils.parallel.Parallel"]], "__call__() (sklearn.utils.parallel.parallel method)": [[960, "sklearn.utils.parallel.Parallel.__call__"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[960, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[960, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[960, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[960, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[961, "sklearn.utils.parallel.delayed"]], "parallel_backend (class in sklearn.utils)": [[962, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[963, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[964, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[965, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[966, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[967, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[968, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[969, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[970, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[971, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[972, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[973, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[974, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[975, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[976, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[977, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[978, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[979, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[980, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[981, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[982, "sklearn.utils.validation.has_fit_parameter"]]}})