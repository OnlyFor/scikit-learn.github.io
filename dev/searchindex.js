Search.setIndex({"alltitles": {"(Generalized) linear models": [[211, "generalized-linear-models"]], "1-way partial dependence with different models": [[187, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[102, "newsgroups-dataset"]], "2D interaction plots": [[187, "d-interaction-plots"]], "3D representation": [[187, "d-representation"]], "A constant prediction baseline": [[211, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[91, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[81, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[96, null]], "A more flexible plotting API": [[321, "a-more-flexible-plotting-api"]], "A note on shuffling": [[411, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[381, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[374, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[997, "aic-and-bic-criteria"]], "API Interface": [[398, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1039, "api-changes"]], "API changes summary": [[1032, "api-changes-summary"], [1032, "id4"], [1032, "id7"], [1032, "id10"], [1033, "api-changes-summary"], [1034, "api-changes-summary"], [1035, "api-changes-summary"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1038, "id6"], [1039, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[377, "apis-of-scikit-learn-objects"]], "ARDRegression": [[644, null]], "ARFF parser": [[369, "arff-parser"]], "AWeber": [[1025, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[176, null]], "Ablation study": [[248, "ablation-study"]], "About the project": [[387, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[408, "access-pipeline-steps"]], "Access to nested parameters": [[408, "access-to-nested-parameters"]], "Accuracy of the Model": [[188, "accuracy-of-the-model"]], "Accuracy score": [[1001, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[354, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[414, "adaboost"]], "AdaBoostClassifier": [[553, null]], "AdaBoostRegressor": [[554, null]], "Add support for monotonic constraints in tree-based models": [[325, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[407, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[993, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[638, null]], "Addressing the problem with a business metric": [[263, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[249, null]], "Advantages:": [[407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null]], "Affinity Propagation": [[407, "affinity-propagation"]], "AffinityPropagation": [[439, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[440, null]], "Aggressive elimination of candidates": [[990, "aggressive-elimination-of-candidates"]], "Algorithms": [[1005, "algorithms"]], "Alpine Linux": [[393, "alpine-linux"]], "Alternatives to brute force parameter search": [[990, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[248, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[132, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[92, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[393, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[134, "analysis"]], "Analysis of a bag-of-words document classifier": [[350, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[146, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[187, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[990, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[415, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[289, null]], "Arch Linux": [[393, "arch-linux"]], "Architectural / general goals": [[1021, "architectural-general-goals"]], "Array API support (experimental)": [[403, null]], "Artwork": [[0, "artwork"]], "Attributes": [[389, "attributes"]], "Authors": [[1032, "authors"], [1032, "id20"]], "Automated Contributions Policy": [[375, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[197, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[997, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[388, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1029, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1028, null]], "BIRCH": [[407, "birch"]], "BNP Paribas Cardif": [[1025, "id29"]], "Bagging meta-estimator": [[414, "bagging-meta-estimator"]], "BaggingClassifier": [[555, null]], "BaggingRegressor": [[556, null]], "Balance model complexity and cross-validated score": [[268, null]], "Balanced accuracy score": [[1001, "balanced-accuracy-score"]], "Ball Tree": [[1004, "ball-tree"]], "BallTree": [[844, null]], "BaseEstimator": [[421, null]], "BaseEstimator and mixins:": [[377, null]], "Basic kernels": [[417, "basic-kernels"]], "Basic shrinkage": [[409, "basic-shrinkage"]], "Bayesian Regression": [[997, "bayesian-regression"]], "Bayesian Ridge Regression": [[997, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[193, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[797, null]], "BayesianRidge": [[645, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[350, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1003, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1006, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[839, null]], "BernoulliRBM": [[860, null]], "Bestofmedia Group": [[1025, "id13"]], "BiclusterMixin": [[422, null]], "Biclustering": [[56, null], [183, "biclustering"], [371, "biclustering"], [404, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[404, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[187, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[867, null]], "Binary Case": [[997, "binary-case"]], "Binary case": [[1001, "binary-case"]], "Binary classification": [[1001, "binary-classification"]], "Birch": [[441, null]], "Birchbox": [[1025, "id12"]], "Bisecting K-Means": [[407, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[442, null]], "BisectingKMeans: divide and cluster": [[322, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[121, null]], "Boil down your script to something as small as possible": [[380, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[159, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1025, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[372, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1001, "brier-score-loss"]], "Brute Force": [[1004, "brute-force"]], "Bug Tracker": [[1024, "bug-tracker"]], "Bug fixes": [[1035, "bug-fixes"], [1035, "id1"], [1035, "id3"], [1036, "bug-fixes"], [1036, "id3"], [1037, "bug-fixes"], [1037, "id3"], [1038, "bug-fixes"], [1038, "id5"], [1039, "bug-fixes"], [1039, "id4"]], "Bug triaging and issue curation": [[374, null]], "Build a pipeline": [[408, "build-a-pipeline"]], "Build dependencies": [[373, "build-dependencies"]], "Build the dataset": [[175, "build-the-dataset"]], "Building a specific version from a tag": [[373, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[383, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[373, "building-from-source"]], "Building the documentation": [[375, "building-the-documentation"]], "Bulk versus Atomic mode": [[362, "bulk-versus-atomic-mode"]], "Bunch": [[919, null]], "CCA": [[481, null]], "CCA (PLS mode B with symmetric deflation)": [[115, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[358, "cv-splitters"], [358, "id3"]], "Caching nearest neighbors": [[291, null]], "Caching transformers within a Pipeline": [[104, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[408, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[436, null]], "Calibrating a classifier": [[405, "calibrating-a-classifier"]], "Calibration": [[60, null], [183, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [405, "calibration-curves"]], "Calibration of the confidence interval": [[146, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[437, null]], "California Housing dataset": [[370, "california-housing-dataset"]], "Calinski-Harabasz Index": [[407, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[115, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[410, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[248, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[143, null]], "Categorical Features Support": [[414, "categorical-features-support"]], "Categorical Naive Bayes": [[1003, "categorical-naive-bayes"]], "CategoricalNB": [[840, null]], "Centering kernel matrices": [[1011, "centering-kernel-matrices"]], "Chain of binary classifiers": [[288, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[375, "change-the-default-value-of-a-parameter"]], "Change.org": [[1025, "id14"]], "Changed displays": [[1048, "changed-displays"]], "Changed models": [[1039, "changed-models"], [1040, "changed-models"], [1040, "id9"], [1040, "id22"], [1041, "changed-models"], [1041, "id6"], [1042, "changed-models"], [1043, "changed-models"], [1043, "id3"], [1044, "changed-models"], [1045, "changed-models"], [1046, "changed-models"], [1046, "id6"], [1047, "changed-models"], [1047, "id7"], [1048, "changed-models"], [1048, "id4"], [1049, "changed-models"], [1049, "id1"], [1050, "changed-models"]], "Changelog": [[1032, "changelog"], [1032, "id1"], [1032, "id3"], [1032, "id6"], [1032, "id9"], [1032, "id12"], [1032, "id14"], [1032, "id16"], [1032, "id18"], [1032, "id19"], [1033, "changelog"], [1033, "id2"], [1034, "changelog"], [1035, "changelog"], [1036, "changelog"], [1036, "id2"], [1037, "changelog"], [1037, "id2"], [1038, "changelog"], [1038, "id1"], [1038, "id3"], [1039, "changelog"], [1039, "id2"], [1040, "changelog"], [1040, "id1"], [1040, "id5"], [1040, "id10"], [1040, "id23"], [1041, "changelog"], [1041, "id1"], [1041, "id2"], [1041, "id7"], [1042, "changelog"], [1042, "id1"], [1042, "id4"], [1043, "changelog"], [1043, "id1"], [1043, "id4"], [1044, "changelog"], [1044, "id1"], [1044, "id4"], [1045, "changelog"], [1045, "id6"], [1046, "changelog"], [1046, "id1"], [1046, "id7"], [1047, "changelog"], [1047, "id1"], [1047, "id9"], [1048, "changelog"], [1048, "id1"], [1048, "id6"], [1049, "changelog"], [1049, "id3"], [1050, "changelog"], [1050, "id2"], [1050, "id6"]], "Changes impacting all modules": [[1047, "changes-impacting-all-modules"], [1047, "id8"], [1048, "changes-impacting-all-modules"], [1048, "id5"], [1049, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1049, "changes-impacting-many-modules"], [1050, "changes-impacting-many-modules"], [1050, "id1"], [1050, "id5"]], "Changes to estimator checks": [[1040, "changes-to-estimator-checks"], [1041, "changes-to-estimator-checks"], [1042, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[383, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[318, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[186, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[999, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[412, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[395, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[389, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[272, null]], "Class likelihood ratios": [[1001, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[423, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [178, "classification"], [183, "classification"], [997, "classification"], [1004, "id4"], [1005, "classification"], [1015, "classification"], [1016, "classification"], [1017, "classification"]], "Classification and ROC analysis": [[279, "classification-and-roc-analysis"]], "Classification criteria": [[1017, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1001, "classification-metrics"]], "Classification of text documents using sparse features": [[350, null]], "Classification pipeline": [[102, "classification-pipeline"]], "Classification report": [[1001, "classification-report"]], "Classifier Training": [[204, "classifier-training"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[835, null], [1002, "classifierchain"]], "ClassifierMixin": [[424, null]], "ClassifierTags": [[920, null]], "Clear definition of the public API": [[1042, "clear-definition-of-the-public-api"]], "Cloning": [[377, "cloning"]], "Closing issues: a tough call": [[374, null]], "Cluster centers - MiniBatchKMeans": [[120, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[425, null]], "Clustering": [[71, null], [183, "clustering"], [407, null]], "Clustering evaluation summary": [[351, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[412, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1001, "clustering-metrics"]], "Clustering performance evaluation": [[407, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[351, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[351, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1036, "code-contributors"], [1037, "code-contributors"], [1038, "code-contributors"], [1038, "id7"]], "Code Review Guidelines": [[375, "code-review-guidelines"]], "Code and Documentation Contributors": [[1039, "code-and-documentation-contributors"], [1039, "id10"], [1040, "code-and-documentation-contributors"], [1040, "id8"], [1040, "id21"], [1040, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[377, "coding-guidelines"]], "Coefficients comparison": [[282, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1001, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[102, null]], "Column Transformer with Mixed Types": [[103, null]], "ColumnTransformer": [[463, null]], "ColumnTransformer for heterogeneous data": [[408, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[326, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[154, null]], "Combining the display objects into a single plot": [[239, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[375, "commit-message-markers"]], "Common Vectorizer usage": [[415, "common-vectorizer-usage"]], "Common cases: predefined values": [[1001, "common-cases-predefined-values"]], "Common estimator checks": [[403, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[358, null]], "Common pitfalls and subtleties": [[358, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[186, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[240, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[305, null]], "Compare cross decomposition methods": [[115, null]], "Compare different approaches to setting the regularization parameter": [[109, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[309, null]], "Compare times of SVR and Kernel Ridge Regression": [[244, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[164, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[193, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[297, null]], "Comparing QuantileRegressor and LinearRegression": [[213, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[140, null]], "Comparing Target Encoder with Other Encoders": [[315, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[238, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[95, null]], "Comparing random forests and the multi-output meta estimator": [[153, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[277, null]], "Comparing the results": [[191, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[198, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[198, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[269, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[269, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[218, null]], "Comparison between grid search and successive halving": [[280, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[163, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[128, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[231, null]], "Comparison of kernel ridge and Gaussian process regression": [[170, null]], "Comparison of kernel ridge regression and SVR": [[244, null]], "Comparison of results": [[111, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[97, null]], "Comparison with special purpose text vectorizers": [[352, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[997, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1003, "complement-naive-bayes"]], "ComplementNB": [[841, null]], "Complexity": [[1004, "complexity"], [1005, "complexity"], [1015, "complexity"], [1016, "complexity"], [1017, "complexity"]], "Complexity analysis": [[271, "complexity-analysis"]], "Composite estimators and parameter spaces": [[990, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[612, null]], "Compression via vector quantization": [[86, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1008, "computation-methods"]], "Computation times": [[1022, null]], "Computational Performance": [[362, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[82, "compute-dbscan"]], "Compute clustering": [[81, "compute-clustering"], [100, "compute-clustering"], [100, "id1"]], "Compute clustering with KMeans": [[97, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[96, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[97, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[216, "compute-paths"]], "Compute regularization path": [[205, "compute-regularization-path"]], "Compute score and computation times": [[140, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[109, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[411, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[361, null]], "Concatenating multiple feature extraction methods": [[106, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[254, null]], "Concluding remarks": [[43, "concluding-remarks"], [235, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [201, "conclusion"], [208, "conclusion"], [286, "conclusion"], [292, "conclusion"], [316, "conclusion"], [343, "conclusion"]], "Conclusions": [[197, "conclusions"]], "Configuration switches": [[363, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[362, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[262, null], [1001, "confusion-matrix"]], "ConfusionMatrixDisplay": [[697, null]], "Connectivity graph of an image": [[415, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[263, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[613, null]], "Construct the kernel-based regression models": [[244, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[245, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[245, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[407, "contingency-matrix"]], "Continuous Integration (CI)": [[375, "continuous-integration-ci"]], "Contributing": [[375, null], [387, "contributing"]], "Contributing code": [[375, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[390, "contributors"]], "Controlling randomness": [[358, "controlling-randomness"]], "Controlling the tree size": [[414, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[134, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[571, null]], "Core Contributors": [[390, "core-contributors"]], "Cosine similarity": [[999, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[263, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[263, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[588, null]], "Covariance estimation": [[108, null], [183, "covariance-estimation"], [409, null]], "Coverage error": [[1001, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[380, null]], "Create ConfusionMatrixDisplay": [[239, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[239, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[239, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[316, "create-synthetic-dataset"]], "Create a random 1D dataset": [[356, "create-a-random-1d-dataset"]], "Create a random dataset": [[356, "create-a-random-dataset"]], "Create multi-label data, fit, and predict": [[276, "create-multi-label-data-fit-and-predict"]], "Create the data": [[127, "create-the-data"]], "Create the pipeline": [[342, "create-the-pipeline"]], "Creating a dataset": [[343, "creating-a-dataset"]], "Creating a non-noisy data set": [[215, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[134, "creating-the-dataset"]], "Creating transformers": [[102, "creating-transformers"]], "Cross decomposition": [[114, null], [183, "cross-decomposition"], [410, null]], "Cross validation and model selection": [[411, "cross-validation-and-model-selection"]], "Cross validation iterators": [[411, "cross-validation-iterators"]], "Cross validation of time series data": [[411, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[411, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[411, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[411, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[272, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[159, null]], "Cross-validation: evaluating estimator performance": [[411, null]], "Curve Fitting with Bayesian Ridge Regression": [[194, null]], "Custom Kernels": [[1016, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[326, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[267, null]], "Custom transformers": [[1011, "custom-transformers"]], "Customizing the vectorizer classes": [[415, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[376, null]], "DBSCAN": [[407, "dbscan"], [443, null]], "DO NOT report your data unless it is extremely necessary": [[380, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[188, "data-loading-and-feature-engineering"]], "Data Loading and Preparation": [[208, "data-loading-and-preparation"]], "Data Preparation": [[144, "data-preparation"]], "Data Publica": [[1025, "id21"]], "Data and sample properties": [[389, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [82, "data-generation"], [90, "data-generation"], [150, "data-generation"], [167, "data-generation"], [176, "data-generation"], [259, "data-generation"], [328, "data-generation"], [346, "data-generation"]], "Data generation and model fitting": [[141, "data-generation-and-model-fitting"]], "Data leakage": [[358, "data-leakage"]], "Data leakage during pre-processing": [[358, "data-leakage-during-pre-processing"]], "Data loading": [[270, "data-loading"]], "Data preprocessing": [[147, "data-preprocessing"]], "DataConversionWarning": [[572, null]], "DataDimensionalityWarning": [[573, null]], "DataFrame Support": [[1049, "dataframe-support"]], "DataRobot": [[1025, "id18"]], "Dataiku": [[1025, "id25"]], "Dataset": [[62, "dataset"], [201, "dataset"], [275, "dataset"]], "Dataset Generation": [[204, "dataset-generation"]], "Dataset Versions": [[369, "dataset-versions"]], "Dataset and Gaussian process generation": [[179, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[276, "dataset-and-model"]], "Dataset based latent variables model": [[115, "dataset-based-latent-variables-model"]], "Dataset examples": [[117, null], [183, "dataset-examples"]], "Dataset generation": [[177, "dataset-generation"], [213, "dataset-generation"]], "Dataset loading utilities": [[368, null], [380, "dataset-loading-utilities"]], "Dataset preparation": [[120, "dataset-preparation"], [231, "dataset-preparation"]], "Dataset preprocessing and model training": [[248, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[367, null]], "Datasets in svmlight / libsvm format": [[369, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[407, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[393, "debian-ubuntu"]], "Debugging CI issues": [[383, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[383, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Boundaries Visualization": [[204, "decision-boundaries-visualization"]], "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression": [[204, null]], "Decision Making Process": [[390, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[243, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[356, null]], "Decision Tree Regression with AdaBoost": [[135, null]], "Decision Tree Regression with Multi-Output Targets": [[356, "decision-tree-regression-with-multi-output-targets"]], "Decision Tree on a 1D Regression Task": [[356, "decision-tree-on-a-1d-regression-task"]], "Decision Trees": [[183, "decision-trees"], [353, null], [1017, null]], "Decision boundary": [[292, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[333, null]], "Decision path": [[357, "decision-path"]], "DecisionBoundaryDisplay": [[631, null]], "DecisionTreeClassifier": [[912, null]], "DecisionTreeRegressor": [[913, null]], "Decoding text files": [[415, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[412, null]], "Decomposition": [[119, null], [120, "decomposition"], [183, "decomposition"]], "Decomposition: Dictionary learning": [[120, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[264, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[231, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[91, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[267, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[352, "define-preprocessing-functions"]], "Define structure of the data": [[81, "define-structure-of-the-data"]], "Define the classifiers": [[266, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1001, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[82, null]], "Demo of HDBSCAN clustering algorithm": [[88, null]], "Demo of OPTICS clustering algorithm": [[98, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[312, null]], "Demonstration of k-means assumptions": [[90, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[273, null]], "Density Estimation": [[413, null]], "Density Estimation for a Gaussian mixture": [[258, null]], "Density Estimation: Histograms": [[413, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1016, "density-estimation-novelty-detection"]], "DensityMixin": [[426, null]], "Dependencies": [[373, "dependencies"]], "Deprecation": [[375, "deprecation"]], "Deprecation / Default Value Change": [[245, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1042, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[185, "description-of-the-simulated-data"]], "Design the proper kernel": [[175, "design-the-proper-kernel"]], "DetCurveDisplay": [[698, null]], "Detection error tradeoff (DET)": [[1001, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[266, null]], "Developer API for HTML representation": [[377, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[377, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[377, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[383, null]], "Developer\u2019s Guide": [[378, null]], "Developing Estimators": [[131, null], [183, "developing-estimators"]], "Developing scikit-learn estimators": [[377, null]], "Developing with the Plotting API": [[382, null]], "Diabetes dataset": [[372, "diabetes-dataset"]], "DictVectorizer": [[352, "dictvectorizer"], [581, null]], "Dictionary Learning": [[412, "dictionary-learning"]], "Dictionary learning": [[120, "dictionary-learning"]], "Dictionary learning - positive code": [[120, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[120, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[120, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[531, null]], "Differences between solvers": [[997, "differences-between-solvers"]], "Different label assignment strategies": [[407, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[407, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[377, "different-objects"]], "Different scenario and useful concepts": [[997, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[398, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[160, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[298, null]], "Dimensionality reduction": [[1004, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[995, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1011, "discretization"]], "Dispatching": [[385, null]], "Display Objects": [[1029, "display-objects"]], "Display code coverage in pull requests": [[383, "display-code-coverage-in-pull-requests"]], "Display results": [[216, "display-results"]], "Display the distorted image": [[123, "display-the-distorted-image"]], "Displaying Pipelines": [[250, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[250, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[250, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[250, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[250, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[250, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[240, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[699, null]], "Do you plan to implement transform for target y in a pipeline?": [[387, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[387, "do-you-support-pypy"]], "Documentation": [[375, "documentation"], [1032, "documentation"]], "Documentation Resources": [[1024, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1035, "documentation-improvements"], [1036, "documentation-improvements"]], "Does scikit-learn work natively with various types of dataframes?": [[387, "does-scikit-learn-work-natively-with-various-types-of-dataframes"]], "Domain specific packages": [[1020, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[417, "dot-product-kernel"]], "Dot-product kernel": [[179, "dot-product-kernel"]], "DotProduct": [[614, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[182, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[154, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[369, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null]], "Dummy estimators": [[1001, "dummy-estimators"]], "DummyClassifier": [[551, null]], "DummyRegressor": [[552, null]], "D\u00b2 score": [[1001, "d2-score"]], "D\u00b2 score for classification": [[1001, "d2-score-for-classification"]], "Earlier versions": [[1032, "earlier-versions"]], "Early stopping in Gradient Boosting": [[144, null]], "Early stopping of Stochastic Gradient Descent": [[219, null]], "Effect of model regularization on training and test error": [[282, null]], "Effect of number of trees and early stopping": [[149, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[314, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[314, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[314, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[107, null]], "Effect of varying threshold for self-training": [[331, null]], "EfficiencyWarning": [[574, null]], "Efficient Linear Algebra & Array Operations": [[384, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[384, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[384, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[120, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[997, "elastic-net"]], "ElasticNet": [[197, "elasticnet"], [646, null]], "ElasticNetCV": [[647, null]], "EllipticEnvelope": [[468, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[232, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[409, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[94, null]], "Empirical validation": [[242, "empirical-validation"]], "EmpiricalCovariance": [[469, null]], "Encoding categorical features": [[1011, "encoding-categorical-features"]], "Encoding strategy": [[86, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1043, "enforcing-keyword-only-arguments"], [1045, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[390, "enhancement-proposals-sleps"]], "Enhancements": [[1035, "enhancements"], [1036, "enhancements"], [1037, "enhancements"], [1038, "enhancements"], [1038, "id4"], [1039, "enhancements"], [1039, "id3"]], "Enriched estimator displays": [[325, "enriched-estimator-displays"]], "Ensemble methods": [[133, null], [183, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[414, null]], "Environment variables": [[363, "environment-variables"]], "Error Calculation": [[144, "error-calculation"]], "Error caused by file path length limit on Windows": [[393, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[134, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[191, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[97, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[191, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[191, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[113, "estimate-the-covariance"]], "Estimate the score": [[182, "estimate-the-score"]], "Estimated Attributes": [[377, "estimated-attributes"]], "Estimation algorithms": [[995, "estimation-algorithms"]], "Estimator Tags": [[377, "estimator-tags"]], "Estimator types": [[377, "estimator-types"]], "Estimators": [[358, "estimators"], [358, "id2"], [377, "estimators"], [403, "estimators"]], "Estimators that handle NaN values": [[991, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[282, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[112, "evaluation"], [307, "evaluation"]], "Evaluation metrics": [[263, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[248, null]], "Evaluation of the calibration of predictions": [[211, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[211, "evaluation-of-the-ranking-power"]], "Evernote": [[1025, "id6"]], "Exact Kernel PCA": [[412, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[412, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[403, "example-usage"]], "Example with noise-free target": [[177, "example-with-noise-free-target"]], "Example with noisy targets": [[177, "example-with-noisy-targets"]], "Examples": [[183, null], [364, "examples"], [406, "examples"], [1032, "examples"]], "Examples based on real world datasets": [[42, null], [183, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[990, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[179, "exp-sine-squared-kernel"], [417, "exp-sine-squared-kernel"]], "ExpSineSquared": [[615, null]], "Experimental / Under Development": [[1048, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[323, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[379, "experimental-features"]], "Explained variance score": [[1001, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[243, null]], "Exponentiation": [[616, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1019, null]], "External Tutorials": [[1019, "external-tutorials"]], "External dependencies": [[1032, "external-dependencies"]], "ExtraTreeClassifier": [[914, null]], "ExtraTreeRegressor": [[915, null]], "ExtraTreesClassifier": [[557, null]], "ExtraTreesRegressor": [[558, null]], "Extract noisy patches and reconstruct them using the dictionary": [[123, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[123, "extract-reference-patches"]], "Extracting features": [[364, "extracting-features"]], "Extremely Randomized Trees": [[414, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[247, null]], "Faces dataset decompositions": [[120, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[412, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[130, null]], "Factor Analysis components - FA": [[120, "factor-analysis-components-fa"]], "FactorAnalysis": [[532, null]], "Failure of Machine Learning to infer causal effects": [[185, null]], "FastICA": [[533, null]], "FastICA on 2D point clouds": [[122, null]], "Faster parser in fetch_openml": [[323, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[362, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[351, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[321, "feature-names-support"]], "Feature Selection": [[162, null], [183, "feature-selection"]], "Feature agglomeration": [[84, null], [1018, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[87, null]], "Feature binarization": [[1011, "feature-binarization"]], "Feature discretization": [[311, null]], "Feature extraction": [[415, null]], "Feature hashing": [[415, "feature-hashing"]], "Feature importance based on feature permutation": [[141, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[141, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance evaluation": [[414, "feature-importance-evaluation"]], "Feature importance from coefficients": [[168, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[141, null]], "Feature normalization": [[191, "feature-normalization"]], "Feature scaling": [[1018, null]], "Feature selection": [[416, null]], "Feature selection as part of a pipeline": [[416, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[416, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[416, null]], "Feature transformations with ensembles of trees": [[139, null]], "FeatureAgglomeration": [[407, null], [444, null]], "FeatureHasher": [[352, "featurehasher"], [582, null]], "FeatureHasher and DictVectorizer Comparison": [[352, null]], "FeatureUnion": [[863, null]], "FeatureUnion: composite feature spaces": [[408, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[149, null]], "Fedora": [[393, "fedora"]], "Final conclusion": [[170, "final-conclusion"]], "Final remarks": [[90, "final-remarks"]], "Finding the Nearest Neighbors": [[1004, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[121, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[194, "fit-by-cubic-polynomial"]], "Fit models": [[206, "fit-models"], [288, "fit-models"]], "Fit models and plot results": [[90, "fit-models-and-plot-results"]], "Fit regression model": [[147, "fit-regression-model"], [301, "fit-regression-model"], [345, "fit-regression-model"], [356, "fit-regression-model"], [356, "id1"]], "Fit the model for outlier detection (default)": [[296, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[127, "fit-the-models"]], "Fit the regressors": [[193, "fit-the-regressors"], [193, "id2"]], "FitFailedWarning": [[575, null]], "Fitting": [[377, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[213, "fitting-a-quantileregressor"]], "Fitting additional trees": [[414, "fitting-additional-trees"]], "Fitting additional weak-learners": [[414, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[195, null]], "Fitting an elliptic envelope": [[1007, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[388, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[146, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1045, "fixed-models"]], "FixedThresholdClassifier": [[799, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[326, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1032, "fixes"]], "Flexibility of IterativeImputer": [[991, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[383, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[175, null]], "Forest covertypes": [[370, "forest-covertypes"]], "Forest covertypes dataset": [[248, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[407, "fowlkes-mallows-scores"]], "FreeBSD": [[373, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[229, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[387, null]], "From binary to multiclass and multilabel": [[1001, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[374, null]], "FunctionTransformer": [[868, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[257, null]], "GMM covariances": [[256, null]], "GPC examples": [[417, "gpc-examples"]], "Gallery examples": [[421, "gallery-examples"], [424, "gallery-examples"], [427, "gallery-examples"], [430, "gallery-examples"], [431, "gallery-examples"], [436, "gallery-examples"], [437, "gallery-examples"], [439, "gallery-examples"], [440, "gallery-examples"], [441, "gallery-examples"], [442, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [457, "gallery-examples"], [459, "gallery-examples"], [461, "gallery-examples"], [463, "gallery-examples"], [464, "gallery-examples"], [465, "gallery-examples"], [466, "gallery-examples"], [467, "gallery-examples"], [468, "gallery-examples"], [469, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [478, "gallery-examples"], [481, "gallery-examples"], [482, "gallery-examples"], [483, "gallery-examples"], [487, "gallery-examples"], [488, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [491, "gallery-examples"], [492, "gallery-examples"], [494, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [498, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [502, "gallery-examples"], [504, "gallery-examples"], [510, "gallery-examples"], [511, "gallery-examples"], [512, "gallery-examples"], [513, "gallery-examples"], [514, "gallery-examples"], [515, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [530, "gallery-examples"], [532, "gallery-examples"], [533, "gallery-examples"], [534, "gallery-examples"], [535, "gallery-examples"], [536, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [549, "gallery-examples"], [550, "gallery-examples"], [551, "gallery-examples"], [552, "gallery-examples"], [553, "gallery-examples"], [554, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [581, "gallery-examples"], [582, "gallery-examples"], [584, "gallery-examples"], [587, "gallery-examples"], [588, "gallery-examples"], [589, "gallery-examples"], [590, "gallery-examples"], [591, "gallery-examples"], [593, "gallery-examples"], [594, "gallery-examples"], [597, "gallery-examples"], [599, "gallery-examples"], [600, "gallery-examples"], [602, "gallery-examples"], [604, "gallery-examples"], [605, "gallery-examples"], [606, "gallery-examples"], [607, "gallery-examples"], [608, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [617, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [625, "gallery-examples"], [627, "gallery-examples"], [628, "gallery-examples"], [630, "gallery-examples"], [631, "gallery-examples"], [632, "gallery-examples"], [633, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [641, "gallery-examples"], [643, "gallery-examples"], [644, "gallery-examples"], [645, "gallery-examples"], [646, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [655, "gallery-examples"], [656, "gallery-examples"], [657, "gallery-examples"], [658, "gallery-examples"], [659, "gallery-examples"], [662, "gallery-examples"], [664, "gallery-examples"], [665, "gallery-examples"], [666, "gallery-examples"], [668, "gallery-examples"], [669, "gallery-examples"], [670, "gallery-examples"], [671, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [684, "gallery-examples"], [688, "gallery-examples"], [689, "gallery-examples"], [690, "gallery-examples"], [691, "gallery-examples"], [692, "gallery-examples"], [693, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [700, "gallery-examples"], [701, "gallery-examples"], [702, "gallery-examples"], [703, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [709, "gallery-examples"], [712, "gallery-examples"], [713, "gallery-examples"], [717, "gallery-examples"], [718, "gallery-examples"], [719, "gallery-examples"], [727, "gallery-examples"], [729, "gallery-examples"], [732, "gallery-examples"], [734, "gallery-examples"], [735, "gallery-examples"], [737, "gallery-examples"], [738, "gallery-examples"], [741, "gallery-examples"], [742, "gallery-examples"], [745, "gallery-examples"], [746, "gallery-examples"], [748, "gallery-examples"], [749, "gallery-examples"], [750, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [755, "gallery-examples"], [757, "gallery-examples"], [761, "gallery-examples"], [778, "gallery-examples"], [779, "gallery-examples"], [782, "gallery-examples"], [784, "gallery-examples"], [785, "gallery-examples"], [786, "gallery-examples"], [787, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [795, "gallery-examples"], [797, "gallery-examples"], [798, "gallery-examples"], [799, "gallery-examples"], [800, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [814, "gallery-examples"], [815, "gallery-examples"], [816, "gallery-examples"], [817, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [837, "gallery-examples"], [839, "gallery-examples"], [841, "gallery-examples"], [842, "gallery-examples"], [843, "gallery-examples"], [846, "gallery-examples"], [847, "gallery-examples"], [848, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [857, "gallery-examples"], [860, "gallery-examples"], [861, "gallery-examples"], [862, "gallery-examples"], [863, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [871, "gallery-examples"], [873, "gallery-examples"], [874, "gallery-examples"], [876, "gallery-examples"], [877, "gallery-examples"], [878, "gallery-examples"], [879, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [888, "gallery-examples"], [890, "gallery-examples"], [893, "gallery-examples"], [897, "gallery-examples"], [898, "gallery-examples"], [900, "gallery-examples"], [901, "gallery-examples"], [902, "gallery-examples"], [904, "gallery-examples"], [907, "gallery-examples"], [908, "gallery-examples"], [909, "gallery-examples"], [910, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [918, "gallery-examples"], [919, "gallery-examples"], [933, "gallery-examples"], [943, "gallery-examples"], [945, "gallery-examples"], [952, "gallery-examples"], [957, "gallery-examples"], [958, "gallery-examples"], [959, "gallery-examples"], [960, "gallery-examples"], [961, "gallery-examples"], [974, "gallery-examples"], [984, "gallery-examples"]], "Gamma loss for gradient boosting": [[324, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[648, null]], "Gaussian Mixture": [[1000, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[255, null]], "Gaussian Mixture Model Selection": [[259, null]], "Gaussian Mixture Model Sine Curve": [[260, null]], "Gaussian Mixture Models": [[183, "gaussian-mixture-models"], [253, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1003, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[417, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[417, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[169, null], [183, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[417, null]], "Gaussian Processes regression: basic introductory example": [[177, null]], "Gaussian mixture models": [[1000, null]], "Gaussian process classification (GPC) on iris dataset": [[172, null], [417, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[170, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[178, null]], "Gaussian random projection": [[1013, "gaussian-random-projection"]], "GaussianMixture": [[798, null]], "GaussianNB": [[842, null]], "GaussianProcessClassifier": [[610, null]], "GaussianProcessRegressor": [[611, null]], "GaussianRandomProjection": [[896, null]], "General Concepts": [[389, "general-concepts"]], "General recommendations": [[358, "general-recommendations"]], "Generalized Linear Models": [[183, "generalized-linear-models"], [192, null], [997, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[319, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[81, "generate-data"], [100, "generate-data"], [111, "generate-data"], [206, "generate-data"], [307, "generate-data"]], "Generate data with outliers": [[296, "generate-data-with-outliers"]], "Generate distorted image": [[123, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [96, "generate-sample-data"], [109, "generate-sample-data"], [121, "generate-sample-data"], [122, "generate-sample-data"], [164, "generate-sample-data"], [244, "generate-sample-data"], [282, "generate-sample-data"], [301, "generate-sample-data"], [345, "generate-sample-data"]], "Generate sinusoidal data with noise": [[194, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[266, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [193, "generate-synthetic-dataset"], [193, "id1"], [197, "generate-synthetic-dataset"]], "Generate the data": [[97, "generate-the-data"], [99, "generate-the-data"], [113, "generate-the-data"]], "Generated datasets": [[371, null]], "Generated documentation on GitHub Actions": [[375, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[170, "generating-a-dataset"]], "Generating polynomial features": [[1011, "generating-polynomial-features"]], "Generators for classification and clustering": [[371, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[371, "generators-for-decomposition"]], "Generators for manifold learning": [[371, "generators-for-manifold-learning"]], "Generators for regression": [[371, "generators-for-regression"]], "Generic dictionary learning": [[412, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[592, null]], "Getting Started": [[388, null]], "Getting reproducible results across multiple executions": [[358, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1024, "gitter"]], "Glossary of Common Terms and API Elements": [[389, null]], "Good practices": [[380, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[390, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[145, null]], "Gradient Boosting Regression Trees for Poisson regression": [[211, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[147, null]], "Gradient Boosting regularization": [[148, null]], "Gradient boosting": [[187, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[143, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[143, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[143, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[143, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[414, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[559, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[414, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[414, null]], "GradientBoostingRegressor": [[560, null]], "Graph Routines": [[384, "graph-routines"]], "Graphical model and parametrization": [[1006, "graphical-model-and-parametrization"]], "GraphicalLasso": [[470, null]], "GraphicalLassoCV": [[471, null]], "GridSearchCV": [[800, null]], "Group Shuffle Split": [[411, "group-shuffle-split"]], "Group k-fold": [[411, "group-k-fold"]], "GroupKFold": [[801, null]], "GroupShuffleSplit": [[802, null]], "Grouping infrequent categories in OneHotEncoder": [[322, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[324, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[407, "hdbscan"], [445, null]], "HDBSCAN: hierarchical density-based clustering": [[324, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[803, null]], "HalvingRandomSearchCV": [[804, null]], "Hamming loss": [[1001, "hamming-loss"]], "Handling Multicollinear Features": [[189, "handling-multicollinear-features"]], "Hash Functions": [[384, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[152, null]], "HashingVectorizer": [[351, "hashingvectorizer"], [589, null]], "Helper Functions": [[384, "helper-functions"]], "Helper function": [[179, "helper-function"]], "Helper function to plot embedding": [[232, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[998, "hessian-eigenmapping"]], "Hierarchical Clustering": [[407, "id11"]], "Hierarchical clustering": [[407, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[100, null]], "Higher-level parallelism with joblib": [[363, "higher-level-parallelism-with-joblib"]], "Highlights": [[1032, "highlights"], [1035, "highlights"], [1036, "highlights"], [1039, "highlights"], [1040, "highlights"]], "Hinge loss": [[1001, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[325, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[561, null]], "HistGradientBoostingRegressor": [[562, null]], "Histogram-Based Gradient Boosting": [[414, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[321, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[407, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[387, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[387, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[387, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[387, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[387, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[387, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[387, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[387, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[358, "how-to-avoid-data-leakage"]], "How to contribute": [[375, "how-to-contribute"]], "How to make a good bug report": [[375, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[381, null]], "HowAboutWe": [[1025, "id16"]], "Huber Regression": [[997, "huber-regression"]], "HuberRegressor": [[649, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[196, null]], "Hugging Face": [[1025, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[617, null]], "Hyperparameter Robustness": [[88, "hyperparameter-robustness"]], "Hyperplanes Visualization": [[204, "hyperplanes-visualization"]], "ICE vs. PDP": [[187, "ice-vs-pdp"]], "INFONEA": [[1025, "id24"]], "Illustration of GPC on the XOR dataset": [[417, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[174, null]], "Illustration of Pipeline and GridSearchCV": [[104, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[179, null]], "Image denoising using dictionary learning": [[123, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[415, "image-feature-extraction"]], "Implementation": [[1004, "implementation"]], "Implementation decisions": [[387, "implementation-decisions"]], "Implementation details": [[1015, "implementation-details"], [1016, "implementation-details"]], "Implementing your own scoring object": [[1001, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[314, null]], "Important notes regarding the internal cross-validation": [[406, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[323, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[325, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[320, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[319, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[991, null], [1011, "imputation-of-missing-values"]], "Impute missing values with mean": [[182, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[182, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[182, null]], "Imputing missing values with variants of IterativeImputer": [[181, null]], "In binary classification settings": [[276, "in-binary-classification-settings"]], "In multi-label settings": [[276, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[185, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[185, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[358, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[576, null]], "Incremental PCA": [[124, null], [412, "incremental-pca"]], "Incremental learning": [[364, "incremental-learning"]], "IncrementalPCA": [[534, null]], "Independent component analysis (ICA)": [[412, "independent-component-analysis-ica"]], "Independent components - FastICA": [[120, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[320, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1008, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[89, null]], "Influence of the Input Data Representation": [[362, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[362, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[362, "influence-of-the-number-of-features"]], "Information Criterion": [[990, "information-criterion"]], "Information-criteria based model selection": [[997, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1011, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[407, null]], "Input validation": [[377, "input-validation"]], "InputTags": [[921, null]], "Inria": [[1025, "id3"]], "Inspection": [[183, "inspection"], [184, null], [392, null]], "Installing nightly builds": [[373, "installing-nightly-builds"]], "Installing scikit-learn": [[393, null]], "Installing the development version of scikit-learn": [[373, null]], "Installing the latest release": [[393, "installing-the-latest-release"]], "Instantiation": [[377, "instantiation"]], "Intel Extension for Scikit-learn": [[393, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[414, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[323, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1020, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[175, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[414, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[186, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[186, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[215, "interpreting-the-plots"]], "Introducing the set_output API": [[252, null]], "Introduction": [[998, "introduction"]], "Invariance with respect to prevalence": [[272, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1013, "inverse-transform"]], "Iris plants dataset": [[372, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[173, null]], "Isolation Forest": [[1007, "isolation-forest"]], "IsolationForest": [[563, null]], "IsolationForest example": [[150, null]], "Isomap": [[688, null], [998, "isomap"]], "Isomap Embedding": [[231, "isomap-embedding"]], "Isotonic": [[405, "isotonic"]], "Isotonic Regression": [[241, null]], "Isotonic regression": [[992, null]], "IsotonicRegression": [[635, null]], "Issue Tracker Tags": [[375, "issue-tracker-tags"]], "Issues for New Contributors": [[375, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[182, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[627, null]], "J.P.Morgan": [[1025, "id1"]], "Jaccard similarity coefficient score": [[1001, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[206, null]], "K-D Tree": [[1004, "k-d-tree"]], "K-bins discretization": [[1011, "k-bins-discretization"]], "K-fold": [[411, "k-fold"]], "K-means": [[407, "k-means"]], "K-means clustering on text features": [[351, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[292, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[869, null]], "KDDCup99 - SA dataset": [[248, "kddcup99-sa-dataset"]], "KDTree": [[845, null]], "KDTree and BallTree Classes": [[1004, "kdtree-and-balltree-classes"]], "KFold": [[805, null]], "KMeans": [[446, null]], "KNN Based Imputation": [[318, "knn-based-imputation"]], "KNNImputer": [[628, null]], "KNeighborsClassifier": [[846, null]], "KNeighborsRegressor": [[847, null]], "KNeighborsTransformer": [[848, null]], "Kddcup 99 dataset": [[370, "kddcup-99-dataset"]], "Keeping the number of features constant": [[991, "keeping-the-number-of-features-constant"]], "Kernel": [[618, null]], "Kernel Approximation": [[183, "kernel-approximation"], [190, null], [993, null]], "Kernel Density Estimate of Species Distributions": [[302, null]], "Kernel Density Estimation": [[293, null], [413, "kernel-density-estimation"]], "Kernel PCA": [[125, null]], "Kernel Principal Component Analysis (kPCA)": [[412, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[179, "kernel-cookbook"]], "Kernel functions": [[1016, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[170, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[417, "kernel-operators"]], "Kernel ridge": [[170, "kernel-ridge"]], "Kernel ridge regression": [[994, null]], "KernelCenterer": [[870, null]], "KernelDensity": [[849, null]], "KernelPCA": [[535, null]], "KernelRidge": [[643, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[417, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[321, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1040, "known-major-bugs"], [1041, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[203, null]], "L1-based feature selection": [[416, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[197, null]], "L1-penalty case": [[346, "l1-penalty-case"]], "L2-penalty case": [[346, "l2-penalty-case"]], "LARS Lasso": [[997, "lars-lasso"]], "LDA": [[995, "lda"]], "Label Propagation": [[1014, "label-propagation"]], "Label Propagation digits active learning": [[329, null]], "Label Propagation digits: Demonstrating performance": [[328, null]], "Label Propagation learning a complex structure": [[330, null]], "Label binarization": [[1012, "label-binarization"]], "Label encoding": [[1012, "label-encoding"]], "Label ranking average precision": [[1001, "label-ranking-average-precision"]], "LabelBinarizer": [[871, null], [1012, "labelbinarizer"]], "LabelEncoder": [[872, null]], "LabelPropagation": [[899, null]], "LabelSpreading": [[900, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[999, "laplacian-kernel"]], "Lars": [[650, null]], "LarsCV": [[651, null]], "Lasso": [[197, "lasso"], [652, null], [997, "lasso"]], "Lasso model selection via information criteria": [[199, null]], "Lasso model selection: AIC-BIC / cross-validation": [[201, null]], "Lasso on dense and sparse data": [[198, null]], "Lasso via coordinate descent": [[201, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[201, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[200, null]], "LassoCV": [[653, null]], "LassoLars": [[654, null]], "LassoLarsCV": [[655, null]], "LassoLarsIC": [[656, null]], "Latent Dirichlet Allocation (LDA)": [[412, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[536, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[123, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[83, "learn-the-dictionary-of-images"]], "Learning Curve": [[271, "learning-curve"]], "Learning Git": [[375, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[299, "learning-an-embedding"]], "Learning curve": [[996, "learning-curve"]], "LearningCurveDisplay": [[806, null]], "Least Angle Regression": [[997, "least-angle-regression"]], "Leave One Group Out": [[411, "leave-one-group-out"]], "Leave One Out (LOO)": [[411, "leave-one-out-loo"]], "Leave P Groups Out": [[411, "leave-p-groups-out"]], "Leave P Out (LPO)": [[411, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[807, null]], "LeaveOneOut": [[808, null]], "LeavePGroupsOut": [[809, null]], "LeavePOut": [[810, null]], "Ledoit-Wolf shrinkage": [[409, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[110, null]], "LedoitWolf": [[472, null]], "Lessons learned": [[185, "lessons-learned"], [186, "lessons-learned"]], "Limitations of a simple linear model": [[170, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[415, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[362, "limiting-working-memory"]], "Limiting the number of splits": [[143, "limiting-the-number-of-splits"]], "Linear Models": [[997, null]], "Linear algebra libraries": [[362, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[995, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[343, "linear-kernel"], [999, "linear-kernel"]], "Linear models with regularization": [[186, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[186, "linear-models-with-sparse-coefficients"]], "Linear regression model": [[208, "linear-regression-model"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[549, null]], "LinearRegression": [[657, null]], "LinearSVC": [[904, null]], "LinearSVR": [[905, null]], "Link to R\u00b2 score, the coefficient of determination": [[1001, null]], "Links": [[362, "links"]], "Linnerrud dataset": [[372, "linnerrud-dataset"]], "Linux": [[373, "linux"]], "Linux compilers from conda-forge": [[373, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[373, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[143, "load-ames-housing-dataset"]], "Load Data": [[352, "load-data"]], "Load Data and Train a SVC": [[251, "load-data-and-train-a-svc"]], "Load Data and train model": [[239, "load-data-and-train-model"]], "Load and prepare data": [[278, "load-and-prepare-data"], [279, "load-and-prepare-data"], [314, "load-and-prepare-data"]], "Load and prepare data set": [[339, "load-and-prepare-data-set"]], "Load data": [[205, "load-data"]], "Load dataset": [[140, "load-dataset"]], "Load dataset and apply GridSearchCV": [[159, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[232, "load-digits-dataset"]], "Load some data to play with": [[342, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [83, "load-the-data"], [147, "load-the-data"], [292, "load-the-data"]], "Load the dataset": [[91, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[315, "loading-data-from-openml"]], "Loading a dataset": [[288, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[350, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[229, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[415, "loading-features-from-dicts"]], "Loading from external datasets": [[369, "loading-from-external-datasets"]], "Loading other datasets": [[369, null]], "Loading text data": [[351, "loading-text-data"]], "Loading the Iris dataset": [[126, "loading-the-iris-dataset"]], "Loading the data": [[168, "loading-the-data"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1007, "local-outlier-factor"]], "Local Tangent Space Alignment": [[998, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[850, null]], "Locally Linear Embedding": [[998, "locally-linear-embedding"]], "Locally Linear Embeddings": [[231, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[689, null]], "Lock files": [[375, "lock-files"]], "Log loss": [[1001, "log-loss"]], "Logistic function": [[202, null]], "Logistic regression": [[997, "logistic-regression"]], "LogisticRegression": [[658, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[288, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[659, null]], "Look at the results": [[244, "look-at-the-results"], [345, "look-at-the-results"]], "Loss Functions": [[414, "loss-functions"]], "Lovely": [[1025, "id20"]], "Low-level parallelism": [[407, "low-level-parallelism"], [414, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[363, "lower-level-parallelism-with-openmp"]], "MARS": [[1025, "id28"]], "MDS": [[690, null]], "MLPClassifier": [[861, null]], "MLPRegressor": [[862, null]], "MNIST classification using multinomial logistic + L1": [[227, null]], "MacPorts for Mac OSX": [[393, "macports-for-mac-osx"]], "Machinalis": [[1025, "id22"]], "Mailing Lists": [[1024, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[211, "main-takeaways"]], "Maintainer Information": [[379, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[375, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[414, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[154, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[157, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[233, null]], "Manifold learning": [[183, "manifold-learning"], [230, null], [998, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[232, null]], "Manually setting the decision threshold": [[406, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[263, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[313, null]], "Mapping to a Gaussian distribution": [[1011, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1011, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[991, "marking-imputed-values"]], "Matern": [[619, null]], "Mathematical Definition": [[1008, "mathematical-definition"]], "Mathematical Details": [[993, "mathematical-details"]], "Mathematical formulation": [[404, "mathematical-formulation"], [404, "id3"], [414, "mathematical-formulation"], [1004, "mathematical-formulation"], [1015, "mathematical-formulation"], [1016, "mathematical-formulation"], [1017, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[995, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[995, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1001, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[179, "matern-kernel"], [417, "matern-kernel"]], "Max error": [[1001, "max-error"]], "MaxAbsScaler": [[309, "maxabsscaler"], [873, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1001, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[407, "mean-shift"]], "Mean absolute error": [[1001, "mean-absolute-error"]], "Mean absolute percentage error": [[1001, "mean-absolute-percentage-error"]], "Mean squared error": [[1001, "mean-squared-error"]], "Mean squared logarithmic error": [[1001, "mean-squared-logarithmic-error"]], "MeanShift": [[447, null]], "Measure and plot the results": [[154, "measure-and-plot-the-results"]], "Median absolute error": [[1001, "median-absolute-error"]], "Memory footprint": [[86, "memory-footprint"]], "Memory usage profiling": [[381, "memory-usage-profiling"]], "Merging Pull Requests": [[379, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [403, "meta-estimators"]], "MetaEstimatorMixin": [[427, null]], "Metadata Routing": [[245, null], [324, "metadata-routing"], [389, "metadata-routing"], [398, null], [1049, "metadata-routing"], [1049, "id2"], [1050, "metadata-routing"]], "Metadata Routing Support": [[325, "metadata-routing-support"]], "Metadata Routing Support Status": [[398, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[956, null]], "MetadataRouter": [[957, null]], "MethodMapping": [[958, null]], "Methods": [[389, "methods"]], "Metrics": [[403, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1001, null]], "MinCovDet": [[473, null]], "MinMaxScaler": [[309, "minmaxscaler"], [874, null]], "Mini Batch K-Means": [[407, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[412, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[412, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[537, null]], "MiniBatchKMeans": [[448, null]], "MiniBatchNMF": [[538, null]], "MiniBatchNMF: an online version of NMF": [[322, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[539, null]], "Minimal Cost-Complexity Pruning": [[1017, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1045, "minimal-dependencies"], [1046, "minimal-dependencies"]], "Minimum Covariance Determinant": [[409, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[112, "minimum-covariance-determinant-estimator"]], "Misc": [[1032, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [183, "miscellaneous"], [237, null], [1040, "miscellaneous"], [1040, "id40"], [1041, "miscellaneous"], [1042, "miscellaneous"], [1043, "miscellaneous"], [1043, "id13"], [1044, "miscellaneous"], [1045, "miscellaneous"], [1048, "miscellaneous"]], "Misleading values on strongly correlated features": [[1009, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[180, null], [183, "missing-value-imputation"]], "Missing Values Support": [[1017, "missing-values-support"]], "Missing information": [[182, "missing-information"]], "Missing value support for Random Forest": [[325, "missing-value-support-for-random-forest"]], "Missing values support": [[414, "missing-values-support"]], "Missing values support in decision trees": [[324, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[629, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[362, "model-compression"]], "Model Reshaping": [[362, "model-reshaping"]], "Model Selection": [[183, "model-selection"], [261, null]], "Model Selection Enhancements and API Changes": [[1038, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[144, "model-training-and-comparison"]], "Model comparison": [[143, "model-comparison"]], "Model definition": [[282, "model-definition"]], "Model evaluation": [[208, "model-evaluation"], [388, "model-evaluation"]], "Model fitting and extrapolation": [[175, "model-fitting-and-extrapolation"]], "Model persistence": [[401, null]], "Model selection and evaluation": [[402, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[127, null]], "Model selection: development and evaluation": [[990, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[990, "model-specific-cross-validation"]], "Model training and selection": [[167, "model-training-and-selection"], [259, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[350, "model-with-metadata-stripping"]], "Model without metadata stripping": [[350, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[168, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[307, "models-definition"]], "Models robustness to recover the ground truth weights": [[193, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[998, "modified-locally-linear-embedding"]], "Monitoring performance": [[375, "monitoring-performance"]], "Monotonic Constraints": [[151, null], [414, "monotonic-constraints"]], "Monotonic constraints": [[149, "monotonic-constraints"]], "More control with warm_start": [[1005, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[88, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[134, null]], "Multi-class case": [[1001, "multi-class-case"]], "Multi-class classification": [[1016, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[381, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[998, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[234, null]], "Multi-label case": [[1001, "multi-label-case"]], "Multi-label confusion matrix": [[1001, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1005, "multi-layer-perceptron"]], "Multi-layer perceptron": [[187, "multi-layer-perceptron"]], "Multi-output problems": [[1017, "multi-output-problems"]], "Multi-task Elastic-Net": [[997, "multi-task-elastic-net"]], "Multi-task Lasso": [[997, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[875, null], [1012, "multilabelbinarizer"]], "MultiOutputClassifier": [[836, null], [1002, "multioutputclassifier"]], "MultiOutputRegressor": [[837, null], [1002, "multioutputregressor"]], "MultiTaskElasticNet": [[660, null]], "MultiTaskElasticNetCV": [[661, null]], "MultiTaskLasso": [[662, null]], "MultiTaskLassoCV": [[663, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[278, null]], "Multiclass and multilabel classification": [[1001, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[384, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1002, null]], "Multiclass classification": [[1002, "multiclass-classification"]], "Multiclass methods": [[183, "multiclass-methods"], [285, null]], "Multiclass sparse logistic regression on 20newgroups": [[226, null]], "Multiclass support": [[405, "multiclass-support"]], "Multiclass-multioutput classification": [[1002, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[231, "multidimensional-scaling"]], "Multilabel": [[371, "multilabel"]], "Multilabel classification": [[246, null], [1002, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[288, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1001, "multilabel-ranking-metrics"]], "Multinomial Case": [[997, "multinomial-case"]], "Multinomial Naive Bayes": [[1003, "multinomial-naive-bayes"]], "MultinomialNB": [[843, null]], "Multioutput methods": [[183, "multioutput-methods"], [287, null]], "Multioutput regression": [[1002, "multioutput-regression"]], "Multiple modules": [[1040, "multiple-modules"], [1041, "multiple-modules"]], "Multiple vs. Single Imputation": [[991, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[991, "multivariate-feature-imputation"]], "Mutual Information based scores": [[407, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[407, "mutual-reachability-graph"]], "NMF": [[540, null]], "NMF with a beta-divergence": [[412, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[412, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1003, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[315, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[320, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[318, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[300, null]], "Nearest Centroid Classifier": [[1004, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1004, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[183, "nearest-neighbors"], [290, null], [1004, null]], "Nearest Neighbors Classification": [[292, null], [1004, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1004, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1004, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[301, null]], "Nearest Shrunken Centroid": [[1004, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[991, "nearest-neighbors-imputation"]], "NearestCentroid": [[851, null]], "NearestNeighbors": [[852, null]], "Neighborhood Components Analysis": [[1004, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[299, null]], "NeighborhoodComponentsAnalysis": [[853, null]], "Nested versus non-nested cross-validation": [[274, null]], "NetBSD": [[393, "netbsd"]], "Neural Networks": [[183, "neural-networks"], [303, null]], "Neural network models (supervised)": [[1005, null]], "Neural network models (unsupervised)": [[1006, null]], "New Estimator Classes": [[1033, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[320, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[320, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[320, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[323, "new-and-enhanced-displays"]], "New classes": [[1032, "new-classes"]], "New display ValidationCurveDisplay": [[324, "new-display-validationcurvedisplay"]], "New documentation improvements": [[320, "new-documentation-improvements"], [321, "new-documentation-improvements"]], "New features": [[1035, "new-features"], [1036, "new-features"], [1037, "new-features"], [1038, "new-features"], [1039, "new-features"]], "New plotting API": [[318, "new-plotting-api"]], "New self-training meta-estimator": [[320, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1019, "new-to-scientific-python"]], "Next steps": [[388, "next-steps"]], "Non-Negative Least Squares": [[997, "non-negative-least-squares"]], "Non-linear transformation": [[1011, "non-linear-transformation"]], "Non-negative components - NMF": [[120, "non-negative-components-nmf"]], "Non-negative least squares": [[207, null]], "Non-negative matrix factorization (NMF or NNMF)": [[412, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1011, "normalization"]], "Normalized Discounted Cumulative Gain": [[1001, "normalized-discounted-cumulative-gain"]], "Normalizer": [[309, "normalizer"], [876, null]], "NotFittedError": [[577, null]], "Note on MPS device support": [[403, "note-on-mps-device-support"]], "Note on device support for float64": [[403, "note-on-device-support-for-float64"]], "Notes": [[364, "notes"]], "Novelty Detection": [[1007, "novelty-detection"]], "Novelty and Outlier Detection": [[1007, null]], "Novelty detection with Local Outlier Factor": [[1007, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[295, null]], "NuSVC": [[906, null]], "NuSVR": [[907, null]], "NumPy": [[380, "numpy"]], "Number of candidates and amount of resource at each iteration": [[281, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[377, "numerical-assertions-in-tests"]], "Nystroem": [[639, null]], "Nystroem Method for Kernel Approximation": [[993, "nystroem-method-for-kernel-approximation"]], "OAS": [[474, null]], "ONNX": [[401, "onnx"]], "OOB Errors for Random Forests": [[138, null]], "OPTICS": [[407, "optics"], [449, null]], "Obtaining predictions by cross-validation": [[411, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1025, "id19"]], "Older Versions": [[1032, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[225, null]], "One-class SVM with non-linear kernel (RBF)": [[338, null]], "One-vs-One multiclass ROC": [[278, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[278, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[908, null]], "OneHotEncoder": [[877, null]], "OneToOneFeatureMixin": [[428, null]], "OneVsOneClassifier": [[832, null], [1002, "onevsoneclassifier"]], "OneVsRestClassifier": [[833, null], [1002, "onevsrestclassifier"]], "Online One-Class SVM": [[321, "online-one-class-svm"], [1015, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[83, null]], "Optical recognition of handwritten digits dataset": [[372, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[176, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[377, "optional-arguments"]], "Options to tune the decision threshold": [[406, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[409, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[878, null]], "Ordinary Least Squares": [[997, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[997, "ordinary-least-squares-complexity"]], "Ordinary Least Squares Example": [[208, null]], "Ordinary Least Squares and Ridge Regression Variance": [[209, null]], "Original data": [[275, "original-data"], [309, "original-data"]], "Original image": [[86, "original-image"]], "Original points": [[299, "original-points"]], "Orthogonal Matching Pursuit": [[210, null]], "Orthogonal Matching Pursuit (OMP)": [[997, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[664, null]], "OrthogonalMatchingPursuitCV": [[665, null]], "Other changes": [[1032, "other-changes"]], "Other estimators and tasks": [[1020, "other-estimators-and-tasks"]], "Otto Group": [[1025, "id26"]], "Our community, our values": [[375, null]], "Our vanilla classifier": [[283, "our-vanilla-classifier"]], "Out of Bag Estimates": [[990, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1003, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1007, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[296, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[429, null]], "Outliers in the X direction": [[228, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[228, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1009, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[834, null], [1002, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[363, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[407, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[286, null]], "Overview of outlier detection methods": [[1007, "overview-of-outlier-detection-methods"]], "PCA": [[541, null]], "PCA using randomized SVD": [[412, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1018, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1025, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[115, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[115, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[410, "plscanonical"], [482, null]], "PLSRegression": [[410, "plsregression"], [483, null]], "PLSSVD": [[410, "plssvd"], [484, null]], "Packaging": [[1044, "packaging"]], "Pair Confusion Matrix": [[407, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[269, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[269, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[326, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[999, null]], "PairwiseKernel": [[620, null]], "Pandas": [[380, "pandas"]], "Pandas output with set_output API": [[323, "pandas-output-with-set-output-api"]], "Parallel": [[966, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[363, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[363, "parallelism"], [990, "parallelism"]], "Parallelism, resource management, and configuration": [[363, null]], "Parallelization": [[414, "parallelization"]], "ParameterGrid": [[811, null]], "ParameterSampler": [[812, null]], "Parameters": [[389, "parameters"], [414, "parameters"]], "Parameters and init": [[377, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1016, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[187, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1008, null]], "Partial dependence plots": [[1008, "partial-dependence-plots"]], "PartialDependenceDisplay": [[632, null]], "Partitioning the data": [[191, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[997, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[666, null]], "PassiveAggressiveRegressor": [[667, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[415, "patch-extraction"]], "PatchExtractor": [[583, null]], "PeerIndex": [[1025, "id17"]], "People": [[1032, "people"], [1032, "id2"], [1032, "id5"], [1032, "id8"], [1032, "id11"], [1032, "id13"], [1032, "id15"], [1032, "id17"], [1033, "people"], [1033, "id3"], [1034, "people"], [1035, "people"]], "Perceptron": [[668, null], [997, "perceptron"]], "Performance improvements": [[322, "performance-improvements"]], "Performance improvements in PCA": [[326, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[351, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[212, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[188, null]], "Permutation Importance with Multicollinear or Correlated Features": [[189, null]], "Permutation feature importance": [[1009, null]], "Permutation test score": [[275, "permutation-test-score"], [411, "permutation-test-score"]], "Permutation-based feature importance": [[318, "permutation-based-feature-importance"]], "Pinball loss": [[1001, "pinball-loss"]], "Pipeline": [[864, null]], "Pipeline ANOVA SVM": [[165, null]], "Pipeline compatibility": [[377, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[270, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[408, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[101, null], [183, "pipelines-and-composite-estimators"], [408, null]], "Pipelines: chaining pre-processors and estimators": [[388, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1018, null]], "Pipelining: chaining a PCA and a logistic regression": [[105, null]], "Platform-specific instructions": [[373, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[276, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[266, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[216, null]], "Plot a PCA representation": [[126, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[350, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[278, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[278, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[197, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[248, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[156, null]], "Plot classification boundaries with different SVM Kernels": [[343, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[336, null]], "Plot discrete decision boundary": [[150, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[159, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[147, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[157, null]], "Plot multi-class SGD on the iris dataset": [[220, null]], "Plot number of features VS. cross-validation scores": [[167, "plot-number-of-features-vs-cross-validation-scores"]], "Plot of pairs of features of the Iris dataset": [[126, "plot-of-pairs-of-features-of-the-iris-dataset"]], "Plot path length decision boundary": [[150, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[118, null]], "Plot regularization path": [[205, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [96, "plot-result"], [100, "plot-result"], [100, "id2"]], "Plot results": [[47, "plot-results"], [82, "plot-results"], [109, "plot-results"], [121, "plot-results"], [122, "plot-results"], [140, "plot-results"], [288, "plot-results"], [296, "plot-results"]], "Plot support and time series": [[206, "plot-support-and-time-series"]], "Plot the BIC scores": [[259, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[276, "plot-the-precision-recall-curve"]], "Plot the best model": [[259, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[342, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[155, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[355, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[142, null]], "Plot the marginal log-likelihood": [[193, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[276, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[328, "plot-the-most-uncertain-predictions"]], "Plot the results": [[83, "plot-the-results"], [113, "plot-the-results"], [157, "plot-the-results"], [182, "plot-the-results"], [356, "plot-the-results"], [356, "id3"]], "Plot the results on an image": [[81, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[337, null]], "Plot the true and estimated coefficients": [[193, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[194, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[147, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [307, "plotting"]], "Plotting API Overview": [[382, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[265, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[271, null]], "Plotting four circles": [[99, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[249, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[249, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[249, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[193, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[251, "plotting-the-roc-curve"]], "Plotting the Results": [[315, "plotting-the-results"]], "Plotting the result": [[273, "plotting-the-result"]], "Plotting the results": [[97, "plotting-the-results"], [135, "plotting-the-results"], [208, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[215, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[99, "plotting-two-circles"]], "Plotting with Multiple Axes": [[382, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[211, null]], "PoissonRegressor": [[669, null]], "Polars output in set_output": [[325, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[993, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[212, null]], "Polynomial features": [[1011, "polynomial-features"]], "Polynomial kernel": [[343, "polynomial-kernel"], [999, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[997, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[640, null]], "PolynomialFeatures": [[879, null]], "Possible solutions": [[90, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[354, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[283, null]], "Post-tuning the decision threshold": [[406, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[263, null]], "PowerTransformer": [[309, "powertransformer"], [880, null]], "Pre-test vs. post-test analysis": [[272, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1001, "precision-recall-and-f-measures"]], "Precision-Recall": [[276, null]], "PrecisionRecallDisplay": [[700, null]], "Precomputed sparse nearest neighbors graph": [[318, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[411, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[813, null]], "Predict": [[356, "predict"], [356, "id2"]], "Prediction Intervals for Gradient Boosting Regression": [[146, null]], "Prediction Latency": [[49, null], [362, "prediction-latency"]], "Prediction Throughput": [[362, "prediction-throughput"]], "PredictionErrorDisplay": [[701, null]], "Preparing the data": [[135, "preparing-the-data"], [149, "preparing-the-data"], [191, "preparing-the-data"]], "Preprocessing": [[183, "preprocessing"], [308, null]], "Preprocessing data": [[1011, null]], "Preprocessing numerical variables": [[186, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[187, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[187, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[187, "preprocessor-for-the-neural-network-model"]], "Principal Component Analysis (PCA) on Iris Dataset": [[126, null]], "Principal Component Regression vs Partial Least Squares Regression": [[116, null]], "Principal component analysis (PCA)": [[412, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1049, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[417, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[171, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[405, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[186, "processing-the-dataset"]], "Product": [[621, null]], "Productivity and sanity-preserving tips": [[383, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[381, "profiling-python-code"]], "Profiling compiled extensions": [[381, "profiling-compiled-extensions"]], "Project template:": [[377, null]], "Projecting data: PCA vs. KernelPCA": [[125, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[125, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[116, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[380, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[375, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[229, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1021, "purpose-of-this-document"]], "Purpose of this example": [[215, "purpose-of-this-example"]], "PyTorch Support": [[403, "pytorch-support"]], "Python API": [[363, "python-api"]], "Python package and dataset imports, load dataset": [[243, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[381, "python-cython-or-c-c"]], "QDA": [[995, "qda"]], "QuadraticDiscriminantAnalysis": [[550, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[351, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[997, "quantile-regression"]], "Quantile Regressor": [[321, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[322, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[213, null]], "QuantileRegressor": [[670, null]], "QuantileTransformer": [[881, null]], "QuantileTransformer (Gaussian output)": [[309, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[309, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[997, "ransac-random-sample-consensus"]], "RANSACRegressor": [[671, null]], "RBF": [[622, null]], "RBF SVM parameters": [[339, null]], "RBF kernel": [[343, "rbf-kernel"], [999, "rbf-kernel"]], "RBFSampler": [[641, null]], "RCV1 dataset": [[370, "rcv1-dataset"]], "RFE": [[593, null]], "RFECV": [[594, null]], "ROC AUC now supports multiclass classification": [[318, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[251, null]], "ROC curve showing a specific class": [[278, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[278, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[278, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[278, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[993, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[179, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[417, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[854, null]], "RadiusNeighborsRegressor": [[855, null]], "RadiusNeighborsTransformer": [[856, null]], "Rand index": [[407, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[189, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[414, "random-forests"]], "Random Numbers": [[377, "random-numbers"]], "Random Projection": [[1013, null]], "Random data": [[275, "random-data"]], "Random forests and other randomized tree ensembles": [[414, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[411, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1018, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[564, null]], "RandomForestRegressor": [[565, null]], "RandomTreesEmbedding": [[566, null]], "Randomized Parameter Optimization": [[990, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[814, null]], "Rangespan": [[1025, "id11"]], "Ranking loss": [[1001, "ranking-loss"]], "Rational Quadratic kernel": [[179, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[417, "rational-quadratic-kernel"]], "RationalQuadratic": [[623, null]], "Reading the existing code base": [[375, "reading-the-existing-code-base"]], "Real world datasets": [[370, null]], "Real-world data set": [[107, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[279, null]], "Receiver operating characteristic (ROC)": [[1001, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1020, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[166, null], [416, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[167, null]], "Reference Steps": [[379, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [112, "references"], [137, "references"], [191, "references"], [197, "references"], [286, "references"], [302, "references"], [417, "references"], [991, "references"]], "Region of Practical Equivalence": [[269, "region-of-practical-equivalence"]], "Regression": [[178, "regression"], [997, "regression"], [1005, "regression"], [1015, "regression"], [1016, "regression"], [1017, "regression"]], "Regression criteria": [[1017, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1001, "regression-metrics"]], "RegressorChain": [[838, null], [1002, "regressorchain"]], "RegressorMixin": [[430, null]], "RegressorTags": [[922, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1005, "regularization"]], "Regularization path of L1- Logistic Regression": [[205, null]], "Related Projects": [[1020, null]], "Related changes": [[1039, "related-changes"]], "Relation to impurity-based importance in trees": [[1009, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[183, "release-highlights"], [317, null]], "Release Highlights for scikit-learn 0.22": [[318, null]], "Release Highlights for scikit-learn 0.23": [[319, null]], "Release Highlights for scikit-learn 0.24": [[320, null]], "Release Highlights for scikit-learn 1.0": [[321, null]], "Release Highlights for scikit-learn 1.1": [[322, null]], "Release Highlights for scikit-learn 1.2": [[323, null]], "Release Highlights for scikit-learn 1.3": [[324, null]], "Release Highlights for scikit-learn 1.4": [[325, null]], "Release Highlights for scikit-learn 1.5": [[326, null]], "Release History": [[1030, null]], "Releasing": [[379, "releasing"]], "Remarks": [[242, "remarks"]], "Removed modules": [[1032, "removed-modules"]], "Removing features with low variance": [[416, "removing-features-with-low-variance"]], "Repeated K-Fold": [[411, "repeated-k-fold"]], "RepeatedKFold": [[815, null]], "RepeatedStratifiedKFold": [[816, null]], "Replace missing values by 0": [[182, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[401, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[307, null]], "Restricted Boltzmann machines": [[1006, "restricted-boltzmann-machines"]], "Results interpretation": [[288, "results-interpretation"]], "Retrieve dataframes from OpenML": [[318, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[240, "rich-html-representation"]], "Rich visual representation of estimators": [[319, "rich-visual-representation-of-estimators"]], "Ridge": [[672, null]], "Ridge Complexity": [[997, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[215, null]], "Ridge regression and classification": [[997, "ridge-regression-and-classification"]], "RidgeCV": [[673, null]], "RidgeClassifier": [[674, null]], "RidgeClassifierCV": [[675, null]], "Roadmap": [[1021, null]], "Robust Covariance Estimation": [[409, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[111, null]], "Robust linear estimator fitting": [[217, null]], "Robust linear model estimation using RANSAC": [[214, null]], "Robust vs Empirical covariance estimate": [[112, null]], "RobustScaler": [[309, "robustscaler"], [882, null]], "Robustness of cross-validation results": [[358, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[997, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[990, "robustness-to-failure"]], "RocCurveDisplay": [[702, null]], "Roles And Responsibilities": [[390, "roles-and-responsibilities"]], "Rolling your own estimator": [[377, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[245, "routing-meta-estimator"]], "Run the benchmark": [[91, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[273, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[373, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1001, "r2-score-the-coefficient-of-determination"]], "SGD": [[1015, "id5"]], "SGD: Maximum margin separating hyperplane": [[223, null]], "SGD: Penalties": [[222, null]], "SGD: Weighted samples": [[224, null]], "SGD: convex loss functions": [[221, null]], "SGDClassifier": [[676, null]], "SGDOneClassSVM": [[677, null]], "SGDRegressor": [[678, null]], "SKLEARN_ASSUME_FINITE": [[363, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[363, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[363, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[363, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[363, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[363, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[363, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[363, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[363, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[363, "sklearn-working-memory"]], "SVC": [[909, null], [1016, "svc"]], "SVM Exercise": [[161, null]], "SVM Margins Example": [[344, null]], "SVM Tie Breaking Example": [[347, null]], "SVM with custom kernel": [[335, null]], "SVM-Anova: SVM with univariate feature selection": [[342, null]], "SVM: Maximum margin separating hyperplane": [[340, null]], "SVM: Separating hyperplane for unbalanced classes": [[341, null]], "SVM: Weighted samples": [[348, null]], "SVR": [[910, null], [1016, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[369, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[270, null]], "Sample weight support": [[414, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[319, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[319, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[191, null]], "Scale Invariance": [[88, "scale-invariance"]], "Scaling data with outliers": [[1011, "scaling-data-with-outliers"]], "Scaling features to a range": [[1011, "scaling-features-to-a-range"]], "Scaling sparse data": [[1011, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[346, null]], "Scaling up the One-Class SVM": [[1007, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[364, "scaling-with-instances-using-out-of-core-learning"]], "Scatter plot of scores": [[115, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[390, null]], "Scores and probabilities": [[1016, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[990, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1050, "security"]], "Security & Maintainability Limitations": [[401, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[80, null]], "SelectFdr": [[595, null]], "SelectFpr": [[596, null]], "SelectFromModel": [[597, null]], "SelectFwe": [[598, null]], "SelectKBest": [[599, null]], "SelectPercentile": [[600, null]], "Selecting Lasso via an information criterion": [[201, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[201, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[104, null]], "Selecting features based on importance": [[168, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[168, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[93, null]], "SelectorMixin": [[601, null]], "Self Training": [[1014, "self-training"]], "SelfTrainingClassifier": [[901, null]], "Semi Supervised Classification": [[183, "semi-supervised-classification"], [327, null]], "Semi-supervised Classification on a Text Dataset": [[332, null]], "Semi-supervised learning": [[328, "semi-supervised-learning"], [1014, null]], "Sequence similarity matrix under the kernel": [[178, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[416, "sequential-feature-selection"]], "SequentialFeatureSelector": [[602, null]], "Serving the model artifact": [[401, "serving-the-model-artifact"]], "Setting regularization parameter": [[997, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[997, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[229, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[995, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[109, null]], "Shrinkage via learning rate": [[414, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[409, "shrunk-covariance"]], "ShrunkCovariance": [[475, null]], "ShuffleSplit": [[817, null]], "Sigmoid": [[405, "sigmoid"]], "Sigmoid kernel": [[343, "sigmoid-kernel"], [999, "sigmoid-kernel"]], "Silhouette Coefficient": [[407, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[294, null]], "Simple Pipeline": [[245, "simple-pipeline"]], "SimpleImputer": [[630, null]], "Single estimator versus bagging: bias-variance decomposition": [[137, null]], "Single label": [[371, "single-label"]], "Skewed Chi Squared Kernel": [[993, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[642, null]], "Social Media": [[1024, "social-media"]], "Solvers": [[997, "solvers"]], "Sparse coding with a precomputed dictionary": [[129, null], [412, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[120, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1011, null]], "Sparse inverse covariance": [[409, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[113, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[412, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1013, "sparse-random-projection"]], "SparseCoder": [[542, null]], "SparsePCA": [[543, null]], "SparseRandomProjection": [[897, null]], "Sparsity": [[415, "sparsity"]], "Species distribution dataset": [[370, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[377, "specific-models"]], "Specifying an objective metric": [[990, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[990, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[404, "spectral-biclustering"]], "Spectral Clustering Graphs": [[407, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[404, "spectral-co-clustering"]], "Spectral Embedding": [[998, "spectral-embedding"]], "Spectral clustering": [[407, "spectral-clustering"]], "Spectral clustering for image segmentation": [[99, null]], "Spectral embedding for non-linear dimensionality reduction": [[231, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[450, null]], "SpectralClustering": [[451, null]], "SpectralCoclustering": [[452, null]], "SpectralEmbedding": [[691, null]], "Sphinx version": [[375, null]], "Spline Transformers": [[321, "spline-transformers"]], "Spline transformer": [[1011, "spline-transformer"]], "SplineTransformer": [[883, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1025, "id2"]], "Stack of predictors on a single data set": [[154, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[414, "stacked-generalization"]], "Stacking Classifier and Regressor": [[318, "stacking-classifier-and-regressor"]], "StackingClassifier": [[567, null]], "StackingRegressor": [[568, null]], "Stalled and Unclaimed Issues": [[375, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[375, "stalled-pull-requests"]], "Standard replies for reviewing": [[383, "standard-replies-for-reviewing"]], "StandardScaler": [[309, "standardscaler"], [884, null]], "Standardization, or mean removal and variance scaling": [[1011, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1021, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[269, null]], "Statistical learning with Python": [[1020, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1015, null]], "Stochastic Gradient Descent - SGD": [[997, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1015, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1006, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1015, "stopping-criterion"]], "Strategies comparison": [[286, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[364, null]], "Stratified Shuffle Split": [[411, "stratified-shuffle-split"]], "Stratified k-fold": [[411, "stratified-k-fold"]], "StratifiedGroupKFold": [[411, "stratifiedgroupkfold"], [818, null]], "StratifiedKFold": [[819, null]], "StratifiedShuffleSplit": [[820, null]], "Streaming instances": [[364, "streaming-instances"]], "Submitting a bug report or a feature request": [[375, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1021, "subpackage-specific-goals"]], "Subsampling": [[414, "subsampling"]], "Successive Halving Iterations": [[281, null]], "Successive Halving estimators for tuning hyper-parameters": [[320, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[624, null]], "Summarizing the key points": [[401, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [144, "summary"], [352, "summary"]], "Summary of cross-validation approach": [[201, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[401, "id2"]], "Supervised learning": [[1023, null]], "Support": [[1024, null]], "Support Vector Machines": [[183, "support-vector-machines"], [334, null], [1016, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[345, null]], "Support for Array API": [[1049, "support-for-array-api"], [1050, "support-for-array-api"]], "Support for Array API-compatible inputs": [[403, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1049, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1050, "support-for-building-with-meson"]], "Support for missing values": [[149, "support-for-missing-values"]], "Support for quantile loss": [[149, "support-for-quantile-loss"]], "Swiss Roll": [[235, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[235, null]], "Swiss-Hole": [[235, "swiss-hole"]], "Synthetic dataset": [[380, "synthetic-dataset"]], "Synthetic example": [[107, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[231, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[692, null]], "Table of Contents": [[387, "table-of-contents"]], "Tags": [[923, null]], "Take-home messages": [[269, "take-home-messages"]], "Target Encoder": [[1011, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[316, null]], "Target Types": [[389, "target-types"]], "Target format": [[1002, "target-format"], [1002, "id5"], [1002, "id8"], [1002, "id10"]], "TargetEncoder": [[885, null]], "TargetEncoder: a new category encoding strategy": [[324, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[924, null]], "Technical Committee": [[390, "technical-committee"]], "Test dependencies": [[373, "test-dependencies"]], "Test with permutations the significance of a classification score": [[275, null]], "Testing Functions": [[384, "testing-functions"]], "Testing and improving test coverage": [[375, "testing-and-improving-test-coverage"]], "Text feature extraction": [[415, "text-feature-extraction"]], "TfidfTransformer": [[590, null]], "TfidfVectorizer": [[352, "tfidfvectorizer"], [591, null]], "Tf\u2013idf term weighting": [[415, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[370, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[415, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1000, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[211, "the-french-motor-third-party-liability-claims-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[242, null]], "The Johnson-Lindenstrauss lemma": [[1013, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[370, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[383, "the-meson-build-backend"]], "The Olivetti faces dataset": [[370, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[286, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[276, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[263, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[411, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[116, "the-data"]], "The dataset": [[267, "the-dataset"]], "The dataset: simulated hourly wages": [[185, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[186, "the-dataset-wages"]], "The diabetes dataset": [[283, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[286, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[186, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[186, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[379, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1001, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[228, null]], "Theil-Sen estimator: generalized-median-based estimator": [[997, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[679, null]], "Theoretical bounds": [[242, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[245, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[393, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[411, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[821, null]], "Timing and accuracy plots": [[243, "timing-and-accuracy-plots"]], "Tips and Tricks": [[362, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[376, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[990, "tips-for-parameter-search"]], "Tips for performance": [[376, "tips-for-performance"]], "Tips on Practical Use": [[1005, "tips-on-practical-use"], [1015, "tips-on-practical-use"], [1016, "tips-on-practical-use"]], "Tips on practical use": [[998, "tips-on-practical-use"], [1017, "tips-on-practical-use"]], "Tips to ease development": [[376, "tips-to-ease-development"]], "Tools": [[403, "tools"]], "Top terms per cluster": [[351, "top-terms-per-cluster"]], "Top-k accuracy score": [[1001, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[354, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[414, "totally-random-trees-embedding"]], "Toy datasets": [[372, null]], "Tracking feature names in a pipeline": [[408, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[997, null]], "Train and Persist the Model": [[401, "train-and-persist-the-model"]], "Train classifiers": [[339, "train-classifiers"]], "Train models on the diabetes dataset": [[249, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[357, "train-tree-classifier"]], "Training": [[307, "training"], [1004, "training"]], "Training SVC model and plotting decision boundaries": [[343, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[251, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[316, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[315, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[135, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[157, "training-classifiers"]], "Training of the model": [[150, "training-of-the-model"]], "Training the AdaBoostClassifier": [[134, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[215, "training-the-ridge-regressor"]], "Transform": [[1004, "transform"]], "Transform data": [[115, "transform-data"]], "TransformedTargetRegressor": [[464, null]], "TransformerMixin": [[431, null]], "TransformerTags": [[925, null]], "Transformers and pre-processors": [[388, "transformers-and-pre-processors"]], "Transforming target in regression": [[408, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1012, null]], "Translations of scikit-learn documentation": [[1020, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1017, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[318, "tree-pruning"]], "Tree structure": [[357, "tree-structure"]], "Tree-based feature selection": [[416, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[188, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[374, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[393, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[412, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[544, null]], "TunedThresholdClassifierCV": [[822, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[326, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[267, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[263, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[263, "tuning-the-decision-threshold"], [283, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[406, null]], "Tuning the hyper-parameters of an estimator": [[990, null]], "Tuning the hyper-parameters of the quantile regressors": [[146, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[158, null], [183, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[229, null]], "TweedieRegressor": [[680, null]], "Two-class AdaBoost": [[136, null]], "Type of return values and fitted attributes": [[403, "type-of-return-values-and-fitted-attributes"]], "Types": [[376, "types"]], "T\u00e9l\u00e9com ParisTech": [[1025, "id7"]], "Unbalanced problems": [[1016, "unbalanced-problems"]], "UndefinedMetricWarning": [[578, null]], "Under Development": [[1027, "under-development"]], "Underfitting vs. Overfitting": [[284, null]], "Understanding the decision tree structure": [[357, null]], "Univariate Feature Selection": [[164, null]], "Univariate feature imputation": [[991, "univariate-feature-imputation"]], "Univariate feature selection": [[164, "id1"], [416, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[991, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[377, "universal-attributes"]], "Unlabeled entries in y": [[1014, null]], "Unsupervised Nearest Neighbors": [[1004, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1018, null]], "Unsupervised learning": [[1026, null]], "Unweighted feature selection": [[398, "unweighted-feature-selection"]], "Updating Authors List": [[379, "updating-authors-list"]], "Usage": [[405, "usage"], [408, "usage"], [408, "id1"], [414, "usage"], [414, "id24"], [414, "id25"], [414, "id27"], [414, "id35"], [997, "usage"]], "Usage Examples": [[398, "usage-examples"]], "Use markdown formatting": [[380, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[383, "useful-pytest-aliases-and-flags"]], "User Guide": [[1027, null]], "User Questions": [[1024, "user-questions"]], "Using Cython": [[381, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[310, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[358, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[376, "using-openmp"]], "Using a debugger, gdb": [[381, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[383, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[997, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[411, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[151, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[381, "using-gprof"]], "Using multiple metric evaluation": [[1001, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[168, "using-negative-tolerance-values"]], "Using scikit-learn": [[387, "using-scikit-learn"]], "Using stop words": [[415, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[381, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[381, "using-yep-and-gperftools"]], "Utilities for Developers": [[384, null]], "Validation Tools": [[384, "validation-tools"]], "Validation curve": [[996, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[996, null]], "ValidationCurveDisplay": [[823, null]], "Vanilla predictive model": [[263, "vanilla-predictive-model"]], "VarianceThreshold": [[603, null]], "Variational Bayesian Gaussian Mixture": [[1000, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[85, null]], "Varying regularization in Multi-layer Perceptron": [[304, null]], "Varying the metric": [[407, "varying-the-metric"]], "Vector Quantization Example": [[86, null]], "Vectorizing a large text corpus with the hashing trick": [[415, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1032, "version-0-10"]], "Version 0.11": [[1032, "version-0-11"]], "Version 0.12": [[1032, "version-0-12"]], "Version 0.12.1": [[1032, "version-0-12-1"]], "Version 0.13": [[1033, null], [1033, "changes-0-13"]], "Version 0.13.1": [[1033, "version-0-13-1"]], "Version 0.14": [[1034, null], [1034, "changes-0-14"]], "Version 0.15": [[1035, null], [1035, "changes-0-15"]], "Version 0.15.1": [[1035, "version-0-15-1"]], "Version 0.15.2": [[1035, "version-0-15-2"]], "Version 0.16": [[1036, null], [1036, "changes-0-16"]], "Version 0.16.1": [[1036, "version-0-16-1"]], "Version 0.17": [[1037, null], [1037, "changes-0-17"]], "Version 0.17.1": [[1037, "version-0-17-1"]], "Version 0.18": [[1038, null], [1038, "changes-0-18"]], "Version 0.18.1": [[1038, "version-0-18-1"]], "Version 0.18.2": [[1038, "version-0-18-2"]], "Version 0.19": [[1039, null], [1039, "id1"]], "Version 0.19.1": [[1039, "version-0-19-1"]], "Version 0.19.2": [[1039, "version-0-19-2"]], "Version 0.20": [[1040, null]], "Version 0.20.0": [[1040, "version-0-20-0"]], "Version 0.20.1": [[1040, "version-0-20-1"]], "Version 0.20.2": [[1040, "version-0-20-2"]], "Version 0.20.3": [[1040, "version-0-20-3"]], "Version 0.20.4": [[1040, "version-0-20-4"]], "Version 0.21": [[1041, null]], "Version 0.21.0": [[1041, "version-0-21-0"]], "Version 0.21.1": [[1041, "version-0-21-1"]], "Version 0.21.2": [[1041, "version-0-21-2"]], "Version 0.21.3": [[1041, "version-0-21-3"]], "Version 0.22": [[1042, null]], "Version 0.22.0": [[1042, "version-0-22-0"]], "Version 0.22.1": [[1042, "version-0-22-1"]], "Version 0.22.2.post1": [[1042, "version-0-22-2-post1"]], "Version 0.23": [[1043, null]], "Version 0.23.0": [[1043, "version-0-23-0"]], "Version 0.23.1": [[1043, "version-0-23-1"]], "Version 0.23.2": [[1043, "version-0-23-2"]], "Version 0.24": [[1044, null]], "Version 0.24.0": [[1044, "version-0-24-0"]], "Version 0.24.1": [[1044, "version-0-24-1"]], "Version 0.24.2": [[1044, "version-0-24-2"]], "Version 0.4": [[1032, "version-0-4"]], "Version 0.5": [[1032, "version-0-5"]], "Version 0.6": [[1032, "version-0-6"]], "Version 0.7": [[1032, "version-0-7"]], "Version 0.8": [[1032, "version-0-8"]], "Version 0.9": [[1032, "version-0-9"]], "Version 1.0": [[1045, null]], "Version 1.0.0": [[1045, "version-1-0-0"]], "Version 1.0.1": [[1045, "version-1-0-1"]], "Version 1.0.2": [[1045, "version-1-0-2"]], "Version 1.1": [[1046, null]], "Version 1.1.0": [[1046, "version-1-1-0"]], "Version 1.1.1": [[1046, "version-1-1-1"]], "Version 1.1.2": [[1046, "version-1-1-2"]], "Version 1.1.3": [[1046, "version-1-1-3"]], "Version 1.2": [[1047, null]], "Version 1.2.0": [[1047, "version-1-2-0"]], "Version 1.2.1": [[1047, "version-1-2-1"]], "Version 1.2.2": [[1047, "version-1-2-2"]], "Version 1.3": [[1048, null]], "Version 1.3.0": [[1048, "version-1-3-0"]], "Version 1.3.1": [[1048, "version-1-3-1"]], "Version 1.3.2": [[1048, "version-1-3-2"]], "Version 1.4": [[1049, null]], "Version 1.4.0": [[1049, "version-1-4-0"]], "Version 1.4.1": [[1049, "version-1-4-1"]], "Version 1.4.2": [[1049, "version-1-4-2"]], "Version 1.5": [[1050, null]], "Version 1.5.0": [[1050, "version-1-5-0"]], "Version 1.5.1": [[1050, "version-1-5-1"]], "Version 1.5.2": [[1050, "version-1-5-2"]], "Version 1.6": [[1051, null]], "Video resources": [[375, "video-resources"]], "Videos": [[1019, "videos"]], "Visual evaluation of regression models": [[1001, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [339, "visualization"]], "Visualization of MLP weights on MNIST": [[306, null]], "Visualization of cluster hierarchy": [[407, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1029, null]], "Visualizations with Display Objects": [[239, null]], "Visualize Comparison": [[144, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[264, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[264, "visualize-our-data"]], "Visualize the learning curves": [[244, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[91, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[244, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[408, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[264, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[414, "voting-classifier"]], "Voting Regressor": [[414, "voting-regressor"]], "VotingClassifier": [[569, null]], "VotingRegressor": [[570, null]], "Warnings and Exceptions": [[384, "warnings-and-exceptions"]], "Ways to contribute": [[375, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[100, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1042, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[414, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[398, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[398, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[387, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[387, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[357, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[387, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[625, null]], "Who is using scikit-learn?": [[1025, null]], "Why are there so many different estimators for linear models?": [[387, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[387, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[387, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[387, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[387, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[387, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why is my pull request not getting any attention?": [[387, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[387, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[414, "why-it-s-faster"]], "Why scikit?": [[387, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[387, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[387, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[393, "winpython-for-windows"]], "Windows": [[373, "windows"]], "Wine recognition dataset": [[372, "wine-recognition-dataset"]], "Workflow Overview": [[401, "workflow-overview"]], "Working on PRs to help review": [[374, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[374, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[183, "working-with-text-documents"], [349, null]], "Wrong causal interpretation": [[186, "wrong-causal-interpretation"]], "XOR dataset": [[343, "xor-dataset"]], "Yhat": [[1025, "id10"]], "Zero one loss": [[1001, "zero-one-loss"]], "Zopa": [[1025, "id27"]], "__sklearn_is_fitted__ as Developer API": [[132, null]], "_safe_indexing": [[926, null]], "accuracy_score": [[703, null]], "add_dummy_feature": [[886, null]], "additive_chi2_kernel": [[758, null]], "adjusted_mutual_info_score": [[704, null]], "adjusted_rand_score": [[705, null]], "affinity_propagation": [[453, null]], "all_displays": [[939, null]], "all_estimators": [[940, null]], "all_functions": [[941, null]], "as_float_array": [[928, null]], "assert_all_finite": [[929, null]], "auc": [[706, null]], "available_if": [[961, null]], "average_precision_score": [[707, null]], "balanced_accuracy_score": [[708, null]], "betaworks": [[1025, "id4"]], "binarize": [[887, null]], "brier_score_loss": [[709, null]], "calibration_curve": [[438, null]], "calinski_harabasz_score": [[710, null]], "check_X_y": [[930, null]], "check_array": [[931, null]], "check_consistent_length": [[932, null]], "check_cv": [[824, null]], "check_estimator": [[942, null]], "check_increasing": [[636, null]], "check_is_fitted": [[984, null]], "check_memory": [[985, null]], "check_random_state": [[933, null]], "check_scalar": [[934, null]], "check_scoring": [[711, null]], "check_symmetric": [[986, null]], "chi2": [[604, null]], "chi2_kernel": [[759, null]], "class_likelihood_ratios": [[712, null]], "classification_report": [[713, null]], "clear_data_home": [[485, null]], "clone": [[432, null]], "cluster_optics_dbscan": [[454, null]], "cluster_optics_xi": [[455, null]], "cohen_kappa_score": [[716, null]], "column_or_1d": [[987, null]], "completeness_score": [[717, null]], "compute_class_weight": [[935, null]], "compute_optics_graph": [[456, null]], "compute_sample_weight": [[936, null]], "config_context": [[467, null]], "confusion_matrix": [[718, null]], "consensus_score": [[719, null]], "contingency_matrix": [[714, null]], "cosine_distances": [[760, null]], "cosine_similarity": [[761, null]], "coverage_error": [[720, null]], "cross_val_predict": [[825, null]], "cross_val_score": [[826, null]], "cross_validate": [[827, null]], "d2_absolute_error_score": [[721, null]], "d2_log_loss_score": [[722, null]], "d2_pinball_score": [[723, null]], "d2_tweedie_score": [[724, null]], "davies_bouldin_score": [[725, null]], "dbscan": [[418, null]], "dbscan_clustering": [[88, "dbscan-clustering"]], "dcg_score": [[726, null]], "default_tags": [[937, null]], "delayed": [[967, null]], "density": [[945, null]], "deprecated": [[938, null]], "det_curve": [[727, null]], "dict_learning": [[545, null]], "dict_learning_online": [[546, null]], "distance_metrics": [[762, null]], "dump_svmlight_file": [[486, null]], "empirical_covariance": [[476, null]], "enable_halving_search_cv": [[579, null]], "enable_iterative_imputer": [[580, null]], "enet_path": [[681, null]], "estimate_bandwidth": [[457, null]], "estimator_html_repr": [[944, null]], "euclidean_distances": [[763, null]], "explained_variance_score": [[728, null]], "export_graphviz": [[916, null]], "export_text": [[917, null]], "extract_patches_2d": [[584, null]], "f1_score": [[729, null]], "f_classif": [[605, null]], "f_regression": [[606, null]], "fast_logdet": [[946, null]], "fastica": [[419, null]], "fbeta_score": [[730, null]], "fetch_20newsgroups": [[487, null]], "fetch_20newsgroups_vectorized": [[488, null]], "fetch_california_housing": [[489, null]], "fetch_covtype": [[490, null]], "fetch_file": [[491, null]], "fetch_kddcup99": [[492, null]], "fetch_lfw_pairs": [[493, null]], "fetch_lfw_people": [[494, null]], "fetch_olivetti_faces": [[495, null]], "fetch_openml": [[496, null]], "fetch_rcv1": [[497, null]], "fetch_species_distributions": [[498, null]], "fowlkes_mallows_score": [[731, null]], "gen_batches": [[951, null]], "gen_even_slices": [[952, null]], "get_config": [[626, null]], "get_data_home": [[499, null]], "get_feature_names_out Available in all Transformers": [[322, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[377, "get-params-and-set-params"]], "get_routing_for_object": [[959, null]], "get_scorer": [[732, null]], "get_scorer_names": [[733, null]], "get_tags": [[953, null]], "graphical_lasso": [[477, null]], "grid_to_graph": [[585, null]], "hamming_loss": [[734, null]], "has_fit_parameter": [[988, null]], "haversine_distances": [[764, null]], "hinge_loss": [[735, null]], "homogeneity_completeness_v_measure": [[736, null]], "homogeneity_score": [[737, null]], "img_to_graph": [[586, null]], "incr_mean_variance_axis": [[975, null]], "indexable": [[955, null]], "inplace_column_scale": [[976, null]], "inplace_csr_column_scale": [[977, null]], "inplace_csr_row_normalize_l1": [[982, null]], "inplace_csr_row_normalize_l2": [[983, null]], "inplace_row_scale": [[978, null]], "inplace_swap_column": [[979, null]], "inplace_swap_row": [[980, null]], "is_classifier": [[433, null]], "is_clusterer": [[434, null]], "is_multilabel": [[962, null]], "is_regressor": [[435, null]], "isotonic_regression": [[637, null]], "jaccard_score": [[738, null]], "johnson_lindenstrauss_min_dim": [[898, null]], "kNN-imputation of the missing values": [[182, "knn-imputation-of-the-missing-values"]], "k_means": [[458, null]], "kcachegrind": [[381, "kcachegrind"]], "kernel_metrics": [[765, null]], "kmeans_plusplus": [[459, null]], "kneighbors_graph": [[857, null]], "l1_min_c": [[911, null]], "label_binarize": [[888, null]], "label_ranking_average_precision_score": [[739, null]], "label_ranking_loss": [[740, null]], "laplacian_kernel": [[766, null]], "lars_path": [[682, null]], "lars_path_gram": [[683, null]], "lasso_path": [[684, null]], "learning_curve": [[828, null]], "ledoit_wolf": [[478, null]], "ledoit_wolf_shrinkage": [[479, null]], "linear_kernel": [[767, null]], "load_breast_cancer": [[500, null]], "load_diabetes": [[501, null]], "load_digits": [[502, null]], "load_files": [[503, null]], "load_iris": [[504, null]], "load_linnerud": [[505, null]], "load_sample_image": [[506, null]], "load_sample_images": [[507, null]], "load_svmlight_file": [[508, null]], "load_svmlight_files": [[509, null]], "load_wine": [[510, null]], "locally_linear_embedding": [[693, null]], "log_loss": [[741, null]], "macOS": [[373, "macos"]], "macOS compilers from Homebrew": [[373, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[373, "macos-compilers-from-conda-forge"]], "make_biclusters": [[511, null]], "make_blobs": [[380, "make-blobs"], [512, null]], "make_checkerboard": [[513, null]], "make_circles": [[514, null]], "make_classification": [[380, "make-classification"], [515, null]], "make_column_selector": [[465, null]], "make_column_transformer": [[466, null]], "make_friedman1": [[516, null]], "make_friedman2": [[517, null]], "make_friedman3": [[518, null]], "make_gaussian_quantiles": [[519, null]], "make_hastie_10_2": [[520, null]], "make_low_rank_matrix": [[521, null]], "make_moons": [[522, null]], "make_multilabel_classification": [[523, null]], "make_pipeline": [[865, null]], "make_regression": [[380, "make-regression"], [524, null]], "make_s_curve": [[525, null]], "make_scorer": [[742, null]], "make_sparse_coded_signal": [[526, null]], "make_sparse_spd_matrix": [[527, null]], "make_sparse_uncorrelated": [[528, null]], "make_spd_matrix": [[529, null]], "make_swiss_roll": [[530, null]], "make_union": [[866, null]], "manhattan_distances": [[768, null]], "matthews_corrcoef": [[743, null]], "max_error": [[744, null]], "maxabs_scale": [[889, null]], "mean_absolute_error": [[745, null]], "mean_absolute_percentage_error": [[746, null]], "mean_gamma_deviance": [[747, null]], "mean_pinball_loss": [[748, null]], "mean_poisson_deviance": [[749, null]], "mean_shift": [[460, null]], "mean_squared_error": [[750, null]], "mean_squared_log_error": [[751, null]], "mean_tweedie_deviance": [[752, null]], "mean_variance_axis": [[981, null]], "median_absolute_error": [[753, null]], "min_cluster_size": [[88, "min-cluster-size"]], "min_pos": [[927, null]], "min_samples": [[88, "min-samples"]], "minmax_scale": [[890, null]], "multilabel_confusion_matrix": [[754, null]], "murmurhash3_32": [[965, null]], "mutual_info_classif": [[607, null]], "mutual_info_regression": [[608, null]], "mutual_info_score": [[755, null]], "nan_euclidean_distances": [[769, null]], "ndcg_score": [[756, null]], "non_negative_factorization": [[547, null]], "normalize": [[891, null]], "normalized_mutual_info_score": [[757, null]], "oas": [[420, null]], "orthogonal_mp": [[685, null]], "orthogonal_mp_gram": [[686, null]], "pair_confusion_matrix": [[715, null]], "paired_cosine_distances": [[770, null]], "paired_distances": [[771, null]], "paired_euclidean_distances": [[772, null]], "paired_manhattan_distances": [[773, null]], "pairwise_distances": [[778, null]], "pairwise_distances_argmin": [[779, null]], "pairwise_distances_argmin_min": [[780, null]], "pairwise_distances_chunked": [[781, null]], "pairwise_kernels": [[774, null]], "parallel_backend": [[968, null]], "parametrize_with_checks": [[943, null]], "partial_dependence": [[633, null]], "permutation_importance": [[634, null]], "permutation_test_score": [[829, null]], "pickle, joblib, and cloudpickle": [[401, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[918, null]], "polynomial_kernel": [[775, null]], "power_transform": [[892, null]], "precision_recall_curve": [[782, null]], "precision_recall_fscore_support": [[783, null]], "precision_score": [[784, null]], "process_routing": [[960, null]], "quantile_transform": [[893, null]], "r2_score": [[785, null]], "r_regression": [[609, null]], "radius_neighbors_graph": [[858, null]], "rand_score": [[786, null]], "randomized_range_finder": [[947, null]], "randomized_svd": [[948, null]], "rbf_kernel": [[776, null]], "recall_score": [[787, null]], "reconstruct_from_patches_2d": [[587, null]], "register_parallel_backend": [[970, null]], "resample": [[971, null]], "ridge_regression": [[687, null]], "robust_scale": [[894, null]], "roc_auc_score": [[788, null]], "roc_curve": [[789, null]], "root_mean_squared_error": [[790, null]], "root_mean_squared_log_error": [[791, null]], "safe_mask": [[972, null]], "safe_sparse_dot": [[949, null]], "safe_sqr": [[973, null]], "sample_without_replacement": [[969, null]], "scale": [[895, null]], "set_config": [[902, null]], "show_versions": [[903, null]], "shrunk_covariance": [[480, null]], "shuffle": [[974, null]], "sigmoid_kernel": [[777, null]], "silhouette_samples": [[792, null]], "silhouette_score": [[793, null]], "single_source_shortest_path_length": [[954, null]], "sklearn": [[3, null], [1048, "sklearn"]], "sklearn.base": [[4, null], [1041, "sklearn-base"], [1042, "sklearn-base"], [1044, "sklearn-base"], [1045, "sklearn-base"], [1046, "sklearn-base"], [1047, "sklearn-base"], [1047, "id2"], [1047, "id10"], [1048, "sklearn-base"], [1049, "sklearn-base"]], "sklearn.calibration": [[5, null], [1041, "sklearn-calibration"], [1042, "sklearn-calibration"], [1044, "sklearn-calibration"], [1045, "sklearn-calibration"], [1045, "id7"], [1046, "sklearn-calibration"], [1047, "sklearn-calibration"], [1047, "id11"], [1048, "sklearn-calibration"], [1048, "id7"], [1049, "sklearn-calibration"], [1049, "id4"], [1050, "sklearn-calibration"], [1050, "id7"]], "sklearn.cluster": [[6, null], [1040, "sklearn-cluster"], [1040, "id2"], [1040, "id11"], [1040, "id24"], [1041, "sklearn-cluster"], [1041, "id8"], [1042, "sklearn-cluster"], [1042, "id5"], [1043, "sklearn-cluster"], [1043, "id2"], [1043, "id5"], [1044, "sklearn-cluster"], [1045, "sklearn-cluster"], [1045, "id1"], [1045, "id8"], [1046, "sklearn-cluster"], [1046, "id8"], [1047, "sklearn-cluster"], [1047, "id12"], [1048, "sklearn-cluster"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id5"], [1050, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1040, "sklearn-compose"], [1040, "id3"], [1040, "id6"], [1040, "id12"], [1040, "id25"], [1041, "sklearn-compose"], [1041, "id9"], [1042, "sklearn-compose"], [1043, "sklearn-compose"], [1044, "sklearn-compose"], [1044, "id5"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1049, "id6"], [1050, "sklearn-compose"], [1050, "id3"], [1050, "id8"]], "sklearn.covariance": [[8, null], [1040, "sklearn-covariance"], [1040, "id26"], [1044, "sklearn-covariance"], [1045, "sklearn-covariance"], [1046, "sklearn-covariance"], [1048, "sklearn-covariance"], [1049, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1042, "sklearn-cross-decomposition"], [1044, "sklearn-cross-decomposition"], [1044, "id6"], [1046, "sklearn-cross-decomposition"], [1048, "sklearn-cross-decomposition"], [1050, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1040, "sklearn-datasets"], [1040, "id13"], [1040, "id27"], [1041, "sklearn-datasets"], [1041, "id10"], [1042, "sklearn-datasets"], [1043, "sklearn-datasets"], [1044, "sklearn-datasets"], [1045, "sklearn-datasets"], [1045, "id9"], [1046, "sklearn-datasets"], [1046, "id9"], [1047, "sklearn-datasets"], [1047, "id13"], [1048, "sklearn-datasets"], [1048, "id9"], [1049, "sklearn-datasets"], [1050, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1040, "sklearn-decomposition"], [1040, "id4"], [1040, "id14"], [1040, "id28"], [1041, "sklearn-decomposition"], [1041, "id11"], [1042, "sklearn-decomposition"], [1043, "sklearn-decomposition"], [1043, "id6"], [1044, "sklearn-decomposition"], [1044, "id7"], [1045, "sklearn-decomposition"], [1045, "id10"], [1046, "sklearn-decomposition"], [1046, "id10"], [1047, "sklearn-decomposition"], [1047, "id14"], [1048, "sklearn-decomposition"], [1048, "id10"], [1049, "sklearn-decomposition"], [1050, "sklearn-decomposition"], [1050, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1040, "sklearn-discriminant-analysis"], [1041, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"], [1046, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1040, "sklearn-dummy"], [1041, "sklearn-dummy"], [1042, "sklearn-dummy"], [1045, "sklearn-dummy"], [1046, "sklearn-dummy"], [1050, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1040, "sklearn-ensemble"], [1040, "id29"], [1041, "sklearn-ensemble"], [1041, "id12"], [1042, "sklearn-ensemble"], [1043, "sklearn-ensemble"], [1043, "id7"], [1044, "sklearn-ensemble"], [1044, "id8"], [1045, "sklearn-ensemble"], [1045, "id2"], [1045, "id11"], [1046, "sklearn-ensemble"], [1047, "sklearn-ensemble"], [1047, "id3"], [1047, "id15"], [1048, "sklearn-ensemble"], [1048, "id11"], [1049, "sklearn-ensemble"], [1049, "id7"], [1050, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1044, "sklearn-exceptions"], [1048, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1041, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1040, "sklearn-feature-extraction"], [1040, "id15"], [1040, "id30"], [1041, "sklearn-feature-extraction"], [1042, "sklearn-feature-extraction"], [1043, "sklearn-feature-extraction"], [1043, "id8"], [1044, "sklearn-feature-extraction"], [1044, "id9"], [1045, "sklearn-feature-extraction"], [1045, "id12"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"], [1048, "sklearn-feature-extraction"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1040, "sklearn-feature-selection"], [1042, "sklearn-feature-selection"], [1043, "sklearn-feature-selection"], [1044, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"], [1045, "id13"], [1046, "sklearn-feature-selection"], [1046, "id2"], [1046, "id11"], [1047, "sklearn-feature-selection"], [1047, "id16"], [1048, "sklearn-feature-selection"], [1048, "id12"], [1049, "sklearn-feature-selection"], [1050, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1040, "sklearn-gaussian-process"], [1042, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"], [1044, "sklearn-gaussian-process"], [1044, "id10"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1048, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1040, "sklearn-impute"], [1040, "id31"], [1041, "sklearn-impute"], [1041, "id13"], [1042, "sklearn-impute"], [1042, "id6"], [1043, "sklearn-impute"], [1044, "sklearn-impute"], [1045, "sklearn-impute"], [1046, "sklearn-impute"], [1046, "id12"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1048, "id13"], [1049, "sklearn-impute"], [1050, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1041, "sklearn-inspection"], [1041, "id3"], [1041, "id14"], [1042, "sklearn-inspection"], [1042, "id7"], [1043, "sklearn-inspection"], [1043, "id11"], [1044, "sklearn-inspection"], [1045, "sklearn-inspection"], [1046, "sklearn-inspection"], [1047, "sklearn-inspection"], [1047, "id17"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1049, "id8"], [1050, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1040, "sklearn-isotonic"], [1041, "sklearn-isotonic"], [1042, "sklearn-isotonic"], [1044, "sklearn-isotonic"], [1046, "sklearn-isotonic"], [1047, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1042, "sklearn-kernel-approximation"], [1044, "sklearn-kernel-approximation"], [1045, "sklearn-kernel-approximation"], [1046, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1049, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1040, "sklearn-linear-model"], [1040, "id16"], [1040, "id32"], [1041, "sklearn-linear-model"], [1041, "id15"], [1042, "sklearn-linear-model"], [1043, "sklearn-linear-model"], [1043, "id9"], [1044, "sklearn-linear-model"], [1044, "id11"], [1045, "sklearn-linear-model"], [1045, "id3"], [1045, "id14"], [1046, "sklearn-linear-model"], [1046, "id13"], [1047, "sklearn-linear-model"], [1047, "id18"], [1048, "sklearn-linear-model"], [1049, "sklearn-linear-model"], [1049, "id9"], [1050, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1040, "sklearn-manifold"], [1041, "sklearn-manifold"], [1042, "sklearn-manifold"], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1045, "id15"], [1046, "sklearn-manifold"], [1046, "id14"], [1047, "sklearn-manifold"], [1047, "id19"], [1048, "sklearn-manifold"], [1050, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1040, "sklearn-metrics"], [1040, "id17"], [1040, "id33"], [1041, "sklearn-metrics"], [1041, "id4"], [1041, "id16"], [1042, "sklearn-metrics"], [1042, "id2"], [1042, "id8"], [1043, "sklearn-metrics"], [1043, "id10"], [1044, "sklearn-metrics"], [1044, "id2"], [1044, "id12"], [1045, "sklearn-metrics"], [1045, "id16"], [1046, "sklearn-metrics"], [1046, "id3"], [1046, "id15"], [1047, "sklearn-metrics"], [1048, "sklearn-metrics"], [1048, "id2"], [1048, "id14"], [1049, "sklearn-metrics"], [1050, "sklearn-metrics"], [1050, "id4"], [1050, "id10"]], "sklearn.mixture": [[28, null], [1040, "sklearn-mixture"], [1040, "id34"], [1041, "sklearn-mixture"], [1045, "sklearn-mixture"], [1046, "sklearn-mixture"], [1048, "sklearn-mixture"], [1048, "id15"], [1050, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1040, "sklearn-model-selection"], [1040, "id35"], [1041, "sklearn-model-selection"], [1042, "sklearn-model-selection"], [1042, "id9"], [1042, "id13"], [1043, "sklearn-model-selection"], [1044, "sklearn-model-selection"], [1044, "id13"], [1045, "sklearn-model-selection"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1047, "id20"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1050, "id11"]], "sklearn.multiclass": [[30, null], [1041, "sklearn-multiclass"], [1044, "sklearn-multiclass"], [1045, "sklearn-multiclass"], [1046, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1040, "sklearn-multioutput"], [1041, "sklearn-multioutput"], [1042, "sklearn-multioutput"], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"], [1044, "id14"], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"], [1049, "sklearn-multioutput"], [1050, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1040, "sklearn-naive-bayes"], [1042, "sklearn-naive-bayes"], [1042, "id10"], [1043, "sklearn-naive-bayes"], [1044, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1040, "sklearn-neighbors"], [1040, "id7"], [1040, "id18"], [1040, "id36"], [1041, "sklearn-neighbors"], [1041, "id5"], [1041, "id17"], [1042, "sklearn-neighbors"], [1042, "id11"], [1044, "sklearn-neighbors"], [1045, "sklearn-neighbors"], [1045, "id4"], [1045, "id17"], [1046, "sklearn-neighbors"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"], [1048, "id16"], [1049, "sklearn-neighbors"], [1050, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1047, "id21"], [1048, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1040, "sklearn-pipeline"], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1045, "id18"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1050, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1040, "sklearn-preprocessing"], [1040, "id19"], [1040, "id37"], [1041, "sklearn-preprocessing"], [1041, "id18"], [1042, "sklearn-preprocessing"], [1042, "id12"], [1043, "sklearn-preprocessing"], [1044, "sklearn-preprocessing"], [1044, "id15"], [1045, "sklearn-preprocessing"], [1045, "id19"], [1046, "sklearn-preprocessing"], [1046, "id4"], [1046, "id16"], [1047, "sklearn-preprocessing"], [1047, "id4"], [1047, "id22"], [1048, "sklearn-preprocessing"], [1048, "id17"], [1049, "sklearn-preprocessing"], [1049, "id10"], [1050, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1046, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1042, "sklearn-semi-supervised"], [1043, "sklearn-semi-supervised"], [1044, "sklearn-semi-supervised"], [1044, "id3"], [1044, "id16"], [1048, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1040, "sklearn-svm"], [1040, "id38"], [1041, "sklearn-svm"], [1042, "sklearn-svm"], [1043, "sklearn-svm"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1045, "id20"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1050, "sklearn-svm"]], "sklearn.tree": [[40, null], [1040, "sklearn-tree"], [1041, "sklearn-tree"], [1041, "id19"], [1042, "sklearn-tree"], [1043, "sklearn-tree"], [1044, "sklearn-tree"], [1044, "id17"], [1045, "sklearn-tree"], [1045, "id21"], [1046, "sklearn-tree"], [1046, "id5"], [1046, "id17"], [1047, "sklearn-tree"], [1047, "id5"], [1047, "id23"], [1048, "sklearn-tree"], [1048, "id3"], [1048, "id18"], [1049, "sklearn-tree"], [1049, "id11"], [1050, "sklearn-tree"], [1050, "id12"]], "sklearn.utils": [[41, null], [1040, "sklearn-utils"], [1040, "id20"], [1040, "id39"], [1041, "sklearn-utils"], [1042, "sklearn-utils"], [1042, "id14"], [1043, "sklearn-utils"], [1043, "id12"], [1044, "sklearn-utils"], [1044, "id18"], [1045, "sklearn-utils"], [1045, "id5"], [1045, "id22"], [1046, "sklearn-utils"], [1046, "id18"], [1047, "sklearn-utils"], [1047, "id6"], [1047, "id24"], [1048, "sklearn-utils"], [1049, "sklearn-utils"], [1049, "id12"], [1050, "sklearn-utils"], [1050, "id13"]], "sklearn.utils.sparsefuncs": [[1041, "sklearn-utils-sparsefuncs"]], "skops.io": [[401, "skops-io"]], "smacof": [[694, null]], "solido": [[1025, "id23"]], "sort_graph_by_row_values": [[859, null]], "sparse_encode": [[548, null]], "spectral_clustering": [[461, null]], "spectral_embedding": [[695, null]], "t-SNE: The effect of various perplexity values on the shape": [[236, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[998, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[794, null]], "train_test_split": [[830, null]], "trustworthiness": [[696, null]], "type_of_target": [[963, null]], "unique_labels": [[964, null]], "v_measure_score": [[795, null]], "validate_data": [[989, null]], "validation_curve": [[831, null]], "ward_tree": [[462, null]], "weighted_mode": [[950, null]], "zero_one_loss": [[796, null]], "\u201cStatlog\u201d German credit dataset": [[263, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[389, "term-1d", true]], "1d array": [[389, "term-1d-array", true]], "2d": [[389, "term-2d", true]], "2d array": [[389, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[465, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[938, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[389, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[926, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[958, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[453, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[439, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[440, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[939, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[940, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[941, "sklearn.utils.discovery.all_functions", false]], "api": [[389, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[644, "sklearn.linear_model.ARDRegression", false]], "array-like": [[389, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[928, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[929, "sklearn.utils.assert_all_finite", false]], "attribute": [[389, "term-attribute", true]], "attributes": [[389, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[706, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[961, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[389, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[844, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[421, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[797, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[645, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[839, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[860, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[422, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[422, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[450, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[452, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.Binarizer", false]], "binary": [[389, "term-binary", true]], "birch (class in sklearn.cluster)": [[441, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[442, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[709, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[919, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[436, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[438, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[437, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[389, "term-callable", true]], "categorical feature": [[389, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[840, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[481, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[931, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[932, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[942, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[636, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[984, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[985, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[933, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[934, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[711, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[986, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[930, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[712, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[389, "term-class_weight", true]], "classes_": [[389, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[593, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[594, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[674, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[675, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[799, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[800, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[803, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[814, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[713, "sklearn.metrics.classification_report", false]], "classifier": [[389, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[835, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[424, "sklearn.base.ClassifierMixin", false]], "classifiers": [[389, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[920, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[485, "sklearn.datasets.clear_data_home", false]], "clone": [[389, "term-clone", true]], "clone() (in module sklearn.base)": [[432, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[389, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[454, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[455, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[389, "term-clusterer", true]], "clusterers": [[389, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[425, "sklearn.base.ClusterMixin", false]], "coef_": [[389, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[907, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[908, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[910, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[987, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[463, "sklearn.compose.ColumnTransformer", false]], "common tests": [[389, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[841, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.completeness_score", false]], "components_": [[389, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[935, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[456, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[936, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[467, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[718, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[697, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[389, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[956, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[714, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[389, "term-continuous", true]], "continuous multi-output": [[389, "term-continuous-multi-output", true]], "continuous multioutput": [[389, "term-continuous-multioutput", true]], "convergencewarning": [[571, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[720, "sklearn.metrics.coverage_error", false]], "cross fitting": [[389, "term-0", true]], "cross validation": [[389, "term-1", true]], "cross-fitting": [[389, "term-cross-fitting", true]], "cross-validation": [[389, "term-cross-validation", true]], "cross-validation estimator": [[389, "term-cross-validation-estimator", true]], "cross-validation generator": [[389, "term-cross-validation-generator", true]], "cross-validation splitter": [[389, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.cross_validate", false]], "cv": [[389, "term-cv", true]], "cv splitter": [[389, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[389, "term-data-leakage", true]], "data type": [[389, "term-data-type", true]], "dataconversionwarning": [[572, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[573, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[443, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[418, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.dcg_score", false]], "decision_function": [[389, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[631, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[912, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[913, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[937, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[967, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[389, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[945, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[426, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[938, "sklearn.utils.deprecated", false]], "deprecation": [[389, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[727, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[531, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[581, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[389, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[699, "sklearn.metrics.DistanceMetric", false]], "docstring": [[389, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[389, "term-double-underscore", true]], "double underscore notation": [[389, "term-double-underscore-notation", true]], "dtype": [[389, "term-dtype", true]], "duck typing": [[389, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[551, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[552, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[486, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[389, "term-early-stopping", true]], "efficiencywarning": [[574, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[646, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[468, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[389, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[476, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[469, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[457, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[389, "term-estimator", true]], "estimator instance": [[389, "term-estimator-instance", true]], "estimator tags": [[389, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[944, "sklearn.utils.estimator_html_repr", false]], "estimators": [[389, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[555, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[556, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[557, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[558, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[563, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[564, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[565, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[566, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[389, "term-evaluation-metric", true]], "evaluation metrics": [[389, "term-evaluation-metrics", true]], "examples": [[389, "term-examples", true]], "experimental": [[389, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[916, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[917, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[914, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[915, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[532, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[946, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[533, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[419, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.fbeta_score", false]], "feature": [[389, "term-feature", true]], "feature extractor": [[389, "term-feature-extractor", true]], "feature extractors": [[389, "term-feature-extractors", true]], "feature vector": [[389, "term-feature-vector", true]], "feature_importances_": [[389, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[553, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[554, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[557, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[558, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[559, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[560, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[564, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[565, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[566, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[912, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[913, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[914, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[915, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[863, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[444, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[582, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[389, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[863, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[389, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[389, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[444, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[425, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[429, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[389, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[575, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[389, "term-fitted", true]], "fitting": [[389, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[799, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[437, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[632, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[806, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[823, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[437, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[698, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[701, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[702, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.fromkeys", false]], "function": [[389, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[389, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[648, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[798, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[896, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[951, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[952, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[626, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[499, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[389, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[428, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[699, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[389, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[389, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[959, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[732, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[733, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[953, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[477, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[470, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[471, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[800, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[801, "sklearn.model_selection.GroupKFold", false]], "groups": [[389, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[802, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[803, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[734, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[988, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[445, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[735, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[736, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[649, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[389, "term-hyper-parameter", true]], "hyperparameter": [[389, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[389, "term-imputation", true]], "impute": [[389, "term-impute", true]], "inconsistentversionwarning": [[576, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[975, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[534, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[389, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[955, "sklearn.utils.indexable", false]], "induction": [[389, "term-induction", true]], "inductive": [[389, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[877, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[878, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[885, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[976, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[977, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[982, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[983, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[978, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[980, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[921, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[433, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[434, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[962, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[435, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[563, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[688, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[637, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[635, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[627, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.jaccard_score", false]], "joblib": [[389, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[898, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[458, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[845, "sklearn.neighbors.KDTree", false]], "kernel": [[389, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[643, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[446, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[459, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[857, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[846, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[847, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[628, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[911, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[389, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[740, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[899, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[389, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[900, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[650, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[652, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[536, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[389, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[806, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[807, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[808, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[478, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[479, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[472, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[904, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[905, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[693, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[689, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[850, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[465, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[466, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[865, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[742, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[866, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[743, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[744, "sklearn.metrics.max_error", false]], "max_iter": [[389, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[690, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[460, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[981, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[447, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[389, "term-memmapping", true]], "memory": [[389, "term-memory", true]], "memory map": [[389, "term-memory-map", true]], "memory mapping": [[389, "term-memory-mapping", true]], "meta-estimator": [[389, "term-meta-estimator", true]], "meta-estimators": [[389, "term-meta-estimators", true]], "metadata": [[389, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[956, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[957, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[389, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[427, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[389, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[958, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[389, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[927, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[473, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[448, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[538, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[389, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[629, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[861, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[862, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [579, "module-sklearn.experimental.enable_halving_search_cv", false], [580, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[389, "term-multi-class", true]], "multi-class multi-output": [[389, "term-multi-class-multi-output", true]], "multi-label": [[389, "term-multi-label", true]], "multi-output": [[389, "term-multi-output", true]], "multi-output continuous": [[389, "term-multi-output-continuous", true]], "multi-output multi-class": [[389, "term-multi-output-multi-class", true]], "multiclass": [[389, "term-multiclass", true]], "multiclass multioutput": [[389, "term-multiclass-multioutput", true]], "multilabel": [[389, "term-multilabel", true]], "multilabel indicator matrices": [[389, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[389, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[833, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[754, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[389, "term-multioutput", true]], "multioutput continuous": [[389, "term-multioutput-continuous", true]], "multioutput multiclass": [[389, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[836, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[837, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[662, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[965, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[755, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[832, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[833, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[389, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[542, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[389, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[464, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[542, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[567, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[568, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[569, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[570, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[597, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[800, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[803, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[814, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[863, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[389, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[389, "term-n_iter_no_change", true]], "n_jobs": [[389, "term-n_jobs", true]], "n_outputs": [[389, "term-n_outputs", true]], "n_samples": [[389, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[907, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[908, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[910, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[389, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[567, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[568, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[569, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[570, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[864, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[463, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[389, "term-narrative-docs", true]], "narrative documentation": [[389, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[756, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[851, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[852, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[540, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[577, "sklearn.exceptions.NotFittedError", false]], "np": [[389, "term-np", true]], "nusvc (class in sklearn.svm)": [[906, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[907, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[474, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[420, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[908, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[428, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[832, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[833, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[389, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[449, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[389, "term-out-of-core", true]], "outlier detector": [[389, "term-outlier-detector", true]], "outlier detectors": [[389, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[429, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[834, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[389, "term-outputs", true]], "pair": [[389, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[715, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[389, "term-pairwise-metric", true]], "pairwise metrics": [[389, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[778, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[779, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[780, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[781, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[966, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[968, "sklearn.utils.parallel_backend", false]], "param": [[389, "term-param", true]], "parameter": [[389, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[811, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[389, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[812, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[943, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[389, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[633, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[389, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[632, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[646, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[647, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[652, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[653, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[662, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.PCA", false]], "pd": [[389, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[668, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[634, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[864, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[437, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[631, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[632, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[697, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[698, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[700, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[701, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[702, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[806, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[823, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[918, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[389, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[879, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[782, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[783, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[389, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[813, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[389, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[389, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[389, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[389, "term-predictor", true]], "predictors": [[389, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[966, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[906, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[909, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[960, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[858, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.rand_score", false]], "random_state": [[389, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[947, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[948, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[814, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[566, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[389, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[970, "sklearn.utils.register_parallel_backend", false]], "regressor": [[389, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[838, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[430, "sklearn.base.RegressorMixin", false]], "regressors": [[389, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[922, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[815, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[971, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[672, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[673, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[789, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[790, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[791, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[389, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[972, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[973, "sklearn.utils.safe_sqr", false]], "sample": [[389, "term-sample", true]], "sample properties": [[389, "term-sample-properties", true]], "sample property": [[389, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[389, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[969, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[389, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[389, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[389, "term-scikit-learn-contrib", true]], "score": [[389, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[424, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[426, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[430, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[389, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[389, "term-scorer", true]], "scoring": [[389, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[389, "term-semi-supervised", true]], "semi-supervised learning": [[389, "term-semi-supervised-learning", true]], "semisupervised": [[389, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[902, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[389, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[439, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[440, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[443, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[445, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[447, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[449, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[450, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[451, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[452, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[563, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[614, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[618, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[619, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[621, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[622, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[624, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[671, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[690, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[691, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[692, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[797, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[798, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[849, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[850, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[852, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[901, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[908, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[836, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[436, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[464, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[468, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[469, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[470, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[471, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[472, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[473, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[474, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[475, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[551, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[552, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[555, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[556, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[557, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[558, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[564, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[565, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[610, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[611, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[643, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[644, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[645, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[646, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[647, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[648, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[649, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[650, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[651, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[652, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[653, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[654, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[655, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[656, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[657, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[660, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[661, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[662, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[663, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[664, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[669, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[670, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[672, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[674, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[675, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[673, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[679, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[680, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[799, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[832, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[833, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[834, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[835, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[837, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[838, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[839, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[840, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[841, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[842, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[843, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[846, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[847, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[851, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[854, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[855, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[861, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[862, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[899, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[900, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[905, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[906, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[907, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[909, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[910, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[912, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[913, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[914, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[915, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[676, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[677, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[903, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[480, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[475, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[974, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[792, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[630, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[954, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[579, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[580, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[389, "term-SLEP", true]], "sleps": [[389, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[694, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[859, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[389, "term-sparse-graph", true]], "sparse matrix": [[389, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[646, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[652, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[660, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[662, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[542, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[543, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[897, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[658, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[659, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[666, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[667, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[668, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[676, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[677, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[678, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[904, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[461, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[695, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[450, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[691, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.SplineTransformer", false]], "split": [[389, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[801, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[802, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[805, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[807, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[808, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[809, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[810, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[813, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[815, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[816, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[817, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[818, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[819, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[820, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[821, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[560, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[562, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[559, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[561, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[553, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[554, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[389, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[818, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[820, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[389, "term-supervised", true]], "supervised learning": [[389, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[909, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[910, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[923, "sklearn.utils.Tags", false]], "target": [[389, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[389, "term-targets", true]], "targettags (class in sklearn.utils)": [[924, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[612, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[613, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[614, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[616, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[615, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[618, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[619, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[620, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[621, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[623, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[622, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[624, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[597, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.train_test_split", false]], "transduction": [[389, "term-transduction", true]], "transductive": [[389, "term-transductive", true]], "transform": [[389, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[441, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[442, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[444, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[446, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[448, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[463, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[481, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[482, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[483, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[484, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[531, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[532, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[533, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[534, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[535, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[536, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[537, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[538, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[539, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[540, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[541, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[542, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[543, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[544, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[549, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[566, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[567, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[568, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[569, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[570, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[581, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[582, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[583, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[588, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[589, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[590, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[591, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[592, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[593, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[594, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[595, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[596, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[597, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[598, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[599, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[601, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[600, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[602, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[603, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[627, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[628, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[629, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[630, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[635, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[638, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[639, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[640, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[641, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[642, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[688, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[689, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[800, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[803, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[804, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[814, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[848, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[853, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[856, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[860, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[863, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[864, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[867, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[868, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[869, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[870, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[871, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[872, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[873, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[874, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[875, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[876, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[877, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[878, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[879, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[880, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[881, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[882, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[883, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[884, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[885, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[896, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[897, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[464, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[389, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[431, "sklearn.base.TransformerMixin", false]], "transformers": [[389, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[925, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[544, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[696, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[692, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[822, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[680, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[844, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[845, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[963, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[578, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[964, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[389, "term-unlabeled", true]], "unlabeled data": [[389, "term-unlabeled-data", true]], "unsupervised": [[389, "term-unsupervised", true]], "unsupervised learning": [[389, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[989, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[957, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[823, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[617, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[919, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[389, "term-vectorizer", true]], "vectorizers": [[389, "term-vectorizers", true]], "verbose": [[389, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[569, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[570, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[462, "sklearn.cluster.ward_tree", false]], "warm_start": [[389, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[389, "term-X", true]], "xt": [[389, "term-Xt", true]], "y": [[389, "term-Y", true], [389, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[796, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [467, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [626, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [902, 4, 1, "", "set_config"], [903, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[421, 1, 1, "", "BaseEstimator"], [422, 1, 1, "", "BiclusterMixin"], [423, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [424, 1, 1, "", "ClassifierMixin"], [425, 1, 1, "", "ClusterMixin"], [426, 1, 1, "", "DensityMixin"], [427, 1, 1, "", "MetaEstimatorMixin"], [428, 1, 1, "", "OneToOneFeatureMixin"], [429, 1, 1, "", "OutlierMixin"], [430, 1, 1, "", "RegressorMixin"], [431, 1, 1, "", "TransformerMixin"], [432, 4, 1, "", "clone"], [433, 4, 1, "", "is_classifier"], [434, 4, 1, "", "is_clusterer"], [435, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[421, 2, 1, "", "get_metadata_routing"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[422, 3, 1, "", "biclusters_"], [422, 2, 1, "", "get_indices"], [422, 2, 1, "", "get_shape"], [422, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[423, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[424, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[425, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[426, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[428, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[429, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[430, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[431, 2, 1, "", "fit_transform"], [431, 2, 1, "", "set_output"]], "sklearn.calibration": [[436, 1, 1, "", "CalibratedClassifierCV"], [437, 1, 1, "", "CalibrationDisplay"], [438, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "predict"], [436, 2, 1, "", "predict_proba"], [436, 2, 1, "", "score"], [436, 2, 1, "", "set_fit_request"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[437, 2, 1, "", "from_estimator"], [437, 2, 1, "", "from_predictions"], [437, 2, 1, "", "plot"]], "sklearn.cluster": [[439, 1, 1, "", "AffinityPropagation"], [440, 1, 1, "", "AgglomerativeClustering"], [441, 1, 1, "", "Birch"], [442, 1, 1, "", "BisectingKMeans"], [443, 1, 1, "", "DBSCAN"], [444, 1, 1, "", "FeatureAgglomeration"], [445, 1, 1, "", "HDBSCAN"], [446, 1, 1, "", "KMeans"], [447, 1, 1, "", "MeanShift"], [448, 1, 1, "", "MiniBatchKMeans"], [449, 1, 1, "", "OPTICS"], [450, 1, 1, "", "SpectralBiclustering"], [451, 1, 1, "", "SpectralClustering"], [452, 1, 1, "", "SpectralCoclustering"], [453, 4, 1, "", "affinity_propagation"], [454, 4, 1, "", "cluster_optics_dbscan"], [455, 4, 1, "", "cluster_optics_xi"], [456, 4, 1, "", "compute_optics_graph"], [418, 4, 1, "", "dbscan"], [457, 4, 1, "", "estimate_bandwidth"], [458, 4, 1, "", "k_means"], [459, 4, 1, "", "kmeans_plusplus"], [460, 4, 1, "", "mean_shift"], [461, 4, 1, "", "spectral_clustering"], [462, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "predict"], [439, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "fit_transform"], [441, 2, 1, "", "get_feature_names_out"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "partial_fit"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "set_output"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "score"], [442, 2, 1, "", "set_fit_request"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "set_score_request"], [442, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[444, 2, 1, "", "fit"], [444, 3, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "inverse_transform"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[445, 2, 1, "", "dbscan_clustering"], [445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_fit_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "set_score_request"], [446, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "partial_fit"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_fit_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_partial_fit_request"], [448, 2, 1, "", "set_score_request"], [448, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[450, 3, 1, "", "biclusters_"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "get_indices"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_shape"], [450, 2, 1, "", "get_submatrix"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[452, 3, 1, "", "biclusters_"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_indices"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_shape"], [452, 2, 1, "", "get_submatrix"], [452, 2, 1, "", "set_params"]], "sklearn.compose": [[463, 1, 1, "", "ColumnTransformer"], [464, 1, 1, "", "TransformedTargetRegressor"], [465, 1, 1, "", "make_column_selector"], [466, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[463, 2, 1, "", "fit"], [463, 2, 1, "", "fit_transform"], [463, 2, 1, "", "get_feature_names_out"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 3, 1, "", "named_transformers_"], [463, 2, 1, "", "set_output"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[464, 2, 1, "", "fit"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 3, 1, "", "n_features_in_"], [464, 2, 1, "", "predict"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[465, 2, 1, "", "__call__"]], "sklearn.covariance": [[468, 1, 1, "", "EllipticEnvelope"], [469, 1, 1, "", "EmpiricalCovariance"], [470, 1, 1, "", "GraphicalLasso"], [471, 1, 1, "", "GraphicalLassoCV"], [472, 1, 1, "", "LedoitWolf"], [473, 1, 1, "", "MinCovDet"], [474, 1, 1, "", "OAS"], [475, 1, 1, "", "ShrunkCovariance"], [476, 4, 1, "", "empirical_covariance"], [477, 4, 1, "", "graphical_lasso"], [478, 4, 1, "", "ledoit_wolf"], [479, 4, 1, "", "ledoit_wolf_shrinkage"], [420, 4, 1, "", "oas"], [480, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[468, 2, 1, "", "correct_covariance"], [468, 2, 1, "", "decision_function"], [468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "fit_predict"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "predict"], [468, 2, 1, "", "reweight_covariance"], [468, 2, 1, "", "score"], [468, 2, 1, "", "score_samples"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[473, 2, 1, "", "correct_covariance"], [473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "reweight_covariance"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[481, 1, 1, "", "CCA"], [482, 1, 1, "", "PLSCanonical"], [483, 1, 1, "", "PLSRegression"], [484, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "inverse_transform"], [481, 2, 1, "", "predict"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_predict_request"], [481, 2, 1, "", "set_score_request"], [481, 2, 1, "", "set_transform_request"], [481, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "transform"]], "sklearn.datasets": [[485, 4, 1, "", "clear_data_home"], [486, 4, 1, "", "dump_svmlight_file"], [487, 4, 1, "", "fetch_20newsgroups"], [488, 4, 1, "", "fetch_20newsgroups_vectorized"], [489, 4, 1, "", "fetch_california_housing"], [490, 4, 1, "", "fetch_covtype"], [491, 4, 1, "", "fetch_file"], [492, 4, 1, "", "fetch_kddcup99"], [493, 4, 1, "", "fetch_lfw_pairs"], [494, 4, 1, "", "fetch_lfw_people"], [495, 4, 1, "", "fetch_olivetti_faces"], [496, 4, 1, "", "fetch_openml"], [497, 4, 1, "", "fetch_rcv1"], [498, 4, 1, "", "fetch_species_distributions"], [499, 4, 1, "", "get_data_home"], [500, 4, 1, "", "load_breast_cancer"], [501, 4, 1, "", "load_diabetes"], [502, 4, 1, "", "load_digits"], [503, 4, 1, "", "load_files"], [504, 4, 1, "", "load_iris"], [505, 4, 1, "", "load_linnerud"], [506, 4, 1, "", "load_sample_image"], [507, 4, 1, "", "load_sample_images"], [508, 4, 1, "", "load_svmlight_file"], [509, 4, 1, "", "load_svmlight_files"], [510, 4, 1, "", "load_wine"], [511, 4, 1, "", "make_biclusters"], [512, 4, 1, "", "make_blobs"], [513, 4, 1, "", "make_checkerboard"], [514, 4, 1, "", "make_circles"], [515, 4, 1, "", "make_classification"], [516, 4, 1, "", "make_friedman1"], [517, 4, 1, "", "make_friedman2"], [518, 4, 1, "", "make_friedman3"], [519, 4, 1, "", "make_gaussian_quantiles"], [520, 4, 1, "", "make_hastie_10_2"], [521, 4, 1, "", "make_low_rank_matrix"], [522, 4, 1, "", "make_moons"], [523, 4, 1, "", "make_multilabel_classification"], [524, 4, 1, "", "make_regression"], [525, 4, 1, "", "make_s_curve"], [526, 4, 1, "", "make_sparse_coded_signal"], [527, 4, 1, "", "make_sparse_spd_matrix"], [528, 4, 1, "", "make_sparse_uncorrelated"], [529, 4, 1, "", "make_spd_matrix"], [530, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[531, 1, 1, "", "DictionaryLearning"], [532, 1, 1, "", "FactorAnalysis"], [533, 1, 1, "", "FastICA"], [534, 1, 1, "", "IncrementalPCA"], [535, 1, 1, "", "KernelPCA"], [536, 1, 1, "", "LatentDirichletAllocation"], [537, 1, 1, "", "MiniBatchDictionaryLearning"], [538, 1, 1, "", "MiniBatchNMF"], [539, 1, 1, "", "MiniBatchSparsePCA"], [540, 1, 1, "", "NMF"], [541, 1, 1, "", "PCA"], [542, 1, 1, "", "SparseCoder"], [543, 1, 1, "", "SparsePCA"], [544, 1, 1, "", "TruncatedSVD"], [545, 4, 1, "", "dict_learning"], [546, 4, 1, "", "dict_learning_online"], [419, 4, 1, "", "fastica"], [547, 4, 1, "", "non_negative_factorization"], [548, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_covariance"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "get_precision"], [532, 2, 1, "", "score"], [532, 2, 1, "", "score_samples"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_inverse_transform_request"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "set_transform_request"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_covariance"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "get_precision"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_partial_fit_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "perplexity"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "set_transform_request"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_covariance"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "get_precision"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "score"], [541, 2, 1, "", "score_samples"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 3, 1, "", "n_components_"], [542, 3, 1, "", "n_features_in_"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[549, 1, 1, "", "LinearDiscriminantAnalysis"], [550, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[549, 2, 1, "", "decision_function"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"], [549, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[551, 1, 1, "", "DummyClassifier"], [552, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_predict_request"], [552, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[553, 1, 1, "", "AdaBoostClassifier"], [554, 1, 1, "", "AdaBoostRegressor"], [555, 1, 1, "", "BaggingClassifier"], [556, 1, 1, "", "BaggingRegressor"], [557, 1, 1, "", "ExtraTreesClassifier"], [558, 1, 1, "", "ExtraTreesRegressor"], [559, 1, 1, "", "GradientBoostingClassifier"], [560, 1, 1, "", "GradientBoostingRegressor"], [561, 1, 1, "", "HistGradientBoostingClassifier"], [562, 1, 1, "", "HistGradientBoostingRegressor"], [563, 1, 1, "", "IsolationForest"], [564, 1, 1, "", "RandomForestClassifier"], [565, 1, 1, "", "RandomForestRegressor"], [566, 1, 1, "", "RandomTreesEmbedding"], [567, 1, 1, "", "StackingClassifier"], [568, 1, 1, "", "StackingRegressor"], [569, 1, 1, "", "VotingClassifier"], [570, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[553, 2, 1, "", "decision_function"], [553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "staged_decision_function"], [553, 2, 1, "", "staged_predict"], [553, 2, 1, "", "staged_predict_proba"], [553, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_predict"], [554, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[555, 2, 1, "", "decision_function"], [555, 3, 1, "", "estimators_samples_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[556, 3, 1, "", "estimators_samples_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[557, 2, 1, "", "apply"], [557, 2, 1, "", "decision_path"], [557, 3, 1, "", "estimators_samples_"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "estimators_samples_"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[559, 2, 1, "", "apply"], [559, 2, 1, "", "decision_function"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_decision_function"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[560, 2, 1, "", "apply"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[561, 2, 1, "", "decision_function"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "n_iter_"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_decision_function"], [561, 2, 1, "", "staged_predict"], [561, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_iter_"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[563, 2, 1, "", "decision_function"], [563, 3, 1, "", "estimators_samples_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_predict"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score_samples"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_log_proba"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[567, 2, 1, "", "decision_function"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_features_in_"], [567, 3, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.exceptions": [[571, 5, 1, "", "ConvergenceWarning"], [572, 5, 1, "", "DataConversionWarning"], [573, 5, 1, "", "DataDimensionalityWarning"], [574, 5, 1, "", "EfficiencyWarning"], [575, 5, 1, "", "FitFailedWarning"], [576, 5, 1, "", "InconsistentVersionWarning"], [577, 5, 1, "", "NotFittedError"], [578, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[579, 0, 0, "-", "enable_halving_search_cv"], [580, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[581, 1, 1, "", "DictVectorizer"], [582, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "restrict"], [581, 2, 1, "", "set_inverse_transform_request"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "set_transform_request"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[583, 1, 1, "", "PatchExtractor"], [584, 4, 1, "", "extract_patches_2d"], [585, 4, 1, "", "grid_to_graph"], [586, 4, 1, "", "img_to_graph"], [587, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[588, 1, 1, "", "CountVectorizer"], [589, 1, 1, "", "HashingVectorizer"], [590, 1, 1, "", "TfidfTransformer"], [591, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[588, 2, 1, "", "build_analyzer"], [588, 2, 1, "", "build_preprocessor"], [588, 2, 1, "", "build_tokenizer"], [588, 2, 1, "", "decode"], [588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_stop_words"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_fit_request"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "set_transform_request"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[589, 2, 1, "", "build_analyzer"], [589, 2, 1, "", "build_preprocessor"], [589, 2, 1, "", "build_tokenizer"], [589, 2, 1, "", "decode"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_stop_words"], [589, 2, 1, "", "partial_fit"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "set_transform_request"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[591, 2, 1, "", "build_analyzer"], [591, 2, 1, "", "build_preprocessor"], [591, 2, 1, "", "build_tokenizer"], [591, 2, 1, "", "decode"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_stop_words"], [591, 3, 1, "", "idf_"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_fit_request"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "set_transform_request"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection": [[592, 1, 1, "", "GenericUnivariateSelect"], [593, 1, 1, "", "RFE"], [594, 1, 1, "", "RFECV"], [595, 1, 1, "", "SelectFdr"], [596, 1, 1, "", "SelectFpr"], [597, 1, 1, "", "SelectFromModel"], [598, 1, 1, "", "SelectFwe"], [599, 1, 1, "", "SelectKBest"], [600, 1, 1, "", "SelectPercentile"], [601, 1, 1, "", "SelectorMixin"], [602, 1, 1, "", "SequentialFeatureSelector"], [603, 1, 1, "", "VarianceThreshold"], [604, 4, 1, "", "chi2"], [605, 4, 1, "", "f_classif"], [606, 4, 1, "", "f_regression"], [607, 4, 1, "", "mutual_info_classif"], [608, 4, 1, "", "mutual_info_regression"], [609, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[593, 3, 1, "", "classes_"], [593, 2, 1, "", "decision_function"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "predict"], [593, 2, 1, "", "predict_log_proba"], [593, 2, 1, "", "predict_proba"], [593, 2, 1, "", "score"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[594, 3, 1, "", "classes_"], [594, 2, 1, "", "decision_function"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "predict_log_proba"], [594, 2, 1, "", "predict_proba"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 3, 1, "", "n_features_in_"], [597, 2, 1, "", "partial_fit"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "threshold_"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[610, 1, 1, "", "GaussianProcessClassifier"], [611, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "kernel_"], [610, 2, 1, "", "log_marginal_likelihood"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "predict_proba"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "log_marginal_likelihood"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "sample_y"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_predict_request"], [611, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[612, 1, 1, "", "CompoundKernel"], [613, 1, 1, "", "ConstantKernel"], [614, 1, 1, "", "DotProduct"], [615, 1, 1, "", "ExpSineSquared"], [616, 1, 1, "", "Exponentiation"], [617, 1, 1, "", "Hyperparameter"], [618, 1, 1, "", "Kernel"], [619, 1, 1, "", "Matern"], [620, 1, 1, "", "PairwiseKernel"], [621, 1, 1, "", "Product"], [622, 1, 1, "", "RBF"], [623, 1, 1, "", "RationalQuadratic"], [624, 1, 1, "", "Sum"], [625, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameter_length_scale"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[617, 6, 1, "", "bounds"], [617, 2, 1, "", "count"], [617, 6, 1, "", "fixed"], [617, 2, 1, "", "index"], [617, 6, 1, "", "n_elements"], [617, 6, 1, "", "name"], [617, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.impute": [[627, 1, 1, "", "IterativeImputer"], [628, 1, 1, "", "KNNImputer"], [629, 1, 1, "", "MissingIndicator"], [630, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "inverse_transform"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.inspection": [[631, 1, 1, "", "DecisionBoundaryDisplay"], [632, 1, 1, "", "PartialDependenceDisplay"], [633, 4, 1, "", "partial_dependence"], [634, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[631, 2, 1, "", "from_estimator"], [631, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[632, 2, 1, "", "from_estimator"], [632, 2, 1, "", "plot"]], "sklearn.isotonic": [[635, 1, 1, "", "IsotonicRegression"], [636, 4, 1, "", "check_increasing"], [637, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_fit_request"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "set_predict_request"], [635, 2, 1, "", "set_score_request"], [635, 2, 1, "", "set_transform_request"], [635, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[638, 1, 1, "", "AdditiveChi2Sampler"], [639, 1, 1, "", "Nystroem"], [640, 1, 1, "", "PolynomialCountSketch"], [641, 1, 1, "", "RBFSampler"], [642, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[643, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[644, 1, 1, "", "ARDRegression"], [645, 1, 1, "", "BayesianRidge"], [646, 1, 1, "", "ElasticNet"], [647, 1, 1, "", "ElasticNetCV"], [648, 1, 1, "", "GammaRegressor"], [649, 1, 1, "", "HuberRegressor"], [650, 1, 1, "", "Lars"], [651, 1, 1, "", "LarsCV"], [652, 1, 1, "", "Lasso"], [653, 1, 1, "", "LassoCV"], [654, 1, 1, "", "LassoLars"], [655, 1, 1, "", "LassoLarsCV"], [656, 1, 1, "", "LassoLarsIC"], [657, 1, 1, "", "LinearRegression"], [658, 1, 1, "", "LogisticRegression"], [659, 1, 1, "", "LogisticRegressionCV"], [660, 1, 1, "", "MultiTaskElasticNet"], [661, 1, 1, "", "MultiTaskElasticNetCV"], [662, 1, 1, "", "MultiTaskLasso"], [663, 1, 1, "", "MultiTaskLassoCV"], [664, 1, 1, "", "OrthogonalMatchingPursuit"], [665, 1, 1, "", "OrthogonalMatchingPursuitCV"], [666, 1, 1, "", "PassiveAggressiveClassifier"], [667, 1, 1, "", "PassiveAggressiveRegressor"], [668, 1, 1, "", "Perceptron"], [669, 1, 1, "", "PoissonRegressor"], [670, 1, 1, "", "QuantileRegressor"], [671, 1, 1, "", "RANSACRegressor"], [672, 1, 1, "", "Ridge"], [673, 1, 1, "", "RidgeCV"], [674, 1, 1, "", "RidgeClassifier"], [675, 1, 1, "", "RidgeClassifierCV"], [676, 1, 1, "", "SGDClassifier"], [677, 1, 1, "", "SGDOneClassSVM"], [678, 1, 1, "", "SGDRegressor"], [679, 1, 1, "", "TheilSenRegressor"], [680, 1, 1, "", "TweedieRegressor"], [681, 4, 1, "", "enet_path"], [682, 4, 1, "", "lars_path"], [683, 4, 1, "", "lars_path_gram"], [684, 4, 1, "", "lasso_path"], [685, 4, 1, "", "orthogonal_mp"], [686, 4, 1, "", "orthogonal_mp_gram"], [687, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_predict_request"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_predict_request"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"], [646, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"], [652, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[658, 2, 1, "", "decision_function"], [658, 2, 1, "", "densify"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "predict_log_proba"], [658, 2, 1, "", "predict_proba"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "predict_log_proba"], [659, 2, 1, "", "predict_proba"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"], [662, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[668, 2, 1, "", "decision_function"], [668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "partial_fit"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_partial_fit_request"], [668, 2, 1, "", "set_score_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[674, 3, 1, "", "classes_"], [674, 2, 1, "", "decision_function"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[675, 3, 1, "", "classes_"], [675, 2, 1, "", "decision_function"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[676, 2, 1, "", "decision_function"], [676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "predict_log_proba"], [676, 2, 1, "", "predict_proba"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[677, 2, 1, "", "decision_function"], [677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "fit_predict"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score_samples"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[678, 2, 1, "", "densify"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "partial_fit"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_partial_fit_request"], [678, 2, 1, "", "set_score_request"], [678, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[688, 1, 1, "", "Isomap"], [689, 1, 1, "", "LocallyLinearEmbedding"], [690, 1, 1, "", "MDS"], [691, 1, 1, "", "SpectralEmbedding"], [692, 1, 1, "", "TSNE"], [693, 4, 1, "", "locally_linear_embedding"], [694, 4, 1, "", "smacof"], [695, 4, 1, "", "spectral_embedding"], [696, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_feature_names_out"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "reconstruction_error"], [688, 2, 1, "", "set_output"], [688, 2, 1, "", "set_params"], [688, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_feature_names_out"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_output"], [689, 2, 1, "", "set_params"], [689, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_fit_request"], [690, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"]], "sklearn.metrics": [[697, 1, 1, "", "ConfusionMatrixDisplay"], [698, 1, 1, "", "DetCurveDisplay"], [699, 1, 1, "", "DistanceMetric"], [700, 1, 1, "", "PrecisionRecallDisplay"], [701, 1, 1, "", "PredictionErrorDisplay"], [702, 1, 1, "", "RocCurveDisplay"], [703, 4, 1, "", "accuracy_score"], [704, 4, 1, "", "adjusted_mutual_info_score"], [705, 4, 1, "", "adjusted_rand_score"], [706, 4, 1, "", "auc"], [707, 4, 1, "", "average_precision_score"], [708, 4, 1, "", "balanced_accuracy_score"], [709, 4, 1, "", "brier_score_loss"], [710, 4, 1, "", "calinski_harabasz_score"], [711, 4, 1, "", "check_scoring"], [712, 4, 1, "", "class_likelihood_ratios"], [713, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [716, 4, 1, "", "cohen_kappa_score"], [717, 4, 1, "", "completeness_score"], [718, 4, 1, "", "confusion_matrix"], [719, 4, 1, "", "consensus_score"], [720, 4, 1, "", "coverage_error"], [721, 4, 1, "", "d2_absolute_error_score"], [722, 4, 1, "", "d2_log_loss_score"], [723, 4, 1, "", "d2_pinball_score"], [724, 4, 1, "", "d2_tweedie_score"], [725, 4, 1, "", "davies_bouldin_score"], [726, 4, 1, "", "dcg_score"], [727, 4, 1, "", "det_curve"], [728, 4, 1, "", "explained_variance_score"], [729, 4, 1, "", "f1_score"], [730, 4, 1, "", "fbeta_score"], [731, 4, 1, "", "fowlkes_mallows_score"], [732, 4, 1, "", "get_scorer"], [733, 4, 1, "", "get_scorer_names"], [734, 4, 1, "", "hamming_loss"], [735, 4, 1, "", "hinge_loss"], [736, 4, 1, "", "homogeneity_completeness_v_measure"], [737, 4, 1, "", "homogeneity_score"], [738, 4, 1, "", "jaccard_score"], [739, 4, 1, "", "label_ranking_average_precision_score"], [740, 4, 1, "", "label_ranking_loss"], [741, 4, 1, "", "log_loss"], [742, 4, 1, "", "make_scorer"], [743, 4, 1, "", "matthews_corrcoef"], [744, 4, 1, "", "max_error"], [745, 4, 1, "", "mean_absolute_error"], [746, 4, 1, "", "mean_absolute_percentage_error"], [747, 4, 1, "", "mean_gamma_deviance"], [748, 4, 1, "", "mean_pinball_loss"], [749, 4, 1, "", "mean_poisson_deviance"], [750, 4, 1, "", "mean_squared_error"], [751, 4, 1, "", "mean_squared_log_error"], [752, 4, 1, "", "mean_tweedie_deviance"], [753, 4, 1, "", "median_absolute_error"], [754, 4, 1, "", "multilabel_confusion_matrix"], [755, 4, 1, "", "mutual_info_score"], [756, 4, 1, "", "ndcg_score"], [757, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [778, 4, 1, "", "pairwise_distances"], [779, 4, 1, "", "pairwise_distances_argmin"], [780, 4, 1, "", "pairwise_distances_argmin_min"], [781, 4, 1, "", "pairwise_distances_chunked"], [782, 4, 1, "", "precision_recall_curve"], [783, 4, 1, "", "precision_recall_fscore_support"], [784, 4, 1, "", "precision_score"], [785, 4, 1, "", "r2_score"], [786, 4, 1, "", "rand_score"], [787, 4, 1, "", "recall_score"], [788, 4, 1, "", "roc_auc_score"], [789, 4, 1, "", "roc_curve"], [790, 4, 1, "", "root_mean_squared_error"], [791, 4, 1, "", "root_mean_squared_log_error"], [792, 4, 1, "", "silhouette_samples"], [793, 4, 1, "", "silhouette_score"], [794, 4, 1, "", "top_k_accuracy_score"], [795, 4, 1, "", "v_measure_score"], [796, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[697, 2, 1, "", "from_estimator"], [697, 2, 1, "", "from_predictions"], [697, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[699, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[714, 4, 1, "", "contingency_matrix"], [715, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[758, 4, 1, "", "additive_chi2_kernel"], [759, 4, 1, "", "chi2_kernel"], [760, 4, 1, "", "cosine_distances"], [761, 4, 1, "", "cosine_similarity"], [762, 4, 1, "", "distance_metrics"], [763, 4, 1, "", "euclidean_distances"], [764, 4, 1, "", "haversine_distances"], [765, 4, 1, "", "kernel_metrics"], [766, 4, 1, "", "laplacian_kernel"], [767, 4, 1, "", "linear_kernel"], [768, 4, 1, "", "manhattan_distances"], [769, 4, 1, "", "nan_euclidean_distances"], [770, 4, 1, "", "paired_cosine_distances"], [771, 4, 1, "", "paired_distances"], [772, 4, 1, "", "paired_euclidean_distances"], [773, 4, 1, "", "paired_manhattan_distances"], [774, 4, 1, "", "pairwise_kernels"], [775, 4, 1, "", "polynomial_kernel"], [776, 4, 1, "", "rbf_kernel"], [777, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[797, 1, 1, "", "BayesianGaussianMixture"], [798, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[797, 2, 1, "", "fit"], [797, 2, 1, "", "fit_predict"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "sample"], [797, 2, 1, "", "score"], [797, 2, 1, "", "score_samples"], [797, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[798, 2, 1, "", "aic"], [798, 2, 1, "", "bic"], [798, 2, 1, "", "fit"], [798, 2, 1, "", "fit_predict"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "sample"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"]], "sklearn.model_selection": [[799, 1, 1, "", "FixedThresholdClassifier"], [800, 1, 1, "", "GridSearchCV"], [801, 1, 1, "", "GroupKFold"], [802, 1, 1, "", "GroupShuffleSplit"], [803, 1, 1, "", "HalvingGridSearchCV"], [804, 1, 1, "", "HalvingRandomSearchCV"], [805, 1, 1, "", "KFold"], [806, 1, 1, "", "LearningCurveDisplay"], [807, 1, 1, "", "LeaveOneGroupOut"], [808, 1, 1, "", "LeaveOneOut"], [809, 1, 1, "", "LeavePGroupsOut"], [810, 1, 1, "", "LeavePOut"], [811, 1, 1, "", "ParameterGrid"], [812, 1, 1, "", "ParameterSampler"], [813, 1, 1, "", "PredefinedSplit"], [814, 1, 1, "", "RandomizedSearchCV"], [815, 1, 1, "", "RepeatedKFold"], [816, 1, 1, "", "RepeatedStratifiedKFold"], [817, 1, 1, "", "ShuffleSplit"], [818, 1, 1, "", "StratifiedGroupKFold"], [819, 1, 1, "", "StratifiedKFold"], [820, 1, 1, "", "StratifiedShuffleSplit"], [821, 1, 1, "", "TimeSeriesSplit"], [822, 1, 1, "", "TunedThresholdClassifierCV"], [823, 1, 1, "", "ValidationCurveDisplay"], [824, 4, 1, "", "check_cv"], [825, 4, 1, "", "cross_val_predict"], [826, 4, 1, "", "cross_val_score"], [827, 4, 1, "", "cross_validate"], [828, 4, 1, "", "learning_curve"], [829, 4, 1, "", "permutation_test_score"], [830, 4, 1, "", "train_test_split"], [831, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[799, 3, 1, "", "classes_"], [799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_log_proba"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[800, 3, 1, "", "classes_"], [800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "inverse_transform"], [800, 3, 1, "", "n_features_in_"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "set_split_request"], [801, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "set_split_request"], [802, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "inverse_transform"], [803, 3, 1, "", "n_features_in_"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 3, 1, "", "n_features_in_"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[806, 2, 1, "", "from_estimator"], [806, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "set_split_request"], [807, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "set_split_request"], [809, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[814, 3, 1, "", "classes_"], [814, 2, 1, "", "decision_function"], [814, 2, 1, "", "fit"], [814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "inverse_transform"], [814, 3, 1, "", "n_features_in_"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "predict_log_proba"], [814, 2, 1, "", "predict_proba"], [814, 2, 1, "", "score"], [814, 2, 1, "", "score_samples"], [814, 2, 1, "", "set_params"], [814, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "set_split_request"], [818, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[822, 3, 1, "", "classes_"], [822, 2, 1, "", "decision_function"], [822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_log_proba"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[823, 2, 1, "", "from_estimator"], [823, 2, 1, "", "plot"]], "sklearn.multiclass": [[832, 1, 1, "", "OneVsOneClassifier"], [833, 1, 1, "", "OneVsRestClassifier"], [834, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[832, 2, 1, "", "decision_function"], [832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 3, 1, "", "n_classes_"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"], [832, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[833, 2, 1, "", "decision_function"], [833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 3, 1, "", "multilabel_"], [833, 3, 1, "", "n_classes_"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[835, 1, 1, "", "ClassifierChain"], [836, 1, 1, "", "MultiOutputClassifier"], [837, 1, 1, "", "MultiOutputRegressor"], [838, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[835, 2, 1, "", "decision_function"], [835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[839, 1, 1, "", "BernoulliNB"], [840, 1, 1, "", "CategoricalNB"], [841, 1, 1, "", "ComplementNB"], [842, 1, 1, "", "GaussianNB"], [843, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_joint_log_proba"], [839, 2, 1, "", "predict_log_proba"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_joint_log_proba"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_joint_log_proba"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[844, 1, 1, "", "BallTree"], [845, 1, 1, "", "KDTree"], [846, 1, 1, "", "KNeighborsClassifier"], [847, 1, 1, "", "KNeighborsRegressor"], [848, 1, 1, "", "KNeighborsTransformer"], [849, 1, 1, "", "KernelDensity"], [850, 1, 1, "", "LocalOutlierFactor"], [851, 1, 1, "", "NearestCentroid"], [852, 1, 1, "", "NearestNeighbors"], [853, 1, 1, "", "NeighborhoodComponentsAnalysis"], [854, 1, 1, "", "RadiusNeighborsClassifier"], [855, 1, 1, "", "RadiusNeighborsRegressor"], [856, 1, 1, "", "RadiusNeighborsTransformer"], [857, 4, 1, "", "kneighbors_graph"], [858, 4, 1, "", "radius_neighbors_graph"], [859, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[844, 2, 1, "", "get_arrays"], [844, 2, 1, "", "get_n_calls"], [844, 2, 1, "", "get_tree_stats"], [844, 2, 1, "", "kernel_density"], [844, 2, 1, "", "query"], [844, 2, 1, "", "query_radius"], [844, 2, 1, "", "reset_n_calls"], [844, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[845, 2, 1, "", "get_arrays"], [845, 2, 1, "", "get_n_calls"], [845, 2, 1, "", "get_tree_stats"], [845, 2, 1, "", "kernel_density"], [845, 2, 1, "", "query"], [845, 2, 1, "", "query_radius"], [845, 2, 1, "", "reset_n_calls"], [845, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "kneighbors"], [846, 2, 1, "", "kneighbors_graph"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "kneighbors"], [848, 2, 1, "", "kneighbors_graph"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "sample"], [849, 2, 1, "", "score"], [849, 2, 1, "", "score_samples"], [849, 2, 1, "", "set_fit_request"], [849, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[850, 2, 1, "", "decision_function"], [850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_predict"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score_samples"], [850, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "radius_neighbors"], [852, 2, 1, "", "radius_neighbors_graph"], [852, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "predict_proba"], [854, 2, 1, "", "radius_neighbors"], [854, 2, 1, "", "radius_neighbors_graph"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "radius_neighbors"], [855, 2, 1, "", "radius_neighbors_graph"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.neural_network": [[860, 1, 1, "", "BernoulliRBM"], [861, 1, 1, "", "MLPClassifier"], [862, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "gibbs"], [860, 2, 1, "", "partial_fit"], [860, 2, 1, "", "score_samples"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "partial_fit"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "predict_log_proba"], [861, 2, 1, "", "predict_proba"], [861, 2, 1, "", "score"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_partial_fit_request"], [861, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[863, 1, 1, "", "FeatureUnion"], [864, 1, 1, "", "Pipeline"], [865, 4, 1, "", "make_pipeline"], [866, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[863, 3, 1, "", "feature_names_in_"], [863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 3, 1, "", "n_features_in_"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[864, 3, 1, "", "classes_"], [864, 2, 1, "", "decision_function"], [864, 3, 1, "", "feature_names_in_"], [864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_predict"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 3, 1, "", "n_features_in_"], [864, 3, 1, "", "named_steps"], [864, 2, 1, "", "predict"], [864, 2, 1, "", "predict_log_proba"], [864, 2, 1, "", "predict_proba"], [864, 2, 1, "", "score"], [864, 2, 1, "", "score_samples"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_score_request"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing": [[867, 1, 1, "", "Binarizer"], [868, 1, 1, "", "FunctionTransformer"], [869, 1, 1, "", "KBinsDiscretizer"], [870, 1, 1, "", "KernelCenterer"], [871, 1, 1, "", "LabelBinarizer"], [872, 1, 1, "", "LabelEncoder"], [873, 1, 1, "", "MaxAbsScaler"], [874, 1, 1, "", "MinMaxScaler"], [875, 1, 1, "", "MultiLabelBinarizer"], [876, 1, 1, "", "Normalizer"], [877, 1, 1, "", "OneHotEncoder"], [878, 1, 1, "", "OrdinalEncoder"], [879, 1, 1, "", "PolynomialFeatures"], [880, 1, 1, "", "PowerTransformer"], [881, 1, 1, "", "QuantileTransformer"], [882, 1, 1, "", "RobustScaler"], [883, 1, 1, "", "SplineTransformer"], [884, 1, 1, "", "StandardScaler"], [885, 1, 1, "", "TargetEncoder"], [886, 4, 1, "", "add_dummy_feature"], [887, 4, 1, "", "binarize"], [888, 4, 1, "", "label_binarize"], [889, 4, 1, "", "maxabs_scale"], [890, 4, 1, "", "minmax_scale"], [891, 4, 1, "", "normalize"], [892, 4, 1, "", "power_transform"], [893, 4, 1, "", "quantile_transform"], [894, 4, 1, "", "robust_scale"], [895, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_transform_request"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_fit_request"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "set_fit_request"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_transform_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_inverse_transform_request"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "partial_fit"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "partial_fit"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "set_transform_request"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 3, 1, "", "infrequent_categories_"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 3, 1, "", "infrequent_categories_"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 3, 1, "", "powers_"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "set_fit_request"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "partial_fit"], [884, 2, 1, "", "set_fit_request"], [884, 2, 1, "", "set_inverse_transform_request"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "set_partial_fit_request"], [884, 2, 1, "", "set_transform_request"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 3, 1, "", "infrequent_categories_"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.random_projection": [[896, 1, 1, "", "GaussianRandomProjection"], [897, 1, 1, "", "SparseRandomProjection"], [898, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[896, 2, 1, "", "fit"], [896, 2, 1, "", "fit_transform"], [896, 2, 1, "", "get_feature_names_out"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "inverse_transform"], [896, 2, 1, "", "set_output"], [896, 2, 1, "", "set_params"], [896, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[897, 2, 1, "", "fit"], [897, 2, 1, "", "fit_transform"], [897, 2, 1, "", "get_feature_names_out"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "inverse_transform"], [897, 2, 1, "", "set_output"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[899, 1, 1, "", "LabelPropagation"], [900, 1, 1, "", "LabelSpreading"], [901, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "predict_proba"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_proba"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[901, 2, 1, "", "decision_function"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_log_proba"], [901, 2, 1, "", "predict_proba"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_params"]], "sklearn.svm": [[904, 1, 1, "", "LinearSVC"], [905, 1, 1, "", "LinearSVR"], [906, 1, 1, "", "NuSVC"], [907, 1, 1, "", "NuSVR"], [908, 1, 1, "", "OneClassSVM"], [909, 1, 1, "", "SVC"], [910, 1, 1, "", "SVR"], [911, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[904, 2, 1, "", "decision_function"], [904, 2, 1, "", "densify"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"], [904, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[906, 3, 1, "", "coef_"], [906, 2, 1, "", "decision_function"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 3, 1, "", "n_support_"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_log_proba"], [906, 2, 1, "", "predict_proba"], [906, 3, 1, "", "probA_"], [906, 3, 1, "", "probB_"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[907, 3, 1, "", "coef_"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 3, 1, "", "n_support_"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[908, 3, 1, "", "coef_"], [908, 2, 1, "", "decision_function"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "fit_predict"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 3, 1, "", "n_support_"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score_samples"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[909, 3, 1, "", "coef_"], [909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 3, 1, "", "n_support_"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 3, 1, "", "probA_"], [909, 3, 1, "", "probB_"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.tree": [[912, 1, 1, "", "DecisionTreeClassifier"], [913, 1, 1, "", "DecisionTreeRegressor"], [914, 1, 1, "", "ExtraTreeClassifier"], [915, 1, 1, "", "ExtraTreeRegressor"], [916, 4, 1, "", "export_graphviz"], [917, 4, 1, "", "export_text"], [918, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[912, 2, 1, "", "apply"], [912, 2, 1, "", "cost_complexity_pruning_path"], [912, 2, 1, "", "decision_path"], [912, 3, 1, "", "feature_importances_"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_depth"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_n_leaves"], [912, 2, 1, "", "get_params"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "predict_log_proba"], [912, 2, 1, "", "predict_proba"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_predict_proba_request"], [912, 2, 1, "", "set_predict_request"], [912, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[913, 2, 1, "", "apply"], [913, 2, 1, "", "cost_complexity_pruning_path"], [913, 2, 1, "", "decision_path"], [913, 3, 1, "", "feature_importances_"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_depth"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_n_leaves"], [913, 2, 1, "", "get_params"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_predict_request"], [913, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[914, 2, 1, "", "apply"], [914, 2, 1, "", "cost_complexity_pruning_path"], [914, 2, 1, "", "decision_path"], [914, 3, 1, "", "feature_importances_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_depth"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_n_leaves"], [914, 2, 1, "", "get_params"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "predict_log_proba"], [914, 2, 1, "", "predict_proba"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_predict_proba_request"], [914, 2, 1, "", "set_predict_request"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 3, 1, "", "feature_importances_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_predict_request"], [915, 2, 1, "", "set_score_request"]], "sklearn.utils": [[919, 1, 1, "", "Bunch"], [920, 1, 1, "", "ClassifierTags"], [921, 1, 1, "", "InputTags"], [922, 1, 1, "", "RegressorTags"], [923, 1, 1, "", "Tags"], [924, 1, 1, "", "TargetTags"], [925, 1, 1, "", "TransformerTags"], [926, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [928, 4, 1, "", "as_float_array"], [929, 4, 1, "", "assert_all_finite"], [930, 4, 1, "", "check_X_y"], [931, 4, 1, "", "check_array"], [932, 4, 1, "", "check_consistent_length"], [933, 4, 1, "", "check_random_state"], [934, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [937, 4, 1, "", "default_tags"], [938, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [944, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [951, 4, 1, "", "gen_batches"], [952, 4, 1, "", "gen_even_slices"], [953, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [955, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [965, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [968, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [970, 4, 1, "", "register_parallel_backend"], [971, 4, 1, "", "resample"], [972, 4, 1, "", "safe_mask"], [973, 4, 1, "", "safe_sqr"], [974, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[919, 2, 1, "", "clear"], [919, 2, 1, "", "copy"], [919, 2, 1, "", "fromkeys"], [919, 2, 1, "", "get"], [919, 2, 1, "", "items"], [919, 2, 1, "", "keys"], [919, 2, 1, "", "pop"], [919, 2, 1, "", "popitem"], [919, 2, 1, "", "setdefault"], [919, 2, 1, "", "update"], [919, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[927, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[935, 4, 1, "", "compute_class_weight"], [936, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[938, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[939, 4, 1, "", "all_displays"], [940, 4, 1, "", "all_estimators"], [941, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[942, 4, 1, "", "check_estimator"], [943, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[945, 4, 1, "", "density"], [946, 4, 1, "", "fast_logdet"], [947, 4, 1, "", "randomized_range_finder"], [948, 4, 1, "", "randomized_svd"], [949, 4, 1, "", "safe_sparse_dot"], [950, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[954, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[956, 1, 1, "", "MetadataRequest"], [957, 1, 1, "", "MetadataRouter"], [958, 1, 1, "", "MethodMapping"], [959, 4, 1, "", "get_routing_for_object"], [960, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[956, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[957, 2, 1, "", "add"], [957, 2, 1, "", "add_self_request"], [957, 2, 1, "", "consumes"], [957, 2, 1, "", "route_params"], [957, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[958, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[961, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[962, 4, 1, "", "is_multilabel"], [963, 4, 1, "", "type_of_target"], [964, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[966, 1, 1, "", "Parallel"], [967, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[966, 2, 1, "", "__call__"], [966, 2, 1, "", "dispatch_next"], [966, 2, 1, "", "dispatch_one_batch"], [966, 2, 1, "", "format"], [966, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[969, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[975, 4, 1, "", "incr_mean_variance_axis"], [976, 4, 1, "", "inplace_column_scale"], [977, 4, 1, "", "inplace_csr_column_scale"], [978, 4, 1, "", "inplace_row_scale"], [979, 4, 1, "", "inplace_swap_column"], [980, 4, 1, "", "inplace_swap_row"], [981, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[982, 4, 1, "", "inplace_csr_row_normalize_l1"], [983, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[984, 4, 1, "", "check_is_fitted"], [985, 4, 1, "", "check_memory"], [986, 4, 1, "", "check_symmetric"], [987, 4, 1, "", "column_or_1d"], [988, 4, 1, "", "has_fit_parameter"], [989, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 80, 81, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 109, 110, 113, 115, 118, 120, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 161, 163, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 186, 187, 189, 191, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 208, 209, 211, 213, 215, 217, 218, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 248, 254, 256, 257, 259, 263, 264, 269, 270, 271, 272, 273, 276, 280, 282, 284, 289, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 307, 308, 309, 312, 315, 318, 320, 321, 322, 323, 324, 325, 326, 329, 330, 336, 337, 338, 339, 340, 343, 344, 345, 348, 350, 351, 352, 355, 356, 357, 358, 362, 363, 364, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 389, 390, 392, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 421, 428, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 488, 490, 496, 498, 500, 504, 510, 511, 519, 525, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 708, 711, 716, 720, 722, 735, 741, 758, 759, 779, 780, 797, 798, 799, 800, 802, 803, 804, 809, 814, 818, 819, 822, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 928, 930, 931, 934, 948, 950, 957, 958, 960, 984, 988, 989, 990, 992, 993, 995, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1025, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 430, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 926, 927, 928, 930, 931, 935, 936, 939, 940, 941, 942, 943, 945, 947, 948, 950, 951, 952, 954, 961, 962, 963, 965, 966, 969, 970, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030], "00": [52, 68, 111, 123, 186, 187, 203, 229, 242, 263, 267, 270, 277, 307, 325, 328, 329, 351, 369, 372, 381, 407, 414, 415, 605, 606, 713, 715, 788, 800, 814, 828, 913, 997, 1001, 1011, 1013, 1015, 1022], "000": [43, 44, 59, 62, 64, 77, 106, 171, 188, 191, 204, 242, 263, 267, 269, 271, 314, 321, 350, 351, 358, 370, 381, 414, 415, 489, 561, 562, 644, 677, 1015, 1022, 1043], "0000": [43, 323], "000000": [79, 186, 201, 229, 269, 313, 737], "00000000": 173, "000000e": 229, "000024": 362, "000045": 186, "00005": 54, "0000ff": [67, 297, 304], "0001": [49, 159, 168, 219, 267, 377, 419, 442, 446, 458, 470, 471, 477, 533, 538, 540, 547, 549, 550, 559, 560, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 668, 669, 672, 674, 676, 678, 680, 687, 689, 693, 861, 862, 904, 905, 990], "000198": 186, "000203": 46, "000211": 46, "000233": 46, "000274": 46, "000276": 46, "0003": 137, "000316": 46, "000345": 46, "0004": [52, 137, 314, 604], "000431": 46, "00055": 350, "000635": 350, "000643": 46, "00066": 350, "000663": 350, "000682": 350, "0008": 383, "00085": 350, "000872": 46, "000977": 269, "00099547": 173, "000e": 415, "001": [46, 53, 68, 79, 95, 144, 168, 170, 186, 197, 220, 236, 238, 248, 254, 267, 269, 271, 331, 351, 372, 381, 411, 536, 537, 539, 546, 627, 644, 645, 646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 684, 689, 690, 693, 694, 797, 798, 861, 862, 899, 900, 906, 907, 908, 909, 910, 990, 1022], "0012": [43, 694], "0013": 43, "0014": 43, "0015": 43, "00154": 350, "001540": 52, "00166409": 661, "00171412": [758, 759, 999], "001727": 263, "00177": 350, "001882": [199, 201], "002": [43, 51, 168, 170, 372], "00249": 350, "002592": [199, 201], "00274": 211, "0028": 43, "002861": [199, 201], "003": [43, 325, 1022], "0032": 43, "0034189458230957995": 45, "003533": 201, "003586": 536, "00360392": 536, "0036211": 536, "00362644": 536, "00364": 322, "00393284e": 195, "003935": [199, 201], "003e": 415, "004": [43, 229, 351, 1022], "0044": 911, "004577621581492997": 316, "00462428": 751, "004751": 267, "0049896314219659565": 316, "005": [43, 269, 273, 294, 309, 351, 381], "005027": 272, "005383": [199, 201], "005422": 269, "005670": [199, 201], "005840": 272, "005861": 272, "006": [43, 45, 141, 277, 381], "006360": 272, "007": [254, 277, 289, 351], "0072b2": 254, "0075": [472, 541], "00755": 541, "007581": 274, "00768662e": 195, "007822": 283, "007833": 274, "008": [168, 372, 381], "008142": [199, 201], "0083899664": 764, "008449": [199, 201], "00860051": 658, "008915": 272, "009": [43, 351, 381], "009077": 186, "00911944e": 195, "0092": 137, "009362": [199, 201], "009747": 283, "009778": 272, "009788": 283, "0098": 137, "00ff00": 297, "01": [45, 47, 49, 52, 53, 75, 79, 84, 95, 120, 122, 123, 137, 145, 147, 149, 151, 152, 168, 175, 179, 186, 187, 195, 197, 203, 218, 223, 224, 229, 231, 232, 238, 242, 243, 244, 248, 249, 256, 260, 262, 263, 268, 269, 270, 274, 276, 277, 278, 294, 305, 307, 309, 319, 325, 341, 351, 356, 370, 372, 380, 407, 416, 448, 470, 515, 521, 532, 539, 543, 545, 595, 596, 598, 605, 642, 646, 654, 658, 678, 696, 715, 800, 814, 898, 969, 997, 1001, 1005, 1011, 1013, 1015, 1022], "010": [351, 381, 829, 1009], "0106": 649, "010877306503748912": 277, "011": [43, 277, 289, 351, 381], "011595": [199, 201], "0116": 604, "011e": 415, "012": [52, 91, 189, 191], "012191": [199, 201], "012521": 201, "012831": 201, "0129126": 369, "013": [43, 52, 277, 351], "01327": 370, "013520": 186, "014": [43, 165, 277, 381, 1022], "0144": 615, "015": [321, 354, 1009, 1022], "0152": 137, "015347e": 229, "015414e": 229, "015579": 283, "015587e": 229, "015596": [199, 201], "0157": 544, "015716e": 229, "01621459": 407, "016445": 269, "017": [351, 381, 470, 471], "017379": 52, "017646": [199, 201], "018": [52, 197, 227, 269, 471, 1022], "0182": 897, "018727": 186, "0188ff": 313, "018900": 201, "019": [168, 372, 381, 470], "019023": 269, "019069": 201, "01915283": 130, "019163": [199, 201], "0193": [469, 475], "0195": [420, 474], "0196": 137, "0198e1": 118, "019907": [199, 201], "01e": 198, "02": [43, 51, 52, 66, 79, 83, 85, 91, 95, 97, 113, 115, 120, 123, 136, 142, 168, 172, 177, 185, 186, 195, 229, 238, 246, 248, 263, 264, 270, 276, 294, 304, 307, 309, 311, 333, 335, 351, 355, 369, 372, 380, 406, 411, 440, 444, 597, 605, 658, 676, 800, 814, 883, 899, 913, 997, 1022], "020": [43, 52, 1009], "02069427": 86, "021": [75, 351, 1022], "021849": 323, "021872": [199, 201], "022": 1009, "022593": 186, "0226": 649, "022688": [199, 201], "023": [52, 277, 351, 905, 1009], "02306214": 667, "02449161": 130, "02456369": 197, "024991": [199, 201], "025": [67, 213, 248, 266, 690, 694], "025102": 186, "025422": 269, "0255": 137, "0256": 173, "025930": [199, 201], "026": [116, 351, 357], "026328": [199, 201], "026711": 87, "027": [52, 168, 240, 372, 1022], "027400": 362, "028": [267, 351], "02818216": 115, "0288": 350, "02891072": 1002, "029": [170, 351, 1009], "0291": 350, "02d": 201, "03": [51, 52, 85, 100, 111, 120, 149, 168, 175, 186, 195, 229, 242, 254, 260, 263, 270, 329, 372, 415, 748, 800, 997, 1001, 1022], "030": [149, 351], "0302": 350, "030462": 103, "030498": 103, "030585": 283, "030677e": 229, "030867": 186, "031": [168, 372], "031020": 103, "031026": 186, "031255": 186, "031555": 201, "03162278": 51, "031988": [199, 201], "032": [91, 268, 1022], "0321": 835, "032179": 201, "03228": 622, "03228706": 610, "032356": [199, 201], "03237920e": 195, "032405": 186, "03260883": 1002, "033": [86, 198, 1009, 1022], "033764e": 229, "033823": 186, "034": [91, 149, 233, 470, 1022], "034077": 201, "034194": [199, 201], "034278": 272, "034309": [199, 201], "03433306457": 45, "034617": 46, "034821": [199, 201], "03498585": 1002, "035005": 186, "03531816": [826, 827], "035445": 283, "0358": 46, "035914": 283, "036": [381, 471], "036038": [199, 201], "036385": [199, 201], "036445": 269, "036592": 283, "036656": [199, 201], "0367": 175, "0368": 619, "037": 709, "0370": 850, "037600e": 229, "037684": 46, "038": [470, 471, 861], "038076": [199, 201], "03812219": 1002, "038159": 812, "03823144": 173, "038689": 259, "0387": 604, "039": [267, 751, 781, 1001], "039493": [199, 201], "039497": 252, "03f": 267, "04": [47, 52, 66, 75, 77, 87, 115, 122, 129, 168, 175, 186, 195, 210, 229, 246, 254, 260, 263, 269, 270, 302, 326, 345, 351, 372, 414, 416, 470, 471, 646, 647, 652, 660, 661, 662, 681, 788, 800, 814, 997, 1001, 1005, 1015, 1022], "040530e": 229, "041": [52, 233, 245, 1022], "041297": 305, "0416": 406, "042": [211, 381, 1022], "0427": [229, 468, 473], "042898": 305, "043": [351, 381], "043401": [199, 201], "044": [43, 45, 267, 751, 1001], "044223": [199, 201], "044451": [199, 201], "044642": [199, 201], "0448": 229, "045": 723, "04520": 159, "0453": 544, "045311": 305, "045390e": 229, "045599": [199, 201], "045934": 305, "046": 351, "046010e": 229, "046304": 46, "046636": 186, "046641": [199, 201], "047": 381, "0479": 544, "048": 1009, "049": [44, 470, 1022], "049530": 305, "049540": 305, "0499": 544, "04995982": 115, "05": [46, 47, 52, 54, 61, 63, 72, 79, 85, 93, 95, 97, 98, 100, 107, 115, 125, 137, 140, 146, 149, 152, 164, 168, 178, 179, 186, 194, 195, 210, 213, 225, 235, 236, 238, 248, 254, 256, 257, 260, 263, 269, 270, 278, 280, 294, 297, 302, 309, 311, 318, 322, 329, 331, 344, 372, 416, 449, 455, 477, 525, 530, 531, 546, 592, 595, 596, 598, 613, 614, 615, 619, 620, 622, 623, 625, 632, 633, 649, 690, 694, 756, 800, 853, 904, 905, 997, 1005, 1011, 1022], "050": [52, 1009], "05063247886572012": 277, "050680": [199, 201], "051": 471, "0512": 544, "051474": [199, 201], "0517578125e": 46, "052": 537, "05216586": 115, "052506": 323, "0527": 350, "053": [43, 168, 372, 381], "05306648": 128, "05317": 175, "054045": 272, "054699": 186, "0547": 908, "055": [168, 372, 1001], "05518": 623, "05532": 620, "05534985": 306, "0556": 908, "056": [51, 52, 755, 1009, 1022], "0561": 908, "0566": 623, "05663": 620, "0568": 747, "057": [381, 829], "057122": 201, "05752333": 130, "057711": 201, "058": [168, 267, 372], "05840206": 130, "0595": 472, "05968": 159, "05994843": 51, "06": [52, 100, 186, 203, 210, 211, 248, 263, 269, 270, 307, 311, 345, 381, 406, 481, 482, 483, 644, 645, 689, 693, 797, 798, 800, 814, 913, 997, 1011, 1013, 1022], "060": [43, 52, 92, 751, 1022], "060066": 46, "0602": 46, "061": [54, 267], "0614": 623, "06165": 620, "061696": [199, 201], "0622": [469, 475], "0626": 835, "063": [267, 269, 436], "0631": 52, "064": [381, 1009], "065": [267, 381], "06506307": 306, "0652": 622, "06525643": 610, "066": [207, 267, 648, 1022], "06686804": 226, "06694199": 130, "06695631e": 111, "067": [90, 179, 344, 1022], "067109": 201, "067528": 201, "068": [43, 52, 233, 269, 340, 1022], "068332": [199, 201], "06880943": 115, "06896552": 448, "069": 267, "069196": 267, "0692": 350, "0693": 619, "07": [52, 115, 129, 186, 208, 229, 263, 278, 358, 370, 407, 561, 562, 692, 694, 1001, 1015, 1022], "0707": 623, "07073": 620, "071": [168, 223, 326, 372, 436, 1022], "071964": 186, "072": [436, 648], "073": [160, 267, 470, 471, 1022], "074": [154, 267, 1022], "074412": [199, 201], "075": 123, "07582983e": 195, "075887": 201, "076": [43, 892], "077": 289, "077846": 269, "0779": 46, "078": [43, 54, 244], "07846529": 306, "07880": 159, "079": [45, 67, 168, 224, 372, 1022], "079297": 269, "07963978e": 195, "07993421": 226, "08": [43, 79, 83, 123, 179, 186, 187, 197, 307, 372, 477, 531, 543, 545, 563, 641, 658, 800, 861, 862, 883, 1007, 1022], "080": [54, 351], "08022103": [826, 827], "080295": 201, "081": [296, 1009, 1022], "0813": [468, 473], "082": [43, 54, 198, 357, 1022], "0825": 314, "083": [267, 357], "08377444": 751, "084": 61, "085299": [199, 201], "08533159": 214, "085711": 87, "08604995": 115, "086944": 252, "08699432": 215, "087": [105, 1022], "0872422": 660, "088": [352, 669, 1009], "089": 351, "089063": [199, 201], "08d": 55, "08t16": 369, "09": [122, 129, 186, 242, 246, 307, 407, 529, 607, 735, 842, 1001, 1011, 1015, 1022], "09000": 211, "090528": 186, "090808": 186, "091": [335, 1022], "091053": 186, "091621": 87, "092204": [199, 201], "093": [76, 470, 1022], "094": 471, "09443967": 306, "095": [214, 1022], "09541846": 536, "096": [199, 221, 1022], "09684337": 226, "096950": 305, "097": [43, 168, 372], "098": 351, "098332": 62, "0986": [415, 868], "09861229": [612, 1011], "098758": 62, "098776": 269, "098932": 62, "099": 43, "099820": 62, "0d": 1033, "0e": [280, 549, 550], "0e4": 218, "0f": [57, 91], "0min": 87, "0rc1": 379, "0rcn": 379, "0x": 933, "0x7f3fd4fd3700": 259, "0x7f3fd512d840": 281, "0x7f3fd512da40": 281, "0x7f3fd5ae9a90": 211, "0x7f3fd5dcc520": 281, "0x7f3fd6284550": 267, "0x7f3ff825e5e0": 139, "0x7f3ff82dac70": 281, "0x7f3ff9aed9d0": 139, "0x7f3ff9c6cb20": 154, "0x7f3ff9c6cfd0": 154, "0x7f3ff9e280a0": 328, "0x7f3ffa0522e0": 249, "0x7f3ffa598760": 103, "0x7f3ffa6ef8e0": 103, "0x7f400a6884c0": 103, "0x7f400a6be700": 104, "0x7f402177ad40": 276, "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 388, 389, 390, 393, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 942, 943, 945, 946, 947, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1028, 1030, 1034], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 118, 122, 123, 124, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 155, 157, 161, 165, 168, 171, 172, 174, 176, 177, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 197, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 226, 227, 228, 229, 232, 233, 238, 241, 242, 243, 244, 245, 247, 248, 249, 251, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 280, 282, 283, 284, 286, 288, 294, 304, 305, 306, 307, 309, 310, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 332, 337, 338, 339, 341, 342, 344, 345, 346, 348, 350, 351, 352, 358, 362, 369, 370, 371, 372, 373, 375, 380, 381, 387, 388, 389, 393, 398, 399, 400, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 437, 442, 446, 448, 450, 451, 452, 458, 459, 461, 474, 487, 492, 493, 496, 500, 501, 502, 504, 510, 511, 512, 513, 516, 520, 521, 524, 526, 528, 531, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 548, 552, 555, 556, 557, 558, 561, 562, 564, 565, 566, 567, 568, 570, 582, 583, 587, 593, 594, 599, 600, 605, 607, 611, 617, 619, 627, 630, 632, 634, 635, 636, 637, 640, 642, 643, 644, 646, 647, 649, 652, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 672, 673, 675, 676, 677, 678, 681, 685, 686, 691, 692, 695, 696, 699, 705, 715, 726, 742, 756, 769, 797, 798, 800, 801, 802, 803, 804, 811, 814, 815, 816, 817, 818, 820, 821, 823, 828, 830, 831, 832, 833, 839, 840, 841, 843, 844, 845, 851, 860, 861, 862, 864, 870, 874, 877, 878, 881, 893, 901, 907, 910, 912, 913, 917, 922, 934, 945, 948, 952, 964, 969, 970, 976, 977, 986, 990, 991, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1015, 1016, 1022, 1029, 1030, 1033, 1034, 1035, 1040, 1042, 1043, 1044, 1046, 1047], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 77, 83, 86, 90, 94, 99, 103, 104, 107, 110, 111, 120, 122, 123, 129, 135, 140, 149, 150, 153, 156, 171, 175, 178, 179, 186, 187, 189, 191, 193, 194, 196, 197, 198, 202, 203, 206, 210, 211, 212, 213, 215, 220, 221, 222, 224, 226, 227, 229, 233, 234, 236, 241, 242, 243, 244, 245, 249, 254, 256, 260, 263, 264, 265, 267, 269, 272, 274, 279, 280, 284, 294, 295, 296, 307, 310, 311, 313, 315, 316, 321, 325, 326, 332, 333, 337, 338, 340, 341, 342, 345, 346, 348, 350, 351, 354, 356, 357, 362, 364, 370, 372, 375, 377, 380, 381, 398, 404, 407, 408, 411, 412, 413, 414, 415, 436, 440, 444, 448, 470, 471, 477, 489, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 528, 530, 534, 536, 544, 545, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 605, 607, 610, 631, 632, 633, 639, 640, 641, 642, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 665, 667, 669, 671, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 746, 797, 798, 802, 822, 828, 829, 834, 839, 840, 841, 843, 844, 845, 849, 861, 862, 880, 882, 885, 894, 911, 990, 991, 994, 998, 1001, 1002, 1008, 1011, 1013, 1040, 1041, 1042, 1045, 1046], "1000": [43, 46, 47, 54, 63, 67, 72, 83, 104, 107, 115, 129, 137, 139, 141, 144, 145, 146, 151, 156, 160, 163, 176, 191, 198, 214, 233, 241, 242, 244, 254, 258, 263, 267, 269, 275, 278, 280, 294, 296, 310, 313, 319, 320, 322, 324, 325, 340, 341, 347, 350, 351, 380, 381, 388, 405, 415, 436, 472, 478, 479, 531, 532, 537, 539, 541, 542, 543, 545, 546, 548, 553, 563, 564, 632, 646, 647, 651, 652, 653, 655, 660, 661, 662, 663, 666, 667, 668, 672, 676, 677, 678, 687, 692, 698, 701, 764, 881, 893, 899, 904, 905, 990, 994, 1016, 1039, 1041, 1050], "10000": [43, 50, 52, 66, 78, 96, 104, 105, 147, 159, 198, 205, 211, 219, 227, 242, 244, 320, 336, 338, 358, 364, 414, 415, 561, 562, 644, 679, 881, 910, 1013], "100000": [174, 244, 254, 375, 613, 614, 615, 619, 620, 622, 623, 625, 893, 994], "1000000": [55, 536], "10005": 1040, "1000x": 1038, "1001": [222, 252], "10027": 1045, "10045": 1040, "1005": 1016, "10058": 1041, "10059": 1040, "10065": 248, "1007": 705, "10070308464041304": 211, "10071": 1040, "10093": 1040, "10095": 1040, "10096": 1045, "100_000": [62, 64, 186], "100k": [242, 395], "100ksampl": 395, "100x": [1032, 1035, 1049], "101": [64, 168, 286, 372, 850, 1033], "10101": 1040, "10112": 1040, "1013": 1009, "10142": 1040, "10153": 1040, "10168": 1047, "10181": 1040, "10192": 1040, "10195": 1040, "101alexmartin": [1049, 1050], "102": [198, 381, 1034], "10210": 1040, "10229": 1040, "1024": [86, 129, 448, 467, 538, 902, 1045], "10280": 1040, "10297": 1040, "103": [149, 166, 196, 288, 289, 370, 414, 497, 555, 556, 1022, 1032], "10306": 1040, "10325": 1040, "10336": 1040, "10346": 1040, "10377": 1040, "1038": 407, "10397": 1040, "104": [43, 61], "10403": 229, "10412": 1040, "10428": 1040, "10437": 1040, "10440": 1041, "10441": 1040, "1045": 103, "10452": 1040, "10458": 1040, "1046": [103, 259], "10463": 1021, "10468": 1047, "10469096": 173, "1047": 103, "10471": 1040, "10474": 1040, "10478008": 407, "10482": 1042, "1048576": [415, 582, 589], "10493": 1044, "105": [309, 313, 1022], "10500": 1040, "10521": 1040, "10526": 407, "10536": 1040, "10580": 1041, "10581": 1040, "10584743": 173, "10587": 1040, "10591": 1044, "10593": 1040, "106": [168, 252, 372, 880, 995, 1033], "10606655": 226, "10610": 1040, "10655": 1040, "10663": 1040, "10677": 1040, "10687": 1040, "107": [149, 323, 407, 899, 1002, 1034], "10708": 1044, "10711": 1044, "10723": [1039, 1040], "10727": 1041, "1073": [370, 487], "10733": 1021, "10740": 1040, "1076": 332, "10774": 1040, "10795": 1040, "108": [0, 47, 205, 1022, 1033], "1080": [369, 407], "10805": 1046, "10811": 1040, "10815": 1042, "10827": 1040, "10829": 1040, "10834": 229, "10836": 1040, "1084": 259, "10845": 1040, "10869": 1040, "1088": 252, "10881": 1040, "108843": 272, "10887": 1040, "108880": 62, "10898": 1040, "10899": 1040, "109": [61, 86, 202, 1002, 1022, 1034], "10908": 1040, "10913": 1040, "10914094": 226, "10928": 1040, "10933": 1040, "10982": 1040, "10992": 1040, "10998": 1040, "10999": 1040, "10_000": [46, 62, 107, 139, 146, 185, 191, 242, 272, 282, 289, 326, 559, 560, 564, 565, 881], "10_fold": [370, 493], "10e": [193, 197], "10k": [319, 395, 446], "10ksampl": 395, "10x": 1032, "10x10": 216, "10\u2079": 1040, "11": [43, 54, 57, 106, 112, 122, 168, 173, 186, 187, 197, 211, 212, 213, 216, 248, 263, 266, 274, 275, 281, 292, 293, 295, 313, 320, 323, 324, 338, 342, 346, 352, 369, 372, 373, 381, 388, 407, 410, 411, 414, 449, 456, 481, 482, 483, 484, 496, 501, 517, 518, 612, 650, 656, 670, 715, 721, 723, 724, 778, 779, 780, 801, 804, 818, 821, 829, 856, 913, 949, 964, 993, 997, 999, 1011, 1015, 1016, 1022, 1030, 1034, 1038, 1040, 1041, 1043, 1046, 1047], "110": [126, 193, 218, 241, 273, 315, 325, 436, 995, 996, 1022], "1100": 83, "11000": 1041, "11005": 1040, "11006": 1040, "11010": 1040, "11011": 1040, "11021": 149, "11042": 1040, "11047": [1021, 1042], "11064": 1044, "11082": 1040, "110923": 201, "11099": 764, "111": [43, 46, 47, 100, 126, 220, 226, 235, 269, 289, 856, 1022, 1035], "1111": [650, 656], "1111111111111111": 277, "11124": 1040, "1112658": [898, 1013], "11135": 1040, "11136": 1040, "1114": 259, "11144": [1040, 1041], "11144673": 226, "11160": 1040, "11166": 1040, "1117": 619, "11176": 1040, "11179": 1041, "1118": 103, "112": [87, 168, 187, 370, 372, 1034], "11206": 1040, "11211": 1040, "112141": 381, "11232": 1042, "11235": 1040, "112589990684262": 746, "11272": 1040, "11293": 1040, "11295": 1040, "11296": 1043, "113": [286, 381, 1035], "11306": 1040, "11308": 1040, "11310": 1040, "11314": 370, "11315": 1040, "11327": 1040, "113516": 272, "11353": 1040, "11354": 1041, "11364": 1041, "11364637": 51, "113781": 323, "11378556": 306, "114": [323, 710, 1032], "1140": 370, "11413": 43, "11420": 1040, "1145": [191, 407, 676], "11452112": 226, "11458": 1041, "11464": 1040, "11466": 1040, "11467": 1040, "1148": 259, "115": [187, 1009], "11505": 1040, "11514": 1043, "11520": 1040, "11526": 1041, "11528972": 226, "11542": 1040, "11553": 1040, "11556": 1040, "11557": 1040, "11558": 1040, "11576": 1040, "11585": 1040, "11596": 1040, "116": [244, 250, 1022, 1032], "1162": 407, "11635": 1042, "11646": 1041, "11650": 1041, "11679": 1040, "11680": 47, "11682": 1044, "11682692": 226, "11693539": 115, "11699": 1041, "117": [258, 1022, 1033], "11705": 1041, "117154": 186, "11724": 1040, "11727": 1041, "11741": 1040, "11754": 1041, "11756": [1040, 1041], "117608": 62, "11774": 1040, "1179": 259, "118": 590, "11805": 1021, "11841": [898, 1013], "1185": 381, "11860": 1047, "1189": 414, "119": [83, 995, 1022, 1035], "11901": 1040, "11905": 1040, "11912": 1040, "11915045": 358, "11924": 1040, "11931": 211, "11932": 211, "11933": 211, "11935": 211, "11950": 1043, "11951": 1040, "11958": 175, "11973": 1041, "11977": 1021, "12": [0, 43, 45, 52, 58, 70, 75, 77, 78, 86, 88, 89, 90, 105, 106, 115, 142, 143, 144, 147, 149, 168, 173, 174, 175, 182, 186, 187, 189, 194, 197, 198, 204, 211, 219, 229, 231, 234, 235, 236, 238, 239, 241, 249, 252, 256, 257, 263, 268, 269, 271, 272, 275, 281, 282, 283, 292, 307, 313, 314, 315, 323, 326, 346, 350, 352, 371, 372, 373, 380, 388, 390, 393, 399, 400, 401, 407, 411, 415, 442, 446, 448, 456, 481, 482, 483, 484, 496, 532, 534, 541, 570, 646, 647, 652, 660, 661, 662, 664, 669, 671, 681, 685, 686, 689, 692, 693, 725, 730, 797, 798, 801, 818, 821, 835, 856, 872, 981, 990, 991, 993, 997, 999, 1001, 1002, 1011, 1015, 1016, 1030, 1033, 1035, 1039, 1040, 1042, 1043, 1048, 1049], "120": [62, 150, 232, 325, 416, 590, 1022, 1032], "1200": [83, 145, 309, 414], "12000": 520, "12068": 1042, "12069": 1045, "121": [100, 136, 182, 243, 618, 669, 1011], "12105": 1040, "12116": 1041, "1212": 498, "12122": 1040, "121351": 201, "12143": 1041, "12145": 1042, "12147": 1021, "12159": 1040, "12165": 1040, "12165031": 1002, "1217": 211, "12171": 1040, "12174": 1041, "12177": 1041, "12190903": 115, "12196": 211, "12197": 1041, "122": [0, 136, 175, 182, 187, 243, 381, 1002], "1220": 619, "12211": 1040, "12222": 1041, "12232": 1041, "12234": 1040, "12246": 1040, "12251": 1041, "12258": 1042, "12274212": 1002, "12279": 1041, "12285": 1047, "1229": 517, "123": [138, 156, 358, 414, 516, 517, 518, 555, 556, 837, 1002, 1009], "12300": 1041, "12303": 1042, "12304": 1040, "12317": [175, 1040], "1232": 414, "12326": 43, "12327": 43, "12328": [43, 1041], "12329": 43, "12330": [43, 1040], "12334": 1041, "12338": 1040, "12339": 1040, "1234": [194, 257, 272, 375], "12344": 1041, "12345": 1040, "12350": 1040, "1236": 315, "12360": 1040, "12365": 1040, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 272, "12383": 43, "12388": 1040, "12393": 1040, "124": [46, 93, 414, 1022, 1034], "124225": 201, "12436": 1041, "12441": 1040, "12451": 1040, "12462": 1040, "12467": 1040, "12471": 1040, "12481": 1040, "125": [43, 86, 111, 123, 321, 534, 990, 1001, 1011], "12513": 1041, "12514": 1040, "125140": 272, "12517": 1040, "12518": 1040, "12522": 1040, "125247168": 52, "12543": 1041, "12557": 1042, "12568": 1041, "12569": 1042, "12582": 1041, "12583": 1041, "1259": 57, "12599": 1041, "126": 414, "12612": 1040, "12613": 1041, "12625": 1040, "1263": 381, "12638": 1044, "12650": 1042, "126502": 201, "12669": 1041, "1268187": 226, "12685": 1040, "12699": 1040, "127": [103, 118, 145, 1022, 1032], "12701": 1040, "12704": 1040, "127128": 146, "12715": 1041, "12732": 1041, "1276": 47, "12789": 1042, "128": [53, 54, 211, 362, 536], "12800": 1021, "12807": 1041, "12821": 1041, "12834": 1041, "12852": [1021, 1042], "12855": 1041, "12860": [229, 1041], "12861": 1041, "12866": 1021, "1288": [45, 370], "12881": 1040, "12883823": 411, "12887": 1042, "129": [213, 1032], "12908": 1041, "12914884": 1002, "12916": 1041, "12927": 1042, "12946": 1040, "12949": 1040, "12955": 1041, "12972": 1041, "12983": 1041, "12988": 1041, "1299": [870, 1011], "12th": 1013, "13": [43, 45, 49, 50, 52, 79, 88, 106, 125, 129, 142, 145, 147, 181, 186, 191, 198, 220, 236, 262, 263, 270, 273, 275, 307, 309, 313, 326, 339, 370, 372, 375, 381, 388, 411, 419, 496, 510, 513, 532, 533, 551, 552, 582, 606, 635, 639, 734, 759, 818, 848, 863, 870, 896, 897, 997, 1001, 1002, 1007, 1008, 1011, 1016, 1022, 1030, 1032, 1034, 1035, 1038, 1039, 1040, 1041, 1044], "130": [84, 381, 1022], "1300": 83, "13003": 1044, "13005": 1040, "13007": 1041, "130107": [226, 242, 488], "13013": 1042, "13042": 1047, "13046": 1040, "13077794": 358, "13086": 1041, "131": [43, 53, 89, 351, 381, 1001, 1033], "13124": [1040, 1041], "13134": 1040, "13142": 1041, "13146": [1021, 1042], "13151": 1041, "13157": 1041, "13164": 1041, "13165": 1040, "13174": 1041, "1319": [870, 1011], "131900": 102, "13193": 1041, "132": [43, 47, 53, 89, 414], "13204": 1044, "13213": 1042, "1322": 622, "13221": 1040, "13222543": 610, "13227": 1021, "1323": 211, "13231": 1042, "13233": [370, 493, 494], "13240": 1041, "13241": 1041, "13250": 1041, "13251": 1041, "13253": 1041, "13260": 1041, "13266": 1041, "13276": 1040, "13279": 1041, "13283": 1041, "13286": 991, "13290": 1042, "133": [53, 89], "13312": 1040, "13317": 1041, "13328": 1041, "13333": 1041, "13336": 1041, "13350": 1041, "13363": 1041, "13366": 1041, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 264, "13382": 1041, "13389": 1041, "13392": 1042, "13393": 1042, "13397": 1041, "134": [86, 145, 173, 263, 269, 1022, 1035], "13422": 1041, "13427": 1041, "13439": 1041, "13447": 1041, "13459": 1041, "13467": 1042, "13485": 1041, "13486": 1041, "13496": 1041, "135": [168, 323, 372], "13511": 1043, "13524": 1041, "1353": 350, "13531": 1041, "13545": 1041, "13549": 1041, "13554": 1041, "13562": 1041, "13575": 1042, "136": [338, 1022], "13601": 1041, "13607": 1041, "13609": 1042, "13618": 1042, "13620": 1041, "13628": 1041, "13636": [997, 1041], "13641": 1041, "13649": 1049, "13651": 1041, "137": [248, 381, 1033], "13704": 1042, "13707": 1042, "1371": 534, "13726": 1042, "1373": 998, "1374": 534, "13741": 1041, "13769": 1042, "13772": [1040, 1041], "13773": 1042, "13779": 1041, "1378": 229, "13780": 1041, "1379": 229, "138": [137, 381, 414, 1001, 1022], "13806": 1042, "1382": 524, "13822072286080167": 277, "13835": 1041, "1385": 473, "13864": 1041, "13875": 1042, "13877": 1041, "13894": 1041, "13896": 1042, "139": [229, 289, 381, 414, 451, 461, 691, 695, 1002], "13900": 1044, "13902": [1021, 1042], "13903": [1040, 1041], "13910": 1041, "13911": [1021, 1042], "13925": 1042, "13933": 1042, "13938": 1042, "13947": 1041, "1396": 998, "13960": 1042, "1397": 381, "13974": 1041, "13983521": 306, "13987": 1042, "13988486": 226, "13995": 1042, "13th": 64, "14": [43, 50, 52, 73, 82, 93, 95, 96, 99, 106, 112, 123, 125, 163, 187, 197, 201, 203, 229, 233, 238, 243, 248, 263, 268, 274, 275, 284, 288, 289, 312, 313, 323, 345, 348, 363, 370, 372, 373, 388, 393, 399, 400, 407, 411, 496, 498, 510, 553, 554, 635, 643, 692, 814, 818, 870, 994, 997, 1001, 1011, 1016, 1030, 1032, 1033, 1035, 1036, 1040, 1045], "140": [86, 252, 325, 414, 510, 516, 517, 518, 555, 556, 1002, 1022], "1400": [83, 473], "14012": 1042, "14024": 1041, "14028": 1042, "14035": 1042, "14048": 1043, "14053": 1041, "14067": 1041, "14075": 1043, "14087": 1041, "14092": 1041, "141": [149, 286, 501, 534, 904, 1002, 1022], "14108": 1042, "14114": 1042, "14156": 229, "14170": 1042, "14180": [1021, 1043], "1419": 43, "14194": 1042, "14197": 1041, "142": [43, 81, 241, 414, 1022], "1422": 43, "14228": 363, "14237": [1040, 1041], "14259": 1042, "14264": 1043, "142857": 229, "14286": 1042, "14287": 1042, "14294": 1042, "14296": 1042, "143": [168, 372, 470, 471, 1013, 1032, 1033], "14300": 1043, "14302": 248, "14305": 1042, "14309": 1041, "14336": 1042, "14338": 991, "14356": 1042, "14357": 1042, "1436": 147, "14378": 1042, "14381": 1042, "14393": 1041, "144": [269, 381, 1032], "1440": 43, "14406": 1042, "1441": 622, "14410151": 610, "14417": 1042, "144204": 146, "1443": 1007, "14430": 1042, "14446": 1044, "14458": 1042, "14464": 1042, "14475": 1042, "144943": 62, "14496": [381, 1041], "145": [52, 407], "14510": 1042, "14516": 1043, "14520": 1042, "14538": 1042, "14544": 1042, "14549": 1042, "1456": 229, "14582": 1021, "14591": 1042, "14593": 1042, "14595": 1042, "145957": 146, "146": [45, 414], "1460": [143, 154], "14602": 1042, "14603365": 226, "14623": 1042, "14625": 47, "14629": 1042, "1464": 239, "14646": 1042, "14647": 1042, "14680": 1042, "14682": 1042, "14696": 1043, "147": 1002, "14702": 1042, "147022": 201, "14704": 1042, "14706": 1042, "1471": 1007, "14710": 1042, "14732": 1042, "14736": 1047, "1474": 381, "14740": 1042, "14764": 1042, "148": 1035, "14800": 1044, "14810": 315, "14848": 1043, "14849": 1042, "14862": 1047, "14864": 1042, "14865": 1042, "14869": 1042, "14872": 1042, "14884": 1042, "14890": 1042, "14894": 1042, "14898": 1042, "149": [1002, 1032], "14900": 1042, "14902": 1042, "14907": 1042, "14908": 1042, "14933": 1042, "14936": 1042, "14971": 1042, "14975": 1046, "14982": 1044, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 57, 66, 67, 70, 75, 79, 86, 87, 94, 95, 99, 105, 106, 111, 113, 118, 129, 138, 140, 142, 143, 146, 149, 163, 165, 167, 170, 174, 181, 185, 186, 187, 201, 213, 225, 229, 233, 236, 238, 256, 257, 263, 264, 272, 274, 277, 280, 281, 284, 293, 297, 304, 305, 309, 311, 313, 324, 329, 337, 339, 342, 345, 348, 355, 369, 370, 373, 375, 388, 393, 399, 400, 411, 414, 415, 439, 453, 489, 496, 497, 498, 531, 537, 545, 546, 555, 556, 598, 604, 609, 644, 652, 661, 663, 668, 676, 678, 692, 818, 833, 856, 885, 990, 996, 997, 998, 1001, 1004, 1005, 1011, 1016, 1028, 1030, 1034, 1044, 1046, 1047], "150": [43, 45, 118, 126, 138, 146, 159, 208, 232, 236, 238, 282, 325, 330, 343, 346, 372, 411, 416, 504, 601, 602, 825, 826, 827, 1001, 1022], "1500": [74, 83, 90, 95, 100, 118, 231, 235, 254], "15000": [672, 687, 861, 862], "15005": [1043, 1045], "15007": 1044, "15010": 1042, "15028": 1042, "15038": 1042, "150407": 381, "15044": 1042, "15049": 1042, "150527": 305, "15053": 1042, "15057": 1042, "1506": 383, "15080": 1042, "15082": 1042, "15083": 1042, "15084": 1042, "15086": 1042, "15094": 1042, "15096": 1042, "15099": 1042, "151": [323, 381, 414, 501, 1013], "15100": 1042, "1511007": 252, "151101": 252, "15119": 1042, "15120": 1042, "15126": 1044, "15138": 1042, "15160": 1042, "15179": 1043, "152": [91, 381], "15257": 1042, "1527": 860, "15274": 1042, "15297572": 536, "153": [251, 663, 1022], "15304": 1042, "15319": 1021, "153244303321897735": 407, "1533": 47, "15361": 1044, "15375": 1042, "15380": 1043, "15382": 1042, "15393": 1042, "154": [299, 307, 651, 1002, 1022], "1541": 47, "1542": 381, "15427": 1044, "15429": 1042, "15436": 1043, "154453": 305, "15463": 1042, "15488": 1042, "15490": 1042, "15503": 1043, "15521": 159, "15524": 1042, "1553374": 407, "1553511": 407, "1554": 860, "15550": 1021, "15557": 1042, "15558": 1043, "15582": 1043, "156": [168, 186, 187, 300, 372, 1022], "15611": 991, "1562": 47, "15622": 1043, "15625": 1042, "156252": 201, "15636": 1044, "15652": 1043, "15655": 1043, "15661": 1042, "15669": 1043, "1569": 47, "15699552": 1002, "157": [187, 381], "15707": 1043, "15709": 1043, "15730": 1043, "157334": 305, "15751": 1042, "15760": 1042, "15762": 1043, "15763": 1044, "15773": 1043, "15782": 1043, "15785": 1043, "15797": 1042, "158": [77, 350, 414, 669], "15806": 1043, "15810": 1042, "15834": 1043, "15863": 1042, "15864": 1043, "15868": 1042, "15879": 1042, "15888": 1042, "15898": 1042, "159": [86, 370, 1032], "1590": 307, "15918": 1043, "1592": 498, "15926": 1043, "15930": 1042, "15933": 1042, "15936": 1042, "15937": 1042, "159419": 252, "15946": 1043, "15947": 1042, "15948": 1046, "15950": 1043, "15953": 1043, "15959": 1043, "15963": 1043, "1597": 263, "15980": 1043, "15984": 1046, "15996": 1042, "15e": 120, "16": [43, 44, 52, 57, 64, 78, 83, 84, 87, 99, 106, 111, 120, 123, 163, 187, 205, 210, 211, 212, 229, 231, 232, 236, 243, 247, 263, 271, 272, 273, 293, 307, 309, 313, 318, 343, 346, 351, 356, 370, 372, 373, 381, 388, 393, 399, 400, 411, 412, 415, 441, 456, 458, 470, 471, 477, 478, 497, 498, 502, 516, 534, 535, 570, 589, 595, 596, 607, 608, 639, 650, 651, 654, 655, 656, 657, 682, 683, 813, 818, 830, 879, 905, 913, 976, 977, 978, 990, 997, 1001, 1011, 1016, 1022, 1028, 1030, 1032, 1033, 1037, 1038, 1040, 1041], "160": [246, 990], "1600": 83, "160030": 201, "16006": 1043, "1600x1600": 87, "16018": 1046, "16021": 1043, "16052385": 130, "16061": 1046, "16066": 1044, "16069": 1043, "16075": 1043, "16076": 1042, "16084": 1043, "16090": 1043, "16103": 1043, "16111": 1043, "16112": 1043, "16117": 1043, "161245": 87, "16132": 1043, "16144": 381, "16147": 372, "16149": 1043, "16159": [381, 1043], "1616": 472, "16182": 1043, "16183": 1043, "162": [91, 341, 372, 1022], "16224": 1043, "1623": 57, "1624": 498, "16245": 1043, "16257": 1043, "1626": 1021, "16261": 1043, "16266": 1043, "16280": 1043, "16289": 1044, "163": [82, 168, 286, 372, 1009, 1022], "163224": 201, "16323": 1043, "16326": [43, 1044], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1043, "16335": 1044, "16352": 1044, "16362": 1043, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1044, "16397": [1042, 1043], "164": 414, "164009": 272, "16401": 1043, "16403": 1043, "16431": 1043, "16437": 1043, "16442": 1043, "16443186": 1002, "16449": 1045, "16451": 1043, "16466": 1043, "16484": 1043, "16493": 1044, "165": [262, 1002, 1022], "16500": 1042, "16505": 1042, "16508": 1043, "16530": 1044, "16531": 149, "16539": 1043, "16585": 1043, "166": [43, 307, 381, 1001, 1032], "16605": 1046, "16619": 1044, "16622": 1043, "16625": 1044, "16632": 1043, "16655": 1043, "16663": 1043, "166667315173": 52, "16692": 1043, "16695": 1047, "167": [381, 1032], "16718": 1043, "16726": 1043, "16728": 1043, "16747": 1047, "16748": 1046, "168": 1032, "1680": 372, "16801": 1043, "16837": 1043, "16841": 1043, "16849": 1043, "1689": 351, "169": [91, 307], "16906": 1044, "1691": 997, "169106": 269, "1693": 904, "16935": 1044, "16948": 1046, "16950": 1043, "169504": 229, "16979946": 1002, "1698": 649, "16981": 1043, "16985": 1044, "16993": 1043, "17": [49, 52, 57, 74, 85, 106, 111, 149, 171, 186, 210, 242, 263, 272, 304, 313, 370, 373, 380, 393, 399, 400, 407, 411, 443, 460, 486, 497, 498, 500, 523, 531, 536, 540, 547, 549, 550, 555, 559, 560, 569, 570, 597, 628, 649, 657, 658, 659, 666, 669, 672, 674, 687, 692, 729, 730, 740, 761, 766, 783, 784, 787, 789, 818, 842, 853, 868, 873, 874, 882, 884, 890, 906, 909, 912, 913, 914, 915, 949, 990, 991, 1002, 1004, 1011, 1022, 1028, 1030, 1032, 1033, 1034, 1035, 1038, 1041, 1046], "170": [79, 90, 91, 95, 219, 381, 1022], "1700": 83, "170087": 305, "17021": 1043, "17032": 1043, "17036": 1045, "17038": 1044, "170388": 1002, "1706": 332, "17061": 1043, "17090": 1044, "17095": 1044, "171": [86, 168, 372, 381, 788, 1001], "17107": 1044, "1714": 997, "17148": 1044, "17159": 1044, "17169": 1045, "17187": 1044, "17192": 1044, "17193": 1044, "172": [172, 254, 381, 493, 494, 649, 997, 1022], "17204": 1043, "17205": 1043, "17210": [52, 1043], "17225": 1044, "17226834": 86, "1723": 46, "17233": 1044, "17235": 1043, "17236387": 214, "17266": 1046, "17289014": 173, "1729": 187, "173": [381, 584], "17309": 1043, "17317": 1044, "17357": 1043, "17360": [47, 1043], "17367": 1044, "17370318": 226, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1044], "1738": 1001, "17386": 1044, "17388": 1048, "17396": 1044, "174": [97, 145, 279, 307, 381, 584, 1022], "17406": 1044, "17412": 1044, "17414": 1044, "17427": 1044, "17433": 1043, "17443": 1045, "17448": 1044, "1747": 187, "17474": 229, "17478": 1044, "17491": 1044, "17499": 1044, "175": [54, 381, 1011, 1022], "17526": 1044, "175298": 272, "17546": 1044, "17569": 1044, "17578": 1044, "17598": 1044, "176": [265, 381, 837, 1002, 1009, 1022], "17603": 1044, "17604": 1044, "17606": 1044, "17608": 1044, "17609": 1044, "17610": 1044, "17612": 1044, "17614": 1044, "17616": 1044, "17622": 1045, "17633": 1044, "17644": 1044, "17651": 1044, "17661": 1044, "17662": 1044, "17679": 1044, "17694": 1043, "177": 381, "17702": 1044, "1771": 351, "17742": 1043, "17743": 1045, "17746": 1045, "17750": 1045, "17759": 1044, "17769": 1045, "17772": 1045, "17777": 1044, "17785": 1045, "178": [46, 372, 381, 510, 848], "178000": 311, "17804": 1044, "17812": 1043, "17819": 1046, "17826": 1044, "17833": 1044, "17848": 1043, "1785": 351, "17856": 1044, "17864": 1044, "17876": 1044, "17878": 1044, "179": [239, 266, 372, 381, 414, 1022, 1032], "17914": 1043, "17928620": 369, "17932": 1044, "17935": 1044, "17937": 1044, "1795795": 325, "17959": 1043, "1797": [91, 267, 307, 328, 372, 419, 444, 502, 532, 533, 534, 535, 599, 600, 688, 689, 690, 691, 693, 1004], "17984": 1044, "17985": 1043, "17985197": 226, "17987": 1044, "17992": 1044, "17995": 1043, "17997": 1044, "17_760": 149, "17t14": 369, "18": [43, 46, 47, 57, 75, 79, 82, 86, 93, 95, 106, 127, 146, 179, 186, 222, 231, 235, 236, 238, 243, 263, 269, 286, 307, 313, 315, 329, 350, 351, 352, 375, 381, 411, 412, 415, 446, 458, 492, 500, 501, 502, 504, 505, 510, 535, 536, 538, 540, 541, 557, 558, 559, 560, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 577, 578, 589, 594, 599, 600, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 646, 649, 658, 659, 671, 714, 718, 731, 734, 735, 741, 743, 760, 770, 797, 798, 821, 837, 860, 861, 862, 868, 874, 882, 883, 894, 904, 905, 912, 913, 914, 915, 916, 947, 948, 990, 999, 1001, 1011, 1022, 1028, 1030, 1032, 1033, 1036, 1037, 1039, 1040, 1042, 1043], "180": [70, 246, 254, 255, 256, 259, 260, 298, 302, 381, 502, 1022], "1800": 83, "18000": [352, 370], "18010": 1045, "18016": 1043, "18020": 1047, "1804243": 369, "18052": 1044, "18094": 1047, "181": [45, 286, 307, 337, 381, 1022], "18108182014": 179, "18114": 1044, "18121": 1044, "18124": 1044, "18149": 1044, "18167": 1044, "18170": 1046, "18176": 1044, "18197458": 358, "182": [170, 307, 381, 414], "18222": 1044, "18256": 1044, "18266": 1044, "18269": 1044, "18278": 1044, "18280": 1044, "18293": 1044, "18298": 1047, "183": [329, 381, 1002, 1032], "18302": 1044, "18310": 1046, "18326": 1044, "18328": 1045, "18334": 1044, "18341": 1044, "18343": 1044, "18368": 1045, "18370": 1044, "18393": 1045, "18394": 1044, "184": [43, 211, 307, 381, 799], "18405": 1044, "18406": 1044, "18410": 1044, "18429": 1044, "18433": 1045, "18444": 1045, "18447": 1044, "18459": 1045, "1847": 46, "18482": 1046, "18488": 1048, "185": [86, 168, 179, 372, 381, 861, 862], "1850": [45, 370], "18508": 1044, "18510": 1044, "18525": 1044, "18527": 1044, "18528": 1044, "18543": 1045, "18545": 1044, "18555": 1050, "185654": 272, "185659": 201, "18595": 1044, "186": [211, 307, 381, 788, 1001], "18607": 1044, "18612": 1044, "18622": 1044, "18639": 1044, "18649": 1045, "1865": 47, "18682": 1044, "18689": 1049, "18691": 1044, "187": [256, 269, 381, 584, 1002, 1022, 1034], "1871": 1016, "18723": 1048, "18736": 1045, "1874": 1016, "18746": 1044, "1875": 981, "18768": 1044, "188": [168, 175, 255, 259, 372, 381, 584, 1022], "1880": 381, "18805": 1047, "18815268": 252, "188153": 252, "18818427": 667, "18832": 1046, "18842": 1045, "18843": 1050, "18846": [370, 487, 488], "1887": 351, "18898": 1045, "189": [164, 211, 381, 901, 1014, 1022], "18925": 1045, "189267": 272, "18959": 1045, "189631": 201, "18964": 1045, "18975": 1046, "189830": 323, "18987": 1044, "19": [43, 52, 175, 186, 211, 215, 233, 259, 263, 313, 314, 329, 372, 373, 389, 393, 399, 400, 407, 415, 418, 443, 492, 516, 517, 518, 536, 540, 541, 547, 549, 550, 557, 558, 559, 560, 564, 565, 566, 582, 589, 607, 648, 658, 659, 666, 667, 668, 671, 672, 674, 676, 678, 687, 707, 781, 785, 799, 800, 814, 827, 832, 833, 835, 836, 850, 851, 870, 881, 902, 906, 909, 912, 913, 914, 915, 990, 1001, 1011, 1022, 1028, 1030, 1032, 1033, 1034, 1035, 1037, 1040, 1049], "190": [50, 145, 229, 278, 302, 336, 370, 381, 498, 1022], "1900": 83, "19002": 1045, "19004": 1045, "19011": 1045, "19024": 1045, "19035": 1045, "1903908407869": 214, "19041": 1045, "19046": 1045, "19047631514961908949361222113": 52, "1905": [168, 372], "19052": 1045, "19055": 1045, "19069": 1045, "19075": 1047, "19085": 1046, "191": [381, 1002], "19112072e": 195, "19126": 1044, "19145": 352, "19158": 1046, "19159": 1045, "19162": 1045, "19172": 1045, "19174891": 306, "19179": 1044, "19182": 1044, "19198": 1045, "192": [128, 145, 318, 381, 1022, 1032], "19210": 1045, "19211": 1044, "19234": 1044, "19244": 1045, "19263": 1045, "19271": 1044, "19278": 1045, "192913": 272, "192938": 52, "19296": 1045, "19297": 1045, "193": [381, 414, 715, 786, 1014], "19308": 1044, "1931": 111, "19310": 1045, "19317": 175, "19336": 1045, "193548": 229, "19356": 1045, "1936": 372, "19365": 1045, "19390": 1045, "19391": 1045, "193949": 272, "194": 307, "1940": 229, "19401": 1045, "19407": 1044, "19411": 1045, "19415": 1045, "19417": 1044, "194239": 381, "19426": 1045, "19428": 1045, "19438": 1046, "19459": 1045, "19472": 1045, "19473": 1045, "1948": 57, "19483": 1045, "19490": 1046, "19491": 1045, "19499": 1045, "195": [210, 493, 494, 1022], "1950": [372, 1001], "1951": 229, "195133": 381, "19520": 1045, "19522393": 226, "19527": 1045, "19564": 1045, "19568": 1045, "19571": 1045, "19579": 1044, "1958": [175, 412, 414, 532], "19580": 1044, "196": [901, 1014], "1960": [627, 716], "19616": 1045, "19631": 1045, "1964": [690, 694, 880, 892, 998], "19641": 1045, "19643": 1045, "19646": 1044, "19659": 1044, "19662693": [844, 845], "19664": 1048, "19669": 1045, "196795181": 52, "19680": 1046, "196861": 201, "19689": 1046, "19703": 1044, "1972": 372, "19721": 1044, "19727": 1044, "1973": [372, 405], "19732": 1044, "19733": 1045, "19734": 1045, "1974": [407, 415, 710], "19747": 1046, "1975": 1004, "19752": 1045, "19766": 1045, "197666": 272, "1977": 635, "1978": [229, 997], "19784": 1045, "19788": 1045, "1979": [407, 725, 769], "19790": 1045, "19794": 1046, "19799": 1045, "198": [264, 1022, 1032], "1980": 372, "19803308": 115, "1981": [229, 997], "19829832": 226, "1983": [407, 731, 884], "19836": 1045, "1984": [111, 112, 409, 473, 912, 913, 1017], "19847": 1044, "1985": [186, 407, 705, 715, 786], "1986": [991, 1017], "19869": 1045, "1987": [407, 607, 608, 792, 793], "198766": 272, "19879": 1045, "1988": 372, "19883": 1045, "19888": 1044, "1989": [278, 635, 788, 861, 862, 997, 1004], "199": [115, 142, 647, 791, 1016, 1022], "1990": 370, "19906": 1045, "19908": 1045, "1990a": 405, "1991": [516, 517, 518], "19916": 1046, "1992": [168, 370, 372, 411, 414, 567, 568, 645, 997], "19922": 1044, "19924": 1044, "1993": [168, 372, 473, 664, 685, 686, 1017], "19934": 1045, "19939": 1044, "1993apr6": 102, "1994": [168, 370, 372, 644], "19948": 1045, "1995": [168, 269, 372, 405, 414, 553, 554, 834, 901, 1002], "1996": [64, 149, 407, 414, 418, 443, 516, 517, 518, 555, 556, 1011], "1997": [135, 370, 412, 414, 535, 554, 690, 694, 997, 998, 1001], "1998": [149, 269, 370, 372, 412, 414, 555, 556, 834, 839, 870, 1002, 1003, 1005, 1011, 1015], "19982": 1044, "1999": [178, 370, 405, 407, 409, 412, 414, 436, 449, 456, 468, 473, 534, 541, 555, 556, 559, 560, 723, 898, 906, 907, 909, 910, 1007, 1013], "19th": 407, "1_": 1011, "1_000": [44, 64, 70, 104, 125, 149, 170, 175, 177, 187, 204, 242, 266, 346, 406, 537, 539, 701, 799, 822, 823, 831], "1d": [2, 135, 137, 183, 187, 212, 242, 290, 293, 302, 326, 345, 375, 382, 384, 388, 389, 408, 413, 463, 466, 617, 630, 633, 653, 657, 660, 663, 684, 703, 712, 713, 719, 729, 730, 734, 738, 783, 784, 787, 796, 846, 847, 848, 849, 850, 852, 854, 855, 856, 869, 921, 924, 926, 930, 931, 963, 987, 1002, 1022, 1032, 1037, 1038, 1039, 1041, 1045, 1046, 1050], "1e": [44, 45, 46, 49, 55, 63, 80, 120, 168, 170, 173, 175, 176, 177, 178, 179, 181, 186, 194, 205, 211, 212, 218, 225, 229, 234, 238, 244, 249, 254, 257, 260, 267, 277, 280, 306, 316, 321, 324, 332, 337, 339, 346, 350, 381, 419, 442, 446, 451, 458, 461, 470, 471, 477, 481, 482, 483, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 559, 560, 561, 562, 592, 597, 606, 608, 609, 611, 613, 614, 615, 619, 620, 622, 623, 625, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 689, 690, 691, 692, 693, 694, 695, 728, 785, 797, 798, 814, 839, 840, 841, 842, 843, 844, 845, 853, 861, 862, 869, 899, 900, 904, 905, 906, 907, 908, 909, 910, 986, 990, 1001, 1005, 1009, 1011, 1015, 1040, 1045, 1046, 1047], "1e0": [170, 244, 260, 277, 990], "1e1": [170, 176, 211, 244, 339], "1e15": 179, "1e2": [49, 170, 177, 244, 260, 339], "1e3": [45, 46, 49, 170, 176, 181, 244, 280, 324, 990], "1e4": [280, 659, 679, 898, 1013], "1e5": [45, 175, 195, 202, 280, 613, 614, 615, 619, 620, 622, 623, 625, 893, 898, 1013], "1e6": [47, 49, 205, 242, 326, 350, 352, 362, 536, 898, 1001, 1013], "1e7": 381, "1er": 415, "1f": [52, 58, 83, 86, 123, 194, 211, 242, 254, 256, 276, 318, 325, 351, 352], "1gb": 362, "1kastner": 1039, "1m": 966, "1mb": [363, 1037], "1mo": 175, "1nn": 372, "1or": 415, "1px": 307, "1qlettinn8oi": 350, "1st": [0, 43, 93, 126, 178, 212, 314, 882, 883], "1z": 415, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 371, 372, 373, 375, 377, 379, 380, 381, 382, 384, 387, 388, 389, 393, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 483, 484, 493, 496, 500, 501, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 584, 585, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 706, 707, 708, 711, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 763, 764, 767, 768, 769, 771, 773, 774, 775, 776, 778, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 897, 898, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 919, 926, 927, 928, 930, 931, 932, 936, 940, 946, 947, 948, 949, 950, 951, 952, 954, 955, 961, 962, 963, 964, 965, 966, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1022, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 77, 78, 80, 81, 83, 87, 88, 94, 100, 109, 113, 118, 120, 127, 129, 136, 140, 142, 143, 146, 150, 154, 155, 157, 161, 163, 164, 165, 168, 176, 185, 187, 188, 196, 201, 202, 208, 210, 211, 212, 215, 220, 223, 224, 225, 226, 228, 234, 242, 248, 256, 258, 259, 263, 269, 270, 272, 273, 275, 280, 281, 284, 286, 289, 293, 294, 295, 296, 297, 300, 307, 313, 314, 315, 319, 320, 321, 322, 324, 328, 329, 332, 336, 338, 342, 344, 348, 351, 352, 356, 368, 372, 373, 375, 380, 381, 393, 399, 400, 407, 414, 415, 440, 445, 446, 448, 463, 464, 468, 470, 471, 477, 487, 488, 489, 490, 492, 494, 496, 497, 500, 502, 504, 505, 511, 512, 515, 516, 523, 531, 536, 537, 542, 545, 546, 548, 552, 555, 556, 559, 560, 561, 562, 563, 569, 570, 582, 589, 590, 592, 594, 597, 599, 629, 630, 645, 649, 658, 666, 667, 668, 676, 678, 696, 704, 708, 713, 716, 725, 726, 739, 756, 757, 767, 792, 793, 797, 798, 799, 800, 814, 826, 827, 828, 831, 833, 836, 837, 838, 841, 842, 849, 850, 861, 862, 863, 864, 866, 868, 869, 877, 878, 879, 880, 885, 899, 900, 902, 903, 908, 911, 916, 922, 928, 930, 931, 934, 978, 990, 997, 1001, 1004, 1007, 1008, 1011, 1014, 1024, 1025, 1027, 1028, 1030, 1032, 1038, 1041, 1044, 1046, 1047], "200": [69, 70, 79, 83, 87, 93, 107, 123, 136, 146, 153, 174, 198, 207, 212, 215, 216, 217, 223, 228, 232, 250, 254, 270, 276, 278, 279, 309, 312, 330, 338, 339, 356, 358, 370, 387, 412, 414, 419, 439, 453, 467, 470, 471, 522, 533, 534, 535, 538, 539, 540, 543, 547, 584, 649, 651, 671, 679, 692, 746, 814, 861, 862, 902, 906, 907, 908, 909, 910, 922, 1001, 1016], "2000": [54, 63, 75, 83, 107, 121, 127, 191, 257, 260, 269, 286, 304, 322, 351, 370, 372, 407, 408, 414, 419, 451, 461, 533, 534, 559, 689, 691, 693, 743, 788, 797, 850, 880, 892, 998, 1001, 1007, 1013], "20000": [57, 122], "200000": [229, 869], "20002": 1045, "2001": [2, 64, 175, 188, 263, 268, 404, 407, 414, 436, 450, 451, 452, 461, 511, 559, 560, 564, 565, 628, 634, 639, 645, 691, 696, 735, 788, 885, 897, 935, 991, 993, 997, 1001, 1007, 1009, 1011, 1013, 1016], "2002": [96, 405, 407, 414, 436, 447, 593, 594, 726, 756, 851, 899, 993, 1001], "20023": 1045, "2003": [2, 51, 175, 404, 407, 412, 415, 450, 451, 461, 513, 515, 689, 693, 839, 841, 997, 998, 1003, 1013, 1040], "20030": 1045, "20031": 1046, "2004": [44, 168, 269, 286, 370, 372, 407, 409, 412, 472, 535, 607, 608, 689, 693, 705, 743, 783, 900, 995, 997, 998, 1003, 1016], "2005": [62, 64, 112, 372, 405, 436, 438, 853, 997, 1004, 1014], "20056": 1045, "2006": [2, 50, 302, 370, 414, 417, 461, 498, 557, 558, 565, 566, 610, 611, 614, 619, 622, 649, 666, 667, 741, 788, 789, 797, 839, 897, 914, 915, 997, 1001, 1003, 1006, 1013, 1014], "2007": [0, 73, 199, 370, 407, 416, 439, 451, 453, 459, 461, 566, 656, 691, 717, 734, 737, 758, 759, 795, 993, 997, 999, 1001], "20072": 1045, "2008": [51, 409, 411, 412, 477, 534, 563, 590, 645, 664, 685, 686, 692, 716, 726, 756, 834, 839, 843, 860, 995, 998, 999, 1001, 1002, 1003, 1006, 1007, 1016], "20087": 1045, "2009": [2, 134, 137, 138, 148, 197, 407, 411, 412, 414, 415, 519, 520, 528, 531, 537, 538, 540, 541, 544, 547, 553, 559, 560, 635, 671, 679, 696, 835, 912, 913, 947, 948, 997, 1001, 1002, 1008, 1017], "200_000": [869, 1048], "200j": 161, "200m": 370, "200x": 1032, "201": [145, 168, 284, 372, 584, 1022], "2010": [0, 110, 187, 274, 275, 404, 407, 409, 411, 412, 420, 474, 536, 704, 708, 719, 720, 740, 829, 861, 862, 993, 997, 1001, 1005, 1015, 1019, 1032], "2011": [0, 187, 381, 412, 415, 535, 538, 540, 541, 547, 590, 627, 638, 658, 730, 991, 1005, 1015, 1019, 1032], "20117": 1045, "2012": [0, 112, 405, 414, 555, 556, 563, 639, 743, 990, 994, 1001, 1019, 1032], "2013": [0, 191, 372, 407, 411, 412, 536, 726, 756, 993, 1001, 1019, 1033, 1034], "2014": [0, 369, 401, 412, 414, 417, 530, 607, 608, 622, 623, 658, 692, 861, 862, 947, 948, 998, 1005, 1025, 1035], "20145": 1046, "2015": [0, 187, 369, 708, 721, 723, 724, 861, 862, 1001, 1008, 1025, 1036, 1037], "201520": 201, "20155": 1045, "20159": 1045, "2016": [0, 236, 369, 407, 990, 1037, 1038], "20161": 1045, "20165": 1045, "2017": [0, 269, 369, 405, 407, 418, 443, 1001, 1038, 1039], "2018": [0, 211, 229, 415, 449, 990, 1001, 1025, 1039, 1040], "2019": [0, 187, 373, 407, 451, 461, 692, 998, 1001, 1008, 1011, 1040, 1041, 1042], "2020": [0, 370, 1042, 1043, 1044, 1045], "20200": 1045, "20207": 1045, "20209": 1045, "2021": [0, 373, 375, 671, 1001, 1044, 1045], "2022": [0, 363, 407, 414, 705, 1011, 1046, 1047], "2023": [0, 387, 401, 405, 1047, 1048], "20231": 1045, "2024": [1049, 1050], "20240": 1045, "20250": 1045, "20272": 1045, "20297": 1045, "203": [86, 351], "20312": 1045, "203174": 201, "20326": 1045, "20331": 1047, "2034": [350, 370], "20380": 1045, "20385": 1045, "2039": 272, "204": [198, 1009, 1014], "20408": 1046, "20415": 1047, "20416": 1045, "20431": 1045, "20477": 1045, "20512": 1045, "20515": 1045, "20521": 1045, "20524": 1048, "20526": 1045, "20528": 1045, "20531": 1045, "20534": 1045, "20552": 1045, "20554": 1045, "20560": 1045, "20567": 1046, "20583": 1045, "20597": 1045, "20617": 1047, "20619": 1045, "20638": 1045, "20640": [140, 182, 370, 489], "20652": 1045, "20653": 1046, "20657": 1045, "20673": 1045, "20683": 1045, "207": [168, 307, 1032], "2071716": [844, 845], "20727": 1045, "20729": 1045, "20752": 1045, "2075215": 226, "20753": 1046, "20761": 1045, "207667": 272, "2079": 274, "208": [168, 289, 372], "20802": 1047, "20803": 1046, "20811": 1046, "20842": 1045, "20843": 1045, "20860": 1046, "20880": 1045, "208864": 201, "20899": 1045, "209": [741, 880], "20904": 1045, "20959": 1045, "20960": 1045, "20961": 1045, "20_000": 289, "20new": 370, "20newgroup": [66, 183, 192, 204, 227, 307, 488, 658, 830, 833, 997, 1022], "20news_hom": 370, "20newsgroup": [226, 368, 1032], "20th": 708, "21": [43, 52, 105, 118, 149, 168, 186, 201, 212, 229, 236, 259, 263, 289, 307, 311, 313, 324, 372, 373, 377, 379, 393, 404, 414, 415, 440, 444, 473, 477, 529, 532, 561, 562, 563, 569, 570, 588, 589, 591, 627, 669, 687, 754, 800, 814, 827, 870, 877, 879, 885, 902, 918, 947, 993, 997, 1001, 1002, 1011, 1022, 1028, 1030, 1032, 1033, 1035, 1039, 1040, 1042], "2100": [83, 321], "2102": 544, "21020": 1047, "21026": 1046, "21032": 1046, "21038": 1046, "2107": 274, "21078": 1046, "21079": 1046, "21080": 1045, "21086": 1046, "21093": 1045, "211": [274, 323, 331, 880, 892], "21109": 1046, "21114": 1046, "211217613": 1040, "21130": 1045, "21145": 1045, "21148": 1046, "2117": 332, "21177": 1046, "21179": 1045, "21194": [80, 1045], "21195": 1045, "21199": 1045, "212": [145, 168, 274, 331, 372, 468, 500, 1007], "21219": 1046, "212197e": 229, "21243": 80, "21251": 1045, "2126": 248, "21271": 1045, "21278": 1046, "21295": 1045, "21298": 1046, "213": [242, 244], "21301203": 173, "213056e": 229, "21310": 1046, "21316": 1046, "21330": 1046, "21334": 1046, "21336": 1045, "21340": 1045, "21341": 1046, "21351": 1045, "21389": 1045, "2139": [211, 229], "214": [171, 584], "21408": 1046, "21425": 1046, "21430": 1046, "21432": 1046, "21434": 1046, "21436": 1046, "21443888": 226, "21445": 1046, "21448": 1046, "21469": 1047, "21481": [1045, 1046], "21482": 1046, "21493": 1045, "215": [301, 584, 1022], "21517": 1045, "21534": 1046, "21542": 1046, "21544347": 51, "21552": 1045, "21565": 1046, "2156660": 325, "21567": 1046, "21569": 1046, "21573": 1046, "21576": 1046, "21578": [47, 1045], "2159048": [653, 663, 684], "216": 1014, "21606": 1046, "21616": 741, "21617": 1046, "21632": 1046, "21694": 1045, "217": [54, 535, 541, 799], "21701": 1046, "21705": 1046, "2171": 46, "21713": 1046, "21724": 1046, "2173": [199, 656, 997], "21735": 1046, "21741": 1045, "21762": 1046, "21767": 1046, "2179": 47, "218": [372, 470, 715, 786], "2180": 57, "21800": 1046, "21805": 1046, "21807": 1049, "21808": 1046, "21809": 1048, "21814": 1046, "21832": 1046, "21833": 1045, "21837": 1046, "21845": 1045, "21871": 1045, "21873": 1046, "21880": 1046, "21881": 1046, "21888": 1046, "218997": 201, "219": 268, "21901": 1046, "21915": 1045, "21917": 1045, "2192": [199, 656, 997], "21938": 1047, "21954": 1046, "21987": 1046, "21988": 1046, "21991": 1045, "21998": 1046, "22": [43, 52, 77, 138, 139, 141, 181, 182, 183, 186, 187, 188, 228, 236, 248, 251, 259, 263, 291, 307, 309, 313, 315, 317, 320, 323, 326, 329, 332, 352, 375, 380, 393, 404, 436, 447, 471, 477, 487, 488, 495, 496, 504, 515, 524, 531, 537, 542, 545, 546, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 594, 609, 627, 628, 632, 634, 645, 647, 651, 653, 655, 658, 659, 661, 663, 665, 669, 688, 692, 702, 704, 713, 757, 769, 778, 783, 784, 788, 800, 801, 805, 814, 819, 821, 824, 825, 826, 827, 828, 829, 830, 831, 848, 850, 852, 854, 855, 856, 861, 862, 863, 865, 868, 884, 895, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 942, 943, 993, 1001, 1011, 1022, 1028, 1030, 1032, 1035, 1040, 1043, 1045], "220": [79, 263, 1032], "2200": [83, 370, 493], "22002": 1046, "22014": 1047, "22015": 1046, "22016": 1046, "22027": 1046, "220446049250313e": [470, 471, 477, 650, 651, 654, 655, 656, 682, 683], "22050": 1045, "22054": 1047, "22058": 1046, "22059": 1046, "2206": 47, "22062": 1046, "22063": 1046, "22064": 1046, "22065": 1046, "220mb": 350, "221": [115, 152, 263, 1035], "2210": 47, "22106": 1046, "22108": 1046, "2211": 634, "22111": 1046, "22114": 1046, "22118": 1046, "22119": 1046, "22120": 1046, "22137": 1046, "22148": 1046, "22149": 1046, "22150": 1046, "22154": 1046, "22159": 1046, "22181": 1046, "22188": 1046, "22191": 1046, "22199": 1046, "222": [115, 152, 178, 310, 332, 1016, 1022], "2220": 47, "22203": 1046, "22206": 1046, "22212": 1046, "22215": 1046, "22217": 1046, "22218": 1046, "2222": 656, "22223": 1046, "2223": 47, "22235": 1046, "22237": 1046, "2224": 1034, "22240": 1046, "22248": 1046, "22249": 1046, "22254": 1046, "22255": 1046, "22268": 1047, "22269": 1047, "22284": 1046, "22288": 1046, "223": [115, 152, 168, 372], "22300": 1046, "22314355": 590, "22318": 1046, "22320": 1046, "22356": 1046, "22361": 372, "22370": 1046, "223745": 211, "224": [86, 115, 152, 407, 725, 822], "22409": 1048, "22410": 1046, "22412": 1046, "22438": 387, "2246": 229, "22476": 1046, "22486": 1046, "22493": 1046, "22498": 1046, "225": [291, 414, 1022], "22504": 407, "22506": 1048, "22508": 1046, "22518": 1047, "22525": 1046, "22526": 1046, "22527": 1047, "22537": 1046, "22548": 1046, "22553": 1046, "22554": 1047, "22562": 1047, "22566": 1046, "22578": 1046, "225806": 229, "22595": 1046, "226": [127, 234, 407, 418, 443, 1022], "22604": 1046, "22629": 1047, "22635": 1046, "22665": 1047, "22685": 1046, "22687": 1046, "22692": 123, "22694": 1046, "22695": 1046, "22696": 1046, "22697": 1046, "227": [94, 269, 407, 725, 1022], "22710": 1047, "22735": 1046, "22747343e": 111, "22775": 1046, "22784907": 827, "22806": 1046, "22808": 1046, "22830": 1046, "2284": 187, "22856": 1046, "2286": 370, "22866": 1046, "22868": 1046, "2287": 370, "2288": 370, "22891": 1046, "22898": 1047, "22899": 1046, "229": 1001, "22908": 1046, "22913": 1046, "22950": 1046, "22953": 1046, "22965": 1047, "22968": 1047, "22982": 1046, "22993": 1047, "22nd": 438, "23": [43, 57, 63, 70, 83, 123, 151, 154, 168, 183, 191, 211, 219, 232, 236, 240, 248, 250, 252, 259, 263, 271, 307, 313, 317, 320, 321, 322, 324, 325, 329, 372, 373, 381, 393, 414, 420, 430, 439, 446, 451, 453, 461, 464, 466, 467, 474, 477, 478, 479, 481, 482, 483, 489, 492, 500, 501, 502, 504, 505, 510, 512, 514, 522, 524, 538, 539, 540, 543, 547, 554, 556, 558, 560, 561, 562, 565, 568, 569, 570, 607, 608, 611, 627, 630, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 675, 678, 679, 680, 681, 717, 730, 778, 830, 836, 837, 838, 847, 855, 862, 865, 877, 884, 892, 893, 902, 905, 907, 910, 913, 915, 928, 930, 931, 942, 943, 948, 1001, 1022, 1028, 1030, 1032, 1033, 1039, 1040, 1041, 1044], "230": 584, "2300": [83, 201], "23023": 1046, "23033": 1046, "23034": 1046, "23036": 1046, "23038": 1047, "23040": 1046, "23046": 1046, "23047": 1046, "23077": 1046, "23079": 1046, "23095": 1046, "23097": 1046, "23098": 1046, "23099": 1048, "231": [50, 302, 370, 407, 418, 443, 498, 584], "23101": 1047, "23113": 1046, "23115": 1046, "2312": 47, "23127": 1047, "2313": 47, "23139": 1047, "23149": [370, 497, 1046], "2317": 47, "2318": 47, "23194": 1046, "23197": 1047, "23198": 1046, "232": [263, 1001], "23210": 1047, "23214": 1046, "2323": [689, 693, 998], "23252": 1047, "23256": 1046, "23264": 1046, "23271": 1046, "23273": 1046, "23275": 1047, "2328": 47, "2329": 47, "23299": 1046, "2331": 43, "23317": 1049, "2332": [43, 47], "2333": [43, 47], "2334": 43, "2335": 43, "23358": 1046, "2336": 381, "23370": 1046, "23395": 1046, "233mb": 45, "234": [86, 839, 843, 861, 862, 1003], "2341": 524, "23410": 1046, "234137": 201, "23442": 1047, "23446": 1047, "23461": 1047, "23470": 1047, "23471": 1046, "23480": 1047, "235": [242, 315, 350, 1022], "2351": 47, "2354": 47, "235430": 272, "23548": 1046, "2357": 47, "2357juan": [1046, 1047, 1048], "2358": 47, "23585": 1047, "23595": 1048, "2360": 47, "23604": 1047, "23608": 1046, "2361": 47, "23619": 1047, "2362": 47, "23636": 1046, "23637": 1047, "23668876": [653, 663, 684], "236720": 201, "23683": 1047, "23689075": [653, 663, 684], "237": [163, 1022], "23726": 1047, "23731": 1048, "23734": 1047, "237703": 201, "23773583": 111, "23798": 1047, "23819": [1047, 1048], "23833": 1046, "23834": 1047, "23865": 1047, "23874": 1047, "238744": 201, "23877": 1047, "238955": 272, "239": 1032, "23905": 1047, "23935": 1047, "23977": 1047, "23990": 1046, "23993": 1047, "24": [43, 44, 52, 99, 149, 168, 183, 187, 191, 197, 249, 263, 281, 289, 317, 318, 319, 321, 324, 325, 328, 329, 373, 375, 379, 393, 399, 400, 407, 414, 415, 436, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 459, 461, 463, 468, 469, 470, 471, 472, 473, 474, 475, 488, 489, 490, 492, 496, 504, 515, 516, 517, 518, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 613, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 698, 699, 700, 702, 708, 714, 727, 746, 753, 797, 798, 800, 803, 804, 814, 821, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 865, 867, 868, 869, 870, 873, 874, 876, 878, 879, 880, 881, 882, 884, 894, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 942, 943, 947, 975, 981, 990, 1008, 1011, 1022, 1028, 1030, 1032, 1040, 1041, 1042, 1043, 1045], "240": [43, 52, 79, 1009, 1032], "2400": 83, "24000": 520, "24015": 1046, "24017": 1046, "24027": 1048, "24051": 1047, "24058": 1047, "2407": 47, "24075": 1047, "24076": 1048, "24083": 1048, "24084": 1047, "24087": 1046, "2409": 47, "241": [414, 567, 568], "2410": 544, "2414": 47, "24140": 1048, "24141": 1047, "24145": 1048, "24146": 1047, "2416": 47, "24160": 323, "242": [124, 884, 1022, 1032], "24218": 1047, "24230": 1048, "24245": 1047, "24258": 1047, "24264": 1047, "24283": 1047, "243": 584, "2431": 474, "24317": 1047, "24338": 1047, "24350": 1047, "24354": 1047, "24365": 1047, "243802": 305, "244": [263, 286, 584], "24404831511191221642141021252626109": 52, "24405": 1047, "2441": 229, "24412": 1047, "24421": 1047, "24433": 1047, "24446": 1046, "244466": 252, "24465": 1047, "2449": 381, "245": [1013, 1034], "24512": 1047, "24523": 1047, "24528": 1047, "24538": 1047, "24539": 1047, "24543": 1047, "24556": 1047, "24568": 1048, "245961": 146, "245mb": 352, "246": [197, 1009, 1032], "24617": 1047, "2463": 997, "24630": 1047, "24631": 1046, "24637": 1047, "24640578": 111, "24645": 1047, "24667": 1047, "24668": 1048, "24677": 1048, "24683": 1047, "24688": 1047, "24699": 1047, "247": [206, 884, 1022], "24714": 1047, "24747": 1047, "24750": 1047, "24755": 1047, "24767": 1047, "24769": 1048, "24838": 1049, "24849": 1047, "24855": 1047, "24856": 1047, "24871": 1048, "24873": 1047, "2487575": 191, "2487591": 191, "24882": 1048, "24889": 1047, "24894": 1047, "249": [188, 263, 1022], "24935": 1048, "24951": 1047, "25": [43, 44, 45, 46, 48, 49, 50, 52, 57, 61, 63, 77, 87, 88, 111, 115, 123, 127, 129, 138, 146, 164, 165, 171, 181, 186, 194, 202, 215, 238, 256, 263, 269, 302, 304, 307, 309, 311, 323, 328, 329, 350, 356, 358, 362, 381, 411, 414, 415, 418, 443, 476, 480, 501, 504, 521, 570, 597, 618, 678, 734, 796, 817, 830, 856, 874, 879, 881, 882, 885, 893, 894, 896, 897, 945, 949, 981, 997, 1001, 1002, 1004, 1011, 1022, 1032, 1034, 1040, 1043], "250": [49, 98, 146, 191, 231, 351, 493, 692, 822, 990, 1013, 1022, 1039], "2500": 1001, "25000": 77, "2501": [168, 372], "25044": 1048, "250639": 201, "25067": 1047, "25077": 1047, "25080": 1047, "25089": 1047, "25093": 1048, "25094": 1047, "251": [168, 233, 372], "25102": 1048, "25120": 1048, "25129": 1047, "25147": 1047, "25163598": 383, "25172": 1047, "25174": 1047, "25177": 1048, "25183501383331797": 277, "25186": 1048, "25188": 1047, "25190": 1048, "25193977": 1002, "25196": 1048, "252": [168, 233, 372, 534, 880, 892], "25209": 1048, "25214": 1048, "25220": 1048, "25232": 1048, "25250": 1047, "25251": 1048, "25257": 1048, "25274": 1047, "25275": 1049, "25291": 1048, "25291366": 358, "25294": 1048, "25295": 1047, "25296": 1047, "25297": 1048, "25299": 1048, "253": [145, 534], "25308": 1048, "25312": 1047, "25334": 1048, "25341": 1047, "253445": 146, "25349312e": 195, "2535": [468, 473], "25354": 1047, "2536": 475, "25363": 1047, "25367": 1048, "25370": 1047, "25387": 1048, "254": [274, 1022], "25402": 1048, "25417": 1048, "25432": 1048, "25438": 1048, "25443": 1048, "25477": 1047, "2548": 208, "25490": 1048, "25499205": 536, "255": [123, 289, 306, 315, 321, 370, 414, 493, 494, 561, 562], "25500": 1047, "25506": 1048, "25511": 1047, "25531": 1048, "25563": 1047, "25570": 1047, "25587": 1048, "25589": 1047, "256": [77, 86, 145, 315, 363, 370, 407, 414, 448, 467, 537, 546, 563, 860, 892, 902, 1046], "25601": 1048, "25619": 1047, "25629": 1048, "25638": 1047, "25659": 1048, "25664": 1047, "25672": 1048, "25677": 1048, "2568": 1041, "25694": 1047, "25697": 1048, "257": [233, 267], "25704": 1047, "25713": 1048, "25719016": 1002, "25732": 1048, "25733": 1048, "25744": 1047, "25747": 1047, "25752": 1048, "25774": 1047, "25784": 1048, "2579": 692, "258": 233, "25805": 1048, "25813": 1048, "25814": 1048, "25815": 1048, "259": [50, 233, 302, 370, 414, 498, 567, 568], "259031": 201, "259297": 201, "25931": 1048, "25956": 1048, "25973": 1048, "25987": 1048, "25991": 1050, "25th": [43, 248, 882], "26": [43, 80, 87, 111, 118, 122, 175, 186, 236, 247, 263, 270, 329, 381, 570, 648, 729, 783, 822, 880, 892, 948, 1001, 1011, 1032, 1035, 1036, 1044, 1050], "260": [209, 268, 1022, 1045], "26019": 1048, "26021": 1048, "26033": 1048, "2605": 692, "26082": 1048, "26093": 1048, "26106": 1048, "26108": 1048, "26113448": 165, "26120": 1050, "26121": 1048, "26163": 1049, "26194": 1048, "262": [54, 1032], "26207": 1048, "26242": 1048, "26243": 1049, "26253567e": 111, "26264": 1048, "26267": 1049, "26278": 1049, "26286": 1048, "26286057": 226, "26289": 1048, "26299": 1049, "26315": 1049, "26316": 175, "26318": 1048, "26323": 1048, "263234": 252, "26323428": 252, "26325": 1048, "26333": 1048, "26337": 1048, "26362917": 226, "26366": 1049, "263758": [583, 587], "26376": 1048, "26385": 1048, "26386": 1048, "26386883": 173, "26391": 1049, "2640": 835, "26400": 1048, "26410": 1049, "26411": 1049, "26416": 1048, "26424": 1048, "26433": 1048, "26454": 1048, "26459": 1049, "26464": 1049, "26466": 1048, "265": [735, 839, 843, 1003], "26503": 1048, "26506": 1049, "26521": 1048, "2652124": 815, "26525": 1049, "26551": 1048, "26566": 1048, "26579": 1048, "26593496": 226, "26600": 1048, "26602": 1048, "26616": 1049, "26634": 1049, "26642044": 666, "26644": 1048, "26648": 1049, "26653": 1048, "26657": 1048, "2666": 1001, "2667": 498, "26674": 1049, "26683": 1049, "267": [111, 1022, 1032], "2671": 1011, "26721": 1049, "26734": 1049, "26736": 1049, "26744": 1049, "26748": 1048, "2675": 46, "26754": 1048, "26760": 1048, "26765": 1049, "267703": 87, "26772": 1048, "26786": 1049, "26789": 1049, "268": [242, 270, 283, 1022], "26814": 1048, "268147": 272, "26828": 1049, "26830": 1049, "26831": 1049, "26837": 1050, "26840": 1049, "26855": 1049, "26862": 1049, "26893": 1048, "26896": 1049, "269": [129, 255, 511, 1022], "26903": 1048, "26909": 1049, "26913": 1048, "2692": 1011, "26931": 1048, "26934744": 130, "26940": 1048, "26944": 1049, "26957": 1049, "26th": [407, 726, 756, 1001], "27": [43, 45, 47, 52, 57, 67, 81, 87, 263, 328, 329, 347, 372, 407, 415, 517, 524, 605, 713, 788, 789, 885, 905, 1001, 1011, 1032, 1034], "270": [197, 329], "27000": 229, "27002": 1048, "27005": 1049, "27006": 1049, "27017": 1049, "27018": 1049, "27044": 1048, "27054655": 226, "27058": 1049, "27098": 1049, "27100": 1049, "27104": 1049, "27110": 1049, "27137": 1049, "27139": 1049, "2714": 248, "271411": 252, "27161": 1049, "27161955": 165, "27166": 1049, "27167": 1048, "27179": 1049, "27185": 1049, "272": [54, 222, 1022], "27204": 1049, "27219": 1049, "272214": 584, "27239": 1049, "27240": 1049, "27243": 1048, "27250": 1049, "27252": 1049, "2727": 558, "27274": 1049, "27277": 1049, "27291": 1049, "27292": 1048, "27301": 1049, "27308": 1049, "27309": 1049, "27311": 1048, "27314": 1049, "27315": 1049, "27328": 1049, "27336": 1049, "2734": 381, "27344": 1050, "27372": 1049, "27389": 1049, "274": 511, "27417": 1049, "27431": 1049, "27438": 1049, "27456": 1050, "27468": 1048, "27478": 1049, "27490": 1049, "27491": 1050, "27499706": 51, "275": [43, 146, 329, 343, 1022, 1035], "27500": 1049, "27526": 1050, "27538": 1049, "27544": 1049, "27556": 1049, "27558": 1049, "27560": 1050, "27566": 1050, "275706": 87, "27573": 1048, "27576": 1050, "27577": 1049, "27580": 1048, "27583": 1048, "27584": 1050, "275851": 252, "2759": [896, 897], "27597342": 115, "276": 269, "27601": 1049, "27614": 1049, "27624": 1049, "2763": [420, 474], "27636": 1050, "27639": 1049, "27645": 1049, "27650": 1049, "27651": 1049, "27657": 1050, "27668": 1049, "27670": 1049, "27675": 1049, "27678": 1049, "277": [1009, 1034], "27700": 1050, "27702": 1049, "27710": 1049, "27718": 1049, "27720": 1049, "27721": 1049, "27734": 1049, "27757": 1049, "27760": 1049, "27772182": 52, "278": [194, 372, 844, 845, 1022], "2780": 381, "27800": 1050, "27801": 1049, "27817": 1049, "27821": 1049, "27828": 1049, "27834": 1049, "27835": 1049, "27841": 1049, "27844": 1050, "27865": 1049, "27898": 1049, "27899": 1049, "279": [179, 997], "27904": 1050, "27937": 1050, "27979": 1049, "27990": 1050, "28": [43, 47, 99, 146, 168, 186, 227, 263, 270, 278, 283, 306, 328, 329, 372, 381, 407, 411, 449, 456, 1011, 1022, 1032, 1035, 1038], "280": 329, "28009951": 827, "2802": 57, "28040": 1050, "28048": 1049, "28051": 1050, "28053": 1050, "28074": 1049, "28085": 1050, "28090": 1049, "28092": 1050, "28095": 1049, "28102": 1050, "28111": 1049, "28121": 1049, "28136": 1050, "28160": 1050, "28165": 1049, "28167": 1049, "2818": 469, "28184": 1049, "28187": 1050, "28188": 1049, "28191": 1049, "28195": 1049, "28198": 1049, "282": [1022, 1032], "28205": 1050, "28207552": 226, "28210": 1050, "28222": 1049, "28225276": 86, "2823": 332, "28233": 1049, "28235": 1049, "28240": 1049, "28241": 1049, "28247": 1049, "2825": 0, "28256": 1049, "28261": 1050, "28262": 1049, "28263": 1049, "28295": 1049, "2830": 0, "28306": 1050, "28327": 1049, "2833": 381, "28351": 1050, "28352": 1050, "28360": 1050, "28365": 1049, "28377": 1049, "28385": 1049, "28392263": 325, "28399": 1050, "284": 649, "28407": 1050, "28425": 1050, "284315": 263, "28432": 1050, "28435": 1050, "28471": 1050, "284806": 263, "284807": 263, "28483": 1050, "28491": 1050, "28498": 1050, "285": [252, 329, 724], "28521": 1050, "28552": 1050, "28557": 1050, "28582": 1050, "286": 414, "28604": 1050, "28612": 1050, "28651": 1050, "28664": 1050, "28670": 1050, "28692": 1050, "287": [187, 1013], "28703": 1050, "28712": 1050, "28718": 1050, "28722": 1050, "28756": 1050, "28763": 1050, "28768": 1050, "2879": 1039, "288": [73, 535, 541, 1022], "28808734": 215, "28822": 1050, "28823": 1050, "28843": 1050, "28847": 1050, "289": 186, "28915": 1050, "28925": 1050, "28951": 1050, "28975": 1045, "28988": 1050, "28x28": 306, "29": [112, 171, 175, 203, 211, 215, 228, 263, 323, 329, 372, 414, 559, 560, 690, 694, 781, 797, 856, 997, 998, 1015], "290": [69, 329, 688, 689, 693, 998, 1022], "290075": 201, "29018": 1050, "290584": 305, "29078": 1050, "291": [168, 351, 370, 372], "29119": 1050, "2914": 494, "29179": 1050, "292": [393, 414, 735], "29235": 1050, "29269": 1050, "2928359": 226, "293": 242, "29314": 1050, "29316": 175, "29327": 1050, "29330": 1050, "29336": 1050, "2939931": 325, "294": [316, 1022], "29401": 1050, "29473397": [844, 845], "295040e": 229, "29545": 1050, "295505e": 229, "296": 1013, "2961": 651, "29612": 1050, "296575": 201, "29694": 1050, "297": 370, "29780": 1050, "298": 1009, "298688": 269, "29898468": 226, "299": [135, 351, 680], "299546e": 229, "2_": 993, "2_000": 134, "2_2": [646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684], "2_f": 652, "2_fro": [653, 662, 663, 684], "2_poli": 269, "2_y": 1003, "2c": [643, 652, 672, 673, 674, 675, 687, 993], "2d": [2, 43, 69, 71, 74, 79, 81, 82, 86, 89, 94, 95, 119, 121, 124, 126, 130, 152, 183, 204, 206, 212, 217, 231, 232, 233, 236, 238, 241, 242, 298, 328, 329, 336, 339, 357, 369, 371, 375, 384, 389, 407, 408, 412, 415, 417, 440, 451, 461, 463, 466, 480, 487, 489, 490, 492, 493, 494, 500, 501, 502, 504, 510, 514, 533, 541, 549, 584, 586, 635, 643, 657, 672, 691, 738, 779, 825, 829, 833, 871, 921, 924, 926, 930, 931, 947, 963, 986, 987, 995, 997, 998, 1001, 1008, 1012, 1017, 1022, 1032, 1036, 1039, 1040, 1041, 1044, 1046, 1050], "2e": [198, 282, 284], "2e6": 1001, "2ec5ac": 313, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 80, 83, 85, 95, 97, 100, 115, 118, 123, 129, 146, 149, 153, 154, 163, 186, 187, 191, 194, 201, 203, 208, 211, 226, 227, 228, 229, 238, 242, 248, 263, 268, 272, 273, 275, 277, 278, 279, 283, 297, 298, 304, 311, 314, 322, 326, 339, 350, 351, 358, 408, 411, 414, 696, 828, 831], "2fbf01908075": 705, "2fx": 257, "2g": [233, 236, 697, 1043], "2h": 413, "2k": 181, "2l": [417, 622], "2n": [696, 993, 1005], "2n_": 997, "2nd": [93, 126, 178, 314, 407, 418, 443, 530, 1011, 1047], "2x": 1032, "2x2": [336, 407, 754], "2x_iy_i": 993, "3": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 364, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 387, 388, 389, 393, 398, 399, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 504, 505, 506, 507, 510, 512, 515, 516, 517, 518, 519, 521, 523, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 587, 588, 590, 591, 593, 594, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 617, 618, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 692, 693, 694, 696, 699, 700, 702, 703, 704, 705, 707, 709, 710, 713, 716, 717, 721, 723, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 741, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 756, 757, 768, 769, 775, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 892, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 926, 927, 930, 931, 932, 936, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 963, 964, 966, 967, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 990, 991, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1012, 1014, 1016, 1017, 1019, 1020, 1022, 1028, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1042, 1044, 1045, 1047, 1049, 1050], "30": [43, 47, 49, 54, 57, 70, 74, 75, 79, 87, 93, 103, 105, 109, 127, 134, 142, 146, 149, 153, 159, 168, 170, 171, 174, 187, 191, 193, 206, 209, 211, 229, 231, 232, 236, 243, 247, 248, 258, 263, 269, 274, 284, 286, 289, 298, 299, 313, 314, 315, 323, 324, 328, 329, 333, 337, 340, 342, 343, 357, 362, 370, 372, 373, 380, 381, 393, 399, 400, 411, 415, 418, 443, 449, 454, 455, 456, 500, 531, 535, 537, 538, 539, 541, 543, 545, 546, 570, 592, 595, 596, 598, 648, 692, 735, 783, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 885, 900, 913, 978, 990, 995, 1001, 1002, 1004, 1009, 1032, 1033, 1039, 1040, 1041], "300": [43, 58, 59, 70, 73, 83, 91, 123, 134, 135, 136, 140, 182, 202, 236, 238, 242, 258, 263, 272, 282, 299, 312, 320, 328, 343, 346, 442, 446, 447, 458, 460, 513, 639, 644, 645, 679, 690, 692, 694, 861, 920, 997, 1042], "3000": [52, 97, 234, 896, 897], "30000": 370, "300343": 201, "30061": 541, "301": [408, 1015], "3015": 57, "30151134": 465, "3016": 147, "302": [269, 627], "30258509": 417, "303": [229, 635], "304": [46, 168, 313, 357, 372, 1022], "305": [77, 81, 381, 1022], "30506066": 197, "3053": [468, 473], "305438": 146, "306": 627, "306012": 201, "307": [181, 356, 1022], "30750": 407, "308": 635, "30897646": 226, "30m": 370, "31": [43, 102, 110, 229, 263, 294, 321, 328, 329, 404, 415, 500, 561, 562, 597, 649, 671, 679, 965, 1002, 1032], "3109306": 173, "311": 351, "312": [149, 1035], "3121": 708, "313276e": 229, "315": [289, 351, 372], "316": [175, 179, 328, 611, 614, 625, 880, 1022], "31622776601683794": 159, "3164764": [211, 229], "317": [175, 239, 331, 1022], "31760": 997, "318": 449, "318387": 305, "319": 171, "31958": 175, "31973683": 226, "31bit": 1043, "31st": [212, 883], "32": [43, 44, 52, 84, 118, 185, 188, 247, 283, 322, 329, 369, 373, 380, 389, 404, 414, 415, 444, 564, 565, 582, 589, 634, 676, 883, 885, 930, 931, 965, 1009, 1011, 1032, 1035, 1038, 1040, 1041, 1044, 1045, 1046, 1049], "320": [156, 370, 990, 1015, 1022, 1032], "3204": 1038, "321": [324, 342, 1022], "321301": 62, "322": [45, 351, 470, 471], "3221": [692, 998], "323": 242, "323200": 62, "324": 370, "324084": 201, "3245": [692, 998], "325": [152, 1022], "325198e": 229, "3252": 597, "32634568": 215, "3264": 46, "327": [63, 730], "3272984419327777": 354, "3273": 746, "327407": 252, "327605": 252, "32767": 1043, "32782448": 173, "3279": 46, "328": [351, 730], "3288": 544, "329": [47, 61, 449, 1022], "329616": 201, "32987858": 565, "32bit": [2, 362, 965, 1050], "32x32": 372, "33": [43, 52, 111, 168, 211, 323, 329, 357, 370, 372, 380, 381, 407, 415, 460, 532, 637, 648, 712, 713, 729, 730, 738, 743, 783, 784, 787, 806, 828, 830, 832, 891, 915, 982, 997, 1001, 1011, 1022, 1032, 1040], "330": [248, 329, 1022], "331": [216, 1022], "331263": 201, "3315057": [826, 827], "3317": 211, "332": [351, 892], "333": 846, "3333": 498, "333333": 229, "33333333": [854, 1011], "334": 173, "334795": 272, "335": 43, "335919": 305, "336": [107, 149, 381, 1011, 1022], "336188": 305, "3367": 1039, "337": 381, "3375": 323, "338": 248, "3383": 46, "3384": 351, "3387": 351, "339": 351, "3397": [664, 685, 686], "33rd": [901, 1014], "34": [43, 146, 168, 170, 294, 307, 328, 329, 357, 372, 411, 520, 529, 570, 597, 649, 667, 716, 764, 1032], "340": [100, 244, 328, 1022], "34118": 370, "34125758": 226, "3415": [664, 685, 686], "341523": 305, "3419": 272, "341949": 201, "342": 822, "34279478": 226, "343": [49, 1022], "3433": 46, "34346583": 86, "3445": 46, "345": [168, 372], "34545455": 997, "3456": 46, "34586917": 226, "346": [143, 414, 501, 555, 556, 1022], "3467": 615, "347": [175, 1022], "347717": 146, "34867495": 1002, "349": [134, 351, 381, 553], "34990341": 115, "35": [43, 45, 46, 47, 48, 50, 52, 88, 103, 136, 156, 186, 187, 193, 199, 238, 286, 314, 328, 329, 544, 648, 649, 656, 702, 706, 707, 727, 741, 756, 782, 789, 837, 990, 997, 1001, 1007, 1008, 1011, 1032, 1034], "350": 186, "351390": 269, "352": [110, 269, 271, 381, 1022], "352124": 201, "35278655": 226, "3534": 57, "3539": 102, "354": 351, "354394": 146, "355": [66, 270, 1022], "3551": 46, "355440": 269, "355445": 146, "356": 1009, "356497": 146, "3565178": 965, "357": [134, 168, 351, 372, 500, 905, 1022], "3573": 827, "35776189065725783": 319, "3582": 46, "358295": 201, "358990": 201, "359": [59, 1022], "3591": 1041, "36": [43, 45, 46, 47, 52, 53, 122, 168, 176, 186, 229, 248, 342, 357, 372, 381, 414, 415, 555, 556, 570, 735, 759, 1001, 1032], "360": [134, 553], "360000": 305, "36047253": 226, "361": [370, 414, 555, 556], "362176": 323, "363": [45, 52], "3635": 827, "364": [323, 470, 471, 1022, 1033], "365": [409, 472], "3659": 1037, "366": 357, "367": [351, 414, 1032], "36787944": 999, "368": [121, 1022], "3680": [611, 614, 625], "3684": 835, "36851234": 816, "368896": 62, "3690483151908911912247722318110": 52, "3696": 613, "3697": 850, "3697178": 52, "37": [43, 197, 226, 272, 283, 328, 357, 370, 414, 524, 716, 884, 895, 1011, 1032], "370": [122, 1022], "370000e": 229, "370039": 201, "370738": 62, "37125248": 325, "372": [351, 352, 1022], "37257991": 115, "373333": 272, "374": [144, 1022], "375": [86, 276, 448, 750, 1001, 1022], "376": 1009, "37647423": 52, "376999": 62, "37741762": 130, "377eb8": [75, 79, 95, 96, 238], "378": [147, 186, 351, 414, 1022, 1032], "37815029": 226, "37845099": 358, "379": [238, 1022], "37967282": 1002, "379710": 186, "379763": 146, "38": [50, 187, 203, 210, 215, 262, 278, 294, 324, 414, 632, 885, 947, 1001, 1011, 1032, 1033, 1034], "3800": 201, "3803": 352, "381327": 370, "382005": 146, "382120e": 229, "38353048": 226, "383973": 272, "384": [351, 696, 905], "3840": 1040, "384338": 201, "384616559": 384, "385000e": 229, "3854": [664, 665], "3855": 1021, "386": 880, "3862": 868, "38629436": 1011, "38690531511642143152471231333333107": 52, "387": [351, 1032], "387580e": 229, "387599": 52, "387830e": 229, "3889": 474, "3889873516666431": 52, "389": [593, 594], "3894": 615, "39": [43, 52, 168, 252, 263, 370, 372, 373, 379, 407, 415, 495, 895, 913, 949], "390": [48, 1022], "3908844": 827, "391": [70, 696, 1022], "3910350737": 384, "3911": 47, "3928": 469, "393297": 252, "39329747": 252, "394": [102, 179, 232, 1022], "3947": 1013, "395": [43, 130, 1022], "39568399": 536, "396": [102, 168, 372], "3964": [420, 474], "397": [225, 370, 1022], "3972": 655, "398": [351, 647], "3986": 229, "3996": 651, "3_": 993, "3_poli": 269, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 369, "3d": [100, 126, 231, 233, 235, 357, 415, 506, 586, 921, 963, 1039, 1040, 1042], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 81, 82, 91, 103, 105, 107, 116, 134, 141, 149, 164, 168, 170, 171, 172, 174, 179, 185, 187, 188, 194, 197, 198, 204, 211, 213, 217, 226, 227, 229, 232, 242, 244, 267, 269, 270, 272, 275, 277, 280, 282, 289, 304, 326, 332, 350, 351, 352, 822, 829, 1009], "3k": 696, "3l": 417, "3llobo": 1047, "3m": 51, "3rd": [126, 178, 839, 882, 1003, 1011], "3ssnporch": 143, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 126, 128, 129, 134, 135, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 159, 164, 168, 170, 173, 175, 176, 178, 179, 181, 182, 183, 186, 187, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 215, 217, 218, 219, 221, 224, 225, 229, 231, 238, 242, 243, 244, 245, 246, 247, 248, 250, 252, 254, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283, 284, 288, 289, 291, 293, 294, 295, 296, 299, 304, 306, 307, 309, 310, 312, 313, 315, 317, 318, 319, 320, 321, 323, 324, 326, 328, 329, 330, 331, 332, 336, 338, 339, 342, 343, 344, 346, 347, 348, 350, 351, 352, 357, 358, 363, 369, 370, 371, 372, 373, 375, 379, 380, 381, 384, 387, 388, 389, 393, 398, 399, 400, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 436, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 496, 504, 512, 513, 516, 517, 518, 524, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 617, 618, 619, 622, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 677, 679, 680, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 698, 699, 702, 706, 707, 715, 716, 725, 726, 727, 732, 734, 742, 743, 744, 746, 747, 748, 749, 751, 752, 756, 768, 769, 781, 782, 788, 789, 790, 791, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 830, 832, 833, 834, 835, 838, 839, 840, 841, 843, 848, 852, 853, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 891, 892, 896, 897, 898, 902, 904, 905, 908, 912, 913, 914, 915, 926, 927, 929, 930, 931, 932, 936, 947, 948, 949, 950, 952, 954, 955, 956, 957, 964, 971, 972, 973, 975, 976, 977, 978, 981, 982, 983, 990, 991, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1011, 1012, 1015, 1016, 1022, 1028, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1045, 1046, 1047, 1050], "40": [43, 54, 87, 99, 109, 120, 126, 150, 156, 170, 197, 203, 204, 206, 228, 233, 235, 246, 248, 258, 270, 295, 301, 306, 311, 328, 329, 337, 338, 340, 342, 344, 345, 357, 363, 370, 411, 445, 495, 517, 518, 799, 844, 845, 849, 861, 862, 990, 1002, 1011, 1032, 1033], "400": [44, 63, 83, 120, 148, 153, 170, 182, 217, 236, 281, 305, 351, 370, 412, 495], "4000": [92, 148, 257], "400000e": 229, "401": 54, "4017": 524, "4018260": 325, "402": 273, "402344": 381, "4025": 1037, "403": 273, "404": [229, 350], "40597": 288, "406": [689, 693, 998], "4066": 46, "407": [168, 351, 372], "408": [68, 96, 102, 1022], "40842387": 51, "40887718": 90, "40945": 103, "4096": [120, 370, 412, 495], "40966": 369, "409717": 272, "41": [52, 168, 211, 248, 357, 370, 372, 456, 468, 480, 492, 621, 624, 635, 646, 647, 652, 658, 660, 661, 662, 664, 681, 685, 686, 699, 781, 839, 1003, 1007], "41075698": 413, "41076071": 413, "41082": 44, "411": [186, 332, 345, 409, 419, 472, 533, 1022], "4110": 475, "41187": 175, "412": [496, 997], "412021": 146, "41214": [211, 229], "41215": 229, "412304": 201, "414": [229, 260, 408, 726, 756, 880, 892, 1001, 1022], "41421356": [763, 769, 1004], "4143": 387, "414810": 252, "414912": 149, "415": [106, 351, 1022], "416": [739, 1001], "416010": 323, "41666667": 750, "41691605": 130, "417": [109, 288, 1022], "41726413": 130, "41888636": 662, "419": [140, 616, 1022], "4194": 372, "42": [43, 44, 45, 52, 58, 61, 62, 63, 64, 67, 79, 80, 89, 104, 109, 115, 118, 122, 127, 134, 141, 143, 144, 146, 147, 149, 150, 154, 164, 165, 182, 186, 188, 189, 191, 193, 201, 206, 207, 213, 217, 218, 219, 225, 226, 228, 231, 232, 233, 238, 243, 244, 245, 248, 251, 263, 268, 270, 273, 282, 283, 289, 295, 296, 297, 304, 309, 310, 311, 312, 314, 316, 318, 320, 322, 331, 337, 339, 350, 351, 358, 363, 380, 381, 389, 398, 407, 411, 414, 415, 418, 436, 443, 477, 487, 492, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 527, 529, 531, 537, 544, 545, 546, 557, 558, 565, 566, 567, 568, 570, 605, 606, 607, 608, 609, 677, 694, 695, 696, 760, 792, 793, 797, 799, 802, 822, 828, 830, 844, 845, 849, 853, 856, 896, 897, 899, 900, 901, 911, 914, 915, 922, 933, 947, 965, 969, 1004, 1011, 1022, 1028, 1029, 1032], "42074": 315, "421": [197, 726, 756, 1001, 1022], "421087": 272, "42165": 143, "422": [593, 594, 726, 756, 1001], "4226193151": 52, "423": 141, "4232": [43, 52], "423641": 201, "424": 229, "4242": [43, 52], "42425183539869415": 319, "425": [232, 351, 615], "4254": [168, 372], "4260": [749, 752], "427": [168, 372, 506, 507, 583, 584, 587], "427329": 252, "4285714285714286": 1001, "429": [231, 286, 351, 1022], "4294": 1038, "43": [168, 177, 242, 269, 289, 372, 380, 800, 814, 885], "430": [212, 419, 533, 1022], "431": [351, 372], "4310090": 769, "432": [269, 409], "4325": 57, "433": [263, 372], "43348936": 226, "4337": 997, "43475": 878, "435": [150, 1022], "436": 242, "4362": 1037, "437362": 201, "438": [87, 186, 1009, 1022], "43847489": 130, "43873": 352, "4387766": 52, "4394": 1040, "44": [43, 123, 175, 186, 187, 197, 286, 293, 478, 781, 885, 905, 908, 983, 1001, 1008, 1032], "440": 186, "440409": 201, "4406": 472, "44063": 52, "4409": [43, 52], "441": [354, 1022], "44139186": 306, "4415": 57, "442": [135, 168, 178, 182, 350, 372, 501, 1022], "4425765": [653, 663, 684], "44300751539296973": 52, "44300752": 52, "443238": 272, "44373091": 1002, "44381023": 215, "44412786": 536, "445": [263, 1009], "445978": 201, "446": [351, 726, 756, 1001], "447": [63, 1022], "447268": 87, "4472869": 130, "4474": 381, "4478": 1037, "448": [85, 289, 1022], "4486": 544, "449": [44, 412, 535], "4496": [43, 52], "4497": 1021, "45": [52, 75, 97, 105, 115, 118, 149, 164, 175, 188, 201, 211, 229, 276, 280, 281, 329, 339, 411, 414, 415, 564, 565, 627, 634, 646, 647, 652, 660, 661, 662, 681, 682, 683, 788, 797, 908, 991, 1001, 1009, 1019, 1028, 1032, 1035], "4500": 226, "45070924": 666, "451": 646, "45192": 159, "451933": 87, "452": [174, 176], "453": 357, "454": 179, "4544": 43, "455": 315, "4550": 369, "456": [44, 302, 412, 535, 1022], "45612256": 660, "45663524": 660, "457": [174, 615, 1022], "4576": 835, "458333315172": 52, "459": [407, 441], "459074": 252, "46": [43, 52, 77, 86, 211, 248, 358, 381, 593, 594, 682, 683, 716, 822, 908, 913, 1011, 1022, 1028], "46033": 496, "46043": 496, "46081961": 1002, "461": 381, "462234": 252, "463": [229, 286], "463088": 52, "464": [167, 1022], "46428631511221642143151251232633109": 52, "465660": 62, "465730": 201, "466": 1008, "4666": 634, "467": [170, 1022], "46779927": 51, "468": 91, "46858513287221654": 324, "46874778": [653, 663, 684], "469": [91, 99, 203, 1022], "46915237": [653, 663, 684], "4694": 524, "469474": 201, "46958558": 661, "4697": 81, "47": [43, 208, 370, 493, 494, 535, 541], "471": [189, 372, 1022], "47140": 407, "47236": [370, 497], "47330339": 415, "4738": 1037, "475": 134, "47668": 352, "478": [113, 1022], "478522": 201, "47885": 352, "479": [177, 1022], "4792": 229, "47922861": 252, "479229": 252, "47928": 352, "4794": 201, "4795": 201, "4796": 201, "4798": 201, "47985": 496, "47987268e": 195, "4799": 201, "48": [43, 52, 115, 149, 175, 252, 315, 372, 381, 407, 510, 597, 699, 746, 828, 839, 990, 1003, 1011, 1028], "480": [197, 351], "4801": 201, "4802": 201, "4803": 201, "4804": 201, "4805": 201, "4806": 201, "4807": 201, "4809": [201, 272], "481": 351, "4810": 201, "4812": 46, "4815": 201, "48204257": 1002, "4828": 201, "483": [311, 348, 648, 1022], "4830": 201, "4831": [201, 655], "4832": 201, "4836": 201, "484": [98, 179, 1022], "4841": 201, "484109": 201, "4846": 201, "485": 696, "4852": 201, "4855": 201, "4857596147013469": 93, "486": [213, 329, 1022], "4860": 201, "4866": 201, "4867": 201, "4869": 201, "487": [52, 724], "4872": 201, "48736655": 667, "4874": 201, "4876": 201, "488": [80, 1022], "4880": 201, "4881": [201, 1037], "48841": 496, "48842": 496, "4885": 201, "48858": 381, "4888": 201, "4891": 201, "48938813e": 195, "4894": 201, "48979592": 448, "4898431": [370, 492], "49": [43, 118, 168, 215, 248, 369, 370, 372, 380, 407, 449, 456, 713, 726, 756, 764, 793, 797, 800, 885, 1001, 1011, 1035], "490": 263, "491": 696, "492": [263, 643, 994], "4923": 649, "4928": 201, "493": [643, 904, 994], "4936": 201, "4939": 1039, "494021": 492, "4948": 46, "4951": 653, "495761": 381, "49665188": 215, "4967": 524, "4976": 597, "499": [168, 372, 381], "4995": 1038, "49999993": 997, "4daf4a": [79, 95], "4dbd33": 118, "4e": 232, "4e9a06": [92, 97], "4eacc5": [92, 97], "4f": [46, 47, 57, 137, 145, 147, 226, 227, 229, 314, 911], "4i": 83, "4th": [168, 178, 372], "4x": [381, 1047], "4x11": 293, "4x4": [372, 412, 415], "5": [43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 132, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 159, 161, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 217, 219, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 236, 238, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 304, 305, 306, 307, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 331, 332, 333, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 370, 371, 372, 373, 375, 379, 380, 381, 383, 387, 388, 389, 393, 399, 400, 401, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 422, 436, 437, 438, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 468, 471, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 504, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 528, 531, 533, 534, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 552, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 582, 592, 593, 594, 597, 602, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 641, 643, 646, 647, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 688, 689, 691, 692, 693, 695, 696, 697, 699, 703, 705, 707, 709, 712, 713, 718, 720, 721, 722, 723, 724, 726, 727, 728, 730, 732, 735, 738, 739, 740, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 769, 770, 778, 781, 782, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 898, 904, 905, 906, 907, 908, 909, 910, 912, 914, 922, 926, 927, 930, 931, 935, 936, 946, 947, 948, 949, 950, 952, 954, 955, 963, 964, 969, 971, 972, 975, 976, 977, 978, 979, 980, 981, 990, 991, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1022, 1023, 1027, 1028, 1030, 1033, 1034, 1035, 1037, 1039, 1040, 1042, 1046, 1047, 1048, 1051], "50": [0, 43, 46, 49, 52, 54, 61, 68, 69, 73, 83, 85, 92, 93, 98, 99, 102, 103, 115, 118, 120, 123, 129, 134, 137, 140, 146, 149, 152, 153, 168, 171, 173, 174, 175, 176, 185, 186, 187, 194, 197, 207, 211, 214, 218, 219, 223, 225, 227, 229, 231, 235, 236, 241, 242, 244, 252, 263, 264, 269, 271, 272, 282, 289, 307, 309, 313, 320, 322, 329, 331, 333, 337, 345, 351, 370, 372, 375, 380, 395, 411, 414, 415, 416, 419, 441, 472, 478, 479, 500, 504, 521, 523, 526, 533, 539, 544, 553, 554, 569, 593, 594, 606, 608, 609, 615, 617, 658, 659, 666, 667, 668, 670, 676, 677, 678, 692, 713, 792, 800, 814, 833, 853, 904, 913, 996, 997, 1001, 1002, 1004, 1007, 1011, 1024, 1032, 1049], "500": [49, 79, 83, 90, 93, 94, 96, 115, 116, 127, 129, 138, 140, 147, 167, 170, 191, 224, 225, 232, 249, 250, 254, 255, 259, 263, 269, 272, 282, 283, 289, 295, 301, 313, 319, 324, 325, 343, 348, 362, 414, 420, 468, 469, 473, 474, 475, 480, 481, 482, 483, 611, 613, 614, 616, 621, 624, 625, 650, 651, 654, 655, 656, 680, 682, 683, 862, 990, 1016], "5000": [89, 198, 226, 227, 229, 320, 885], "50000": 61, "500000": 305, "5000000": 55, "50000000": 173, "50000013": 997, "500526": 149, "500x500": 541, "5012": 1038, "5016": [409, 420, 474], "5029": [409, 420, 474], "503452": 305, "5036": 1039, "504185": 305, "50447799": 1002, "505": [267, 829, 1022], "5053299": 325, "506": [168, 235, 1022], "507": 408, "50755672": 465, "507943": 272, "5082": 1021, "509": [116, 187, 1022], "50941682": 1002, "50_000": [316, 351], "50sampl": 395, "51": [61, 118, 175, 229, 286, 289, 407, 408, 766, 776, 781, 997, 1028], "51082562": 590, "511": [151, 1022], "512": 210, "512281": 259, "512595": 305, "51292546": 612, "513": [853, 1004], "513034": 305, "5131": [46, 1037], "51341712": 999, "514": [153, 168, 1022], "5141": 1038, "51462041": 849, "5149": 46, "515": 43, "515390": 381, "5166": 673, "5166646": 764, "517": [47, 186, 451, 461, 1022], "517272": 259, "5182": 1037, "5186": 1037, "519": [191, 1022], "5193": 46, "51958": 175, "51963999": 111, "52": [43, 123, 175, 211, 531, 633, 797, 947, 1032], "520": [187, 628, 853, 991, 1004, 1022], "52003279": 1002, "5208": 201, "521": 118, "52106591": 130, "5211": 1039, "5212": 201, "522": 905, "5224167": 52, "5229": 1039, "523": [179, 524], "524": [52, 1022], "5243": 415, "52433293": 415, "5244": 201, "525": [438, 628, 991], "5251": 1038, "526": [292, 904, 1022], "526599": 201, "5279": 1039, "528": [161, 263, 1022], "5282": 1037, "52875032": 661, "5289": 46, "5291": 1038, "5295": 1039, "52955942": 849, "5299": 1038, "53": [43, 86, 248, 407, 414, 535, 541, 546, 792, 793], "5315170": 52, "5316": 350, "53284267": 252, "532843": 252, "533": [186, 187], "5337": 1037, "534": [186, 293, 319, 1022], "5355": 1037, "5359": 1039, "536": [175, 289], "5360": 1037, "53777511": 52, "538": [228, 1022], "53844117956": 764, "539": [168, 1022], "5395559": 226, "53959628e": 195, "54": [140, 168, 191, 197, 211, 214, 248, 370, 372, 407, 490, 1022, 1033, 1034], "54035582": 764, "541": [451, 461], "5415": 998, "5417": 229, "542": [168, 372], "5420": 544, "542052": 201, "54209": 159, "5425": 524, "543": 197, "5431": 1037, "543841": 201, "544": [283, 1022], "54434690031882": 105, "54488318": 384, "5456267": 325, "5460": 1038, "546068": 252, "54606834": 252, "54675220": 52, "5469": 372, "547": [352, 357], "548": [159, 332, 1022], "5488135": 384, "549": [63, 257, 269, 1022], "5495": 1037, "54980": 541, "55": [118, 186, 191, 207, 211, 229, 233, 329, 380, 407, 411, 490, 597, 800, 806, 814, 828, 1001, 1032], "5500": [323, 688, 998], "550213": 201, "55102041": 448, "5515": 746, "552": 1001, "55212743": 358, "5523": 1021, "55249": 597, "55390036": 130, "554": [219, 227, 306], "5540": 1038, "55422893": 415, "555": 716, "5555555555555556": 277, "5557": 272, "5558": 46, "557": [53, 1022], "55800226": 226, "559": 616, "5591": [689, 693, 998], "55968825": 646, "56": [43, 229, 242, 332, 381, 646, 647, 652, 660, 661, 662, 681, 713, 735, 1001, 1011, 1028, 1032], "560": [211, 517, 518], "561": 407, "561464362648773": 93, "564": 211, "56479934": 358, "56485654": 130, "565": 269, "566": 211, "567": [176, 1022], "568": [213, 1022], "569": [50, 168, 331, 352, 372, 500, 592, 595, 596, 598, 1022], "5697": 1039, "56b4e9": 254, "57": [170, 186, 227, 278, 307, 372, 373, 393, 399, 400, 408, 705, 761, 781, 837, 1001, 1011, 1032], "570": [168, 372], "570655": 201, "5713": 663, "57142857": 721, "572": [294, 1022], "573": 415, "5732": 1039, "57320793": 415, "573491": 201, "574": [91, 534, 541], "5748": 494, "5749": [370, 493, 494], "575": [102, 211], "5762": 1038, "576989": 252, "577": [168, 372], "579": 524, "58": [52, 99, 110, 372, 409, 420, 474, 607, 764, 1011], "580": [351, 844, 845], "5804131": 130, "5805": 1038, "5807": 1004, "581": 191, "581012": [370, 490], "5814": 1039, "58149261": 415, "58195950e": 195, "582": 905, "5828": [370, 493, 494], "583": [182, 204, 407, 1022], "5833": [738, 1001], "583333315172": 52, "58364548": 999, "584": 168, "585": [43, 1022], "5853": 1021, "5857": 1037, "5863": 381, "58667835e": 195, "586798": 201, "5871": 679, "5874": 1038, "5882004012129721": 93, "589715": 201, "59": [43, 191, 197, 229, 372, 381, 407, 408, 510, 822, 1001, 1028, 1032], "59122734": 667, "592": [611, 614, 625, 1008], "592373": 323, "5925110": 52, "5929": 1038, "593": 138, "594": [179, 211], "594754": 201, "59489497": 226, "595": 211, "5956": 1040, "596": [58, 185, 716, 1022], "5960": 226, "5963": 1042, "597": [211, 352], "598": [91, 127, 171, 541], "5981": 544, "598533": 201, "599": 680, "5991": 1039, "5_000": 191, "5a": 884, "5d": 47, "5e": [44, 120, 200, 595, 596, 598], "5e5": 211, "5f": [159, 322], "5m": 55, "5n_": 112, "5th": [52, 146, 149, 178, 407], "5x": 1049, "6": [0, 43, 45, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 80, 82, 83, 85, 89, 90, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 109, 110, 111, 113, 115, 120, 122, 126, 129, 135, 142, 146, 147, 149, 151, 153, 159, 163, 168, 170, 173, 175, 177, 178, 179, 181, 182, 186, 187, 189, 191, 193, 194, 195, 197, 201, 204, 205, 209, 211, 212, 213, 215, 225, 229, 231, 232, 233, 235, 238, 241, 242, 246, 249, 250, 254, 255, 256, 257, 259, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 281, 282, 288, 291, 294, 302, 304, 306, 307, 309, 311, 313, 314, 316, 318, 321, 322, 323, 324, 325, 326, 328, 329, 332, 333, 339, 340, 342, 344, 346, 348, 350, 351, 352, 356, 357, 358, 369, 370, 372, 373, 375, 377, 379, 380, 381, 388, 393, 399, 400, 405, 407, 408, 411, 412, 414, 415, 416, 422, 427, 434, 441, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 460, 461, 462, 463, 464, 481, 482, 483, 484, 489, 491, 496, 505, 517, 524, 527, 530, 538, 540, 541, 545, 547, 553, 562, 563, 567, 568, 569, 570, 593, 594, 602, 604, 605, 606, 608, 611, 614, 615, 625, 627, 628, 630, 636, 637, 644, 645, 679, 689, 693, 699, 711, 716, 721, 728, 738, 742, 745, 746, 750, 751, 753, 769, 778, 785, 788, 790, 797, 798, 799, 801, 802, 807, 809, 810, 812, 817, 818, 821, 828, 829, 830, 831, 839, 840, 841, 843, 844, 845, 852, 854, 855, 856, 871, 872, 874, 877, 879, 882, 883, 887, 888, 901, 919, 926, 928, 930, 931, 942, 943, 947, 948, 949, 951, 954, 955, 963, 975, 978, 986, 989, 990, 991, 995, 997, 998, 1001, 1011, 1012, 1015, 1016, 1017, 1024, 1028, 1030, 1033, 1034, 1035, 1038, 1040, 1045, 1049, 1050], "60": [43, 45, 52, 92, 105, 113, 211, 223, 229, 231, 232, 252, 257, 277, 282, 329, 342, 350, 369, 407, 411, 449, 456, 713, 800, 1001, 1011, 1032, 1035], "600": [63, 83, 91, 144, 153, 154, 370, 680], "6000": [307, 627], "601052": 305, "601707": 201, "60244657": 849, "60276338": 384, "603": [96, 226, 447], "604": [127, 541], "605": [52, 1022], "606": [613, 834, 1002], "6072758064261095": 170, "607752": 146, "60809415": 662, "60834549": 90, "60836363e": 195, "609": [179, 381], "61": [47, 112, 187, 229, 369, 372, 381, 408, 457, 541, 560, 646, 647, 652, 660, 661, 662, 681, 713, 822, 949], "6101": 1039, "611": [267, 269, 541], "6114": 827, "6114326": 211, "6114327": 211, "6114328": 211, "6114329": 211, "6114330": 211, "611676": 201, "612": 790, "6121": 1038, "6126": 1039, "613": [125, 193, 1022], "6147": 1037, "615373": 186, "616": [841, 1003, 1011], "61611719": 173, "617": [91, 272, 352, 407, 769], "617050e": 229, "6173": 1038, "617715": 146, "6178": 1038, "618": [91, 267], "6181": 1039, "6182": 1038, "618263": 201, "619": [96, 447], "619052": 370, "61958": 175, "6196": [272, 1037], "6198": 746, "62": [47, 52, 187, 191, 229, 262, 323, 329, 358, 370, 493, 494, 844, 845, 1028, 1035], "620": 498, "621": [91, 769], "621645": 201, "622": [91, 541], "62241605": 197, "622811": 146, "623": [841, 1003], "6231": 1021, "6237": 229, "624": 1008, "625": [86, 211, 618, 708], "6250": 1039, "6258": 1037, "626": [82, 198], "6261": 1041, "626286": 201, "627": [138, 295, 1022], "62717609": 226, "62722912": 52, "62745778": 1002, "628": [187, 351], "6282": 1038, "6284": 1021, "6288": 1039, "6291456": 86, "63": [45, 47, 263, 372, 414, 557, 558, 565, 566, 646, 647, 652, 660, 661, 662, 681, 699, 726, 800, 814, 822, 914, 915, 1001], "630": [168, 179, 724, 1022], "63035731": 415, "630382": 323, "6312": 52, "632": 315, "6323": 1021, "633": [155, 244, 346, 1022], "6331": 43, "6332": 43, "63327171": 197, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 316, "63394388": 197, "634": [278, 1022], "635": [43, 616], "636": [197, 381], "63667341": 90, "6371000": 764, "6374": 1040, "6375861597263857": 946, "638": [351, 381], "638768": 87, "638843": 305, "63bit": 1043, "64": [43, 52, 68, 86, 91, 120, 175, 186, 232, 242, 243, 247, 267, 278, 293, 298, 362, 363, 372, 373, 381, 389, 393, 408, 412, 419, 495, 498, 502, 599, 600, 646, 658, 688, 689, 690, 691, 693, 905, 1004, 1028, 1032, 1034, 1040, 1041, 1044, 1045, 1046, 1049], "640": [88, 405, 489, 506, 507, 583, 584, 587, 990, 1022], "640000e": 229, "640770e": 229, "640880e": 229, "64185414": 666, "64236448": 536, "6424": 1021, "6425": 1021, "643": 267, "644": 332, "6440": 226, "64447187": 86, "645": 91, "6451": 1021, "6452": 1040, "646": 178, "6463": 1041, "647": 91, "6472": 1038, "6476": 524, "647689": 201, "648026": 146, "6497": 1038, "64_conda": 383, "64bit": 1032, "64x64": [120, 370, 412], "65": [43, 69, 80, 187, 211, 278, 315, 407, 438, 502, 517, 597, 699, 741, 792, 793, 822, 1008, 1032, 1033, 1034], "650": 405, "6505186632729437": 93, "6507": 1039, "651": 381, "652": 351, "652739": 201, "653": [243, 381, 611, 614, 625, 1022], "654": [136, 1022], "6545": 1044, "656": 370, "6567": 851, "657": [252, 269], "6572": 851, "6573": 1039, "65799352e": 195, "658": 116, "6586": 1038, "6599": 1021, "65e": 198, "66": [43, 235, 315, 372, 407, 424, 460, 532, 632, 712, 783, 784, 795, 883, 891, 982, 1001, 1013], "660": 252, "660797": 252, "661": [312, 1022], "661086": 272, "6624": 1044, "662409": 201, "663": [898, 1009, 1013], "664": [168, 307, 372, 1022], "665": [43, 64, 1022], "6650": 52, "6651": 1038, "666": [173, 407, 846, 991], "6660": 1038, "6666": [738, 1001, 1038], "66666667": [729, 782, 854, 1011], "666667315174": 52, "6667": 1038, "66670169e": 195, "667": [720, 740, 1001], "667219": 146, "668": [215, 275, 1022], "6689": 1040, "669": [282, 1022], "6691": 1038, "6697": 1038, "669930e": 229, "67": [99, 186, 229, 372, 498, 516, 517, 518, 627, 667, 713, 814, 991, 1001, 1015, 1028, 1032], "670": [213, 263], "671": [91, 1013, 1022], "6715": 1021, "67251877": 666, "673": [116, 198, 226, 351, 381, 1022], "67443065": 130, "67451144e": 195, "675": [170, 351], "675318": 87, "676": 669, "6764": 1038, "678": [139, 247, 1022], "678008": 211, "678009": 211, "678010": 211, "678011": 211, "678012": 211, "678013": [211, 229], "678359": 201, "679": [213, 904], "68": [43, 80, 203, 277, 307, 328, 407, 477, 535, 541, 590, 685, 686, 1032], "681": [91, 381], "6817": 1038, "682": 381, "6821": 47, "682880e": 229, "683980e": 229, "684": [103, 111], "6846": 1038, "6848": 1041, "685": [720, 740, 1001], "6852": 269, "6860": 145, "687": [123, 187, 1013, 1022], "6875": 716, "688": 111, "689015": 305, "689143": 305, "689751": 305, "69": [45, 203, 233, 263, 314, 329, 407, 470, 471, 607, 608, 756, 1001, 1011], "690": 213, "6902": 1038, "691": 721, "6913": 1038, "692": 134, "692270e": 229, "692470": 305, "6929": 1021, "692901": 146, "693": 1001, "6931": 868, "69314718": [417, 612, 1011], "695": 267, "69513": 91, "6954": 1038, "69545": 91, "695740e": 229, "696": [277, 1022], "697": 179, "69735": 91, "698": [91, 263], "6984743": 173, "69892343": 215, "699691": 370, "69e": 179, "6d": 47, "6f": [55, 124, 274, 737, 795], "6ppm": 175, "6th": 178, "7": [1, 2, 43, 45, 47, 51, 52, 53, 54, 63, 66, 68, 69, 70, 74, 77, 79, 80, 86, 87, 88, 89, 93, 97, 98, 100, 103, 104, 106, 111, 113, 120, 123, 134, 137, 146, 148, 149, 150, 154, 155, 168, 179, 185, 186, 187, 189, 191, 195, 196, 210, 211, 212, 213, 218, 227, 229, 231, 238, 243, 244, 250, 252, 254, 255, 258, 259, 263, 264, 269, 273, 275, 276, 280, 286, 288, 289, 291, 294, 295, 297, 306, 307, 309, 313, 318, 321, 322, 323, 325, 328, 329, 331, 332, 336, 343, 346, 347, 351, 352, 358, 370, 372, 373, 380, 381, 393, 399, 400, 405, 411, 412, 414, 415, 416, 418, 419, 422, 438, 443, 444, 447, 449, 450, 451, 452, 454, 455, 456, 457, 460, 461, 462, 463, 466, 470, 471, 481, 482, 483, 484, 490, 496, 498, 532, 533, 534, 535, 536, 538, 540, 544, 561, 562, 588, 591, 600, 605, 606, 627, 628, 630, 637, 646, 647, 649, 652, 658, 659, 660, 661, 662, 673, 675, 681, 682, 683, 692, 699, 707, 709, 721, 723, 724, 726, 728, 744, 745, 746, 750, 751, 753, 782, 785, 790, 791, 794, 797, 799, 800, 801, 802, 803, 804, 807, 810, 814, 817, 818, 821, 827, 830, 834, 844, 845, 853, 862, 863, 864, 869, 876, 877, 899, 900, 947, 948, 951, 952, 955, 964, 969, 990, 991, 996, 997, 999, 1001, 1002, 1004, 1005, 1007, 1011, 1015, 1016, 1028, 1030, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1045, 1050], "70": [43, 45, 50, 99, 103, 105, 134, 187, 248, 254, 269, 329, 370, 372, 411, 493, 494, 682, 683, 713, 726, 756, 800, 814, 891, 990, 1011], "700": [83, 263, 320], "7000": 229, "701": 91, "702266": 201, "703": [405, 513], "70359377": 197, "704": 350, "70432034": 115, "7049": 1038, "7049787496083262": 93, "706": [120, 1022], "706026": 201, "707": [179, 242, 244, 880, 892, 1022], "7071": 1040, "70763101": 86, "708": [351, 538, 540, 547, 750], "70814003": 358, "7083": 1001, "708333315174": 52, "7089": 1039, "709": 270, "70x": 1049, "71": [43, 168, 215, 229, 372, 510, 730, 736, 766, 776, 1001, 1028, 1034], "710": 405, "7101": 1038, "712": [195, 1022], "714": 320, "71518937": 384, "7152": 1038, "7154": 1038, "715413": 146, "7159": 1038, "716": 513, "7187": 1038, "718747": 201, "719": [314, 352, 1022], "7194": 1038, "72": [43, 45, 46, 52, 140, 173, 380, 822, 828], "7200": 649, "721": [538, 540, 547], "722128e": 229, "72295655": 115, "723": [91, 244], "723665": 283, "7239": 1038, "7242": 1021, "724702": 272, "7248": 1038, "7256": 635, "726": 1009, "7260": 1038, "7261": 1038, "726573": 186, "72667194": 1002, "727": 187, "727148206404819": 277, "72850319": 1002, "7295": 1038, "7298221281347037": 43, "73": [273, 329, 388, 480, 736, 800, 814, 850, 913, 1011, 1032, 1034], "730": [249, 352, 1022], "7301": 1038, "730119e": 229, "731249e": 229, "7313": 46, "73153": 381, "732": 213, "7321432711315247203224138160467097": 52, "7323": 1038, "7325": 1038, "732913": 283, "733": 289, "7331": 1039, "7332": 908, "735": [79, 1022], "7350": 1038, "7353": 1038, "7356": 1039, "7359": 320, "7365": 1039, "73654189": 52, "737": [244, 524], "7376": 1039, "7382": 1021, "7387": 475, "7388": 1039, "739865e": 229, "739950": 283, "74": [43, 227, 328, 329, 372, 590, 694, 800, 814, 883, 1028], "7411": [468, 473, 1038], "7419": 1038, "743": 267, "74310541": 173, "7436926291700353": 207, "744": [267, 289, 304, 1022], "744029": 283, "744042e": 229, "7441": 1039, "744497e": 229, "74495357": 197, "7459": 1039, "746": 372, "7464": 1039, "746492": 269, "748": [350, 381], "7490": [1038, 1039], "75": [43, 45, 46, 49, 52, 69, 79, 88, 113, 137, 165, 177, 178, 182, 186, 191, 193, 196, 203, 218, 229, 252, 256, 257, 263, 269, 278, 294, 309, 321, 348, 350, 358, 448, 501, 551, 637, 658, 694, 706, 712, 734, 739, 740, 745, 753, 756, 794, 800, 882, 890, 894, 901, 917, 935, 936, 981, 1001, 1003, 1011, 1017, 1019, 1034], "750": [82, 88, 269], "75000": 211, "7501": 1039, "750348": 146, "750389": 201, "7506": 1039, "752": 350, "752470": 283, "752867": 201, "753": 73, "7532": 488, "7533": [420, 474, 1039], "75474165": 1002, "7548": 1039, "7548291": 325, "7553": 1038, "7565": 1039, "756687e": 229, "7567": 1039, "756746e": 229, "7569": 469, "757": [112, 168, 267, 289, 372, 1022], "7573": 1039, "75747153": 215, "7578": [272, 1039], "75788833": 165, "757915": 283, "758": 350, "759": 289, "7593": 1038, "7594": 1038, "75949622": 215, "75th": [248, 882], "76": [43, 47, 191, 211, 329, 350, 358, 372, 381, 777, 781, 864], "760": [43, 149], "7608": 1021, "761": [281, 1022], "76195467e": 195, "7621951219512195": 252, "7632": 1038, "7638": 997, "764": [721, 1001], "7646": 1021, "764779": 201, "765012": 323, "7655": 1039, "765671": 201, "7660": 1038, "7661": 1039, "7668": 1040, "767": [272, 1022], "7674": [524, 1039], "767498": 146, "7676": 1038, "768": [86, 148, 1022], "7680": 1038, "76823": 45, "7685": 1039, "769": [289, 297, 326, 1022], "76995": 370, "77": [43, 45, 47, 79, 168, 191, 278, 329, 369, 372, 534, 707, 736, 775, 822], "77000": 211, "7702": 1039, "770926": 283, "772": [350, 723], "7721": 1039, "7723": 1039, "7724": 1038, "773": [269, 332, 648, 842], "77310": 370, "7732": 1038, "77322639": 115, "7738": 1040, "7739": 1039, "77426368": 51, "775": 57, "7750": 1038, "775047": 676, "775151": 676, "7756": 1038, "77630514": 415, "7768366": 999, "777": 381, "7771": 1039, "77764": 403, "77777215": 115, "7786": 1038, "779": 350, "7794": 1039, "779751": 283, "7798": 908, "7799": 1038, "78": [43, 86, 191, 229, 233, 278, 311, 329, 493, 494, 646, 647, 652, 653, 655, 660, 661, 662, 664, 665, 681, 685, 686, 800, 806, 822, 828, 1001, 1021], "780": 267, "7812": 1039, "781265": [370, 497], "7814": 1039, "7816": 52, "7819": [407, 1039], "7823": [1039, 1040], "7825": 1039, "7825594": 51, "7826": 372, "782755": 62, "7831": 350, "783149": 103, "7833": 474, "783392": 269, "7838": 1039, "784": 306, "7840": 87, "7849": 1039, "785063": 103, "78571427112143152472031331383346104": 52, "786": [86, 103], "786015": 103, "7863": 1039, "786432": 86, "78681467": 86, "7872": 1039, "788": [306, 1022], "7880": 1039, "7885988040212892": 319, "7887550": 52, "788808": 323, "789": [164, 414], "7894": [898, 1013], "79": [43, 45, 66, 68, 111, 112, 118, 123, 168, 191, 307, 329, 372, 380, 409, 473, 524, 597, 694, 822, 842, 1032, 1034], "790": [43, 102], "7906": [622, 649], "79064206": 610, "79084103": 358, "791": 179, "7914": 1039, "791667315161908911936472223112": 52, "79269019073225": 293, "7927845601690917": 316, "7929": [351, 1039], "7943": 1042, "7944": 1039, "7946": 1038, "795": [200, 648, 1022], "7954": 1039, "796": 146, "7970": 1039, "7971": 663, "7972": 554, "79769376": 115, "798": [103, 414], "7983": 1039, "798301": 252, "7986": 1039, "7986499491396734": 170, "798982054": 1001, "799": [179, 351], "7990": 1039, "7998": 1039, "7_qbz5n2kfra8p0": 393, "7x": 325, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 70, 72, 78, 79, 83, 86, 88, 93, 95, 97, 98, 102, 104, 106, 107, 112, 115, 118, 120, 121, 123, 124, 125, 126, 128, 130, 134, 137, 139, 140, 143, 145, 146, 148, 152, 155, 156, 159, 167, 168, 171, 173, 175, 176, 178, 179, 182, 185, 186, 187, 189, 191, 193, 194, 198, 200, 203, 204, 206, 211, 212, 215, 219, 221, 227, 229, 231, 232, 233, 235, 236, 239, 243, 244, 246, 250, 251, 252, 254, 255, 256, 258, 259, 260, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 276, 279, 280, 286, 288, 291, 293, 297, 301, 304, 306, 307, 309, 311, 312, 313, 314, 315, 318, 323, 328, 329, 330, 332, 333, 336, 339, 343, 344, 345, 346, 347, 350, 351, 352, 356, 358, 363, 369, 370, 371, 372, 373, 375, 380, 381, 393, 401, 405, 407, 411, 412, 414, 415, 416, 418, 420, 438, 441, 442, 443, 446, 448, 449, 451, 454, 455, 456, 461, 462, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 486, 489, 496, 498, 502, 503, 514, 516, 531, 534, 538, 540, 543, 545, 547, 549, 550, 553, 555, 556, 565, 570, 582, 588, 589, 590, 591, 604, 605, 628, 629, 636, 637, 648, 658, 670, 676, 679, 689, 692, 693, 694, 695, 699, 702, 706, 707, 709, 710, 715, 721, 727, 728, 729, 741, 742, 745, 746, 750, 751, 753, 778, 782, 783, 785, 788, 789, 790, 791, 795, 797, 799, 801, 802, 807, 810, 817, 818, 821, 822, 823, 828, 830, 831, 833, 842, 844, 845, 851, 861, 862, 863, 869, 876, 883, 885, 901, 906, 909, 928, 930, 931, 946, 947, 948, 952, 969, 975, 976, 977, 978, 979, 980, 981, 990, 991, 997, 998, 999, 1001, 1004, 1009, 1011, 1015, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1039, 1040, 1045, 1046, 1048], "80": [43, 45, 50, 64, 80, 100, 112, 154, 161, 165, 176, 187, 193, 246, 311, 315, 328, 342, 344, 350, 356, 358, 370, 372, 375, 405, 411, 416, 418, 443, 478, 510, 541, 713, 800, 814, 822, 885, 898, 917, 990, 996, 997, 1001, 1008, 1014, 1017], "800": [83, 321, 370, 584, 692], "8000": [229, 272, 273], "800000011920929": 357, "8000184677460305": 316, "8002": 1039, "8003": 1040, "8005": 1039, "8006": 1039, "8010": 1039, "801770e": 229, "802": [46, 168, 372], "8022": [46, 472, 1041], "802601": 201, "8028": 1039, "803483": 146, "803882e": 229, "8040": 1038, "804414": [370, 497], "805": 213, "8053": 1039, "8059798": 197, "806": 649, "8061": 1039, "8065": 1039, "8066": 1040, "8068": 1039, "807": [95, 267, 269, 1022], "8075": 1040, "8086": [619, 1039], "8087": 1039, "8093": 1039, "8094": 1039, "80956739": 1002, "80_000": 139, "81": [43, 83, 252, 328, 329, 407, 699, 761, 788, 800, 814, 831, 1001, 1002, 1004, 1011], "810": [188, 829], "8100": 1021, "8102": 1040, "810596": 370, "8117": 1039, "8120": 1039, "8125": 721, "812526": 201, "8129": 1040, "8133333333333334": 300, "81355169": 415, "8137": 1039, "8139": 1039, "814": 188, "815476315189119122164721021826110": 52, "8157": 1021, "8159": 1039, "816": [270, 470, 471], "8160": 1039, "8174": 1039, "817724": 201, "8181": 1039, "819": 415, "8190": 1040, "81940995": 415, "8198": 1039, "82": [43, 66, 86, 91, 142, 165, 214, 300, 328, 788, 800, 814, 947, 1001, 1004, 1032], "820": [43, 52, 844, 845], "820705": 201, "821": [104, 1022], "8216": 1041, "822": 790, "822097": 186, "8224": 1039, "8225220806196525": 207, "823": 289, "8243": 1021, "825": 750, "8251": 1039, "8253": 227, "8259": 1039, "827917": 146, "828": 289, "8282": 1039, "829429": 259, "8295": 1039, "83": [45, 66, 70, 74, 328, 372, 694, 707, 786, 920, 996, 1001, 1035], "830000": 305, "8306": 1039, "8316": 1039, "832": [188, 414, 555, 556], "83236428": 415, "83281226": [844, 845], "8333": 498, "83333": 764, "833333": 186, "8335": 1039, "834": 332, "834310": 201, "8344": 1039, "8345": 597, "8353": 46, "8354": [622, 1039], "83548752": 610, "8355": 1038, "8361": 1040, "836224": 62, "8363": 1039, "8370": 1021, "8377": 1039, "838": [217, 355, 1022], "83816048": 646, "83822343": 999, "83833": 381, "8387": 835, "839": 680, "839mb": 350, "84": [43, 45, 102, 165, 203, 229, 311, 328, 358, 372, 414, 415, 788, 814, 1001, 1011], "840": [305, 381, 1022], "84000": 211, "840000": 305, "8407": 102, "84077985": 197, "841": 103, "84127814": 666, "84253": 1002, "844": [414, 555, 556], "8446": 1039, "8449": 1039, "845": 170, "847222222222214": 207, "8473": 415, "8478": 1041, "8480": 1021, "8481": 1039, "8484": 1040, "848743": 62, "849835": 87, "85": [45, 55, 68, 83, 88, 102, 123, 165, 226, 229, 233, 248, 280, 307, 329, 358, 414, 438, 498, 500, 555, 556, 597, 652, 658, 745, 753, 788, 800, 828, 1001, 1002, 1032], "850000": 305, "850031": 201, "8508": 1041, "851": 269, "8512": 1039, "8513": 619, "851348": 62, "8515": [415, 1039], "85151335": 415, "851792": 62, "85253229": 90, "852774": 146, "853174": 62, "853846": 201, "854": 267, "85418642": 358, "8549": 1039, "855": 47, "8554": 1040, "855465": 305, "857": [270, 351], "857400": 62, "858486250088675": 316, "85857475": 130, "8586": 1039, "859": [339, 1022], "859007": 62, "8591": 1039, "86": [52, 68, 102, 165, 203, 248, 311, 328, 329, 406, 788, 912, 1001], "860": [74, 1022], "860000": 305, "861": [168, 372, 788, 789, 1001], "861053": 62, "861106": 62, "8614": 1021, "861533": 62, "8617": 1040, "861868": 62, "8626621": 325, "8628": 635, "8640": 187, "865": [126, 1022], "865400": 62, "866": 1009, "866161": 62, "866571": 62, "867": 106, "8672": 1039, "8676": [620, 1039], "8678": 623, "868": [146, 164, 218, 1022], "868443": 50, "8698": 1039, "87": [45, 68, 102, 179, 263, 267, 329, 597, 667, 777, 788, 800, 822, 880, 892, 1001], "870": [168, 372], "871": [73, 111, 112, 409, 473], "871277": 62, "871965": 62, "872": [73, 1009], "8720": [556, 1040], "872186": 62, "873": [168, 372], "873724": 62, "87382323": 662, "874": [105, 788, 789, 1001], "87421f": 118, "874771": 146, "875": [86, 171, 669], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 173, "8768": 1039, "8769": 1041, "877": [47, 267], "877206": 267, "8773": 1041, "877981": 62, "878": 47, "878051": 201, "878964": 812, "879": [322, 1022], "87mb": 350, "88": [43, 45, 68, 203, 215, 248, 268, 307, 326, 328, 329, 354, 370, 372, 375, 406, 409, 472, 646, 647, 652, 660, 661, 662, 681, 864, 947, 1032], "880": 43, "880191": 201, "880298": 201, "88089948": 415, "88096009": 130, "882": 269, "88213": 370, "882561": 269, "883": 82, "883065": 62, "8833": 498, "8835": 1039, "884": [282, 289], "8845": 1039, "885": [47, 168, 332, 372], "8854": 1039, "886": [298, 1022], "8874": 1039, "8878": 835, "8880": 620, "8881": 623, "889": [267, 436], "88978285": 1002, "89": [43, 47, 68, 175, 203, 328, 329, 983, 996, 1001, 1011, 1032, 1035, 1043], "890": 267, "891": 47, "8922": 1039, "893": [145, 1022], "893055": 201, "8931": 1039, "8936": 1039, "894264": 252, "8947": 914, "8948018": 52, "89483932": 999, "8948621": 1002, "895": [201, 1022], "896": 648, "8963": 272, "8965": 414, "8973": 1039, "89856": 812, "899": [68, 267], "8992": 1039, "8995": 1039, "8pt": 1011, "8x8": [68, 203, 242, 298, 307, 372, 502], "9": [43, 46, 48, 51, 52, 53, 61, 63, 64, 67, 68, 70, 77, 79, 83, 88, 91, 95, 97, 106, 113, 115, 142, 143, 145, 146, 147, 152, 154, 160, 161, 168, 173, 177, 182, 185, 186, 187, 189, 195, 196, 203, 211, 224, 225, 228, 229, 231, 234, 242, 243, 252, 254, 255, 256, 257, 262, 263, 267, 272, 276, 278, 282, 288, 291, 293, 294, 297, 298, 299, 304, 305, 307, 309, 311, 312, 313, 315, 316, 318, 323, 324, 326, 328, 329, 331, 332, 333, 339, 343, 348, 350, 358, 372, 373, 381, 388, 393, 399, 400, 405, 406, 408, 409, 411, 414, 415, 438, 442, 449, 456, 462, 481, 482, 483, 484, 489, 496, 498, 516, 518, 520, 527, 534, 538, 539, 540, 547, 560, 567, 570, 583, 591, 604, 605, 607, 608, 627, 630, 634, 637, 639, 646, 647, 652, 658, 660, 661, 662, 681, 682, 683, 687, 692, 699, 709, 723, 726, 741, 748, 769, 778, 779, 780, 797, 799, 801, 803, 804, 818, 821, 822, 828, 830, 833, 841, 842, 846, 847, 852, 855, 861, 862, 870, 876, 879, 947, 948, 952, 973, 990, 996, 997, 1001, 1005, 1011, 1015, 1016, 1028, 1030, 1033, 1034, 1035, 1037, 1046, 1048], "90": [45, 47, 49, 52, 54, 68, 106, 129, 130, 145, 146, 147, 149, 165, 175, 189, 194, 203, 210, 213, 218, 229, 254, 278, 280, 311, 315, 324, 328, 329, 358, 362, 375, 381, 411, 563, 781, 800, 828, 833, 885, 996, 1001, 1028, 1047, 1048], "900": [47, 83, 106, 107, 333, 1022], "9000": 229, "900000e": 229, "901": [280, 1022], "9010": 1038, "9012": 1040, "9015": [663, 1040], "9019": 1039, "9022": 1039, "9024": 1039, "9026666666666666": 146, "903": 47, "904": [187, 267, 288, 408, 1022], "9041": 1040, "9043": 1040, "9044": [269, 1039], "90453403": 465, "904556e": 229, "904558e": 229, "904747e": 229, "904751e": 229, "905": 267, "905206": 87, "9067": 1039, "9069": 1041, "907": [89, 1022], "9078": 1039, "908": 1001, "90809432": 130, "9085": 1040, "9087": 1046, "90885631": 86, "909": 47, "909293": 305, "909909": 146, "91": [45, 68, 84, 175, 307, 328, 329, 414, 996], "910": 43, "9100": 1039, "9101": 1040, "9105": 1039, "9108": 1039, "912": 73, "912632": 305, "913": [414, 559], "914370e": 229, "914387e": 229, "9144057": 52, "9145": 1039, "914538e": 229, "914573e": 229, "9147": 1040, "9149": 1038, "915": [47, 141, 1022], "9151": 1040, "9157": 1040, "916": 82, "91629073": 590, "916555e": 229, "9167": 323, "917": [82, 357], "917281": 146, "9173": 1021, "917618e": 229, "919": [263, 347, 1022], "92": [52, 68, 83, 123, 165, 191, 267, 307, 328, 329, 339, 370, 372, 538, 540, 547, 562, 597, 696, 800, 814, 822, 996], "9206": 1039, "9219": 1039, "9221": 649, "9222": 1040, "9226260871125187": 277, "923223": 812, "92329566": 130, "9234": 1040, "9239": 1039, "924": 47, "92461872": 128, "925": [242, 1001], "9250": 1042, "92529176": 1002, "9257": 1040, "9259": 1039, "9266666666666666": 142, "927": 436, "9274": 1042, "9277": 1039, "9278": 1039, "928": [112, 320, 436, 1022], "9284": 1039, "928571": 229, "9287139838190132": 325, "9288": 1042, "9289": 1039, "93": [45, 68, 168, 211, 252, 267, 329, 350, 372, 646, 647, 652, 660, 661, 662, 681, 777, 788, 800, 822, 828, 912, 996, 1001], "9300": 269, "930000": 305, "9302": 1039, "9304": 1040, "932": 47, "9326": 1021, "93271427": 173, "933": [47, 106, 411], "933197": 252, "933253": 146, "9333": 411, "933333": [160, 853], "935": 1039, "9354": 1040, "936": [47, 78, 436, 1001, 1022], "936480": 62, "9372": 1040, "937443": 62, "937532": 62, "937597": 62, "9378": 1040, "938": [47, 785, 1001], "938613": 62, "939": 668, "9399": 1040, "93fletcher": 997, "93goldfarb": 997, "93lindenstrauss_lemma": 898, "93shanno_algorithm": 997, "94": [43, 68, 70, 87, 122, 142, 210, 246, 311, 328, 329, 406, 414, 663, 788, 822, 996, 1001, 1002, 1011, 1032], "940": 43, "9400": 269, "940000": 305, "940184": 146, "940201": 62, "940374": 62, "9403917": 115, "941": 47, "94114649": [844, 845], "9416": 52, "9417": 671, "9431": 835, "944": 47, "945": [286, 1022], "9456": 1040, "94592424": 662, "946": 112, "94731329": 667, "9473684210526315": 318, "947958": 990, "948": [785, 1001], "9484": 1040, "949": 47, "9490": 372, "9492": 1040, "9497": 1040, "9499": 638, "95": [45, 52, 54, 68, 79, 85, 90, 100, 142, 146, 149, 177, 186, 193, 211, 213, 218, 229, 256, 257, 260, 269, 270, 294, 302, 311, 315, 322, 329, 339, 358, 414, 527, 632, 633, 636, 647, 661, 748, 822, 901, 997, 1001, 1002, 1014, 1035], "950": 47, "950000047683716": 357, "9502547": 197, "9507": 1039, "9515": 1040, "951751e": 229, "951958": 990, "952": [47, 82, 227], "9521": 1040, "952289": 201, "9524": 1040, "953": [47, 82], "953061": 306, "95373": 370, "954": [72, 880, 892, 1022], "95433992": 115, "955": [289, 411, 654], "9558": 1039, "955989": 990, "956": [47, 157, 1022], "956038": 305, "9565": 372, "9569": 1040, "957": [47, 57, 314, 728, 1001, 1022], "9579": 1040, "958": 47, "9583": 406, "9584": [627, 1039], "959": [880, 892], "9593": 1039, "9595": 674, "9597": 1042, "9599": 1040, "95th": [52, 146, 149, 748], "96": [43, 52, 68, 95, 177, 238, 248, 267, 307, 311, 314, 315, 328, 329, 372, 411, 553, 682, 683, 711, 822, 990, 996, 1001, 1011, 1032], "9600": 1039, "9604": 1039, "961": 861, "961009": 990, "961111": 160, "9612": 1040, "961904": 853, "96190476": 1004, "962": 47, "96228895": 130, "9623": 1039, "9630": 675, "9641": 1039, "9647": 1040, "965": [47, 1001], "9655": 1040, "9656": 1040, "966": 45, "9666": 543, "966981": 201, "967": [106, 1001, 1005], "9677": 1039, "968": [175, 185, 267], "9681": 1040, "9686": 1040, "969": 369, "9693": 1039, "9694898472080092": 324, "9697": 1039, "97": [68, 129, 168, 189, 246, 260, 329, 339, 372, 381, 388, 411, 646, 647, 652, 658, 660, 661, 662, 681, 682, 683, 996, 1002, 1011, 1032], "9701": 1040, "9707": 1040, "9711": 1039, "9717": 1039, "9723": 1040, "9726": 1040, "973": [351, 411], "9731": 1040, "9733": [620, 623], "973554": 323, "973770": 201, "974": 357, "974e": 415, "975": [168, 185, 313, 1016, 1022], "9750": 1039, "97545464": 252, "975455": 252, "9759": 47, "976": 277, "976158": 370, "977": [43, 411], "9771": 554, "9772": 1040, "9775": 1040, "977890": 259, "9781605585161": 407, "978444": 305, "9786": 1040, "9788": 1039, "979": [171, 1022], "98": [68, 77, 79, 87, 95, 97, 113, 123, 168, 238, 267, 304, 311, 329, 372, 411, 414, 659, 839, 895, 996, 1001, 1003], "980000": 305, "9802": 1039, "981": [168, 372, 1001], "9815": 1039, "9816": 1040, "9821": 850, "983": 728, "9830": 1039, "9832": 1040, "9833": 498, "98350372e": 195, "983667": 990, "9837": 1040, "9843": 1045, "9847": 1039, "984ea3": [79, 95], "9850": 211, "9851": 1040, "9858": 1040, "98633022": 130, "986429": 306, "9865": 1039, "9866": [610, 619, 622], "9866666666666667": 142, "9868": [898, 1013], "986989": 272, "987": [277, 351], "9875": 1040, "98809919e": 195, "9884": 679, "9885": 671, "9886": 1040, "989341": 201, "98mb": 350, "99": [45, 52, 62, 68, 79, 84, 95, 120, 229, 238, 242, 248, 254, 256, 267, 270, 309, 329, 363, 368, 372, 411, 414, 415, 492, 647, 661, 671, 682, 683, 788, 822, 851, 969, 996, 1001, 1011, 1015, 1027, 1034], "990": [315, 669, 1001, 1022], "9900": 229, "9907": 1041, "9908": 1040, "991": [277, 1001], "991584977345022": 170, "991653": 305, "9922": 1039, "9924": 541, "99244": 541, "992766": 305, "993": 277, "9933333333333333": 142, "9935": 835, "993879": 305, "9939": 1040, "993919": 50, "994": 289, "9945": 1039, "9951": 1042, "9955675213675214": 318, "9969977": 52, "997": [46, 75, 168], "9978": 1045, "9979": 43, "9979281": 52, "998": [168, 1005], "9980": [43, 1040], "9981": 43, "998142": 52, "998273": 263, "9987": 639, "99891212e": 195, "999": [229, 263, 269, 414, 717, 861, 862], "9990": 229, "9991": [664, 665, 1040], "99918858": 130, "9993": [43, 653, 655, 1040], "9994": 663, "9995": 43, "9996": 651, "999791942438998": 319, "9998": [50, 302], "9999": [50, 229, 302, 331, 498, 627, 1040], "99999": 331, "999999": [79, 95], "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 82, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 107, 109, 112, 116, 118, 121, 122, 123, 135, 136, 141, 143, 153, 157, 159, 160, 161, 165, 167, 170, 173, 175, 177, 178, 179, 183, 186, 187, 197, 199, 212, 215, 221, 225, 226, 229, 232, 245, 248, 257, 263, 269, 270, 272, 276, 284, 286, 304, 309, 311, 314, 318, 320, 323, 329, 330, 331, 333, 339, 343, 344, 350, 351, 352, 357, 358, 362, 364, 369, 370, 372, 373, 375, 377, 378, 379, 380, 383, 387, 388, 389, 390, 392, 398, 402, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 489, 490, 492, 494, 497, 500, 501, 502, 503, 504, 508, 510, 511, 512, 513, 514, 520, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 617, 620, 627, 628, 629, 630, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 710, 711, 712, 716, 717, 719, 721, 722, 723, 724, 725, 726, 731, 736, 737, 740, 742, 743, 744, 747, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 764, 766, 767, 774, 775, 776, 777, 778, 781, 788, 790, 791, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 946, 947, 948, 956, 957, 959, 960, 985, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1027, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "AND": 735, "AS": 419, "AT": [2, 370, 495], "And": [52, 183, 230, 231, 236, 245, 269, 350, 383, 401, 407, 411, 415, 530, 588, 589, 591, 692, 693, 997, 1001, 1022, 1039], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 86, 88, 90, 91, 99, 113, 116, 125, 134, 135, 141, 143, 144, 145, 147, 149, 153, 163, 166, 170, 175, 176, 182, 186, 188, 189, 191, 193, 196, 197, 201, 203, 211, 215, 219, 229, 236, 245, 257, 263, 264, 266, 267, 269, 270, 272, 288, 294, 310, 321, 326, 331, 339, 343, 351, 352, 354, 356, 358, 362, 363, 370, 374, 375, 377, 380, 387, 388, 389, 401, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 445, 493, 554, 562, 566, 619, 632, 655, 656, 672, 674, 687, 735, 758, 764, 846, 847, 848, 850, 852, 883, 990, 995, 997, 998, 1000, 1001, 1002, 1004, 1008, 1011, 1015, 1016, 1017, 1020, 1021, 1025, 1032, 1038, 1043, 1048, 1050], "At": [52, 107, 134, 216, 245, 263, 281, 286, 288, 328, 331, 362, 363, 379, 390, 398, 403, 410, 414, 436, 439, 464, 588, 589, 591, 602, 832, 834, 871, 964, 990, 997, 1000, 1002, 1006, 1015, 1025], "Be": [165, 179, 350, 375, 409, 567, 568, 648, 654, 655, 656, 658, 659, 669, 680, 704, 818, 819, 879, 1011, 1029, 1033], "Being": [375, 389, 390, 997, 1004], "But": [43, 48, 86, 185, 212, 213, 269, 289, 309, 375, 387, 407, 410, 413, 414, 461, 746, 912, 913, 990, 1001, 1016, 1021], "By": [57, 120, 149, 150, 151, 193, 215, 245, 263, 278, 286, 309, 318, 324, 325, 343, 350, 363, 375, 377, 381, 382, 389, 398, 406, 407, 408, 410, 411, 412, 413, 414, 416, 437, 440, 444, 445, 449, 463, 466, 467, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 524, 549, 550, 557, 558, 559, 560, 564, 565, 585, 586, 588, 589, 591, 606, 609, 632, 633, 671, 673, 675, 677, 690, 692, 694, 697, 699, 700, 702, 703, 718, 729, 730, 734, 738, 783, 784, 787, 794, 796, 803, 804, 850, 864, 865, 877, 878, 880, 882, 892, 894, 902, 907, 908, 912, 913, 914, 915, 930, 931, 990, 991, 993, 997, 1001, 1008, 1009, 1011, 1013, 1017, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1049, 1050], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 80, 82, 86, 88, 90, 91, 93, 100, 105, 111, 116, 121, 137, 139, 146, 147, 149, 150, 152, 164, 165, 168, 170, 172, 177, 181, 182, 186, 187, 197, 199, 201, 204, 208, 211, 212, 215, 216, 219, 228, 229, 231, 233, 236, 238, 239, 241, 242, 243, 245, 252, 259, 263, 266, 269, 270, 276, 283, 288, 289, 299, 304, 306, 307, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 333, 339, 341, 343, 346, 350, 351, 352, 354, 355, 357, 358, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 398, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 423, 430, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 470, 471, 473, 481, 482, 483, 484, 488, 494, 496, 498, 503, 514, 515, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 597, 602, 607, 608, 609, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 692, 693, 695, 701, 704, 706, 707, 729, 730, 738, 741, 763, 769, 778, 783, 784, 787, 788, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 936, 953, 963, 984, 990, 991, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1019, 1024, 1025, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "If": [0, 43, 50, 52, 64, 68, 77, 82, 88, 103, 113, 123, 132, 146, 149, 154, 179, 182, 186, 195, 211, 226, 228, 229, 245, 248, 252, 263, 269, 276, 283, 294, 302, 309, 314, 315, 339, 343, 346, 347, 350, 351, 352, 357, 358, 362, 363, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 393, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 428, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 515, 519, 522, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 711, 712, 713, 714, 716, 717, 718, 722, 726, 727, 728, 729, 730, 731, 732, 736, 738, 741, 745, 746, 748, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 812, 814, 817, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 937, 940, 946, 948, 950, 952, 957, 959, 963, 966, 969, 971, 974, 975, 981, 984, 985, 986, 987, 989, 990, 991, 993, 995, 996, 997, 998, 999, 1001, 1004, 1005, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1048, 1050], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 82, 86, 88, 90, 91, 93, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 116, 120, 122, 125, 126, 127, 128, 132, 134, 137, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 154, 157, 164, 165, 167, 168, 170, 174, 175, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 207, 211, 212, 213, 214, 215, 216, 219, 228, 229, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 257, 259, 262, 263, 266, 267, 269, 270, 271, 272, 274, 275, 278, 279, 281, 282, 283, 284, 286, 289, 292, 295, 296, 298, 307, 309, 310, 311, 314, 315, 316, 318, 319, 320, 322, 323, 325, 326, 330, 332, 339, 343, 346, 350, 351, 352, 354, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 387, 388, 389, 390, 392, 393, 394, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 436, 439, 440, 441, 442, 443, 446, 447, 448, 451, 461, 462, 463, 468, 471, 474, 493, 496, 503, 508, 509, 511, 523, 534, 536, 538, 540, 541, 542, 544, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 591, 602, 606, 609, 610, 611, 630, 632, 633, 634, 636, 643, 644, 645, 647, 648, 649, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 669, 674, 675, 676, 679, 680, 684, 685, 686, 696, 699, 703, 712, 718, 720, 726, 728, 729, 734, 735, 738, 740, 742, 754, 756, 757, 781, 783, 785, 788, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 869, 871, 877, 878, 882, 883, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 909, 912, 914, 919, 929, 931, 948, 989, 990, 991, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1029, 1032, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "Ines": 1049, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 86, 88, 91, 104, 109, 111, 113, 120, 123, 124, 126, 129, 134, 137, 139, 140, 142, 144, 146, 154, 168, 175, 176, 177, 181, 182, 186, 187, 188, 194, 197, 199, 201, 211, 215, 225, 228, 229, 231, 232, 238, 243, 245, 248, 263, 264, 265, 267, 269, 270, 272, 275, 276, 283, 286, 289, 295, 296, 297, 299, 300, 302, 309, 313, 314, 316, 318, 324, 326, 335, 339, 343, 346, 350, 351, 352, 358, 362, 363, 364, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 383, 384, 387, 388, 389, 390, 393, 398, 401, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 436, 437, 440, 441, 442, 443, 444, 446, 447, 448, 451, 458, 461, 463, 466, 467, 468, 473, 477, 484, 486, 496, 508, 515, 524, 533, 535, 536, 538, 540, 541, 549, 550, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 589, 596, 602, 606, 607, 608, 611, 614, 615, 619, 620, 622, 623, 627, 630, 631, 632, 633, 641, 642, 643, 646, 647, 650, 652, 653, 654, 655, 658, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 679, 681, 682, 683, 684, 687, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 704, 708, 709, 710, 716, 723, 734, 742, 743, 747, 758, 759, 762, 765, 781, 783, 788, 799, 800, 803, 804, 806, 812, 813, 814, 822, 823, 825, 828, 831, 840, 841, 846, 847, 848, 850, 853, 854, 855, 856, 860, 861, 862, 866, 867, 868, 872, 873, 874, 878, 881, 883, 893, 896, 897, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 921, 925, 934, 948, 957, 971, 974, 976, 977, 978, 979, 980, 981, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1020, 1025, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "Its": [109, 267, 271, 371, 389, 412, 417, 538, 921, 996, 997, 1006, 1009, 1015, 1020, 1025, 1035, 1049], "NOT": [245, 295, 372, 378, 563, 810, 844, 845], "Nearness": 627, "No": [61, 148, 197, 217, 219, 239, 245, 263, 329, 346, 372, 383, 393, 401, 407, 473, 559, 560, 590, 591, 635, 645, 664, 676, 678, 685, 686, 797, 997, 1049], "Not": [88, 159, 187, 362, 387, 401, 407, 425, 426, 429, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 468, 469, 470, 471, 472, 473, 474, 475, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 627, 628, 629, 630, 677, 688, 689, 690, 691, 693, 794, 797, 798, 800, 803, 804, 814, 841, 844, 845, 848, 849, 850, 852, 856, 868, 876, 879, 880, 882, 885, 896, 897, 908, 1001, 1007, 1020, 1041], "OF": 372, "ON": 323, "ONE": [369, 607, 608], "OR": [309, 407, 418, 443, 1043], "Of": [48, 62, 64, 181, 283, 362, 377, 407, 415, 991], "On": [43, 51, 52, 55, 63, 100, 103, 104, 115, 116, 125, 134, 137, 139, 141, 146, 150, 151, 154, 157, 163, 165, 174, 175, 186, 187, 188, 195, 199, 201, 213, 215, 239, 240, 241, 242, 244, 245, 248, 249, 250, 251, 252, 254, 256, 259, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 276, 281, 283, 307, 309, 311, 313, 314, 315, 319, 320, 322, 323, 325, 330, 339, 346, 356, 357, 362, 373, 375, 376, 377, 379, 387, 389, 403, 405, 407, 411, 412, 414, 416, 417, 643, 656, 691, 735, 761, 869, 885, 990, 994, 997, 1000, 1001, 1003, 1007, 1009, 1014, 1016], "One": [2, 43, 48, 51, 61, 66, 82, 88, 125, 127, 143, 146, 149, 150, 183, 186, 189, 192, 202, 215, 226, 238, 249, 259, 263, 269, 276, 279, 286, 295, 298, 310, 325, 334, 336, 351, 357, 362, 372, 375, 388, 389, 401, 406, 407, 410, 412, 413, 414, 415, 416, 418, 443, 448, 471, 473, 477, 512, 566, 631, 639, 658, 666, 668, 673, 675, 676, 677, 788, 807, 808, 832, 833, 834, 865, 866, 877, 908, 963, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1016, 1022, 1023, 1027, 1036, 1038, 1045, 1047], "Or": [350, 357, 411, 412, 877, 1001, 1007, 1015], "Such": [53, 150, 170, 175, 185, 193, 197, 201, 212, 263, 272, 350, 389, 390, 401, 411, 412, 414, 555, 556, 656, 991, 1001, 1004, 1011, 1017, 1042, 1047, 1049], "THE": 372, "That": [52, 64, 120, 134, 149, 168, 186, 201, 238, 269, 273, 351, 352, 363, 369, 383, 389, 406, 411, 416, 417, 442, 445, 446, 557, 564, 593, 818, 912, 913, 990, 998, 999, 1007, 1017, 1041, 1042], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 284, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 388, 389, 390, 392, 393, 395, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 427, 429, 430, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 752, 753, 754, 755, 756, 757, 758, 759, 762, 764, 765, 766, 767, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 942, 943, 944, 945, 946, 947, 948, 950, 951, 953, 956, 957, 960, 963, 965, 966, 967, 969, 970, 971, 974, 982, 983, 984, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "Their": [186, 370, 372, 390, 407, 644, 1032], "Then": [103, 135, 139, 149, 154, 157, 165, 186, 191, 197, 199, 208, 211, 215, 235, 239, 245, 251, 263, 271, 272, 286, 350, 357, 369, 379, 381, 383, 393, 394, 404, 407, 410, 412, 415, 416, 570, 593, 719, 756, 800, 814, 904, 905, 991, 1000, 1001, 1007, 1016, 1017, 1041], "There": [0, 74, 80, 140, 170, 204, 229, 235, 245, 260, 264, 266, 269, 288, 350, 368, 370, 372, 375, 376, 377, 380, 387, 389, 390, 393, 404, 407, 412, 414, 415, 416, 445, 451, 461, 534, 553, 554, 559, 560, 588, 589, 591, 606, 645, 991, 997, 998, 999, 1000, 1001, 1004, 1008, 1011, 1015, 1016, 1017, 1019, 1024, 1032, 1040], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 84, 120, 122, 139, 142, 183, 187, 201, 204, 211, 212, 213, 239, 263, 286, 289, 293, 307, 309, 316, 317, 322, 329, 331, 358, 362, 363, 368, 371, 372, 375, 377, 379, 382, 384, 387, 389, 393, 398, 401, 404, 405, 406, 407, 410, 412, 414, 415, 416, 417, 441, 445, 447, 498, 508, 509, 515, 538, 567, 568, 602, 603, 668, 676, 677, 699, 706, 733, 778, 794, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 849, 850, 869, 923, 990, 992, 995, 997, 998, 1001, 1002, 1012, 1014, 1016, 1020, 1032, 1038, 1040, 1041, 1042, 1045, 1049], "To": [1, 43, 47, 63, 64, 68, 80, 88, 90, 109, 111, 113, 116, 125, 134, 143, 146, 147, 156, 159, 168, 175, 176, 179, 181, 182, 185, 186, 191, 195, 197, 199, 211, 212, 213, 215, 219, 229, 242, 243, 245, 248, 250, 252, 259, 263, 264, 266, 267, 269, 271, 272, 274, 276, 282, 283, 286, 288, 306, 309, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 348, 351, 354, 358, 362, 363, 368, 369, 373, 375, 376, 377, 379, 380, 381, 383, 387, 389, 390, 393, 401, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 445, 447, 448, 449, 460, 463, 466, 492, 496, 502, 503, 507, 508, 509, 531, 537, 538, 539, 541, 543, 544, 545, 546, 557, 558, 559, 560, 564, 565, 569, 597, 611, 627, 632, 646, 647, 652, 653, 656, 658, 659, 660, 661, 662, 663, 684, 700, 712, 728, 763, 785, 793, 803, 804, 826, 833, 864, 875, 880, 894, 895, 904, 905, 909, 912, 913, 914, 915, 938, 948, 987, 990, 991, 993, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1015, 1016, 1017, 1025, 1032, 1035, 1037, 1038, 1039, 1041, 1043], "Will": [375, 497, 534, 627, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 707, 714, 788, 869, 873, 883, 884, 1035, 1036, 1038, 1040, 1050], "Willing": [1038, 1039], "With": [61, 70, 79, 100, 107, 125, 126, 149, 151, 164, 183, 187, 211, 213, 237, 239, 244, 246, 252, 269, 293, 362, 370, 373, 375, 377, 389, 398, 407, 408, 411, 414, 416, 436, 438, 501, 541, 582, 632, 633, 658, 862, 865, 867, 878, 884, 885, 911, 913, 994, 997, 998, 1001, 1002, 1004, 1005, 1008, 1015, 1017, 1022, 1029, 1035, 1039, 1040, 1042, 1044, 1046], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 83, 86, 88, 91, 96, 100, 102, 113, 118, 120, 125, 126, 127, 129, 137, 138, 139, 149, 163, 170, 175, 176, 177, 185, 186, 187, 189, 191, 193, 197, 199, 200, 201, 204, 209, 211, 213, 215, 224, 225, 228, 232, 235, 239, 244, 248, 252, 263, 264, 269, 271, 272, 273, 275, 276, 278, 282, 283, 286, 292, 297, 300, 307, 311, 314, 315, 316, 319, 322, 323, 324, 326, 329, 330, 338, 343, 346, 350, 352, 355, 377, 381, 389, 412, 414, 415, 419, 445, 477, 532, 533, 534, 535, 536, 538, 539, 540, 543, 545, 546, 547, 566, 597, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 688, 689, 690, 691, 693, 695, 696, 698, 700, 710, 764, 800, 806, 814, 823, 848, 856, 877, 878, 885, 991, 997, 998, 1001, 1003, 1004, 1005, 1008, 1009, 1011, 1016, 1017, 1039], "_0": [210, 685, 997, 1001, 1016], "_1": [321, 343, 409, 412, 415, 531, 537, 538, 540, 545, 546, 547, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 766, 997, 999, 1001, 1016], "_11": 652, "_2": [112, 175, 343, 412, 415, 531, 537, 545, 546, 646, 652, 997, 1005, 1015, 1016], "_21": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "__": [105, 270, 389, 408, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 1040, 1041], "______________________________________________________________________": 329, "________________________________________________________________________________": [50, 87, 350], "__________________________________________________________________________________": 91, "________________________________________________________ward_tre": 87, "_____________________________________________________f_regress": 87, "__add__": [417, 624], "__array__": [1035, 1042], "__array_function__": [1021, 1042], "__c": 377, "__call__": [178, 339, 389, 415, 417, 465, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 938, 966, 1039], "__class__": [181, 211, 213, 245, 248, 271, 311, 350, 351, 352, 382], "__class_weight": 377, "__dataframe__": [561, 562], "__doc__": [78, 107, 175, 257, 389], "__file__": [47, 49, 1045], "__getattr__": 377, "__getitem__": 1050, "__getstate__": [1039, 1047], "__init__": [47, 89, 132, 178, 245, 289, 339, 375, 377, 379, 380, 381, 382, 389, 415, 421, 424, 427, 430, 431, 618, 961, 1033, 1038, 1040, 1045, 1046, 1047, 1048], "__init_subclass__": 377, "__len__": 1041, "__main__": [332, 387], "__metadata_request__fit": 245, "__mul__": 621, "__mul___": 417, "__name__": [46, 62, 94, 181, 211, 213, 245, 248, 252, 264, 271, 311, 332, 350, 351, 352, 382, 387, 877], "__pow__": [417, 616], "__repr__": [377, 1021, 1041], "__sklearn_clone__": [377, 432, 1048], "__sklearn_is_fitted__": [89, 131, 183, 377, 421, 424, 984, 1022, 1045, 1046], "__sklearn_tags__": [377, 937, 953], "__version__": [147, 189, 318, 379], "_agglom": 87, "_array_api": 403, "_bag": 940, "_base": [255, 377], "_basehmm": 1032, "_bay": 940, "_birch": 1042, "_breast_cancer_dataset": 168, "_build": 375, "_c_step": 1039, "_cfnode": 441, "_check_bounds_param": 1044, "_check_i": 989, "_check_param_grid": 1038, "_check_sample_weight": 1045, "_check_stop_list": 591, "_check_target": 1039, "_check_x": 1042, "_class": 1001, "_class_cov": 1040, "_class_mean": 1040, "_classif": 307, "_classifier_ha": 89, "_column_transform": [103, 154], "_compon": [242, 536], "_coo": [585, 586], "_count_nonzero_coeffici": 46, "_criterion": 1040, "_csr": 877, "_cython_bla": 376, "_devianc": 1001, "_diabetes_dataset": 168, "_distn_infrastructur": 281, "_doc_link_modul": 377, "_doc_link_templ": 377, "_doc_link_url_param_gener": 377, "_dotbla": 381, "_encod": 1040, "_error": 1001, "_estim": 989, "_estimator_html_repr": 944, "_estimator_typ": [377, 389, 424, 425, 426, 429, 430, 1037], "_estimator_with_converted_arrai": 403, "_f": [178, 997], "_featur": [412, 538, 540, 547], "_fit_and_scor": 1040, "_fit_stag": [559, 560], "_fro": [531, 537, 545, 546, 646, 647, 652, 660, 661, 662, 681], "_g": 178, "_gb": 1042, "_generate_center_coordin": 53, "_get_support_mask": 601, "_get_tag": 1043, "_get_warnings_filters_info_list": 363, "_gpr": 179, "_h": [538, 540, 547], "_hist_gradient_boost": 379, "_i": [405, 414, 992, 997, 1001, 1005, 1016], "_idx": 389, "_init": 194, "_init_t": 1015, "_initialize_nmf": 381, "_is_fit": 132, "_iter": 379, "_j": [405, 992], "_k": [409, 995, 997], "_l": 1001, "_learntselectormixin": 1037, "_level": [417, 625], "_logist": 375, "_loss": [389, 1001, 1050], "_m": 1017, "_mean": 315, "_mean_frequency_by_risk_group": 211, "_method": 960, "_my": 375, "_n": [415, 1001], "_n_cluster": 375, "_n_compon": 547, "_n_features_out": 423, "_name_estim": 1042, "_neg": 381, "_newton_cg": 1043, "_nls_subproblem": 381, "_nmf": 381, "_not_in_sphinx": [47, 49], "_num_thread": 363, "_obj": 960, "_openmp_help": 376, "_pairwis": [1042, 1044], "_plain_sgd": 1047, "_plot": [239, 328], "_po": 381, "_posterior_mod": 610, "_preprocess_data": 687, "_pvalu": 1032, "_rand": 358, "_ratio": [538, 540, 547], "_request": [245, 398, 1050], "_required_paramet": 427, "_reset": 47, "_run_search": 1040, "_safe_index": [2, 1045, 1049, 1050], "_safe_split": 921, "_safe_tag": 1043, "_sag": 1041, "_sampl": [242, 412, 538, 540, 547], "_samples_gener": 257, "_score": [389, 800, 814, 827, 1001, 1032, 1045], "_search": 1038, "_serial": 245, "_sgd_fast": 1047, "_skip_test": 923, "_spars": 381, "_sparse_fit": 1042, "_std": 315, "_t": 1015, "_test": [219, 311, 363, 377, 1045], "_test_scor": [269, 471, 594, 1045], "_transform_select": 1038, "_tree": [912, 913, 914, 915, 1033, 1035], "_typedef": 376, "_univariate_select": 87, "_valu": [417, 613], "_w": [538, 540, 547], "_weight": [53, 229], "_weight_boost": 940, "_weighted_percentil": 1045, "_x_is_even": 961, "_xfail_check": 923, "a16": [1042, 1043], "a65628": [79, 95], "a674e682c281": 380, "a_": [121, 404, 407, 538, 540, 547, 997], "a_column": 719, "a_i": 407, "a_mask": 278, "a_n": 404, "a_row": 719, "a_tru": 278, "aaa": 178, "aaaaff": [294, 297], "aaai": [407, 418, 443, 839, 1003], "aact": 178, "aaffaa": 297, "aagaard": 1036, "aakanksha": 1040, "aapl": 51, "aarch64": 383, "aaron": [494, 997, 1035, 1036, 1037, 1042], "aarshai": [1039, 1040], "aashil": 1039, "ab": [51, 55, 75, 107, 124, 130, 136, 143, 154, 164, 168, 189, 203, 222, 224, 227, 229, 234, 269, 309, 326, 337, 348, 407, 538, 540, 547, 627, 844, 845, 879, 1001], "ab_mask": 278, "abadi": [1038, 1039], "abandon": 375, "abati": [1047, 1049, 1050], "abbi": [1042, 1043], "abbrevi": 699, "abdela": 1041, "abdulaziz": 1050, "abdulelah": 1045, "abdur": 1042, "abenbihi": 1042, "abhijeet": 1034, "abhinav": [1042, 1045], "abhishek": [1035, 1036, 1042, 1046, 1048, 1049], "abhyudai": 1039, "abid": 375, "abil": [48, 52, 94, 111, 146, 169, 170, 171, 175, 177, 179, 181, 183, 185, 186, 188, 211, 215, 229, 238, 350, 364, 393, 414, 415, 417, 611, 622, 625, 782, 783, 784, 787, 788, 998, 1001, 1004, 1007, 1017, 1021, 1022, 1032, 1034, 1039, 1041, 1045, 1046], "abirami": 407, "abl": [43, 44, 48, 61, 81, 88, 94, 113, 116, 124, 125, 149, 151, 176, 186, 189, 197, 201, 211, 227, 229, 235, 275, 280, 282, 325, 326, 339, 358, 362, 363, 364, 369, 373, 375, 377, 379, 380, 383, 387, 401, 407, 409, 411, 415, 484, 503, 534, 829, 876, 990, 991, 997, 1000, 1001, 1002, 1007, 1011, 1014, 1017, 1018, 1021, 1038, 1039, 1043, 1050], "ablin": 1047, "abnorm": [225, 238, 295, 338, 370, 492, 563, 850, 1007, 1040], "abo7atm": 1044, "abort": 692, "about": [3, 46, 50, 65, 79, 86, 90, 95, 102, 116, 142, 165, 179, 183, 185, 189, 215, 228, 238, 245, 263, 266, 267, 269, 271, 276, 288, 294, 314, 318, 320, 321, 322, 323, 324, 329, 350, 352, 357, 358, 362, 363, 368, 370, 374, 375, 377, 379, 380, 381, 383, 388, 389, 390, 401, 406, 411, 412, 415, 417, 437, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 515, 561, 562, 593, 594, 607, 608, 614, 640, 676, 678, 743, 800, 806, 814, 823, 833, 883, 931, 991, 997, 998, 1000, 1002, 1004, 1007, 1008, 1011, 1012, 1014, 1016, 1017, 1020, 1024, 1025, 1037, 1038, 1048, 1050], "abov": [43, 62, 63, 64, 72, 79, 99, 102, 136, 139, 140, 146, 149, 157, 167, 168, 186, 187, 198, 211, 213, 217, 222, 242, 245, 246, 263, 269, 275, 286, 294, 311, 314, 315, 319, 321, 325, 343, 351, 352, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 377, 379, 381, 387, 389, 390, 405, 407, 408, 409, 411, 412, 413, 414, 415, 417, 440, 444, 463, 466, 488, 495, 496, 497, 523, 590, 634, 704, 755, 800, 804, 812, 814, 825, 867, 868, 881, 887, 893, 901, 963, 990, 991, 993, 995, 997, 998, 1001, 1004, 1006, 1008, 1011, 1015, 1016, 1017, 1021, 1038, 1050], "abraham": [1032, 1033, 1038, 1042], "abrahamowicz": 1011, "absenc": [238, 272, 389, 712, 867, 1000, 1001], "absent": [389, 405, 415, 729, 754, 825], "absgrad": 1043, "absher": 1034, "absolut": [2, 43, 52, 107, 124, 143, 168, 186, 211, 213, 217, 229, 326, 357, 377, 401, 407, 409, 411, 412, 414, 415, 416, 417, 418, 443, 449, 455, 456, 531, 537, 542, 545, 546, 548, 549, 550, 558, 560, 561, 562, 565, 588, 590, 591, 593, 597, 602, 619, 627, 632, 646, 649, 650, 652, 654, 656, 671, 672, 674, 676, 678, 682, 683, 704, 717, 721, 736, 737, 745, 746, 748, 753, 755, 757, 795, 802, 806, 817, 820, 828, 830, 842, 844, 845, 849, 868, 873, 876, 889, 913, 915, 986, 997, 998, 1011, 1015, 1017, 1033, 1038, 1043, 1044, 1045, 1046, 1049], "absolute_error": [52, 414, 558, 560, 562, 565, 671, 913, 915, 1045], "absolute_loss": 1045, "absolutelynowarranti": 1040, "absp": 860, "abstain": 534, "abstract": [389, 412, 417, 618, 769, 1032], "abstractmethod": 1042, "absurd": 1008, "abund": 370, "ac": [530, 664, 685, 686, 997, 1014], "acad": [689, 693, 998], "academ": [411, 1025], "academi": [111, 851], "acategorypredict": 395, "acc": 145, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 298, "acceler": [243, 323, 362, 387, 403, 407, 467, 692, 902, 998, 1020, 1025, 1041, 1045, 1047, 1049], "accent": [347, 588, 589, 591, 1042], "accept": [168, 170, 245, 263, 266, 318, 326, 339, 350, 352, 358, 362, 363, 369, 375, 377, 384, 387, 388, 389, 390, 398, 403, 407, 415, 436, 440, 443, 444, 447, 460, 463, 466, 508, 509, 555, 556, 561, 562, 569, 570, 581, 582, 593, 594, 597, 628, 635, 639, 643, 646, 647, 652, 653, 679, 727, 742, 778, 797, 798, 799, 803, 804, 822, 846, 847, 854, 855, 864, 868, 928, 930, 931, 934, 989, 997, 999, 1001, 1004, 1009, 1011, 1016, 1020, 1021, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "accept_large_spars": [930, 931, 1040], "accept_spars": [868, 930, 931, 1039, 1049], "access": [43, 82, 109, 144, 248, 255, 260, 325, 326, 350, 357, 362, 363, 375, 376, 377, 383, 387, 389, 390, 403, 407, 409, 410, 414, 415, 417, 449, 456, 463, 466, 536, 567, 568, 569, 570, 617, 862, 863, 864, 919, 990, 997, 1000, 1001, 1007, 1008, 1009, 1015, 1016, 1021, 1025, 1032, 1034, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1048], "accid": [211, 229], "accident": [1032, 1036, 1041], "accommod": [175, 1040], "accompani": [269, 1040], "accomplish": [245, 377, 405, 546, 998, 1002, 1004, 1025, 1049], "accord": [2, 55, 61, 63, 72, 82, 109, 140, 145, 168, 171, 211, 229, 242, 318, 343, 351, 358, 375, 377, 387, 388, 389, 390, 401, 404, 405, 407, 409, 411, 412, 414, 415, 417, 436, 449, 451, 455, 459, 461, 464, 468, 504, 516, 517, 518, 525, 530, 532, 535, 536, 538, 540, 550, 553, 554, 561, 562, 563, 566, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 641, 642, 644, 645, 649, 658, 659, 670, 680, 691, 695, 735, 779, 780, 800, 801, 802, 803, 804, 807, 808, 809, 814, 825, 839, 840, 841, 842, 843, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 867, 874, 882, 894, 896, 897, 904, 905, 906, 907, 909, 910, 995, 997, 1001, 1003, 1004, 1011, 1014, 1015, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "accordingli": [149, 187, 248, 343, 375, 379, 380, 1039, 1040, 1047], "account": [52, 53, 88, 122, 128, 134, 149, 175, 181, 186, 229, 245, 263, 269, 292, 298, 346, 348, 351, 362, 371, 375, 389, 390, 398, 407, 410, 411, 412, 414, 415, 462, 561, 562, 567, 568, 627, 628, 630, 632, 633, 649, 673, 679, 704, 707, 728, 729, 730, 738, 743, 756, 783, 784, 787, 788, 801, 805, 818, 878, 990, 993, 995, 999, 1001, 1002, 1003, 1004, 1011, 1015, 1017, 1037, 1039, 1040, 1041, 1044, 1045, 1047, 1049, 1050], "acctactagaagtt": 387, "acctcctagaag": 387, "accumul": [47, 83, 141, 201, 379, 381, 407, 415, 1001, 1033, 1040], "accur": [43, 48, 52, 59, 62, 63, 111, 120, 148, 170, 177, 186, 187, 204, 215, 226, 229, 263, 269, 276, 280, 286, 322, 350, 351, 358, 374, 389, 405, 407, 409, 412, 414, 415, 416, 436, 442, 446, 450, 452, 458, 531, 538, 540, 542, 543, 545, 546, 547, 607, 608, 634, 803, 804, 844, 845, 947, 948, 993, 998, 1001, 1017, 1046], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 102, 103, 104, 105, 134, 140, 141, 144, 145, 152, 164, 165, 167, 171, 189, 191, 204, 211, 215, 219, 226, 227, 256, 267, 268, 269, 270, 271, 273, 275, 283, 286, 291, 297, 298, 299, 307, 311, 314, 324, 328, 329, 331, 339, 342, 343, 346, 358, 362, 388, 389, 406, 407, 411, 414, 415, 416, 424, 436, 448, 468, 470, 471, 477, 532, 534, 541, 549, 550, 551, 553, 555, 557, 558, 559, 561, 564, 565, 567, 569, 610, 634, 658, 659, 666, 668, 671, 674, 675, 676, 692, 697, 703, 708, 711, 713, 718, 732, 733, 734, 738, 743, 754, 763, 787, 794, 796, 799, 822, 828, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 851, 853, 854, 861, 899, 900, 904, 906, 909, 912, 914, 920, 947, 948, 990, 995, 996, 997, 998, 1002, 1004, 1005, 1009, 1013, 1015, 1017, 1040, 1041, 1050], "accuracy_histori": 47, "accuracy_multinomi": 204, "accuracy_ovr": 204, "accuracy_scor": [2, 66, 134, 171, 273, 314, 331, 350, 358, 388, 398, 403, 424, 557, 564, 708, 711, 729, 730, 734, 738, 783, 784, 787, 794, 796, 941, 990, 1001, 1033, 1034, 1035, 1044, 1049, 1050], "acf": 143, "achar": [1039, 1040, 1041, 1042], "achiev": [43, 51, 55, 57, 64, 67, 123, 134, 142, 144, 149, 152, 178, 191, 211, 219, 266, 269, 276, 314, 326, 331, 339, 342, 343, 346, 350, 358, 362, 364, 369, 370, 372, 377, 381, 387, 389, 395, 404, 405, 406, 407, 411, 412, 414, 415, 558, 565, 640, 649, 676, 678, 707, 729, 730, 738, 740, 763, 783, 784, 787, 803, 804, 840, 884, 990, 991, 993, 997, 1001, 1011, 1014, 1016, 1045], "achin": 1025, "achliopta": [242, 897, 898, 1013], "acid": [314, 372], "acknowledg": [374, 609, 1049], "acl": [901, 1014, 1015], "acm": [369, 370, 407, 418, 443, 449, 456, 459, 511, 563, 676, 726, 756, 850, 1001, 1004, 1007, 1013], "acoust": 1001, "acq": 47, "acquaint": 375, "acquir": [53, 271, 1044], "acquisit": [404, 719], "acronym": 379, "across": [0, 2, 15, 43, 52, 88, 94, 100, 115, 126, 140, 159, 186, 201, 206, 232, 264, 266, 269, 282, 283, 289, 309, 314, 343, 376, 377, 384, 389, 401, 405, 407, 411, 414, 415, 416, 419, 436, 439, 449, 451, 453, 456, 459, 461, 468, 471, 473, 487, 490, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 588, 591, 594, 602, 607, 608, 610, 611, 632, 633, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 676, 678, 679, 685, 686, 689, 690, 691, 692, 693, 694, 695, 704, 705, 717, 731, 757, 788, 793, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 849, 853, 860, 861, 862, 869, 873, 874, 881, 882, 884, 885, 893, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 947, 948, 971, 974, 990, 997, 999, 1001, 1011, 1015, 1017, 1021, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1050], "act": [339, 350, 375, 388, 413, 414, 713, 729, 730, 738, 783, 784, 787, 879, 883, 998, 1001, 1004, 1016, 1040], "action": [321, 350, 374, 378, 379, 393, 406, 1011, 1042], "activ": [52, 68, 183, 219, 254, 260, 270, 327, 328, 352, 369, 370, 373, 375, 376, 381, 383, 387, 389, 390, 393, 394, 398, 408, 496, 502, 526, 632, 635, 637, 650, 651, 653, 654, 655, 663, 664, 665, 682, 683, 684, 685, 686, 713, 718, 797, 860, 861, 862, 900, 966, 997, 998, 999, 1000, 1004, 1005, 1006, 1014, 1022, 1024, 1043], "active_": [650, 651, 654, 655], "active_features_": 1040, "actual": [43, 52, 64, 80, 93, 107, 116, 140, 149, 168, 186, 191, 201, 211, 215, 219, 256, 265, 272, 276, 352, 357, 358, 362, 364, 372, 375, 377, 380, 381, 387, 388, 389, 405, 407, 412, 414, 415, 416, 432, 509, 515, 516, 527, 535, 538, 540, 547, 562, 563, 644, 645, 648, 658, 659, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 687, 691, 695, 701, 704, 709, 715, 721, 722, 723, 724, 785, 797, 803, 804, 816, 819, 820, 850, 881, 904, 910, 939, 940, 941, 975, 993, 1000, 1001, 1004, 1008, 1009, 1017, 1024, 1039, 1040, 1046, 1047, 1048], "actual_vs_predict": [43, 107, 154, 186, 265, 323, 701], "actuari": 405, "ad": [43, 53, 58, 107, 127, 129, 134, 140, 149, 164, 170, 176, 177, 193, 197, 208, 213, 215, 235, 244, 245, 269, 270, 271, 309, 319, 320, 321, 322, 323, 324, 325, 326, 332, 343, 351, 374, 375, 377, 379, 387, 389, 390, 412, 414, 415, 416, 417, 418, 419, 425, 429, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 510, 512, 514, 522, 523, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 708, 711, 713, 714, 716, 718, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 739, 740, 741, 742, 743, 746, 753, 754, 757, 761, 766, 767, 769, 775, 777, 778, 782, 783, 784, 785, 787, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 813, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 928, 930, 931, 938, 942, 943, 947, 948, 956, 957, 958, 959, 960, 963, 966, 970, 975, 981, 987, 989, 990, 994, 996, 997, 998, 1002, 1004, 1005, 1007, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "adaboost": [2, 67, 115, 133, 137, 142, 150, 153, 154, 157, 173, 183, 223, 356, 519, 551, 553, 554, 559, 631, 703, 830, 912, 913, 1022, 1023, 1027, 1034], "adaboost_clf": 134, "adaboostclassifi": [2, 67, 136, 142, 398, 414, 554, 559, 561, 940, 1034, 1035, 1038, 1039, 1041, 1042, 1045, 1047, 1048, 1049], "adaboostregressor": [2, 135, 398, 414, 553, 562, 940, 1034, 1035, 1038, 1041, 1042, 1045, 1047, 1048], "adam": [0, 305, 396, 861, 862, 1005, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "adamgonzo": 1046, "adamson": 1044, "adanhawth": [1040, 1041], "adapt": [86, 88, 134, 145, 146, 254, 255, 263, 343, 363, 374, 375, 384, 407, 414, 417, 515, 516, 517, 518, 676, 677, 678, 861, 862, 997, 1003, 1005, 1011, 1015, 1020, 1021, 1040, 1041, 1048, 1049], "adarsh": [1049, 1050], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 87, 107, 111, 112, 116, 121, 126, 142, 145, 164, 166, 168, 170, 175, 176, 177, 181, 182, 196, 200, 201, 207, 212, 214, 215, 226, 234, 238, 242, 244, 245, 276, 278, 279, 289, 301, 311, 313, 318, 320, 321, 342, 343, 345, 346, 351, 362, 373, 374, 375, 376, 377, 379, 381, 383, 389, 393, 403, 405, 411, 414, 415, 416, 515, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 602, 627, 628, 630, 632, 658, 659, 694, 697, 821, 844, 845, 901, 938, 957, 958, 990, 991, 1000, 1007, 1011, 1014, 1015, 1021, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "add_2d_scatt": 231, "add_artist": [70, 126, 204, 232, 254, 255, 256, 259, 260], "add_ax": [187, 235, 280], "add_categori": 248, "add_collect": [51, 234, 241], "add_dummy_featur": 2, "add_ind": [154, 182, 627, 628, 630, 991, 1041, 1044, 1048], "add_missing_valu": 182, "add_nois": 176, "add_self_request": [245, 957], "add_subplot": [46, 62, 64, 77, 97, 100, 126, 187, 226, 233, 235, 328, 329, 382], "add_trac": 140, "adddatapointbatch": 289, "addep": 1043, "addison": [590, 730], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 99, 103, 113, 120, 123, 126, 134, 138, 140, 141, 143, 144, 167, 175, 176, 177, 182, 186, 187, 193, 197, 201, 204, 212, 213, 215, 235, 249, 263, 271, 278, 282, 284, 288, 309, 319, 320, 325, 330, 343, 352, 356, 358, 362, 363, 367, 368, 369, 370, 371, 374, 375, 377, 379, 380, 381, 383, 387, 389, 390, 393, 401, 406, 407, 409, 411, 412, 415, 416, 417, 418, 431, 440, 441, 443, 444, 445, 449, 456, 468, 473, 496, 503, 532, 534, 537, 539, 541, 542, 543, 549, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 612, 619, 628, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 670, 687, 688, 692, 698, 699, 702, 742, 758, 759, 788, 792, 797, 798, 806, 823, 833, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 896, 897, 904, 905, 942, 948, 990, 995, 997, 1001, 1002, 1004, 1005, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1027, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "addition": [86, 104, 136, 149, 186, 211, 229, 245, 319, 321, 351, 375, 387, 405, 415, 610, 611, 646, 652, 671, 881, 990, 991, 1001, 1009, 1020, 1038, 1049], "additional_nois": 75, "additive_chi2": [620, 638, 765, 774], "additive_chi2_kernel": [2, 403, 638, 759, 765, 993], "additivechi2sampl": [2, 639, 640, 641, 642, 758, 759, 993, 1046, 1048], "address": [43, 215, 245, 350, 370, 375, 406, 407, 415, 446, 657, 997, 998, 1003, 1004, 1005, 1006, 1007, 1011, 1025, 1040], "adelr": 1040, "adequ": [363, 381, 567, 1045], "adeyemi": 1050, "adher": [2, 362, 377, 389, 942, 943, 1032, 1033], "adien": 1048, "adijohar": 1046, "adil": 1047, "adimension": 186, "adithya": 1037, "aditi": 1050, "aditya": [1038, 1040, 1041, 1042, 1046, 1047], "adityadaflapurkar": 1040, "adjac": [407, 412, 451, 461, 585, 586, 635, 691, 695, 954, 998, 1004], "adjacency_matrix": 407, "adjust": [2, 43, 48, 71, 73, 82, 91, 109, 134, 146, 163, 183, 215, 238, 243, 251, 270, 286, 318, 332, 346, 351, 382, 407, 408, 412, 414, 415, 524, 553, 554, 557, 559, 561, 562, 564, 658, 659, 666, 668, 674, 675, 676, 704, 705, 708, 714, 715, 755, 757, 786, 795, 839, 840, 842, 843, 874, 896, 897, 904, 905, 906, 909, 912, 914, 936, 1000, 1001, 1005, 1011, 1022, 1029, 1032, 1038, 1048], "adjusted_mutual_info_scor": [2, 72, 73, 82, 91, 407, 705, 715, 733, 755, 757, 786, 1001, 1032, 1040, 1044, 1048], "adjusted_rand_index": 705, "adjusted_rand_scor": [2, 72, 73, 82, 91, 351, 407, 704, 715, 733, 757, 786, 1001, 1045], "administr": [393, 394], "admir": [1047, 1048], "admiss": [242, 363], "adopt": [377, 379, 387, 389, 900, 1001, 1015, 1040, 1047, 1049], "adoublet": [1047, 1048], "adpot": 324, "adrian": [1045, 1046, 1047], "adrien": 1032, "adrin": [0, 390, 396, 401, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "adrinjalali": [1035, 1044], "adult": [325, 496, 1011], "advanc": [44, 151, 183, 187, 237, 239, 269, 288, 364, 375, 407, 412, 488, 501, 535, 632, 639, 783, 797, 853, 862, 865, 884, 913, 990, 993, 1001, 1004, 1011, 1022, 1025, 1029, 1034], "advani": 1044, "advantag": [43, 44, 74, 88, 90, 120, 125, 147, 211, 212, 238, 255, 270, 288, 322, 326, 358, 389, 405, 411, 412, 415, 417, 440, 444, 459, 534, 589, 649, 674, 675, 763, 832, 833, 834, 864, 865, 904, 905, 906, 907, 908, 909, 910, 990, 993, 996, 997, 998, 1001, 1002, 1004, 1005, 1009, 1011, 1015, 1016, 1017, 1035], "advic": [383, 417, 622, 623], "advik": [1049, 1050], "advis": [52, 212, 245, 358, 375, 407, 415, 436, 646, 652, 654, 660, 662, 672, 687, 993, 997, 1003, 1005, 1016, 1046], "advoc": 1002, "aeberhard": 372, "aesthet": [309, 1017, 1037], "af": 73, "affan": 1038, "affanv14": 1039, "affect": [46, 62, 111, 149, 177, 185, 186, 215, 235, 248, 249, 272, 279, 314, 324, 358, 362, 363, 364, 371, 389, 392, 405, 407, 410, 411, 413, 415, 418, 420, 443, 449, 456, 472, 474, 478, 549, 550, 569, 699, 712, 788, 800, 803, 804, 805, 814, 818, 819, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 884, 885, 895, 909, 1000, 1004, 1016, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1050], "affili": 370, "affin": [2, 27, 71, 72, 79, 82, 96, 183, 309, 330, 367, 377, 389, 412, 439, 440, 451, 453, 461, 512, 535, 691, 695, 704, 705, 717, 737, 793, 795, 900, 921, 995, 998, 1001, 1022, 1026, 1027, 1032, 1033, 1036, 1042, 1043, 1045, 1047], "affinity_matrix": [691, 695], "affinity_matrix_": [439, 451, 691], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 322, 407, 1032, 1035, 1036, 1040, 1043, 1045, 1046, 1047, 1048, 1049], "affirm": 43, "afnlp": 1015, "afor": [896, 897], "aforement": [363, 1002], "afraid": 393, "africa": 1011, "afroj": 1049, "aft": [315, 1035], "aftab": 1041, "after": [43, 55, 58, 59, 63, 80, 86, 88, 102, 103, 107, 112, 122, 134, 144, 149, 152, 154, 157, 164, 168, 175, 177, 179, 181, 186, 191, 204, 205, 211, 248, 249, 252, 257, 269, 278, 288, 289, 297, 299, 309, 310, 313, 314, 350, 351, 364, 370, 372, 374, 375, 377, 379, 381, 382, 383, 387, 389, 401, 403, 404, 405, 407, 408, 411, 412, 415, 416, 419, 441, 446, 449, 450, 451, 452, 455, 461, 515, 532, 536, 550, 553, 554, 559, 560, 561, 562, 597, 627, 630, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 692, 712, 726, 756, 794, 797, 798, 803, 804, 853, 860, 864, 877, 883, 904, 909, 910, 925, 990, 991, 995, 997, 1001, 1005, 1006, 1011, 1013, 1015, 1016, 1017, 1021, 1032, 1035, 1039, 1040, 1043, 1044, 1047, 1050], "afterward": [58, 379, 535, 541, 828], "ag": [103, 168, 186, 188, 199, 201, 211, 229, 249, 250, 252, 263, 309, 321, 322, 323, 325, 370, 372, 496, 1025], "again": [43, 58, 100, 104, 146, 174, 176, 178, 186, 235, 270, 350, 358, 379, 384, 389, 390, 407, 408, 409, 414, 415, 471, 567, 568, 634, 647, 651, 653, 655, 661, 663, 665, 692, 990, 997, 1001, 1015, 1029, 1032, 1040, 1049], "against": [64, 72, 116, 129, 137, 147, 163, 191, 203, 204, 220, 228, 245, 278, 315, 318, 339, 370, 375, 390, 401, 405, 407, 411, 415, 437, 509, 542, 548, 551, 676, 678, 755, 757, 788, 802, 807, 809, 829, 833, 966, 993, 997, 1001, 1002, 1004, 1016, 1019], "agamemnon": [1039, 1040, 1041, 1042, 1044, 1045], "agarw": [1039, 1040, 1042], "agath": 1046, "agc": 178, "agct": 178, "agent": 1025, "agg": 175, "aggfunc": 280, "agglo": [84, 444], "agglom": [2, 51, 71, 72, 77, 79, 81, 89, 93, 95, 100, 183, 232, 234, 328, 329, 407, 440, 444, 502, 691, 778, 857, 1022, 1035], "agglomer": [2, 44, 68, 71, 83, 164, 166, 183, 196, 210, 247, 293, 328, 329, 367, 407, 415, 444, 502, 600, 606, 645, 800, 805, 864, 1022, 1027], "agglomerativeclust": [2, 74, 75, 76, 79, 81, 85, 89, 95, 100, 389, 407, 439, 441, 444, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "aggreg": [93, 138, 229, 272, 278, 283, 322, 324, 407, 414, 416, 534, 555, 556, 594, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 1002, 1004, 1011, 1048], "aggress": [2, 47, 218, 666, 667, 803, 804, 1023, 1027, 1033], "aggressive_elimin": [803, 804, 990], "agnost": [1000, 1009, 1050], "ago": [51, 379, 1021], "agraw": [1035, 1040, 1046, 1047], "agre": [25, 163, 383, 390, 407, 786], "agreement": [0, 2, 407, 704, 716, 755, 757, 795, 1001], "agricultur": 997, "aguiar": 416, "agundez": 1040, "ahead": 888, "ahmadi": 1043, "ahmadjubair33": 1046, "ahmedbgh": [1047, 1048], "ahn": 1044, "ahuja": [1039, 1046, 1047], "ai": 411, "ai8rahim": 1035, "aic": [2, 159, 183, 192, 198, 199, 200, 206, 219, 259, 501, 651, 653, 654, 655, 656, 798, 865, 884, 990, 1022, 1032, 1039, 1045, 1046], "aic_criterion": 199, "aid": [266, 407, 792, 793, 998, 1025, 1032, 1044], "aidan": 1040, "aidar": 1046, "aig": 51, "aiko": 1047, "aim": [52, 58, 112, 149, 182, 215, 263, 297, 330, 343, 364, 370, 373, 375, 389, 401, 407, 409, 415, 447, 997, 1001, 1004, 1011, 1016, 1020, 1046], "air": [175, 764], "airport": 764, "airspe": 375, "aisha": 1050, "aishgrt1": 1040, "aishwarya": 1040, "aishwaryark": 1039, "aistat": 1014, "aivision2020": 1039, "aj": [494, 1046], "ak": [405, 1046, 1047], "aka": [2, 45, 304, 350, 387, 415, 451, 536, 538, 540, 544, 547, 581, 582, 615, 622, 651, 652, 654, 655, 656, 658, 659, 662, 666, 667, 668, 670, 676, 677, 678, 741, 871, 875, 877, 997, 1005, 1015, 1034, 1046], "akai": 1045, "akaik": [199, 201, 259, 656, 798, 990, 997], "akash": [1040, 1050], "aki": [1046, 1047, 1048], "akihiro": 1050, "akin": [43, 212, 389], "akinkunl": 1042, "akitti": 1037, "akshai": [1036, 1039, 1044], "akshay0724": 1039, "akshayah3": 1036, "akshita": 1047, "al": [0, 2, 50, 109, 110, 134, 148, 199, 302, 370, 372, 404, 407, 409, 412, 414, 415, 416, 450, 498, 519, 520, 528, 535, 541, 544, 563, 682, 683, 719, 720, 839, 841, 861, 862, 897, 947, 948, 997, 998, 1001, 1007, 1011, 1013, 1016, 1017, 1040, 1045, 1048, 1049], "ala": [1047, 1048], "aladago": 1042, "alam": [1047, 1048], "alan": [1039, 1040, 1043, 1045, 1046, 1050], "alastuei": 1035, "albeit": 62, "albert": [0, 365, 1039, 1040, 1041, 1044, 1045], "alberto": [1041, 1045, 1046, 1050], "alcalin": 372, "alcohol": [314, 372], "alcorn": 1040, "aldrian": 1036, "aleator": 52, "alec": 1042, "alejandro": [1033, 1038, 1049], "alek": [1045, 1046], "aleksandr": 1039, "aleksandra": 1043, "alemagnani": 1035, "alert": 1039, "alessandro": [1042, 1044, 1047], "alessia": 1045, "alex": [401, 415, 1016, 1032, 1035, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "alexand": [0, 397, 407, 412, 535, 870, 1034, 1035, 1036, 1038, 1039, 1040, 1044, 1045, 1046, 1049], "alexandercbooth": 1039, "alexandr": [0, 120, 390, 396, 397, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "alexandracraciun": 1044, "alexandru": 438, "alexanmv": 1046, "alexei": 1037, "alexfield": 1038, "alexgoryainov": 1042, "alexi": [1032, 1035, 1036, 1039, 1049, 1050], "alexl": [1048, 1049], "alexqiao": 1050, "alexryndin": 1040, "alexshack": [1042, 1043, 1044], "alfalfa": 57, "alfano": 1039, "alfaro": [0, 365, 1043, 1044, 1045, 1046, 1047], "alfr": 0, "algebra": [363, 373, 378, 387, 412, 415, 461, 870, 1011], "algesheim": 407, "algo": [78, 129], "algo_param": [79, 95], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 71, 72, 77, 78, 80, 83, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 110, 111, 115, 120, 122, 134, 135, 140, 150, 183, 191, 200, 201, 214, 225, 227, 233, 235, 237, 241, 242, 248, 255, 256, 257, 260, 266, 269, 278, 289, 295, 296, 298, 302, 309, 311, 314, 318, 319, 320, 323, 325, 330, 332, 338, 350, 351, 352, 358, 362, 364, 368, 369, 370, 371, 372, 375, 376, 377, 378, 383, 384, 388, 389, 392, 403, 404, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 468, 473, 474, 477, 481, 482, 483, 487, 503, 511, 512, 513, 514, 515, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 553, 554, 555, 556, 559, 560, 563, 591, 603, 604, 610, 611, 635, 637, 639, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 708, 717, 719, 735, 737, 743, 774, 778, 779, 793, 795, 797, 798, 832, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 860, 865, 869, 871, 884, 888, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 930, 947, 948, 950, 965, 969, 975, 991, 993, 996, 998, 999, 1000, 1001, 1003, 1006, 1007, 1011, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "algorithm_nam": 78, "ali": [1037, 1040, 1041, 1044, 1045, 1047, 1048, 1049], "alia": [52, 245, 376, 383, 389, 398, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 610, 611, 617, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 974, 1007, 1021, 1032, 1046], "alias": [80, 81, 245, 373, 375, 378, 398, 597, 1032, 1036, 1046], "aliased_sample_weight": 245, "align": [70, 147, 149, 182, 231, 254, 280, 352, 389, 689, 693, 993, 1004, 1015, 1026, 1027, 1048, 1049], "alihan": 1045, "alik": [412, 999], "alin": 1045, "alison": 1039, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 85, 86, 87, 88, 93, 97, 107, 113, 120, 122, 123, 132, 139, 140, 142, 146, 149, 156, 157, 168, 175, 176, 178, 183, 185, 186, 187, 189, 193, 197, 198, 204, 205, 206, 211, 212, 213, 214, 215, 220, 222, 226, 228, 229, 231, 232, 238, 244, 245, 248, 249, 252, 255, 257, 259, 263, 267, 270, 271, 272, 273, 275, 276, 277, 279, 281, 282, 286, 289, 292, 294, 306, 309, 310, 314, 318, 319, 320, 321, 323, 324, 325, 326, 328, 330, 331, 332, 336, 339, 343, 344, 346, 347, 350, 351, 352, 355, 357, 358, 362, 363, 364, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 383, 384, 387, 388, 389, 390, 394, 398, 401, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 429, 430, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 503, 508, 509, 515, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 705, 709, 713, 714, 715, 716, 717, 718, 720, 721, 723, 726, 728, 729, 730, 732, 733, 735, 736, 737, 738, 742, 745, 746, 748, 750, 751, 753, 756, 761, 769, 774, 778, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 806, 807, 809, 810, 812, 814, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 928, 930, 931, 932, 936, 939, 940, 941, 942, 954, 957, 963, 975, 984, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050], "all_class": 47, "all_displai": [2, 384, 1047], "all_estim": [2, 384, 1042, 1043, 1047], "all_funct": [2, 384, 1047], "all_handl": 204, "all_label": [204, 901], "all_model": 146, "all_or_ani": [984, 1042], "all_scor": 733, "all_split": [43, 52], "all_uppercas": 415, "allan": [350, 405, 1044], "allclos": [121, 151, 1013], "allefeld": 1045, "allen": [323, 1035, 1037, 1039, 1042], "allend": [1043, 1045], "allevi": [90, 149, 193, 197, 407, 1003], "allison": 323, "alloc": [2, 42, 45, 62, 94, 183, 281, 320, 371, 375, 376, 407, 415, 442, 446, 458, 487, 536, 538, 540, 584, 588, 591, 646, 652, 660, 662, 803, 804, 806, 823, 828, 831, 990, 1011, 1020, 1022, 1026, 1027, 1036, 1037, 1042, 1043, 1049], "allow": [25, 43, 58, 89, 91, 106, 107, 124, 125, 126, 137, 138, 144, 152, 170, 175, 176, 177, 179, 200, 204, 206, 211, 215, 229, 232, 239, 242, 249, 251, 252, 254, 263, 269, 282, 283, 288, 318, 319, 320, 321, 323, 326, 343, 344, 350, 357, 358, 362, 369, 370, 375, 376, 377, 379, 382, 383, 384, 387, 389, 390, 398, 401, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 436, 442, 443, 445, 446, 448, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 496, 523, 524, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 593, 594, 597, 603, 610, 611, 615, 627, 628, 630, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 690, 692, 699, 742, 762, 765, 774, 778, 781, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 811, 814, 818, 821, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 859, 861, 862, 864, 866, 867, 869, 870, 871, 876, 883, 884, 888, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 930, 931, 942, 943, 964, 990, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "allow_nan": [921, 929, 931, 1048], "allow_nd": [930, 931], "allow_non": 711, "allow_single_clust": [79, 445], "allow_unlabel": [118, 246, 523], "allowed_extens": 503, "allwein": 286, "almeida": [1033, 1034, 1045], "almeidayoel": 1046, "almer": 1039, "almost": [43, 70, 140, 145, 213, 219, 245, 248, 263, 284, 314, 326, 331, 358, 368, 370, 379, 381, 387, 388, 389, 398, 407, 411, 412, 469, 470, 471, 472, 474, 475, 476, 797, 990, 996, 997, 1000, 1001, 1016, 1040, 1045], "almubarak": [1045, 1046], "alon": [186, 215, 275, 339, 389, 405, 648, 669, 680, 1039, 1041], "along": [2, 51, 53, 89, 92, 99, 116, 141, 146, 149, 175, 200, 211, 243, 245, 273, 318, 351, 352, 358, 370, 375, 379, 383, 384, 389, 393, 398, 401, 404, 412, 414, 415, 416, 419, 533, 550, 587, 611, 612, 630, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 676, 678, 681, 682, 683, 684, 685, 686, 779, 780, 792, 800, 814, 873, 874, 877, 878, 881, 882, 883, 884, 889, 890, 891, 893, 894, 895, 926, 950, 975, 981, 990, 997, 1004, 1011, 1014, 1025, 1032, 1037, 1038, 1040, 1044, 1045], "alongsid": [375, 381, 389, 393, 416, 825, 826, 827, 828, 829, 831, 1001, 1008, 1020, 1021], "alonso": [1043, 1045], "aloqe": 1050, "alpaydin": 372, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 85, 89, 93, 98, 107, 113, 116, 120, 122, 123, 125, 128, 129, 134, 136, 137, 142, 146, 149, 150, 151, 153, 154, 155, 168, 170, 173, 175, 176, 177, 178, 179, 181, 182, 186, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 209, 211, 212, 213, 215, 216, 220, 223, 224, 229, 231, 232, 235, 243, 244, 251, 254, 269, 270, 271, 272, 273, 276, 277, 279, 281, 282, 288, 289, 292, 294, 297, 299, 304, 306, 309, 310, 311, 312, 314, 316, 319, 321, 322, 325, 330, 332, 336, 337, 340, 341, 343, 344, 346, 347, 348, 350, 362, 370, 377, 381, 387, 409, 410, 412, 414, 416, 417, 419, 445, 470, 471, 477, 527, 531, 533, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 560, 595, 596, 598, 611, 613, 615, 616, 623, 631, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 687, 723, 748, 839, 840, 841, 843, 861, 862, 900, 912, 913, 914, 915, 990, 997, 1001, 1003, 1005, 1009, 1014, 1015, 1016, 1017, 1029, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1050], "alpha_": [43, 113, 159, 186, 194, 199, 201, 471, 611, 644, 645, 647, 651, 653, 655, 656, 661, 663, 673, 675, 997, 1017, 1032, 1039], "alpha_1": [644, 645, 997], "alpha_2": [644, 645, 997], "alpha_a": 201, "alpha_b": 201, "alpha_bound": [179, 623], "alpha_h": [54, 412, 538, 540, 547, 1045], "alpha_i": [1003, 1016], "alpha_init": [194, 645, 997, 1042], "alpha_max": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "alpha_min": [646, 647, 650, 652, 653, 654, 656, 660, 661, 662, 663, 681, 682, 683, 684], "alpha_per_target": [673, 1044], "alpha_w": [54, 412, 538, 540, 547, 1045], "alphabet": [104, 389, 722, 741], "alphalpha": 57, "alphanumer": [389, 588, 589, 591], "alphas_": [199, 201, 647, 650, 651, 653, 654, 655, 656, 661, 663, 682, 683, 1032, 1035, 1045], "alphas_enet": 200, "alphas_lar": 200, "alphas_lasso": 200, "alphas_positive_enet": 200, "alphas_positive_lar": 200, "alphas_positive_lasso": 200, "alphavantag": 51, "alphonsu": 1042, "alreadi": [2, 43, 45, 49, 88, 91, 125, 126, 134, 149, 154, 168, 186, 239, 246, 248, 251, 263, 270, 276, 289, 321, 324, 375, 376, 380, 387, 389, 405, 406, 409, 411, 413, 414, 419, 436, 491, 499, 523, 533, 567, 568, 634, 646, 649, 664, 665, 666, 667, 668, 674, 676, 677, 678, 685, 686, 768, 778, 839, 859, 867, 873, 874, 876, 881, 901, 904, 905, 933, 959, 990, 993, 1007, 1011, 1012, 1021, 1029, 1033, 1037, 1040, 1044, 1045, 1046, 1047], "alsadi": 1040, "alsaedi": 1045, "alsalhi": [0, 1035, 1036], "alsawadi": 1045, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 80, 86, 90, 91, 93, 97, 102, 103, 109, 111, 115, 116, 120, 127, 129, 134, 137, 140, 143, 144, 145, 146, 147, 149, 152, 154, 164, 165, 166, 168, 170, 172, 175, 182, 183, 186, 187, 188, 189, 191, 194, 195, 201, 204, 205, 211, 212, 213, 215, 216, 220, 228, 229, 231, 241, 243, 245, 248, 249, 260, 263, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 282, 283, 286, 288, 289, 297, 300, 301, 302, 304, 309, 310, 311, 313, 314, 318, 319, 320, 321, 325, 326, 333, 335, 336, 337, 339, 341, 343, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 381, 383, 384, 387, 388, 389, 390, 393, 395, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 436, 437, 438, 440, 441, 444, 445, 446, 447, 449, 451, 453, 461, 462, 464, 466, 481, 483, 492, 496, 498, 503, 508, 532, 533, 535, 536, 541, 546, 549, 551, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 622, 632, 633, 635, 643, 644, 645, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 672, 676, 678, 681, 684, 687, 691, 694, 695, 699, 710, 713, 716, 723, 729, 730, 738, 743, 763, 779, 780, 783, 784, 787, 797, 798, 800, 802, 803, 804, 814, 817, 820, 826, 827, 828, 829, 830, 831, 833, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 860, 861, 862, 864, 866, 867, 872, 873, 877, 881, 884, 889, 893, 906, 909, 912, 913, 914, 915, 923, 930, 948, 950, 957, 964, 990, 991, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "alt": [57, 270, 332, 350, 351, 352, 370, 383, 487], "altai": 1042, "alter": [62, 182, 377, 389, 729, 730, 738, 783, 784, 787, 1037, 1041, 1044], "altern": [43, 63, 103, 116, 141, 147, 149, 154, 188, 197, 211, 229, 239, 257, 260, 263, 278, 318, 343, 350, 351, 352, 358, 370, 373, 375, 379, 381, 387, 389, 390, 393, 401, 402, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 440, 441, 444, 445, 446, 451, 457, 462, 499, 538, 540, 541, 547, 553, 554, 557, 558, 559, 560, 564, 565, 566, 582, 588, 589, 591, 617, 620, 643, 692, 706, 708, 771, 774, 778, 781, 802, 833, 868, 874, 877, 890, 897, 899, 912, 913, 914, 915, 967, 995, 997, 998, 1000, 1001, 1004, 1005, 1009, 1011, 1013, 1014, 1016, 1017, 1021, 1027, 1037, 1039, 1045, 1046, 1050], "alternate_sign": [47, 415, 582, 589, 1039], "although": [43, 48, 62, 141, 154, 185, 229, 238, 256, 288, 343, 358, 364, 377, 379, 383, 389, 407, 408, 412, 415, 496, 875, 1000, 1002, 1003, 1004, 1007, 1017, 1032, 1040, 1047], "altman": [628, 991], "altogeth": [143, 381, 1040], "alva": 1042, "alvaro": [1038, 1040], "alvin": 1040, "alwai": [140, 143, 146, 186, 193, 211, 229, 236, 242, 263, 272, 275, 279, 316, 336, 343, 346, 351, 358, 362, 363, 369, 373, 375, 376, 377, 381, 383, 388, 389, 393, 401, 405, 407, 408, 411, 414, 415, 416, 417, 424, 430, 442, 448, 463, 464, 466, 468, 481, 482, 483, 487, 496, 508, 509, 544, 549, 551, 552, 554, 556, 558, 559, 560, 561, 562, 564, 565, 568, 570, 581, 588, 589, 591, 594, 611, 627, 628, 630, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 676, 678, 679, 695, 705, 709, 715, 721, 722, 723, 724, 732, 734, 735, 739, 782, 785, 786, 797, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 837, 838, 847, 848, 855, 856, 862, 869, 877, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 905, 906, 907, 909, 910, 912, 913, 915, 949, 959, 960, 990, 991, 993, 995, 997, 1000, 1001, 1004, 1007, 1009, 1013, 1014, 1016, 1017, 1025, 1032, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "always_accept_polici": 263, "always_reject_polici": 263, "alyssa": [1035, 1039], "alyssaq": 1038, "am": [102, 107, 111, 154, 187, 350, 380, 409, 473, 493, 1039], "amai": 1048, "aman": [1038, 1039, 1040, 1046, 1047], "amanda": [1040, 1043, 1044, 1045, 1046], "amar": [1046, 1047, 1048, 1050], "amax": 109, "amazon": 51, "amber": 389, "ambient": 235, "ambigu": [270, 380, 415, 572, 712, 948, 1004, 1041, 1043, 1045], "ambival": 93, "ambrosio": 1039, "ambroz": [1042, 1043], "amelia": 991, "amen": [381, 387, 417, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 990], "america": [50, 51, 111, 302, 370, 851, 1011], "american": [50, 51, 102, 112, 370, 407, 409, 413, 414, 415, 468, 473, 731, 884], "amerr": 1050, "ames_h": 248, "amg": [80, 99, 407, 451, 461, 691, 695, 1042, 1046, 1047], "amherst": 370, "ami": [72, 82, 91, 407, 704], "amicel": [1032, 1035], "amin": 109, "aminaka": 1036, "amit": [1032, 1046, 1047], "amlan": 1038, "amo": 1035, "amol": 1045, "among": [2, 64, 126, 178, 187, 189, 191, 211, 259, 276, 288, 357, 364, 370, 377, 389, 390, 405, 410, 446, 448, 512, 519, 794, 829, 847, 852, 854, 906, 909, 912, 913, 914, 915, 990, 993, 1001, 1002, 1008, 1011, 1016, 1017, 1032, 1038, 1039, 1042, 1049], "amongst": [51, 1017], "amor": [0, 386, 1046, 1047, 1048, 1049, 1050], "amormachin": 1035, "amort": 1004, "amount": [37, 38, 47, 51, 86, 99, 109, 112, 120, 124, 135, 137, 176, 186, 197, 215, 229, 243, 263, 282, 320, 326, 328, 331, 333, 339, 346, 352, 362, 363, 364, 387, 407, 409, 412, 414, 415, 416, 442, 453, 468, 538, 539, 541, 543, 563, 596, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 665, 681, 684, 692, 803, 804, 844, 845, 850, 885, 900, 901, 914, 915, 990, 996, 997, 1000, 1003, 1005, 1011, 1013, 1014, 1015, 1016, 1045, 1049], "amount_fraud": 263, "amount_iter": 331, "amount_label": 331, "amount_test": 263, "amount_train": 263, "amourav": 1041, "amplitud": [146, 175, 177, 206, 997], "amplitude_nois": 75, "amput": 1021, "amrcod": 1046, "amsterdam": [401, 872, 1012], "amy12xx": 1044, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 164, 168, 170, 171, 172, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 191, 192, 193, 194, 197, 199, 200, 207, 208, 211, 212, 213, 215, 216, 218, 219, 225, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 252, 254, 255, 257, 259, 260, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 282, 288, 289, 292, 295, 296, 297, 300, 302, 309, 314, 315, 316, 319, 320, 321, 323, 324, 325, 326, 329, 333, 335, 336, 338, 339, 341, 342, 343, 350, 351, 352, 354, 357, 358, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 388, 389, 390, 392, 393, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 428, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 612, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 709, 711, 712, 718, 720, 721, 727, 729, 730, 734, 735, 737, 742, 743, 745, 746, 748, 750, 751, 753, 756, 758, 759, 763, 764, 766, 767, 768, 769, 770, 773, 775, 776, 777, 778, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 927, 928, 930, 931, 933, 934, 937, 938, 942, 943, 944, 946, 947, 948, 950, 952, 953, 956, 957, 958, 959, 960, 961, 963, 964, 965, 970, 971, 974, 975, 981, 984, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "ana": [1043, 1045, 1050], "anaconda": [0, 363, 373, 379], "anak": 1044, "analog": [43, 57, 148, 381, 414, 1001, 1002, 1016, 1041], "analogi": [1000, 1001], "analys": [231, 357, 412, 803, 804, 998, 1020, 1025], "analysen": 449, "analysi": [2, 12, 27, 44, 46, 48, 49, 55, 58, 62, 65, 71, 90, 96, 98, 109, 110, 111, 112, 113, 115, 118, 119, 121, 122, 124, 125, 128, 129, 143, 160, 182, 183, 186, 201, 220, 232, 253, 255, 256, 259, 260, 262, 263, 266, 269, 270, 274, 275, 280, 289, 290, 291, 292, 300, 301, 309, 314, 346, 351, 355, 367, 370, 372, 375, 377, 390, 404, 407, 409, 414, 415, 419, 438, 446, 447, 472, 474, 475, 481, 482, 484, 502, 504, 512, 515, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 556, 631, 638, 688, 690, 691, 692, 693, 710, 719, 725, 726, 756, 788, 789, 792, 793, 797, 800, 826, 830, 846, 853, 864, 865, 870, 880, 884, 892, 919, 947, 948, 991, 997, 998, 1000, 1001, 1011, 1019, 1020, 1022, 1023, 1025, 1026, 1027, 1032, 1033, 1034, 1036, 1041], "analyst": 867, "analyt": [125, 412, 417, 532, 620, 708, 991, 995, 1001, 1019, 1025], "analyz": [43, 46, 55, 197, 271, 278, 323, 350, 352, 380, 381, 407, 415, 503, 588, 589, 591, 788, 998, 1001, 1008, 1009, 1017, 1032, 1041], "anam": 1049, "anand": [1040, 1044], "ananiad": 1015, "anantharam": 1046, "anavelyz": 1045, "ana\u00ebl": 1042, "anbari": 528, "anchor": 280, "ander": [1036, 1042], "andersen": [743, 1046], "anderson": [50, 302, 370, 498, 1038, 1044, 1050], "andi": [1032, 1039], "ando": 1037, "andr": [1039, 1046], "andrea": [0, 390, 396, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "andreh7": 1039, "andrei": [1047, 1049, 1050], "andrew": [407, 461, 691, 695, 717, 737, 795, 879, 1005, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "andrewww": 1040, "andrii": 1046, "andriushchenko": [1038, 1039], "androutsopoulo": [839, 1003], "andrzej": [538, 540, 547], "andr\u00e1": [1045, 1046, 1047, 1048], "andr\u00e9": [1045, 1046, 1048], "ands": 875, "andyscanzio": 1049, "ang": 1039, "angel": [0, 397], "angela": [1042, 1043, 1047], "angelaambroz": 1043, "angermuel": [1036, 1037], "angl": [2, 53, 70, 123, 168, 254, 255, 256, 259, 260, 372, 412, 531, 537, 539, 542, 543, 545, 546, 548, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 682, 683, 684, 685, 686, 692, 998, 999, 1023, 1027, 1032], "angmar": 57, "angu": [1039, 1040, 1046], "angular": [413, 692, 764], "anh": [538, 540, 547], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 80, 88, 90, 100, 151, 163, 168, 176, 177, 185, 186, 187, 188, 189, 201, 211, 215, 229, 238, 241, 242, 245, 255, 259, 260, 263, 269, 270, 272, 275, 278, 286, 302, 309, 310, 313, 318, 320, 321, 323, 326, 339, 343, 352, 358, 362, 363, 364, 369, 370, 372, 373, 375, 377, 379, 380, 381, 383, 388, 389, 390, 393, 395, 398, 401, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 432, 439, 445, 447, 448, 449, 451, 453, 455, 456, 460, 463, 466, 487, 488, 508, 509, 523, 534, 537, 539, 546, 551, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 588, 589, 591, 593, 603, 610, 611, 620, 627, 632, 633, 645, 648, 658, 659, 666, 667, 668, 669, 676, 677, 678, 679, 680, 692, 696, 699, 700, 704, 716, 717, 719, 724, 736, 737, 752, 755, 757, 774, 778, 779, 780, 781, 792, 793, 795, 800, 803, 804, 812, 813, 833, 836, 844, 845, 850, 854, 863, 864, 868, 869, 873, 875, 877, 878, 885, 894, 895, 898, 901, 904, 905, 912, 913, 914, 915, 916, 918, 926, 930, 931, 937, 970, 984, 990, 991, 993, 996, 997, 998, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1024, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "aniket": [1047, 1049], "anil": [407, 451, 461], "anim": [350, 415], "anirban": 415, "aniruddha": 1040, "anish": [1037, 1038], "anisha": 1042, "aniso": [79, 95], "anisotrop": [90, 172, 417, 617, 619, 622], "anisotropicli": [79, 95], "anjirbag": 1040, "ankan": 1037, "ankerst": [407, 449, 456], "ankit": [1035, 1042, 1044, 1046], "ankit810": 1043, "ankita": 1040, "ankur": [1037, 1048], "ann": [1032, 1044, 1046], "anna": 1040, "annaayzenshtat": 1040, "annal": [168, 197, 199, 372, 414, 473, 516, 517, 518, 559, 560, 656, 997], "annau": 1045, "annegnx": 1048, "anno": [692, 998], "annoi": 363, "annot": [2, 43, 48, 63, 156, 166, 191, 232, 273, 276, 350, 375, 376, 377, 407, 716, 918, 1001, 1017, 1041], "annotationbbox": 232, "announc": [0, 318, 319, 320, 321, 322, 323, 324, 325, 326, 379], "annual": [372, 407, 726, 756, 901, 1001, 1014], "anomali": [14, 48, 111, 150, 183, 225, 237, 248, 295, 296, 370, 468, 512, 522, 563, 639, 677, 850, 865, 908, 1007, 1020, 1022, 1038, 1039], "anomaly_algorithm": 238, "anomaly_frac": 248, "anoth": [43, 72, 120, 125, 134, 144, 148, 168, 170, 178, 182, 186, 201, 215, 219, 236, 238, 245, 249, 255, 263, 269, 271, 272, 275, 279, 283, 299, 350, 352, 354, 358, 362, 364, 369, 370, 373, 375, 377, 381, 387, 389, 401, 404, 407, 411, 412, 414, 415, 416, 418, 441, 443, 451, 454, 461, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 508, 538, 540, 547, 673, 676, 692, 709, 719, 806, 822, 823, 863, 864, 885, 990, 991, 996, 997, 998, 1001, 1002, 1004, 1007, 1011, 1015, 1016, 1041, 1042, 1049], "anova": [2, 49, 87, 106, 162, 164, 167, 168, 183, 334, 408, 444, 504, 515, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 713, 826, 830, 864, 865, 884, 904, 909, 1016, 1022], "anova__percentil": [87, 342], "anova_filt": 165, "anova_svm": 165, "ansam": 1048, "answer": [159, 185, 269, 375, 387, 401, 406, 726, 756, 1001, 1025], "ant": [718, 754, 1001], "anthoni": [1037, 1039, 1040], "anthony22": [1047, 1048], "anti": [197, 358, 606, 839, 1003], "anti_alias": [80, 81], "anticip": 52, "antoin": [1032, 1034, 1035, 1036, 1039], "antoni": [1036, 1038, 1044, 1047], "antonin": 1039, "antonio": [1040, 1042], "anubhav": 1040, "anuja": 1042, "anulekh": 1047, "anupam": [898, 1013, 1047], "any_method": 960, "anymor": [149, 188, 211, 271, 318, 319, 339, 358, 379, 408, 427, 670, 1038, 1041, 1044, 1045, 1046, 1048, 1049], "anyon": [375, 390, 406, 1024, 1025], "anyth": [352, 381, 389, 398, 408, 411, 960, 964, 1046], "anywai": [48, 350, 377, 665, 685, 686], "anywher": 310, "anz": 1033, "aoif": [708, 1001], "ap": [2, 276, 707, 708, 1001], "apart": [186, 321, 339, 387, 389, 398, 408, 410, 416, 725, 1016, 1025, 1040], "api": [0, 51, 83, 89, 131, 139, 183, 237, 239, 245, 249, 250, 266, 271, 278, 279, 289, 325, 326, 351, 352, 364, 368, 369, 375, 378, 379, 384, 385, 387, 388, 390, 393, 401, 406, 412, 414, 415, 417, 421, 424, 425, 426, 429, 431, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 496, 504, 508, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 563, 564, 566, 567, 568, 569, 570, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 671, 677, 688, 689, 690, 691, 692, 702, 797, 798, 803, 804, 806, 823, 830, 848, 850, 852, 853, 856, 860, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 908, 909, 923, 942, 943, 966, 984, 990, 999, 1000, 1001, 1004, 1011, 1015, 1020, 1021, 1022, 1025, 1027, 1029, 1030, 1031, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "api_refer": 375, "apk": 393, "apostolo": 1047, "appar": [115, 1003, 1025], "appdata": 393, "appeal": 390, "appear": [0, 47, 80, 137, 186, 189, 264, 266, 267, 295, 296, 304, 306, 310, 329, 343, 350, 351, 352, 370, 373, 375, 380, 389, 409, 412, 487, 488, 555, 567, 568, 579, 610, 627, 628, 630, 697, 700, 702, 712, 716, 718, 782, 789, 801, 818, 839, 840, 841, 842, 843, 906, 909, 950, 997, 1003, 1007, 1032, 1040, 1044, 1045], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 83, 94, 103, 127, 137, 138, 140, 144, 146, 149, 182, 189, 205, 215, 216, 218, 219, 226, 229, 243, 244, 269, 272, 278, 279, 304, 305, 315, 331, 339, 342, 350, 351, 352, 354, 357, 381, 389, 408, 415, 658, 659, 904, 905, 911, 938, 1011], "appendix": [645, 676, 997, 1011], "appl": [51, 362, 373, 387, 1002], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 80, 81, 88, 89, 91, 95, 103, 107, 116, 120, 121, 126, 128, 130, 139, 140, 144, 146, 164, 170, 186, 188, 197, 201, 204, 215, 216, 225, 231, 232, 233, 238, 243, 245, 269, 270, 272, 281, 282, 283, 288, 298, 309, 313, 314, 319, 339, 343, 352, 357, 358, 362, 367, 375, 377, 379, 383, 387, 388, 389, 398, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 439, 445, 451, 461, 463, 464, 466, 468, 473, 481, 482, 483, 484, 508, 509, 516, 517, 518, 524, 531, 532, 533, 534, 535, 537, 539, 541, 542, 543, 548, 549, 550, 553, 554, 557, 558, 559, 560, 564, 565, 566, 588, 589, 590, 591, 627, 632, 633, 638, 639, 641, 642, 658, 659, 668, 676, 677, 678, 691, 699, 701, 707, 711, 726, 756, 758, 759, 781, 788, 792, 793, 800, 814, 830, 833, 839, 840, 841, 842, 843, 853, 863, 864, 873, 880, 881, 884, 889, 890, 892, 893, 894, 895, 900, 911, 912, 913, 914, 915, 925, 930, 936, 940, 947, 948, 972, 991, 993, 997, 998, 999, 1000, 1001, 1003, 1005, 1007, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1025, 1033, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1046], "applic": [42, 44, 57, 82, 88, 111, 183, 191, 211, 228, 233, 262, 263, 272, 309, 326, 362, 364, 370, 372, 375, 381, 383, 384, 387, 389, 405, 406, 407, 411, 412, 413, 414, 417, 419, 443, 445, 451, 496, 532, 533, 534, 553, 554, 629, 688, 689, 690, 694, 712, 729, 730, 738, 783, 784, 787, 830, 924, 990, 997, 998, 999, 1000, 1001, 1005, 1007, 1013, 1017, 1020, 1021, 1022, 1024, 1025, 1032, 1033, 1038, 1040, 1043], "apply_along_axi": 307, "appr": 619, "appreci": [0, 375, 387], "approach": [44, 47, 91, 96, 99, 124, 168, 170, 181, 186, 189, 196, 199, 204, 211, 213, 219, 229, 231, 263, 286, 315, 343, 350, 351, 352, 364, 374, 375, 381, 384, 389, 393, 395, 401, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 436, 442, 445, 447, 451, 461, 520, 532, 582, 589, 611, 635, 658, 659, 674, 675, 833, 849, 948, 990, 991, 997, 998, 1001, 1002, 1004, 1005, 1011, 1015, 1016, 1019, 1020, 1025, 1036, 1048], "appropri": [25, 88, 90, 127, 175, 186, 215, 245, 278, 283, 326, 354, 358, 375, 377, 383, 389, 401, 405, 407, 411, 413, 414, 418, 443, 449, 456, 488, 489, 490, 496, 500, 501, 502, 504, 505, 510, 577, 582, 591, 592, 595, 596, 598, 599, 600, 672, 674, 687, 709, 846, 847, 848, 850, 852, 854, 855, 856, 984, 997, 1000, 1001, 1011, 1036, 1039, 1045, 1048, 1050], "approv": [375, 390, 414], "approx": [64, 120, 243, 412, 414, 415, 1001, 1008, 1015], "approxim": [0, 2, 23, 43, 44, 64, 69, 80, 86, 111, 124, 125, 129, 138, 145, 146, 168, 171, 186, 194, 211, 212, 225, 229, 233, 236, 237, 238, 241, 244, 260, 269, 274, 284, 290, 291, 298, 309, 311, 312, 314, 318, 321, 350, 352, 356, 358, 367, 372, 384, 387, 389, 404, 405, 408, 410, 411, 412, 414, 417, 419, 420, 421, 431, 448, 468, 469, 472, 473, 474, 475, 481, 482, 483, 490, 496, 502, 521, 524, 533, 534, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 559, 560, 582, 589, 610, 611, 619, 638, 639, 640, 641, 642, 645, 657, 658, 659, 672, 674, 676, 677, 679, 687, 692, 758, 759, 764, 797, 801, 818, 825, 829, 830, 844, 845, 848, 852, 854, 855, 856, 860, 864, 865, 870, 874, 876, 877, 881, 893, 904, 909, 910, 947, 948, 974, 994, 995, 996, 997, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1016, 1017, 1020, 1021, 1022, 1027, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046], "approximate_nearest_neighbor": [289, 1022], "approximateident": 1033, "april": [370, 664, 685, 686, 1001, 1036, 1044, 1049], "apriori": 229, "apt": [373, 383, 393], "aptitud": 186, "aqua": 278, "aquantitypredict": 395, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 99, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 122, 125, 126, 127, 130, 132, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 164, 165, 167, 168, 170, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 215, 220, 222, 229, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 255, 256, 257, 259, 262, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 294, 295, 299, 302, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 337, 339, 341, 343, 346, 347, 350, 351, 352, 354, 356, 357, 358, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 388, 389, 390, 393, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 427, 428, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 508, 509, 510, 512, 515, 516, 517, 518, 519, 520, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 709, 711, 712, 713, 715, 716, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 748, 750, 751, 753, 754, 756, 757, 761, 762, 763, 765, 767, 768, 769, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 926, 927, 928, 930, 931, 934, 935, 936, 940, 942, 943, 947, 948, 949, 952, 953, 954, 956, 957, 960, 963, 964, 966, 971, 974, 975, 979, 980, 981, 984, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "arab": 627, "arabi": [407, 705, 715, 786], "aradwad": 1043, "arafat": 1038, "arai": 1042, "arang": [43, 50, 52, 53, 75, 91, 93, 98, 105, 110, 111, 127, 130, 142, 143, 145, 147, 148, 152, 156, 164, 170, 172, 177, 178, 181, 182, 189, 197, 211, 214, 216, 220, 234, 241, 243, 264, 269, 272, 277, 280, 288, 289, 302, 304, 311, 321, 328, 329, 331, 333, 339, 345, 350, 352, 356, 357, 358, 387, 404, 411, 415, 464, 544, 830, 879, 883, 996, 997, 1005, 1011, 1015], "aravindh": 1047, "arbitarili": 350, "arbitrari": [2, 43, 52, 88, 116, 120, 121, 122, 139, 177, 193, 211, 228, 229, 267, 309, 313, 315, 320, 326, 350, 357, 375, 387, 389, 401, 408, 411, 412, 414, 415, 419, 445, 449, 454, 456, 464, 532, 533, 559, 560, 581, 639, 648, 669, 680, 688, 742, 789, 801, 802, 807, 809, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 868, 870, 883, 990, 992, 993, 997, 998, 1001, 1004, 1011, 1021, 1032, 1033, 1036, 1038, 1039, 1040, 1042, 1046, 1048], "arbitrarili": [171, 255, 260, 350, 389, 417, 430, 464, 481, 482, 483, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 721, 722, 723, 724, 746, 785, 789, 837, 838, 847, 855, 862, 885, 905, 907, 910, 913, 915, 1001, 1004, 1011, 1017], "arc": [372, 414], "archana": [1042, 1044], "archit": 1038, "architectur": [373, 377, 383, 387, 393, 401, 467, 902, 1005, 1025, 1032, 1049], "archiv": [47, 286, 369, 370, 372, 373, 407, 441, 500, 502, 510, 758, 759, 999, 1016], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [708, 1001], "arcidiacono": [1046, 1047, 1049, 1050], "arcsin": [699, 764], "arctan": [70, 255, 260, 371, 518], "arctan2": [254, 256, 259], "ard": [2, 193, 644, 645], "ard_poli": 193, "ard_scor": 193, "ardregress": [2, 193, 197, 645, 940, 997, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049], "area": [2, 50, 52, 150, 168, 211, 229, 248, 266, 269, 276, 278, 279, 339, 343, 344, 347, 372, 375, 379, 387, 407, 415, 702, 706, 707, 708, 788, 789, 998, 1001, 1004, 1019, 1034], "aren": [16, 245, 350, 370, 379, 393, 726, 756, 1006, 1042, 1044], "arezki": 1032, "arfa": 1038, "arff": [323, 375, 496, 1044, 1047, 1048], "arg": [245, 305, 343, 376, 389, 412, 414, 421, 699, 868, 966, 968, 997, 1003, 1004], "arg_sort_bi": 52, "argentina": 764, "argmax": [63, 127, 268, 282, 377, 414, 569, 832, 912, 1016, 1045], "argmin": [51, 145, 268, 377, 409, 531, 537, 545, 546, 685, 779, 780, 1017], "argpartit": 1039, "argsort": [54, 55, 57, 58, 59, 145, 147, 188, 189, 211, 229, 318, 328, 329, 350, 351, 370, 1009], "argument": [2, 104, 147, 189, 212, 239, 242, 245, 318, 363, 369, 370, 375, 376, 378, 380, 381, 383, 384, 387, 389, 407, 408, 411, 412, 414, 416, 418, 419, 421, 425, 429, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 456, 458, 460, 462, 463, 467, 468, 493, 496, 503, 508, 533, 535, 536, 538, 540, 551, 559, 560, 563, 567, 568, 569, 570, 577, 581, 582, 588, 589, 591, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 631, 639, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 668, 676, 677, 681, 684, 688, 692, 696, 698, 699, 700, 701, 702, 714, 719, 735, 742, 763, 779, 780, 806, 823, 825, 826, 827, 828, 829, 831, 832, 833, 836, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 861, 864, 868, 902, 908, 918, 928, 938, 943, 967, 969, 970, 984, 990, 993, 997, 998, 999, 1001, 1004, 1008, 1009, 1016, 1017, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050], "argv": 242, "ari": [72, 91, 351, 407, 705, 1037, 1043], "aria": [1040, 1041, 1047], "aric": 55, "arida": [1041, 1042, 1044, 1046, 1049], "ariel": [45, 370, 1032, 1038], "arif": 1050, "ariga": 1038, "arik": 1040, "arima": 1020, "aris": [2, 186, 272, 346, 363, 380, 383, 407, 715, 997, 998, 1044], "arisa": [1046, 1047], "arithmet": [244, 381, 383, 407, 551, 648, 669, 680, 704, 717, 736, 737, 757, 795, 851, 1001, 1040], "ari\u00f1o": 1035, "arjona": 1041, "arka204": [1045, 1047], "arm": [373, 375, 383, 990], "arm64": [373, 378], "arm64v8": 383, "armstrong": 1044, "arnaud": [0, 397, 1033, 1034, 1035, 1036, 1037, 1038, 1050], "arnaudov": [1044, 1046], "arnaudstiegl": 1042, "arnold": [1032, 1033], "arnoldi": [688, 689, 693], "aroma": 315, "arora": [1040, 1047], "around": [0, 43, 63, 72, 85, 115, 134, 137, 146, 176, 187, 191, 204, 245, 248, 263, 272, 283, 307, 328, 330, 331, 339, 342, 343, 350, 351, 352, 357, 358, 370, 372, 375, 381, 387, 395, 406, 407, 411, 412, 415, 470, 471, 515, 544, 620, 640, 649, 668, 704, 742, 797, 806, 823, 850, 852, 854, 855, 856, 884, 997, 998, 1000, 1001, 1007, 1011, 1015, 1020, 1021, 1024, 1025, 1036, 1037], "arpack": [51, 57, 79, 80, 99, 102, 232, 325, 412, 450, 451, 452, 461, 535, 541, 544, 688, 689, 691, 693, 695, 998, 1038, 1039, 1044, 1048, 1049, 1050], "arpanchowdhri": 1042, "arr": 326, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 80, 86, 87, 94, 95, 97, 102, 104, 112, 115, 118, 121, 122, 145, 147, 149, 150, 153, 156, 165, 168, 171, 172, 173, 178, 186, 193, 195, 197, 205, 206, 211, 212, 218, 228, 232, 233, 238, 242, 245, 248, 249, 252, 254, 255, 256, 258, 259, 263, 264, 265, 267, 269, 270, 273, 274, 278, 288, 302, 312, 318, 321, 322, 324, 325, 329, 335, 342, 343, 350, 356, 358, 362, 363, 368, 369, 370, 375, 376, 377, 378, 380, 381, 383, 385, 387, 388, 389, 401, 404, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 515, 519, 523, 524, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 583, 584, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 926, 927, 928, 929, 930, 931, 932, 935, 936, 946, 947, 948, 949, 950, 952, 954, 955, 962, 963, 964, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 989, 991, 996, 997, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1025, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "arrang": [2, 58, 288, 632, 835, 836, 837, 838, 1001], "array_api": 403, "array_api_compat": 403, "array_api_dispatch": [403, 467, 902], "array_api_support": [403, 923], "array_convert": 931, "array_equ": [569, 1039], "array_lik": 946, "array_paramet": 375, "array_sym": 986, "arrayfunc": [2, 384, 927], "arrow": [63, 395, 1046], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1046, "art": [320, 381, 649, 692, 1025], "artem": [1036, 1039, 1049], "arth": 1046, "arthur": [407, 446, 459, 1037, 1038, 1039, 1040, 1041, 1044, 1046], "arthurmello": 1046, "articl": [0, 55, 102, 350, 370, 374, 375, 383, 411, 420, 474, 705, 997, 1001, 1045], "artiem": 1040, "artifact": [43, 53, 80, 81, 309, 364, 379, 1027], "artifici": [10, 141, 143, 151, 168, 182, 215, 231, 244, 263, 307, 350, 370, 371, 372, 380, 404, 407, 411, 412, 535, 696, 834, 861, 862, 994, 998, 1000, 1002, 1008, 1013, 1017, 1021, 1025, 1032], "artist": [239, 382, 437, 632, 698, 700, 701, 702, 806, 823, 918], "artsiom": 1039, "artsion": 1038, "artstein": 716, "artur": [1047, 1048], "arturo": [0, 386, 1046, 1047, 1048, 1049, 1050], "arturoamor": 1046, "aruku": [1040, 1041], "arunav": 1043, "arunava": 1040, "arxiv": [375, 461], "arya": 1040, "as_float_arrai": [2, 384], "as_fram": [43, 44, 103, 107, 126, 140, 143, 149, 154, 175, 186, 187, 188, 189, 199, 201, 211, 219, 227, 229, 248, 252, 263, 283, 286, 289, 292, 306, 314, 315, 318, 320, 322, 323, 369, 370, 488, 489, 490, 492, 496, 500, 501, 502, 504, 505, 510, 1042, 1043, 1044, 1045, 1048], "asanyarrai": 377, "asarrai": [47, 55, 211, 229, 307, 330, 350, 351, 377, 389, 403, 726, 756, 852, 854, 855, 856, 1011, 1016, 1049], "ascend": [58, 103, 188, 315, 414, 449, 455, 594, 627, 635, 916, 917, 918, 1015, 1042, 1048], "ascent": [175, 417], "ascii": [50, 302, 415, 486, 588, 589, 591], "ascontiguousarrai": 541, "asctim": 120, "aseem": 1039, "asgd": [218, 1015], "ash": [48, 372, 1035, 1038], "ashah002": [1047, 1048, 1049], "ashim": 1042, "ashimb9": 1042, "ashimin": 1045, "ashish": [1045, 1048], "ashra": 644, "ashutosh": [1039, 1040, 1042, 1044], "ashvith": 1045, "ashwin": [1047, 1048], "asia": [269, 1011], "asian": 415, "asid": [144, 219, 401, 559, 560, 561, 562, 666, 667, 668, 676, 678, 861, 862], "asish": [1038, 1039], "ask": [0, 181, 182, 269, 374, 375, 379, 380, 383, 389, 390, 401, 416, 846, 847, 848, 850, 852, 854, 855, 856, 1024, 1048], "asnt": 1038, "aspect": [46, 91, 116, 120, 174, 187, 231, 238, 278, 283, 298, 362, 363, 364, 375, 389, 390, 407, 490, 658, 659, 990, 1017, 1025, 1049], "aspir": [168, 372, 375], "ass": [111, 112, 409, 473], "assembl": [288, 316, 352, 864], "assert": [47, 55, 121, 242, 269, 278, 363, 378, 1021], "assert_all_finit": [2, 362, 384, 467], "assert_allclos": 377, "assert_array_equ": 415, "assert_warn": 1045, "assert_warns_messag": 1045, "assertionerror": 1039, "assess": [44, 52, 72, 93, 134, 144, 146, 186, 211, 229, 248, 265, 266, 268, 272, 405, 414, 701, 743, 1000, 1001, 1007, 1021, 1047], "assia": 1041, "assiaben": 1041, "assign": [47, 55, 58, 70, 72, 80, 82, 90, 91, 93, 134, 139, 150, 152, 164, 166, 172, 224, 229, 238, 243, 246, 263, 304, 311, 316, 326, 333, 346, 351, 370, 375, 377, 389, 404, 411, 412, 414, 415, 416, 417, 439, 440, 441, 442, 444, 445, 446, 447, 448, 451, 453, 455, 458, 459, 460, 461, 515, 536, 561, 562, 593, 594, 607, 608, 610, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 716, 717, 719, 720, 729, 730, 731, 738, 739, 743, 755, 757, 783, 784, 786, 787, 793, 794, 795, 800, 803, 804, 806, 809, 814, 823, 825, 826, 827, 828, 831, 848, 854, 856, 857, 858, 871, 899, 900, 904, 905, 906, 907, 908, 909, 910, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1014, 1025, 1032, 1037, 1039, 1040, 1049, 1050], "assign_label": [80, 407, 451, 461], "assist": [0, 375, 387, 406, 1011, 1024, 1025], "associ": [50, 61, 62, 111, 134, 170, 185, 186, 215, 257, 263, 315, 328, 330, 350, 383, 407, 409, 411, 412, 414, 415, 425, 445, 448, 468, 469, 470, 471, 472, 473, 474, 475, 493, 494, 495, 524, 557, 561, 564, 605, 606, 630, 645, 658, 659, 666, 668, 674, 675, 676, 689, 695, 699, 731, 739, 822, 827, 847, 855, 869, 881, 893, 901, 910, 912, 914, 936, 1000, 1001, 1004, 1011, 1014, 1025, 1032, 1044, 1048], "assum": [48, 70, 88, 90, 177, 182, 185, 186, 201, 211, 229, 238, 241, 248, 260, 269, 278, 309, 346, 352, 363, 374, 375, 377, 381, 387, 388, 389, 392, 401, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 423, 428, 436, 438, 443, 445, 449, 456, 462, 468, 469, 470, 471, 472, 473, 474, 475, 503, 508, 509, 532, 542, 548, 549, 561, 562, 567, 568, 587, 588, 589, 591, 620, 632, 643, 644, 646, 647, 652, 658, 659, 660, 661, 662, 666, 667, 668, 671, 672, 676, 677, 678, 681, 685, 687, 688, 692, 709, 722, 726, 735, 741, 756, 764, 769, 774, 778, 781, 800, 803, 804, 814, 840, 846, 847, 850, 852, 854, 855, 860, 871, 884, 960, 976, 977, 978, 991, 995, 997, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1011, 1015, 1017, 1038, 1044], "assume_cent": [69, 110, 409, 420, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "assume_finit": [362, 363, 467, 902], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 109, 110, 123, 175, 179, 183, 185, 211, 238, 265, 288, 309, 381, 387, 388, 392, 405, 407, 409, 411, 412, 415, 417, 446, 450, 452, 487, 503, 512, 532, 534, 541, 650, 654, 798, 800, 803, 804, 814, 841, 896, 897, 995, 997, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1014, 1017, 1022, 1039, 1045], "assur": [0, 389, 797, 798, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "astel": 1040, "astolfi": 1032, "astrai": 389, "astroml": 1020, "astronom": 1019, "astronomi": 1020, "astropi": 375, "astyp": [43, 53, 72, 76, 79, 86, 93, 95, 99, 112, 143, 145, 161, 185, 187, 202, 203, 229, 234, 244, 248, 263, 280, 289, 316, 401, 415, 991, 997, 1039], "asv": 375, "asv_benchmark": 375, "aswathavicki": 1050, "asymmetr": [146, 213, 389, 1037], "asymmetri": [213, 350], "asymptot": [109, 110, 201, 362, 409, 473, 536, 730, 997, 1000, 1042], "atag": 178, "atariah": 1041, "ateif": 1045, "atharva": 1046, "atheism": [57, 270, 332, 350, 351, 352, 370, 487], "atheist": 350, "athena": 1025, "ation": 415, "atla": [362, 373], "atleast_2d": [146, 377], "atmospher": 175, "atol": [377, 672, 674, 844, 845, 849], "atom": [123, 129, 412, 531, 537, 539, 542, 543, 545, 546, 653, 663, 684, 997, 1032, 1045], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1044, 1045], "attach": [47, 350, 432, 849, 1033, 1043], "attack": [248, 370], "attalla": 1046, "attard": 1045, "attempt": [43, 87, 187, 217, 264, 350, 362, 374, 389, 407, 419, 445, 449, 456, 463, 467, 631, 688, 689, 693, 818, 846, 847, 848, 850, 852, 854, 855, 856, 882, 884, 902, 930, 931, 997, 998, 1004, 1017, 1039, 1044, 1049], "attenberg": 415, "attent": [383, 607, 608, 1015], "attenu": 170, "attia": 797, "attr": [47, 89], "attract": [418, 443, 995, 1004, 1020], "attractador": [1039, 1040], "attrgett": [593, 597], "attribut": [2, 47, 62, 68, 82, 103, 128, 132, 134, 141, 144, 164, 168, 211, 219, 245, 259, 267, 268, 273, 281, 298, 302, 321, 343, 352, 357, 364, 368, 369, 370, 372, 375, 378, 382, 387, 401, 404, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 422, 423, 424, 425, 426, 429, 430, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 736, 795, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 921, 961, 984, 989, 993, 995, 997, 1002, 1004, 1005, 1007, 1011, 1014, 1015, 1016, 1017, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "attributeerror": [408, 559, 577, 961, 1041, 1042, 1044, 1048, 1049], "attrselect": 1032, "atukorala": 1047, "atuo": [1048, 1049], "aubert": 1039, "auc": [2, 50, 62, 168, 211, 229, 248, 266, 269, 273, 276, 278, 279, 325, 405, 702, 708, 788, 1001, 1037, 1040, 1044], "auc_scor": [1032, 1034], "audio": [369, 503], "audrei": 1050, "aufarkari": 1046, "aug": 1016, "augment": [2, 331, 630, 886, 1009, 1025], "augspurg": [1040, 1042], "august": [168, 372, 407, 511, 534, 1016, 1032, 1034, 1035, 1039, 1046], "aura": 1044, "auroc": 1001, "aur\u00e9lien": [1039, 1040, 1041, 1045, 1046], "austin": 1039, "australian": [149, 393], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 375, 378, 383, 387, 389, 390, 411, 450, 534, 871, 993, 1020, 1035], "authorit": 390, "authorship": 379, "auto": [57, 69, 90, 91, 118, 168, 174, 231, 236, 250, 289, 292, 297, 318, 319, 320, 321, 322, 323, 326, 335, 336, 342, 345, 352, 369, 370, 377, 414, 417, 418, 440, 443, 444, 445, 446, 448, 449, 451, 454, 455, 456, 458, 461, 496, 508, 509, 535, 538, 540, 541, 544, 547, 549, 557, 558, 561, 562, 563, 564, 565, 567, 593, 594, 597, 602, 607, 608, 629, 631, 632, 633, 635, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 702, 799, 803, 804, 822, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 861, 862, 877, 878, 885, 896, 897, 901, 904, 905, 906, 907, 908, 909, 910, 914, 915, 947, 948, 966, 969, 992, 995, 997, 998, 1004, 1011, 1020, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "auto_examples_jupyt": 183, "auto_examples_python": 183, "auto_viml": 1044, "auto_wrap_output_kei": 377, "autoclass": 372, "autocorrel": 411, "autolabel": 47, "autom": [270, 378, 379, 393, 692, 990, 997, 998, 1001, 1020, 1025], "automat": [2, 43, 47, 51, 52, 64, 80, 96, 98, 103, 127, 149, 159, 167, 193, 214, 254, 255, 263, 267, 270, 309, 316, 319, 323, 332, 341, 343, 363, 370, 373, 375, 377, 379, 383, 389, 393, 401, 403, 407, 408, 409, 412, 414, 415, 416, 431, 449, 451, 455, 461, 463, 464, 466, 496, 499, 515, 538, 540, 541, 547, 549, 551, 557, 561, 564, 583, 588, 591, 594, 602, 643, 645, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 672, 674, 675, 676, 678, 681, 684, 687, 688, 691, 695, 802, 817, 820, 830, 840, 861, 862, 865, 866, 868, 877, 878, 885, 896, 897, 904, 905, 906, 909, 912, 914, 918, 936, 971, 974, 989, 990, 992, 995, 1000, 1005, 1011, 1015, 1017, 1020, 1021, 1032, 1035, 1036, 1037, 1043, 1046, 1047, 1048, 1049, 1050], "automl": [1001, 1020], "automobil": 1025, "autoregress": 370, "autoviml": 1020, "autoviz": 1044, "auxiliari": [182, 326, 373, 1025, 1047], "av": 1040, "avail": [0, 2, 44, 50, 51, 53, 76, 89, 90, 123, 126, 145, 149, 168, 170, 175, 179, 185, 186, 187, 201, 211, 219, 229, 232, 245, 248, 263, 266, 267, 272, 273, 276, 283, 294, 295, 296, 302, 314, 318, 319, 320, 321, 323, 324, 331, 333, 358, 362, 369, 370, 372, 373, 374, 375, 376, 379, 380, 384, 388, 389, 393, 401, 404, 407, 408, 411, 412, 413, 414, 415, 416, 418, 446, 449, 450, 451, 452, 468, 469, 470, 471, 472, 473, 474, 475, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 508, 535, 549, 555, 556, 557, 558, 559, 560, 564, 565, 567, 568, 569, 570, 593, 594, 602, 610, 611, 627, 632, 633, 647, 651, 653, 655, 657, 661, 663, 665, 668, 670, 671, 672, 673, 674, 675, 676, 689, 696, 699, 732, 733, 800, 803, 804, 814, 826, 827, 832, 833, 834, 835, 836, 837, 838, 850, 861, 862, 864, 871, 880, 883, 888, 892, 897, 901, 956, 961, 990, 991, 995, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1011, 1014, 1015, 1016, 1019, 1020, 1021, 1024, 1025, 1027, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048], "available_if": [2, 89, 389, 1045, 1046, 1049], "avebedrm": [309, 370, 489], "aventi": 51, "aveoccup": [309, 320, 370, 489], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 85, 93, 95, 137, 138, 142, 146, 149, 150, 155, 156, 157, 168, 175, 187, 195, 201, 211, 218, 229, 248, 263, 272, 274, 277, 279, 283, 288, 309, 318, 324, 326, 332, 350, 358, 362, 370, 372, 377, 387, 404, 405, 409, 411, 415, 416, 418, 419, 436, 437, 440, 443, 444, 445, 446, 448, 489, 493, 494, 523, 531, 532, 533, 537, 538, 540, 541, 545, 546, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 570, 587, 594, 632, 633, 648, 658, 659, 666, 667, 669, 672, 674, 676, 677, 678, 680, 687, 700, 703, 704, 706, 707, 708, 713, 720, 721, 723, 725, 726, 728, 729, 730, 734, 735, 736, 738, 739, 740, 743, 745, 746, 748, 750, 751, 753, 756, 764, 781, 782, 783, 784, 785, 787, 788, 790, 791, 795, 796, 797, 798, 828, 831, 850, 870, 885, 986, 991, 996, 997, 1002, 1005, 1007, 1008, 1015, 1016, 1017, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "average_bike_rent": 187, "average_coef_": 1043, "average_feature_effect": 350, "average_intercept_": 1043, "average_linkag": 79, "average_method": [407, 704, 757, 1040], "average_pr": 149, "average_precis": [276, 700, 707, 1001], "average_precision_scor": [2, 276, 700, 706, 708, 782, 788, 1001, 1032, 1035, 1039, 1040, 1046, 1048], "average_week_demand": [43, 149], "averoom": [309, 320, 370, 489], "avg": [45, 68, 102, 165, 267, 307, 328, 329, 569, 704, 713, 822, 1001, 1048], "avg_dist": [75, 781], "avgclaim": 229, "avgclaimamount": 229, "avi": [1044, 1045], "avidar": 1048, "avinash": 1044, "avm19": [1046, 1047, 1049], "avoid": [43, 46, 51, 52, 79, 90, 95, 104, 139, 140, 144, 149, 186, 187, 215, 220, 229, 234, 245, 248, 263, 264, 270, 274, 282, 297, 299, 300, 313, 314, 325, 335, 336, 351, 363, 373, 375, 376, 377, 379, 380, 381, 387, 389, 390, 393, 401, 405, 407, 409, 411, 414, 415, 418, 439, 441, 443, 451, 461, 467, 493, 494, 495, 499, 508, 509, 534, 539, 543, 634, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 689, 691, 693, 695, 712, 792, 800, 801, 805, 811, 814, 825, 826, 827, 864, 867, 873, 874, 876, 881, 882, 883, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 902, 948, 995, 998, 1000, 1001, 1004, 1005, 1007, 1009, 1011, 1016, 1017, 1021, 1024, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "aw": 383, "awai": [62, 63, 64, 93, 109, 142, 170, 171, 175, 214, 263, 343, 344, 370, 405, 417, 628, 846, 847, 854, 855, 1000, 1001, 1016], "await": 319, "awalei": 1040, "awar": [48, 54, 165, 179, 263, 336, 350, 373, 375, 377, 387, 390, 406, 411, 415, 567, 568, 648, 654, 655, 656, 658, 659, 669, 680, 850, 879, 1007, 1011, 1017, 1029, 1032, 1033, 1046], "awesom": 1025, "awwwyan": 1050, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 86, 88, 89, 90, 97, 99, 104, 107, 111, 113, 116, 118, 120, 126, 130, 134, 136, 139, 141, 143, 144, 149, 151, 152, 154, 155, 156, 173, 174, 179, 181, 185, 186, 187, 188, 189, 191, 193, 194, 197, 201, 203, 204, 207, 208, 209, 211, 212, 213, 215, 216, 219, 220, 222, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 239, 244, 248, 249, 251, 254, 256, 259, 263, 264, 265, 266, 269, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 297, 299, 300, 304, 305, 306, 309, 311, 312, 313, 314, 315, 316, 318, 319, 322, 323, 325, 335, 336, 337, 338, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 354, 355, 371, 378, 412, 417, 437, 534, 541, 550, 631, 632, 697, 698, 700, 701, 702, 718, 806, 823, 918, 921, 1001, 1004, 1008, 1029, 1042, 1048], "ax0": [105, 107, 211, 241, 351], "ax1": [46, 49, 90, 93, 98, 100, 105, 107, 111, 118, 143, 182, 189, 204, 211, 239, 241, 249, 254, 272, 280, 310, 314, 315, 331, 350, 351, 371], "ax2": [46, 90, 93, 98, 100, 111, 118, 143, 182, 189, 204, 211, 239, 249, 254, 272, 280, 299, 310, 314, 315, 331, 350, 371], "ax3": [98, 331], "ax4": 98, "ax_": [150, 262, 272, 276, 278, 282, 292, 314, 318, 382, 437, 631, 697, 698, 700, 701, 702, 806, 823], "ax_bc": 313, "ax_bottom": 382, "ax_calibration_curv": [62, 64], "ax_colorbar": 309, "ax_det": 266, "ax_histi": 309, "ax_histx": 309, "ax_histx_zoom": 309, "ax_histy_zoom": 309, "ax_idx": 271, "ax_origin": 313, "ax_qt": 313, "ax_roc": 266, "ax_row": 70, "ax_scatt": 309, "ax_scatter_zoom": 309, "ax_top_left": 382, "ax_top_right": 382, "ax_yj": 313, "ax_zoom_in": 309, "ax_zoom_out": 309, "axarr": [155, 309], "axes_": [149, 151, 249, 319, 325, 382, 632], "axes_idx": 313, "axes_list": 313, "axes_row": 203, "axesimag": 697, "axhlin": [127, 159, 202, 268, 272], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 81, 83, 85, 86, 87, 88, 94, 103, 104, 107, 113, 116, 118, 120, 121, 122, 123, 124, 129, 136, 137, 141, 142, 150, 153, 157, 161, 164, 174, 179, 181, 185, 186, 195, 200, 201, 205, 206, 211, 216, 220, 223, 225, 226, 228, 229, 232, 233, 236, 238, 242, 243, 247, 254, 256, 258, 259, 265, 266, 270, 271, 276, 278, 279, 282, 288, 289, 294, 295, 296, 299, 300, 301, 307, 309, 313, 316, 325, 329, 331, 333, 335, 338, 339, 342, 344, 345, 346, 348, 350, 351, 355, 356, 357, 370, 377, 384, 389, 405, 407, 415, 419, 437, 444, 463, 466, 531, 533, 536, 537, 539, 541, 543, 545, 546, 550, 585, 612, 631, 632, 685, 686, 701, 763, 779, 780, 781, 782, 806, 823, 832, 873, 874, 881, 882, 884, 889, 890, 891, 893, 894, 895, 918, 926, 930, 931, 950, 975, 981, 991, 1001, 1008, 1011, 1016, 1040, 1042, 1044, 1049, 1050], "axis_idx": 43, "axis_list": 122, "axp": 51, "axvlin": [86, 93, 105, 113, 127, 145, 156, 186, 188, 189, 201, 275, 283, 346], "ayako": 1044, "ayan": 1046, "ayc\u0131": 1050, "aydor": [1039, 1040, 1043], "ayerdi": 1036, "aymer": 1033, "aymericbasset": 1048, "ayomid": 1042, "ayush": [1040, 1045], "ayzenshtat": [1025, 1040], "azaria": [1047, 1048], "azencott": 1046, "azim": [100, 126, 187, 231, 235], "azur": [0, 375], "b": [0, 2, 47, 49, 61, 63, 92, 98, 111, 127, 136, 137, 142, 146, 147, 157, 159, 171, 172, 173, 178, 182, 196, 197, 200, 211, 212, 217, 229, 246, 248, 263, 268, 272, 274, 279, 284, 288, 321, 331, 358, 370, 372, 375, 379, 380, 381, 404, 405, 407, 410, 411, 412, 415, 436, 481, 498, 500, 541, 566, 588, 589, 590, 591, 607, 608, 610, 611, 628, 646, 647, 648, 649, 658, 669, 672, 674, 676, 680, 687, 688, 705, 719, 730, 731, 792, 793, 811, 812, 851, 877, 878, 879, 880, 883, 884, 892, 919, 932, 948, 949, 963, 965, 991, 993, 997, 998, 999, 1001, 1004, 1006, 1011, 1015, 1016, 1032, 1040, 1043, 1045, 1046, 1047], "b0noi": 1038, "b0rxington": 1047, "b1": [225, 295, 338], "b12": [211, 229], "b1996": 414, "b1998": 414, "b1999": 414, "b2": [225, 295, 338], "b2001": 414, "b2011": 407, "b2c": 1025, "b30065": 311, "b5": 323, "b7a2ff": 313, "b_1": 1005, "b_2": 1005, "b_column": 719, "b_i": 1006, "b_iv_i": 1006, "b_j": 407, "b_k": 407, "b_mask": 278, "b_row": 719, "b_true": 278, "ba": [51, 861, 862, 1005], "baak": 1046, "baam": [1045, 1046], "babino": [1045, 1046], "bac": 51, "bach": [412, 531, 536, 537, 538, 658, 997], "bachant": 1039, "back": [43, 125, 250, 363, 373, 375, 389, 390, 401, 408, 415, 432, 442, 445, 446, 458, 481, 482, 483, 508, 509, 533, 534, 535, 538, 540, 541, 544, 581, 630, 658, 659, 666, 667, 668, 676, 677, 678, 728, 869, 871, 872, 873, 877, 878, 879, 881, 882, 884, 896, 897, 904, 953, 997, 1001, 1005, 1021, 1035, 1040, 1042, 1043, 1046, 1050], "backend": [2, 363, 378, 389, 467, 902, 966, 970, 1001, 1035, 1040, 1041, 1042, 1043], "background": [44, 50, 81, 99, 150, 307, 311, 370, 375, 383, 407, 493, 494, 998, 1006, 1015, 1042], "background_point": 50, "backlink": 1037, "backport": [379, 384, 1039], "backprop": [1005, 1015], "backpropag": 1005, "backslash": 1047, "backtick": [375, 380], "backup": [508, 1032], "backward": [168, 245, 320, 378, 389, 416, 496, 577, 602, 614, 615, 618, 619, 620, 622, 623, 917, 926, 1005, 1021, 1032, 1035, 1040, 1041, 1042, 1044, 1046, 1048], "bad": [93, 94, 171, 176, 186, 263, 326, 350, 358, 375, 407, 417, 692, 746, 990, 997, 998, 1003, 1009, 1032], "badaracco": 1045, "badli": [201, 211, 350, 364, 884, 997, 1011], "badr": 1047, "baeza": [590, 730, 1035], "bag": [2, 14, 64, 102, 122, 133, 138, 140, 148, 183, 188, 286, 351, 352, 371, 405, 516, 517, 518, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 741, 805, 830, 913, 999, 1002, 1022, 1023, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1045, 1046, 1048], "bagai": 1045, "baggingclassifi": [2, 389, 398, 414, 556, 914, 940, 991, 1035, 1038, 1039, 1040, 1043, 1047, 1048, 1050], "baggingregressor": [2, 137, 398, 414, 555, 915, 991, 1035, 1038, 1040, 1043, 1047, 1048, 1050], "baggipont": 1050, "baharev": 1037, "bahavior": 350, "bahaviour": 350, "baibak": [1040, 1041], "bail": 1043, "bailei": [407, 704], "bajic": 1047, "baji\u0107": 1047, "bakir2003": 412, "bakiri": [834, 1002], "bak\u0131r": [44, 412, 535], "bala": [1032, 1035], "balakumaran": [1039, 1040], "balanc": [2, 43, 45, 52, 64, 86, 99, 104, 134, 140, 144, 167, 183, 215, 216, 261, 267, 270, 272, 273, 283, 309, 364, 387, 389, 405, 406, 411, 412, 414, 502, 515, 534, 540, 541, 547, 557, 561, 564, 640, 658, 659, 666, 668, 674, 675, 676, 703, 708, 729, 743, 782, 787, 800, 801, 818, 864, 904, 906, 909, 912, 914, 935, 936, 990, 1016, 1017, 1022, 1032, 1034, 1037, 1038, 1041, 1042, 1046], "balanced_accuraci": [283, 708, 822, 1001, 1040], "balanced_accuracy_scor": [2, 703, 787, 1001, 1040], "balanced_subsampl": [557, 564, 1040], "balaz": 1036, "baldi": 743, "ball": [102, 294, 302, 407, 413, 447, 692, 844, 845, 849, 852, 854, 855, 856, 1032, 1034, 1037, 1043], "ball_tre": [302, 418, 443, 445, 449, 456, 688, 689, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1004, 1032, 1049], "balltre": [2, 418, 443, 445, 449, 456, 688, 689, 699, 846, 847, 848, 849, 850, 852, 854, 855, 856, 998, 1032, 1034, 1036, 1040, 1045, 1048, 1049], "baloo": 998, "baluyot": 1041, "bamidel": 1042, "banana": [48, 1001], "band": [52, 272, 311, 1011], "bandit": 990, "bandol": 315, "bandwidth": [2, 48, 79, 96, 244, 293, 294, 302, 387, 389, 407, 413, 447, 457, 460, 844, 845, 849, 994, 1007, 1043, 1047], "bandwidth_": 849, "bangda": 1040, "banik": 1050, "banilo": [1036, 1037], "bank": [51, 57, 1025], "bannerje": [1048, 1049], "bansal": 1039, "bansod": [1037, 1038, 1039], "bao": [1038, 1046], "baod": 407, "baptbillard": 1045, "baptist": [1035, 1043], "bar": [47, 49, 54, 104, 140, 141, 143, 144, 147, 156, 164, 168, 178, 181, 187, 193, 254, 259, 268, 270, 274, 288, 314, 315, 322, 323, 351, 377, 410, 581, 632, 648, 669, 680, 1001, 1008, 1015, 1017, 1038, 1039, 1040, 1041], "bar_color": 47, "bar_kw": 632, "bar_siz": 350, "baran": 1042, "barang": 1048, "baraniuk": 416, "barankaraku": 1044, "barata": 1048, "barber": 532, "barberogaston": 1044, "bardiya": [1046, 1047], "bare": [370, 998], "barh": [54, 147, 181, 182, 185, 186, 188, 189, 252, 316, 350, 351, 352], "barikbin": 1048, "barkhorn": 1040, "barklei": 1042, "barmalei": [1036, 1037], "barn": [692, 998, 1037, 1039, 1042, 1050], "barnes_hut": [289, 692, 1039, 1040], "barnett": 1040, "barnhil": [593, 594], "barnowski": [1046, 1047], "barreca": [885, 1011], "barreto": 1046, "barri": [370, 1040], "barrier": 415, "barrycg": 1042, "bars_": 632, "bartelheim": 1043, "barth\u00e9lemi": [1048, 1049], "bartosz": 1041, "bart\u0142omiej": 1047, "barycent": [301, 1032], "basbug": 1039, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 82, 89, 90, 91, 100, 102, 103, 107, 111, 120, 121, 126, 132, 134, 135, 140, 144, 145, 146, 147, 149, 152, 154, 157, 162, 165, 166, 170, 175, 176, 178, 187, 188, 189, 192, 193, 198, 199, 200, 201, 204, 206, 207, 211, 212, 219, 228, 229, 231, 238, 245, 246, 248, 266, 267, 272, 282, 286, 288, 289, 302, 307, 309, 310, 312, 314, 320, 322, 326, 333, 337, 343, 351, 354, 362, 369, 370, 371, 372, 373, 376, 377, 378, 379, 383, 387, 389, 390, 392, 401, 403, 405, 406, 408, 412, 413, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 443, 444, 445, 446, 447, 448, 449, 451, 455, 456, 460, 462, 463, 464, 465, 466, 486, 500, 501, 508, 509, 532, 533, 535, 536, 537, 538, 539, 541, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 578, 588, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 616, 617, 618, 621, 624, 632, 633, 635, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 664, 669, 671, 672, 673, 674, 675, 680, 682, 683, 685, 686, 687, 690, 692, 704, 717, 726, 735, 736, 737, 739, 741, 755, 756, 757, 785, 788, 795, 799, 800, 802, 803, 804, 806, 807, 809, 814, 816, 818, 819, 820, 821, 828, 830, 834, 835, 838, 846, 847, 848, 850, 852, 854, 855, 856, 861, 862, 865, 866, 869, 876, 877, 879, 883, 884, 885, 893, 896, 897, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 920, 922, 924, 933, 942, 953, 969, 990, 992, 993, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1050], "base_classifi": [331, 333, 1014], "base_clf": 436, "base_estim": [405, 553, 554, 555, 556, 835, 838, 901, 990, 1043, 1045, 1046, 1047, 1048], "base_estimator_": [553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 610, 1047], "base_estimator__": 1047, "base_lr": [288, 835], "base_model": 406, "base_x_test": 109, "base_x_train": 109, "basebag": [1038, 1040], "basebal": [57, 370], "basedecisiontre": [1040, 1041, 1044], "basedictionarylearn": 1032, "baseensembl": [1039, 1042], "baseestim": [2, 89, 132, 245, 289, 375, 388, 389, 417, 422, 424, 425, 429, 430, 431, 601, 632, 633, 940, 953, 1032, 1039, 1042, 1044, 1046, 1047], "basegradientboost": 1033, "baselabelpropag": 1039, "baselibsvm": 1042, "baselin": [62, 134, 143, 146, 157, 168, 189, 193, 229, 263, 279, 288, 320, 351, 372, 407, 416, 551, 552, 634, 1001, 1004, 1048], "baseline_similar": 178, "baseline_similarity_bound": 178, "basemap": [50, 302], "basemixtur": [1040, 1041], "basemultilayerperceptron": [1040, 1042], "basenb": 1042, "baserandomproject": [896, 897], "basesearchcv": [1039, 1040], "basesgd": 1015, "basesgdclassifi": 1041, "baseshufflesplit": 1045, "bash": [363, 383], "bashrc": 383, "basi": [2, 43, 45, 53, 125, 170, 175, 177, 212, 263, 306, 321, 339, 343, 367, 373, 376, 407, 412, 414, 451, 534, 622, 632, 639, 691, 883, 999, 1011, 1016, 1023, 1027, 1040, 1042, 1045], "basic": [146, 169, 170, 175, 176, 178, 179, 182, 183, 209, 283, 316, 344, 362, 364, 375, 377, 379, 387, 389, 407, 411, 412, 414, 611, 622, 900, 912, 913, 914, 915, 990, 991, 1004, 1015, 1019, 1020, 1021, 1022, 1025], "basicconfig": 120, "basil": 1039, "basilisk": 1020, "basis_1": 212, "basis_2": 212, "basri": 513, "bassett": 997, "bastiaan": [1033, 1034], "bastian": 1040, "bat": 373, "batch": [2, 47, 50, 97, 120, 124, 302, 322, 364, 384, 389, 415, 439, 441, 446, 448, 450, 452, 531, 533, 534, 536, 537, 538, 539, 540, 542, 543, 545, 546, 664, 685, 686, 805, 818, 819, 839, 840, 841, 842, 843, 861, 862, 873, 874, 884, 897, 951, 966, 1005, 1006, 1015, 1032, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1047, 1048], "batch_dict_estim": 120, "batch_pca_estim": 120, "batch_siz": [2, 54, 57, 77, 97, 120, 123, 124, 351, 412, 448, 534, 536, 537, 538, 539, 546, 860, 861, 862, 951, 952, 966, 1033, 1040, 1043, 1045, 1046], "batch_size_": 534, "batchkarov": [1033, 1037], "batiss": 1043, "batista": [1040, 1041, 1045], "batistaki": 407, "batoul": 1045, "battista": 1043, "batula": 1039, "bauk": [1040, 1041], "baum": 445, "baumgartn": 1039, "baxlei": 1039, "bay": [2, 32, 64, 67, 137, 152, 170, 201, 259, 271, 350, 370, 405, 412, 414, 415, 536, 549, 550, 656, 839, 840, 841, 842, 843, 885, 995, 996, 997, 1011, 1023, 1027, 1032, 1033, 1034, 1035, 1040, 1042, 1045, 1047], "bayer": [0, 1032, 1033, 1037, 1050], "bayesian": [2, 46, 64, 87, 98, 118, 182, 183, 192, 197, 199, 212, 217, 253, 255, 259, 260, 272, 280, 284, 294, 299, 310, 314, 412, 436, 524, 528, 532, 611, 644, 645, 656, 657, 797, 798, 865, 867, 879, 884, 990, 1020, 1022, 1023, 1026, 1027, 1038, 1045], "bayesiangaussianmixtur": [2, 254, 255, 260, 798, 1000, 1038, 1040, 1041, 1045, 1046, 1050], "bayesianridg": [2, 87, 181, 193, 194, 197, 320, 627, 644, 997, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049], "baz": [377, 581], "baze": 1041, "bbbbbb": 97, "bbox": [48, 51, 70, 254, 255, 256, 259, 260, 311], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 179, 274, 345], "bc": 313, "bcde": 143, "bcross_val": 1032, "bde": 143, "bdegraaff": 1047, "bdt": 136, "beach": 1040, "beam": [137, 1032], "bear": [414, 1020], "bearer": 1040, "beatrizsmg": 1044, "beauchamp": [1033, 1036], "beaugnon": 1042, "becam": [154, 390, 1040], "becaus": [43, 44, 52, 57, 62, 64, 75, 81, 83, 103, 113, 116, 134, 139, 146, 149, 168, 171, 174, 177, 186, 187, 189, 194, 198, 205, 211, 215, 217, 219, 229, 244, 245, 255, 263, 266, 269, 270, 275, 288, 289, 305, 306, 307, 309, 313, 314, 315, 316, 330, 339, 343, 350, 351, 352, 354, 357, 358, 362, 363, 370, 379, 380, 383, 387, 388, 389, 398, 401, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 417, 420, 430, 446, 447, 460, 464, 474, 481, 482, 483, 534, 536, 552, 554, 556, 558, 560, 562, 563, 565, 568, 570, 607, 608, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 676, 677, 678, 679, 680, 689, 699, 709, 712, 713, 721, 722, 723, 724, 746, 763, 785, 788, 794, 800, 814, 828, 832, 837, 838, 847, 850, 852, 854, 855, 856, 862, 873, 874, 882, 884, 885, 889, 890, 892, 893, 894, 895, 905, 907, 910, 913, 915, 923, 964, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1006, 1008, 1011, 1016, 1017, 1025, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1048], "becker": [407, 1025, 1035, 1044], "becom": [83, 88, 90, 104, 111, 144, 186, 204, 213, 215, 245, 248, 271, 289, 310, 314, 339, 343, 350, 358, 369, 375, 377, 379, 383, 389, 390, 407, 409, 414, 415, 417, 439, 449, 453, 454, 456, 581, 588, 589, 591, 619, 627, 658, 659, 676, 678, 878, 904, 905, 911, 996, 997, 998, 1000, 1004, 1011, 1016, 1033, 1040, 1041, 1044, 1045, 1046, 1047, 1049], "bednar": 1039, "bedroom": [309, 370], "been": [0, 43, 48, 63, 79, 86, 93, 112, 125, 132, 134, 147, 168, 170, 175, 177, 186, 189, 235, 238, 240, 245, 246, 267, 269, 275, 276, 318, 319, 320, 321, 322, 324, 325, 326, 330, 350, 358, 363, 369, 370, 372, 373, 374, 375, 377, 379, 381, 383, 384, 387, 388, 389, 390, 398, 401, 404, 405, 406, 407, 409, 411, 412, 414, 417, 432, 436, 468, 470, 471, 473, 477, 486, 523, 534, 536, 549, 550, 567, 568, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 633, 634, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 720, 778, 779, 780, 793, 800, 803, 804, 806, 814, 822, 823, 828, 829, 853, 901, 904, 991, 993, 994, 996, 997, 998, 1001, 1002, 1004, 1007, 1011, 1013, 1015, 1016, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "befor": [2, 47, 51, 62, 77, 102, 104, 107, 116, 144, 149, 154, 164, 177, 179, 180, 181, 183, 186, 187, 189, 195, 197, 199, 201, 205, 245, 263, 269, 276, 291, 292, 310, 313, 314, 316, 321, 342, 358, 362, 363, 370, 373, 375, 377, 379, 380, 381, 383, 384, 387, 389, 390, 392, 393, 401, 403, 405, 407, 408, 409, 411, 412, 414, 416, 419, 420, 442, 446, 447, 448, 458, 460, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 489, 501, 534, 537, 538, 539, 540, 541, 544, 546, 547, 561, 562, 565, 567, 569, 570, 577, 588, 589, 591, 611, 627, 628, 630, 645, 666, 667, 668, 671, 676, 678, 687, 692, 694, 797, 798, 805, 806, 818, 819, 821, 826, 828, 830, 844, 845, 852, 853, 854, 855, 856, 859, 864, 865, 868, 871, 878, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 901, 912, 913, 923, 948, 984, 991, 997, 998, 1001, 1007, 1011, 1015, 1016, 1017, 1021, 1022, 1032, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "beforehand": [252, 292, 1017], "begin": [57, 132, 168, 170, 264, 271, 288, 321, 350, 358, 375, 380, 381, 389, 404, 407, 414, 553, 554, 559, 561, 562, 666, 667, 676, 677, 678, 990, 993, 997, 1001, 1011, 1013, 1015, 1040, 1046, 1047], "beginn": 1021, "behav": [43, 51, 85, 90, 215, 263, 264, 309, 320, 339, 358, 375, 381, 388, 407, 408, 411, 884, 997, 1011, 1016, 1018, 1021, 1032, 1039, 1041, 1045, 1046], "behavior": [62, 72, 74, 85, 181, 183, 186, 187, 200, 208, 211, 229, 245, 252, 260, 261, 263, 272, 274, 306, 307, 309, 311, 316, 339, 358, 363, 369, 372, 375, 377, 379, 383, 384, 389, 403, 405, 406, 407, 411, 414, 415, 536, 551, 566, 666, 667, 668, 676, 677, 678, 699, 701, 729, 730, 783, 784, 787, 800, 801, 802, 805, 814, 817, 818, 819, 820, 821, 841, 877, 904, 905, 990, 997, 1001, 1002, 1007, 1011, 1016, 1022, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "behaviour": [74, 125, 149, 212, 213, 229, 341, 375, 389, 401, 407, 414, 559, 560, 564, 565, 602, 801, 802, 805, 817, 818, 819, 820, 821, 902, 912, 913, 973, 990, 991, 1001, 1011, 1040, 1043, 1044, 1047, 1048], "behind": [37, 86, 111, 134, 286, 377, 379, 383, 409, 414, 1000, 1004, 1013, 1048], "behrend": 1042, "behrouz": 1046, "behzad": 1038, "beier": 1043, "beimportantfew": 395, "being": [61, 64, 70, 85, 88, 113, 116, 125, 134, 138, 149, 151, 170, 175, 188, 191, 206, 245, 248, 262, 269, 307, 313, 314, 339, 343, 350, 352, 373, 374, 375, 377, 380, 387, 389, 390, 406, 407, 409, 411, 414, 415, 416, 417, 418, 420, 440, 441, 443, 444, 449, 455, 468, 474, 493, 523, 569, 640, 649, 656, 672, 674, 687, 690, 694, 712, 718, 734, 736, 783, 789, 797, 844, 845, 850, 852, 854, 855, 856, 879, 897, 949, 990, 991, 997, 1000, 1001, 1004, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1032, 1033, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "beings": 350, "beirouti": 1039, "belatedli": 1039, "belief": [57, 269, 860, 1006], "believ": [350, 351, 383, 387, 1025], "belkin": 998, "belkina": [692, 998], "bell": [2, 521, 1040, 1042, 1044, 1045], "bella": 1001, "bella2012": 1001, "bellet": [1039, 1040, 1041], "belmont": [912, 913, 1017], "belong": [61, 64, 66, 88, 93, 248, 269, 318, 324, 330, 369, 370, 404, 405, 407, 408, 410, 411, 414, 422, 439, 442, 446, 447, 448, 450, 452, 523, 712, 731, 807, 813, 825, 871, 885, 956, 957, 997, 1000, 1001, 1003, 1004, 1005, 1007, 1016, 1020], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 88, 93, 102, 107, 111, 120, 132, 138, 141, 146, 163, 185, 187, 211, 213, 227, 228, 232, 236, 240, 245, 248, 250, 252, 264, 267, 272, 274, 275, 276, 309, 313, 318, 319, 320, 321, 322, 323, 324, 325, 326, 344, 350, 357, 358, 363, 368, 369, 373, 375, 377, 379, 380, 384, 389, 390, 393, 395, 407, 409, 410, 411, 412, 414, 415, 416, 417, 443, 445, 447, 470, 471, 477, 490, 492, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 510, 531, 537, 542, 548, 582, 595, 596, 597, 598, 599, 600, 633, 646, 652, 658, 659, 667, 668, 673, 675, 692, 699, 705, 743, 763, 797, 798, 800, 811, 814, 833, 864, 867, 877, 878, 881, 887, 893, 990, 991, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1018, 1020, 1028, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1050], "beltran": 1050, "ben": [1034, 1035, 1036, 1039, 1040, 1041, 1044, 1049], "ben3940": 1046, "benavoli": 269, "benbihi": 1041, "bench_k_mean": 91, "benchmark": [289, 320, 351, 352, 362, 368, 370, 375, 387, 393, 400, 405, 467, 515, 902], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 343, "benedek": 1048, "benedikt": 1036, "benediktsson": [1032, 1033, 1034], "benefici": [104, 106, 109, 120, 152, 263, 309, 310, 326, 401, 406, 998], "benefit": [43, 80, 89, 106, 107, 134, 135, 144, 149, 186, 225, 235, 241, 243, 263, 291, 322, 362, 375, 384, 389, 405, 407, 447, 460, 467, 508, 567, 568, 658, 659, 666, 667, 668, 676, 677, 678, 835, 902, 904, 990, 996, 1004, 1011, 1021, 1025, 1032, 1035, 1036, 1037, 1044, 1045, 1046, 1047], "benfield": 1039, "bengio": [269, 861, 862, 990, 1014], "bengtsson": 1036, "benhel": 376, "benhur": 1045, "benign": [168, 372, 500], "benjamin": [641, 1034, 1035, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "benjamini": [595, 1038, 1039], "benjaminirv": 1037, "benjastudio": [1040, 1041], "benn": 1040, "bennett": [168, 372, 1001], "benni": 1046, "benoit": 1049, "beno\u00eet": 1045, "benson": 57, "bentlei": 1004, "bera": 1047, "berei": 1046, "beren": 692, "berenbaum": 1048, "bereng": 1045, "berg": [370, 1033, 1034, 1044, 1049], "bergman": [1049, 1050], "bergstra": [990, 1032, 1033], "berk": 1032, "berkecanrizai": 1047, "berkelei": [641, 912, 913], "berlin": [175, 407, 412, 535, 696, 726, 756, 1001], "bernardo": 1038, "bernd": 1047, "bernhard": [44, 412, 535, 835, 870, 900, 1002, 1007, 1016, 1038], "bernhardsson": 1025, "berni": 1043, "bernoulli": [2, 307, 415, 416, 839, 840, 841, 842, 843, 860, 861, 862, 867, 997, 1011, 1023, 1027, 1032], "bernoullinb": [2, 152, 364, 840, 841, 842, 843, 1002, 1003, 1033, 1034, 1036, 1039, 1044, 1045, 1047], "bernoullirbm": [2, 307, 861, 862, 1006, 1011, 1034, 1035, 1044, 1046, 1049], "bertin": 1025, "bertoncelj": 1043, "bertrand": [0, 396, 1032, 1038, 1039, 1044, 1045], "bertrandhaut": [1040, 1041], "besid": [154, 241, 283, 375, 380, 589, 990, 1040], "bessel": [417, 619], "bessi": 323, "besson": [1037, 1038], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 80, 87, 88, 94, 102, 103, 104, 105, 109, 115, 120, 124, 127, 128, 129, 137, 140, 143, 145, 146, 147, 149, 154, 157, 168, 170, 171, 176, 181, 186, 193, 197, 199, 201, 204, 225, 226, 227, 231, 234, 238, 243, 244, 248, 255, 256, 260, 262, 263, 267, 268, 269, 270, 273, 276, 277, 280, 281, 284, 288, 293, 298, 310, 315, 320, 321, 326, 339, 342, 343, 350, 351, 352, 356, 362, 363, 369, 372, 374, 375, 378, 381, 388, 389, 393, 398, 401, 404, 405, 406, 407, 411, 412, 414, 415, 416, 417, 430, 442, 445, 446, 448, 450, 451, 452, 458, 461, 464, 471, 481, 482, 483, 538, 545, 546, 552, 554, 556, 557, 558, 559, 560, 562, 564, 565, 566, 568, 570, 593, 594, 597, 602, 610, 611, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 688, 689, 690, 693, 694, 703, 708, 719, 720, 721, 722, 723, 724, 728, 729, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 783, 784, 785, 787, 790, 791, 792, 793, 794, 796, 797, 798, 800, 803, 804, 814, 827, 829, 832, 837, 838, 847, 855, 861, 862, 905, 907, 910, 912, 913, 914, 915, 990, 995, 996, 997, 998, 1001, 1004, 1005, 1007, 1015, 1017, 1020, 1021, 1025, 1032, 1035, 1038, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1050], "best_alpha": 1032, "best_c": 346, "best_c_scal": 346, "best_clf": 105, "best_estim": [800, 803, 804, 814], "best_estimator_": [45, 87, 104, 105, 106, 109, 127, 244, 259, 263, 267, 269, 270, 273, 281, 293, 800, 803, 804, 814, 990, 1039], "best_idx": [57, 268], "best_index": [267, 273], "best_index_": [268, 273, 800, 803, 804, 814], "best_loss": [676, 678], "best_loss_": [861, 862, 1047], "best_low_complex": 268, "best_n_it": 458, "best_paramet": 270, "best_parameters_": 259, "best_params_": [103, 105, 146, 170, 244, 259, 267, 273, 320, 339, 388, 800, 803, 804, 814, 990], "best_recal": 267, "best_recall_std": 267, "best_recall_threshold": 267, "best_scor": 273, "best_score_": [103, 105, 244, 263, 270, 273, 274, 339, 406, 673, 675, 800, 803, 804, 814, 822, 1043], "best_score_idx": 268, "best_threshold_": [263, 283, 326, 822], "best_validation_score_": [861, 862, 1047], "beta": [2, 80, 115, 185, 215, 381, 405, 407, 410, 536, 538, 540, 547, 644, 729, 730, 736, 742, 783, 795, 797, 1001, 1034, 1037, 1039, 1041, 1042], "beta_": [215, 412], "beta_1": [861, 862], "beta_2": [861, 862], "beta_k": 412, "beta_loss": [54, 538, 540, 547, 1039], "betatim": 1047, "better": [43, 44, 48, 52, 57, 58, 61, 67, 83, 88, 106, 107, 109, 110, 111, 112, 116, 120, 123, 126, 137, 140, 144, 145, 146, 149, 154, 163, 174, 175, 176, 178, 181, 186, 188, 194, 197, 198, 201, 204, 211, 212, 213, 219, 226, 228, 229, 235, 243, 244, 245, 248, 259, 262, 263, 269, 271, 272, 275, 278, 279, 282, 286, 288, 307, 313, 314, 322, 323, 339, 346, 350, 351, 352, 354, 358, 362, 370, 374, 375, 376, 377, 380, 381, 383, 389, 392, 395, 403, 405, 407, 409, 411, 412, 413, 414, 415, 417, 448, 449, 538, 540, 547, 559, 560, 561, 562, 607, 608, 630, 671, 677, 692, 709, 725, 734, 739, 742, 763, 798, 829, 839, 840, 841, 842, 843, 844, 845, 850, 861, 862, 881, 882, 885, 893, 896, 897, 904, 905, 990, 991, 993, 994, 995, 997, 998, 1000, 1001, 1003, 1004, 1005, 1009, 1011, 1014, 1015, 1017, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "better_prob": 269, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 86, 93, 94, 99, 115, 123, 125, 126, 128, 134, 137, 140, 143, 144, 146, 149, 163, 170, 175, 176, 178, 183, 185, 186, 187, 188, 193, 197, 198, 200, 203, 204, 207, 208, 211, 212, 213, 215, 216, 219, 229, 231, 238, 243, 245, 248, 261, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 282, 283, 286, 288, 291, 295, 296, 298, 299, 309, 314, 316, 321, 326, 331, 339, 343, 345, 346, 350, 351, 352, 357, 358, 362, 363, 370, 375, 377, 379, 383, 384, 387, 388, 389, 390, 398, 401, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 428, 439, 440, 442, 443, 444, 445, 446, 449, 451, 452, 453, 455, 456, 457, 462, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 514, 515, 521, 524, 527, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 549, 550, 553, 554, 559, 560, 562, 563, 564, 565, 584, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 620, 627, 632, 633, 634, 639, 642, 645, 646, 647, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 676, 678, 679, 681, 684, 688, 690, 692, 694, 695, 696, 699, 701, 703, 704, 705, 707, 709, 710, 714, 715, 716, 717, 719, 724, 725, 726, 729, 730, 731, 734, 736, 737, 743, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 805, 809, 817, 818, 819, 820, 821, 829, 830, 832, 834, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 868, 871, 872, 874, 875, 877, 878, 881, 882, 883, 885, 890, 893, 894, 898, 904, 905, 909, 912, 913, 914, 915, 917, 945, 957, 958, 969, 990, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "bewar": 416, "beyond": [43, 64, 212, 213, 263, 362, 364, 374, 375, 387, 405, 414, 729, 730, 738, 783, 784, 787, 909, 998, 1002, 1011, 1016, 1021, 1040], "beyst": 1046, "bezuidenhout": 1045, "bf5fff": 118, "bfg": [305, 610, 611, 648, 649, 658, 669, 672, 674, 680, 687, 1004, 1005, 1047], "bgm": 797, "bharat": [411, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "bharathi": 1043, "bhardwaj": [1039, 1040], "bhargav": 1038, "bhaskaran": [1039, 1040], "bhat": [1045, 1047, 1048, 1049], "bhattacharya": 1040, "bhattarai": 1042, "bhavika": 1044, "bhoomika": 1047, "bhsu": 1036, "bhtsne": [692, 1039], "bi": [88, 415], "bia": [43, 64, 109, 122, 133, 141, 146, 149, 183, 186, 188, 193, 194, 196, 274, 304, 343, 346, 358, 370, 389, 405, 409, 413, 414, 417, 524, 556, 559, 560, 607, 608, 614, 642, 648, 649, 658, 659, 669, 670, 680, 861, 862, 877, 879, 883, 889, 890, 892, 893, 894, 895, 913, 922, 996, 997, 1000, 1001, 1005, 1006, 1009, 1015, 1022], "bianca": 64, "bianp": 381, "bias": [48, 113, 123, 146, 153, 185, 186, 188, 274, 370, 392, 405, 414, 524, 549, 860, 884, 895, 996, 1000, 1009, 1015, 1017], "bibhash": [1042, 1043], "bibl": 351, "bibliograph": 375, "bibtex": 0, "bic": [2, 159, 183, 192, 198, 199, 200, 206, 219, 416, 501, 651, 653, 654, 655, 656, 798, 865, 884, 990, 1000, 1022, 1032, 1039, 1045, 1046], "bic_criterion": 199, "bicker": 1042, "biclust": [2, 6, 59, 102, 330, 332, 350, 351, 352, 415, 422, 448, 450, 452, 487, 511, 513, 591, 719, 795, 1001, 1022, 1026, 1027, 1034, 1038], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 422, 450, 452], "bidu": [1045, 1046], "biernat": 1044, "big": [43, 79, 93, 95, 216, 232, 248, 260, 363, 375, 381, 390, 409, 415, 419, 538, 561, 562, 564, 565, 806, 828, 839, 840, 841, 842, 843, 1021, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "bigg": [417, 619], "bigger": [47, 75, 93, 224, 269, 307, 343, 348, 351, 361, 363, 415, 437, 438, 508, 538, 850, 1027], "biggest": [407, 410, 412, 442], "biggest_inertia": [407, 442], "biggio": 1043, "bigram": [270, 415, 588, 589, 591], "bigram_vector": 415, "bijil": 1046, "bike": 1008, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 187], "bilbro": 1039, "bill": [1042, 1043], "billaud": 1040, "billi": 1036, "billing": [1035, 1036, 1037], "billion": 1025, "bimod": [313, 413], "bin": [2, 43, 61, 62, 64, 86, 107, 136, 140, 211, 242, 248, 263, 275, 294, 309, 310, 311, 312, 313, 315, 316, 373, 383, 393, 405, 413, 414, 437, 438, 447, 460, 561, 562, 867, 869, 883, 950, 1040, 1041, 1042, 1046, 1050], "bin_cent": [86, 211], "bin_edg": 86, "bin_edges_": [86, 310, 869], "bin_seed": [79, 96, 447, 460, 1043], "binar": [2, 36, 276, 278, 279, 367, 369, 754, 839, 868, 869, 871, 875, 877, 885, 888, 1001, 1003, 1027, 1046, 1048], "binari": [2, 30, 47, 53, 62, 64, 138, 140, 150, 152, 165, 178, 186, 191, 203, 204, 205, 211, 219, 232, 239, 248, 251, 263, 266, 267, 272, 278, 283, 286, 293, 339, 343, 357, 358, 369, 370, 371, 379, 380, 389, 393, 401, 404, 405, 406, 407, 414, 415, 417, 436, 437, 438, 451, 486, 500, 508, 509, 520, 523, 549, 550, 553, 555, 559, 561, 566, 567, 568, 581, 588, 589, 591, 593, 594, 602, 610, 627, 628, 629, 630, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 700, 703, 707, 708, 709, 712, 713, 715, 718, 720, 722, 727, 729, 730, 734, 735, 738, 739, 740, 741, 743, 782, 783, 784, 787, 788, 789, 794, 796, 799, 800, 801, 803, 804, 805, 806, 814, 818, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 850, 860, 871, 875, 877, 885, 888, 904, 906, 909, 920, 963, 991, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1029, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1046, 1047, 1049, 1050], "binary_crossentropi": 1046, "binary_eros": 53, "binary_onli": [1042, 1043], "binarytre": [849, 1036, 1040, 1044], "bincount": [389, 411, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 904, 906, 909, 912, 914, 935, 936, 1039], "bind": [393, 1020, 1032, 1039, 1040], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "binesh": [1048, 1049], "binet": [1042, 1047], "bing": [1038, 1039], "bingham": 1013, "binned_numer": [211, 229], "binom": 997, "binomi": [145, 148, 414, 553, 559, 561, 997, 1046, 1049], "bio": 272, "biocsklearn": 1020, "bioinformat": [628, 991], "biola": 1050, "biologi": 50, "biometrika": [880, 892], "biostatist": [409, 477], "bipartit": [404, 452, 511, 1006], "biprateep": 1044, "birch": [2, 71, 79, 97, 183, 322, 364, 389, 445, 448, 512, 1022, 1026, 1027, 1036, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "birch_model": 77, "bird": [582, 718, 754, 1001], "birodkar": [1037, 1038, 1040], "bischl": 369, "bisect": [2, 71, 75, 90, 91, 92, 93, 94, 179, 183, 265, 442, 446, 512, 1022, 1046], "bisect_km": 322, "bisect_mean": 442, "bisecting_strategi": [407, 442], "bisectingkmean": [2, 78, 407, 446, 1046, 1047, 1048], "bisector": 70, "bishop": [532, 534, 541, 741, 797, 997, 1002, 1016], "bistochast": [404, 450], "biswadip": 1042, "biswaroop": 1047, "bit": [43, 52, 64, 86, 109, 123, 209, 213, 286, 309, 339, 351, 358, 362, 370, 373, 389, 393, 395, 414, 415, 582, 589, 658, 834, 930, 931, 998, 1002, 1019, 1032, 1035, 1038, 1040, 1041, 1044, 1045, 1046, 1049, 1050], "bithash": 640, "bithash_": 640, "bitli": 1025, "bitmap": 372, "bittarello": 1045, "bjerr": 1040, "bla": [362, 363, 373, 376, 381, 383, 778, 1032, 1040, 1041, 1043, 1044, 1050], "black": [43, 48, 49, 50, 52, 63, 70, 79, 82, 88, 89, 111, 112, 118, 120, 122, 142, 163, 166, 170, 171, 175, 176, 179, 182, 186, 187, 193, 199, 201, 202, 204, 211, 212, 213, 217, 220, 223, 224, 229, 238, 248, 254, 257, 294, 304, 305, 307, 333, 348, 355, 356, 375, 393, 400, 407, 414, 417, 555, 556, 631, 1007, 1008, 1017], "blackberri": 315, "blackburn": [1035, 1038], "blackd0t": 1042, "blair": [45, 370], "blakeflei": 1038, "blame": 375, "blanc": 315, "blanchard": [1036, 1037], "blank": [93, 380, 991, 1017], "bldgtype": 143, "bleed": 1025, "blei": [412, 536, 797], "bleich": [187, 1008], "bleki": 1044, "blend": [142, 154, 315, 389, 411], "bli": [363, 373, 387], "blind": [119, 122, 183, 210, 350, 412, 533, 541, 1022], "blink": 339, "blis_num_thread": 363, "blob": [2, 61, 69, 70, 77, 79, 90, 95, 97, 407, 447, 512], "blobs_param": 238, "block": [2, 294, 309, 322, 370, 372, 375, 380, 383, 389, 404, 407, 410, 413, 451, 452, 461, 472, 478, 479, 487, 488, 511, 513, 695, 948, 1004, 1006], "block_siz": [472, 478, 479, 1036], "blocker": [379, 1050], "blocknum": 47, "blockwis": [404, 997], "blog": [322, 362, 375, 381, 383, 390, 1043], "blogpost": 380, "blondel": [0, 397, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045], "blood": [168, 239, 372], "bloom": [384, 965], "blown": 342, "blue": [46, 48, 52, 58, 59, 63, 70, 111, 118, 120, 134, 137, 141, 148, 149, 151, 154, 156, 166, 175, 177, 191, 194, 199, 201, 209, 234, 242, 262, 263, 264, 269, 305, 314, 319, 325, 330, 356, 372, 407, 412, 1049], "blueviolet": [225, 295, 338], "blum": 1039, "blyston": [1042, 1043], "bmaisonn": 1044, "bmalezieux": 1045, "bmatrix": [404, 993], "bmc": 1011, "bme": 1050, "bmi": [168, 199, 201, 249, 372, 1009], "bmreinig": 1046, "bmug": 57, "bmva": 671, "bmvc": [671, 997], "bo": [63, 1044], "board": 0, "boat": 323, "bob": [1033, 1039], "bobyrev": 1039, "boca": 997, "bodega": 315, "bodenhof": [404, 719], "bodi": [47, 102, 168, 249, 323, 372], "body_bow": 102, "body_stat": 102, "boe": 51, "boechat": 1039, "boenisch": 1043, "boerner": 1046, "boersma": 1038, "bogazici": 372, "bogdan": 1032, "boggavarapu": 1044, "bohl": [1044, 1046], "bohn\u00e9": 1045, "boil": [134, 378, 389, 409], "boilerpl": [245, 377, 1025], "boisberrang": [0, 396, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "bold": [93, 146, 201, 207, 375], "boll": 997, "bolleddula": 1050, "bolmier": [1043, 1044, 1048], "boltzmann": [2, 105, 160, 183, 202, 204, 303, 502, 658, 713, 830, 860, 861, 862, 864, 890, 1022, 1026, 1027, 1034], "bommarito": [1035, 1036], "bonald": 1047, "bone": [224, 348], "bonferroni": 269, "bonu": [229, 373, 375], "bonusmalu": [211, 229], "boo": [168, 372], "book": [102, 442, 446, 448, 834, 839, 843, 997, 998, 999, 1002, 1044], "booktitl": 0, "bool": [82, 99, 112, 182, 229, 357, 375, 419, 420, 421, 422, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 700, 702, 703, 707, 708, 709, 711, 712, 713, 714, 726, 727, 728, 729, 730, 731, 738, 741, 742, 754, 756, 761, 763, 767, 769, 774, 778, 782, 783, 784, 785, 787, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 819, 822, 823, 824, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 942, 943, 948, 949, 962, 963, 965, 971, 973, 981, 986, 987, 988, 989, 991, 1041, 1044, 1045], "bool_": 213, "boolean": [2, 132, 245, 357, 370, 375, 377, 384, 408, 414, 415, 416, 463, 561, 562, 581, 582, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 629, 632, 633, 636, 649, 671, 699, 778, 833, 839, 860, 867, 887, 921, 926, 984, 991, 997, 1003, 1008, 1011, 1017, 1032, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1050], "boom": 1050, "boost": [2, 14, 46, 52, 103, 133, 134, 135, 138, 139, 141, 151, 154, 157, 177, 183, 188, 189, 194, 208, 213, 219, 234, 268, 270, 305, 310, 313, 315, 322, 325, 376, 381, 389, 406, 416, 447, 465, 466, 489, 496, 501, 520, 553, 554, 559, 560, 561, 562, 564, 565, 632, 633, 634, 635, 741, 742, 748, 750, 790, 800, 803, 804, 805, 821, 827, 830, 865, 877, 878, 997, 1001, 1020, 1022, 1023, 1027, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1045], "booster": 1037, "boosting_error": 134, "boostingcolumntransform": 154, "boostingdecis": 414, "booth": 1039, "bootstrap": [137, 138, 145, 181, 272, 281, 320, 411, 414, 554, 555, 556, 557, 558, 563, 564, 565, 936, 971, 997, 1032, 1033, 1035, 1037, 1040, 1042, 1045], "bootstrap_featur": [414, 555, 556], "bootstrap_indic": 272, "borchmann": 1047, "border": [445, 1042], "borderaxespad": 111, "borderpad": 355, "borderwidth": 140, "borg": [690, 694, 998], "borgn": 1045, "bori": [1036, 1044, 1048], "borja": 1036, "born": 1038, "borovec": 1046, "borovikova": 1043, "bosch": 1045, "bossan": [1044, 1046, 1047, 1048, 1050], "bossch": [0, 396, 1039, 1040, 1041, 1045], "boston": 1025, "bot": [375, 379, 1006, 1046, 1049, 1050], "botelho": 1044, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 87, 88, 97, 103, 109, 111, 115, 116, 125, 127, 132, 137, 140, 141, 143, 144, 149, 153, 154, 157, 163, 164, 166, 168, 170, 177, 179, 185, 186, 187, 188, 193, 197, 198, 199, 201, 204, 211, 212, 213, 215, 216, 217, 219, 229, 235, 244, 245, 246, 254, 255, 256, 257, 258, 259, 263, 269, 270, 271, 272, 276, 278, 280, 282, 289, 301, 309, 313, 314, 318, 320, 324, 330, 331, 336, 341, 343, 350, 351, 352, 357, 358, 362, 363, 364, 368, 369, 370, 373, 375, 377, 379, 381, 382, 384, 387, 388, 389, 390, 393, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 420, 436, 445, 451, 461, 467, 474, 481, 482, 483, 484, 487, 488, 496, 497, 500, 502, 505, 507, 508, 509, 534, 538, 540, 547, 551, 555, 556, 557, 563, 564, 565, 566, 567, 577, 588, 589, 591, 597, 607, 608, 627, 632, 633, 643, 657, 658, 659, 672, 674, 676, 678, 687, 699, 704, 712, 716, 729, 730, 731, 736, 738, 757, 761, 767, 774, 778, 783, 784, 787, 788, 789, 795, 803, 804, 806, 823, 833, 861, 862, 876, 878, 880, 892, 897, 902, 904, 905, 912, 914, 921, 934, 940, 949, 963, 975, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "botstein": [628, 991], "bottleneck": [362, 381, 414, 447, 861, 862], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 84, 86, 95, 97, 118, 144, 152, 157, 211, 222, 238, 254, 256, 257, 260, 266, 269, 280, 294, 309, 329, 331, 339, 375, 405, 407, 413, 587, 916, 995, 997, 1001, 1009, 1021], "bottom_h": 309, "bottou": [676, 677, 678, 1005, 1015], "bou": [1047, 1048], "boucaud": 1040, "boucher": 1039, "bouckaert": 269, "boukhobza": 1050, "boulard": 1049, "bould": 407, "bouldin": [2, 725], "boulogn": 1035, "boun": 372, "bound": [2, 64, 88, 174, 176, 178, 183, 213, 229, 237, 268, 382, 407, 412, 415, 417, 418, 443, 488, 502, 512, 523, 536, 563, 595, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 635, 637, 650, 654, 658, 677, 705, 735, 788, 797, 798, 844, 845, 881, 893, 896, 897, 898, 906, 907, 908, 911, 934, 997, 1000, 1001, 1004, 1013, 1015, 1016, 1018, 1022, 1040, 1043, 1044, 1046], "bound_": 536, "boundari": [2, 50, 53, 62, 63, 64, 66, 67, 70, 91, 93, 133, 136, 142, 152, 156, 161, 171, 172, 174, 183, 187, 192, 202, 212, 220, 226, 238, 243, 246, 272, 284, 286, 297, 299, 300, 302, 304, 309, 311, 314, 327, 332, 334, 335, 336, 337, 338, 339, 341, 347, 348, 355, 371, 405, 414, 415, 417, 449, 455, 504, 512, 536, 549, 550, 569, 588, 589, 591, 631, 658, 735, 761, 800, 833, 846, 852, 854, 855, 856, 879, 883, 900, 901, 906, 908, 909, 912, 934, 995, 997, 1004, 1007, 1011, 1014, 1015, 1016, 1022, 1032, 1034, 1036, 1045, 1046, 1047, 1049], "bounding_ax_": [382, 632], "boundscheck": [363, 376], "bourassa": 414, "bourbeau": [1039, 1040, 1041], "bourboux": 1043, "bourguignat": 1037, "bournhonesqu": 1042, "bousquet": 900, "boutili": 1013, "boutsidi": 412, "bow": 408, "bown": 1038, "bowyer": 1050, "box": [43, 49, 66, 88, 187, 188, 232, 286, 309, 313, 382, 412, 414, 512, 555, 556, 880, 892, 916, 918, 1001, 1002, 1008, 1011, 1017, 1040, 1048], "boxplot": [49, 111, 147, 186, 189, 283, 318], "boxplot_runtim": 49, "boxstyl": [48, 311], "boy": 1046, "boyd": 997, "boyl": [1049, 1050], "boyuan": [1036, 1037, 1038], "bp": [49, 147, 168, 199, 201, 372, 1009], "bpo": 878, "br": 136, "br_estim": 181, "bracket": [375, 997], "bradi": 1039, "bradlei": [168, 372, 997], "bradshaw": [1035, 1036, 1039], "bradypu": [50, 302, 370, 498], "bradypus_variegatus_0": 50, "brain": 369, "branch": [362, 373, 375, 378, 379, 407, 414, 441, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 912, 913, 914, 915, 917, 1004, 1008, 1017], "branching_factor": 441, "brand": [390, 393], "brandon": [1038, 1039, 1046, 1047], "brandt": 1043, "brandyn": 1032, "brault": 1039, "braun": 1040, "bravi": 1038, "braycurti": [449, 456, 699, 778, 779, 780, 1004], "braycurtisdist": 699, "brc": [407, 441], "brdav": 1050, "bre": [2, 634, 1017], "bread": 1025, "breadth": [844, 845, 849, 1025, 1034], "breadth_first": [844, 845, 849], "break": [2, 55, 74, 80, 102, 112, 183, 201, 217, 245, 256, 286, 321, 329, 334, 350, 352, 375, 379, 381, 388, 407, 468, 512, 639, 774, 778, 781, 797, 877, 884, 889, 906, 909, 923, 997, 1000, 1009, 1011, 1016, 1021, 1022, 1032, 1033, 1039, 1040, 1042, 1044, 1048], "break_ti": [347, 906, 909, 1016, 1042], "breakdown": [111, 112, 228, 679, 997], "breakdown_": 679, "breast": [2, 168, 368, 500, 1009, 1027, 1037], "breast_canc": 331, "breast_cancer_data": 168, "brecht": 641, "bredin": 1036, "breiman": [188, 411, 414, 516, 517, 518, 555, 556, 564, 565, 634, 912, 913, 1009, 1017], "brekk": 1047, "brendan": [73, 439, 453, 1048, 1049, 1050], "brenden": 1046, "brenner": 1001, "breno": [1039, 1040], "brent": [1036, 1040, 1041], "brentfagan": 1041, "brett": [1035, 1037, 1038, 1039, 1040, 1047], "brettingen": 1038, "breuer": 1043, "breunig": [407, 449, 456, 850, 1007], "breve": 1048, "brevin": [1048, 1049], "brew": [145, 373, 393], "brian": [0, 397, 708, 1001, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046], "brice": [1044, 1045], "bridg": [387, 998], "brief": [375, 999], "briefli": [278, 374, 388, 414, 990, 1042], "brier": [2, 61, 62, 64, 405, 709], "brier1950": 1001, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 405, 1001, 1040, 1041, 1042, 1050], "brigata": 372, "bright": 339, "brighter": 178, "brigi": [1043, 1044], "brigitta": [1042, 1043, 1044, 1048, 1050], "bring": [186, 309, 412, 676, 678, 998, 1025], "british": 415, "brittl": [74, 407], "broad": [375, 389, 1020], "broadcast": 627, "broader": [311, 997, 1024], "broadli": [389, 407], "brocchini": 1044, "brochart": 1049, "brockherd": 1034, "brodersen": 708, "broke": 1039, "broken": [393, 411, 599, 600, 635, 720, 926, 1001, 1017, 1035, 1039, 1040, 1041, 1043, 1046], "brook": [1035, 1036, 1044], "brought": [185, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "brown": [50, 118, 302, 370, 498, 628, 991, 1037, 1039, 1040, 1041, 1044], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 375, 383, 1011, 1049], "broyden": 997, "brr": 193, "brr_poli": 193, "brr_score": 193, "bruce": [1042, 1043], "brucher": [0, 397, 1032], "brummitt": [1039, 1040], "brunak": 743, "brunner": 1036, "bruno": [1043, 1044, 1045, 1050], "brutal": 339, "brute": [289, 387, 402, 411, 418, 443, 445, 449, 456, 632, 633, 688, 689, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 1008, 1027, 1036, 1040, 1044, 1047, 1048, 1049, 1050], "bry": 220, "bryan": [1032, 1035, 1041, 1042, 1045], "br\u00f6mmel": [1046, 1047], "br\u00fblade": 315, "bsa": 764, "bsas_in_radian": 764, "bscikit": 1032, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 381, 387], "bsh": 1047, "bsmtfinsf1": [143, 154], "bsmtfinsf2": 143, "bsmthalfbath": 143, "bsmtunfsf": 154, "bspline": 883, "bsplines_": [212, 883], "bsr": [930, 931, 1045], "bt": 415, "btol": [672, 674], "buck": 627, "budarz": 1045, "buddha": 1037, "budget": [0, 143, 839, 840, 841, 842, 843, 990], "bueno": 764, "buffer": [83, 1045, 1050], "buffer_mb": 1032, "bug": [245, 318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 377, 378, 379, 380, 383, 387, 389, 1021, 1032, 1033, 1034, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "bugfix": [1032, 1046], "buguen": 1032, "buhmann": 708, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 88, 100, 106, 124, 134, 142, 144, 151, 157, 165, 167, 180, 181, 183, 186, 219, 274, 277, 286, 288, 289, 306, 307, 310, 315, 316, 352, 358, 362, 363, 364, 371, 377, 378, 379, 380, 381, 389, 393, 400, 407, 411, 414, 415, 441, 489, 501, 503, 524, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 585, 586, 588, 589, 591, 627, 628, 630, 691, 713, 714, 801, 805, 809, 818, 824, 826, 865, 882, 884, 912, 913, 914, 915, 917, 944, 948, 990, 991, 998, 1001, 1005, 1007, 1011, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1032, 1035, 1037, 1038, 1039, 1041, 1044], "build_analyz": [415, 588, 589, 591, 1042], "build_preprocessor": [415, 588, 589, 591, 1042], "build_projection_oper": 53, "build_token": [57, 415, 588, 589, 591], "build_tool": [375, 379, 383], "builder": [47, 49, 346, 379], "buildtool": 373, "built": [2, 25, 66, 116, 132, 134, 135, 142, 144, 188, 219, 272, 286, 302, 318, 355, 357, 362, 370, 373, 375, 376, 377, 379, 381, 383, 384, 387, 388, 389, 393, 401, 407, 408, 411, 414, 416, 444, 503, 553, 554, 555, 556, 559, 560, 561, 562, 588, 589, 593, 597, 639, 640, 641, 642, 643, 646, 647, 652, 658, 660, 661, 662, 663, 672, 673, 674, 675, 681, 803, 804, 811, 835, 838, 844, 845, 914, 915, 953, 984, 997, 1001, 1002, 1014, 1015, 1017, 1020, 1025, 1032, 1035, 1036, 1038, 1044, 1050], "builtin": 1016, "buitinck": [0, 397, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "bulk": [278, 418, 443], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1039, "buluttekin": 1042, "bumblebe": 1045, "bunch": [2, 50, 126, 245, 368, 369, 370, 463, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 567, 568, 569, 570, 632, 633, 634, 863, 864, 912, 913, 914, 915, 957, 960, 1025, 1037, 1039, 1042, 1044, 1048], "bundl": [1040, 1041], "bupu": 187, "burden": [375, 876, 1021], "bureau": 370, "buri": 375, "burjek": 1032, "burk": [0, 359, 1047], "burn": [1039, 1040], "burst": 1001, "busch": [1040, 1041, 1043], "bush": [45, 370], "busi": [43, 211, 269, 326, 383, 387, 406, 788, 997, 1001, 1025], "business_metr": 263, "business_scor": 263, "bussonni": [1032, 1044], "butler": [473, 1035, 1043, 1044], "butlerdavi": 473, "butter": 1025, "button": [375, 383], "butyugina": 1048, "buuren": [627, 991], "buzenet": [1047, 1048], "bv_bunch": 50, "bwignal": 1035, "bypass": [406, 408, 599, 646, 652, 822, 912, 913, 914, 915, 1048], "byproduct": 235, "byrd": 658, "byron": 1044, "byte": [86, 415, 486, 503, 508, 509, 582, 588, 589, 591, 965, 1032, 1039, 1040, 1047, 1050], "bz2": [55, 508, 509], "bz2file": 55, "bzip2": 1032, "b\u00e9gude": 315, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 85, 89, 90, 92, 93, 94, 98, 103, 104, 106, 116, 118, 125, 126, 134, 136, 137, 142, 143, 150, 152, 153, 155, 156, 161, 168, 171, 172, 173, 174, 178, 191, 200, 202, 203, 204, 205, 207, 209, 218, 220, 222, 223, 224, 225, 227, 228, 231, 233, 235, 236, 243, 244, 246, 250, 255, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 272, 274, 278, 280, 289, 292, 295, 297, 298, 299, 300, 302, 304, 305, 307, 309, 310, 311, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 355, 356, 362, 363, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 383, 384, 387, 393, 394, 398, 404, 405, 407, 408, 409, 410, 411, 412, 414, 416, 420, 436, 441, 442, 445, 446, 448, 458, 467, 474, 523, 528, 534, 538, 540, 541, 547, 549, 550, 590, 607, 608, 610, 631, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 673, 679, 685, 686, 688, 689, 692, 693, 708, 714, 715, 718, 731, 735, 741, 742, 758, 759, 800, 814, 823, 829, 831, 839, 840, 841, 842, 843, 844, 845, 851, 853, 860, 875, 877, 878, 879, 883, 885, 899, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 919, 930, 931, 963, 990, 993, 994, 996, 997, 998, 999, 1001, 1003, 1004, 1006, 1008, 1011, 1013, 1015, 1016, 1017, 1020, 1025, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1048, 1050], "c0": [143, 241, 315], "c1": [98, 143, 178, 241, 315], "c2": [98, 143, 178, 241, 315], "c22": 323, "c26": 323, "c3": [98, 143, 315], "c4": [98, 315, 1023, 1027], "c5": [98, 1023, 1027], "c56poni": 1042, "c6": 98, "c99": 1020, "c_": [50, 62, 63, 64, 91, 111, 121, 142, 145, 151, 152, 161, 172, 209, 224, 227, 238, 295, 312, 314, 333, 339, 347, 348, 407, 659, 714, 715, 718, 1001], "c_0": [993, 999], "c_1": 998, "c_2": [407, 998], "c_2d_rang": 339, "c_e": 407, "c_i": [407, 1004], "c_j": [407, 1006], "c_jh_j": 1006, "c_k": 549, "c_option": 104, "c_p": 997, "c_q": 407, "c_rang": 339, "c_scale": 346, "ca": [168, 372, 407, 441, 912, 913, 1013, 1017], "cabernet": 315, "cabin": 323, "cablevis": 51, "cabrera": 1042, "cach": [2, 52, 87, 99, 183, 270, 289, 290, 292, 297, 301, 362, 363, 370, 389, 440, 444, 449, 467, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 502, 508, 509, 800, 846, 848, 864, 865, 902, 906, 907, 908, 909, 910, 985, 1004, 1016, 1022, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1050], "cache_path": 1004, "cache_s": [467, 902, 906, 907, 908, 909, 910, 1016], "cached_pip": [104, 408], "cachedir": [87, 104, 384, 408], "caching_dir": 985, "caherrera": 1045, "cai": 1045, "caicedo": 1032, "cailean": 1050, "cainei": 1050, "caio": [1038, 1040, 1042], "caj": 51, "caje": 1033, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 370, "cal_scor": 63, "calcot": 1045, "calcsiz": 373, "calcul": [2, 46, 63, 64, 69, 80, 92, 111, 132, 133, 134, 138, 155, 182, 183, 189, 215, 216, 228, 243, 245, 268, 269, 275, 279, 284, 288, 337, 343, 344, 358, 362, 382, 389, 398, 404, 405, 407, 411, 412, 414, 418, 437, 442, 443, 445, 447, 449, 450, 452, 454, 455, 470, 471, 477, 480, 536, 547, 563, 564, 569, 597, 611, 620, 632, 633, 634, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 679, 681, 684, 688, 690, 692, 694, 707, 716, 729, 730, 735, 736, 738, 744, 754, 764, 769, 771, 772, 773, 774, 778, 781, 783, 784, 787, 788, 789, 792, 793, 795, 807, 809, 825, 829, 842, 844, 845, 882, 883, 884, 890, 894, 904, 905, 936, 950, 993, 995, 997, 998, 999, 1001, 1003, 1004, 1005, 1009, 1011, 1014, 1016, 1022, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "cald": 899, "caleb": 1044, "calibr": [2, 52, 66, 137, 149, 156, 204, 229, 241, 263, 269, 271, 389, 398, 436, 437, 438, 512, 515, 564, 569, 658, 659, 676, 709, 729, 741, 784, 787, 788, 799, 822, 830, 842, 901, 904, 939, 990, 997, 1001, 1014, 1016, 1022, 1023, 1027, 1029, 1036, 1038], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 405, 436], "calibrated_clf": 436, "calibrated_df": [62, 64], "calibrated_forest": 990, "calibratedclassifiercv": [2, 61, 62, 63, 358, 389, 398, 405, 676, 799, 822, 990, 1016, 1021, 1036, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 405, 436, 437, 1041, 1046, 1050], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 405, 939, 1045, 1046, 1050], "california": [2, 144, 178, 181, 182, 309, 315, 320, 368, 372, 489, 1027], "calinski": [2, 710, 1038], "calinski_harabasz_scor": [2, 407, 1040], "calinski_harabaz_scor": [1038, 1040], "cali\u0144ski": 407, "call": [52, 53, 55, 80, 83, 87, 103, 118, 132, 139, 145, 165, 170, 174, 176, 178, 185, 187, 199, 204, 208, 211, 212, 215, 229, 239, 245, 249, 251, 252, 263, 269, 270, 278, 282, 284, 286, 289, 291, 314, 316, 320, 321, 350, 351, 352, 357, 362, 363, 364, 370, 375, 376, 377, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 398, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 419, 430, 439, 442, 445, 446, 448, 449, 450, 451, 452, 453, 456, 459, 461, 463, 464, 467, 468, 473, 481, 482, 483, 487, 490, 492, 495, 497, 503, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 577, 582, 583, 588, 589, 591, 597, 602, 607, 608, 610, 611, 614, 620, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 704, 732, 742, 755, 771, 774, 778, 779, 780, 781, 793, 797, 798, 799, 800, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 853, 855, 860, 861, 862, 863, 864, 867, 868, 869, 871, 873, 874, 876, 881, 884, 885, 888, 893, 894, 895, 896, 897, 901, 904, 905, 906, 907, 909, 910, 913, 915, 923, 925, 938, 942, 947, 948, 957, 958, 960, 966, 967, 971, 974, 984, 989, 990, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1013, 1014, 1016, 1017, 1020, 1025, 1027, 1029, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "callabl": [2, 259, 273, 326, 389, 411, 414, 415, 416, 418, 419, 440, 442, 443, 444, 445, 446, 448, 449, 451, 456, 458, 459, 463, 464, 465, 466, 531, 533, 535, 537, 539, 545, 546, 557, 558, 559, 560, 561, 562, 564, 565, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 610, 611, 620, 628, 630, 634, 639, 643, 659, 671, 673, 675, 688, 691, 692, 696, 711, 719, 732, 742, 771, 774, 778, 779, 780, 781, 792, 793, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 868, 877, 899, 900, 906, 907, 908, 909, 910, 961, 967, 970, 984, 990, 1001, 1011, 1032, 1036, 1039, 1040, 1041, 1042, 1044, 1046, 1048], "callback": [531, 537, 539, 545, 546, 853, 966, 1021, 1048], "callbl": 846, "calle": [2, 245, 958], "caller": [2, 245, 408, 646, 647, 652, 660, 661, 662, 681, 894, 895, 957, 958, 976, 977, 978, 1041], "callgrin": 381, "callgrind": 378, "calm": 51, "caltech": 350, "calvin": [1035, 1036], "calvo": [1040, 1041], "cambridg": [370, 412, 590, 839, 843, 997, 999, 1003], "came": 1000, "camera_ind": 53, "camil": [1040, 1048, 1049], "camila": 1042, "camilaagw": 1042, "camilo": 1038, "campello": [407, 445], "campustrampu": 1039, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 80, 82, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 102, 103, 104, 105, 109, 110, 111, 112, 113, 116, 121, 123, 124, 125, 126, 127, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 163, 164, 165, 166, 167, 168, 170, 175, 176, 177, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 199, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 227, 228, 229, 231, 232, 233, 238, 239, 240, 241, 242, 244, 245, 248, 249, 252, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 276, 278, 280, 281, 282, 283, 284, 286, 288, 289, 291, 293, 294, 295, 296, 298, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 332, 333, 336, 337, 339, 342, 343, 346, 350, 351, 352, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 388, 389, 390, 392, 393, 394, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 430, 432, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 471, 481, 482, 483, 486, 496, 499, 503, 508, 509, 512, 521, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 579, 580, 581, 582, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 632, 634, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 689, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 704, 707, 709, 711, 712, 718, 720, 721, 722, 723, 724, 726, 727, 729, 730, 732, 733, 737, 738, 739, 740, 743, 746, 752, 755, 756, 757, 758, 759, 763, 779, 780, 782, 783, 784, 785, 787, 788, 789, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 861, 862, 863, 864, 867, 868, 869, 871, 872, 873, 877, 878, 879, 882, 883, 884, 889, 896, 897, 901, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 920, 921, 924, 926, 928, 930, 934, 936, 942, 945, 947, 948, 955, 957, 960, 963, 966, 970, 971, 974, 981, 984, 985, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "canberra": [449, 456, 699, 778, 779, 780, 1004], "canberradist": 699, "cancel": [414, 415, 763], "cancer": [2, 168, 368, 406, 500, 593, 594, 851, 1009, 1027, 1037], "candela": 372, "candid": [106, 259, 267, 270, 277, 320, 364, 375, 379, 407, 414, 447, 449, 800, 803, 804, 812, 814, 997, 1004, 1017, 1038], "candidate_idx": 268, "cannon": 1047, "cannot": [43, 52, 75, 89, 107, 113, 120, 125, 186, 187, 197, 211, 229, 245, 282, 309, 339, 346, 364, 374, 376, 381, 387, 389, 390, 395, 401, 407, 408, 409, 411, 412, 414, 415, 417, 464, 521, 538, 539, 540, 543, 547, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 651, 655, 682, 692, 711, 717, 778, 803, 804, 851, 852, 854, 855, 856, 864, 865, 869, 874, 875, 886, 928, 930, 931, 990, 991, 995, 997, 998, 1001, 1002, 1007, 1011, 1016, 1017, 1021, 1025, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "canon": [2, 51, 389, 405, 414, 481, 482, 484, 768, 1021, 1023, 1027], "canonic": 389, "cant": [1049, 1050], "cantor": [628, 991], "canuma": 1045, "canva": 51, "cao": 407, "cap": [404, 407, 755, 1001, 1041], "capabl": [88, 89, 116, 149, 175, 215, 235, 377, 389, 393, 1002, 1005, 1016, 1017, 1025, 1032, 1041, 1049], "capac": [149, 170, 188], "capit": [49, 62, 325, 496, 806, 823], "capitain": 1050, "cappion": [692, 998], "cappuzzo": 1049, "capsiz": 331, "caption": 102, "captur": [2, 43, 48, 51, 52, 72, 74, 116, 146, 151, 163, 175, 186, 193, 197, 204, 211, 215, 260, 282, 288, 319, 339, 343, 383, 407, 414, 415, 416, 571, 588, 589, 591, 850, 967, 1001, 1006, 1014, 1018, 1044], "car": 211, "carbal": 1049, "card": 1040, "cardin": [72, 141, 147, 188, 189, 315, 316, 324, 407, 414, 462, 553, 554, 557, 558, 559, 560, 564, 565, 566, 679, 877, 878, 885, 912, 913, 914, 915, 1001, 1002, 1009, 1011, 1046, 1047], "cardiotocogram": 248, "care": [47, 88, 147, 186, 263, 286, 343, 362, 364, 379, 381, 387, 389, 390, 401, 406, 407, 409, 415, 436, 459, 468, 640, 658, 659, 666, 667, 668, 676, 677, 678, 695, 904, 998, 1016, 1025, 1048], "carefulli": [283, 362, 405, 412, 1016], "carei": [1035, 1036, 1037, 1038, 1039], "carett": 1039, "cari": 1044, "carl": [175, 417, 610, 611, 614, 619, 622], "carla": 1048, "carlo": [0, 243, 365, 414, 417, 611, 641, 642, 993, 1006, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "carlson": 1039, "carlsson": 1035, "carmen": 315, "carnegi": 899, "caro": 1037, "carodorum": 315, "carol": [1038, 1039], "carolin": 1005, "carrascosa": [1025, 1036], "carre\u00f1o": 1047, "carri": [51, 67, 134, 182, 263, 269, 272, 277, 282, 305, 311, 352, 390, 415, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1025], "carrillo": 1037, "carsten": 1045, "cart": [1023, 1027], "carter": [1038, 1039, 1047, 1050], "cartesian": [103, 404, 633, 1004, 1047], "cartman_nabana": 1042, "cartograph": 191, "cartographi": 997, "caruana": [62, 64, 405, 436, 438], "carvaj": 1032, "casado": 1043, "casagrand": [1040, 1041], "casalegno": 1044, "cascad": 372, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 82, 85, 88, 90, 94, 99, 103, 104, 112, 116, 125, 127, 137, 139, 140, 146, 147, 154, 165, 167, 168, 170, 177, 186, 187, 189, 197, 198, 201, 203, 211, 212, 213, 215, 216, 219, 225, 227, 228, 229, 238, 242, 243, 244, 245, 248, 249, 259, 262, 263, 266, 268, 269, 270, 272, 275, 276, 278, 286, 289, 292, 296, 306, 309, 311, 314, 316, 318, 321, 326, 343, 350, 351, 352, 356, 357, 358, 362, 363, 364, 369, 370, 375, 376, 377, 379, 380, 381, 382, 384, 387, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 436, 439, 442, 443, 445, 446, 450, 452, 462, 463, 464, 466, 473, 496, 508, 509, 515, 539, 541, 542, 543, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 591, 593, 594, 597, 602, 606, 609, 610, 611, 625, 627, 628, 630, 632, 647, 648, 653, 656, 657, 658, 659, 661, 663, 666, 668, 669, 672, 674, 675, 676, 680, 682, 683, 684, 685, 686, 687, 699, 703, 708, 709, 712, 716, 718, 720, 721, 723, 726, 728, 729, 730, 734, 735, 738, 742, 743, 745, 746, 748, 750, 753, 754, 756, 763, 778, 781, 783, 784, 785, 787, 788, 789, 790, 794, 796, 798, 800, 803, 804, 806, 814, 818, 823, 824, 825, 826, 827, 828, 829, 831, 833, 841, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 864, 871, 873, 874, 877, 878, 879, 882, 883, 884, 885, 888, 894, 895, 896, 897, 904, 906, 909, 912, 913, 919, 924, 926, 936, 948, 949, 989, 990, 991, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1015, 1016, 1017, 1020, 1021, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "caselli": [1040, 1041], "cash": 997, "cashman": 1042, "casino": [1046, 1047], "cass": 1038, "cassi": 315, "cast": [50, 52, 86, 211, 232, 369, 390, 415, 496, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 673, 675, 965, 1039, 1040, 1041, 1042, 1045, 1047, 1049], "castachick": 1043, "castello": 1036, "castor": 1043, "caswel": [1045, 1048], "cat": [51, 103, 187, 188, 248, 321, 322, 323, 324, 325, 326, 370, 415, 487, 582, 712, 718, 754, 783, 885, 1001, 1011, 1041, 1042, 1044], "cat_column": 248, "cat_linear_processor": 154, "cat_proc": [240, 319], "cat_selector": 154, "cat_str": 57, "cat_tree_processor": 154, "catajara": 1042, "catalfo": 1040, "catalin": 642, "catastroph": [263, 316, 763, 1021], "catch": [79, 95, 306, 363, 383, 384], "catch_warn": [79, 95, 245, 305, 306], "categor": [2, 43, 103, 133, 139, 149, 154, 183, 186, 187, 188, 211, 229, 248, 250, 252, 263, 316, 321, 323, 324, 364, 367, 369, 370, 380, 389, 408, 415, 465, 466, 488, 489, 496, 505, 561, 562, 581, 582, 607, 608, 632, 633, 648, 658, 659, 669, 680, 709, 827, 839, 840, 841, 842, 843, 865, 867, 871, 872, 875, 877, 878, 885, 899, 900, 921, 991, 997, 1008, 1009, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1032, 1033, 1036, 1037, 1040, 1042, 1044, 1047, 1048, 1049, 1050], "categori": [2, 25, 57, 79, 95, 102, 103, 143, 154, 186, 187, 211, 219, 226, 248, 263, 270, 305, 306, 311, 315, 316, 320, 323, 325, 332, 350, 351, 352, 369, 370, 384, 407, 408, 414, 415, 417, 487, 496, 497, 503, 561, 562, 648, 658, 659, 669, 680, 743, 758, 759, 840, 877, 878, 885, 942, 943, 991, 997, 998, 999, 1003, 1009, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "categorical_column": [43, 143, 186, 188, 248, 466], "categorical_columns_selector": 248, "categorical_columns_subset": 143, "categorical_crossentropi": [1042, 1046], "categorical_encod": 188, "categorical_featur": [43, 103, 143, 149, 187, 263, 315, 320, 321, 322, 323, 325, 380, 387, 414, 561, 562, 632, 633, 1008, 1040, 1044, 1047, 1049], "categorical_preprocessor": [250, 315], "categorical_transform": 103, "categoricaldtyp": 387, "categoricalnb": [2, 839, 841, 842, 843, 1003, 1042, 1043, 1044, 1045, 1047], "categories_": [877, 878, 885, 1011, 1040, 1047], "categoris": [942, 943], "category_1_fold": 503, "category_2_fold": 503, "category_count_": 840, "category_s": 351, "categr": 1009, "caterpillar": 51, "cathi": [1036, 1042], "catindex": 187, "catplot": 259, "caught": [356, 375, 383, 401], "caus": [43, 62, 64, 146, 171, 186, 209, 211, 215, 216, 229, 288, 316, 343, 352, 358, 373, 380, 405, 407, 412, 413, 415, 417, 442, 446, 448, 458, 509, 532, 582, 589, 610, 611, 778, 839, 840, 841, 843, 868, 877, 879, 882, 883, 930, 931, 991, 997, 1001, 1009, 1011, 1014, 1021, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050], "causal": [183, 184, 207, 657, 785, 830, 1022], "causat": 186, "caution": [186, 263, 379, 439, 453, 1040], "cautiou": 1039, "caveat": [411, 416, 417], "cawlei": [274, 1001], "cax": [66, 173, 280], "ca\u00f1ardo": 1035, "cb": [173, 242, 258], "cbar_ax": 280, "cbar_kw": [193, 197], "cc": 373, "cc18": 369, "cc_home": [912, 913], "cca": [2, 246, 410, 482, 484, 1002, 1036, 1040, 1041, 1042, 1044, 1046, 1050], "ccat": 370, "ccf2002": 993, "cclauss": 1040, "cco": 350, "ccp_alpha": [318, 354, 557, 558, 559, 560, 564, 565, 912, 913, 914, 915, 1017, 1042], "ccp_path": [912, 913, 914, 915], "cd": [120, 168, 372, 373, 375, 379, 381, 412, 470, 471, 477, 531, 537, 539, 540, 543, 545, 546, 547, 997, 1037, 1047], "cdef": 376, "cdf": 269, "cdist": 1045, "cdivis": 376, "cdot": [269, 343, 404, 407, 412, 413, 417, 614, 615, 619, 622, 623, 870, 993, 995, 1001, 1005, 1011], "cdrig": 1046, "cdt": 57, "cea": [839, 1003], "ceballo": 1046, "ceder": [788, 1001], "ceethinwa": [1044, 1045], "ceh": 1047, "ceil": [149, 248, 557, 558, 559, 560, 563, 564, 565, 566, 594, 671, 803, 804, 912, 913, 914, 915, 1015], "celelibi": 1041, "celeo": 1036, "celeux": 528, "cell": [50, 51, 58, 63, 68, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 195, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 302, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 372, 380, 692, 1001, 1002, 1038, 1046], "cellular": 53, "celsiu": [187, 1008], "cemlyn": 1050, "cen": 743, "censor": 1020, "censu": 370, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 82, 83, 86, 88, 89, 92, 93, 94, 96, 97, 112, 125, 129, 144, 145, 146, 147, 166, 168, 182, 187, 195, 204, 206, 211, 212, 222, 223, 234, 235, 238, 239, 248, 254, 257, 258, 264, 270, 280, 294, 297, 299, 305, 309, 311, 312, 322, 330, 337, 339, 340, 341, 345, 351, 352, 370, 371, 372, 380, 407, 409, 410, 412, 413, 414, 420, 439, 441, 442, 445, 446, 447, 448, 451, 453, 458, 459, 460, 461, 462, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 501, 512, 524, 534, 535, 541, 544, 550, 606, 609, 610, 611, 632, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 678, 690, 694, 696, 797, 869, 870, 873, 882, 884, 894, 895, 904, 905, 995, 997, 998, 1000, 1008, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1049], "center1": 99, "center2": 99, "center3": 99, "center4": 99, "center_": 882, "center_box": [93, 512], "centers_0": 312, "centers_1": 312, "centers_init": 92, "cento": 373, "centr": 153, "central": [0, 53, 213, 370, 376, 407, 1007, 1020], "centrality_scor": 55, "centroid": [2, 77, 90, 91, 109, 183, 290, 297, 312, 322, 351, 371, 398, 407, 441, 442, 445, 446, 447, 448, 451, 458, 459, 461, 504, 549, 631, 851, 1022, 1023, 1027, 1032, 1036, 1039, 1044, 1048], "centroids_": [441, 445, 851], "ceo": 1025, "cerda": 1046, "certain": [52, 88, 144, 149, 186, 216, 228, 245, 269, 289, 313, 343, 358, 370, 371, 375, 379, 389, 392, 401, 403, 407, 412, 416, 638, 649, 653, 658, 663, 684, 864, 869, 904, 990, 993, 997, 998, 1001, 1002, 1005, 1011, 1016, 1020, 1037, 1041, 1044, 1047], "certainli": [86, 102, 186, 351, 406], "certainti": [269, 377, 1001], "ceshin": 1038, "cest": 1001, "cetina": 1044, "cf": [316, 406, 407, 410, 441, 700, 997, 1011, 1021], "cflag": 373, "cft": 407, "cftree": 441, "cg": [307, 658, 659, 672, 674, 687, 997, 1036, 1037, 1039, 1043, 1045, 1046, 1049, 1050], "cga": 178, "cgi": 897, "cgohlk": [1035, 1036], "cgroup": [1045, 1046], "cgsavard": [1042, 1043], "ch6": 530, "chacon": 705, "chac\u00f3n": [407, 705], "chad": 1049, "chadi": 1040, "chai": [1044, 1047, 1048], "chain": [2, 35, 101, 107, 134, 160, 183, 241, 277, 280, 287, 289, 292, 307, 358, 367, 387, 389, 417, 496, 502, 541, 611, 627, 658, 738, 800, 830, 833, 835, 836, 837, 838, 864, 865, 884, 990, 991, 1002, 1006, 1018, 1022, 1025, 1027], "chain_jaccard_scor": 288, "chain_method": [835, 1050], "chain_method_": 835, "chaitanya": 1043, "chaitanyamog": 1044, "chakhchoukh": 112, "chakravarti": [635, 637], "chalearn": 1001, "challeng": [51, 154, 170, 187, 193, 204, 229, 238, 364, 370, 371, 401, 407, 409, 461, 471, 1001, 1007, 1025], "chalmer": 1046, "chalmerlow": 1035, "chalulu": 1047, "chan": [0, 842, 884, 1050], "chanc": [2, 71, 73, 82, 134, 163, 183, 189, 211, 219, 226, 229, 269, 275, 278, 279, 315, 346, 351, 358, 374, 406, 407, 411, 700, 702, 704, 705, 708, 716, 755, 757, 786, 795, 829, 1001, 1009, 1017, 1022, 1048], "chance_level_": [700, 702, 1048], "chance_level_kw": [248, 700, 702, 1048], "chandra": [1042, 1043, 1046], "chang": [2, 46, 62, 63, 64, 120, 124, 125, 137, 140, 147, 171, 181, 185, 186, 189, 200, 212, 213, 215, 216, 249, 250, 263, 264, 269, 276, 279, 283, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 339, 343, 352, 356, 357, 358, 362, 363, 364, 370, 377, 378, 379, 380, 383, 387, 389, 398, 407, 411, 414, 415, 417, 419, 427, 432, 436, 439, 442, 443, 446, 448, 451, 453, 458, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 493, 494, 496, 504, 508, 509, 512, 513, 514, 522, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 588, 589, 590, 591, 593, 594, 597, 602, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 694, 700, 704, 707, 712, 716, 717, 729, 730, 736, 737, 755, 757, 778, 783, 784, 785, 787, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 814, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 854, 855, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 876, 877, 883, 884, 885, 892, 893, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 923, 928, 930, 931, 943, 948, 959, 966, 967, 970, 990, 991, 992, 1000, 1001, 1002, 1004, 1011, 1014, 1015, 1016, 1017, 1021, 1030, 1031, 1051], "changed_onli": 1043, "changedbehaviorwarn": 1044, "changedbehaviourwarn": 1041, "changelog": [323, 379, 389, 1030, 1051], "changing_param": 46, "changing_param_valu": 46, "changyao": [1047, 1048], "channel": [363, 370, 373, 393, 415, 493, 494, 583, 584, 586, 587, 1024], "channel_prior": 373, "chapman": 997, "chapter": [120, 358, 377, 407, 412, 414, 417, 530, 532, 534, 614, 619, 622, 643, 991, 994, 997, 1016, 1017], "char": [415, 588, 589, 591, 1032], "char_wb": [415, 588, 589, 591], "charact": [352, 375, 380, 389, 415, 503, 508, 509, 588, 589, 591, 916, 1006, 1032, 1045, 1047], "character": [75, 229, 354, 407, 411, 998], "characteris": 1004, "characterist": [2, 79, 95, 168, 175, 183, 238, 239, 251, 261, 263, 264, 266, 271, 309, 358, 370, 372, 380, 405, 406, 411, 414, 417, 503, 504, 623, 638, 658, 702, 706, 708, 727, 782, 788, 789, 819, 830, 833, 871, 909, 997, 1022], "chardet": 415, "chardetect": 415, "charg": [0, 263, 375], "charikar": 993, "charl": [64, 263, 764, 1032, 1035, 1038, 1042, 1044, 1047], "charli": [1039, 1040, 1048], "charlton": 1039, "charra": [1047, 1049, 1050], "charron": [1025, 1035, 1036, 1043, 1044, 1045], "charset": [1032, 1034], "charset_error": 1034, "chart": [72, 144, 274, 395, 1002, 1035], "chartbeat": 1025, "chase": [51, 1032], "chasnovski": 1043, "chat": 1025, "chatterje": 1043, "chaudhuri": 445, "chauhan": [1040, 1041, 1047, 1048], "chaumond": [1025, 1040], "chauvin": 743, "chavez": [45, 370], "chawla": 1042, "chayant": 1039, "chazalon": 1046, "cheaper": [187, 407, 417, 673, 993, 997], "cheat": [52, 339, 395, 1005, 1015, 1034], "chebee7i": 1036, "chebyshev": [449, 456, 699, 778, 779, 780, 1004], "chebyshevdist": 699, "check": [2, 41, 43, 44, 47, 55, 80, 86, 89, 124, 132, 140, 154, 170, 183, 185, 187, 188, 198, 199, 201, 211, 232, 245, 255, 261, 263, 278, 286, 321, 330, 357, 362, 363, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 387, 388, 389, 393, 394, 398, 401, 408, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 490, 502, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 688, 689, 690, 691, 692, 693, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 930, 931, 932, 942, 943, 953, 955, 956, 957, 961, 962, 984, 985, 986, 988, 989, 996, 997, 998, 1001, 1016, 1017, 1021, 1022, 1025, 1027, 1032, 1033, 1035, 1039, 1043, 1044, 1045, 1046, 1047, 1049], "check_arrai": [2, 377, 384, 467, 534, 902, 989, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "check_classifier_multioutput": 1042, "check_consistent_length": 2, "check_cv": [2, 389, 1037], "check_decision_proba_consist": 1039, "check_estim": [2, 318, 377, 389, 923, 943, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "check_estimator_sparse_arrai": 1050, "check_estimator_sparse_data": 1050, "check_estimator_sparse_matrix": 1050, "check_estimators_fit_returns_self": 943, "check_estimators_pickl": 1049, "check_fit_idempot": 1041, "check_increas": 2, "check_input": [534, 548, 646, 647, 652, 660, 661, 662, 681, 687, 912, 913, 914, 915, 1040], "check_invers": [408, 464, 868, 1011, 1040, 1046, 1047], "check_is_fit": [2, 89, 132, 245, 378, 384, 389, 1042, 1045, 1046], "check_memori": [2, 384, 389, 1039], "check_metadata": 245, "check_methods_sample_order_invari": [1044, 1046], "check_methods_subset_invari": [1040, 1046], "check_nam": 923, "check_pairwise_arrai": 1041, "check_param": 989, "check_random_st": [2, 94, 227, 233, 241, 247, 377, 384, 389], "check_regressor_multioutput": 1042, "check_requires_y_non": 1046, "check_sample_weights_pandas_seri": 1040, "check_scalar": [2, 1046], "check_scor": [2, 389, 1050], "check_set_param": 1040, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1042, "check_transformers_unfitted_stateless": 1048, "check_x_i": [2, 377, 384, 989, 1036, 1040, 1041, 1046], "checkbox": 375, "checked_cv": 824, "checker": [2, 379, 824], "checkerboard": [2, 58, 404, 450, 452, 511, 513], "checking_statu": 263, "checkingclassifi": 1042, "checklist": [378, 379], "checkout": [373, 375, 379, 383], "checks_gener": 942, "checksum": [491, 1044], "cheeseman": 372, "chege": 1046, "chemic": 372, "chemometr": 372, "chen": [109, 110, 409, 414, 420, 474, 726, 756, 993, 1001, 1035, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048], "chenal": [1041, 1042, 1044], "cherkasski": 997, "chernei": 1050, "chernyi": 1046, "cherri": 379, "cherti": 1036, "cherubin": 1038, "chestervil": 323, "cheuk": [1040, 1041], "cheung": 1033, "chevali": 1044, "chevalli": 1049, "chevron": 51, "chi": [2, 103, 111, 134, 313, 367, 416, 519, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 638, 639, 640, 641, 642, 758, 759, 1027, 1032, 1037, 1038], "chi2": [2, 103, 415, 416, 451, 581, 592, 595, 596, 598, 599, 600, 605, 606, 609, 620, 638, 639, 640, 641, 642, 643, 759, 765, 774, 1032, 1039, 1046], "chi2_featur": 642, "chi2_kernel": [2, 403, 638, 642, 758, 765, 999, 1033], "chi2_stat": 604, "chi2sampl": 638, "chiang": 1040, "chiara": [0, 366, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "chibuik": 1045, "chicco": 1050, "chief": 1025, "chieh": [1039, 1040], "chigurupati": 1044, "chih": [658, 1037], "chilamkurthi": 1038, "child": [149, 245, 350, 357, 363, 387, 389, 398, 407, 414, 441, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 912, 913, 914, 915, 957, 958, 960, 1017, 1039], "child_idx": 76, "children": [357, 407, 414, 440, 444, 462, 566, 1036, 1049], "children_": [76, 440, 444, 462], "children_left": 357, "children_right": 357, "chime": 374, "chin": [372, 1036], "china": [407, 506, 507, 584, 587], "chines": 1020, "chinmaya": 1039, "chinthala": 1039, "chiotelli": 1041, "chip": [403, 1025], "chisquar": 313, "chitteti": 1046, "chkoar": 1039, "chloe": 1046, "cho": 1043, "choe": 1041, "choi": [997, 1050], "choic": [2, 43, 46, 64, 75, 80, 88, 98, 102, 109, 127, 149, 170, 171, 177, 181, 201, 212, 248, 262, 263, 267, 269, 272, 283, 294, 316, 320, 350, 351, 358, 362, 373, 380, 389, 393, 407, 409, 411, 413, 414, 416, 417, 451, 461, 470, 471, 472, 473, 474, 475, 477, 538, 540, 541, 547, 559, 638, 647, 648, 656, 658, 659, 661, 669, 680, 692, 705, 742, 833, 846, 847, 852, 854, 855, 881, 884, 893, 895, 904, 905, 934, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1009, 1014, 1015, 1016, 1017, 1039, 1042, 1043, 1047, 1048], "choleski": [110, 211, 229, 384, 470, 471, 477, 527, 611, 648, 650, 651, 654, 655, 656, 658, 659, 669, 672, 674, 680, 682, 683, 687, 797, 798, 997, 1035, 1039, 1041, 1044, 1047, 1048], "cholesky_delet": 384, "cholesterol": [168, 372], "chong": 536, "choo": [1047, 1048], "choos": [43, 50, 51, 79, 80, 83, 86, 93, 95, 99, 109, 142, 154, 168, 186, 189, 205, 246, 263, 264, 274, 281, 354, 358, 362, 363, 364, 377, 380, 383, 388, 389, 401, 405, 406, 407, 409, 411, 414, 415, 418, 442, 443, 446, 448, 458, 523, 532, 538, 559, 560, 582, 602, 658, 659, 672, 674, 679, 687, 688, 689, 693, 726, 756, 800, 803, 804, 814, 871, 904, 905, 912, 913, 914, 915, 990, 991, 992, 996, 997, 998, 999, 1000, 1004, 1011, 1014, 1015, 1016, 1027, 1034, 1035, 1039, 1041, 1043], "choose_check_classifiers_label": 1042, "choose_random_sampl": 377, "choraria": 1044, "chose": [77, 186], "chosen": [47, 58, 80, 105, 154, 171, 186, 187, 201, 212, 228, 246, 262, 263, 264, 266, 272, 283, 351, 358, 362, 387, 406, 407, 409, 410, 414, 417, 439, 445, 448, 450, 452, 453, 459, 496, 523, 535, 557, 558, 559, 560, 561, 562, 564, 565, 647, 653, 656, 658, 659, 661, 663, 671, 676, 677, 678, 679, 680, 690, 694, 794, 797, 798, 800, 803, 804, 814, 834, 853, 904, 905, 912, 913, 914, 915, 948, 990, 993, 995, 997, 998, 1000, 1002, 1007, 1008, 1015, 1017, 1040, 1048, 1049], "chou": [1039, 1040], "choudhari": [1036, 1037, 1046, 1048], "choudhri": 1050, "chowdhuri": [1040, 1046], "choyal": [1039, 1040], "chri": [0, 397, 1032, 1035, 1040, 1041, 1042, 1043, 1046], "chrissobel": 1045, "christ": 57, "christian": [0, 57, 350, 351, 370, 396, 1025, 1032, 1033, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "christianwaldmann": 1047, "christin": [1047, 1048], "christo": [1041, 1042, 1044, 1046, 1049], "christof": [1036, 1037], "christoph": [187, 412, 417, 532, 610, 611, 614, 619, 622, 797, 997, 1002, 1033, 1037, 1040, 1043, 1044, 1045, 1046, 1047], "christopherlim98": 1046, "chrome": 1011, "chronolog": [370, 497], "chu": [851, 1048], "chuan": 1005, "chugh": 1044, "chuliang": 1045, "chun": [1043, 1044, 1046, 1047, 1048], "chung": [1039, 1040], "chunk": [2, 47, 83, 362, 363, 407, 412, 418, 443, 448, 467, 538, 778, 781, 832, 833, 839, 840, 841, 842, 843, 902, 1003, 1039, 1040, 1041, 1042, 1043], "chunk_siz": 1033, "chunker": 415, "church": [897, 1013], "chyi": [1035, 1036, 1037, 1038, 1039], "ci": [88, 363, 378, 379, 1003, 1038, 1040], "ciccolella": [692, 998], "cice": [1008, 1046], "cichocki": [412, 538, 540, 547], "cimport": [376, 384, 1040], "cindi": [1037, 1045, 1049, 1050], "cio": 369, "cipri\u00e1n": 1046, "circl": [2, 70, 93, 125, 152, 153, 161, 236, 246, 296, 299, 305, 309, 311, 330, 343, 356, 371, 379, 383, 407, 451, 461, 514, 522, 764, 1016], "circle1": 99, "circle2": 99, "circle3": 99, "circle4": 99, "circleci": [52, 174, 176, 178, 179, 239, 255, 307, 375], "circlecl": 0, "circuit": [57, 998], "circular": 53, "circumst": [127, 229, 1004, 1020], "circumstanti": 211, "cirru": [0, 375], "cisco": 51, "citat": [0, 369, 372, 387], "cite": [369, 387, 407], "citi": [408, 415, 465], "citizen": 1011, "city_categori": 408, "city_london": 408, "city_pari": 408, "city_sallisaw": 408, "cityblock": [75, 79, 407, 449, 456, 762, 778, 779, 780, 1004], "cividi": 75, "ciyou": 658, "cj": [1003, 1035, 1036, 1037, 1038, 1039], "cjlin": [191, 369, 486, 508, 509, 658, 1035], "ckdtree": [418, 443, 1034], "cl": [0, 47, 51, 382, 389, 914], "clabel": [173, 222], "clae": 1040, "clai": 1032, "claim": [183, 192, 375, 463, 496, 552, 648, 669, 680, 706, 745, 750, 752, 830, 865, 868, 869, 877, 884, 997, 1022], "claimamount": 229, "claimnb": [211, 229], "clair": 1032, "clamp": [900, 1014], "clang": [373, 376], "clara": [369, 1044], "clare": 1042, "clarifi": [383, 390, 793], "clariti": [166, 375, 383], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 87, 88, 89, 91, 103, 104, 115, 118, 124, 125, 126, 128, 132, 133, 140, 149, 150, 155, 168, 170, 171, 173, 174, 176, 178, 179, 181, 183, 186, 187, 191, 192, 202, 203, 204, 219, 223, 226, 227, 232, 238, 245, 246, 248, 254, 255, 256, 261, 262, 263, 264, 269, 271, 275, 279, 280, 283, 286, 288, 289, 292, 294, 295, 297, 298, 299, 300, 314, 318, 322, 324, 325, 326, 328, 330, 331, 334, 335, 337, 339, 340, 343, 347, 350, 351, 352, 355, 357, 364, 367, 369, 370, 371, 372, 375, 376, 377, 379, 380, 381, 382, 384, 387, 388, 393, 398, 401, 402, 403, 405, 407, 408, 410, 412, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 500, 502, 503, 504, 508, 509, 510, 512, 514, 515, 519, 522, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 575, 577, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 720, 722, 727, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 743, 754, 755, 757, 782, 783, 784, 786, 787, 788, 789, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 935, 936, 938, 939, 940, 942, 943, 953, 956, 957, 958, 961, 966, 968, 970, 971, 984, 990, 991, 992, 993, 995, 996, 997, 998, 1000, 1002, 1003, 1005, 1008, 1009, 1011, 1012, 1014, 1017, 1021, 1022, 1023, 1025, 1027, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "class1_1": 156, "class2_1": 156, "class_0": [219, 372, 510], "class_1": [219, 372, 510], "class_2": [372, 510], "class_count_": [839, 840, 841, 842, 843], "class_id": [278, 279], "class_index": 88, "class_label": [389, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 799, 822, 912, 914, 936, 1016], "class_likelihood_ratio": [2, 272, 1001, 1047], "class_log_prior_": [839, 840, 841, 843], "class_memb": 73, "class_member_mask": 82, "class_nam": [136, 262, 885, 916, 917, 918, 1017, 1048], "class_name0": [423, 441, 442, 444, 446, 448, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_name1": [423, 441, 442, 444, 446, 448, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_name2": [423, 441, 442, 444, 446, 448, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 870, 896, 897], "class_of_interest": [66, 278, 631, 1049], "class_prior": [370, 839, 840, 841, 843, 1033, 1036], "class_prior_": [551, 842], "class_protein_loc": 286, "class_sep": [167, 299, 515, 799, 822], "class_weight": [2, 45, 341, 389, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 677, 904, 906, 909, 911, 912, 914, 935, 936, 990, 1015, 1016, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1046, 1047], "class_weight_": [906, 909, 1047], "class_weight_vect": 935, "classes_": [132, 220, 239, 245, 278, 328, 329, 375, 377, 389, 432, 436, 437, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 610, 631, 658, 659, 666, 668, 674, 675, 676, 697, 700, 702, 788, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 851, 854, 861, 864, 871, 872, 875, 885, 899, 900, 901, 904, 906, 909, 912, 914, 917, 1001, 1012, 1015, 1033, 1036, 1037, 1039, 1042, 1044], "classic": [55, 207, 235, 254, 260, 343, 372, 379, 409, 411, 412, 442, 446, 448, 458, 492, 500, 504, 510, 541, 632, 633, 914, 915, 995, 997, 1000, 1003, 1011, 1020, 1032, 1033, 1037, 1046], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 103, 104, 105, 109, 110, 115, 118, 123, 134, 136, 138, 140, 141, 142, 147, 149, 150, 152, 156, 158, 161, 163, 164, 165, 167, 168, 169, 175, 176, 186, 187, 191, 192, 202, 203, 204, 205, 211, 219, 221, 222, 223, 224, 226, 237, 239, 243, 244, 248, 251, 257, 258, 261, 262, 266, 267, 268, 269, 270, 278, 283, 284, 286, 287, 290, 291, 297, 298, 299, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 328, 333, 334, 335, 339, 342, 344, 345, 346, 347, 348, 349, 351, 352, 358, 362, 364, 368, 369, 370, 372, 377, 380, 384, 388, 389, 402, 405, 406, 407, 408, 411, 412, 414, 415, 416, 424, 436, 468, 474, 481, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 510, 512, 514, 515, 519, 520, 522, 523, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 569, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 609, 610, 611, 613, 614, 622, 631, 632, 633, 643, 658, 659, 666, 668, 674, 675, 676, 697, 703, 705, 708, 712, 713, 715, 716, 718, 726, 727, 729, 730, 734, 735, 738, 741, 743, 754, 756, 758, 759, 761, 782, 783, 784, 786, 787, 788, 789, 794, 796, 799, 800, 801, 803, 804, 805, 806, 814, 818, 819, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 851, 853, 854, 860, 861, 862, 864, 868, 871, 876, 877, 878, 879, 884, 885, 888, 890, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 933, 936, 945, 990, 991, 993, 994, 995, 998, 999, 1003, 1006, 1008, 1009, 1011, 1012, 1014, 1019, 1020, 1022, 1023, 1024, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 89, 102, 103, 104, 105, 106, 125, 134, 135, 136, 137, 138, 141, 142, 145, 152, 155, 156, 161, 164, 165, 166, 167, 172, 183, 188, 189, 191, 202, 203, 209, 211, 218, 220, 223, 226, 229, 238, 241, 243, 245, 246, 251, 262, 263, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 286, 287, 291, 297, 298, 300, 304, 307, 311, 320, 321, 325, 327, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 342, 343, 347, 348, 352, 370, 372, 375, 377, 380, 387, 389, 398, 406, 407, 408, 411, 415, 416, 417, 424, 432, 433, 434, 435, 436, 437, 438, 487, 488, 496, 504, 512, 514, 515, 522, 531, 536, 537, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 566, 567, 568, 569, 570, 593, 594, 602, 606, 610, 622, 629, 631, 632, 633, 649, 658, 659, 666, 668, 671, 672, 673, 674, 675, 676, 697, 698, 700, 702, 703, 707, 708, 709, 711, 712, 713, 718, 720, 722, 726, 727, 729, 730, 732, 734, 735, 738, 739, 740, 741, 743, 754, 756, 782, 783, 784, 787, 788, 789, 794, 796, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 852, 854, 855, 860, 861, 862, 864, 865, 871, 884, 885, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 920, 923, 924, 937, 940, 942, 990, 991, 993, 996, 997, 998, 1001, 1002, 1003, 1006, 1009, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1025, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050], "classification_data": 46, "classification_report": [2, 45, 68, 102, 165, 267, 307, 328, 329, 822, 1001, 1034, 1036, 1040, 1041, 1042, 1044, 1048, 1050], "classificationcriterion": 1040, "classifier_": [89, 245], "classifier_01": 326, "classifier_05": 326, "classifier__c": 103, "classifier__criterion": 250, "classifier__max_depth": 250, "classifier__max_featur": 250, "classifier__min_samples_leaf": 188, "classifier__n_estim": 250, "classifier__n_neighbor": 291, "classifier_idx": 66, "classifier_model": 291, "classifier_other_threshold": 799, "classifier_tag": [923, 937], "classifier_tun": 822, "classifierchain": [2, 288, 389, 398, 836, 838, 1039, 1044, 1047, 1049, 1050], "classifiermixin": [2, 132, 245, 375, 377, 389, 411, 924, 1043], "classifiertag": [2, 923, 937], "classify__c": 104, "classmethod": [382, 437, 631, 632, 697, 698, 699, 700, 701, 702, 806, 823], "classnameprefixfeaturesoutmixin": [2, 377, 431, 1047], "claudio": [372, 1046, 1047, 1049, 1050], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 387], "clauss": 1049, "clb": 187, "clean": [85, 103, 210, 358, 367, 373, 413, 1007, 1011, 1042], "cleaner": 99, "cleanli": [95, 1032], "cleanup": [375, 1032], "clear": [43, 88, 93, 104, 186, 187, 314, 370, 374, 375, 377, 387, 388, 389, 405, 408, 413, 918, 919, 990, 995, 1043, 1044, 1045, 1050], "clear_data_hom": 2, "clearer": [236, 1016], "clearli": [43, 93, 123, 187, 243, 343, 374, 375, 387, 389, 412, 414, 1002, 1008], "clegg": 1035, "clemen": 1036, "clement": [1039, 1040, 1044], "clenaghan": [1037, 1038], "cleveland": 370, "cleverless": 1034, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 84, 87, 91, 96, 103, 138, 145, 148, 150, 155, 159, 161, 164, 165, 167, 172, 174, 189, 202, 205, 209, 215, 218, 220, 223, 224, 225, 226, 227, 234, 239, 240, 243, 246, 252, 258, 266, 270, 274, 275, 277, 280, 281, 292, 295, 296, 297, 300, 304, 311, 314, 318, 319, 320, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 354, 355, 357, 362, 370, 388, 389, 401, 408, 411, 414, 416, 437, 549, 550, 553, 555, 557, 559, 561, 563, 564, 567, 593, 594, 597, 632, 634, 638, 639, 640, 641, 642, 644, 645, 648, 652, 658, 659, 660, 661, 662, 666, 668, 669, 672, 673, 674, 675, 676, 677, 680, 697, 698, 700, 702, 711, 788, 800, 803, 804, 814, 832, 833, 834, 836, 839, 840, 841, 842, 843, 850, 851, 861, 904, 906, 908, 909, 912, 916, 918, 991, 993, 997, 1001, 1002, 1004, 1005, 1007, 1008, 1015, 1016, 1017], "clf1": [69, 155, 156, 414, 569], "clf2": [69, 155, 156, 377, 414, 569], "clf3": [69, 155, 156, 377, 414, 569], "clf__": 270, "clf__alpha": 270, "clf__c": 408, "clf_descr": 350, "clf_en_lr": 203, "clf_err": 138, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 203, "clf_l2_lr": 203, "clf_list": [62, 64], "clf_name": [49, 350], "clf_no_weight": 348, "clf_pf": 842, "clf_prob": 63, "clf_sample_weight": 245, "clf_score": 61, "clf_sel": 189, "clf_select": 164, "clf_sgd": 225, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 160, "clf_weight": 348, "click": [240, 250, 270, 319, 325, 375, 377, 383, 395, 1025], "clickabl": 1046, "client": 377, "clifford": 1045, "cliffordemmanuel": 1045, "clim": 173, "climatologi": 405, "climb": [407, 447, 460], "clinton": 57, "clip": [62, 64, 229, 241, 309, 339, 635, 676, 741, 874, 1011, 1036, 1043, 1044], "clmbst": 1044, "clock": 43, "clone": [2, 89, 146, 178, 187, 245, 307, 325, 358, 373, 375, 378, 379, 381, 383, 389, 405, 408, 417, 436, 464, 569, 570, 597, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 806, 823, 828, 831, 835, 838, 864, 865, 901, 1021, 1032, 1038, 1040, 1044, 1048, 1049], "clone_kernel": [610, 611, 1042], "clone_with_theta": [178, 417, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "cloned_classifi": 432, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 80, 87, 93, 99, 109, 110, 113, 125, 137, 143, 146, 150, 154, 170, 171, 174, 175, 176, 177, 178, 186, 188, 197, 215, 217, 232, 238, 244, 248, 254, 260, 269, 270, 282, 283, 295, 296, 309, 318, 339, 343, 344, 351, 358, 370, 375, 377, 378, 379, 387, 389, 390, 405, 407, 410, 411, 414, 417, 449, 454, 471, 508, 509, 532, 563, 628, 643, 647, 661, 672, 674, 687, 705, 746, 797, 818, 819, 839, 840, 841, 843, 850, 931, 990, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1007, 1008, 1011, 1016, 1020, 1025, 1035, 1039, 1040, 1041], "close_pric": 51, "closer": [43, 72, 123, 125, 153, 168, 170, 187, 193, 215, 343, 352, 405, 407, 412, 448, 553, 628, 712, 846, 847, 852, 854, 855, 856, 1016, 1039], "closest": [64, 80, 97, 215, 377, 407, 439, 441, 442, 446, 447, 448, 458, 653, 779, 780, 834, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 992, 995, 1002, 1004], "closur": 55, "cloud": [78, 115, 119, 121, 183, 383, 412, 533, 541, 692, 1001, 1019, 1020, 1022], "cloudpickl": 1027, "clouldpickl": 401, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 372, "clue": [370, 383, 998], "clump": 235, "clust": [98, 449, 456], "cluster": [2, 48, 53, 54, 56, 58, 61, 77, 78, 80, 83, 84, 86, 87, 90, 92, 94, 95, 102, 111, 132, 136, 142, 150, 163, 178, 189, 232, 234, 235, 236, 242, 248, 254, 255, 256, 257, 270, 295, 296, 298, 312, 319, 323, 328, 329, 330, 332, 341, 349, 350, 352, 357, 364, 368, 370, 372, 375, 377, 380, 387, 389, 402, 403, 408, 413, 415, 418, 421, 422, 425, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 487, 502, 503, 504, 511, 512, 513, 514, 515, 522, 530, 541, 544, 553, 564, 566, 589, 590, 591, 631, 691, 692, 695, 704, 705, 710, 714, 715, 717, 719, 725, 731, 736, 737, 755, 757, 778, 779, 786, 792, 793, 795, 797, 798, 856, 857, 865, 869, 876, 884, 940, 942, 961, 984, 991, 998, 1000, 1004, 1007, 1009, 1011, 1014, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "cluster_1": 150, "cluster_2": 150, "cluster_al": [447, 460], "cluster_cent": [73, 94, 96, 97, 460], "cluster_center_indic": [439, 453], "cluster_centers_": [77, 78, 83, 91, 93, 94, 96, 97, 120, 322, 351, 439, 442, 446, 447, 448], "cluster_centers_indic": [73, 453], "cluster_centers_indices_": [73, 439], "cluster_data": 92, "cluster_doc": 57, "cluster_hierarchy_": [407, 449], "cluster_id": [189, 351], "cluster_id_to_feature_id": 189, "cluster_label": [89, 93], "cluster_method": 449, "cluster_optics_dbscan": [2, 98, 407], "cluster_optics_xi": 2, "cluster_qr": [80, 407, 451, 461, 1046], "cluster_s": 351, "cluster_selection_epsilon": 445, "cluster_selection_method": 445, "cluster_std": [63, 73, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 223, 238, 257, 312, 341, 371, 512], "cluster_word": 57, "clusterer_": 89, "clustering_algorithm": [78, 79, 95], "clustering_metr": 91, "clustermixin": [2, 377, 1049], "clusters_std": 341, "clyde": 1037, "cl\u00e9ment": [1041, 1045, 1047], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 100, 111, 113, 120, 123, 136, 142, 161, 166, 173, 174, 187, 220, 223, 224, 227, 232, 233, 234, 239, 242, 243, 247, 252, 262, 263, 264, 289, 292, 293, 295, 299, 302, 304, 306, 307, 309, 311, 320, 323, 328, 329, 333, 335, 336, 337, 339, 340, 341, 347, 348, 355, 372, 408, 697, 917, 1001, 1011, 1017], "cm2013": 407, "cm_bright": [67, 304, 311], "cm_displai": 239, "cm_piyg": 311, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 80, 81, 83, 84, 86, 87, 91, 111, 113, 120, 123, 130, 136, 142, 161, 166, 173, 174, 187, 193, 197, 203, 220, 223, 224, 225, 227, 232, 233, 234, 242, 243, 247, 262, 264, 289, 293, 295, 297, 298, 300, 302, 304, 306, 307, 309, 311, 328, 329, 333, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 355, 697], "cmap_bold": [297, 300], "cmap_cv": 264, "cmap_data": 264, "cmap_light": [297, 300], "cmcsa": 51, "cmd": 373, "cmu": 899, "cname": 77, "cnb": 1003, "cnp": 376, "cnx": 1040, "co": [2, 43, 51, 53, 56, 58, 74, 75, 102, 151, 153, 175, 183, 186, 212, 233, 269, 284, 322, 332, 350, 351, 352, 356, 379, 413, 415, 448, 450, 452, 487, 511, 591, 699, 719, 764, 795, 996, 1011, 1022, 1025, 1026, 1027], "co2": [169, 177, 183, 417, 496, 611, 615, 622, 623, 625, 1022, 1039], "co2_data": 175, "co2_kernel": 175, "coars": [43, 142, 381, 447, 460], "coarser": [142, 146], "coast": [50, 302], "coastlin": [50, 168, 302, 372], "coca": 51, "cock": [154, 1041], "cockburn": 1034, "coclust": [57, 404, 450, 513], "cocoa": 1025, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 369, 373, 374, 376, 378, 379, 384, 387, 389, 390, 393, 398, 401, 403, 406, 407, 414, 415, 441, 442, 446, 448, 458, 496, 526, 530, 531, 537, 538, 542, 543, 545, 546, 548, 566, 572, 581, 582, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 682, 683, 685, 686, 711, 832, 833, 834, 871, 878, 990, 998, 1002, 1011, 1013, 1015, 1016, 1020, 1021, 1022, 1024, 1025, 1032, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "code_book_": 834, "code_init": [531, 545], "code_s": [286, 834, 1002], "codebas": [324, 358, 375, 376, 377, 415, 1032, 1038], "codebook": [286, 566, 834], "codecov": 383, "codeofconduct": 375, "coder": [129, 542, 716], "codevig": 1038, "coef": [49, 87, 129, 185, 186, 193, 197, 203, 204, 206, 210, 214, 215, 216, 220, 226, 227, 252, 282, 306, 324, 347, 524, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 669, 672, 674, 680, 681, 682, 683, 684, 685, 686, 687, 1005], "coef0": [191, 343, 345, 451, 535, 639, 640, 643, 775, 777, 906, 907, 908, 909, 910, 999, 1016], "coef_": [46, 49, 53, 87, 115, 164, 165, 168, 185, 186, 193, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 214, 215, 216, 220, 226, 227, 246, 252, 282, 283, 316, 322, 337, 344, 347, 350, 358, 370, 377, 389, 410, 416, 464, 481, 482, 483, 549, 593, 594, 597, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 904, 905, 906, 907, 908, 909, 910, 984, 995, 997, 1015, 1016, 1032, 1034, 1037, 1039, 1044, 1046, 1049, 1050], "coef_agglomeration_": 87, "coef_en_lr": 203, "coef_i": 186, "coef_init": [646, 647, 652, 653, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 681, 684], "coef_l": 200, "coef_l1_lr": 203, "coef_l2_lr": 203, "coef_lar": 200, "coef_lasso": 200, "coef_lasso_": 206, "coef_multi_task_lasso_": 206, "coef_p": 200, "coef_path": [653, 663, 684], "coef_path_": [650, 651, 654, 655, 997], "coef_path_continu": [653, 663, 684], "coef_path_lar": [653, 663, 684], "coef_pl": 200, "coef_positive_lar": 200, "coef_ridg": 196, "coef_selection_": 87, "coeff": 680, "coeff_diff": 198, "coeffeci": 1041, "coeffici": [2, 25, 46, 49, 73, 82, 91, 93, 109, 110, 113, 120, 123, 159, 165, 170, 183, 184, 185, 192, 196, 197, 198, 200, 203, 205, 206, 207, 208, 209, 213, 214, 226, 229, 252, 269, 283, 306, 316, 320, 321, 322, 343, 346, 350, 351, 352, 362, 371, 377, 389, 392, 409, 410, 412, 416, 417, 420, 430, 451, 464, 466, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 496, 524, 526, 527, 531, 535, 537, 539, 542, 543, 548, 552, 554, 556, 558, 560, 562, 565, 568, 570, 582, 589, 593, 597, 609, 611, 614, 627, 635, 636, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 701, 703, 716, 719, 729, 734, 738, 743, 750, 753, 775, 777, 785, 786, 788, 792, 793, 796, 815, 827, 830, 837, 838, 847, 855, 862, 865, 877, 884, 904, 905, 906, 907, 908, 909, 910, 913, 915, 992, 995, 997, 1015, 1016, 1022, 1032, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1049], "coefs_": [205, 306, 861, 862, 1005, 1037], "coefs_cf": 316, "coefs_enet": 200, "coefs_lar": 200, "coefs_lasso": 200, "coefs_no_cf": 316, "coefs_path": 659, "coefs_paths_": [659, 1042], "coefs_positive_enet": 200, "coefs_positive_lar": 200, "coefs_positive_lasso": 200, "coelho": [1033, 1035, 1036, 1040], "coelhudo": 1044, "cognit": [168, 372], "cohen": [2, 716, 1040], "cohen_kappa_scor": [2, 1001, 1037, 1039], "coher": 407, "cohort": 157, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 86, 87, 89, 95, 99, 100, 123, 183, 407, 415, 440, 461, 1013, 1022], "coincid": [174, 213, 417], "col": [52, 57, 62, 64, 73, 77, 82, 88, 92, 96, 97, 102, 105, 140, 155, 175, 231, 248, 347, 511, 513], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [422, 450, 452], "col_indic": 149, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 289, "cole": 1041, "coleman": [1033, 1034], "colgat": [51, 55], "colin": [45, 370, 1038], "collabor": 375, "collaps": [43, 187, 248, 309, 339, 387], "colleagu": 269, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 105, 138, 149, 150, 157, 168, 175, 182, 189, 199, 205, 234, 241, 272, 276, 351, 352, 362, 370, 372, 379, 393, 411, 412, 414, 415, 445, 463, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 569, 570, 581, 583, 584, 588, 589, 590, 591, 632, 729, 730, 738, 778, 783, 784, 787, 802, 806, 807, 809, 823, 971, 974, 990, 996, 997, 1001, 1007, 1012, 1021, 1025, 1034, 1044], "colleg": [0, 185], "college_degre": 185, "collid": 415, "collin": 1035, "collinear": [186, 189, 216, 229, 414, 567, 648, 669, 680, 877, 997, 1032], "collis": [351, 352, 415, 582, 589], "collot": [1046, 1047], "colombia": [50, 302, 370, 498], "colon": 375, "coloni": 370, "color": [43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 73, 75, 77, 79, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 111, 112, 113, 116, 118, 120, 121, 122, 124, 126, 127, 128, 129, 134, 135, 140, 142, 143, 145, 148, 149, 150, 151, 152, 154, 156, 159, 161, 166, 170, 172, 173, 174, 175, 176, 177, 178, 179, 182, 186, 188, 189, 193, 194, 196, 197, 199, 200, 201, 202, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 225, 228, 229, 232, 233, 234, 236, 238, 242, 243, 244, 246, 249, 254, 255, 256, 257, 258, 259, 260, 263, 264, 268, 270, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 288, 291, 294, 295, 296, 297, 300, 301, 302, 304, 309, 310, 311, 313, 314, 315, 319, 325, 330, 331, 333, 337, 338, 339, 340, 341, 343, 345, 346, 347, 355, 356, 370, 372, 383, 407, 415, 493, 494, 506, 583, 584, 1015, 1017, 1037, 1042, 1044, 1049], "color_continuous_scal": 270, "color_intens": 48, "color_it": [255, 259, 260], "color_map": 333, "color_palett": [72, 135, 149, 259], "colorbar": [43, 50, 66, 75, 120, 130, 150, 166, 171, 173, 174, 176, 187, 231, 242, 258, 280, 309, 339, 697, 1044], "colorbarbas": 309, "colorblind": [72, 135, 149], "coloring_matrix": [109, 110], "colormap": [120, 178, 339, 697, 1045], "colors_": 77, "colors_list": 140, "colour": [257, 372, 415, 587, 1002], "colt": [726, 756, 1001], "colton": 993, "columbia": 0, "column": [2, 43, 47, 52, 58, 59, 93, 101, 104, 107, 141, 142, 143, 146, 149, 151, 154, 168, 175, 181, 183, 185, 186, 187, 188, 189, 201, 211, 212, 215, 219, 229, 240, 247, 248, 249, 252, 259, 263, 269, 270, 280, 281, 283, 288, 306, 314, 315, 316, 320, 321, 322, 323, 325, 326, 350, 351, 352, 362, 369, 370, 372, 375, 377, 381, 384, 387, 388, 389, 404, 407, 408, 410, 412, 414, 415, 416, 419, 422, 450, 452, 463, 465, 466, 470, 471, 477, 486, 487, 488, 489, 490, 492, 494, 496, 500, 501, 502, 504, 505, 508, 509, 510, 511, 513, 515, 526, 531, 534, 537, 541, 542, 548, 555, 557, 558, 561, 562, 564, 565, 566, 567, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 627, 630, 632, 633, 634, 646, 648, 652, 658, 660, 662, 664, 665, 669, 680, 685, 686, 697, 713, 718, 719, 729, 730, 738, 754, 763, 768, 769, 770, 773, 783, 784, 787, 788, 800, 803, 804, 814, 825, 830, 835, 838, 839, 840, 841, 842, 843, 844, 845, 864, 868, 869, 870, 871, 877, 878, 879, 883, 884, 885, 886, 888, 889, 890, 894, 895, 904, 906, 909, 912, 914, 921, 926, 930, 931, 936, 948, 963, 976, 977, 979, 987, 990, 991, 993, 997, 999, 1001, 1002, 1009, 1011, 1016, 1021, 1022, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "column_labels_": [58, 59, 404, 450, 452], "column_nam": 229, "column_or_1d": [2, 384, 1043, 1047], "column_result": 270, "column_stack": [76, 304, 311], "column_to_drop": 186, "column_tran": [229, 408], "column_transform": 326, "columnar": [369, 463, 1020], "columns_": [57, 404, 422, 450, 452], "columns_to_drop": 263, "columntransform": [2, 43, 102, 103, 154, 186, 187, 188, 211, 229, 240, 248, 250, 252, 315, 319, 321, 322, 323, 325, 367, 369, 387, 388, 398, 465, 466, 629, 869, 990, 991, 1021, 1027, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "columntransformercolumntransform": [103, 154, 186, 188, 240, 250, 315, 319, 322], "columntransformerinot": [154, 187], "columnwis": 412, "com": [51, 102, 289, 350, 370, 373, 375, 379, 380, 381, 383, 387, 407, 441, 534, 541, 671, 705, 1039, 1042], "coma": 1025, "comaniciu": [96, 407, 447], "comapar": 407, "comaprison": [610, 658, 909], "comb": 1046, "combat": [304, 412], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 94, 102, 103, 105, 106, 107, 120, 126, 128, 129, 133, 135, 143, 144, 148, 149, 157, 170, 176, 181, 182, 183, 186, 197, 204, 211, 215, 228, 229, 235, 238, 240, 243, 269, 270, 278, 280, 281, 298, 305, 315, 320, 321, 323, 342, 343, 352, 355, 362, 367, 371, 372, 375, 380, 388, 389, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 444, 463, 465, 466, 472, 474, 475, 478, 479, 480, 488, 496, 508, 509, 515, 521, 524, 526, 531, 537, 538, 540, 542, 547, 549, 560, 562, 565, 567, 568, 610, 614, 616, 621, 624, 630, 634, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 678, 679, 681, 684, 692, 701, 730, 788, 800, 803, 804, 811, 812, 825, 827, 831, 848, 863, 864, 865, 869, 877, 878, 879, 884, 904, 974, 990, 993, 994, 997, 1001, 1002, 1004, 1007, 1011, 1014, 1015, 1017, 1018, 1022, 1025, 1032, 1037, 1040, 1043, 1044, 1045, 1047, 1048], "combinator": 810, "combined_featur": 106, "combsccod": 1046, "comcast": 51, "come": [82, 100, 102, 111, 116, 125, 168, 170, 204, 243, 283, 318, 350, 351, 362, 364, 368, 372, 375, 376, 379, 383, 387, 389, 393, 401, 406, 407, 411, 414, 415, 438, 449, 455, 471, 550, 705, 795, 821, 906, 909, 953, 990, 991, 995, 998, 1000, 1004, 1007, 1016, 1032, 1043, 1046, 1048], "comedi": 875, "comfort": [88, 414], "command": [242, 362, 363, 373, 375, 379, 381, 383, 393, 415, 508, 1020, 1034], "comment": [80, 350, 373, 374, 375, 376, 378, 379, 383, 486, 579, 1001], "commerc": 1025, "commerci": [411, 1025], "commit": [378, 379, 383, 1024, 1032, 1033, 1034, 1035], "committ": [375, 1032], "commod": 1001, "common": [2, 52, 54, 55, 57, 123, 165, 168, 183, 184, 185, 215, 216, 264, 269, 276, 286, 320, 343, 350, 352, 357, 362, 369, 375, 377, 383, 385, 387, 388, 392, 393, 398, 404, 405, 407, 408, 411, 413, 416, 417, 446, 464, 466, 496, 590, 632, 653, 672, 673, 701, 746, 753, 769, 801, 802, 805, 815, 817, 818, 819, 820, 821, 827, 830, 865, 867, 875, 876, 877, 882, 884, 889, 890, 892, 893, 894, 895, 921, 923, 950, 953, 990, 991, 997, 1004, 1007, 1011, 1016, 1017, 1020, 1021, 1022, 1025, 1027, 1032, 1040, 1042, 1043, 1047], "common_nod": 357, "common_node_id": 357, "common_param": [90, 146, 149, 187, 244, 271, 272, 343], "commonli": [208, 211, 266, 282, 343, 368, 389, 407, 408, 417, 614, 758, 759, 797, 833, 876, 998, 999, 1001, 1002, 1004, 1048], "commun": [245, 368, 374, 380, 383, 389, 390, 407, 414, 538, 540, 547, 692, 710, 876, 991, 998, 1004, 1011, 1015, 1020, 1024, 1025, 1040, 1041], "commut": [43, 52], "comp": [57, 115, 116, 123, 130, 307, 332, 350, 351, 352, 370], "comp_cov": [468, 469, 470, 471, 472, 473, 474, 475], "compact": [168, 191, 309, 362, 372, 844, 845, 1017, 1034], "compani": [211, 229, 406, 407, 1025], "companion": [375, 1011], "companioni": 1032, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 81, 82, 85, 87, 88, 89, 90, 91, 97, 100, 103, 104, 105, 106, 111, 112, 114, 116, 123, 127, 129, 133, 134, 135, 137, 142, 143, 144, 146, 148, 149, 150, 152, 154, 160, 168, 174, 181, 182, 183, 186, 187, 188, 189, 192, 194, 196, 197, 199, 200, 201, 204, 207, 211, 212, 214, 215, 217, 219, 221, 225, 228, 229, 231, 232, 235, 237, 240, 243, 246, 248, 249, 251, 256, 257, 261, 264, 266, 267, 268, 270, 272, 274, 276, 278, 280, 281, 282, 284, 286, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 303, 306, 308, 310, 313, 314, 316, 320, 343, 350, 351, 352, 356, 357, 358, 364, 370, 372, 375, 377, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 416, 417, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 457, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 489, 496, 502, 504, 512, 514, 522, 524, 528, 531, 537, 539, 541, 545, 546, 551, 552, 561, 562, 563, 564, 565, 631, 639, 644, 645, 653, 655, 657, 658, 663, 666, 668, 676, 677, 684, 695, 705, 712, 715, 731, 738, 743, 786, 798, 800, 805, 814, 827, 830, 837, 846, 850, 853, 857, 861, 862, 864, 865, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 908, 909, 990, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1022, 1032, 1034, 1039, 1040, 1045], "comparison": [47, 51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 75, 77, 83, 90, 91, 92, 93, 94, 96, 102, 110, 119, 121, 122, 124, 126, 130, 134, 136, 137, 140, 146, 149, 152, 156, 157, 162, 169, 175, 176, 177, 179, 183, 188, 196, 197, 198, 199, 200, 203, 204, 209, 211, 215, 226, 229, 230, 233, 234, 235, 236, 237, 241, 242, 256, 261, 263, 264, 265, 266, 273, 281, 283, 288, 298, 304, 311, 313, 314, 318, 320, 333, 336, 345, 349, 350, 351, 358, 370, 372, 389, 405, 407, 409, 410, 412, 416, 417, 436, 437, 441, 442, 444, 445, 446, 448, 461, 481, 482, 483, 487, 504, 512, 514, 515, 522, 525, 535, 541, 549, 550, 553, 564, 565, 581, 582, 588, 589, 590, 591, 606, 608, 610, 611, 615, 622, 625, 631, 639, 643, 659, 672, 688, 689, 690, 691, 692, 704, 738, 743, 779, 788, 800, 801, 802, 803, 805, 806, 814, 816, 817, 818, 819, 820, 821, 830, 839, 842, 846, 861, 862, 865, 877, 878, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 906, 907, 909, 910, 912, 990, 994, 995, 998, 1001, 1003, 1004, 1007, 1016, 1022, 1029], "compat": [245, 272, 289, 319, 369, 373, 378, 384, 385, 387, 389, 393, 398, 401, 415, 462, 468, 508, 566, 577, 589, 603, 614, 615, 618, 619, 620, 622, 623, 632, 633, 634, 658, 659, 673, 675, 774, 778, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 848, 849, 864, 869, 877, 878, 916, 917, 923, 926, 942, 943, 963, 998, 1004, 1006, 1020, 1021, 1025, 1027, 1032, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "compens": [112, 185, 187, 191, 211, 229, 270, 409, 412], "compet": [43, 186], "competit": [43, 146, 350, 414, 644, 1004], "compil": [154, 289, 352, 362, 363, 376, 377, 378, 383, 384, 387, 1020, 1032], "compl": 91, "complain": 1050, "complement": [2, 187, 279, 350, 632, 633, 802, 817, 820, 830, 839, 840, 841, 842, 843, 1008, 1023, 1027, 1040], "complementari": [43, 415], "complementnb": [2, 270, 350, 839, 840, 842, 843, 1003, 1040, 1044, 1045, 1047], "complementnbcomplementnb": 270, "complet": [0, 2, 43, 72, 73, 74, 79, 82, 85, 91, 95, 116, 149, 152, 163, 165, 168, 183, 188, 189, 217, 237, 238, 245, 248, 263, 267, 314, 316, 318, 351, 358, 370, 375, 379, 380, 383, 387, 408, 411, 412, 414, 415, 440, 444, 448, 451, 461, 462, 463, 466, 495, 536, 537, 538, 539, 544, 546, 558, 569, 570, 581, 587, 588, 589, 591, 627, 628, 629, 630, 645, 649, 657, 671, 673, 704, 705, 715, 716, 717, 729, 731, 736, 737, 757, 786, 795, 832, 835, 838, 847, 863, 864, 865, 866, 933, 985, 995, 997, 1001, 1002, 1004, 1016, 1017, 1020, 1022, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "completed_fac": 247, "completeness_scor": [2, 73, 82, 91, 319, 351, 407, 736, 737, 795, 1001], "complex": [42, 48, 49, 54, 58, 104, 140, 154, 167, 170, 175, 181, 183, 204, 215, 225, 228, 237, 244, 245, 248, 261, 267, 270, 273, 278, 310, 318, 321, 322, 326, 327, 339, 343, 352, 353, 357, 371, 375, 380, 387, 407, 408, 412, 414, 418, 439, 443, 446, 447, 449, 466, 488, 500, 501, 502, 514, 534, 541, 551, 557, 558, 559, 560, 562, 564, 565, 604, 630, 638, 656, 658, 676, 677, 734, 750, 800, 830, 832, 860, 864, 865, 869, 877, 884, 900, 904, 907, 910, 912, 913, 914, 915, 990, 991, 993, 994, 996, 998, 1000, 1002, 1007, 1011, 1014, 1021, 1022, 1023, 1025, 1027, 1033, 1035, 1041, 1042, 1045], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [375, 389, 942, 1021], "complianc": [0, 149], "compliant": [323, 375, 1050], "complic": [64, 245, 304, 381, 417, 694, 1004], "compon": [2, 11, 43, 44, 55, 79, 91, 95, 102, 105, 114, 115, 119, 121, 122, 124, 125, 127, 128, 130, 152, 160, 175, 183, 185, 197, 220, 231, 242, 243, 246, 254, 255, 256, 258, 259, 260, 262, 268, 270, 275, 289, 290, 291, 292, 300, 301, 307, 314, 320, 355, 362, 367, 370, 375, 377, 381, 384, 401, 403, 407, 408, 410, 415, 417, 419, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 502, 504, 515, 521, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 797, 798, 799, 800, 803, 804, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 947, 948, 993, 998, 1000, 1011, 1013, 1016, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1032, 1034, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "component_1": 259, "component_2": 259, "component_indices_": [639, 1045], "components_": [45, 54, 91, 116, 120, 122, 123, 130, 242, 243, 307, 314, 322, 389, 408, 412, 443, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 543, 544, 639, 853, 860, 896, 897, 993, 1013, 1036, 1038, 1044, 1047, 1050], "components_col": 105, "compos": [2, 43, 44, 62, 101, 102, 103, 107, 116, 136, 143, 154, 183, 186, 187, 188, 211, 213, 229, 240, 248, 250, 252, 283, 286, 315, 319, 321, 322, 323, 325, 326, 388, 398, 407, 408, 411, 463, 464, 465, 466, 515, 553, 612, 1000, 1002, 1022, 1032], "composit": [7, 35, 240, 319, 367, 411, 658, 788, 991, 997, 1010, 1027, 1033], "compound": [43, 229, 415, 610, 612, 680, 724, 752, 997], "compoundkernel": [2, 610, 1046], "comprehens": [343, 383, 415, 758, 759, 999, 1025, 1040], "compress": [42, 50, 55, 99, 183, 286, 309, 370, 401, 407, 412, 415, 416, 652, 672, 692, 834, 877, 971, 974, 986, 997, 1002, 1011, 1022, 1032, 1041], "compressed_raccoon_kmean": 86, "compressed_raccoon_uniform": 86, "compris": [102, 146, 267, 350, 351, 352, 370, 387, 412, 414, 515, 807, 998], "compromis": [48, 64, 187, 362, 375, 647, 679, 1004, 1035], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 80, 85, 87, 90, 91, 93, 94, 102, 104, 110, 111, 112, 113, 121, 129, 137, 141, 144, 145, 146, 147, 148, 149, 167, 168, 170, 175, 177, 178, 181, 186, 187, 188, 189, 191, 194, 195, 197, 198, 199, 200, 201, 211, 213, 215, 219, 225, 228, 229, 232, 235, 239, 241, 242, 244, 248, 249, 251, 263, 265, 267, 269, 270, 271, 272, 276, 278, 280, 289, 291, 293, 295, 296, 298, 299, 302, 309, 318, 322, 323, 326, 329, 331, 339, 343, 346, 350, 351, 352, 357, 363, 364, 369, 370, 372, 375, 380, 381, 382, 384, 387, 388, 389, 392, 393, 401, 402, 403, 404, 405, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 456, 458, 460, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 516, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 582, 585, 586, 589, 590, 591, 593, 594, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 734, 736, 738, 739, 740, 743, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 869, 870, 873, 874, 879, 880, 881, 882, 883, 884, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 909, 911, 912, 913, 914, 915, 945, 946, 947, 948, 965, 966, 973, 975, 981, 990, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "computation": [37, 53, 109, 120, 140, 145, 154, 170, 289, 343, 350, 361, 376, 387, 407, 408, 411, 412, 414, 417, 538, 632, 633, 671, 763, 800, 802, 803, 804, 814, 827, 997, 998, 1000, 1008, 1009, 1013, 1027, 1036], "compute_class_weight": [2, 389, 1035, 1046], "compute_corrected_ttest": 269, "compute_dist": [440, 444, 1044], "compute_full_tre": [440, 444, 1036], "compute_import": 1034, "compute_inverse_compon": [896, 897, 1013], "compute_inverse_transform": 1046, "compute_label": [441, 448], "compute_node_depth": 357, "compute_optics_graph": [2, 454, 455, 1049], "compute_sample_weight": [2, 1046], "compute_scor": [107, 127, 193, 194, 644, 645, 1041], "compute_sourc": 419, "computed_scor": 645, "con": [401, 589, 1000], "concat": [43, 181, 185, 201, 229, 877], "concaten": [2, 63, 70, 74, 83, 94, 101, 104, 112, 136, 150, 164, 178, 183, 193, 196, 204, 225, 226, 232, 238, 254, 258, 259, 265, 274, 276, 277, 278, 279, 294, 307, 313, 316, 329, 338, 342, 350, 408, 463, 466, 504, 509, 531, 537, 541, 542, 599, 781, 800, 863, 864, 866, 869, 877, 909, 1002, 1022, 1033], "concav": [168, 326, 372], "concentr": [46, 48, 98, 118, 125, 134, 152, 175, 182, 183, 236, 253, 255, 260, 280, 299, 311, 330, 371, 375, 414, 442, 519, 797, 1000, 1007, 1022], "concentrations_prior": 254, "concept": [2, 112, 140, 144, 245, 278, 387, 407, 413, 415, 993, 1001, 1004, 1017, 1025], "conceptu": [372, 414, 999], "concern": [37, 56, 71, 108, 114, 117, 119, 131, 133, 162, 169, 180, 183, 190, 192, 230, 253, 259, 263, 285, 287, 290, 303, 308, 327, 334, 349, 353, 362, 377, 401, 998, 1013], "concis": [64, 211, 375, 380, 1043, 1045], "conclud": [134, 186, 194, 229, 269, 352, 358, 390, 864], "conclus": [43, 125, 186, 188, 211, 213, 269, 271, 358, 414], "concomit": [649, 997], "concret": [215, 376, 390, 406, 416, 674, 675, 896, 897, 997, 1015, 1020], "concurr": [389, 415, 966, 1044, 1046], "conda": [318, 319, 320, 321, 322, 323, 324, 325, 326, 363, 375, 376, 378, 379, 381, 383, 393, 394, 400, 401, 1017], "conda_prefix": 381, "condarc": 373, "condens": [191, 445], "condit": [2, 43, 51, 52, 62, 64, 113, 146, 183, 184, 186, 201, 204, 208, 213, 216, 229, 245, 249, 272, 321, 357, 381, 387, 392, 403, 404, 405, 406, 407, 409, 412, 414, 416, 450, 463, 470, 471, 472, 477, 496, 513, 523, 524, 536, 539, 540, 541, 543, 545, 547, 549, 550, 562, 627, 632, 633, 643, 650, 651, 652, 654, 655, 656, 670, 672, 673, 674, 675, 682, 683, 687, 697, 712, 717, 718, 736, 737, 795, 839, 840, 841, 842, 843, 862, 865, 868, 877, 878, 881, 885, 948, 972, 995, 997, 998, 999, 1001, 1003, 1004, 1006, 1011, 1017, 1022, 1027, 1033, 1035, 1036, 1037, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1050], "condition": [51, 64, 211, 405, 409, 758, 995], "condition2": 154, "conduct": [185, 269, 417, 1024, 1046], "conf": [46, 64, 379, 405, 411, 839, 1003, 1046], "confer": [263, 269, 370, 407, 412, 418, 438, 443, 449, 511, 535, 563, 696, 708, 726, 756, 860, 861, 862, 1001, 1007, 1013, 1017], "confid": [52, 61, 62, 63, 64, 149, 175, 177, 255, 269, 272, 331, 390, 405, 417, 636, 658, 659, 666, 668, 671, 674, 675, 676, 698, 702, 707, 720, 726, 727, 739, 740, 756, 789, 832, 871, 904, 906, 909, 997, 1000, 1001, 1002, 1007, 1014, 1015, 1016, 1025, 1042], "config": [52, 363, 373, 375, 376, 383, 626, 1040], "config_context": [2, 252, 362, 363, 403, 626, 902, 1039, 1045, 1048], "configur": [2, 3, 46, 49, 64, 103, 104, 187, 245, 250, 252, 283, 316, 350, 361, 373, 375, 377, 381, 383, 387, 389, 393, 398, 403, 408, 415, 416, 431, 441, 442, 444, 446, 448, 451, 461, 463, 467, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 626, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 694, 695, 788, 800, 814, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 966, 967, 998, 1001, 1011, 1016, 1020, 1027, 1036, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049], "confirm": [43, 52, 116, 137, 143, 146, 149, 188, 211, 213, 263, 272, 275, 278, 314, 352, 379, 990, 1011, 1040], "conflict": [373, 375, 379, 383, 393, 1039, 1040], "conform": [52, 375, 581, 628, 832, 833, 1001, 1020, 1021, 1039, 1045], "confound": [185, 186], "confus": [2, 68, 183, 239, 261, 263, 278, 328, 329, 350, 389, 467, 504, 631, 652, 697, 713, 715, 718, 729, 730, 738, 754, 784, 787, 830, 902, 909, 1022, 1032, 1033, 1037, 1041, 1042, 1044, 1045, 1046, 1047], "confusingli": 373, "confusion_matrix": [2, 68, 239, 262, 263, 326, 328, 329, 697, 713, 754, 799, 827, 1001, 1033, 1038, 1039, 1042, 1043, 1045, 1049], "confusion_matrix_scor": 1001, "confusionmatrixdisplai": [2, 45, 68, 262, 321, 326, 328, 350, 631, 718, 1001, 1042, 1043, 1045, 1046, 1047], "congruenc": [654, 655, 656, 682, 683], "conjug": [269, 451, 461, 672, 674, 687, 695, 997], "conjunct": [398, 407, 594, 806, 822, 823, 825, 826, 827, 828, 831, 967, 991, 997, 1047], "connect": [2, 51, 74, 79, 81, 84, 87, 95, 99, 100, 373, 375, 384, 389, 409, 440, 444, 451, 461, 462, 585, 586, 695, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 999, 1004, 1006, 1014, 1024, 1036, 1045, 1049], "connected_compon": 1039, "connectionist": [861, 862], "conner": 1045, "connor": [1040, 1045, 1049, 1050], "connossor": [1040, 1041], "conocophillip": 51, "conort": 1025, "conquer": 948, "conrad": [1032, 1033, 1047, 1050], "conroi": 1047, "consecut": [134, 144, 212, 387, 405, 411, 415, 442, 446, 448, 449, 451, 455, 458, 461, 537, 538, 539, 546, 602, 645, 666, 667, 668, 676, 677, 678, 797, 798, 805, 839, 840, 841, 842, 843, 861, 862, 990, 1011, 1040], "consensu": [2, 58, 59, 72, 374, 375, 390, 404, 407, 649, 671, 678, 679, 719, 1001], "consensus_scor": [2, 58, 59, 404, 1034], "consequ": [90, 127, 229, 269, 270, 309, 336, 358, 405, 406, 412, 414, 561, 562, 566, 655, 656, 991, 997, 1001, 1009, 1017, 1041, 1043, 1048, 1050], "conserv": [50, 389, 582, 589, 896, 897, 1000, 1013], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 88, 99, 103, 112, 120, 124, 126, 143, 146, 163, 167, 168, 182, 187, 204, 211, 213, 245, 263, 269, 272, 276, 280, 283, 289, 292, 295, 296, 309, 320, 326, 336, 343, 344, 346, 350, 358, 362, 363, 364, 367, 374, 375, 377, 381, 383, 387, 389, 390, 398, 401, 403, 406, 407, 412, 413, 414, 415, 416, 417, 418, 419, 437, 443, 445, 449, 456, 473, 508, 509, 521, 533, 541, 549, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 585, 586, 588, 589, 591, 593, 607, 608, 620, 631, 632, 633, 646, 652, 658, 659, 660, 662, 671, 679, 688, 689, 690, 692, 693, 694, 696, 700, 702, 705, 707, 709, 715, 726, 730, 734, 756, 786, 788, 794, 846, 847, 848, 850, 852, 854, 855, 856, 859, 861, 862, 867, 877, 878, 885, 899, 900, 909, 910, 912, 913, 914, 915, 925, 984, 990, 996, 997, 998, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1021, 1035, 1036, 1040, 1044, 1045, 1047, 1048, 1049], "consider": [148, 149, 171, 174, 248, 264, 270, 276, 370, 375, 406, 417, 619, 800, 814, 822, 990, 997, 1003, 1007, 1015, 1025, 1049], "consist": [2, 43, 46, 63, 68, 72, 89, 90, 102, 111, 118, 120, 140, 143, 149, 150, 157, 168, 173, 175, 178, 182, 189, 204, 211, 229, 244, 248, 275, 278, 306, 314, 318, 321, 346, 351, 358, 362, 368, 370, 372, 375, 381, 382, 383, 384, 388, 389, 390, 405, 407, 409, 413, 414, 415, 425, 426, 429, 430, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 489, 497, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 591, 611, 627, 628, 629, 630, 635, 638, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 677, 678, 679, 687, 688, 689, 690, 691, 700, 735, 797, 798, 807, 832, 833, 834, 836, 837, 838, 839, 847, 848, 850, 852, 855, 856, 862, 867, 868, 869, 871, 875, 876, 879, 880, 882, 883, 885, 896, 897, 900, 904, 905, 907, 908, 910, 913, 915, 921, 930, 932, 955, 971, 974, 989, 990, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1011, 1014, 1016, 1017, 1019, 1021, 1025, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "consol": [142, 373], "consolid": [0, 389, 390, 1032], "consolidate_scor": 52, "consortium": [0, 1025], "constant": [2, 43, 129, 137, 149, 173, 176, 177, 182, 186, 199, 212, 213, 215, 229, 240, 245, 250, 272, 301, 305, 307, 310, 312, 319, 346, 348, 358, 367, 377, 384, 389, 404, 414, 417, 430, 445, 464, 481, 482, 483, 511, 513, 534, 538, 540, 547, 549, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 590, 606, 609, 611, 613, 627, 630, 632, 633, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 687, 689, 693, 695, 721, 723, 724, 728, 732, 775, 777, 785, 799, 822, 837, 838, 847, 855, 861, 862, 869, 880, 883, 892, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 993, 995, 997, 998, 1001, 1003, 1004, 1011, 1015, 1017, 1027, 1035, 1040, 1042, 1044, 1045, 1046, 1048, 1050], "constant_": 552, "constant_valu": [417, 613, 617], "constant_value_bound": [417, 611, 613, 617], "constantini": 1048, "constantkernel": [2, 173, 179, 417, 611, 617, 621, 624], "constantli": [72, 211, 1025], "constitu": 372, "constitut": [83, 389, 411, 414, 449, 455, 588, 589, 591, 1005], "constrain": [25, 81, 120, 143, 149, 151, 187, 203, 282, 304, 319, 325, 337, 339, 368, 389, 407, 412, 414, 509, 561, 562, 635, 658, 659, 690, 694, 822, 829, 997, 1000, 1036], "constrained_layout": [120, 187, 231, 315, 316, 323], "constraint": [88, 90, 100, 120, 133, 183, 200, 207, 215, 248, 249, 264, 305, 306, 307, 319, 375, 387, 412, 415, 486, 508, 509, 557, 558, 559, 560, 561, 562, 564, 565, 632, 635, 818, 819, 912, 913, 914, 915, 969, 990, 992, 997, 998, 1015, 1022, 1036, 1039, 1040, 1043, 1045, 1047, 1049], "constru": 415, "construct": [2, 43, 50, 102, 104, 134, 136, 138, 154, 168, 229, 239, 245, 250, 252, 302, 310, 312, 319, 322, 369, 372, 377, 384, 389, 407, 408, 411, 412, 414, 415, 418, 432, 440, 441, 443, 444, 449, 451, 456, 462, 464, 466, 519, 535, 541, 544, 555, 556, 581, 587, 639, 688, 690, 691, 814, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 863, 864, 865, 866, 868, 909, 929, 931, 947, 948, 959, 963, 990, 991, 993, 997, 998, 1001, 1002, 1004, 1011, 1014, 1016, 1017, 1021, 1037, 1039, 1040, 1043, 1046], "construct_grid": [50, 302], "constructor": [30, 31, 104, 241, 363, 377, 389, 408, 415, 463, 466, 549, 550, 555, 567, 568, 569, 570, 581, 582, 588, 589, 597, 668, 676, 677, 799, 800, 814, 846, 847, 848, 850, 852, 854, 855, 856, 863, 864, 865, 866, 990, 1002, 1011, 1016, 1021, 1032, 1033, 1035, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "consult": 1001, "consum": [2, 120, 358, 369, 377, 389, 398, 407, 411, 414, 448, 803, 804, 864, 865, 956, 957, 966, 997, 1025, 1037, 1049], "consumpt": [47, 362, 389, 407, 534, 557, 558, 564, 565, 800, 814, 825, 826, 827, 912, 913, 914, 915, 966, 1032, 1034, 1038, 1040, 1041, 1046], "contact": [387, 1020], "contain": [2, 49, 57, 61, 64, 69, 75, 82, 89, 91, 102, 103, 126, 136, 138, 149, 150, 176, 186, 187, 189, 191, 203, 215, 229, 238, 245, 248, 249, 252, 259, 263, 267, 269, 275, 278, 279, 282, 288, 295, 296, 298, 309, 321, 329, 332, 350, 351, 368, 369, 370, 372, 375, 377, 379, 380, 381, 382, 383, 384, 387, 389, 401, 403, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 421, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 496, 500, 502, 503, 504, 508, 509, 510, 514, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 688, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 709, 712, 716, 735, 736, 737, 772, 779, 780, 788, 794, 797, 798, 799, 800, 803, 804, 806, 814, 818, 819, 822, 823, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 926, 929, 930, 931, 951, 952, 955, 956, 963, 966, 967, 969, 990, 991, 993, 999, 1002, 1005, 1007, 1009, 1011, 1012, 1014, 1017, 1020, 1024, 1032, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "container": 401, "container_fold": 503, "container_path": 503, "contamin": [48, 111, 112, 238, 248, 295, 296, 468, 563, 850, 1007, 1040, 1048, 1049], "content": [2, 7, 55, 314, 350, 352, 370, 375, 379, 381, 401, 415, 485, 503, 508, 509, 588, 589, 591, 671, 918, 1010, 1025, 1033, 1042], "context": [2, 91, 252, 263, 282, 289, 326, 362, 363, 369, 374, 376, 388, 389, 407, 408, 413, 414, 415, 417, 418, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 467, 471, 531, 535, 536, 537, 539, 542, 543, 544, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 626, 627, 630, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 991, 997, 1001, 1007, 1011, 1015, 1021, 1024, 1025, 1032, 1039, 1040, 1045, 1048], "contigu": [43, 59, 377, 387, 404, 411, 415, 442, 446, 448, 458, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 781, 819, 844, 845, 904, 906, 907, 908, 909, 910, 1016, 1035, 1042, 1046, 1050], "contin": [413, 714, 1011], "conting": [2, 714, 715, 731, 755, 1038], "contingency_matrix": [2, 407, 755, 1040], "continu": [0, 2, 52, 55, 57, 77, 118, 143, 170, 183, 187, 194, 212, 219, 229, 232, 235, 248, 249, 251, 255, 259, 260, 306, 308, 314, 315, 320, 321, 357, 363, 370, 373, 377, 378, 379, 380, 383, 387, 389, 390, 393, 407, 412, 414, 467, 492, 592, 595, 596, 599, 600, 607, 608, 609, 632, 646, 647, 652, 653, 657, 660, 661, 662, 663, 726, 756, 812, 814, 867, 869, 871, 873, 874, 883, 884, 885, 901, 902, 913, 963, 990, 997, 998, 1001, 1002, 1004, 1005, 1011, 1017, 1021, 1022, 1025, 1029, 1032, 1034, 1035, 1040, 1045, 1046, 1047, 1049], "continuous_featur": 380, "contour": [48, 50, 70, 80, 81, 111, 142, 161, 168, 173, 174, 176, 222, 223, 224, 225, 238, 243, 258, 295, 302, 337, 338, 340, 341, 343, 344, 372, 382, 631, 632, 1007, 1015], "contour_kw": 632, "contourf": [50, 142, 225, 243, 295, 302, 304, 311, 312, 333, 338, 344, 348, 631, 632], "contours_": [382, 632], "contract": [211, 229, 343, 363, 389, 1021], "contradict": [189, 1021], "contrari": [43, 53, 186, 232, 236, 248, 254, 272, 309, 350, 369, 407, 496, 544, 606, 802, 817, 885, 997, 1003, 1007], "contrast": [128, 187, 213, 244, 248, 269, 271, 298, 314, 351, 389, 405, 407, 410, 414, 417, 448, 451, 461, 619, 643, 814, 860, 991, 994, 996, 997, 1001, 1004, 1006, 1009, 1011, 1014, 1015, 1017, 1042], "contrib": [324, 375, 377, 383, 387, 389, 407, 445, 1020, 1021, 1048], "contribut": [0, 53, 58, 147, 175, 197, 215, 278, 314, 372, 373, 377, 378, 379, 383, 389, 390, 393, 412, 413, 414, 446, 448, 553, 554, 559, 560, 726, 729, 756, 995, 1001, 1004, 1009, 1016, 1020, 1021, 1024, 1025, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "contributor": [363, 378, 379, 380, 383, 387, 389, 1001, 1021, 1033, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "control": [37, 51, 70, 94, 124, 125, 140, 159, 175, 177, 197, 204, 208, 212, 215, 219, 241, 242, 270, 272, 286, 291, 307, 319, 321, 343, 354, 356, 362, 363, 368, 371, 375, 377, 380, 383, 387, 389, 393, 406, 407, 410, 411, 412, 413, 416, 417, 432, 439, 448, 453, 470, 471, 477, 531, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 593, 594, 596, 614, 619, 625, 627, 632, 634, 639, 641, 642, 646, 647, 649, 650, 651, 652, 654, 655, 656, 672, 674, 676, 677, 682, 683, 687, 692, 701, 709, 797, 798, 800, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 830, 831, 834, 835, 838, 861, 862, 883, 885, 896, 897, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 918, 966, 987, 990, 997, 998, 1000, 1001, 1002, 1004, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1020, 1021, 1023, 1027, 1032, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050], "convei": [67, 236, 311], "conveni": [52, 88, 215, 248, 367, 383, 387, 408, 411, 415, 417, 422, 442, 446, 448, 450, 452, 463, 488, 611, 676, 678, 699, 728, 785, 863, 864, 974, 991, 993, 997, 998, 1008, 1025, 1032], "convent": [2, 132, 149, 263, 269, 375, 377, 378, 379, 381, 389, 403, 425, 426, 429, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 468, 469, 470, 471, 472, 473, 474, 475, 508, 509, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 547, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 627, 628, 629, 630, 677, 688, 689, 690, 691, 718, 797, 798, 832, 833, 848, 850, 852, 856, 868, 876, 879, 880, 882, 885, 896, 897, 908, 942, 943, 1001, 1032, 1039, 1040, 1043, 1045, 1046, 1048, 1049], "convention": [337, 389, 900], "converg": [2, 55, 90, 94, 109, 110, 144, 146, 149, 170, 176, 205, 213, 219, 227, 255, 257, 305, 306, 309, 314, 329, 364, 384, 389, 404, 407, 412, 415, 417, 419, 439, 442, 445, 446, 447, 448, 451, 453, 458, 459, 460, 461, 470, 471, 477, 481, 482, 483, 533, 535, 536, 537, 538, 539, 546, 571, 610, 644, 645, 646, 647, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 678, 682, 683, 687, 688, 690, 691, 694, 695, 797, 798, 853, 861, 862, 899, 900, 906, 991, 996, 997, 998, 1000, 1005, 1015, 1032, 1035, 1036, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "converged_": [797, 798, 1050], "convergence_it": [439, 453], "convergencewarn": [2, 174, 176, 178, 219, 226, 255, 305, 306, 311, 384, 389, 797, 798, 1040, 1041, 1044], "convers": [2, 55, 146, 203, 350, 358, 364, 369, 375, 377, 383, 387, 389, 401, 415, 572, 859, 868, 876, 930, 931, 986, 998, 1021, 1025, 1040, 1041, 1042, 1045, 1048], "convert": [2, 55, 70, 80, 99, 103, 123, 175, 189, 211, 231, 248, 251, 255, 256, 259, 260, 283, 302, 326, 357, 362, 369, 370, 384, 387, 389, 401, 415, 439, 442, 443, 446, 448, 449, 450, 451, 458, 463, 464, 496, 534, 541, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 581, 582, 588, 589, 590, 591, 593, 594, 606, 627, 628, 629, 630, 646, 652, 658, 659, 660, 662, 666, 667, 668, 670, 674, 676, 677, 678, 692, 746, 778, 799, 822, 859, 868, 869, 871, 875, 877, 878, 879, 881, 904, 912, 913, 914, 915, 928, 930, 931, 955, 985, 986, 990, 997, 998, 999, 1001, 1011, 1012, 1016, 1017, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050], "convex": [129, 145, 146, 183, 192, 218, 231, 347, 351, 407, 409, 412, 420, 445, 451, 461, 472, 474, 475, 478, 479, 480, 658, 676, 692, 997, 998, 1004, 1005, 1015, 1022, 1045], "convinc": 186, "convolut": [45, 178], "convolv": 307, "coo": [389, 553, 554, 692, 871, 926, 930, 931, 1004, 1033, 1049], "coo_matrix": [53, 198, 451, 585, 586, 971, 974], "cook": [372, 494, 1032, 1038], "cookbook": [417, 622, 623], "cool": [415, 1032], "coolwarm": [264, 336], "cooman": 372, "coord": [585, 1002], "coordin": [2, 50, 51, 53, 87, 125, 153, 174, 200, 231, 270, 302, 362, 370, 412, 417, 442, 446, 447, 448, 460, 470, 471, 477, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 550, 585, 614, 646, 647, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 681, 682, 683, 684, 688, 689, 690, 693, 694, 706, 764, 769, 904, 997, 998, 1016, 1032, 1035, 1036, 1037, 1041, 1043, 1045, 1046, 1047], "cop": 51, "cope": [238, 364, 370, 997], "copeland": [1040, 1041], "copi": [44, 51, 55, 79, 95, 107, 123, 137, 149, 168, 181, 182, 186, 187, 188, 198, 205, 217, 227, 229, 232, 245, 289, 328, 329, 331, 333, 351, 355, 363, 372, 375, 377, 379, 380, 381, 387, 389, 432, 436, 439, 441, 442, 443, 445, 446, 448, 453, 458, 481, 482, 483, 484, 500, 502, 510, 532, 533, 534, 535, 541, 548, 553, 554, 559, 561, 562, 572, 590, 597, 607, 608, 610, 611, 628, 630, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 671, 672, 674, 679, 681, 684, 685, 686, 732, 769, 792, 800, 814, 844, 845, 859, 867, 870, 873, 874, 875, 876, 880, 881, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 899, 900, 904, 906, 907, 908, 909, 910, 919, 928, 930, 931, 959, 971, 973, 974, 1011, 1016, 1017, 1021, 1032, 1035, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "copy_": 1032, "copy_cov": 548, "copy_gram": [682, 683, 686], "copy_x": [442, 446, 458, 535, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 685, 1034, 1040, 1041], "copy_x_train": [610, 611], "copy_xi": 686, "copybutton": [375, 393, 400], "copyright": [0, 55], "corani": 269, "cordier": 1039, "core": [42, 49, 82, 88, 98, 103, 134, 140, 142, 183, 186, 187, 263, 323, 361, 363, 375, 378, 383, 389, 393, 401, 407, 412, 414, 415, 418, 443, 445, 448, 449, 454, 456, 496, 499, 538, 589, 594, 658, 659, 666, 668, 676, 839, 840, 841, 842, 843, 848, 856, 997, 1004, 1007, 1016, 1021, 1022, 1023, 1025, 1027, 1034, 1036, 1037, 1039, 1042, 1046, 1047, 1048], "core_dist": [98, 454, 455, 456], "core_distances_": [98, 449, 454, 456], "core_sampl": 418, "core_sample_indices_": [82, 443], "core_samples_mask": 82, "corei": [1033, 1040, 1041], "corentin": 1046, "cori": 1037, "corneil": 1045, "corner": [50, 53, 63, 86, 185, 266, 270, 278, 279, 302, 325, 370, 375, 498, 916, 918, 1001, 1046], "cornerston": 1025, "cornflowerblu": [153, 206, 214, 221, 255, 257, 260, 276, 278, 294, 300, 356], "corollari": 377, "corona": 1045, "corpora": 412, "corpu": [54, 351, 352, 370, 412, 588, 589, 590, 591, 1033], "corr": [115, 189, 269], "corrcoef": [115, 130], "correct": [2, 30, 52, 63, 64, 90, 112, 134, 144, 178, 186, 197, 201, 211, 229, 254, 262, 263, 269, 276, 278, 286, 288, 339, 341, 350, 358, 372, 375, 377, 379, 390, 403, 405, 407, 411, 412, 414, 415, 424, 430, 449, 455, 468, 473, 487, 501, 503, 635, 667, 676, 678, 703, 704, 708, 712, 713, 718, 721, 723, 724, 728, 729, 730, 734, 738, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 783, 784, 785, 787, 790, 791, 794, 796, 832, 833, 834, 841, 849, 875, 985, 997, 1001, 1002, 1016, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "correct_covari": [468, 473], "corrected_std": 269, "corrected_var": 269, "correctli": [2, 163, 167, 211, 229, 245, 276, 278, 284, 299, 316, 330, 339, 375, 384, 412, 414, 424, 436, 468, 493, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 658, 666, 668, 674, 675, 676, 703, 794, 796, 799, 822, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 884, 899, 900, 904, 906, 907, 908, 909, 910, 912, 914, 949, 998, 1001, 1004, 1005, 1011, 1016, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "correl": [2, 51, 64, 113, 115, 116, 130, 141, 147, 149, 151, 164, 167, 175, 183, 184, 185, 187, 188, 197, 201, 204, 207, 229, 269, 275, 288, 315, 319, 320, 331, 368, 371, 372, 380, 389, 392, 404, 409, 411, 416, 449, 456, 481, 482, 484, 493, 494, 500, 524, 564, 606, 609, 627, 634, 635, 636, 682, 683, 743, 757, 778, 779, 780, 830, 844, 845, 881, 882, 884, 893, 992, 997, 1002, 1008, 1011, 1015, 1017, 1021, 1022, 1023, 1027, 1032, 1033, 1034, 1045, 1046], "correlation_coeffici": 609, "correlation_model": 1039, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 86, 98, 109, 113, 122, 134, 137, 140, 141, 142, 150, 164, 167, 168, 171, 176, 179, 186, 201, 204, 208, 211, 212, 215, 220, 229, 239, 244, 245, 252, 259, 263, 268, 270, 272, 273, 278, 279, 283, 302, 314, 320, 321, 322, 351, 354, 355, 357, 358, 363, 369, 370, 371, 374, 375, 377, 379, 382, 383, 388, 389, 390, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 422, 428, 436, 438, 440, 444, 447, 450, 452, 458, 460, 462, 463, 466, 471, 481, 482, 483, 489, 490, 492, 493, 494, 495, 496, 534, 541, 544, 545, 546, 549, 550, 552, 555, 557, 559, 560, 561, 564, 582, 584, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 617, 628, 630, 632, 633, 635, 643, 646, 647, 648, 652, 658, 659, 660, 661, 662, 668, 669, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 687, 690, 691, 692, 694, 703, 710, 713, 724, 725, 734, 738, 742, 746, 752, 754, 774, 778, 782, 788, 789, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 833, 835, 836, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 853, 861, 862, 871, 874, 875, 877, 878, 881, 885, 893, 904, 905, 906, 909, 912, 913, 914, 915, 925, 935, 942, 957, 960, 975, 990, 991, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1016, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "correspondingli": 1049, "corri": 1043, "corrobor": 387, "corrupt": [44, 127, 197, 217, 228, 387, 860, 997, 1009], "cort": [1043, 1044, 1047, 1048], "cortex": 412, "cos_transform": 43, "cosin": [2, 43, 75, 284, 289, 294, 367, 370, 389, 407, 412, 413, 440, 444, 449, 456, 535, 590, 591, 620, 696, 760, 761, 762, 765, 770, 771, 774, 778, 779, 780, 844, 845, 849, 876, 1004, 1017, 1027, 1042], "cosine_dist": [2, 403, 696, 762, 1004, 1038], "cosine_similar": [2, 343, 403, 760, 765, 999, 1037], "cosinesimil": 289, "cosmo": 57, "cost": [0, 43, 74, 123, 140, 149, 170, 183, 191, 231, 239, 243, 261, 271, 273, 276, 278, 283, 318, 326, 339, 351, 352, 353, 357, 375, 381, 383, 387, 406, 407, 414, 477, 496, 500, 537, 538, 539, 546, 551, 557, 558, 559, 560, 561, 564, 565, 602, 610, 619, 627, 646, 647, 652, 653, 658, 660, 661, 662, 663, 668, 672, 674, 676, 678, 687, 688, 692, 700, 702, 718, 742, 784, 787, 799, 800, 822, 830, 865, 884, 902, 904, 905, 906, 909, 912, 913, 914, 915, 948, 993, 997, 998, 1001, 1004, 1014, 1015, 1016, 1022, 1023, 1027, 1038, 1041, 1042], "cost_complexity_pruning_path": [354, 912, 913, 914, 915], "costa": [1040, 1045], "costin": 1032, "costli": [104, 109, 141, 181, 263, 270, 347, 363, 376, 381, 407, 442, 627, 808, 810, 896, 897, 948, 1001, 1004, 1013, 1021], "costlier": 671, "costs_": [470, 471, 1048], "could": [43, 48, 52, 53, 64, 72, 77, 86, 103, 104, 120, 123, 135, 136, 143, 146, 149, 165, 170, 175, 182, 185, 186, 187, 211, 212, 215, 220, 229, 235, 243, 244, 245, 262, 263, 269, 282, 288, 297, 300, 321, 335, 336, 350, 354, 357, 364, 375, 381, 383, 389, 393, 401, 405, 411, 414, 415, 419, 473, 533, 538, 607, 608, 629, 671, 802, 807, 809, 991, 997, 998, 1008, 1009, 1011, 1016, 1021, 1029, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "couldn": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "count": [2, 23, 43, 52, 54, 62, 64, 76, 82, 86, 102, 103, 118, 155, 156, 186, 187, 211, 213, 229, 242, 252, 263, 278, 283, 286, 289, 319, 320, 351, 352, 370, 372, 379, 384, 389, 390, 405, 407, 412, 414, 415, 445, 448, 488, 496, 536, 544, 581, 588, 589, 590, 591, 594, 604, 617, 640, 697, 705, 715, 718, 729, 730, 738, 754, 783, 784, 786, 787, 839, 843, 844, 845, 853, 856, 867, 916, 918, 950, 965, 989, 990, 993, 997, 1001, 1003, 1004, 1011, 1017, 1025, 1032, 1035, 1037, 1040, 1041, 1043, 1044, 1049], "count_nonzero": [46, 49, 362], "count_onli": [844, 845], "counter": [57, 134, 276, 407, 676, 677, 678, 1045], "counterpart": [990, 998, 1016], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [315, 325, 496, 998], "counts_": 1044, "countvector": [2, 54, 332, 352, 370, 380, 408, 412, 415, 463, 488, 536, 582, 589, 590, 591, 1032, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1050], "coupl": [54, 85, 86, 88, 232, 369, 370, 404, 405, 407, 416, 589, 910, 990, 1016], "cournapeau": [0, 397, 1032, 1035], "cours": [47, 48, 191, 283, 362, 375, 377, 406, 412, 415, 416, 991, 996, 997, 1025], "coursecentr": [407, 441], "courtesi": 375, "couvreur": [1041, 1042], "cov": [70, 113, 116, 136, 259, 375, 389, 393, 400, 410, 420, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 519, 532, 534, 541, 548], "cov_": [50, 113], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1048, "cov_test": 50, "cov_train": 50, "cov_typ": [256, 490], "covar": [254, 255, 260], "covari": [2, 48, 51, 65, 69, 110, 115, 127, 130, 148, 150, 170, 177, 179, 214, 238, 253, 255, 257, 258, 259, 260, 276, 300, 325, 384, 389, 398, 407, 410, 412, 417, 420, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 504, 515, 519, 527, 532, 534, 541, 548, 549, 550, 563, 610, 611, 613, 622, 623, 631, 644, 645, 650, 654, 656, 682, 683, 686, 689, 693, 797, 798, 800, 819, 1000, 1007, 1011, 1022, 1023, 1026, 1027, 1032, 1034, 1035, 1036, 1037, 1039, 1041], "covariance_": [51, 70, 111, 113, 468, 469, 470, 471, 472, 473, 474, 475, 549, 550, 995, 1039], "covariance_correct": [468, 473], "covariance_eigh": [326, 541, 1050], "covariance_estim": [69, 549, 995, 1044], "covariance_prior": [260, 797], "covariance_prior_": 797, "covariance_reweight": [468, 473], "covariance_typ": [79, 255, 256, 258, 259, 260, 797, 798, 1048], "covariances_": [254, 255, 256, 259, 260, 797, 798, 1039], "cover": [0, 85, 191, 211, 229, 358, 367, 370, 375, 388, 635, 720, 794, 1001, 1002, 1019], "coverag": [2, 50, 52, 146, 149, 211, 229, 302, 370, 378, 403, 498, 627, 720], "coverage_error": [2, 1001, 1036, 1046], "coverage_fract": 146, "coverages_land": 50, "covertyp": [2, 368, 490, 1027], "covtyp": 191, "cow": 1033, "cowlei": 1042, "cowton": 1046, "cox": [309, 313, 880, 892, 1011, 1040, 1048], "cpo": [168, 372], "cppflag": 373, "cpu": [0, 94, 270, 289, 323, 362, 363, 381, 383, 389, 393, 403, 415, 496, 563, 632, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 679, 800, 814, 825, 826, 827, 848, 856, 897, 1001, 1037, 1046, 1047, 1049, 1050], "cpu_count": [77, 140, 289], "cpuexecutionprovid": 401, "cpython": [375, 376, 381, 1047], "craeton": 1050, "craft": 378, "craig": [1013, 1035, 1040], "crall": [1039, 1045], "crammer": [666, 667, 735, 997, 1001, 1016], "crammer06a": [666, 667], "crammer_sing": [904, 1002, 1016, 1032], "cranenburgh": 1036, "crash": [51, 375, 401, 467, 894, 895, 902, 1011, 1036, 1040, 1048, 1049], "crawl": [521, 940], "craze": 1039, "crc": 997, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 80, 82, 85, 91, 93, 95, 103, 104, 111, 116, 122, 125, 126, 136, 139, 142, 143, 144, 146, 150, 153, 167, 170, 172, 175, 176, 177, 179, 182, 185, 187, 193, 195, 198, 208, 212, 213, 223, 224, 233, 243, 245, 248, 249, 251, 259, 263, 264, 265, 267, 269, 279, 283, 297, 299, 300, 311, 313, 314, 318, 321, 322, 333, 335, 336, 340, 341, 344, 346, 347, 348, 352, 354, 358, 363, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 388, 389, 393, 394, 401, 405, 407, 408, 411, 413, 414, 415, 417, 437, 450, 452, 464, 465, 499, 515, 516, 517, 518, 546, 553, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 588, 589, 591, 597, 628, 630, 631, 632, 633, 697, 698, 700, 701, 702, 782, 789, 800, 802, 806, 810, 814, 818, 822, 823, 825, 826, 834, 865, 877, 906, 909, 912, 913, 914, 915, 919, 928, 951, 952, 959, 973, 985, 991, 997, 1000, 1001, 1002, 1004, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1021, 1025, 1029, 1032, 1033, 1035, 1038, 1042, 1045, 1046, 1047, 1048, 1049, 1050], "create_ax": 309, "create_species_bunch": 50, "createindex": 289, "creation": [377, 511, 512, 513, 515, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 656, 844, 845, 1025, 1039, 1040, 1041, 1045], "creativ": 369, "creator": [168, 369, 372], "cred_int_df": 269, "cred_interv": 269, "credibl": 269, "credit": [370, 383, 414, 997, 1025], "credit_amount": 263, "credit_card": 263, "credit_gain": 263, "credit_gain_scor": 263, "credit_histori": 263, "creighton": 323, "crispinlogan": [1044, 1047, 1048, 1050], "cristian": 642, "cristina": 1044, "criteria": [90, 140, 183, 192, 201, 219, 259, 269, 383, 407, 416, 440, 465, 481, 482, 483, 501, 557, 558, 559, 560, 564, 565, 646, 652, 656, 658, 659, 671, 692, 865, 884, 904, 905, 912, 913, 914, 915, 991, 1000, 1005, 1015, 1022, 1035, 1040, 1043], "criterion": [64, 109, 110, 189, 199, 219, 259, 281, 319, 377, 384, 389, 407, 412, 440, 444, 448, 451, 458, 461, 532, 537, 539, 546, 553, 554, 557, 558, 559, 560, 564, 565, 566, 606, 627, 644, 645, 648, 656, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 680, 691, 695, 710, 798, 901, 906, 907, 908, 909, 910, 912, 913, 914, 915, 997, 1000, 1001, 1009, 1014, 1017, 1023, 1027, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049], "criterion_": [199, 201, 656], "critic": [369, 375, 388, 414, 692, 998, 1001, 1009, 1016, 1025, 1043], "crockett": 1047, "crombach": 1034, "crop": [383, 1047], "cross": [2, 9, 29, 52, 53, 64, 70, 87, 90, 91, 103, 104, 106, 107, 109, 113, 116, 127, 140, 142, 143, 145, 146, 149, 158, 162, 165, 166, 168, 186, 187, 192, 197, 198, 199, 200, 206, 208, 211, 213, 219, 229, 246, 251, 256, 257, 259, 261, 266, 269, 270, 271, 273, 275, 276, 277, 278, 281, 283, 284, 286, 293, 307, 308, 310, 315, 318, 320, 325, 331, 339, 346, 356, 370, 375, 377, 384, 387, 388, 389, 401, 402, 405, 408, 409, 412, 414, 415, 416, 417, 436, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 493, 501, 502, 504, 515, 541, 567, 568, 575, 593, 594, 597, 602, 606, 609, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 701, 702, 706, 713, 728, 741, 785, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 846, 854, 864, 865, 869, 884, 885, 902, 904, 906, 909, 921, 955, 1000, 1001, 1004, 1005, 1009, 1011, 1016, 1017, 1021, 1022, 1023, 1025, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "cross_decomposit": [2, 114, 115, 116, 183, 246, 481, 482, 483, 484, 1002, 1022, 1036, 1037, 1039, 1040, 1041], "cross_val": 1032, "cross_val_predict": [2, 154, 265, 318, 398, 405, 411, 414, 436, 567, 568, 826, 827, 1036, 1037, 1038, 1039, 1041, 1043, 1045, 1049], "cross_val_scor": [2, 52, 127, 181, 182, 183, 261, 265, 274, 284, 324, 342, 358, 375, 377, 387, 398, 411, 414, 471, 520, 575, 703, 742, 800, 825, 827, 846, 854, 912, 913, 990, 1001, 1022, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1044, 1045, 1048, 1049], "cross_valid": [2, 43, 52, 143, 149, 154, 186, 213, 245, 265, 272, 283, 286, 315, 325, 375, 388, 398, 575, 825, 826, 1001, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049], "crossentropi": 561, "crossvalid": [269, 284], "crowd": [383, 390, 998, 1021], "crucial": [51, 149, 185, 215, 264, 362, 374, 375, 389, 390, 407, 417, 1016], "crude": 1043, "crunch": 381, "cruz": 178, "crypt": [57, 370], "cryptograph": 384, "cs_": 659, "cs_note": 416, "cs_point": 142, "csail": [407, 666, 667, 676, 841], "csc": [2, 362, 387, 389, 415, 527, 551, 553, 554, 670, 692, 871, 873, 879, 884, 887, 889, 895, 926, 930, 931, 963, 975, 976, 978, 979, 980, 981, 1004, 1011, 1040, 1041, 1043, 1046], "csc_matrix": [451, 557, 558, 563, 564, 565, 566, 881, 912, 913, 914, 915, 991, 1011, 1017, 1037], "csco": 51, "csgraph": [389, 1045], "csie": [191, 369, 486, 508, 509, 658], "csizsek": 1039, "csr": [2, 55, 326, 352, 362, 369, 370, 384, 387, 389, 415, 418, 442, 445, 446, 448, 449, 458, 497, 508, 523, 527, 553, 554, 557, 558, 564, 565, 566, 590, 630, 658, 692, 714, 768, 792, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 867, 871, 873, 875, 876, 877, 879, 882, 883, 884, 887, 888, 889, 891, 894, 897, 912, 913, 914, 915, 926, 930, 931, 955, 963, 975, 976, 977, 978, 979, 980, 981, 982, 983, 1004, 1011, 1015, 1032, 1033, 1038, 1040, 1041, 1047, 1048, 1049], "csr_arrai": 982, "csr_matrix": [289, 319, 439, 443, 451, 496, 534, 544, 557, 558, 559, 560, 563, 564, 565, 566, 588, 593, 594, 714, 830, 859, 877, 879, 906, 907, 909, 910, 912, 913, 914, 915, 949, 955, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 1002, 1011, 1015, 1016, 1017, 1047], "css": 1044, "cst": 995, "cstride": 187, "csv": [51, 369, 372, 380, 1040, 1045], "csytraci": 1035, "ct": [53, 178, 252, 408, 463, 465, 466], "ctc": 178, "cttt": 178, "cube": [419, 533], "cubic": [111, 417], "cuda": [387, 403], "cue": 1000, "culprit": 387, "cultiv": 372, "cultur": 370, "cum_claim": [211, 229], "cum_exposur": 211, "cumsum": [145, 211, 229, 1039], "cumtim": 381, "cumul": [2, 145, 211, 229, 407, 726, 735, 756, 881, 893, 1011, 1015, 1039, 1041, 1042], "cumulated_claim": 211, "cumulated_claim_amount": 229, "cumulated_exposur": 211, "cumulated_sampl": 229, "cunha": [1033, 1034], "cup": [370, 1001], "cupi": [323, 326, 387, 403, 1049, 1050], "cupy_to_ndarrai": 403, "curat": [375, 378, 379], "cure": 997, "curic": [1040, 1041], "current": [0, 2, 7, 47, 80, 134, 175, 186, 229, 309, 318, 363, 364, 370, 373, 375, 376, 380, 384, 387, 389, 390, 403, 404, 407, 411, 414, 415, 416, 417, 439, 445, 449, 467, 468, 469, 470, 471, 472, 473, 474, 475, 532, 535, 541, 553, 554, 557, 558, 559, 560, 562, 564, 565, 566, 576, 591, 593, 610, 617, 626, 627, 646, 667, 671, 675, 676, 677, 678, 788, 797, 798, 849, 853, 861, 862, 880, 892, 902, 912, 913, 914, 915, 918, 920, 921, 922, 967, 975, 990, 995, 997, 1001, 1004, 1005, 1011, 1021, 1024, 1040, 1044, 1046, 1047, 1048], "current_count": 76, "current_month": 175, "current_sklearn_vers": 576, "current_sz_mb": 47, "currentcontrolset": 393, "currentmodul": 375, "curs": [350, 351, 407, 413, 1003, 1004], "cursor": [140, 270], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 107, 109, 137, 139, 140, 145, 183, 192, 193, 202, 211, 229, 231, 233, 236, 237, 239, 241, 248, 249, 253, 254, 255, 256, 258, 259, 261, 263, 269, 279, 282, 305, 310, 318, 326, 343, 356, 382, 402, 406, 411, 413, 436, 437, 438, 502, 510, 515, 521, 525, 564, 632, 645, 658, 698, 700, 702, 706, 707, 708, 709, 727, 729, 741, 782, 784, 787, 788, 789, 797, 798, 806, 817, 823, 828, 830, 831, 842, 865, 884, 904, 909, 997, 998, 1000, 1001, 1007, 1017, 1022, 1023, 1025, 1027, 1029, 1034, 1035, 1038, 1042, 1044, 1045, 1046, 1047, 1048], "curvatur": 304, "cusick": 1042, "custom": [2, 15, 30, 41, 131, 165, 167, 183, 220, 249, 261, 263, 268, 270, 273, 276, 277, 281, 291, 296, 300, 318, 334, 336, 337, 339, 340, 342, 350, 352, 367, 370, 373, 377, 382, 383, 384, 387, 388, 389, 398, 401, 407, 408, 411, 417, 467, 488, 493, 494, 502, 504, 538, 540, 547, 549, 557, 558, 564, 565, 571, 573, 602, 630, 631, 690, 699, 713, 778, 800, 830, 868, 902, 909, 984, 995, 1001, 1004, 1020, 1021, 1022, 1025, 1027, 1032, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050], "custom_combin": 877, "custom_cv": 411, "custom_cv_2fold": 411, "custom_fnames_enc": 877, "custom_nam": 350, "custom_scor": 326, "custom_scorer_modul": 1001, "custom_scoring_funct": 1001, "customestim": 132, "customkernel": 618, "customvector": 415, "cut": [57, 78, 80, 98, 99, 167, 168, 183, 233, 261, 272, 286, 326, 331, 379, 387, 404, 406, 407, 445, 451, 452, 461, 496, 588, 591, 658, 691, 695, 816, 822, 827, 865, 884, 1011, 1022], "cut_dist": [88, 445], "cutler": [912, 913], "cutoff": [193, 954, 1011, 1041], "cutoffs_x0": 309, "cutoffs_x1": 309, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 87, 103, 104, 105, 106, 109, 127, 140, 143, 145, 149, 159, 167, 181, 182, 186, 201, 210, 213, 245, 263, 265, 267, 268, 269, 270, 271, 272, 274, 275, 279, 283, 284, 286, 315, 323, 325, 326, 339, 346, 388, 389, 398, 405, 406, 411, 414, 416, 436, 471, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 800, 802, 803, 804, 805, 806, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 846, 854, 885, 912, 913, 990, 993, 996, 997, 1001, 1011, 1021, 1034, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1050], "cv_alpha": [651, 655], "cv_alphas_": [201, 651, 655, 1044], "cv_best_it": 145, "cv_clf": 145, "cv_color": 145, "cv_estim": 145, "cv_estimators_tut": 159, "cv_line": 145, "cv_mape_scor": 52, "cv_model": 186, "cv_result": [43, 52, 103, 140, 149, 167, 267, 268, 270, 272, 398, 814, 827, 1001], "cv_results_": [103, 104, 105, 113, 140, 159, 167, 259, 263, 267, 268, 269, 270, 273, 277, 280, 281, 291, 339, 471, 594, 673, 675, 800, 803, 804, 814, 822, 1038, 1042, 1044, 1045, 1050], "cv_results_ecoc": 286, "cv_results_lr": 213, "cv_results_ovo": 286, "cv_results_ovr": 286, "cv_results_qr": 213, "cv_results_tre": 286, "cv_results_tuned_model": 283, "cv_results_vanilla_model": 283, "cv_score": [145, 283], "cv_test_scor": 828, "cv_train_scor": 828, "cv_valu": 1040, "cv_values_": [673, 675, 1050], "cvc": 51, "cve": 1045, "cvx": 51, "cwitt": 1040, "cxx": 373, "cxxflag": 373, "cyan": [109, 137, 186, 300], "cybernet": 769, "cycl": [0, 16, 43, 77, 79, 83, 95, 120, 200, 255, 260, 276, 278, 321, 322, 375, 379, 398, 412, 579, 580, 627, 803, 804, 926, 990, 991, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "cycler": 73, "cyclic": [43, 646, 647, 652, 653, 660, 661, 662, 663, 1044], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 302], "cynthias13w": 1049, "cyt": 286, "cython": [41, 322, 362, 363, 373, 375, 378, 384, 387, 393, 400, 403, 407, 414, 508, 1011, 1012, 1015, 1016, 1020, 1021, 1032, 1035, 1036, 1038, 1044, 1047, 1048, 1049, 1050], "cython3": 373, "cythonx": 376, "c\u00e8sar": 1001, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 82, 83, 93, 94, 96, 102, 103, 113, 118, 120, 123, 127, 129, 170, 178, 186, 211, 219, 227, 229, 236, 241, 242, 243, 244, 257, 268, 269, 277, 283, 288, 295, 296, 302, 306, 328, 329, 332, 339, 343, 344, 352, 369, 370, 372, 375, 377, 381, 387, 405, 407, 409, 410, 412, 414, 415, 417, 418, 443, 445, 446, 451, 459, 462, 487, 493, 503, 526, 534, 536, 557, 558, 565, 566, 581, 582, 590, 614, 615, 619, 622, 623, 628, 644, 645, 648, 669, 670, 671, 680, 688, 689, 692, 693, 697, 699, 705, 708, 721, 722, 723, 724, 726, 756, 764, 778, 781, 788, 812, 839, 841, 843, 844, 845, 860, 871, 875, 877, 878, 880, 892, 897, 914, 915, 919, 993, 995, 997, 998, 999, 1000, 1001, 1003, 1009, 1011, 1013, 1016, 1017, 1035, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 414, "d2": [722, 723, 1001], "d2_absolute_error_scor": [2, 723, 1001, 1046], "d2_log_loss_scor": [2, 1001, 1050], "d2_pinball_scor": [2, 1001, 1046], "d2_pinball_score_08": 1001, "d2_tweedie_scor": [2, 403, 1001, 1045], "d2_tweedie_score_15": 1001, "d55e00": 254, "d81b60": 313, "d83": 372, "d_": [111, 407, 412, 648, 669, 680, 778, 998, 1003], "d_c": 407, "d_chunk": 781, "d_fit": 688, "d_fix": 129, "d_m": 407, "d_multi": 129, "da": [370, 1047, 1048, 1050], "dae": 997, "dagm": 993, "dagstuhl": 1001, "dai": [0, 43, 51, 52, 149, 175, 187, 212, 372, 375, 883, 1025, 1038, 1039, 1046, 1047], "daiki": 1036, "daili": [51, 149, 1025], "dakota": 1042, "dale": 1045, "dalla": 1040, "dalmia": [1038, 1039, 1040], "damag": 415, "damicelli": 1047, "damink": 1049, "daml": [407, 451, 461], "damp": [79, 407, 439, 453], "dan": [55, 1032, 1036, 1037, 1038, 1040, 1041], "danfrankj": 1036, "dang": [679, 997, 1050], "danger": [212, 411], "dangi": 1049, "dangl": 55, "dangonite57": [1047, 1048], "daniel": [323, 362, 885, 1011, 1025, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1049], "daniela": [1046, 1047], "danielgaerb": 1047, "danielsen": 1039, "danielweitzenfeld": 1035, "daniil": 1039, "danil": 1040, "dani\u00ebl": 1043, "danna": 1042, "danni": [1035, 1036, 1037], "dantzig": 346, "danylo": 1041, "dao": 1040, "daphn": 1043, "dare": 1042, "darioka": [1044, 1046, 1047], "dariu": [1039, 1040], "dark": [137, 186, 339, 370, 1049], "dark2": [62, 64, 232], "darkblu": 300, "darkorang": [110, 124, 128, 129, 212, 222, 234, 255, 256, 257, 260, 276, 278, 294, 300, 301, 330, 356], "darkorchid": 221, "darkr": [225, 295, 338], "darpa": 370, "darren": [1046, 1047], "darshan": 1044, "dart": 1020, "dartmouth": 0, "dasarathi": 372, "dasgupta": [415, 445, 898, 1013], "dash": [69, 111, 134, 145, 156, 170, 173, 175, 186, 207, 212, 213, 220, 223, 224, 248, 263, 269, 279, 341, 1015], "dashdot": [145, 170, 173, 248], "dask": [1021, 1040], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 92, 93, 94, 95, 98, 101, 103, 104, 106, 110, 112, 118, 120, 123, 124, 126, 128, 130, 132, 134, 137, 139, 140, 142, 143, 145, 146, 151, 152, 153, 155, 157, 159, 161, 165, 169, 170, 171, 172, 174, 175, 177, 179, 181, 183, 186, 187, 192, 193, 196, 197, 200, 201, 202, 207, 209, 210, 211, 212, 213, 214, 217, 219, 220, 224, 225, 227, 228, 229, 231, 232, 233, 234, 235, 238, 241, 242, 243, 245, 247, 248, 249, 252, 254, 255, 256, 257, 258, 260, 262, 263, 267, 269, 271, 272, 273, 274, 277, 283, 284, 286, 288, 289, 293, 295, 297, 298, 299, 300, 302, 305, 306, 308, 310, 311, 312, 316, 318, 320, 322, 323, 324, 326, 329, 330, 332, 333, 335, 336, 338, 343, 344, 350, 355, 356, 357, 361, 363, 367, 368, 369, 370, 371, 372, 375, 377, 378, 381, 382, 383, 384, 388, 393, 395, 398, 401, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 617, 618, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 710, 711, 713, 717, 718, 720, 725, 727, 728, 729, 730, 731, 734, 736, 737, 738, 740, 741, 754, 755, 757, 761, 763, 764, 769, 778, 783, 784, 785, 787, 788, 789, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 921, 923, 924, 925, 926, 928, 929, 930, 931, 934, 935, 936, 945, 947, 948, 963, 966, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "data1010": 1037, "data_filenam": [501, 505], "data_hom": [485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 1039, 1048], "data_home_path": 499, "data_id": [44, 143, 175, 186, 211, 229, 239, 263, 283, 286, 315, 369, 496], "data_ind": 53, "data_max": 1037, "data_max_": [874, 1037], "data_min": 1037, "data_min_": [874, 1037], "data_modul": 126, "data_nam": 393, "data_path": 47, "data_rang": 1037, "data_range_": [874, 1037], "data_sampl": 54, "data_set": 305, "data_size_mb": 352, "data_stream": 47, "data_test": [243, 263, 270, 350, 509], "data_test_size_mb": 350, "data_train": [243, 263, 270, 350, 509], "data_train_size_mb": 350, "data_transform": 639, "data_transpos": [1046, 1048], "data_unravel_indic": 53, "data_vers": 393, "databas": [47, 168, 314, 362, 364, 370, 372, 407, 412, 414, 415, 418, 441, 443, 510, 555, 556, 897, 1013], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 102, 103, 104, 134, 140, 143, 146, 151, 167, 175, 181, 185, 186, 187, 188, 193, 197, 201, 215, 219, 229, 249, 252, 259, 263, 267, 269, 270, 272, 280, 281, 283, 286, 314, 315, 316, 321, 322, 323, 346, 350, 351, 369, 370, 375, 377, 380, 389, 408, 414, 431, 441, 442, 444, 446, 448, 463, 465, 466, 467, 481, 482, 483, 484, 488, 489, 490, 492, 496, 500, 501, 502, 504, 505, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 688, 689, 692, 800, 803, 804, 814, 830, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 926, 955, 971, 974, 989, 990, 991, 1021, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "datalim": 256, "datapoint": [43, 77, 85, 89, 174, 177, 243, 244, 248, 264, 269, 288, 417, 445, 502, 557, 558, 559, 560, 564, 565, 566, 611, 912, 913, 914, 915, 994], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 103, 104, 105, 106, 107, 111, 112, 113, 116, 119, 122, 123, 124, 125, 127, 129, 130, 133, 135, 136, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 165, 166, 167, 168, 169, 171, 173, 178, 181, 182, 188, 189, 191, 192, 195, 198, 199, 200, 202, 203, 205, 208, 209, 210, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 233, 235, 236, 237, 239, 242, 244, 246, 247, 251, 252, 254, 256, 257, 258, 260, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 337, 339, 340, 341, 342, 344, 346, 347, 348, 351, 352, 353, 354, 357, 358, 363, 364, 378, 379, 381, 388, 389, 392, 393, 401, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 419, 422, 427, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 468, 469, 472, 473, 474, 475, 477, 480, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 583, 584, 587, 588, 589, 590, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 631, 632, 633, 634, 635, 638, 639, 640, 643, 645, 646, 647, 649, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 708, 710, 711, 729, 755, 757, 787, 788, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 860, 861, 862, 864, 865, 868, 869, 877, 878, 882, 884, 886, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 930, 931, 935, 936, 990, 991, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1025, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "dataset_44063": 52, "dataset_nam": [248, 289], "datasets_0004_44063": 52, "datasets_nam": 248, "datastructur": [403, 1040, 1044], "datastuctur": 1049, "datatyp": [387, 463, 465, 1039, 1042], "date": [43, 102, 149, 168, 175, 187, 370, 372, 375, 379, 390, 408, 1021], "dateco2datef641958": 175, "daten": [449, 1040, 1041], "datenbergwerk": 1042, "datetim": [43, 55, 175, 187], "dauphin": 1034, "dave": [1032, 1039, 1040, 1046, 1048], "davi": [2, 473, 725, 1001, 1036], "david": [0, 112, 370, 397, 407, 414, 417, 461, 532, 536, 567, 568, 622, 623, 628, 725, 797, 901, 991, 997, 1005, 1014, 1025, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "davidblnc": [1047, 1048], "davidleon123": 1050, "davies_bouldin_scor": [2, 407, 1040], "davis2006": 1001, "daw": [0, 397, 1032, 1033, 1034, 1035, 1036], "dawson": [1036, 1050], "dayn": [1047, 1048], "db": [82, 88, 407], "dbauer9": 1043, "dberenbaum": 1048, "dbg": 381, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 88, 93, 96, 98, 183, 324, 330, 387, 389, 445, 449, 451, 454, 512, 704, 705, 717, 737, 793, 795, 856, 884, 1004, 1022, 1026, 1027, 1032, 1034, 1036, 1037, 1039, 1040, 1041, 1048, 1049], "dbscan_clust": 445, "dcc": 370, "dcg": [726, 756, 1001, 1039], "dcg_score": [2, 756, 1001, 1039, 1042], "dd": [50, 51, 152, 302, 498], "ddof": [269, 884, 895], "de": [51, 154, 315, 372, 635, 688, 764, 997, 998, 1021, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "dea": [1046, 1047, 1048], "deactiv": [250, 369, 376, 381, 393, 408, 803, 804, 1046], "dead": 1050, "deadlock": 390, "deal": [62, 90, 103, 149, 181, 186, 197, 235, 283, 286, 343, 352, 375, 380, 408, 415, 416, 417, 473, 496, 703, 708, 763, 787, 870, 948, 997, 1025, 1035, 1047, 1048], "dealloc": 1049, "dean": [154, 1040, 1046, 1048, 1050], "death": 370, "debian": [0, 362, 373, 381], "debias": 129, "deborah": [1038, 1039, 1049], "debug": [2, 358, 363, 376, 378, 381, 389, 392, 627, 903, 1040, 1044], "debugg": [378, 383], "dec": [212, 286, 677, 883, 908, 1016], "decad": [186, 1021], "decai": [175, 544, 861, 862, 948, 1001, 1015, 1036], "decal": 1044, "decemb": [112, 149, 175, 370, 664, 685, 686, 1032, 1040, 1042, 1044, 1045, 1047], "decent": [238, 268, 370, 1003], "deci": 278, "decid": [43, 50, 90, 93, 103, 144, 149, 260, 266, 269, 276, 370, 375, 390, 401, 406, 415, 417, 449, 456, 559, 560, 611, 635, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 671, 681, 684, 797, 846, 847, 848, 850, 852, 854, 855, 856, 867, 1000, 1007, 1025, 1045, 1048], "decil": [632, 1043], "deciles_hlines_": 632, "deciles_vlines_": 632, "decim": [62, 176, 470, 471, 917, 1039, 1040], "decis": [0, 2, 40, 43, 62, 64, 66, 67, 70, 76, 89, 91, 93, 124, 126, 128, 133, 136, 137, 138, 139, 144, 152, 153, 154, 156, 157, 161, 167, 168, 172, 174, 186, 192, 196, 202, 220, 221, 224, 226, 238, 239, 241, 246, 249, 261, 272, 273, 275, 276, 286, 297, 300, 304, 309, 310, 311, 314, 327, 331, 332, 335, 336, 337, 338, 339, 340, 341, 347, 348, 350, 362, 371, 372, 375, 389, 401, 402, 405, 407, 414, 436, 468, 496, 500, 504, 512, 519, 536, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 593, 594, 631, 632, 633, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 698, 700, 702, 703, 707, 718, 720, 726, 727, 735, 739, 740, 742, 756, 782, 784, 787, 788, 789, 794, 799, 800, 803, 804, 814, 816, 822, 827, 830, 832, 833, 835, 846, 865, 884, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 995, 997, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1014, 1015, 1016, 1020, 1021, 1022, 1023, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1050], "decision_funct": [48, 50, 62, 64, 89, 136, 150, 161, 223, 224, 225, 239, 248, 263, 276, 283, 295, 296, 304, 311, 325, 337, 338, 339, 343, 344, 348, 377, 389, 405, 406, 414, 436, 468, 549, 550, 553, 555, 559, 561, 563, 567, 593, 594, 631, 632, 633, 658, 659, 666, 668, 674, 675, 676, 677, 698, 700, 702, 707, 720, 726, 727, 735, 739, 740, 742, 756, 782, 788, 789, 794, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 850, 864, 871, 901, 904, 906, 908, 909, 923, 997, 1001, 1007, 1008, 1015, 1016, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1049], "decision_function_shap": [318, 347, 906, 909, 1016, 1037, 1038, 1041, 1042], "decision_path": [357, 557, 558, 564, 565, 566, 912, 913, 914, 915, 1038, 1043], "decision_threshold": [263, 283], "decision_tre": [916, 917, 918, 1017], "decision_tree_learn": [912, 913, 1017], "decisionboundarydisplai": [2, 48, 66, 67, 70, 89, 136, 150, 155, 204, 220, 225, 272, 292, 297, 300, 314, 335, 336, 337, 338, 340, 341, 343, 355, 1046, 1047, 1049, 1050], "decisiontre": [142, 553, 1037], "decisiontreeclassifi": [2, 67, 134, 136, 142, 155, 273, 286, 324, 354, 355, 357, 389, 406, 414, 553, 555, 557, 559, 561, 564, 631, 711, 806, 828, 913, 914, 916, 917, 918, 991, 1002, 1017, 1033, 1034, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "decisiontreeclassifierifitteddecisiontreeclassifi": 357, "decisiontreeregressor": [2, 135, 137, 249, 310, 318, 324, 356, 380, 554, 556, 558, 559, 560, 562, 565, 632, 633, 912, 915, 917, 943, 991, 1002, 1017, 1033, 1034, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "decisiontreeregressorifitteddecisiontreeregressor": [320, 356], "declan": 1044, "declar": [89, 232, 245, 358, 375, 376, 381, 389, 442, 445, 446, 458, 470, 471, 477, 690, 694, 1039, 1043], "decod": [47, 302, 370, 389, 503, 569, 588, 589, 591, 1032, 1033], "decode_error": [47, 415, 503, 588, 589, 591, 1034], "decompos": [11, 120, 124, 137, 311, 534, 538, 709, 825, 948, 996, 997, 1001, 1018, 1026, 1027], "decomposit": [2, 9, 44, 45, 54, 55, 83, 91, 102, 104, 105, 106, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 152, 191, 231, 232, 234, 242, 243, 246, 247, 250, 268, 293, 298, 314, 322, 325, 326, 351, 364, 368, 381, 384, 389, 403, 404, 405, 408, 414, 419, 448, 450, 451, 452, 461, 481, 482, 483, 495, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 556, 611, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 672, 673, 674, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 797, 798, 853, 860, 863, 866, 882, 913, 947, 948, 997, 998, 1001, 1018, 1020, 1022, 1023, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "decompress": [401, 1032], "decor": [2, 187, 318, 375, 376, 377, 384, 806, 823, 938, 942, 943, 961, 967, 1042, 1045, 1048, 1050], "decoupl": [414, 1003], "decreas": [63, 74, 80, 88, 91, 99, 107, 149, 151, 167, 168, 178, 186, 187, 189, 219, 241, 242, 271, 276, 304, 311, 314, 318, 354, 362, 364, 375, 405, 407, 414, 440, 444, 462, 521, 534, 535, 541, 557, 558, 559, 560, 561, 562, 564, 565, 566, 602, 635, 636, 637, 676, 677, 678, 706, 712, 727, 782, 789, 861, 862, 912, 913, 914, 915, 990, 992, 993, 997, 998, 1001, 1004, 1005, 1008, 1009, 1015, 1016, 1025, 1034, 1039, 1042, 1045], "dede00": [79, 95, 96], "dedic": [43, 267, 348, 373, 379, 381, 387, 390, 403, 407, 584, 672, 674, 687, 990, 997, 1020, 1040, 1049], "deduc": 46, "deduct": 1005, "dedupl": 1036, "deeksha": 1044, "deem": [277, 278, 534, 1009, 1045], "deep": [211, 377, 389, 401, 414, 421, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 769, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1005, 1006, 1020, 1021, 1025, 1037, 1043, 1044, 1046], "deepcopi": 377, "deeper": [350, 1017], "deepest": [561, 562, 1043], "deeplook": 1042, "deeppink": 278, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 85, 88, 89, 91, 94, 102, 107, 118, 120, 122, 123, 127, 129, 132, 134, 137, 139, 143, 145, 146, 149, 154, 173, 176, 178, 179, 182, 189, 194, 199, 201, 204, 211, 212, 219, 220, 221, 229, 231, 232, 245, 246, 248, 254, 255, 256, 257, 259, 260, 263, 264, 267, 268, 269, 270, 272, 277, 280, 284, 289, 294, 296, 299, 302, 305, 307, 309, 311, 314, 315, 318, 326, 332, 335, 339, 343, 348, 350, 351, 352, 362, 370, 375, 377, 381, 382, 387, 408, 411, 415, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 508, 509, 533, 597, 601, 610, 611, 618, 781, 877, 938, 943, 961, 1001, 1008, 1016], "default": [2, 43, 52, 54, 62, 66, 77, 80, 88, 92, 120, 126, 140, 164, 170, 181, 187, 193, 194, 201, 208, 211, 212, 229, 240, 242, 248, 250, 252, 257, 263, 264, 272, 278, 283, 288, 289, 309, 313, 316, 318, 319, 323, 325, 326, 343, 346, 347, 350, 351, 352, 354, 357, 358, 362, 363, 369, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 934, 936, 937, 938, 940, 942, 943, 947, 948, 949, 950, 951, 952, 953, 954, 963, 965, 966, 969, 970, 971, 973, 974, 975, 981, 984, 986, 987, 989, 990, 991, 993, 995, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "default_bas": [79, 95], "default_rng": 272, "default_scor": 380, "default_tag": 2, "default_target_attribut": 369, "default_tim": [226, 257], "defaultdict": [49, 52, 62, 189, 272, 351, 352], "defazio": [658, 997], "defens": 286, "defer": 375, "deffici": 1050, "defici": [550, 998, 1015], "defin": [8, 27, 46, 51, 64, 70, 86, 88, 90, 99, 102, 103, 105, 116, 120, 125, 132, 134, 135, 154, 168, 170, 177, 178, 179, 187, 188, 189, 193, 212, 219, 228, 229, 238, 242, 245, 249, 251, 254, 259, 263, 269, 270, 272, 276, 278, 279, 280, 281, 283, 286, 289, 307, 309, 319, 325, 326, 339, 343, 346, 350, 351, 362, 371, 374, 375, 376, 377, 381, 382, 384, 387, 388, 389, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 422, 423, 424, 426, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 488, 519, 520, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 627, 628, 629, 630, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 696, 697, 699, 708, 710, 711, 716, 721, 722, 723, 724, 725, 728, 731, 738, 741, 745, 746, 748, 750, 751, 753, 754, 757, 760, 766, 781, 785, 790, 791, 792, 793, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 891, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 934, 936, 940, 946, 958, 960, 984, 990, 991, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1021, 1027, 1029, 1034, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "definit": [2, 91, 112, 199, 211, 276, 289, 351, 375, 376, 377, 389, 392, 407, 409, 410, 412, 527, 529, 535, 611, 628, 692, 708, 718, 728, 746, 758, 797, 798, 990, 993, 995, 997, 999, 1001, 1004, 1015, 1019, 1027, 1036, 1040, 1047], "definitelyuncertain": 1038, "deflat": [186, 410, 419, 533], "defoi": 1045, "deform": [150, 259, 348], "degener": [118, 255, 419, 439, 453, 533, 720, 997, 1001, 1041, 1045, 1046], "degrad": [149, 187, 238, 309, 346, 351, 413, 778, 1009], "degre": [43, 70, 122, 136, 175, 181, 185, 186, 187, 191, 193, 197, 199, 201, 212, 215, 244, 250, 254, 255, 256, 259, 260, 269, 284, 307, 320, 321, 336, 343, 345, 412, 416, 445, 451, 498, 535, 541, 639, 640, 643, 656, 775, 797, 800, 850, 879, 883, 906, 907, 908, 909, 910, 993, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1007, 1008, 1011, 1014, 1016, 1035, 1041, 1045, 1046, 1049], "degrees_of_freedom_": 797, "degrees_of_freedom_prior": 797, "degrees_of_freedom_prior_": 797, "dei": 1044, "deil": [1033, 1043, 1044], "dein": 415, "dekel": [666, 667, 997], "del": [55, 381, 1044, 1045], "delai": [2, 375, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 800, 814, 825, 826, 1046, 1047, 1050], "delalleau": 1014, "delanou": 1043, "delattr": 1044, "delayed_funct": 966, "delbert": [73, 439, 453], "deleg": [89, 381, 431, 432, 917, 989, 1036, 1038, 1044], "delet": [2, 104, 329, 331, 379, 380, 468, 473, 485], "delete_index": 329, "delete_indic": 329, "deleteri": 1039, "deli": 401, "deliber": 997, "delimit": [375, 1007, 1047], "deliv": [362, 1025], "deliveri": 379, "dell": 51, "delong": [1044, 1045], "delta": [410, 451], "delta_": 998, "delta_k": 410, "delteil": 1036, "delv": [861, 862], "demand": [145, 149, 389, 415, 800, 814, 825, 826], "demarc": 93, "demiraj": [1047, 1048], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 150, 183, 189, 197, 217, 242, 257, 259, 270, 278, 314, 330, 350, 351, 377, 404, 407, 415, 418, 439, 440, 443, 445, 446, 447, 449, 450, 452, 453, 454, 457, 460, 502, 511, 512, 513, 541, 704, 705, 717, 719, 737, 793, 795, 865, 884, 885, 1022], "demo_param": 377, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 88, 94, 102, 104, 134, 138, 144, 147, 165, 166, 178, 179, 183, 189, 204, 212, 245, 251, 252, 256, 260, 261, 265, 272, 275, 278, 284, 291, 294, 301, 308, 310, 311, 313, 316, 320, 327, 329, 330, 333, 337, 343, 347, 350, 351, 352, 356, 358, 364, 370, 371, 375, 380, 387, 398, 403, 407, 411, 414, 446, 502, 512, 520, 697, 703, 713, 742, 798, 800, 847, 869, 900, 912, 990, 991, 995, 1001, 1002, 1003, 1004, 1011, 1014, 1017, 1019, 1022], "dem\u0161ar": 269, "den": [0, 396, 1033, 1034, 1039, 1040, 1041, 1044, 1045], "dendrit": [407, 710], "dendro": 189, "dendro_idx": 189, "dendrogram": [71, 100, 183, 189, 357, 407, 440, 444, 504, 1022, 1044], "denero": 735, "deng": [1036, 1037, 1038], "dengemann": 1033, "dengyong": 900, "deni": [1034, 1035, 1039, 1040, 1041, 1047, 1048], "denni": 1046, "denois": [42, 68, 83, 84, 86, 99, 119, 125, 183, 412, 496, 535, 537, 541, 584, 587, 830, 874, 1022], "denomin": [276, 414, 415, 420, 474, 590, 704, 757, 995], "denot": [166, 384, 389, 393, 405, 407, 411, 414, 588, 589, 591, 800, 806, 814, 823, 877, 878, 985, 990, 993, 997, 999, 1001, 1002, 1011, 1014, 1049], "dens": [51, 55, 88, 183, 192, 197, 200, 206, 322, 323, 332, 362, 384, 389, 407, 412, 414, 416, 442, 445, 446, 448, 463, 466, 496, 523, 524, 527, 534, 535, 544, 566, 607, 608, 629, 630, 652, 657, 658, 659, 666, 667, 668, 672, 673, 676, 677, 678, 687, 688, 689, 692, 693, 760, 761, 767, 779, 792, 861, 862, 869, 876, 877, 879, 881, 882, 883, 884, 893, 894, 895, 896, 897, 904, 905, 906, 907, 909, 910, 949, 971, 974, 991, 994, 997, 998, 1001, 1002, 1004, 1007, 1011, 1013, 1014, 1015, 1016, 1017, 1022, 1032, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "dense_lasso": 198, "dense_output": [761, 767, 897, 949, 1040], "denser": 443, "densif": 1041, "densifi": [389, 658, 659, 666, 667, 668, 676, 677, 678, 904, 991, 1034], "densiti": [2, 50, 82, 88, 93, 98, 107, 129, 166, 168, 173, 183, 198, 211, 226, 229, 235, 238, 242, 253, 254, 260, 269, 275, 286, 290, 295, 296, 309, 339, 350, 370, 372, 377, 384, 389, 407, 414, 418, 426, 443, 445, 447, 449, 451, 463, 466, 498, 502, 536, 541, 549, 550, 797, 798, 800, 844, 845, 849, 850, 897, 995, 997, 1000, 1004, 1006, 1007, 1013, 1020, 1022, 1023, 1026, 1027, 1034, 1036, 1040, 1041, 1047, 1048], "density_": 897, "densityestim": [377, 426], "densitymixin": [2, 377], "denton": 1034, "deodhar": 1044, "deoli": 1045, "depart": [178, 407], "depedend": 1049, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 86, 107, 124, 140, 143, 146, 147, 149, 151, 154, 163, 167, 176, 181, 183, 184, 186, 189, 191, 194, 197, 229, 232, 237, 238, 244, 248, 259, 263, 269, 270, 274, 275, 276, 283, 289, 305, 309, 314, 320, 323, 326, 336, 343, 346, 351, 352, 358, 362, 363, 364, 368, 375, 377, 378, 383, 384, 387, 388, 389, 390, 392, 393, 400, 401, 403, 407, 409, 411, 412, 414, 415, 416, 417, 418, 437, 438, 439, 443, 445, 446, 448, 449, 451, 453, 456, 458, 459, 461, 463, 468, 483, 488, 489, 490, 493, 496, 500, 501, 502, 504, 505, 510, 534, 535, 541, 544, 551, 559, 560, 562, 588, 589, 590, 591, 602, 604, 607, 608, 611, 627, 632, 633, 638, 640, 648, 658, 659, 669, 671, 673, 676, 677, 678, 680, 687, 690, 691, 694, 695, 711, 729, 730, 738, 778, 781, 783, 784, 787, 792, 793, 797, 798, 819, 829, 846, 847, 848, 850, 852, 853, 854, 855, 856, 862, 863, 865, 877, 878, 881, 884, 898, 905, 906, 909, 913, 928, 989, 990, 991, 993, 994, 995, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1009, 1013, 1015, 1016, 1017, 1022, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1047, 1048, 1049], "dependabot": 1050, "dependen": 346, "depict": [134, 271, 414, 1000], "deploi": [263, 326, 362, 392, 401, 406, 1021, 1025], "deploy": [383, 401, 1020, 1021, 1025], "depot": 51, "deprec": [2, 16, 147, 189, 318, 321, 363, 377, 378, 379, 384, 389, 398, 441, 444, 446, 449, 456, 458, 481, 482, 483, 484, 527, 536, 538, 540, 553, 569, 570, 579, 580, 582, 627, 658, 659, 673, 675, 679, 692, 709, 742, 778, 779, 780, 782, 800, 803, 804, 814, 828, 829, 831, 851, 863, 864, 869, 901, 906, 909, 926, 928, 930, 931, 942, 943, 990, 991, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "deprecated_api_refer": 375, "deprecationwarn": 1042, "dept": 372, "depth": [43, 139, 143, 147, 150, 155, 286, 354, 356, 357, 362, 373, 375, 379, 388, 414, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 844, 845, 849, 912, 913, 914, 915, 916, 918, 954, 1006, 1007, 1017, 1034, 1035, 1043], "der": [692, 696, 998, 1035, 1036, 1040], "derek": 1040, "deriv": [43, 57, 129, 130, 145, 175, 178, 188, 199, 201, 205, 212, 363, 370, 377, 409, 411, 413, 414, 415, 417, 419, 440, 444, 445, 464, 491, 533, 606, 617, 622, 648, 669, 676, 680, 861, 862, 877, 883, 904, 905, 995, 997, 998, 1001, 1005, 1007, 1016, 1032, 1033, 1034, 1039, 1040, 1041, 1047], "deros": 1043, "derouich": 1032, "derweh": 1050, "desai": [1039, 1041, 1044, 1045, 1047, 1048], "desalvo": 990, "descamp": 1040, "descend": [142, 627, 1042], "descent": [2, 46, 53, 144, 183, 192, 199, 200, 238, 243, 295, 321, 338, 412, 414, 470, 471, 477, 487, 496, 503, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 631, 639, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 668, 672, 674, 676, 677, 678, 681, 682, 683, 684, 687, 694, 830, 861, 862, 865, 904, 908, 974, 998, 1005, 1007, 1016, 1022, 1023, 1027, 1032, 1035, 1036, 1037, 1039, 1041, 1043, 1045, 1046, 1047], "descr": [126, 168, 368, 369, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 1040], "describ": [2, 43, 52, 89, 154, 168, 186, 229, 243, 269, 278, 358, 362, 363, 368, 370, 372, 374, 375, 377, 380, 383, 389, 390, 404, 407, 409, 410, 411, 412, 414, 415, 461, 468, 472, 473, 490, 493, 495, 496, 497, 500, 501, 502, 503, 504, 505, 510, 516, 517, 518, 528, 607, 608, 645, 659, 668, 714, 797, 798, 839, 841, 877, 879, 948, 990, 993, 996, 997, 1000, 1001, 1003, 1007, 1015, 1016, 1017, 1024, 1040, 1042], "descript": [2, 52, 168, 186, 315, 368, 369, 374, 375, 379, 380, 383, 389, 407, 415, 451, 461, 463, 466, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 544, 630, 676, 762, 765, 778, 1001, 1015, 1016, 1021, 1024, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "descriptor": [389, 508, 509], "deseri": 401, "deserv": [375, 381], "deshmukh": 1045, "deshpand": [1037, 1038], "design": [0, 2, 53, 58, 111, 134, 154, 173, 185, 186, 195, 245, 259, 263, 309, 315, 357, 364, 369, 375, 380, 387, 388, 389, 390, 392, 393, 395, 400, 401, 407, 414, 416, 515, 528, 632, 633, 648, 665, 669, 676, 680, 685, 800, 818, 819, 839, 841, 991, 997, 998, 1001, 1002, 1011, 1020, 1021, 1025, 1034, 1041, 1050], "desir": [50, 61, 136, 168, 182, 211, 213, 309, 313, 326, 368, 375, 383, 395, 401, 404, 407, 410, 411, 412, 416, 503, 538, 540, 544, 547, 567, 593, 602, 603, 664, 670, 685, 686, 699, 708, 736, 844, 845, 849, 864, 869, 871, 874, 875, 877, 878, 880, 881, 885, 888, 890, 892, 893, 934, 969, 993, 995, 998, 1004, 1011, 1015, 1016, 1017, 1032, 1040, 1041, 1042, 1045], "desislava": 1046, "desktop": 373, "despit": [64, 116, 176, 204, 209, 211, 229, 244, 298, 389, 398, 409, 627, 628, 630, 997, 1004, 1025, 1040, 1041], "dessyvv": 1046, "dest": 323, "destin": 1025, "destroi": [275, 415, 795, 873, 1011], "det": [2, 183, 251, 261, 278, 279, 375, 409, 515, 564, 698, 702, 727, 789, 830, 865, 884, 904, 946, 1022, 1044], "det_curv": [2, 266, 698, 782, 789, 1001, 1044, 1045, 1050], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 90, 134, 135, 137, 141, 142, 147, 154, 183, 187, 199, 201, 215, 236, 240, 243, 244, 248, 250, 252, 260, 263, 267, 276, 283, 292, 295, 296, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 354, 356, 358, 362, 363, 364, 367, 368, 369, 370, 373, 375, 377, 379, 380, 381, 383, 387, 388, 389, 390, 393, 401, 403, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 431, 432, 436, 442, 443, 445, 446, 447, 449, 450, 451, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 471, 496, 504, 524, 531, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 593, 594, 597, 602, 607, 608, 610, 614, 619, 622, 627, 628, 630, 631, 632, 634, 639, 640, 645, 646, 647, 651, 653, 655, 656, 657, 658, 659, 661, 663, 665, 666, 668, 671, 672, 673, 674, 675, 676, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 705, 711, 713, 774, 778, 779, 780, 781, 798, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 842, 846, 847, 849, 850, 851, 852, 854, 855, 857, 858, 860, 863, 864, 866, 868, 869, 881, 885, 893, 899, 900, 901, 902, 906, 909, 912, 913, 914, 915, 942, 966, 990, 991, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1009, 1014, 1017, 1023, 1024, 1025, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "detcurvedisplai": [2, 266, 321, 727, 1044, 1045, 1049, 1050], "detect": [2, 14, 42, 47, 49, 58, 70, 96, 98, 111, 112, 113, 141, 143, 150, 183, 195, 215, 225, 237, 251, 261, 263, 269, 272, 278, 279, 290, 309, 315, 326, 338, 370, 373, 375, 379, 387, 389, 405, 406, 407, 409, 411, 415, 429, 445, 448, 463, 465, 468, 469, 472, 473, 474, 475, 487, 488, 490, 492, 496, 510, 512, 515, 522, 537, 538, 539, 546, 563, 564, 588, 591, 596, 631, 639, 677, 698, 702, 727, 789, 830, 850, 854, 865, 874, 877, 878, 882, 883, 884, 904, 908, 993, 997, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1032, 1035, 1038, 1039, 1040, 1042, 1044, 1045, 1047, 1048], "detection_error_tradeoff": 1001, "detector": [370, 377, 389, 850], "determin": [2, 48, 50, 53, 57, 80, 88, 111, 134, 136, 140, 149, 166, 175, 186, 193, 194, 204, 208, 214, 269, 282, 309, 314, 343, 352, 357, 358, 374, 375, 377, 384, 388, 389, 404, 405, 407, 411, 412, 414, 415, 416, 417, 430, 436, 440, 441, 442, 444, 446, 448, 449, 455, 458, 459, 460, 464, 468, 469, 471, 472, 473, 474, 475, 481, 482, 483, 487, 490, 492, 495, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 537, 539, 542, 543, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 582, 583, 584, 588, 591, 594, 602, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 687, 689, 690, 692, 693, 694, 707, 711, 723, 729, 730, 738, 783, 784, 785, 787, 788, 793, 800, 802, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 837, 838, 840, 847, 849, 850, 855, 860, 861, 862, 868, 869, 877, 878, 879, 881, 885, 893, 904, 905, 907, 910, 913, 915, 918, 946, 963, 969, 971, 974, 990, 993, 995, 1000, 1004, 1006, 1007, 1009, 1011, 1014, 1015, 1017, 1032, 1037, 1040, 1041, 1043, 1044, 1045], "determinist": [91, 146, 363, 371, 389, 407, 442, 446, 448, 450, 451, 452, 457, 458, 461, 551, 559, 560, 564, 565, 583, 584, 691, 695, 811, 812, 860, 912, 913, 923, 993, 997, 1033, 1036, 1038, 1040, 1041, 1044, 1047, 1048], "detlefsen": 1046, "detomaso": 1039, "detriment": [46, 167, 283, 363, 416, 997], "dev": [179, 186, 229, 274, 279, 373, 375, 379, 381, 383, 942, 943, 1001, 1025, 1028, 1039, 1044, 1047, 1048], "dev0": [373, 379, 1024, 1028], "dev514": 1046, "devansh": [1039, 1040], "devanshkyada27": 1049, "devashish": 1038, "devel": 373, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 324, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 370, 374, 375, 379, 381, 387, 389, 390, 392, 398, 401, 404, 409, 410, 414, 415, 421, 424, 431, 493, 800, 942, 943, 984, 997, 1001, 1004, 1017, 1020, 1021, 1022, 1024, 1025, 1032, 1040, 1041, 1042, 1047, 1050], "developing_estim": 1022, "devi": 1044, "devianc": [2, 145, 148, 211, 229, 324, 414, 553, 558, 559, 561, 562, 565, 648, 669, 680, 721, 723, 724, 747, 749, 752, 913, 915, 997, 1017, 1033, 1042, 1043, 1045, 1046, 1048], "deviant": [217, 1007], "deviat": [52, 58, 70, 94, 111, 137, 140, 141, 142, 144, 168, 170, 175, 177, 179, 186, 193, 217, 248, 266, 267, 268, 269, 270, 272, 295, 296, 309, 314, 367, 371, 372, 380, 384, 389, 411, 414, 417, 449, 471, 501, 511, 512, 513, 514, 516, 517, 518, 522, 524, 525, 530, 552, 594, 611, 634, 644, 645, 671, 724, 752, 806, 823, 850, 873, 874, 884, 893, 894, 895, 997, 1001, 1007, 1011, 1038, 1039, 1040, 1043, 1044, 1045], "devic": [411, 582, 1020, 1050], "devnani": 1044, "deweight": 950, "dexter": 1042, "dezub": 1039, "df": [43, 52, 62, 64, 149, 154, 185, 187, 193, 197, 211, 229, 259, 269, 313, 315, 325, 351, 380, 415, 465, 590, 591, 990, 991, 1049], "df_": 229, "df_freq": 229, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 325, "df_sev": 229, "df_std": 351, "df_test": [211, 229], "df_train": [211, 229], "dfrac": [1005, 1011], "dgemm": 362, "dgesdd": 381, "dhanshre": 1047, "dhillon": [2, 57, 404, 450, 452, 511], "dhingra": [1040, 1041, 1044, 1049], "di": [389, 407, 412, 531, 537, 664, 685, 686, 897, 1036, 1045], "dia": 1049, "diabet": [2, 46, 147, 157, 158, 168, 182, 183, 199, 201, 208, 265, 368, 414, 501, 652, 653, 800, 805, 825, 826, 827, 1009, 1022, 1027], "diadochokinet": 1047, "diag": [51, 113, 178, 256, 259, 412, 417, 532, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 797, 798, 997, 1047], "diag_kind": [185, 186], "diagnos": [168, 272, 372, 383, 392, 408], "diagnosi": [168, 272, 372, 851], "diagnost": [168, 189, 272, 368, 389, 406, 500, 712, 826, 827, 1001, 1009, 1020, 1021, 1027], "diagon": [2, 43, 62, 64, 75, 113, 115, 126, 229, 248, 256, 259, 260, 262, 339, 404, 407, 409, 417, 452, 470, 471, 477, 480, 511, 513, 527, 532, 550, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 650, 651, 654, 655, 656, 682, 683, 701, 715, 792, 797, 798, 848, 856, 993, 995, 997, 1000, 1001, 1004, 1011, 1038, 1040, 1041, 1042], "diagram": [2, 62, 64, 103, 250, 319, 325, 377, 405, 407, 437, 438, 467, 902, 1011, 1043, 1044, 1049, 1050], "diamet": 407, "diamond": 257, "diaz": 1040, "dice": [449, 456, 699, 778, 779, 780, 1004], "dicedist": 699, "dichotomis": 1017, "dickerson": 1033, "dickson": 1039, "dico": 123, "dict": [48, 49, 50, 51, 55, 63, 74, 102, 105, 106, 140, 144, 146, 148, 209, 217, 238, 247, 256, 267, 268, 270, 273, 276, 278, 289, 293, 311, 315, 322, 332, 339, 343, 351, 352, 364, 367, 369, 377, 387, 389, 408, 411, 418, 419, 421, 425, 429, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 711, 713, 762, 765, 771, 779, 780, 797, 798, 799, 800, 803, 804, 806, 811, 812, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 921, 923, 935, 936, 954, 957, 960, 989, 990, 1001, 1011, 1027, 1032, 1038, 1039, 1048, 1049, 1050], "dict_count_vector": 352, "dict_init": [531, 537, 545, 546], "dict_kei": [126, 626], "dict_learn": [2, 384, 531, 537, 546, 1033, 1040, 1042, 1045, 1046, 1048], "dict_learning_onlin": [2, 545, 1033, 1042, 1045, 1046, 1049], "dict_pos_code_estim": 120, "dict_pos_dict_estim": 120, "dict_pos_estim": 120, "dict_typ": 581, "dictat": 407, "dictionari": [2, 44, 45, 46, 47, 71, 84, 86, 119, 121, 149, 151, 183, 210, 245, 247, 263, 351, 352, 368, 369, 370, 377, 387, 389, 407, 415, 448, 463, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 510, 526, 531, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 567, 568, 569, 570, 581, 582, 584, 587, 588, 589, 594, 632, 633, 634, 664, 685, 686, 701, 711, 713, 800, 803, 804, 811, 812, 814, 822, 827, 863, 868, 877, 912, 913, 914, 915, 919, 921, 923, 935, 957, 960, 990, 997, 1001, 1016, 1022, 1026, 1027, 1032, 1040, 1043, 1044, 1045, 1046, 1047], "dictionarylearn": [2, 412, 537, 539, 540, 542, 543, 544, 545, 546, 1033, 1037, 1039, 1042, 1045, 1046, 1047, 1048], "dictlearn": 1037, "dictvector": [2, 47, 57, 102, 183, 349, 350, 351, 370, 415, 487, 582, 588, 589, 590, 591, 877, 1022, 1032, 1033, 1036, 1042, 1044, 1045, 1048, 1049], "did": [146, 170, 186, 189, 211, 219, 229, 255, 263, 316, 370, 401, 627, 712, 819, 906, 1033, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047], "didact": [375, 1021], "didi": [1038, 1039, 1040, 1041], "didn": [245, 358, 389, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "die": 998, "diebold": 269, "diederik": [861, 862, 1005, 1047], "diederikwp": 1047, "diego": [1033, 1034], "diegodlh": [1039, 1040], "diemert": [1025, 1034, 1035], "diesel": [211, 229], "dietterich": [269, 834, 1002], "diff": [378, 1001], "diff_embed": 299, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 134, 137, 139, 140, 142, 143, 144, 146, 148, 149, 154, 155, 156, 157, 159, 161, 163, 168, 169, 170, 171, 172, 175, 176, 177, 181, 182, 183, 185, 186, 188, 191, 193, 194, 198, 199, 200, 201, 203, 204, 211, 212, 213, 215, 216, 217, 218, 219, 228, 229, 231, 232, 233, 234, 236, 238, 240, 243, 244, 245, 248, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 286, 288, 289, 292, 295, 296, 298, 304, 305, 308, 310, 311, 313, 314, 318, 326, 334, 335, 337, 338, 339, 341, 342, 346, 347, 350, 351, 352, 356, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 388, 389, 393, 395, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 432, 436, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 461, 463, 474, 477, 489, 493, 494, 496, 503, 504, 508, 509, 512, 514, 522, 537, 538, 539, 540, 546, 547, 549, 550, 555, 556, 563, 581, 582, 588, 589, 590, 591, 594, 611, 613, 614, 615, 619, 622, 623, 627, 631, 632, 633, 634, 638, 643, 644, 645, 647, 649, 651, 653, 655, 658, 661, 666, 667, 672, 674, 676, 677, 678, 680, 690, 692, 694, 698, 700, 701, 704, 705, 706, 707, 709, 715, 717, 718, 727, 728, 729, 730, 731, 734, 735, 737, 743, 757, 758, 759, 761, 778, 782, 783, 784, 786, 787, 789, 792, 793, 795, 798, 800, 802, 803, 804, 805, 806, 809, 814, 815, 816, 818, 819, 820, 822, 823, 825, 827, 828, 831, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 854, 857, 860, 864, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 909, 912, 913, 914, 915, 957, 964, 990, 991, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "difference_plot": 274, "differenti": [126, 276, 414, 417, 559, 560, 619, 622], "difficult": [88, 134, 186, 219, 248, 375, 383, 405, 412, 414, 553, 554, 559, 561, 562, 996, 998, 1000, 1004, 1006, 1008, 1017, 1025, 1032, 1046], "difficulti": [48, 64, 229, 309, 364, 375, 405, 861, 862, 1000, 1004], "diffus": 175, "digest": [375, 1047], "digg": [1025, 1039], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 84, 86, 89, 90, 92, 94, 95, 97, 104, 105, 123, 139, 158, 166, 168, 183, 202, 203, 204, 218, 227, 230, 231, 233, 235, 242, 243, 257, 262, 267, 268, 271, 293, 298, 299, 303, 305, 306, 324, 327, 330, 351, 368, 375, 381, 407, 413, 414, 416, 440, 444, 446, 502, 541, 544, 549, 566, 658, 688, 689, 690, 691, 692, 697, 704, 705, 713, 717, 718, 737, 793, 795, 830, 846, 853, 860, 864, 865, 874, 884, 890, 897, 900, 909, 916, 917, 918, 998, 1001, 1004, 1006, 1014, 1022, 1027, 1036], "digraph": 916, "dijkstra": [384, 688, 998], "dilemma": 996, "dillon": [1040, 1041, 1042], "dilut": [189, 372], "dilutedsauc": 1040, "dim": [220, 242, 297, 298, 300, 335, 336, 527, 699, 1049], "dim_reduction_method": 298, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 86, 113, 115, 120, 126, 168, 172, 174, 176, 178, 187, 197, 208, 209, 233, 235, 238, 242, 243, 249, 255, 256, 293, 294, 298, 312, 343, 350, 351, 352, 370, 372, 376, 389, 407, 412, 413, 417, 419, 441, 442, 444, 446, 447, 448, 451, 463, 464, 481, 482, 483, 493, 494, 515, 524, 525, 529, 530, 533, 541, 549, 582, 583, 584, 585, 587, 589, 597, 611, 619, 622, 641, 644, 659, 690, 691, 692, 694, 695, 699, 764, 825, 844, 845, 849, 863, 896, 897, 898, 906, 907, 908, 909, 910, 930, 931, 932, 963, 971, 974, 991, 993, 995, 997, 998, 999, 1002, 1004, 1005, 1007, 1013, 1016, 1020, 1039, 1041, 1042, 1044], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 87, 88, 90, 91, 95, 101, 103, 105, 106, 115, 116, 118, 120, 126, 127, 128, 134, 139, 152, 168, 170, 172, 173, 177, 183, 197, 212, 228, 230, 232, 233, 235, 238, 242, 243, 246, 255, 256, 290, 293, 297, 299, 311, 336, 343, 350, 358, 362, 367, 370, 371, 372, 375, 384, 389, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 444, 446, 448, 464, 468, 472, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 497, 500, 501, 502, 504, 505, 510, 515, 519, 532, 534, 535, 538, 539, 540, 541, 544, 547, 549, 563, 566, 573, 599, 607, 631, 640, 641, 642, 652, 688, 689, 690, 691, 692, 693, 694, 696, 699, 710, 725, 797, 798, 800, 830, 844, 845, 846, 849, 852, 853, 860, 864, 865, 868, 874, 879, 884, 896, 897, 898, 904, 908, 948, 986, 992, 993, 996, 997, 1002, 1003, 1007, 1013, 1014, 1015, 1016, 1017, 1022, 1023, 1025, 1026, 1027, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1044, 1047, 1048], "dimensionalityreduct": 372, "dimensionalityreductiondimension": 395, "diminish": 415, "dimitri": [1045, 1046, 1047, 1048, 1049], "dimmick": 372, "dinga92": 1050, "dingwal": 1039, "dionisi": 1046, "diop": 1042, "dipan": 1050, "direct": [51, 115, 116, 120, 122, 128, 168, 217, 254, 260, 266, 298, 307, 314, 339, 344, 373, 375, 376, 379, 383, 390, 393, 407, 410, 412, 415, 416, 451, 461, 470, 471, 477, 534, 541, 549, 588, 589, 591, 602, 641, 688, 853, 995, 996, 997, 1002, 1004, 1006, 1021, 1032, 1035], "direction": 1050, "direction_vector": 307, "directli": [0, 45, 57, 64, 80, 89, 103, 126, 139, 143, 168, 178, 197, 199, 211, 217, 229, 239, 274, 307, 309, 322, 325, 326, 352, 358, 362, 373, 375, 376, 377, 379, 381, 387, 388, 389, 390, 403, 404, 405, 407, 408, 409, 410, 411, 415, 417, 441, 451, 461, 463, 464, 468, 473, 527, 567, 568, 569, 570, 593, 597, 611, 620, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 664, 677, 681, 684, 690, 774, 778, 781, 792, 793, 799, 800, 803, 804, 814, 828, 829, 831, 847, 849, 863, 864, 865, 871, 881, 883, 886, 893, 990, 997, 999, 1004, 1006, 1008, 1011, 1016, 1017, 1021, 1032, 1040, 1041, 1043, 1044, 1045, 1048, 1049], "director": 1025, "directori": [0, 2, 47, 291, 369, 373, 375, 377, 379, 381, 383, 389, 393, 408, 440, 444, 449, 485, 491, 499, 864, 865, 1046], "direr": [1035, 1036, 1039, 1040], "dirichlet": [2, 42, 45, 183, 254, 255, 260, 264, 415, 487, 536, 538, 540, 588, 591, 797, 1020, 1022, 1026, 1027, 1032, 1037, 1038], "dirichlet_distribut": [254, 797, 1000, 1038], "dirichlet_process": [254, 260, 797, 1000, 1038], "disabl": [138, 245, 263, 316, 325, 350, 373, 375, 398, 415, 448, 459, 467, 537, 538, 539, 546, 559, 560, 561, 562, 863, 881, 893, 902, 930, 931, 1011, 1038, 1041, 1045, 1047, 1050], "disadvantag": [412, 417, 997, 998, 1005, 1015, 1016, 1017], "disagre": [735, 1008], "disambigu": [375, 832, 901, 1014, 1047], "disappear": [997, 1032], "disappoint": 43, "discard": [47, 88, 195, 272, 362, 404, 409, 416, 508, 509, 549, 597, 627, 630, 644, 877, 881, 893, 991, 997, 1040, 1044, 1050], "disclaim": 1020, "disclos": 388, "disconnect": 1045, "discontinu": [43, 387], "discord": [705, 1024], "discount": [2, 370, 407, 726, 756, 1039, 1042], "discounted_cumulative_gain": 726, "discourag": [215, 387, 393, 689], "discov": [351, 407, 412, 415, 418, 443, 447, 1047, 1050], "discoveri": [2, 269, 370, 381, 384, 407, 414, 416, 418, 443, 511, 555, 556, 563, 592, 595, 596, 598, 599, 600, 606, 720, 740, 783, 939, 940, 941, 1001, 1013, 1025, 1046, 1047], "discrep": [415, 1036], "discret": [2, 43, 67, 80, 118, 129, 134, 152, 169, 183, 187, 194, 211, 229, 249, 286, 304, 308, 312, 333, 364, 367, 370, 371, 375, 379, 388, 389, 407, 412, 415, 417, 437, 438, 447, 451, 459, 460, 461, 492, 514, 515, 522, 553, 559, 588, 589, 592, 595, 596, 599, 600, 607, 608, 610, 611, 612, 616, 617, 618, 657, 658, 800, 811, 822, 830, 839, 840, 843, 865, 869, 877, 878, 881, 884, 893, 904, 909, 913, 963, 990, 997, 998, 999, 1001, 1002, 1004, 1017, 1020, 1022, 1027, 1034, 1037, 1045, 1046, 1047], "discrete_featur": [607, 608], "discrim": 211, "discrimin": [2, 12, 48, 49, 65, 109, 110, 111, 112, 113, 126, 128, 163, 165, 168, 183, 191, 226, 232, 246, 259, 298, 372, 405, 414, 474, 512, 549, 550, 566, 631, 783, 853, 990, 998, 1001, 1004, 1015, 1017, 1022, 1023, 1027, 1035], "discriminant_analysi": [2, 67, 69, 70, 128, 232, 298, 358, 403, 536, 549, 550, 853, 995, 1002, 1032, 1035, 1036, 1037, 1038, 1039], "discriminatori": 405, "discuss": [43, 86, 91, 168, 186, 201, 231, 236, 263, 272, 286, 350, 358, 364, 370, 372, 375, 380, 381, 383, 387, 389, 390, 406, 407, 409, 413, 414, 416, 417, 498, 682, 683, 846, 847, 852, 854, 855, 991, 995, 997, 998, 1001, 1004, 1011, 1018, 1021, 1024, 1035], "diseas": [46, 157, 168, 182, 272, 372, 712, 1001], "disentangl": 998, "disjoint": [405, 407, 408, 436, 704, 731, 755, 757, 998], "disk": [45, 53, 370, 375, 380, 389, 401], "disp": [43, 66, 68, 136, 149, 150, 151, 262, 272, 282, 292, 314, 319, 325, 336, 341, 437, 631, 697, 700, 701, 853], "disp1": 632, "disp2": 632, "dispar": [690, 694, 998], "dispatch": [103, 263, 389, 403, 467, 800, 814, 825, 826, 827, 902, 966, 967, 1027, 1047, 1050], "dispatch_next": 966, "dispatch_one_batch": 966, "dispers": [70, 283, 407, 710, 725, 997], "displai": [2, 51, 62, 64, 70, 72, 80, 93, 103, 112, 113, 115, 116, 120, 140, 150, 151, 154, 181, 183, 186, 187, 200, 229, 237, 238, 248, 252, 258, 266, 270, 271, 276, 278, 279, 282, 284, 299, 315, 319, 320, 338, 355, 362, 375, 377, 378, 382, 384, 393, 395, 408, 412, 415, 416, 421, 437, 463, 466, 467, 496, 541, 564, 630, 631, 632, 658, 687, 697, 698, 700, 701, 702, 713, 718, 782, 789, 800, 806, 814, 823, 830, 864, 865, 877, 879, 884, 902, 909, 916, 917, 918, 939, 966, 987, 1001, 1005, 1020, 1022, 1027, 1041, 1043, 1044, 1046, 1047], "display_label": [45, 262, 697, 1044], "dispos": 990, "disproportion": 413, "disput": 140, "disregard": [350, 389, 415, 430, 464, 481, 482, 483, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 722, 723, 724, 785, 837, 838, 847, 855, 862, 873, 874, 880, 881, 884, 889, 892, 893, 895, 905, 907, 910, 913, 915, 1001, 1040], "disrupt": [363, 373], "dissemin": 1020, "dissimilar": [234, 343, 389, 404, 451, 690, 694, 998, 1038, 1048], "dissimilarity_matrix_": 690, "dist": [111, 232, 242, 379, 468, 469, 470, 471, 472, 473, 474, 475, 699, 763, 769, 844, 845], "dist_": [468, 473], "dist_embed": 299, "dist_linkag": 189, "dist_matrix": 451, "dist_matrix_": 688, "distanc": [2, 37, 74, 75, 88, 90, 93, 94, 98, 100, 108, 112, 125, 168, 181, 183, 189, 198, 212, 214, 231, 233, 236, 242, 248, 289, 291, 292, 297, 299, 301, 302, 309, 314, 318, 322, 323, 343, 350, 351, 362, 372, 384, 387, 389, 404, 407, 409, 412, 413, 417, 418, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 454, 455, 456, 457, 458, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 538, 540, 547, 607, 608, 615, 619, 620, 622, 623, 628, 658, 659, 666, 668, 674, 675, 676, 677, 678, 688, 689, 690, 692, 693, 694, 695, 696, 699, 703, 725, 734, 758, 760, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 778, 779, 780, 781, 792, 793, 796, 800, 814, 833, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 883, 898, 902, 904, 906, 908, 909, 910, 912, 913, 914, 915, 991, 995, 998, 999, 1001, 1004, 1007, 1011, 1013, 1015, 1016, 1021, 1022, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "distance_matrix": 189, "distance_metr": [2, 778, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858], "distance_threshold": [76, 440, 444, 1041, 1044], "distancemetr": [2, 389, 413, 847, 1004, 1040, 1044, 1045, 1046, 1049], "distancemetric64": [844, 845], "distances_": [76, 440, 444, 1044], "distant": [407, 692, 709, 1004], "distil": 236, "distinct": [93, 204, 269, 330, 350, 352, 370, 377, 380, 389, 390, 411, 414, 415, 589, 801, 810, 818, 878, 879, 899, 900, 990, 997, 1004, 1007, 1040], "distinguish": [43, 58, 75, 111, 118, 125, 213, 266, 286, 370, 377, 389, 390, 417, 990, 1001, 1004, 1007], "distort": [37, 210, 242, 372, 405, 881, 893, 898, 998, 1011, 1013], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 85, 86, 88, 90, 95, 107, 110, 111, 112, 116, 118, 126, 134, 136, 146, 150, 163, 168, 170, 179, 183, 185, 186, 189, 191, 193, 204, 211, 213, 215, 233, 235, 238, 242, 248, 254, 259, 260, 263, 265, 269, 275, 277, 283, 286, 290, 294, 308, 309, 311, 314, 324, 328, 329, 344, 346, 350, 362, 363, 368, 371, 372, 373, 375, 376, 380, 389, 405, 407, 409, 411, 412, 413, 419, 446, 448, 468, 469, 470, 471, 472, 473, 474, 475, 487, 498, 503, 515, 516, 517, 518, 519, 523, 532, 533, 536, 550, 551, 552, 563, 611, 625, 640, 642, 644, 645, 648, 658, 659, 669, 679, 680, 688, 689, 690, 692, 706, 708, 724, 752, 789, 797, 798, 804, 805, 812, 814, 818, 819, 830, 840, 843, 849, 853, 860, 867, 880, 881, 882, 883, 884, 892, 893, 894, 899, 900, 908, 919, 950, 990, 995, 997, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1013, 1014, 1020, 1021, 1022, 1026, 1027, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "district": [182, 370], "distutils_use_sdk": 373, "ditenberg": 1039, "div": [248, 944], "dive": [116, 375, 381, 990], "diverg": [54, 145, 231, 236, 294, 538, 540, 547, 692, 860, 998, 1000, 1001, 1006, 1008, 1039, 1040, 1045], "divers": [0, 389, 414], "divid": [72, 78, 120, 165, 175, 211, 248, 254, 351, 358, 371, 372, 404, 406, 407, 411, 412, 414, 468, 469, 470, 471, 472, 473, 474, 475, 512, 519, 534, 541, 676, 677, 678, 719, 726, 734, 738, 746, 756, 794, 796, 861, 862, 906, 909, 948, 951, 952, 990, 998, 1000, 1001, 1004, 1011, 1015, 1017, 1032, 1039, 1040, 1043], "dividend": 1001, "divis": [322, 407, 415, 590, 591, 594, 712, 713, 716, 729, 730, 738, 746, 783, 784, 787, 1001, 1036, 1040, 1041, 1044, 1048, 1049], "divisor": 1001, "divo": 1042, "divyanshu": 1045, "divyaprabha": 1043, "diwakar": 1046, "dixon": [769, 1042, 1043], "dizietasahi": 1042, "di\u1ec5n": 1047, "djipei": [1037, 1038], "dl": 676, "dlabal": 1036, "dll": 1046, "dlovel": 1040, "dmallia17": 1045, "dmitri": [1037, 1039, 1040, 1041, 1045, 1048, 1049], "dmitrij": 1036, "dmytro": 1045, "dn": [0, 1004], "dna": [387, 628, 991], "dnf": 393, "do": [0, 30, 43, 49, 52, 62, 64, 77, 88, 94, 100, 106, 124, 126, 129, 138, 141, 142, 146, 147, 149, 154, 165, 175, 181, 186, 187, 188, 211, 215, 229, 231, 233, 245, 246, 248, 260, 263, 264, 267, 270, 272, 282, 288, 289, 291, 295, 321, 325, 333, 336, 339, 343, 344, 346, 350, 351, 352, 357, 358, 362, 363, 364, 370, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 389, 390, 401, 403, 405, 407, 408, 409, 410, 411, 414, 415, 416, 426, 449, 460, 463, 466, 503, 536, 538, 542, 544, 552, 555, 581, 582, 588, 589, 591, 602, 632, 633, 645, 646, 652, 655, 656, 658, 659, 666, 668, 676, 737, 763, 778, 782, 802, 817, 820, 836, 837, 841, 868, 869, 871, 878, 882, 884, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 929, 974, 990, 993, 995, 997, 998, 1001, 1002, 1004, 1005, 1009, 1011, 1016, 1017, 1020, 1021, 1024, 1025, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "do_early_stopping_": [561, 562], "doc": [0, 43, 47, 52, 57, 350, 352, 363, 375, 379, 380, 383, 389, 393, 400, 415, 588, 589, 591, 778, 781, 792, 793, 827, 1032, 1036, 1046], "doc_environ": 383, "doc_it": 47, "doc_linux": 383, "doc_topic_distr": [536, 1039], "doc_topic_prior": [412, 536], "doc_topic_prior_": 536, "docker": [383, 401, 1045, 1046], "dock\u00e8": [1041, 1042, 1043, 1049, 1050], "docstr": [375, 377, 381, 389, 447, 460, 471, 699, 701, 938, 990, 1004, 1005, 1015, 1032, 1039, 1040, 1045, 1046, 1049], "doctest": [375, 389, 1032], "document": [2, 17, 42, 45, 49, 51, 54, 56, 59, 63, 72, 90, 91, 93, 94, 102, 103, 104, 118, 120, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 226, 239, 240, 241, 242, 245, 246, 248, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 306, 307, 315, 319, 322, 323, 325, 330, 332, 346, 352, 356, 357, 362, 363, 364, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 383, 387, 389, 390, 393, 395, 398, 401, 404, 407, 412, 415, 418, 443, 446, 447, 448, 449, 452, 456, 463, 487, 488, 499, 501, 511, 521, 523, 536, 544, 564, 588, 589, 590, 591, 604, 631, 639, 643, 658, 666, 668, 674, 676, 696, 697, 699, 703, 705, 717, 737, 758, 759, 769, 778, 779, 780, 793, 795, 800, 803, 804, 806, 814, 823, 834, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 865, 876, 904, 909, 926, 929, 931, 945, 966, 990, 997, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1015, 1018, 1022, 1025, 1033, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "document_clust": 1038, "document_nam": 57, "doddington": 1001, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 80, 86, 88, 90, 102, 104, 105, 116, 130, 134, 139, 140, 142, 143, 144, 148, 149, 154, 168, 176, 186, 187, 197, 204, 211, 217, 229, 231, 232, 233, 236, 238, 241, 242, 243, 245, 246, 248, 256, 257, 263, 264, 269, 271, 272, 276, 278, 279, 288, 289, 302, 309, 311, 313, 315, 316, 321, 322, 331, 332, 337, 339, 346, 348, 350, 351, 352, 356, 362, 363, 369, 373, 375, 376, 377, 379, 383, 388, 389, 395, 398, 401, 403, 405, 407, 408, 411, 412, 414, 415, 416, 417, 432, 439, 441, 445, 446, 448, 449, 453, 455, 466, 472, 478, 486, 499, 503, 508, 527, 535, 537, 538, 539, 544, 546, 549, 550, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 581, 582, 583, 588, 589, 591, 593, 594, 597, 602, 606, 610, 632, 638, 649, 650, 651, 654, 655, 656, 659, 671, 682, 683, 698, 700, 702, 707, 728, 729, 730, 734, 736, 738, 743, 778, 783, 784, 787, 788, 794, 800, 803, 804, 814, 861, 865, 866, 867, 869, 871, 873, 876, 877, 878, 881, 884, 885, 893, 896, 897, 901, 904, 905, 912, 913, 914, 915, 919, 930, 934, 948, 951, 952, 953, 966, 984, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1015, 1016, 1017, 1032, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "doepk": 1039, "doesn": [47, 186, 211, 245, 255, 288, 306, 339, 383, 389, 393, 401, 407, 415, 416, 420, 432, 474, 632, 633, 666, 668, 676, 716, 828, 831, 836, 846, 847, 861, 873, 874, 1000, 1001, 1017, 1036, 1049], "dog": [321, 322, 324, 325, 326, 582, 783, 885, 1011], "dohmatob": [1037, 1038, 1039], "dohri": [1049, 1050], "doi": [191, 211, 229, 375, 407, 676], "dok": [553, 554, 871, 1045], "dokato": 1039, "dolan": 370, "dollar": [186, 370], "dolmatov": 1042, "dolphin": 350, "domain": [149, 211, 283, 315, 389, 392, 411, 635, 721, 723, 724, 801, 802, 807, 808, 809, 997, 1021], "domin": [140, 182, 189, 211, 216, 248, 278, 314, 370, 381, 405, 884, 1003, 1011, 1017, 1048], "domingo": [64, 788, 1001], "dominik": [1039, 1048], "don": [51, 64, 87, 102, 149, 186, 232, 245, 246, 263, 269, 282, 289, 331, 336, 340, 350, 351, 362, 369, 375, 377, 379, 381, 383, 388, 393, 398, 406, 408, 415, 427, 646, 652, 832, 912, 913, 914, 915, 923, 964, 990, 997, 1000, 1002, 1005, 1007, 1015, 1036, 1041, 1048, 1049, 1050], "don86": 1039, "donald": [45, 370, 407, 725, 991], "donat": 239, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 86, 123, 149, 165, 168, 175, 176, 186, 187, 191, 193, 197, 198, 215, 228, 244, 245, 259, 267, 270, 273, 278, 289, 312, 320, 350, 351, 352, 356, 358, 363, 369, 373, 375, 377, 379, 382, 383, 384, 387, 389, 398, 407, 409, 411, 412, 414, 440, 441, 444, 449, 451, 471, 481, 482, 483, 484, 488, 535, 561, 562, 582, 606, 607, 608, 628, 630, 632, 634, 643, 644, 645, 659, 722, 741, 797, 798, 800, 814, 816, 819, 820, 822, 868, 882, 985, 990, 991, 994, 997, 998, 1001, 1003, 1004, 1005, 1011, 1014, 1015, 1016, 1017, 1021, 1032, 1034, 1039, 1042, 1044, 1048], "dong": 1042, "donn": 1037, "donoho": [689, 693, 998], "donor": [168, 372], "donovan": 1038, "dor": 1040, "dorin": [96, 447], "dormagen": 1042, "dot": [2, 55, 69, 79, 82, 87, 90, 95, 109, 110, 111, 113, 115, 116, 121, 122, 123, 127, 129, 134, 137, 170, 171, 177, 178, 186, 195, 197, 204, 206, 207, 243, 255, 256, 258, 259, 263, 273, 335, 337, 343, 362, 377, 381, 384, 389, 404, 412, 415, 533, 538, 540, 547, 590, 591, 614, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 681, 684, 687, 761, 763, 876, 916, 949, 999, 1003, 1011, 1015, 1016, 1041], "dot_data": [916, 1017], "dot_product": 949, "dotproduct": [2, 173, 174, 179, 417, 611, 625], "dotson": 1037, "doubl": [70, 140, 281, 375, 389, 412, 538, 540, 541, 547, 844, 845, 855, 984, 991, 1016, 1017, 1032, 1042, 1043], "doubt": [375, 376, 379, 997, 1007, 1020], "doucet": 1046, "douetteau": 1025, "doug": [1033, 1034, 1044], "dougal": [1034, 1036, 1037, 1039, 1040, 1041, 1042], "dougla": 1040, "douillard": 1039, "doumouro": 1041, "douriez": [1042, 1043], "dowl": 1038, "down": [80, 81, 112, 134, 226, 227, 233, 242, 243, 245, 272, 286, 307, 309, 343, 358, 369, 378, 383, 389, 409, 412, 442, 449, 455, 590, 593, 594, 639, 649, 774, 778, 781, 873, 874, 879, 882, 883, 894, 906, 909, 916, 997, 1040], "downarrow": 1003, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 368, 370, 372, 373, 379, 380, 383, 395, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 510, 1017, 1027, 1036, 1037, 1040, 1044, 1045, 1046], "download_20newsgroup": 1036, "download_if_miss": [487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 1039], "download_url": 47, "downsampl": 123, "downsid": 352, "downstream": [43, 111, 316, 352, 415, 531, 534, 537, 541, 542, 606, 877, 1011, 1042], "downweight": [409, 536], "dowon": [1040, 1041], "dozen": [388, 417], "do\u0161ilovi\u0107": [1049, 1050], "dp": [255, 260], "dpgmm": [255, 260, 1032, 1036, 1038], "dpi": [222, 918, 1045], "dpy_debug": 381, "dqd": 381, "dr": [0, 168, 372, 407, 1046], "draft": [375, 390], "drag": 395, "dragon": 1011, "drama": 415, "dramat": 364, "dramsch": 1042, "drastic": [170, 242, 277, 407, 411, 1004, 1014], "draw": [43, 46, 93, 179, 186, 249, 271, 276, 339, 382, 410, 412, 413, 414, 555, 556, 557, 558, 563, 564, 565, 566, 611, 634, 701, 806, 823, 916, 918, 1000, 1020, 1045, 1046], "drawback": [228, 993, 996], "drawcoastlin": [50, 302], "drawcountri": [50, 302], "drawn": [46, 85, 111, 137, 167, 170, 179, 185, 249, 276, 293, 350, 363, 371, 407, 413, 414, 417, 419, 468, 469, 470, 471, 472, 473, 474, 475, 515, 523, 533, 555, 556, 557, 558, 563, 564, 565, 566, 611, 627, 632, 641, 840, 896, 897, 914, 915, 997, 1011, 1013, 1035], "drawstyl": [354, 700], "draxu": 1032, "drew": [1041, 1050], "drewhogg": 1047, "drewmjohnston": 1041, "drgfreeman": 1042, "driessen": [409, 468, 473, 1007], "drift": 1021, "drivag": [211, 229], "drive": [364, 412, 413, 549, 1015, 1025], "driven": [0, 189, 1025], "driver": [211, 229, 1047], "drop": [43, 44, 52, 103, 107, 116, 149, 175, 185, 186, 187, 189, 211, 215, 229, 248, 252, 263, 279, 315, 320, 323, 325, 351, 379, 383, 408, 412, 414, 463, 466, 567, 568, 569, 570, 695, 700, 702, 782, 789, 863, 877, 883, 991, 997, 1001, 1011, 1020, 1032, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "drop_binary_enc": 877, "drop_dupl": 281, "drop_enc": [877, 1011], "drop_first": 695, "drop_idx": 877, "drop_idx_": [877, 1043, 1047], "drop_intermedi": [700, 702, 782, 789, 1048], "drop_nul": [52, 175], "dropdown": [168, 375, 990], "dropped_result": 143, "dropper": 143, "dror": 1041, "dross": 534, "dro\u017cd\u017c": 1035, "drskd": 1046, "druck": 1046, "drucker": [135, 414, 554], "drug": 997, "dry": 187, "dryden": 102, "ds_ana": 1045, "ds_cnt": [67, 311, 312], "dschult": 55, "dscullei": 448, "dseg": 102, "dsouza": [1043, 1044, 1045, 1046], "dsquareindia": 1038, "dss": 1025, "dt": [83, 123, 155, 175, 414, 415, 1017], "dtreeviz": 1020, "dtype": [43, 47, 49, 50, 55, 82, 86, 98, 102, 103, 143, 145, 147, 148, 150, 171, 172, 173, 182, 186, 187, 213, 229, 252, 254, 263, 267, 273, 277, 283, 286, 296, 302, 315, 321, 322, 324, 329, 357, 369, 370, 375, 377, 387, 389, 403, 408, 411, 414, 415, 422, 423, 425, 428, 441, 442, 446, 447, 448, 449, 450, 452, 458, 463, 465, 466, 468, 471, 473, 487, 488, 489, 490, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 514, 522, 542, 548, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 585, 586, 588, 589, 591, 593, 594, 601, 602, 606, 627, 628, 629, 630, 632, 633, 640, 641, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 697, 699, 705, 714, 715, 731, 738, 741, 755, 786, 806, 825, 827, 828, 840, 844, 845, 847, 855, 869, 875, 877, 878, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 898, 906, 907, 908, 909, 910, 912, 913, 914, 915, 925, 927, 928, 930, 931, 955, 965, 971, 974, 975, 976, 977, 978, 981, 986, 987, 991, 1002, 1011, 1014, 1016, 1033, 1035, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "dtype_exclud": [103, 465], "dtype_includ": [103, 143, 154, 248, 408, 465], "du": [0, 396, 397, 1032, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "dua": 1041, "dual": [102, 104, 318, 346, 350, 415, 416, 470, 471, 477, 611, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 681, 684, 844, 845, 904, 905, 906, 909, 1016, 1034, 1043, 1046, 1048], "dual_coef_": [535, 643, 906, 907, 908, 909, 910, 1016, 1036], "dual_gap": [470, 471, 477, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "dual_gap_": [646, 647, 652, 653, 660, 661, 662, 663, 1045], "dualiti": [471, 997], "dualtre": [844, 845], "duan": [1041, 1043], "duart": [1037, 1045, 1047, 1050], "dubai": 415, "duboi": [1038, 1040], "dubou": 1042, "dubourg": [0, 397, 1025, 1032, 1036], "duchesnai": [0, 397, 1032], "duck": [377, 389, 1042], "ducktyp": [1036, 1049], "duckworth": 1032, "ducout": 1046, "duda": [372, 995], "due": [48, 52, 63, 64, 86, 88, 93, 107, 134, 137, 170, 186, 187, 193, 197, 203, 209, 211, 213, 228, 229, 242, 248, 255, 277, 278, 283, 288, 289, 314, 315, 343, 346, 350, 351, 352, 375, 381, 387, 389, 393, 405, 406, 407, 411, 412, 414, 417, 442, 445, 446, 458, 535, 539, 543, 544, 574, 671, 800, 803, 804, 808, 810, 814, 825, 826, 829, 832, 836, 837, 869, 873, 874, 884, 991, 997, 998, 1000, 1001, 1002, 1004, 1008, 1015, 1016, 1021, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "dueck": [73, 439, 453], "dugnat": 1046, "duhaim": 1040, "dummi": [2, 134, 135, 211, 229, 245, 263, 272, 380, 402, 551, 552, 732, 877, 886, 923, 1002, 1011, 1017, 1027, 1033, 1035, 1036, 1037, 1039], "dummy_classifiers_misclassification_error": 134, "dummy_clf": [134, 551], "dummy_leaf_": 441, "dummy_regr": 552, "dummy_sev": 229, "dummybiclust": 422, "dummyclassifi": [2, 134, 263, 272, 552, 732, 1001, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1050], "dummyestim": [559, 560], "dummyregressor": [2, 211, 229, 551, 1001, 1002, 1033, 1035, 1036, 1039, 1040, 1042, 1045, 1046, 1050], "dumont": 1017, "dump": [2, 55, 401, 486, 844, 845], "dump_svmlight_fil": [2, 1032, 1033, 1037, 1047, 1049], "duong": [1049, 1050], "duplic": [363, 374, 375, 376, 389, 407, 418, 443, 447, 448, 515, 635, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 828, 875, 986, 1004, 1032, 1035, 1044, 1046, 1048, 1049], "dupont": 51, "dupr": [1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "dupr\u00e9": [0, 396, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "duqu": 1045, "durat": [43, 47, 211, 229, 248, 263, 291, 352, 363, 966, 967, 997], "duration_sec": 49, "duration_test": 350, "duration_train": 350, "dure": [0, 43, 44, 51, 52, 83, 88, 91, 104, 107, 116, 125, 138, 143, 144, 149, 151, 165, 170, 175, 186, 187, 189, 201, 204, 212, 219, 263, 267, 271, 283, 289, 320, 321, 343, 362, 364, 373, 375, 377, 380, 389, 390, 407, 408, 412, 414, 415, 417, 418, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 700, 789, 797, 798, 799, 800, 803, 804, 814, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 991, 993, 997, 998, 1004, 1011, 1013, 1017, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "duron": 1046, "duti": 390, "dutt": 1048, "dutta": [1049, 1050], "duv2014": 417, "duvenaud": [417, 622, 623], "dwight": 1047, "dx": [51, 53, 699], "dx_c": 1008, "dy": [51, 699], "dye": 1045, "dylan": [1039, 1042], "dynam": [51, 52, 187, 555, 556, 557, 558, 563, 564, 565, 566, 579, 580, 676, 677, 678, 1017, 1025, 1038, 1044, 1049], "dzi": 1050, "dziki": 1035, "d\u00b2": 229, "d\u00f6pfert": 1040, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 86, 88, 90, 94, 102, 109, 111, 112, 113, 115, 116, 123, 125, 126, 134, 137, 143, 145, 146, 149, 150, 159, 164, 167, 168, 178, 185, 186, 187, 191, 194, 197, 201, 202, 211, 212, 213, 215, 229, 231, 232, 244, 245, 263, 265, 269, 270, 272, 274, 275, 276, 284, 286, 288, 295, 302, 311, 314, 318, 320, 326, 346, 352, 356, 357, 358, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 387, 388, 389, 393, 398, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 438, 440, 442, 443, 444, 446, 448, 449, 453, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 496, 498, 500, 501, 502, 503, 524, 533, 534, 535, 536, 538, 540, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 588, 589, 590, 591, 593, 594, 597, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 622, 623, 628, 630, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 690, 692, 694, 697, 699, 701, 704, 705, 708, 709, 716, 728, 729, 730, 731, 738, 741, 742, 755, 763, 767, 778, 785, 788, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 813, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 860, 861, 862, 864, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 899, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 942, 947, 948, 950, 954, 955, 957, 960, 975, 986, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1021, 1024, 1025, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "e0129126": 369, "e11": 370, "e2": [898, 997], "e41a1c": [79, 95], "e501": [168, 350], "e_": 412, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 81, 82, 86, 88, 91, 93, 94, 102, 103, 105, 106, 107, 115, 116, 118, 120, 121, 125, 126, 127, 128, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 152, 153, 154, 155, 156, 157, 164, 168, 172, 174, 179, 181, 182, 185, 186, 187, 189, 191, 193, 198, 200, 201, 204, 206, 209, 211, 212, 213, 215, 216, 219, 226, 229, 232, 238, 239, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 257, 259, 262, 263, 264, 265, 267, 269, 270, 272, 274, 275, 278, 279, 283, 286, 288, 289, 292, 294, 298, 300, 302, 304, 305, 307, 309, 310, 311, 312, 314, 315, 316, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 333, 339, 343, 346, 351, 352, 354, 355, 357, 358, 362, 363, 364, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 383, 384, 387, 388, 389, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 707, 708, 710, 713, 719, 725, 728, 729, 730, 738, 739, 745, 746, 748, 750, 751, 753, 754, 758, 759, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 783, 784, 785, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 921, 936, 942, 943, 948, 950, 951, 956, 957, 976, 977, 978, 981, 990, 991, 993, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1025, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "eager": 263, "eargl": 1046, "earl": 1035, "earli": [43, 46, 54, 79, 95, 133, 134, 140, 142, 183, 192, 199, 313, 319, 389, 414, 440, 444, 448, 462, 489, 496, 536, 537, 538, 539, 546, 553, 554, 559, 560, 561, 562, 627, 645, 656, 666, 667, 668, 676, 678, 692, 750, 830, 861, 862, 974, 998, 1004, 1011, 1015, 1019, 1021, 1022, 1025, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "earlier": [140, 187, 215, 369, 375, 410, 835, 838, 1011, 1030, 1033, 1045, 1047], "earliest": [369, 998], "early_exager": 1039, "early_exagger": 692, "early_stop": [140, 149, 187, 219, 304, 321, 350, 389, 414, 561, 562, 666, 667, 668, 676, 677, 678, 861, 862, 1015, 1040, 1043, 1046, 1047], "earn": [185, 186, 390], "earth": [233, 351, 764, 1020], "eas": [104, 189, 259, 314, 375, 378, 381, 997, 1015, 1020, 1021, 1025, 1043, 1044, 1046], "easi": [187, 219, 229, 257, 267, 269, 339, 350, 358, 370, 375, 381, 383, 387, 388, 401, 407, 414, 500, 504, 510, 871, 990, 996, 1000, 1008, 1011, 1020, 1021, 1025, 1042, 1047, 1048], "easier": [79, 95, 99, 113, 143, 193, 200, 240, 248, 266, 267, 309, 339, 350, 358, 370, 375, 377, 380, 383, 387, 393, 409, 411, 467, 515, 902, 942, 996, 1001, 1008, 1017, 1021, 1025, 1041, 1046], "easiest": [377, 383, 408, 998], "easili": [43, 48, 67, 126, 165, 189, 214, 227, 243, 245, 249, 252, 269, 271, 278, 294, 311, 375, 377, 389, 390, 401, 408, 414, 415, 417, 448, 995, 997, 998, 1011, 1015, 1016, 1017, 1024, 1038], "easlii": 239, "ec": [309, 530], "ecat": 370, "echo": [373, 379], "eckert": 1037, "eckhart": 494, "eclf": [155, 156, 414], "eclf1": 569, "eclf2": 569, "eclf3": 569, "ecml": 0, "ecoc": 286, "ecolog": [50, 302, 370, 498], "econom": [185, 186, 269], "econometr": 997, "econometrica": 997, "ecosystem": [375, 383, 991, 1019, 1025], "ecuador": [50, 302, 370, 498], "ed": [138, 148, 407, 414, 520, 559, 560, 1013, 1032, 1039], "eddi": [1035, 1049, 1050], "eden": 1047, "edern": [1047, 1048], "edg": [51, 63, 80, 99, 123, 143, 166, 234, 276, 383, 389, 404, 407, 409, 452, 561, 562, 585, 586, 588, 589, 591, 797, 841, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 869, 917, 1011, 1014, 1025, 1038, 1040, 1043, 1046], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 89, 93, 100, 118, 136, 142, 150, 152, 153, 155, 156, 161, 163, 171, 172, 174, 178, 187, 204, 213, 220, 223, 224, 225, 242, 243, 244, 246, 248, 254, 257, 269, 272, 284, 292, 295, 296, 297, 300, 304, 311, 312, 314, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 355, 356, 631], "edit": [77, 372, 373, 374, 375, 379, 383, 387, 393, 530, 534, 834, 995, 997, 1002, 1008], "editor": [375, 383, 387], "edm": 997, "edoardo": [1047, 1049, 1050], "edouard": [0, 397, 1032], "edson": [1001, 1037], "edu": [45, 47, 55, 168, 191, 286, 350, 369, 370, 372, 407, 448, 486, 500, 502, 508, 509, 510, 534, 641, 644, 649, 658, 666, 667, 676, 679, 682, 683, 839, 841, 843, 853, 860, 897, 899, 912, 913, 997, 999], "eduardo": [1035, 1037, 1045, 1046], "educ": [185, 186, 325, 375, 496, 716, 1002], "edvardlindelof": 1042, "edward": [175, 614, 619, 622, 1035, 1040, 1041, 1042, 1043, 1047, 1050], "edwinensa": 1038, "edwinwenink": 1045, "eec": [448, 641], "ef": 1047, "eff": 1017, "effect": [43, 45, 64, 72, 74, 75, 80, 86, 90, 95, 98, 101, 105, 116, 118, 123, 125, 134, 144, 146, 148, 151, 159, 167, 170, 171, 175, 177, 183, 184, 186, 187, 189, 197, 205, 207, 211, 212, 213, 215, 216, 217, 228, 230, 233, 235, 241, 248, 252, 255, 259, 261, 263, 265, 269, 270, 271, 274, 277, 278, 283, 289, 301, 307, 308, 310, 313, 319, 327, 339, 343, 344, 346, 347, 348, 350, 351, 352, 356, 358, 363, 375, 377, 380, 387, 389, 405, 407, 408, 412, 413, 414, 415, 417, 418, 436, 441, 442, 443, 445, 446, 448, 449, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 489, 496, 500, 514, 524, 525, 533, 534, 536, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 606, 609, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 691, 692, 701, 703, 753, 785, 797, 799, 801, 802, 805, 807, 809, 811, 818, 819, 822, 823, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 873, 874, 876, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 931, 948, 966, 974, 990, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1022, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "effective_learning_r": [861, 862], "effective_metric_": [846, 847, 848, 850, 852, 854, 855, 856, 1004], "effective_metric_params_": [846, 847, 848, 850, 852, 854, 855, 856], "effective_rank": [521, 524], "efficaci": 201, "effici": [37, 43, 44, 51, 53, 77, 80, 86, 88, 120, 135, 140, 144, 152, 191, 201, 205, 213, 219, 294, 326, 350, 362, 367, 369, 375, 377, 378, 379, 380, 381, 387, 389, 401, 404, 407, 412, 413, 414, 417, 419, 441, 442, 445, 446, 448, 449, 451, 453, 456, 458, 460, 461, 496, 533, 534, 535, 538, 540, 541, 544, 563, 566, 574, 581, 582, 588, 589, 591, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 634, 638, 640, 655, 658, 659, 664, 666, 667, 668, 673, 675, 676, 677, 678, 679, 685, 686, 688, 726, 756, 763, 779, 780, 797, 798, 800, 814, 833, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 869, 881, 893, 897, 904, 913, 915, 948, 990, 993, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "efficiencywarn": [2, 859, 1047], "effort": [320, 375, 381, 1020, 1025, 1043, 1045], "efron": [168, 372, 682, 683, 997], "eg": 984, "egashira": 1047, "egehan": 1050, "egg": 1040, "egger": 1050, "egin": 407, "egli": [1039, 1049], "egor": 1044, "ehrenheim": [1039, 1040], "eib": [835, 1002], "eickenberg": [1032, 1034, 1035, 1036, 1037], "eig": 1039, "eig_tol": 1033, "eig_val": 254, "eig_vec": 254, "eigen": [451, 549, 673, 691, 695, 995, 1038, 1041], "eigen_solv": [51, 79, 80, 99, 231, 232, 412, 451, 461, 535, 688, 689, 691, 693, 695, 998, 1033, 1042, 1045, 1046, 1047], "eigen_tol": [80, 451, 461, 691, 695, 1033, 1046, 1047], "eigendecompos": 412, "eigendecomposit": [461, 673, 691, 695, 870, 993], "eigenfac": [42, 54, 183, 247, 370, 412, 494, 541, 697, 713, 814, 830, 884, 909, 1018, 1022, 1032], "eigenface_titl": 45, "eigenmap": [231, 689, 691, 693, 695, 1026, 1027, 1033], "eigensolv": [412, 451, 461, 535, 544, 695, 998], "eigenvalu": [259, 325, 404, 407, 409, 451, 461, 468, 469, 470, 471, 472, 473, 474, 475, 535, 541, 549, 673, 688, 689, 691, 693, 695, 870, 993, 998, 1011, 1034, 1038, 1041, 1042, 1043, 1044], "eigenvalues_": [535, 1045], "eigenvector": [2, 42, 80, 116, 126, 183, 254, 407, 451, 461, 534, 535, 541, 550, 688, 689, 691, 695, 948, 998, 1022, 1032, 1036, 1046], "eigenvector_centr": 55, "eigenvectors_": [535, 1045], "eigh": [70, 254, 255, 256, 259, 260, 412, 419, 533, 535, 1047, 1050], "eighteenth": 407, "eighth": [563, 1007], "eigsh": [412, 535, 1038, 1039], "eiler": 1011, "einsum": 299, "eitan": 1049, "either": [43, 49, 64, 103, 140, 142, 143, 186, 199, 202, 239, 248, 263, 264, 273, 278, 283, 294, 346, 350, 357, 362, 363, 367, 370, 373, 375, 376, 377, 389, 398, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 441, 446, 451, 486, 496, 512, 524, 533, 534, 536, 544, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 582, 583, 584, 588, 589, 590, 591, 593, 594, 597, 602, 607, 608, 610, 611, 622, 627, 630, 632, 633, 650, 654, 656, 664, 676, 678, 682, 683, 690, 697, 698, 702, 706, 707, 712, 720, 724, 726, 727, 728, 729, 730, 735, 738, 739, 740, 752, 756, 769, 774, 778, 782, 783, 784, 785, 787, 788, 789, 794, 800, 803, 804, 806, 814, 823, 824, 825, 826, 827, 828, 829, 831, 834, 864, 894, 895, 901, 904, 905, 912, 913, 914, 915, 919, 957, 961, 989, 990, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1015, 1016, 1032, 1035, 1041, 1042, 1043, 1046, 1050], "ekaterina": [1038, 1039, 1040, 1041, 1043, 1048], "ekman": [1034, 1038], "el": [528, 1045, 1047, 1048], "elabonga": [1048, 1049], "elabor": 1002, "elad": [664, 685, 686], "elaps": [50, 81, 100, 140, 141, 362, 463, 466, 569, 570, 863, 864, 865, 866], "elapsed_tim": [46, 74, 100, 141, 154, 228], "elast": [2, 25, 183, 192, 197, 198, 201, 203, 206, 222, 245, 282, 470, 471, 477, 501, 524, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 682, 684, 990, 1001, 1015, 1022, 1023, 1027, 1032, 1037, 1041, 1042], "elastic_net": 222, "elastic_net_color": 222, "elastic_net_contour": 222, "elasticnet": [2, 46, 49, 195, 203, 277, 282, 362, 381, 387, 412, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 997, 1002, 1015, 1032, 1033, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1050], "elasticnetcv": [2, 197, 389, 398, 646, 652, 660, 661, 662, 663, 681, 997, 1032, 1035, 1043, 1045, 1046, 1049, 1050], "elasticnetifittedelasticnet": 195, "elbo": 412, "eldar": [409, 420, 474], "eleanor": 1047, "elec2": 149, "electr": [51, 149, 372, 407], "electron": [57, 168, 370, 372, 538, 540, 547, 627], "element": [2, 87, 120, 137, 138, 148, 240, 262, 268, 276, 278, 319, 351, 354, 357, 372, 374, 375, 377, 384, 390, 404, 407, 411, 412, 414, 415, 418, 443, 445, 451, 463, 486, 508, 512, 514, 520, 522, 526, 527, 531, 537, 538, 540, 550, 557, 558, 559, 560, 564, 565, 566, 567, 568, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 617, 632, 658, 659, 666, 667, 668, 676, 677, 678, 707, 717, 727, 734, 736, 746, 763, 769, 778, 782, 788, 789, 834, 844, 845, 846, 847, 848, 850, 852, 854, 855, 859, 861, 862, 867, 883, 884, 887, 891, 904, 909, 912, 913, 914, 915, 950, 951, 952, 971, 973, 974, 986, 995, 997, 1001, 1002, 1005, 1008, 1011, 1012, 1013, 1017, 1025, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1048], "elementari": [898, 1013], "elementwis": [412, 538, 540, 547], "elena": 1039, "eleni": 1045, "eleph": 582, "elev": [100, 126, 187, 231, 235, 490], "eleven": 1021, "elfner": 1046, "elia": 1038, "eliaschiavon": 1047, "eliasi": [1047, 1048, 1049], "elicit": 1001, "elif": [46, 47, 194, 213, 246, 256, 294, 880], "elimin": [2, 18, 159, 162, 165, 168, 183, 264, 267, 268, 272, 274, 283, 293, 407, 411, 447, 502, 515, 593, 594, 597, 602, 658, 803, 804, 819, 864, 874, 986, 1001, 1022, 1023, 1025, 1027, 1032], "elisabeth": [323, 1049], "elizabeth": [1039, 1041, 1044], "elkan": [64, 263, 319, 405, 436, 442, 446, 458, 676, 1038, 1042, 1043, 1045, 1046], "ell": [70, 254, 255, 256, 260, 404], "ell_": 997, "ell_0": [997, 1001], "ell_1": [412, 997], "ell_2": 997, "ella": 1013, "ellen": 1039, "elli": [1038, 1041], "elliot": [1049, 1050], "elliott": 1039, "ellips": [70, 238, 254, 255, 256, 259, 260, 1007], "ellipsoid": [48, 65, 69, 111, 112, 113, 183, 253, 254, 256, 257, 258, 259, 260, 549, 550, 631, 797, 798, 995, 1000, 1022], "ellipt": [90, 997], "ellipticenvelop": [2, 48, 238, 469, 472, 473, 474, 475, 563, 1007, 1032, 1035, 1039, 1040, 1045], "eln": 1043, "elong": 407, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 82, 88, 89, 95, 113, 124, 137, 142, 143, 146, 147, 178, 186, 187, 189, 201, 204, 226, 229, 232, 238, 242, 244, 245, 246, 247, 248, 264, 269, 270, 273, 280, 289, 294, 302, 304, 305, 311, 318, 343, 350, 351, 357, 375, 379, 381, 414, 415, 417, 419, 427, 436, 448, 508, 520, 533, 569, 618, 625, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 672, 673, 674, 676, 679, 681, 682, 683, 684, 703, 709, 788, 794, 796, 803, 804, 830, 868, 880, 883, 891, 904, 905, 919, 962, 964, 966, 987, 989, 1017], "elsewher": [389, 461, 462, 470, 471, 477], "eltermann": 1035, "elucid": 993, "elvezio": [649, 997], "elvi": [1037, 1038, 1039], "em": [255, 256, 260, 442, 446, 458, 536, 797, 798, 1000, 1046], "emad": 1050, "email": [0, 350, 375, 387, 390, 415, 839, 1003, 1025], "emami": 1046, "emanuel": 1033, "emb": [170, 232, 242, 298, 368, 369, 461, 695, 998], "embark": [103, 188, 252, 318, 322, 323], "embed": [2, 26, 37, 71, 74, 79, 80, 88, 89, 95, 139, 170, 183, 230, 233, 235, 237, 289, 298, 328, 329, 389, 407, 440, 451, 461, 488, 502, 544, 549, 566, 582, 639, 688, 689, 690, 691, 692, 693, 694, 695, 696, 853, 865, 874, 896, 897, 898, 993, 1004, 1007, 1013, 1018, 1020, 1022, 1026, 1027, 1032, 1033, 1043, 1044, 1046], "embedding_": [234, 389, 688, 689, 690, 691, 692], "emerg": [407, 1025], "emeritu": 390, "emiko": 1046, "emil": 1046, "emili": [1043, 1044], "emilyxinyi": 1050, "emipr": 797, "emir": [1047, 1048], "emit": [1043, 1050], "emlearn": 1020, "emma": 1049, "emmanouil": 1046, "emmanuel": [1032, 1039, 1040, 1041, 1049], "emoji": 395, "emp_cov": [109, 111, 113, 477, 480], "emp_cov_contour": 111, "emp_mah": 111, "emphas": [186, 348, 381, 412, 1001], "emphasi": [348, 406, 410, 906, 907, 908, 909, 910, 1008, 1020], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 97, 108, 110, 111, 113, 149, 183, 194, 229, 275, 309, 405, 411, 414, 417, 446, 448, 459, 468, 469, 470, 473, 476, 477, 532, 534, 539, 541, 543, 549, 551, 565, 590, 603, 639, 649, 667, 671, 678, 679, 716, 721, 723, 724, 829, 839, 840, 841, 843, 862, 885, 933, 974, 993, 995, 1001, 1003, 1005, 1011, 1013, 1015, 1022, 1026, 1027], "empirical_covari": [2, 109, 409, 477, 478, 480, 1048], "empiricalcovari": [2, 109, 111, 112, 409, 468, 472, 473, 474, 475, 1007], "emploi": [0, 51, 170, 244, 389, 409, 415, 449, 477, 582, 589, 1025, 1038], "employ": [186, 263], "empti": [94, 102, 129, 223, 331, 362, 370, 379, 407, 419, 427, 482, 533, 561, 562, 631, 716, 811, 869, 909, 911, 919, 925, 930, 931, 938, 959, 960, 991, 1016, 1034, 1036, 1040, 1041, 1043, 1044, 1046, 1047, 1048], "emptyset": 1001, "emul": [186, 383], "en": [55, 61, 383, 531, 537, 595, 636, 664, 668, 671, 685, 686, 695, 705, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 997, 1001, 1016, 1017], "enabl": [2, 16, 52, 66, 83, 104, 149, 187, 219, 233, 245, 311, 319, 321, 322, 324, 325, 326, 347, 373, 375, 380, 383, 387, 389, 393, 398, 403, 407, 408, 412, 414, 415, 448, 463, 467, 534, 535, 541, 559, 560, 561, 562, 563, 579, 580, 590, 591, 602, 610, 797, 798, 800, 803, 825, 826, 827, 828, 829, 831, 864, 865, 877, 878, 901, 902, 904, 905, 906, 907, 908, 909, 910, 919, 960, 967, 991, 993, 998, 1000, 1001, 1004, 1011, 1012, 1015, 1016, 1021, 1025, 1032, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "enable_cython_pairwise_dist": [467, 902], "enable_halving_search_cv": [2, 146, 280, 281, 320, 379, 803, 804, 990], "enable_hist_gradient_boost": [379, 1041], "enable_iterative_imput": [2, 181, 182, 379, 627, 991, 1041], "enable_metadata_rout": [245, 263, 325, 398, 436, 442, 443, 446, 448, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 593, 594, 597, 602, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 863, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1048], "enable_my_experimental_featur": 379, "enblom": 1050, "enc": [310, 312, 322, 324, 877, 878, 1011], "enc_auto": 885, "enc_high_smooth": 885, "enc_low_smooth": 885, "encapsul": [382, 408, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "enclos": 990, "encod": [2, 43, 47, 50, 88, 103, 120, 139, 149, 154, 183, 186, 187, 188, 210, 211, 248, 263, 278, 283, 308, 310, 311, 312, 320, 322, 323, 339, 350, 352, 367, 369, 371, 380, 387, 389, 408, 411, 412, 414, 415, 417, 463, 486, 496, 503, 526, 531, 537, 539, 540, 542, 544, 545, 546, 548, 551, 561, 562, 566, 567, 569, 581, 588, 589, 591, 630, 648, 658, 659, 669, 672, 680, 735, 802, 807, 809, 827, 830, 864, 865, 867, 869, 871, 872, 875, 877, 878, 885, 888, 902, 921, 990, 991, 997, 998, 1001, 1003, 1004, 1006, 1015, 1020, 1021, 1022, 1027, 1033, 1034, 1040, 1044, 1046, 1047, 1048, 1049, 1050], "encoded_missing_valu": [154, 188, 878, 1011, 1046, 1047], "encodings_": [324, 885, 1011], "encompass": [389, 449, 455, 555, 556, 998], "encount": [363, 373, 393, 401, 407, 414, 415, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 561, 562, 581, 839, 840, 841, 843, 877, 975, 1011, 1015, 1020, 1024, 1025, 1040, 1043], "encourag": [186, 200, 215, 304, 339, 374, 375, 387, 1016, 1020, 1050], "encrypt": 1020, "encyclopedia": 1001, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 373, 375, 377, 387, 389, 390, 393, 398, 404, 407, 408, 410, 414, 449, 455, 467, 487, 488, 508, 509, 537, 546, 557, 558, 559, 560, 564, 565, 566, 645, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 682, 683, 684, 800, 803, 804, 814, 821, 825, 862, 864, 902, 912, 913, 914, 915, 952, 954, 984, 990, 993, 997, 998, 1000, 1001, 1011, 1013, 1015, 1020, 1025, 1037, 1039, 1042, 1045, 1046], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 234], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1044, "endo": 1045, "endpoint": [53, 310, 342, 635], "enemi": 375, "energi": [51, 149, 383, 860, 1006], "enet": [197, 282], "enet_path": [2, 200, 389, 646, 647, 652, 660, 661, 662, 1034, 1036, 1045], "enet_tol": [470, 471, 477, 1037], "enforc": [43, 51, 70, 86, 120, 149, 175, 206, 298, 362, 375, 409, 412, 414, 424, 430, 508, 527, 531, 537, 539, 542, 543, 545, 546, 548, 557, 558, 561, 562, 564, 565, 868, 883, 912, 913, 914, 915, 930, 931, 991, 998, 1034, 1040, 1042, 1044, 1048], "enforce_estimator_tags_i": 1042, "eng": 1040, "engag": [381, 390], "engemann": [1034, 1035, 1039], "engin": [42, 75, 139, 143, 149, 175, 183, 187, 212, 362, 369, 372, 407, 413, 415, 463, 496, 562, 639, 673, 701, 821, 827, 862, 863, 865, 868, 869, 874, 877, 879, 883, 991, 993, 1001, 1011, 1022, 1038], "english": [54, 57, 102, 350, 351, 352, 380, 415, 588, 589, 591, 1020, 1021, 1045], "enh": 379, "enhanc": [120, 215, 374, 375, 379, 387, 389, 407, 1001, 1030, 1031, 1032, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "enjoi": [77, 263], "enough": [2, 43, 52, 64, 72, 79, 95, 140, 142, 149, 170, 181, 187, 188, 201, 211, 243, 246, 248, 263, 282, 313, 350, 352, 358, 373, 375, 379, 390, 405, 407, 409, 411, 414, 567, 568, 589, 800, 803, 804, 806, 814, 828, 948, 990, 995, 998, 1000, 1007, 1011, 1016, 1020, 1025, 1038, 1048, 1049], "enrich": 343, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 89, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 181, 182, 187, 188, 189, 211, 232, 238, 247, 248, 250, 251, 263, 266, 281, 286, 288, 311, 315, 318, 319, 320, 321, 322, 323, 324, 325, 350, 355, 356, 358, 362, 379, 380, 388, 389, 398, 401, 405, 407, 411, 416, 436, 504, 515, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 632, 633, 635, 658, 702, 803, 804, 822, 830, 834, 835, 865, 868, 877, 908, 912, 914, 915, 940, 990, 1001, 1002, 1007, 1008, 1017, 1020, 1021, 1022, 1023, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "ensemble_clf": 138, "ensemble_jaccard_scor": 288, "ensembleregressorsensembl": 395, "ensur": [0, 52, 58, 76, 90, 113, 118, 134, 140, 141, 149, 189, 211, 232, 263, 264, 272, 306, 357, 358, 362, 363, 375, 377, 379, 380, 381, 390, 393, 398, 403, 405, 407, 408, 411, 419, 468, 533, 534, 541, 611, 627, 696, 705, 782, 788, 789, 825, 897, 930, 931, 942, 943, 948, 955, 966, 997, 998, 1001, 1011, 1017, 1034, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "ensure_2d": [930, 931], "ensure_all_finit": [778, 928, 930, 931], "ensure_min_featur": [930, 931], "ensure_min_sampl": [930, 931], "ensure_non_neg": 931, "entail": [263, 388, 882, 884, 1015], "enter": [376, 379, 407, 441, 1008], "entertain": 997, "entic": 186, "entir": [68, 181, 211, 219, 263, 307, 309, 319, 343, 357, 358, 369, 376, 389, 401, 407, 411, 413, 415, 471, 492, 534, 588, 589, 590, 591, 647, 651, 653, 655, 658, 659, 661, 663, 665, 666, 668, 676, 682, 683, 734, 796, 822, 832, 833, 836, 861, 863, 864, 877, 889, 890, 892, 893, 894, 895, 923, 969, 991, 1001, 1011, 1015, 1017, 1041, 1042], "entireti": 389, "entiti": [390, 726, 756], "entitl": [283, 292, 406, 446, 611, 846, 993], "entri": [0, 103, 107, 149, 154, 182, 186, 187, 263, 265, 318, 351, 358, 379, 381, 383, 388, 389, 404, 405, 407, 412, 414, 417, 462, 463, 466, 471, 496, 531, 532, 537, 545, 546, 561, 562, 588, 591, 594, 611, 620, 632, 638, 640, 647, 651, 653, 655, 656, 659, 661, 663, 664, 665, 673, 675, 682, 683, 685, 686, 699, 704, 707, 709, 712, 715, 716, 718, 726, 729, 730, 731, 734, 735, 738, 743, 756, 758, 759, 783, 785, 788, 789, 792, 793, 813, 828, 844, 845, 852, 853, 854, 855, 856, 875, 881, 893, 986, 990, 991, 997, 1001, 1004, 1011, 1016, 1021, 1039, 1042, 1043, 1045, 1049], "entropi": [2, 50, 64, 250, 281, 302, 320, 328, 329, 358, 370, 403, 407, 414, 419, 498, 533, 557, 564, 607, 608, 658, 717, 736, 737, 741, 795, 912, 914, 997, 998, 1001, 1005, 1017, 1034, 1036, 1040, 1041, 1046, 1048, 1049], "entrypoint_to_bug_reproduc": 376, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 83, 88, 92, 93, 94, 95, 98, 102, 110, 112, 113, 116, 121, 123, 129, 137, 140, 144, 145, 147, 148, 149, 159, 172, 174, 179, 189, 194, 196, 203, 211, 232, 233, 236, 238, 243, 247, 248, 254, 255, 256, 257, 259, 260, 263, 264, 271, 272, 278, 279, 294, 298, 299, 301, 307, 311, 312, 328, 329, 331, 333, 337, 339, 345, 346, 350, 355, 370, 371, 559, 560, 564, 565, 781, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "env": [373, 383, 393, 394], "environ": [0, 3, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 362, 370, 372, 373, 375, 377, 378, 381, 387, 393, 394, 403, 408, 499, 1021, 1025, 1027, 1039, 1040, 1049], "environment": [50, 197, 229], "environmenterror": 1048, "eom": 445, "eoss": 0, "ep": [67, 79, 80, 82, 88, 98, 200, 234, 242, 387, 407, 418, 443, 449, 454, 470, 471, 477, 631, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 682, 683, 684, 690, 694, 714, 741, 856, 896, 897, 898, 1013, 1047, 1048], "epanechnikov": [294, 413, 844, 845, 849], "ephemer": 383, "ephrem": 1047, "epimorph": 1049, "epistem": 52, "epoch": [226, 389, 536, 666, 667, 668, 676, 677, 678, 861, 862, 1015, 1039, 1040, 1045], "epp": [407, 704], "eps_": [660, 662], "eps_rang": 242, "epsilon": [2, 88, 98, 196, 234, 244, 324, 345, 412, 445, 454, 643, 649, 667, 676, 678, 746, 861, 862, 905, 907, 910, 994, 997, 1001, 1005, 1015, 1016, 1032], "epsilon_": 842, "epsilon_i": 1001, "epsilon_insensit": [667, 676, 678, 905, 997, 1015], "epsilon_valu": 196, "eq": [263, 420, 474, 721, 723, 724], "equal": [43, 50, 51, 63, 70, 72, 74, 86, 93, 111, 116, 122, 134, 146, 173, 186, 212, 213, 222, 228, 249, 256, 259, 262, 267, 269, 278, 299, 311, 315, 339, 341, 347, 351, 370, 371, 375, 377, 389, 404, 405, 407, 411, 412, 414, 415, 420, 436, 439, 440, 441, 442, 444, 446, 448, 453, 458, 459, 462, 468, 473, 478, 479, 503, 512, 515, 519, 532, 533, 534, 539, 541, 543, 544, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 588, 593, 594, 597, 599, 600, 607, 608, 625, 628, 629, 632, 633, 634, 635, 637, 641, 642, 649, 658, 659, 671, 699, 718, 720, 729, 783, 787, 788, 794, 796, 800, 801, 803, 804, 813, 814, 818, 825, 832, 836, 837, 844, 845, 846, 847, 852, 853, 854, 855, 856, 861, 862, 867, 868, 869, 876, 879, 882, 883, 884, 885, 887, 894, 901, 904, 905, 911, 912, 913, 914, 915, 936, 948, 975, 981, 995, 997, 1001, 1002, 1004, 1005, 1007, 1011, 1015, 1016, 1017, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "equat": [2, 64, 346, 375, 407, 412, 414, 557, 558, 559, 560, 564, 565, 566, 590, 627, 658, 659, 682, 683, 687, 763, 884, 912, 913, 914, 915, 991, 998, 1001, 1006, 1040], "equi": 1000, "equiangular": 997, "equidist": [143, 692], "equip": 1025, "equiv": [993, 1016], "equival": [43, 54, 70, 88, 90, 143, 150, 167, 170, 175, 186, 197, 204, 229, 259, 278, 289, 314, 343, 352, 358, 362, 381, 384, 388, 389, 401, 407, 408, 409, 410, 411, 412, 414, 416, 417, 440, 442, 443, 444, 445, 446, 448, 449, 456, 463, 468, 473, 509, 534, 541, 558, 561, 562, 563, 564, 565, 588, 591, 613, 616, 619, 621, 624, 646, 647, 648, 652, 654, 658, 659, 666, 667, 668, 669, 672, 676, 677, 680, 683, 687, 688, 693, 708, 709, 723, 734, 742, 747, 748, 749, 761, 770, 779, 780, 797, 798, 803, 804, 808, 810, 835, 838, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 867, 873, 874, 876, 879, 880, 881, 882, 884, 892, 894, 895, 934, 946, 986, 990, 995, 997, 998, 999, 1001, 1007, 1011, 1015, 1016, 1017, 1040, 1041, 1042, 1043, 1045, 1046, 1049], "er": 570, "era": 1021, "eras": [559, 560, 646, 652, 658, 660, 662, 666, 667, 668, 676, 677, 678, 861, 862], "ereg": [157, 414], "eren": [0, 1034, 1035], "eric": [1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "ericellwang": [1045, 1046], "erich": [449, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1050], "erick": 1037, "erik": [370, 1025, 1035], "eriksson": 1039, "erin": [286, 1044], "erl": 286, "erlbaum": 263, "erling": 1037, "ermolaevpa": [1046, 1047], "ernst": [414, 557, 558, 565, 566, 914, 915], "err": [55, 115, 124, 134], "err_cov_emp_ful": 112, "err_cov_emp_pur": 112, "err_cov_mcd": 112, "err_loc_emp_ful": 112, "err_loc_emp_pur": 112, "err_loc_mcd": 112, "errno": 393, "erron": [111, 112, 412, 997, 1033, 1040, 1044], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 107, 109, 110, 112, 124, 129, 133, 137, 140, 141, 143, 145, 147, 149, 168, 170, 181, 183, 185, 186, 197, 201, 205, 207, 208, 211, 213, 216, 217, 218, 225, 229, 241, 244, 245, 251, 260, 261, 263, 265, 269, 270, 274, 278, 279, 284, 286, 295, 296, 322, 325, 338, 346, 350, 351, 363, 372, 373, 375, 377, 378, 379, 380, 384, 387, 389, 398, 401, 405, 407, 408, 409, 411, 412, 414, 415, 416, 436, 442, 443, 446, 448, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 515, 524, 531, 533, 534, 536, 537, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 581, 582, 588, 590, 591, 592, 595, 596, 598, 599, 600, 606, 610, 611, 629, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 688, 689, 690, 692, 693, 696, 698, 701, 702, 709, 711, 712, 720, 721, 723, 727, 740, 743, 744, 745, 746, 747, 748, 750, 751, 753, 764, 778, 782, 788, 789, 790, 791, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 822, 823, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 854, 855, 856, 859, 861, 862, 863, 864, 865, 867, 869, 870, 871, 876, 877, 878, 883, 884, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 929, 930, 931, 934, 963, 984, 987, 989, 990, 991, 992, 994, 995, 996, 998, 1002, 1005, 1009, 1011, 1015, 1016, 1017, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "error_": [531, 543], "error_i": [140, 270], "error_norm": [110, 112, 468, 469, 470, 471, 472, 473, 474, 475], "error_on_new": 629, "error_r": 138, "error_scor": [800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 990, 1036, 1040, 1044, 1047], "error_x": [140, 270], "errorbar": [72, 94, 105, 110, 112, 167, 176, 177, 291, 331, 342, 806, 823], "errorbar_": [806, 823], "errorbar_kw": [806, 823], "errorbarcontain": [806, 823], "errors_coef": 215, "errors_lines_": 701, "erwan": 1049, "erwin": 1035, "escal": 390, "escalant": 1001, "escalera": 1001, "escap": [1045, 1047], "eschibli": 1044, "eschlbeck": 1046, "esdi": 57, "esp": [407, 1032], "especi": [43, 47, 52, 88, 89, 143, 146, 149, 186, 204, 211, 245, 315, 323, 351, 358, 363, 369, 375, 383, 387, 389, 405, 407, 415, 442, 448, 501, 538, 557, 558, 559, 560, 564, 565, 566, 646, 647, 648, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 669, 680, 695, 705, 746, 839, 840, 841, 842, 843, 912, 913, 914, 915, 997, 1003, 1004, 1011, 1025, 1035, 1040, 1044, 1045, 1046], "espinoza": [1033, 1034], "essenc": [607, 608, 743, 998, 1001], "essenti": [0, 269, 323, 373, 377, 407, 411, 412, 509, 1001, 1004, 1021, 1025, 1040], "est": [154, 186, 204, 226, 245, 247, 263, 283, 311, 320, 358, 401, 414, 562, 735, 869, 953, 990, 1001, 1011, 1015, 1043, 1044], "est1": [389, 632], "est2": [389, 632], "est_freq": 229, "est_idx": 311, "est_sev": 229, "establish": [383, 387, 390, 991], "estefania": 1046, "ester": [407, 418, 443], "estev": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 82, 87, 88, 89, 90, 91, 94, 96, 103, 104, 105, 106, 115, 116, 120, 121, 122, 127, 129, 133, 134, 138, 139, 140, 141, 142, 144, 146, 148, 149, 151, 154, 155, 156, 157, 166, 167, 168, 169, 170, 171, 173, 175, 177, 179, 180, 181, 185, 186, 192, 195, 197, 199, 201, 202, 204, 207, 208, 211, 213, 215, 216, 218, 219, 228, 229, 237, 238, 239, 244, 250, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 266, 267, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 296, 300, 309, 311, 321, 322, 324, 326, 342, 343, 346, 351, 352, 354, 355, 356, 362, 363, 364, 367, 373, 375, 378, 379, 382, 383, 384, 385, 393, 398, 401, 402, 405, 406, 407, 410, 412, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 490, 492, 495, 496, 498, 501, 502, 524, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 576, 577, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 707, 708, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 816, 818, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 920, 921, 922, 923, 924, 929, 930, 931, 933, 935, 936, 937, 940, 942, 943, 944, 953, 956, 957, 958, 960, 984, 988, 989, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "estimate_bandwidth": [2, 79, 96, 407, 447, 460], "estimated_coef": [646, 647, 652, 660, 661, 662, 681, 682, 683], "estimator_": [214, 245, 283, 427, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 593, 594, 597, 671, 799, 822, 901, 984, 1047], "estimator__alpha": 146, "estimator__max_depth": [389, 990], "estimator_alpha": 142, "estimator_check": [2, 318, 377, 389, 942, 943, 1039, 1040, 1042, 1043, 1046, 1047, 1048, 1050], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 219, "estimator_errors_": [134, 553, 554], "estimator_html_repr": [2, 377, 408, 1043, 1044, 1045, 1046, 1049], "estimator_modul": 377, "estimator_nam": [49, 219, 377, 382, 437, 576, 698, 700, 702, 929], "estimator_samples_": 1043, "estimator_weights_": [134, 553, 554], "estimatorcv": [389, 1021], "estimators_": [141, 142, 204, 226, 246, 318, 389, 414, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 832, 833, 834, 835, 836, 837, 838, 1033, 1039, 1046], "estimators_early_stop": 144, "estimators_features_": [555, 556, 563], "estimators_samples_": [555, 556, 557, 558, 563, 564, 565, 566, 1038, 1040, 1043, 1049], "est\u00e8v": [0, 396, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "est\u00e8vc": 1050, "esuli": [1039, 1044], "esvhd": 1041, "et": [0, 2, 50, 109, 110, 134, 148, 199, 302, 370, 372, 404, 407, 409, 412, 414, 415, 416, 450, 498, 519, 520, 528, 535, 541, 544, 563, 682, 683, 719, 720, 839, 841, 861, 862, 897, 947, 948, 997, 998, 1001, 1007, 1011, 1013, 1016, 1017, 1040, 1048], "eta": [412, 536, 676, 677, 678, 1005, 1015, 1037], "eta0": [668, 676, 677, 678, 1015], "eta_0": 1015, "etc": [2, 143, 211, 229, 264, 273, 274, 326, 358, 362, 364, 375, 377, 380, 387, 388, 389, 398, 401, 404, 408, 411, 415, 488, 503, 527, 557, 558, 564, 565, 668, 676, 692, 718, 771, 800, 814, 835, 838, 868, 879, 912, 913, 914, 915, 916, 918, 930, 931, 942, 990, 991, 995, 1001, 1004, 1020, 1021, 1025, 1032, 1039, 1041, 1042], "eth": 1042, "ethan": [1035, 1038], "ethic": 149, "etiquett": 375, "etl": [1021, 1025], "euclidean": [2, 37, 75, 90, 91, 198, 242, 248, 289, 292, 297, 318, 323, 343, 351, 404, 407, 412, 413, 414, 415, 417, 439, 440, 443, 444, 445, 449, 451, 456, 459, 462, 531, 537, 545, 546, 589, 615, 619, 622, 623, 676, 678, 690, 692, 695, 696, 699, 762, 763, 769, 770, 771, 772, 778, 779, 780, 781, 792, 793, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 898, 991, 995, 999, 1002, 1004, 1013, 1021, 1036, 1039, 1040, 1041, 1042, 1048, 1049], "euclidean_dist": [2, 234, 242, 377, 403, 449, 453, 456, 688, 694, 762, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1032, 1037, 1040, 1041, 1049], "euclideandist": 699, "eugen": [372, 1033, 1038], "eunji": 1040, "eunseop": 1042, "euro": 326, "europ": [415, 1011], "european": [726, 756, 1001], "eustach": [1025, 1034, 1035], "eval_and_print_metr": 332, "eval_gradi": [178, 417, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "evalml": 1020, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 82, 88, 97, 103, 104, 123, 134, 140, 141, 143, 144, 146, 149, 163, 164, 173, 183, 189, 191, 194, 201, 213, 218, 229, 237, 261, 262, 266, 267, 268, 269, 272, 274, 275, 276, 278, 280, 281, 283, 284, 288, 296, 298, 302, 309, 314, 316, 320, 324, 325, 332, 339, 343, 350, 358, 368, 370, 377, 381, 389, 392, 408, 415, 416, 417, 446, 448, 463, 465, 487, 490, 492, 493, 496, 509, 520, 536, 551, 561, 562, 563, 567, 568, 591, 594, 602, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 633, 634, 647, 653, 659, 673, 675, 697, 699, 701, 702, 703, 704, 705, 711, 713, 714, 715, 717, 718, 726, 727, 736, 737, 742, 754, 755, 756, 757, 786, 795, 797, 798, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 835, 841, 844, 845, 850, 862, 864, 865, 871, 874, 877, 878, 882, 883, 884, 889, 890, 892, 893, 894, 895, 906, 909, 912, 933, 942, 974, 993, 997, 999, 1003, 1004, 1007, 1008, 1009, 1012, 1015, 1017, 1020, 1022, 1025, 1026, 1027, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "evaluate_everi": 536, "evaluate_model_and_stor": 315, "evaluation_std": 351, "evaluations_std": 351, "evelyn": 1050, "even": [37, 43, 52, 53, 64, 75, 77, 85, 107, 116, 123, 140, 146, 176, 186, 187, 188, 201, 211, 212, 219, 229, 235, 236, 244, 245, 255, 275, 286, 309, 311, 313, 314, 333, 346, 350, 351, 352, 358, 364, 370, 374, 375, 376, 377, 379, 380, 383, 387, 389, 401, 405, 407, 408, 409, 411, 412, 414, 415, 417, 440, 442, 444, 445, 446, 447, 448, 458, 460, 532, 535, 557, 558, 559, 560, 564, 565, 582, 589, 594, 627, 628, 630, 639, 658, 659, 695, 700, 705, 712, 743, 761, 767, 774, 778, 781, 786, 788, 827, 864, 865, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 912, 913, 914, 915, 948, 969, 990, 991, 993, 995, 997, 1000, 1001, 1004, 1006, 1007, 1009, 1011, 1013, 1015, 1016, 1017, 1025, 1039, 1040, 1041, 1044, 1046, 1049], "evenli": [2, 47, 74, 85, 146, 189, 215, 264, 415, 952], "event": [0, 43, 211, 229, 272, 405, 407, 588, 589, 636, 839, 935, 997, 1002, 1003, 1020, 1025, 1038], "eventu": [7, 257, 407, 416, 593, 1025], "ever": [140, 153, 384, 414, 1025], "everi": [43, 120, 149, 175, 181, 209, 212, 232, 244, 255, 260, 278, 321, 325, 358, 370, 375, 377, 379, 383, 389, 405, 407, 409, 411, 412, 415, 439, 453, 508, 531, 536, 539, 545, 557, 559, 560, 561, 562, 564, 590, 591, 603, 646, 647, 649, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 685, 686, 687, 692, 696, 754, 771, 779, 780, 813, 853, 912, 914, 916, 918, 936, 994, 996, 1001, 1002, 1003, 1011, 1017, 1025, 1032, 1036, 1038, 1041, 1045, 1049], "everingham": 1001, "everingham2010": 1001, "everybodi": [369, 375], "everyon": [375, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "everyth": [328, 358, 379, 381, 387, 401, 463, 955, 1020, 1021, 1032], "everywher": 389, "evgeni": 1043, "evid": [275, 350, 383, 407, 411, 412, 414, 644, 797, 1000], "evol": 1001, "evolut": [47, 49, 281, 362, 364], "evolv": [384, 1047], "ex": [102, 373, 376, 393, 1036, 1037], "exact": [44, 46, 113, 125, 140, 175, 215, 243, 263, 289, 325, 358, 362, 363, 369, 375, 377, 383, 384, 387, 388, 389, 407, 414, 416, 432, 481, 482, 483, 487, 496, 534, 535, 541, 561, 562, 638, 642, 646, 692, 800, 814, 825, 826, 827, 906, 909, 990, 993, 997, 998, 1007, 1011, 1015, 1016, 1039, 1040, 1042], "exactli": [103, 134, 185, 193, 197, 205, 211, 215, 260, 263, 277, 310, 346, 350, 375, 377, 383, 404, 407, 411, 412, 415, 420, 445, 452, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 515, 526, 590, 591, 615, 676, 678, 703, 705, 763, 801, 818, 825, 993, 997, 998, 999, 1001, 1002, 1017, 1032, 1038, 1039, 1045], "exagger": [74, 186, 692, 998], "examin": [164, 381, 383, 407, 853], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 392, 393, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 422, 423, 425, 426, 428, 429, 432, 433, 434, 435, 438, 455, 456, 458, 460, 462, 470, 477, 479, 480, 484, 485, 486, 493, 497, 503, 505, 506, 507, 508, 509, 516, 517, 518, 528, 529, 531, 545, 546, 547, 548, 555, 572, 573, 577, 583, 585, 586, 592, 595, 596, 598, 601, 603, 609, 612, 616, 620, 621, 624, 626, 629, 636, 637, 638, 642, 650, 651, 654, 660, 661, 663, 667, 675, 683, 685, 686, 687, 694, 695, 696, 699, 708, 710, 711, 714, 715, 716, 720, 721, 723, 724, 725, 726, 728, 730, 731, 733, 736, 739, 740, 743, 744, 747, 751, 754, 756, 758, 759, 760, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 783, 791, 794, 796, 807, 808, 809, 810, 811, 812, 813, 824, 836, 838, 840, 844, 845, 854, 855, 856, 858, 859, 866, 867, 870, 872, 875, 886, 887, 889, 891, 892, 894, 895, 896, 899, 903, 905, 906, 914, 915, 916, 917, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 938, 939, 940, 941, 942, 944, 946, 947, 948, 949, 950, 951, 954, 955, 962, 963, 964, 965, 969, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1027, 1029, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1045, 1047, 1048, 1049], "example_funct": 375, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1032, "example_gaussian_process_plot_gp_regress": 1032, "exampleclassifi": 245, "exampleclassifierexampleclassifi": 245, "exampleestim": 375, "exampleregressor": 245, "examples_pattern": 375, "exampletransform": 245, "exc": [286, 984], "exce": [115, 288, 319, 417, 441, 515, 602, 649, 658, 1041, 1044, 1046], "exceed": [803, 804, 1038], "excel": [152, 369, 375, 414, 690, 694, 997, 1025], "except": [2, 50, 79, 86, 123, 132, 140, 149, 219, 226, 238, 245, 277, 289, 302, 305, 306, 309, 311, 323, 368, 375, 377, 378, 380, 387, 389, 398, 401, 404, 408, 411, 412, 414, 415, 417, 430, 459, 464, 467, 481, 482, 483, 509, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 611, 627, 630, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 687, 711, 778, 807, 837, 838, 844, 845, 847, 850, 855, 861, 862, 868, 882, 884, 902, 905, 907, 910, 913, 915, 929, 952, 984, 986, 990, 997, 1001, 1016, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1049, 1050], "exception": 229, "excerpt": [45, 1013], "excess": [215, 445, 1011, 1039], "exchang": [401, 1024], "excit": 1039, "exclud": [47, 57, 185, 309, 375, 379, 389, 445, 463, 465, 729, 730, 738, 783, 784, 787, 813, 821, 879, 975, 1001, 1004, 1041, 1048], "exclus": [363, 387, 389, 412, 414, 627, 628, 630, 716, 802, 817, 820, 990, 997, 1001, 1002, 1025, 1039, 1043], "exec": 387, "execut": [64, 181, 197, 201, 244, 274, 363, 373, 375, 381, 401, 403, 407, 412, 418, 442, 460, 800, 806, 814, 823, 825, 826, 827, 828, 831, 849, 966, 967, 1011, 1014, 1022, 1034, 1037, 1040], "exemplar": [407, 439, 453], "exemplari": [155, 156], "exemplifi": 389, "exercis": [2, 105, 142, 152, 172, 174, 221, 224, 304, 305, 333, 344, 347, 348, 364, 372, 375, 501, 502, 504, 505, 652, 653, 658, 800, 805, 846, 909, 1022, 1035], "exhaust": [2, 168, 270, 318, 319, 320, 321, 322, 323, 324, 325, 326, 362, 372, 380, 388, 402, 407, 414, 800, 803, 804, 814, 894, 895, 897, 997, 1027], "exhibit": [171, 216, 343, 350, 392, 411, 412, 414, 417, 1009], "exist": [47, 48, 52, 55, 57, 86, 229, 269, 306, 309, 343, 369, 374, 377, 378, 381, 387, 389, 390, 393, 401, 407, 411, 412, 414, 415, 422, 427, 432, 436, 442, 443, 446, 448, 450, 452, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 491, 499, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 585, 588, 589, 590, 591, 597, 603, 610, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 698, 700, 702, 762, 765, 769, 799, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 877, 878, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 984, 993, 998, 1000, 1001, 1005, 1007, 1008, 1011, 1025, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "exist_ok": 47, "existing_credit": 263, "exit": [104, 289, 379, 383, 467], "exp": [2, 80, 87, 99, 129, 137, 146, 171, 197, 221, 294, 299, 302, 319, 320, 324, 343, 405, 407, 408, 413, 419, 451, 464, 521, 533, 536, 615, 616, 622, 641, 759, 766, 776, 861, 862, 880, 995, 997, 999, 1003, 1004, 1005, 1014, 1015, 1016], "exp10": 186, "exp_dirichlet_component_": 536, "exp_dist_embed": 299, "expand": [43, 82, 98, 240, 315, 319, 358, 367, 377, 414, 443, 449, 499, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1001, 1033, 1040, 1041, 1048], "expand_frame_repr": 229, "expans": [43, 181, 320, 449, 879, 1041], "expect": [43, 44, 49, 52, 61, 72, 79, 86, 116, 118, 125, 134, 137, 139, 141, 143, 146, 149, 165, 166, 170, 176, 183, 184, 188, 198, 203, 211, 212, 213, 215, 219, 229, 242, 245, 248, 249, 255, 256, 259, 260, 263, 276, 289, 314, 346, 350, 351, 358, 362, 363, 375, 377, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 398, 403, 405, 407, 408, 409, 411, 414, 415, 416, 430, 463, 464, 466, 467, 468, 481, 482, 483, 496, 523, 532, 536, 538, 541, 552, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 570, 572, 588, 589, 591, 595, 597, 606, 611, 627, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 675, 678, 679, 695, 704, 705, 716, 735, 788, 794, 799, 800, 814, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 854, 855, 856, 857, 862, 865, 870, 877, 878, 881, 884, 885, 894, 895, 902, 904, 905, 906, 907, 908, 909, 910, 913, 915, 925, 963, 990, 997, 1000, 1001, 1003, 1007, 1011, 1015, 1016, 1017, 1022, 1024, 1027, 1032, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "expected_anomaly_fract": 248, "expected_i": 146, "expected_n_anomali": 248, "expected_ri": 705, "expectedli": 350, "expens": [0, 89, 140, 154, 170, 185, 187, 239, 266, 278, 339, 343, 350, 351, 352, 364, 381, 389, 407, 408, 411, 414, 415, 448, 467, 508, 800, 803, 804, 814, 827, 902, 904, 998, 1000, 1011, 1016, 1025, 1036], "experi": [30, 134, 173, 177, 185, 186, 187, 188, 191, 213, 263, 286, 314, 346, 351, 352, 363, 369, 375, 378, 390, 411, 515, 728, 785, 997, 1002, 1013, 1019, 1020, 1025], "experienc": 375, "experiment": [2, 146, 181, 182, 211, 280, 281, 320, 321, 326, 377, 378, 385, 387, 389, 398, 411, 496, 549, 579, 580, 627, 696, 803, 804, 970, 990, 991, 997, 1000, 1001, 1020, 1021, 1027, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050], "expert_r": 408, "expertis": [374, 375, 387], "expit": [145, 202, 414, 561, 997, 1039], "explain": [2, 43, 44, 51, 64, 89, 105, 115, 116, 128, 146, 170, 175, 176, 187, 188, 211, 229, 238, 245, 260, 279, 315, 326, 350, 351, 363, 375, 387, 401, 403, 410, 412, 417, 493, 521, 524, 534, 541, 544, 549, 625, 648, 656, 669, 680, 721, 722, 723, 724, 728, 785, 997, 1004, 1017, 1019, 1043, 1045, 1046], "explained_vari": [351, 1001], "explained_variance_": [116, 534, 541, 544, 1039], "explained_variance_ratio": 1038, "explained_variance_ratio_": [105, 128, 326, 351, 412, 534, 541, 544, 549, 1035, 1038], "explained_variance_scor": [2, 1001, 1035, 1039, 1046], "explan": [64, 116, 245, 362, 374, 375, 405, 415, 990, 1000, 1002, 1017, 1020, 1025, 1035], "explic": 1013, "explicit": [43, 149, 183, 187, 191, 237, 245, 283, 343, 362, 363, 364, 374, 376, 387, 389, 390, 398, 408, 415, 421, 471, 499, 501, 502, 541, 551, 552, 631, 638, 639, 641, 676, 800, 801, 808, 848, 856, 864, 904, 909, 964, 993, 995, 997, 1001, 1011, 1017, 1020, 1022, 1032, 1036, 1041, 1042, 1045, 1049], "explicitli": [43, 80, 141, 170, 177, 181, 182, 212, 241, 245, 325, 343, 352, 358, 363, 369, 371, 375, 376, 377, 379, 387, 389, 398, 401, 403, 411, 415, 417, 535, 549, 550, 579, 580, 597, 627, 648, 658, 659, 669, 680, 709, 727, 782, 788, 789, 803, 804, 835, 838, 844, 845, 870, 894, 895, 989, 990, 991, 993, 995, 997, 998, 1001, 1003, 1004, 1011, 1025, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1050], "explod": 315, "exploit": [62, 288, 401, 1002, 1021, 1035], "exploit_incremental_learn": [806, 828], "explor": [52, 72, 137, 138, 149, 189, 235, 236, 248, 263, 270, 271, 277, 278, 286, 316, 320, 339, 351, 358, 369, 372, 374, 381, 407, 414, 471, 800, 803, 811, 885, 990, 997, 998, 1000, 1006, 1008, 1011, 1025, 1038], "exploratori": [186, 1025], "explos": [800, 814, 825, 826, 827], "expm1": 107, "expon": [417, 616, 676, 677, 678, 812, 861, 862, 879, 990], "exponenti": [2, 80, 107, 170, 175, 294, 299, 413, 414, 417, 448, 536, 554, 559, 614, 619, 622, 639, 643, 758, 759, 844, 845, 849, 861, 862, 879, 993, 997, 1001, 1016, 1039, 1045], "export": [2, 373, 376, 377, 393, 916, 917, 1017, 1020, 1041], "export_graphviz": [2, 1017, 1037, 1039, 1045, 1047, 1048, 1050], "export_text": [2, 1017, 1041, 1048], "expos": [2, 168, 245, 282, 286, 321, 323, 363, 368, 372, 377, 389, 398, 405, 408, 414, 416, 417, 436, 463, 553, 554, 561, 562, 567, 568, 569, 570, 593, 594, 602, 611, 799, 800, 803, 804, 814, 822, 833, 834, 835, 836, 837, 838, 919, 997, 1001, 1003, 1020, 1029, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "exposur": [211, 229, 997], "express": [43, 46, 51, 52, 134, 140, 170, 175, 186, 269, 270, 315, 320, 336, 343, 352, 369, 370, 375, 376, 381, 387, 401, 407, 412, 413, 414, 415, 449, 455, 456, 588, 589, 591, 716, 788, 800, 806, 814, 823, 825, 826, 827, 828, 831, 851, 993, 997, 1001, 1005, 1011, 1012, 1017, 1040], "expsinesquar": [2, 170, 175, 179, 417], "exstrac": 1001, "ext": 646, "extend": [31, 52, 88, 89, 100, 132, 212, 258, 263, 276, 339, 372, 373, 387, 389, 405, 407, 412, 414, 498, 631, 658, 720, 821, 833, 836, 837, 869, 871, 888, 904, 905, 908, 919, 993, 1001, 1002, 1016, 1021, 1023, 1027, 1037, 1038, 1039, 1040, 1042, 1047], "extens": [276, 278, 294, 362, 363, 369, 370, 373, 376, 378, 379, 383, 384, 387, 401, 407, 412, 496, 503, 534, 741, 942, 950, 998, 1000, 1001, 1019, 1020, 1025, 1032, 1038, 1045, 1046, 1048, 1049], "extent": [2, 48, 91, 172, 173, 174, 242, 347, 439, 535, 696, 797, 1001], "extercond": 143, "extern": [159, 170, 263, 364, 368, 372, 375, 377, 380, 387, 389, 404, 407, 415, 416, 417, 593, 610, 611, 717, 737, 795, 997, 1000, 1001, 1004, 1017, 1021, 1027, 1040, 1044], "exterqu": [143, 154], "extmath": [2, 257, 350, 384, 452, 945, 946, 947, 948, 949, 950, 1032, 1033, 1038, 1039, 1042, 1046, 1047, 1049], "extr": 47, "extra": [2, 80, 142, 149, 247, 289, 325, 352, 373, 374, 376, 389, 401, 414, 415, 437, 442, 446, 458, 463, 532, 557, 558, 566, 590, 591, 700, 701, 702, 825, 848, 914, 915, 938, 1000, 1001, 1004, 1032, 1035, 1037, 1038, 1040, 1045, 1047], "extra_cflag": 381, "extra_tre": [914, 915], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 83, 88, 101, 102, 103, 104, 115, 120, 140, 164, 168, 183, 226, 261, 268, 269, 274, 277, 307, 332, 342, 350, 352, 358, 367, 370, 372, 381, 384, 387, 407, 408, 411, 412, 449, 451, 454, 455, 461, 463, 487, 488, 493, 494, 503, 504, 531, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 546, 547, 583, 584, 588, 589, 591, 593, 594, 597, 599, 631, 718, 788, 800, 814, 841, 863, 864, 909, 921, 948, 957, 964, 990, 998, 1002, 1006, 1011, 1015, 1020, 1022, 1025, 1027, 1032, 1033, 1041, 1044], "extract_dbscan": 407, "extract_patches_2d": [2, 83, 123, 415, 587, 1040], "extract_scor": 272, "extractal": 47, "extractor": [211, 307, 364, 370, 389, 415, 503, 581, 582, 588, 589, 591, 990, 1032], "extran": 375, "extrapol": [43, 170, 193, 212, 241, 272, 883, 1001, 1011, 1017, 1045, 1047], "extratre": [142, 152, 362, 1035], "extratreeclassifi": [2, 557, 566, 915, 991, 1002, 1017, 1036, 1041, 1042, 1043, 1045, 1046, 1047, 1049], "extratreeregressor": [2, 558, 563, 566, 914, 991, 1002, 1007, 1017, 1041, 1042, 1043, 1045, 1046, 1047, 1049], "extratreesclassifi": [2, 142, 152, 414, 416, 558, 564, 566, 914, 915, 991, 1002, 1035, 1036, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "extratreesregressor": [2, 247, 414, 557, 565, 566, 914, 915, 991, 1002, 1035, 1038, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "extrem": [2, 146, 211, 213, 247, 248, 282, 309, 316, 331, 351, 375, 378, 406, 407, 412, 557, 558, 564, 565, 566, 632, 633, 679, 724, 752, 914, 915, 916, 918, 1001, 1003], "extrema": 995, "exxon": 51, "ey": [111, 112, 256, 260, 339, 370, 534, 541, 550], "eyast": 1046, "ezebunandu": 1044, "ezeiza": 764, "ezri": 1045, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 81, 82, 85, 86, 88, 91, 97, 100, 103, 107, 116, 123, 134, 137, 140, 141, 143, 144, 146, 149, 154, 155, 160, 162, 164, 167, 168, 170, 176, 177, 179, 183, 185, 186, 187, 188, 189, 191, 197, 198, 201, 203, 204, 208, 211, 212, 213, 215, 221, 225, 229, 232, 242, 244, 245, 248, 252, 259, 263, 267, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 289, 292, 304, 305, 306, 311, 314, 315, 318, 320, 322, 324, 325, 326, 328, 329, 338, 343, 346, 350, 351, 352, 358, 370, 375, 376, 377, 381, 383, 387, 401, 405, 408, 412, 414, 415, 416, 417, 486, 508, 509, 531, 532, 537, 538, 566, 581, 582, 583, 587, 592, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 617, 627, 632, 635, 658, 696, 713, 723, 726, 729, 730, 756, 783, 784, 787, 788, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 828, 829, 831, 861, 862, 866, 875, 878, 879, 883, 884, 885, 911, 919, 930, 931, 984, 993, 996, 1005, 1008, 1009, 1011, 1015, 1022, 1034, 1040, 1041, 1042, 1044, 1046], "f0_c0": 885, "f0_c1": 885, "f0_c2": 885, "f0e442": 254, "f1": [2, 45, 62, 68, 102, 165, 267, 307, 328, 329, 332, 411, 713, 729, 730, 738, 783, 822, 1001, 1002, 1036, 1048], "f1_c0": 885, "f1_c1": 885, "f1_c2": 885, "f1_macro": [411, 1001, 1036], "f1_micro": [1001, 1036], "f1_sampl": 1001, "f1_score": [2, 62, 276, 332, 370, 406, 738, 1001, 1032, 1034, 1035, 1036, 1037, 1041, 1042, 1048, 1049], "f1_weight": [1001, 1036], "f2": [379, 1002], "f2001": 1001, "f2006": 1001, "f3": 1002, "f4": 498, "f401": [100, 126, 187, 231, 233], "f781bf": [75, 79, 95, 96], "f7bd01": 75, "f_": [414, 635, 730, 1001], "f_0": 151, "f_1": [151, 1001], "f_beta": 1001, "f_classif": [2, 164, 165, 342, 416, 592, 595, 596, 598, 599, 600, 604, 606, 609], "f_i": 405, "f_idx": 151, "f_j": [405, 1009], "f_m": 414, "f_n": 276, "f_p": 276, "f_regress": [2, 87, 163, 416, 592, 595, 596, 598, 599, 600, 604, 605, 609, 1035, 1039, 1046, 1049], "f_score": 276, "f_statist": [605, 606], "f_test": 163, "fa": [2, 119, 129, 130, 183, 381, 412, 472, 475, 532, 541, 800, 826, 1022], "fa_estim": 120, "fa_scor": 127, "fab": [1025, 1042, 1043], "fabia": [404, 719], "fabian": [0, 397, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1049], "fabiana": 1043, "fabio": 1038, "fabisch": [0, 397, 1034, 1035, 1036, 1038], "fabrizio": 1047, "face": [2, 42, 44, 54, 71, 84, 86, 119, 123, 125, 127, 129, 130, 183, 191, 237, 242, 368, 375, 379, 407, 412, 414, 448, 471, 493, 494, 495, 521, 532, 533, 537, 539, 540, 541, 543, 558, 584, 657, 673, 697, 713, 814, 830, 847, 884, 909, 933, 1004, 1017, 1018, 1022, 1027, 1032, 1040], "face_id": 247, "facecolor": [51, 63, 70, 93, 120, 136, 161, 178, 231, 246, 269, 296, 311, 337, 340, 343, 344, 345], "faces_cent": 120, "facial": 370, "facil": [1000, 1020], "facilit": [362, 389, 401, 1020, 1021, 1038, 1041], "fact": [43, 50, 57, 62, 112, 116, 134, 144, 146, 188, 242, 252, 286, 288, 350, 369, 382, 387, 389, 403, 410, 412, 413, 414, 415, 649, 668, 670, 704, 995, 997, 1004, 1011, 1015, 1016, 1021, 1025, 1046], "facto": 1042, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 80, 86, 88, 95, 115, 119, 125, 129, 152, 183, 186, 225, 236, 238, 248, 263, 280, 281, 289, 290, 304, 305, 309, 311, 320, 322, 338, 362, 363, 371, 375, 381, 384, 389, 404, 407, 414, 415, 417, 439, 441, 453, 468, 470, 471, 472, 473, 475, 477, 487, 504, 514, 515, 527, 532, 535, 536, 538, 540, 541, 544, 545, 546, 547, 549, 550, 561, 562, 563, 588, 591, 597, 613, 649, 650, 651, 654, 655, 656, 682, 683, 692, 719, 783, 800, 803, 804, 826, 850, 884, 898, 900, 908, 947, 948, 990, 997, 998, 1004, 1011, 1014, 1018, 1022, 1026, 1027, 1032, 1033, 1035, 1036, 1038, 1046, 1048], "factoranalysi": [2, 120, 127, 130, 412, 544, 1033, 1035, 1044, 1046], "factori": [2, 94, 263, 269, 415, 923, 925, 970, 1001], "facundo": [1043, 1046], "fagan": 1041, "fail": [43, 87, 99, 121, 127, 178, 193, 197, 215, 245, 269, 318, 363, 373, 375, 378, 383, 390, 393, 410, 411, 439, 471, 473, 676, 677, 678, 711, 861, 862, 920, 922, 929, 942, 990, 998, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "failur": [183, 184, 186, 207, 375, 383, 393, 657, 785, 830, 930, 931, 1022, 1024, 1025, 1045, 1046, 1050], "fair": [51, 64, 414, 690, 694, 833, 1002, 1025], "fairer": 358, "fairli": [113, 145, 233, 305, 383, 407, 559, 560, 699, 1002], "faith": [57, 344], "fake": 415, "falak": 1041, "fall": [25, 30, 43, 52, 146, 149, 177, 268, 269, 375, 407, 415, 432, 445, 446, 508, 509, 727, 728, 794, 881, 893, 953, 1000, 1001, 1011, 1041], "fallback": [390, 393, 832, 833, 1001], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 80, 81, 87, 88, 97, 100, 102, 103, 104, 110, 112, 118, 124, 128, 129, 134, 140, 141, 143, 146, 147, 149, 157, 159, 170, 175, 176, 177, 178, 186, 187, 188, 189, 193, 194, 197, 198, 208, 211, 212, 216, 217, 219, 227, 229, 231, 234, 245, 246, 248, 252, 254, 263, 266, 267, 269, 272, 273, 276, 277, 278, 279, 280, 281, 282, 284, 289, 293, 299, 302, 305, 306, 309, 310, 315, 316, 318, 320, 321, 322, 323, 325, 326, 330, 339, 341, 343, 346, 347, 350, 351, 369, 375, 376, 377, 380, 389, 398, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 513, 515, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 708, 709, 711, 712, 713, 714, 715, 718, 719, 726, 727, 728, 729, 730, 731, 738, 743, 754, 756, 761, 763, 767, 769, 774, 778, 782, 783, 784, 785, 787, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 814, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 928, 929, 930, 931, 937, 942, 949, 961, 962, 963, 965, 966, 970, 971, 972, 974, 981, 986, 987, 989, 990, 991, 997, 1001, 1004, 1011, 1015, 1016, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "false_": 636, "false_discovery_r": 595, "famili": [2, 45, 263, 362, 364, 389, 407, 410, 412, 415, 416, 592, 595, 596, 598, 599, 600, 606, 861, 862, 880, 892, 997, 1011, 1015, 1036, 1046], "familiar": [375, 413, 1040], "famou": [370, 372, 414, 1016], "famous": 1003, "fan": [0, 363, 390, 396, 1016, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "fanci": 415, "fancybox": 345, "fanelli": [1047, 1048], "fang": [658, 1039, 1040], "fanni": 1042, "fantasi": 1006, "fantast": 1025, "faouzi": [1042, 1043], "faq": [0, 383, 411, 692, 998, 1011], "far": [62, 93, 113, 143, 171, 177, 186, 211, 229, 263, 339, 343, 350, 352, 375, 384, 417, 720, 884, 975, 1006, 1007, 1016, 1025], "farach": 993, "farahsae": 1040, "farawai": 1004, "fare": [103, 188, 252, 322, 323, 1036, 1037], "fargo": 51, "farhan": 1048, "farlei": [0, 397, 1032], "farouk": [1040, 1041], "farther": 725, "farthest": 407, "fashion": [2, 46, 139, 144, 219, 278, 363, 389, 404, 405, 407, 412, 414, 553, 557, 558, 559, 560, 564, 565, 566, 602, 627, 830, 853, 868, 871, 877, 888, 912, 913, 914, 915, 971, 991, 997, 1001, 1011, 1017, 1041], "fast": [2, 52, 64, 95, 191, 197, 201, 226, 227, 243, 244, 310, 352, 362, 370, 375, 384, 401, 407, 409, 411, 412, 414, 415, 419, 445, 446, 468, 473, 508, 532, 533, 535, 538, 540, 544, 547, 564, 565, 566, 588, 589, 591, 632, 633, 640, 658, 659, 672, 674, 687, 699, 800, 814, 825, 826, 836, 837, 844, 845, 849, 860, 948, 969, 993, 997, 1000, 1003, 1004, 1006, 1007, 1017, 1020, 1025, 1032, 1033, 1038, 1039, 1042, 1043], "fast_dict": 1042, "fast_dot": 1039, "fast_logdet": [2, 384], "fast_svd": 1032, "faster": [37, 46, 57, 74, 97, 105, 120, 139, 140, 143, 144, 146, 149, 168, 187, 191, 198, 211, 213, 226, 227, 229, 244, 248, 263, 289, 291, 306, 319, 321, 322, 326, 350, 351, 352, 362, 369, 375, 383, 384, 389, 401, 407, 412, 416, 417, 419, 442, 446, 448, 450, 451, 452, 461, 508, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 559, 560, 561, 562, 563, 643, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 672, 674, 684, 687, 691, 695, 726, 756, 778, 779, 780, 844, 845, 846, 849, 854, 861, 862, 879, 881, 883, 893, 897, 948, 969, 990, 994, 997, 1002, 1004, 1005, 1008, 1013, 1015, 1016, 1017, 1020, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "fastest": [90, 267, 352, 446, 670, 672, 674, 687, 947, 948, 1000], "fastest_top_recall_high_precision_index": 267, "fastica": [2, 119, 183, 210, 412, 532, 535, 541, 1022, 1032, 1034, 1040, 1046, 1047, 1050], "fastkmean": 448, "fastmcd": [409, 468, 473], "fastnc": 860, "fat": [521, 524], "fatima": [1046, 1049], "fato": 1045, "fauchereau": 1045, "fault": [383, 1040, 1042, 1044], "faulti": [214, 1032], "faust": 1050, "favor": [44, 113, 140, 254, 260, 387, 409, 414, 673, 675, 730, 808, 810, 863, 990, 1009, 1034, 1036, 1038, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "favorit": [375, 387, 1025], "favour": [792, 998, 1000, 1041], "fawcett": [788, 789, 1001], "fazlul": 1034, "fbeta_scor": [2, 729, 742, 783, 1001, 1034, 1035, 1036, 1037, 1042, 1048], "fc": [48, 294, 370], "fc2009": 1001, "fcd116": 118, "fcharra": 1047, "fcluster": 189, "fcostin": 1032, "fd": 47, "fdr": 592, "feasibl": [375, 873, 874, 884], "feast": 408, "feat": [47, 49, 379, 415], "feat0": [240, 319], "feat1": [240, 319, 415], "feat2": [240, 319, 415], "feat3": [240, 319, 415], "feat_idx": 627, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 83, 91, 93, 96, 101, 102, 103, 104, 105, 111, 112, 116, 118, 120, 122, 124, 127, 128, 130, 133, 135, 138, 140, 142, 146, 148, 153, 154, 155, 157, 159, 160, 163, 165, 170, 171, 172, 175, 176, 178, 181, 182, 184, 185, 186, 187, 192, 194, 196, 197, 198, 201, 202, 204, 208, 210, 211, 212, 213, 215, 216, 219, 220, 226, 227, 228, 232, 237, 240, 242, 247, 248, 251, 252, 261, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 288, 292, 293, 294, 297, 298, 300, 303, 304, 306, 308, 309, 312, 316, 317, 319, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 339, 343, 346, 349, 352, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 373, 377, 378, 380, 382, 383, 384, 387, 388, 389, 390, 392, 393, 395, 401, 405, 407, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 423, 428, 430, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 579, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 618, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 697, 701, 702, 703, 713, 721, 722, 723, 724, 741, 742, 745, 746, 748, 758, 759, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 781, 785, 788, 790, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 930, 931, 945, 965, 975, 976, 977, 981, 989, 990, 993, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "feature_0": 917, "feature_1": [631, 917], "feature_2": 631, "feature_all_": 841, "feature_count_": [839, 841, 843], "feature_extract": [2, 47, 54, 57, 80, 81, 83, 84, 87, 99, 102, 123, 183, 270, 332, 349, 350, 351, 352, 364, 370, 407, 408, 415, 463, 544, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 877, 999, 1032, 1033, 1034, 1035, 1038, 1039], "feature_import": 147, "feature_importances_": [141, 147, 168, 188, 189, 389, 414, 416, 553, 554, 557, 558, 559, 560, 564, 565, 566, 593, 594, 597, 912, 913, 914, 915, 1034, 1037, 1041], "feature_index": 415, "feature_indices_": 1040, "feature_log_prob_": [839, 840, 841, 843], "feature_map": [243, 309], "feature_map__n_compon": 243, "feature_map_fouri": 243, "feature_map_nystroem": [243, 639], "feature_nam": [54, 57, 126, 130, 141, 147, 151, 168, 186, 188, 220, 249, 283, 292, 309, 318, 319, 320, 325, 336, 350, 355, 368, 370, 380, 408, 463, 489, 490, 492, 496, 500, 501, 502, 504, 505, 510, 582, 631, 632, 633, 885, 916, 917, 918, 1009, 1017, 1048], "feature_name_combin": [877, 1048], "feature_names_": 581, "feature_names_in": 1046, "feature_names_in_": [252, 316, 321, 389, 428, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 989, 1045, 1046, 1047, 1048, 1050], "feature_names_out": [423, 428, 441, 442, 444, 446, 448, 463, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1046, 1049], "feature_rang": [307, 874, 890, 1011, 1034, 1044], "feature_select": [2, 87, 103, 104, 106, 162, 163, 164, 165, 166, 167, 168, 183, 252, 320, 322, 342, 358, 389, 398, 408, 416, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 990, 1022, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "feature_selector": 168, "feature_to_plot": 206, "feature_union": 1048, "featureagglomer": [2, 84, 87, 439, 440, 1018, 1035, 1041, 1042, 1045, 1046, 1048, 1049, 1050], "featureforg": 1025, "featurehash": [2, 47, 57, 102, 183, 349, 350, 351, 364, 370, 415, 487, 581, 588, 589, 590, 591, 877, 1022, 1033, 1038, 1039, 1040, 1046, 1047], "featureheash": 352, "features_": [629, 991], "features__pca__n_compon": 106, "features__univ_select__k": 106, "features_idx": 309, "features_info": 187, "features_nam": [185, 1039], "features_samples_ratio": 69, "featureselector": 601, "featuresshould": 395, "featuretool": 1020, "featureunion": [2, 7, 43, 106, 367, 389, 398, 463, 629, 866, 991, 1021, 1025, 1027, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050], "featurewis": [2, 880], "feb": [73, 439, 453], "februari": [0, 409, 472, 1001, 1033, 1037, 1049], "fed": [47, 154, 358, 370, 415, 990, 1006, 1011, 1043], "feda": [1040, 1041], "feder": 1020, "federico": [1034, 1035, 1040, 1041, 1046], "federicopisanu": 1042, "feed": [47, 116, 212, 245, 352, 370, 373, 380, 387, 407, 415, 742, 877, 1002], "feedback": [266, 374, 375, 376, 390, 1020, 1024, 1040], "feedforward": [861, 862], "feedstock": 379, "feel": [64, 182, 309, 374, 375, 383, 407, 445, 1017], "feel_temp": [43, 187], "feghali": 1049, "fei": [563, 1007], "feld": [1036, 1048], "feldbauer": [1040, 1041, 1042, 1043, 1046], "feldman": [1034, 1039, 1040, 1041, 1042], "felip": [1045, 1046, 1047, 1048], "felix": [1034, 1039, 1040, 1042, 1044, 1045, 1046], "femal": [103, 186, 323, 380, 877, 878, 1011], "fenc": 380, "feng": [1042, 1044, 1045, 1046], "fenil": 1045, "fenx": 1040, "ferdman": 1049, "ferenc": 1025, "fernand": [1040, 1046, 1047], "fernandez": 1041, "fernando": [1037, 1044], "fern\u00e1ndez": 1046, "ferrando": 1042, "ferrari": 1040, "ferreira": [1040, 1045, 1046], "ferri": [416, 1001], "ferria": 1039, "ferrin": 1046, "ferriss": 1039, "ferr\u00e9": 1046, "ferr\u00edn": 1043, "fetal": 248, "fetch": [2, 51, 55, 154, 186, 229, 263, 283, 368, 369, 370, 375, 379, 380, 383, 412, 491, 496, 555, 556, 557, 558, 563, 564, 565, 566, 588, 589, 591, 1040, 1048], "fetch_": 1039, "fetch_20newsgroup": [2, 54, 57, 102, 270, 332, 350, 351, 352, 370, 488, 1037, 1042, 1050], "fetch_20newsgroups_vector": [2, 46, 226, 242, 370, 1032, 1042, 1044, 1049, 1050], "fetch_california_h": [2, 140, 144, 181, 182, 309, 320, 370, 388, 408, 1041, 1043, 1050], "fetch_covtyp": [2, 191, 248, 320, 370, 1041, 1044, 1046, 1050], "fetch_fil": [2, 52], "fetch_kddcup99": [2, 248, 370, 1039, 1040, 1041, 1044, 1045, 1050], "fetch_lfw_pair": [2, 370, 1037, 1047, 1050], "fetch_lfw_peopl": [2, 45, 370, 1047, 1050], "fetch_mldata": 1040, "fetch_olivetti_fac": [2, 83, 120, 247, 370, 1040, 1041, 1042, 1050], "fetch_openml": [2, 43, 44, 52, 103, 107, 143, 149, 154, 175, 186, 187, 188, 211, 219, 227, 229, 239, 248, 252, 263, 283, 286, 288, 289, 306, 315, 318, 322, 325, 369, 379, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "fetch_rcv1": [2, 370, 1037, 1041, 1050], "fetch_species_distribut": [2, 50, 302, 1041, 1050], "fetcher": [368, 1037, 1039, 1048], "feth": 1032, "feurer": [1035, 1040], "fevott": [412, 538, 540, 547], "few": [0, 46, 54, 57, 74, 80, 85, 124, 143, 149, 173, 176, 177, 201, 209, 211, 213, 229, 244, 245, 254, 271, 272, 276, 301, 306, 309, 313, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 346, 352, 362, 370, 371, 372, 375, 377, 388, 390, 398, 401, 404, 405, 407, 411, 412, 414, 416, 417, 436, 448, 561, 562, 655, 692, 695, 897, 948, 997, 998, 1000, 1001, 1004, 1005, 1014, 1016, 1017, 1025, 1038, 1048, 1050], "fewer": [43, 53, 63, 88, 134, 142, 144, 211, 362, 376, 407, 416, 417, 447, 460, 541, 594, 696, 834, 952, 997, 1002, 1004, 1037, 1038, 1039], "fewest": [268, 627], "ff": 383, "ff0000": [67, 297, 304], "ff3333": 118, "ff7216": 118, "ff7f00": [79, 95, 238], "ff9c34": [92, 97], "ffaaaa": 297, "ffc107": 313, "fft": 640, "fhaselbeck": 1044, "fhoang7": 1041, "fhr": 248, "fi": 875, "fibins": [1040, 1041], "fidel": 53, "fidor": 1048, "fiedler": 1038, "fiegel": [1044, 1045, 1047], "field": [168, 229, 372, 404, 407, 408, 415, 463, 498, 501, 617, 997, 999, 1008, 1016, 1024, 1033], "fifth": [244, 994], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 86, 88, 90, 93, 97, 99, 105, 109, 111, 116, 120, 125, 126, 130, 134, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 156, 173, 179, 181, 187, 189, 191, 194, 199, 203, 204, 206, 207, 208, 209, 211, 212, 215, 219, 224, 226, 229, 231, 232, 233, 234, 235, 236, 239, 241, 248, 249, 259, 263, 264, 265, 266, 269, 270, 271, 272, 275, 278, 279, 280, 282, 283, 288, 289, 291, 293, 294, 302, 305, 306, 309, 310, 311, 313, 314, 315, 318, 322, 323, 336, 343, 345, 346, 347, 348, 350, 351, 352, 354, 371, 382], "fig1": 100, "fig2": 100, "figaspect": 313, "fight": [74, 215, 1025], "fighter": 102, "fignum": 344, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 105, 107, 111, 113, 115, 116, 118, 120, 123, 124, 125, 126, 129, 130, 134, 136, 137, 143, 144, 145, 146, 147, 149, 152, 154, 155, 163, 172, 174, 178, 179, 181, 182, 186, 187, 189, 191, 193, 194, 197, 202, 204, 206, 208, 209, 210, 211, 212, 213, 215, 217, 219, 222, 225, 227, 229, 231, 232, 233, 235, 236, 238, 239, 241, 243, 246, 247, 248, 249, 254, 256, 257, 260, 263, 264, 265, 266, 271, 272, 273, 276, 278, 279, 282, 283, 284, 288, 289, 291, 292, 304, 305, 307, 309, 310, 311, 312, 313, 314, 315, 322, 323, 328, 330, 337, 339, 343, 344, 345, 346, 347, 348, 350, 351, 352, 371, 918], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98, 100, 109, 113, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 145, 146, 147, 148, 149, 152, 153, 157, 159, 161, 163, 164, 167, 171, 172, 173, 174, 177, 178, 182, 186, 187, 188, 189, 193, 197, 200, 202, 205, 206, 210, 212, 213, 217, 222, 226, 227, 228, 233, 234, 235, 238, 242, 243, 244, 246, 247, 249, 254, 256, 257, 260, 262, 268, 273, 274, 284, 294, 298, 299, 302, 304, 307, 309, 311, 312, 316, 318, 320, 328, 329, 330, 337, 339, 344, 355, 356, 375, 407, 413, 414, 415, 417, 437, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 990, 994, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1015, 1016, 1017, 1045], "figure_": [68, 187, 249, 318, 320, 382, 437, 631, 632, 697, 698, 700, 701, 702, 806, 823], "figure_titl": 143, "filali": 1040, "file": [2, 47, 51, 52, 68, 350, 351, 362, 363, 364, 369, 370, 372, 373, 378, 379, 380, 381, 387, 401, 408, 412, 486, 491, 493, 494, 496, 503, 508, 509, 534, 579, 580, 588, 589, 591, 916, 1004, 1017, 1022, 1024, 1032, 1033, 1035, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "file_1": 503, "file_2": 503, "file_42": 503, "file_43": 503, "file_44": 503, "file_id": 369, "file_path": 491, "filenam": [2, 47, 55, 126, 332, 370, 375, 381, 401, 487, 491, 500, 503, 504, 507, 588, 589, 591, 1032, 1037, 1040, 1041], "filesystem": [383, 393, 1045], "filho": 405, "filip": [1049, 1050], "filipj8": [1039, 1040], "fill": [70, 142, 159, 188, 264, 294, 355, 389, 408, 412, 515, 527, 538, 540, 547, 587, 630, 916, 918, 991, 1004, 1017], "fill_between": [52, 146, 149, 159, 170, 175, 177, 179, 193, 194, 229, 269, 271, 272, 273, 279, 806, 823], "fill_between_": [806, 823], "fill_between_kw": [806, 823], "fill_betweenx": 93, "fill_diagon": [189, 234], "fill_legend": 229, "fill_valu": [182, 240, 250, 319, 421, 424, 430, 431, 627, 630, 1011, 1040, 1048, 1049], "fillna": [229, 248], "filo": [1032, 1035], "filter": [2, 18, 47, 54, 80, 81, 105, 217, 229, 267, 269, 291, 350, 363, 370, 381, 384, 407, 415, 447, 487, 488, 503, 588, 591, 595, 596, 597, 598, 599, 600, 774, 839, 940, 965, 1003, 1004, 1042], "filter_param": 774, "filtered_cv_result": 267, "filterwarn": [79, 95, 226, 305, 306, 375, 1011], "final": [2, 43, 52, 63, 64, 70, 75, 77, 88, 102, 103, 111, 113, 116, 125, 134, 135, 137, 139, 143, 144, 147, 154, 157, 165, 175, 182, 185, 187, 189, 191, 193, 197, 199, 201, 208, 211, 213, 228, 229, 232, 238, 252, 258, 263, 267, 275, 286, 289, 315, 316, 318, 319, 339, 343, 362, 364, 370, 373, 375, 376, 377, 379, 388, 389, 404, 405, 407, 408, 411, 414, 415, 416, 436, 441, 446, 447, 451, 458, 461, 463, 536, 555, 556, 567, 568, 570, 594, 627, 647, 653, 659, 679, 690, 694, 719, 800, 832, 833, 864, 865, 901, 904, 990, 991, 993, 997, 998, 1001, 1004, 1007, 1008, 1011, 1014, 1025, 1037, 1040, 1041, 1042, 1043, 1045], "final_estim": [154, 318, 414, 567, 568], "final_estimator_": [567, 568], "final_estimatorridgecv": 154, "final_lay": 414, "final_layer_gbr": 414, "final_layer_rfr": 414, "final_step": 77, "financ": [263, 1002], "financi": [0, 51, 407, 414, 997], "find": [2, 43, 44, 45, 51, 55, 64, 75, 80, 81, 82, 85, 86, 88, 90, 98, 105, 111, 112, 120, 122, 124, 125, 130, 144, 154, 170, 174, 176, 178, 187, 197, 199, 201, 213, 219, 231, 233, 235, 236, 241, 248, 259, 263, 268, 269, 270, 280, 282, 292, 297, 298, 299, 314, 318, 324, 326, 341, 342, 343, 346, 350, 351, 354, 363, 372, 373, 375, 376, 377, 380, 381, 384, 387, 388, 389, 390, 395, 404, 406, 407, 409, 410, 412, 414, 415, 416, 418, 440, 443, 444, 445, 449, 450, 451, 452, 461, 531, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 558, 565, 582, 589, 610, 611, 647, 650, 653, 654, 655, 656, 658, 659, 671, 676, 688, 707, 729, 730, 738, 782, 783, 784, 787, 788, 794, 799, 800, 814, 822, 846, 847, 848, 850, 852, 854, 855, 856, 877, 878, 883, 896, 897, 898, 912, 913, 915, 927, 947, 948, 950, 990, 991, 993, 996, 997, 998, 1000, 1001, 1002, 1005, 1007, 1011, 1015, 1016, 1017, 1019, 1021, 1024, 1025, 1032, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1050], "findal": 352, "fine": [43, 72, 142, 168, 204, 215, 227, 260, 267, 343, 356, 372, 379, 389, 415, 445, 948, 1004, 1007, 1016, 1021, 1042], "finer": [43, 52, 72, 291, 339, 363, 407, 411, 990, 1004, 1042], "finfo": [234, 470, 471, 477, 606, 650, 651, 654, 655, 656, 682, 683, 1047], "finish": [168, 257, 998], "finit": [64, 254, 260, 362, 370, 389, 467, 538, 551, 582, 606, 609, 610, 611, 658, 728, 778, 785, 797, 825, 902, 928, 929, 930, 931, 997, 1000, 1001, 1025, 1039, 1040, 1044, 1046, 1047], "finn": [1040, 1041], "firefox": 1011, "fireplac": 143, "fireplacequ": 143, "firm": [51, 407], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 88, 89, 91, 94, 97, 98, 99, 100, 102, 103, 104, 107, 111, 115, 116, 125, 126, 128, 134, 135, 139, 141, 142, 143, 144, 145, 147, 149, 151, 154, 155, 156, 157, 164, 165, 168, 170, 171, 172, 175, 176, 177, 178, 182, 185, 186, 187, 189, 191, 193, 195, 201, 209, 212, 213, 219, 220, 225, 232, 235, 242, 243, 245, 246, 247, 249, 251, 252, 256, 260, 263, 264, 269, 271, 272, 276, 278, 280, 281, 282, 286, 288, 289, 291, 294, 298, 299, 300, 304, 306, 309, 311, 314, 315, 316, 319, 320, 329, 332, 335, 336, 339, 341, 350, 351, 352, 354, 355, 357, 358, 363, 364, 369, 370, 372, 373, 374, 375, 377, 379, 380, 381, 383, 387, 389, 401, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 419, 442, 445, 446, 449, 458, 459, 463, 471, 482, 486, 487, 489, 490, 492, 494, 497, 500, 502, 504, 508, 509, 510, 528, 533, 534, 538, 541, 553, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 582, 584, 588, 589, 590, 591, 593, 594, 601, 610, 611, 617, 621, 624, 631, 632, 633, 634, 646, 652, 659, 666, 668, 674, 676, 688, 695, 698, 699, 700, 702, 712, 716, 736, 742, 763, 764, 782, 794, 797, 798, 803, 804, 805, 806, 807, 812, 814, 821, 823, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 869, 877, 881, 882, 883, 885, 886, 893, 894, 906, 909, 912, 913, 914, 915, 917, 919, 925, 926, 930, 931, 932, 950, 952, 967, 971, 974, 986, 989, 990, 991, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1011, 1012, 1015, 1016, 1017, 1025, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "first_img_data": 507, "first_pca_compon": 314, "first_quart": 129, "first_week": 149, "firstli": [123, 362, 387, 657], "fisach": 1038, "fiscal": 0, "fischer": [1037, 1038], "fischler": 997, "fischoff": 1044, "fish": 321, "fisher": [372, 414, 504, 636], "fisher1958": 414, "fisher_transform": 636, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 120, 122, 123, 124, 125, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 183, 185, 186, 187, 188, 189, 191, 192, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 234, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 286, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 350, 351, 354, 355, 357, 362, 364, 367, 370, 372, 375, 378, 380, 381, 384, 387, 389, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 509, 510, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 577, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 694, 697, 698, 700, 701, 702, 710, 711, 723, 732, 735, 750, 788, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 924, 940, 957, 960, 984, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1025, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "fit_": 1045, "fit_algorithm": [120, 531, 537, 1047, 1048], "fit_and_evalu": 351, "fit_and_plot_model": 314, "fit_and_scor": 219, "fit_data": 59, "fit_dur": 289, "fit_ecoc": 1036, "fit_grid_point": 1043, "fit_intercept": [46, 193, 194, 198, 208, 216, 225, 238, 277, 316, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 904, 905, 911, 997, 1015, 1036, 1040, 1041, 1042, 1044, 1045, 1046], "fit_inverse_transform": [44, 125, 535, 1041], "fit_ovo": 1036, "fit_ovr": 1036, "fit_param": [245, 389, 431, 436, 441, 444, 464, 532, 534, 537, 539, 542, 543, 549, 555, 556, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 630, 635, 638, 639, 640, 641, 642, 665, 671, 806, 823, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 848, 853, 856, 860, 863, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897, 960, 1039, 1042, 1043, 1044, 1046, 1048, 1049, 1050], "fit_path": [650, 654, 655, 656, 682, 683], "fit_predict": [57, 89, 90, 93, 238, 248, 296, 377, 389, 407, 425, 429, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 468, 563, 677, 792, 793, 797, 798, 850, 856, 864, 908, 924, 1007, 1037, 1040, 1041, 1045, 1047, 1049], "fit_prior": [370, 839, 840, 841, 843], "fit_status_": [906, 907, 908, 909, 910], "fit_tim": [52, 91, 143, 201, 219, 271, 411, 827, 828], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 271, "fit_times_svm": 271, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 82, 85, 86, 91, 95, 121, 124, 126, 130, 152, 191, 203, 227, 229, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 252, 289, 293, 305, 309, 310, 314, 315, 316, 318, 321, 323, 324, 325, 326, 339, 350, 351, 352, 358, 367, 370, 377, 380, 381, 389, 403, 408, 412, 415, 416, 423, 431, 441, 442, 444, 446, 448, 463, 465, 467, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 696, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 924, 937, 991, 993, 997, 1002, 1004, 1011, 1012, 1013, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1050], "fitfailedwarn": [2, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831], "fitted_transform": [377, 463], "fittedcolumntransform": [154, 187], "fittedgridsearchcv": 250, "fittedpipelin": [154, 240, 250, 270, 283, 315, 319], "fittedrandomforestclassifi": 325, "fittedrandomizedsearchcv": 103, "fittedstackingregressor": 154, "fitter": 1017, "fitting_weight": 398, "fitzgerald": 1040, "fitzk": 1025, "five": [149, 255, 263, 329, 332, 370, 531, 539, 545, 998, 1004, 1016, 1025, 1032], "five_imag": 415, "fix": [2, 43, 47, 58, 62, 70, 80, 103, 129, 139, 140, 142, 147, 149, 170, 171, 175, 178, 186, 189, 197, 213, 229, 248, 260, 272, 282, 304, 318, 319, 320, 321, 322, 323, 324, 325, 326, 351, 362, 363, 369, 371, 373, 374, 375, 379, 383, 387, 389, 390, 398, 407, 408, 411, 412, 414, 415, 417, 451, 461, 471, 504, 512, 531, 537, 540, 542, 548, 549, 559, 560, 564, 565, 588, 591, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 630, 653, 663, 668, 670, 684, 687, 691, 695, 707, 785, 797, 814, 821, 846, 847, 849, 852, 854, 855, 871, 874, 888, 912, 913, 923, 948, 967, 990, 997, 1000, 1001, 1004, 1011, 1021, 1030, 1031, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [588, 591], "fixedthresholdclassifi": [2, 263, 406, 822, 1050], "fixm": [379, 389], "fixtur": [363, 375], "fkaren27": 1046, "flach": [405, 1001], "flach2008": 1001, "flach2015": 1001, "flag": [175, 245, 248, 325, 373, 375, 376, 378, 398, 403, 463, 610, 611, 627, 673, 675, 728, 785, 920, 921, 1016, 1038, 1042, 1043, 1045, 1046, 1047, 1048], "flair": 1003, "flak": 1047, "flake8": 579, "flanagan": [1041, 1042], "flander": 1050, "flat": [2, 78, 120, 187, 231, 232, 233, 267, 407, 414, 415, 439, 445, 447, 460, 509, 1008, 1032, 1033, 1048], "flat_grid": 243, "flatnonzero": [129, 199, 268, 277, 278, 781], "flatten": [54, 68, 234, 243, 267, 313, 336, 347, 381, 502, 569, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 853], "flatten_transform": [569, 1039], "flatter": [43, 62], "flavanoid": [48, 372], "flaviomorelli": 1042, "flavor": [375, 1004], "flavour": 414, "flaw": [389, 414], "flaxman": [1034, 1036], "fledg": [364, 415], "fleet": 43, "fleme": 1047, "flennerhag": 1040, "fletcher": [997, 1032, 1036], "flexibl": [43, 62, 143, 181, 211, 282, 310, 336, 352, 382, 387, 401, 411, 417, 674, 904, 905, 923, 990, 995, 997, 1001, 1005, 1011, 1020, 1021, 1025, 1041, 1045], "flier": 49, "flink": 102, "flip": [124, 582, 742, 948, 1003, 1036, 1045], "flip_i": 515, "flip_sign": 948, "float": [2, 46, 49, 51, 76, 80, 81, 86, 93, 94, 98, 99, 100, 103, 123, 161, 178, 186, 198, 202, 234, 263, 268, 269, 273, 277, 346, 352, 362, 369, 370, 375, 384, 389, 403, 406, 407, 408, 415, 416, 418, 419, 420, 424, 426, 430, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 583, 584, 588, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 610, 611, 613, 614, 615, 616, 617, 619, 620, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 759, 766, 769, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 814, 817, 820, 822, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 867, 870, 871, 877, 878, 880, 882, 884, 885, 886, 887, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 927, 928, 930, 931, 934, 945, 946, 963, 975, 981, 986, 991, 1001, 1002, 1004, 1005, 1011, 1016, 1017, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "float16": 1041, "float32": [55, 145, 234, 307, 323, 363, 370, 375, 376, 377, 389, 401, 403, 557, 558, 559, 560, 563, 564, 565, 566, 593, 594, 640, 641, 658, 699, 763, 869, 912, 913, 914, 915, 928, 976, 977, 978, 1017, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "float64": [45, 50, 52, 53, 86, 103, 105, 145, 146, 147, 148, 159, 170, 186, 187, 244, 263, 277, 280, 322, 323, 324, 339, 363, 369, 375, 376, 377, 389, 415, 420, 457, 470, 471, 474, 477, 478, 479, 496, 497, 508, 509, 516, 517, 518, 520, 531, 537, 539, 542, 543, 545, 546, 548, 581, 582, 589, 591, 597, 641, 648, 650, 651, 654, 655, 656, 657, 658, 663, 669, 670, 673, 675, 680, 682, 683, 687, 694, 699, 706, 707, 708, 709, 710, 712, 716, 717, 719, 720, 721, 723, 725, 726, 729, 730, 731, 735, 736, 737, 738, 739, 740, 743, 748, 753, 755, 756, 783, 784, 786, 787, 788, 793, 794, 795, 814, 869, 877, 878, 885, 897, 906, 907, 909, 910, 913, 915, 925, 928, 930, 946, 971, 974, 976, 977, 978, 1016, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "float_info": 57, "floch": 1049, "floor": 53, "floor_x": 53, "flore": 1045, "florian": [1025, 1032, 1036, 1038, 1042, 1049], "florin": 1050, "flow": 377, "flowchart": [395, 411], "flower": [126, 128, 278, 506, 507, 1001, 1020], "floyd": [370, 688, 998], "floydsoft": 1036, "fluctuat": [51, 93, 149, 211, 276, 1040], "flush": 219, "fly": [145, 380, 383, 508, 509, 582, 1032, 1034, 1041], "flyingdutchman23": 1045, "flyingimmidev": 1032, "flynn": [1045, 1047], "fmax": 229, "fmi": [407, 731], "fmin_l_bfgs_b": [610, 611], "fmt": [94, 222], "fn": [326, 407, 712, 718, 729, 730, 731, 782, 783, 784, 787, 1001, 1002], "fn_c": 278, "fna": [168, 372], "fnlwgt": [325, 496], "fnr": [266, 698, 727], "fo": 415, "focu": [43, 48, 120, 134, 170, 260, 299, 362, 380, 405, 414, 553, 554, 559, 561, 562, 678, 998, 1004, 1011, 1020, 1021, 1024], "focus": [62, 109, 201, 286, 370, 375, 387, 998, 1011, 1020], "fokow": 1049, "fold": [2, 43, 100, 106, 109, 140, 142, 145, 159, 167, 186, 201, 256, 263, 264, 265, 267, 269, 270, 272, 279, 283, 316, 331, 346, 358, 370, 375, 378, 379, 388, 389, 398, 406, 407, 416, 436, 471, 493, 536, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 885, 906, 909, 990, 997, 1001, 1011, 1016, 1032, 1034, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1049], "folder": [2, 104, 370, 373, 375, 379, 383, 393, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 1004], "folkman": 1039, "folloni": 1043, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 87, 88, 90, 96, 100, 103, 104, 118, 120, 129, 134, 137, 146, 147, 151, 163, 175, 176, 181, 185, 186, 187, 188, 189, 193, 195, 197, 199, 201, 209, 211, 212, 226, 229, 239, 245, 246, 248, 260, 263, 269, 278, 279, 283, 286, 309, 315, 316, 318, 319, 321, 322, 323, 326, 336, 346, 350, 351, 352, 354, 357, 358, 362, 363, 369, 370, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 424, 426, 428, 429, 430, 431, 436, 440, 442, 444, 445, 446, 447, 448, 452, 460, 461, 462, 463, 464, 467, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 515, 534, 538, 540, 541, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 631, 633, 634, 646, 652, 658, 659, 670, 671, 680, 692, 694, 699, 705, 709, 713, 718, 788, 819, 841, 846, 847, 848, 850, 852, 854, 855, 856, 863, 867, 868, 869, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 902, 904, 905, 909, 912, 913, 914, 915, 919, 926, 942, 943, 947, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1029, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "folwarczn\u00fd": 1049, "fonari": [1044, 1045], "fond": 1025, "fondat": 1025, "font": [146, 201, 225, 243, 916, 918], "font_manag": [112, 295, 338], "font_prop": 112, "font_siz": 313, "fontdict": [54, 74], "fontnam": [916, 1045], "fontproperti": [112, 295, 338], "fontsiz": [44, 47, 49, 54, 70, 83, 93, 123, 142, 163, 173, 174, 176, 179, 187, 194, 202, 210, 222, 232, 233, 257, 264, 273, 274, 275, 280, 281, 307, 313, 345, 918], "fontweight": [93, 207], "foo": [377, 581, 1005], "food": [0, 372], "foot": 1019, "footer": [54, 102, 270, 350, 351, 370, 487, 488], "footnot": [1008, 1020], "footprint": [320, 323, 362, 364, 407, 412, 541, 555, 556, 557, 558, 563, 564, 565, 566, 1034, 1037, 1038, 1043, 1044, 1047], "fopenmp": [373, 376], "foral": [407, 417, 613], "forbid": [407, 414], "forbidden": [187, 414], "forc": [134, 170, 215, 282, 289, 313, 350, 369, 373, 402, 411, 414, 449, 456, 463, 466, 496, 606, 609, 646, 647, 652, 653, 657, 660, 661, 662, 663, 672, 673, 674, 681, 684, 687, 754, 778, 781, 822, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 906, 907, 908, 909, 910, 928, 930, 931, 1011, 1027, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1048], "force_all_finit": [778, 928, 930, 931, 1043, 1046], "force_alpha": [839, 840, 841, 843, 1047], "force_finit": [606, 609, 728, 785, 1001, 1046], "force_int_remainder_col": [463, 466], "force_writ": [930, 931, 1050], "ford": 51, "forecast": [42, 43, 146, 149, 169, 177, 183, 213, 269, 405, 406, 417, 491, 496, 562, 611, 615, 622, 623, 625, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 1001, 1020, 1022], "foreground": [75, 99], "foreign_work": 263, "foreman": 1039, "forese": 387, "forest": [2, 14, 50, 64, 67, 133, 139, 142, 144, 145, 147, 148, 149, 150, 152, 154, 157, 181, 183, 184, 191, 238, 266, 268, 270, 302, 320, 350, 356, 358, 368, 388, 389, 405, 416, 462, 463, 489, 490, 496, 498, 515, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 630, 634, 800, 805, 830, 837, 864, 878, 908, 912, 913, 914, 990, 991, 1002, 1009, 1017, 1021, 1022, 1023, 1027, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1049], "forest_import": 141, "forestclassifi": 1037, "forestcolumntransform": 154, "forestcov": 248, "forg": [318, 319, 320, 321, 322, 323, 324, 325, 326, 363, 376, 378, 379, 383, 393, 394], "forget": [187, 358, 363, 369, 379, 387, 412, 998], "forget_factor": [412, 538], "forgiv": 734, "forina": 372, "fork": [373, 375, 383, 387], "forkserv": 387, "form": [2, 43, 48, 57, 68, 77, 93, 100, 120, 157, 177, 178, 183, 186, 244, 245, 260, 269, 328, 358, 369, 372, 375, 377, 379, 389, 390, 404, 407, 410, 411, 412, 413, 414, 415, 417, 419, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 687, 688, 689, 690, 691, 692, 693, 699, 797, 798, 799, 800, 803, 804, 805, 808, 810, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 936, 957, 960, 990, 992, 994, 995, 997, 998, 1001, 1002, 1005, 1006, 1007, 1011, 1016, 1020, 1038, 1042, 1044], "formal": [389, 390, 407, 414, 844, 845, 998, 1001, 1002, 1005], "format": [2, 47, 50, 51, 52, 59, 87, 91, 94, 102, 111, 120, 129, 137, 142, 145, 147, 159, 163, 164, 191, 194, 198, 211, 229, 252, 264, 274, 276, 277, 280, 284, 293, 294, 297, 298, 313, 318, 326, 345, 354, 357, 362, 368, 374, 375, 377, 378, 383, 384, 388, 389, 401, 408, 411, 414, 415, 431, 441, 442, 444, 446, 448, 449, 451, 458, 463, 467, 481, 482, 483, 484, 486, 488, 496, 497, 498, 508, 509, 510, 523, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 551, 557, 558, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 688, 689, 692, 697, 711, 713, 720, 739, 740, 751, 768, 791, 792, 833, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 891, 896, 897, 902, 904, 916, 930, 931, 954, 962, 966, 976, 977, 978, 979, 980, 981, 991, 1001, 1004, 1009, 1011, 1012, 1015, 1017, 1027, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1047, 1049, 1050], "format_func": 294, "formatter_result": 91, "former": [51, 352, 406, 414, 415, 565, 802, 809, 818, 1003, 1032, 1038, 1041], "formerli": [215, 1033, 1036, 1038, 1039], "formul": [134, 170, 179, 204, 215, 278, 375, 407, 409, 412, 415, 417, 420, 474, 549, 550, 557, 564, 650, 651, 654, 655, 656, 658, 659, 665, 670, 763, 769, 798, 906, 909, 912, 914, 997, 1001, 1002, 1005, 1011, 1023, 1027, 1049], "formula": [109, 110, 404, 407, 409, 420, 472, 474, 516, 517, 518, 590, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 676, 678, 704, 729, 730, 755, 764, 821, 990, 995, 997, 1001, 1006, 1007, 1011, 1015, 1037, 1039, 1041], "forrest": [1043, 1044], "forsal": [57, 352, 370], "forsyth": 1040, "forth": 383, "fortin": [1032, 1034, 1035, 1036], "fortran": [419, 541, 646, 647, 652, 653, 660, 661, 662, 663, 665, 681, 684, 685, 686, 930, 931, 1032, 1035, 1036, 1040], "fortun": [381, 414, 1045, 1046], "forward": [46, 134, 168, 245, 320, 362, 375, 398, 401, 416, 508, 509, 539, 543, 553, 559, 560, 602, 668, 685, 686, 864, 868, 997, 1021, 1044], "foster": [0, 1040], "fouchet": 1038, "found": [0, 45, 52, 57, 58, 59, 130, 141, 167, 170, 174, 176, 178, 215, 239, 246, 263, 267, 270, 271, 272, 282, 314, 318, 321, 323, 324, 339, 352, 362, 364, 369, 372, 374, 375, 377, 387, 389, 390, 401, 404, 406, 407, 410, 411, 412, 414, 415, 417, 432, 440, 443, 444, 458, 471, 557, 558, 559, 560, 564, 565, 588, 590, 610, 611, 628, 636, 647, 651, 653, 655, 661, 663, 665, 671, 672, 674, 676, 678, 687, 688, 712, 719, 800, 803, 804, 814, 822, 841, 846, 847, 853, 875, 877, 878, 912, 913, 914, 915, 919, 927, 984, 988, 990, 993, 997, 998, 1000, 1002, 1003, 1004, 1005, 1011, 1015, 1016, 1017, 1021, 1032, 1035, 1036, 1039, 1040, 1042, 1046, 1049], "foundat": [0, 154, 263, 375, 405, 1004], "founder": 1025, "fouqu": 1032, "fouquet": [1048, 1049], "four": [64, 164, 178, 191, 196, 212, 256, 257, 263, 329, 336, 371, 375, 389, 557, 564, 719, 912, 914, 936, 997, 999, 1000, 1001, 1011, 1019], "fourier": [2, 23, 243, 638, 639, 640, 641, 642, 758, 759, 993], "fourier_approx_svm": 243, "fourier_scor": 243, "fourier_tim": 243, "fournier": 1041, "fourth": 142, "fowkl": [407, 731], "fowlk": [731, 1038], "fowlkes_mallows_scor": [2, 407, 1001, 1038, 1040], "fox": [326, 415, 1048], "fp": [47, 263, 326, 407, 712, 718, 729, 730, 731, 782, 783, 784, 787, 1001], "fp_c": 278, "fpgawesom": 1046, "fpr": [2, 50, 239, 248, 263, 266, 278, 279, 382, 592, 596, 698, 702, 706, 727, 789, 1001, 1029, 1032, 1048], "fpr_a": 278, "fpr_b": 278, "fpr_grid": 278, "fpr_score": 263, "fr": [531, 537, 658, 664, 685, 686, 758, 759, 999, 1001], "fraa\u00df": 1049, "frac": [63, 111, 112, 134, 269, 276, 278, 321, 404, 405, 407, 409, 412, 413, 414, 415, 417, 430, 462, 464, 481, 482, 483, 554, 556, 558, 560, 562, 565, 568, 570, 611, 615, 619, 622, 623, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 696, 729, 730, 755, 769, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 993, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1016, 1017], "frac12": [414, 993], "fractal": [168, 372], "fraction": [2, 43, 62, 64, 146, 149, 211, 219, 229, 263, 276, 346, 351, 405, 411, 414, 437, 438, 448, 449, 455, 456, 515, 527, 557, 558, 559, 560, 564, 565, 566, 590, 593, 602, 666, 667, 668, 671, 676, 677, 678, 703, 721, 722, 723, 724, 734, 794, 796, 802, 806, 828, 829, 843, 871, 906, 907, 908, 912, 913, 914, 915, 966, 997, 1001, 1004, 1008, 1009, 1011, 1016, 1017, 1021, 1033, 1034, 1035, 1046, 1049], "fragil": 655, "fragment": [88, 123], "frame": [43, 103, 126, 149, 175, 186, 187, 211, 263, 315, 325, 370, 375, 387, 390, 488, 489, 490, 492, 496, 500, 501, 502, 504, 505, 510, 1044], "frameon": [46, 217], "framework": [269, 362, 377, 387, 389, 401, 407, 637, 688, 797, 997, 998, 1005, 1021, 1025, 1032, 1038], "fran": [1044, 1045, 1046], "franc": [315, 764], "francesco": [1044, 1047], "franci": [536, 658, 997, 1038], "francia": 1046, "francidona": 1042, "francisco": [415, 1013], "franck": [1047, 1049, 1050], "franco": 1042, "francoi": [1032, 1045], "francoisgoupil": 1046, "frank": [269, 835, 1002, 1037, 1041, 1042], "frankhui": 1040, "franki": 1045, "franz": 1040, "franziska": 1043, "fran\u00e7oi": [0, 359, 1035], "fraud": [263, 326, 997, 1025], "fraudul": [263, 997, 1025], "fraudulent_accept": 263, "fraudulent_refus": 263, "fred": [102, 1032, 1045], "freder": 1042, "frederick": 1045, "fredrik": 1040, "free": [0, 44, 64, 88, 175, 176, 182, 210, 259, 309, 369, 374, 375, 376, 383, 387, 393, 415, 451, 609, 671, 860, 910, 990, 993, 997, 1001, 1021, 1040], "freebsd": 378, "freedom": [43, 122, 175, 199, 201, 203, 269, 541, 656, 797, 997, 1035], "freeland": 1047, "freestand": 377, "freez": [379, 393, 401, 1021, 1025, 1040], "frei": [73, 439, 453, 1042], "freija": 1040, "freita": [1037, 1039, 1040], "frellwan": 1045, "fremtpl2": 229, "fremtpl2freq": 229, "fremtpl2sev": 229, "french": [229, 315], "freq": [186, 197, 352], "frequenc": [57, 64, 170, 187, 197, 206, 211, 242, 319, 320, 350, 351, 352, 370, 387, 405, 411, 412, 414, 415, 416, 551, 557, 559, 560, 561, 564, 588, 589, 590, 591, 604, 658, 659, 664, 666, 668, 674, 675, 676, 685, 686, 833, 868, 877, 878, 904, 906, 909, 912, 914, 936, 997, 998, 1003, 1011, 1015, 1017, 1034, 1036, 1037, 1043, 1050], "frequent": [72, 134, 182, 272, 278, 279, 283, 351, 372, 375, 415, 551, 590, 630, 854, 877, 878, 881, 893, 991, 993, 1001, 1015, 1021, 1050], "frequentist": 528, "fresh": [538, 1021, 1042], "fresh_restart": 538, "fresh_restarts_max_it": 538, "freund": [414, 553, 554], "fri": [43, 149, 187, 370], "frid": [1025, 1035], "friedman": [2, 137, 138, 148, 268, 409, 411, 414, 477, 516, 517, 518, 520, 558, 559, 560, 565, 593, 594, 834, 912, 913, 915, 995, 997, 1002, 1008, 1017], "friedman2001": 414, "friedman2002": 414, "friedman_ms": [558, 559, 560, 565, 913, 915, 1017, 1048, 1049], "friend": [421, 1036], "friendli": [120, 363, 375, 383, 412, 897, 1013, 1014, 1020, 1021], "fring": [85, 407], "fritsch": [0, 397, 1032, 1033, 1035], "fritzk": 1047, "fro": [412, 538, 540, 547, 693, 997], "fro_2": [661, 663], "frobeniu": [54, 123, 442, 446, 458, 468, 469, 470, 471, 472, 473, 474, 475, 531, 537, 538, 540, 545, 546, 547, 997, 1039], "frobenius_norm": 688, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 364, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 392, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 961, 962, 963, 964, 965, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "from_dtyp": [43, 143, 263, 325, 387, 414, 561, 562, 1049], "from_estim": [45, 48, 62, 64, 66, 67, 70, 89, 136, 139, 149, 150, 151, 155, 187, 204, 220, 225, 244, 249, 251, 262, 263, 266, 271, 272, 276, 279, 282, 292, 297, 300, 314, 318, 319, 320, 321, 323, 324, 325, 326, 335, 336, 337, 338, 340, 341, 343, 355, 382, 405, 437, 631, 632, 633, 697, 698, 700, 701, 702, 718, 727, 782, 784, 787, 788, 789, 806, 823, 996, 1001, 1008, 1029, 1045, 1046, 1047, 1048, 1049, 1050], "from_predict": [43, 52, 68, 107, 154, 186, 248, 265, 276, 278, 321, 328, 350, 382, 437, 631, 697, 698, 700, 701, 702, 718, 727, 782, 784, 787, 788, 789, 1001, 1029, 1045, 1046, 1047, 1048, 1049, 1050], "frombuffer_empti": 1039, "fromkei": [270, 919], "fromnumer": 381, "front": 1039, "frontal": 370, "frontend": 381, "frontier": [48, 225, 295, 338, 1007], "frozen": 377, "frozentransform": 377, "frsi": 1040, "fruit": [375, 1002], "fr\u00e9minvil": [1049, 1050], "fs1995": 414, "ftfy": 415, "ftorres16": [1046, 1047], "ftp": [168, 372, 682, 683], "ftwo_scor": [742, 1001], "fu": [658, 1036], "fuck": [1044, 1045], "fuction": 984, "fuent": [1033, 1034], "fugled": 1049, "fujikawa": 1039, "fukatani": 1039, "fulfil": [375, 407, 414, 800, 803, 804, 814, 864, 868, 997], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 363, 364, 368, 370, 373, 375, 377, 380, 383, 387, 389, 390, 393, 403, 407, 409, 411, 412, 415, 421, 424, 430, 431, 440, 444, 446, 448, 458, 487, 488, 491, 492, 496, 497, 500, 501, 502, 503, 504, 505, 507, 510, 535, 537, 541, 550, 559, 560, 567, 568, 632, 648, 650, 654, 658, 659, 669, 680, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 797, 798, 811, 841, 936, 990, 997, 1000, 1003, 1004, 1008, 1011, 1014, 1021, 1032, 1036, 1038, 1040, 1042, 1043, 1045, 1046, 1048, 1049, 1050], "full_data": 193, "full_lik": 98, "full_model": 291, "full_scor": 182, "fulli": [52, 79, 88, 141, 146, 362, 369, 370, 375, 389, 407, 413, 414, 416, 442, 446, 557, 558, 564, 565, 912, 913, 914, 915, 916, 918, 991, 997, 1006, 1014, 1020, 1045, 1046], "fullpap": 1014, "fultz": 1045, "fun": [419, 533, 1025], "fun_arg": [419, 533], "func": [50, 107, 139, 186, 194, 229, 302, 375, 408, 464, 699, 868, 1011, 1036, 1038, 1040, 1041, 1049, 1050], "func_metr": 628, "func_min": [610, 611], "funcformatt": 294, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 80, 86, 87, 88, 90, 92, 99, 102, 103, 104, 107, 120, 123, 125, 126, 129, 132, 139, 140, 143, 144, 145, 146, 147, 148, 149, 159, 164, 167, 168, 170, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 192, 193, 196, 197, 204, 205, 207, 209, 211, 212, 217, 218, 219, 224, 227, 228, 229, 231, 239, 241, 244, 245, 248, 249, 251, 252, 259, 261, 263, 267, 269, 270, 271, 272, 277, 278, 282, 284, 286, 289, 304, 307, 309, 316, 318, 319, 321, 322, 324, 326, 331, 333, 336, 337, 338, 339, 340, 341, 343, 346, 348, 350, 351, 355, 358, 362, 363, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 387, 388, 389, 393, 398, 401, 403, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 422, 424, 426, 429, 430, 431, 436, 439, 442, 443, 444, 446, 447, 449, 451, 453, 456, 457, 458, 459, 460, 463, 464, 467, 468, 470, 471, 473, 477, 487, 488, 490, 492, 495, 496, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 572, 575, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 607, 608, 609, 610, 611, 615, 619, 620, 622, 623, 627, 628, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 706, 711, 712, 716, 719, 721, 722, 723, 724, 728, 732, 734, 735, 738, 740, 741, 742, 750, 755, 757, 761, 762, 763, 765, 768, 771, 774, 778, 779, 780, 781, 782, 783, 785, 789, 792, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 880, 881, 882, 883, 884, 885, 888, 890, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 928, 938, 940, 941, 942, 947, 948, 959, 960, 966, 967, 970, 971, 974, 975, 984, 989, 990, 991, 992, 994, 996, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1017, 1020, 1021, 1022, 1023, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "functiontransform": [2, 43, 102, 139, 211, 229, 332, 401, 463, 464, 1011, 1037, 1038, 1040, 1045, 1046, 1047, 1049], "functiontransformerfunctiontransform": 139, "functool": 229, "fundament": [72, 82, 112, 204, 351, 379, 387, 388, 410, 496, 538, 540, 547, 708, 997, 1001], "funder": 0, "fung": 411, "funnel": [45, 493, 494], "funni": 102, "furlanello": 743, "furrer": 1049, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 103, 109, 116, 120, 137, 142, 144, 167, 170, 175, 186, 188, 193, 197, 231, 236, 245, 263, 266, 269, 270, 276, 323, 339, 351, 357, 362, 375, 387, 389, 401, 406, 407, 409, 412, 414, 415, 417, 443, 451, 461, 515, 532, 535, 582, 614, 622, 628, 658, 659, 666, 667, 668, 676, 677, 678, 691, 695, 737, 774, 778, 781, 792, 793, 840, 846, 847, 854, 855, 882, 884, 904, 906, 909, 948, 1000, 1001, 1003, 1004, 1005, 1007, 1009, 1011, 1015, 1016, 1041, 1045], "furthermor": [43, 52, 72, 140, 187, 188, 248, 249, 251, 289, 350, 351, 362, 364, 382, 407, 412, 414, 415, 562, 590, 606, 619, 704, 736, 755, 757, 795, 904, 997, 1009, 1035, 1039], "fuse": [376, 1038, 1048], "fusion": 387, "futur": [0, 52, 175, 212, 251, 321, 324, 375, 379, 389, 390, 401, 411, 415, 496, 534, 635, 923, 970, 1002, 1016, 1017, 1025, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "futurewarn": [375, 383, 1039, 1040, 1041, 1043, 1045, 1048, 1049], "fuxin": 642, "fw": 688, "fwe": 592, "f\u00e9lix": [1032, 1034, 1035, 1036, 1040], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 86, 88, 98, 102, 113, 116, 127, 134, 137, 145, 146, 171, 172, 173, 178, 182, 185, 186, 196, 200, 211, 212, 213, 215, 229, 236, 244, 245, 254, 263, 269, 273, 274, 280, 288, 295, 314, 326, 331, 345, 346, 352, 358, 362, 367, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 387, 389, 398, 401, 403, 405, 407, 409, 411, 412, 414, 415, 416, 417, 419, 436, 442, 443, 446, 448, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 503, 528, 531, 533, 534, 536, 537, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 597, 604, 610, 611, 617, 622, 623, 630, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 686, 690, 692, 697, 716, 720, 728, 738, 740, 763, 778, 785, 788, 799, 801, 802, 803, 804, 806, 807, 809, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 864, 867, 869, 870, 871, 874, 876, 877, 880, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 947, 948, 960, 990, 991, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1015, 1016, 1017, 1021, 1024, 1025, 1032, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "g0g0gadget": 1042, "g2015": 1008, "g_": 407, "g_i": [414, 649], "g_j": [648, 669, 680], "ga": 0, "gaaca": 178, "gaatattaggccga": 387, "gabor": 1046, "gabriel": [1040, 1041, 1042, 1045, 1046], "gael": [0, 396, 1019, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "gaido": 1041, "gaidon": 1032, "gain": [2, 86, 149, 233, 276, 289, 291, 325, 326, 329, 350, 351, 357, 374, 381, 383, 387, 414, 496, 532, 557, 561, 562, 564, 726, 756, 797, 798, 833, 912, 914, 1002, 1006, 1014, 1017, 1035, 1039, 1042], "gain_matrix": 263, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 370, 375, 377, 389, 393, 400, 1022, 1032, 1036, 1039], "galli": 1044, "gallopoulo": 412, "galvez": 1037, "gambl": 51, "gameiro": 1046, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 125, 155, 161, 191, 225, 238, 243, 244, 267, 269, 271, 274, 280, 320, 328, 329, 331, 333, 336, 338, 339, 342, 343, 345, 348, 410, 412, 414, 417, 451, 535, 562, 619, 620, 639, 640, 641, 643, 644, 645, 648, 680, 685, 691, 724, 747, 752, 759, 766, 775, 776, 777, 797, 811, 814, 899, 900, 901, 906, 907, 908, 909, 910, 990, 993, 997, 999, 1014, 1016, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1046, 1047, 1048], "gamma_": [535, 1048], "gamma_0": [254, 260], "gamma_2d_rang": 339, "gamma_bound": 620, "gamma_k": 410, "gamma_rang": 339, "gammaregressor": [2, 229, 319, 322, 680, 997, 1043, 1046, 1047], "gandenberg": 1041, "ganesh": [1037, 1049], "ganevgv": 1042, "gangesh": 1044, "gangwar": 1039, "ganiev": [1037, 1038, 1039], "ganssl": 1039, "gap": [43, 52, 149, 350, 370, 411, 470, 471, 477, 588, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 821, 912, 913, 914, 915, 997, 998, 1040, 1044, 1046], "garagecar": [143, 154], "garagefinish": 143, "garagetyp": 154, "garageyrblt": 107, "garbag": 1044, "garcia": 1045, "garc\u00eda": [1041, 1042, 1047], "gardin": 369, "gardner": [1040, 1041], "garg": [1042, 1043], "gargsya": 1042, "gari": [370, 1039], "garret": 1036, "garreta": [1034, 1035], "garrett": 1036, "garri": 372, "garriga": [275, 411, 829], "gasmi": 1046, "gasquez": 1039, "gate": [372, 1045], "gather": [322, 324, 383, 390, 407, 1011, 1025], "gatsbi": 1014, "gaug": 186, "gaull": 764, "gaurav": [1040, 1041, 1042, 1043, 1044, 1046], "gauravahlawat": [1040, 1041], "gaussian": [2, 8, 19, 28, 43, 44, 46, 48, 64, 66, 67, 70, 79, 80, 81, 88, 90, 94, 98, 109, 110, 111, 112, 113, 118, 121, 122, 123, 129, 135, 136, 142, 146, 150, 152, 161, 182, 193, 196, 197, 199, 202, 221, 222, 223, 224, 238, 242, 244, 256, 257, 280, 294, 299, 302, 304, 312, 313, 333, 336, 343, 344, 348, 367, 371, 377, 380, 389, 407, 409, 412, 413, 419, 451, 468, 469, 470, 471, 472, 473, 474, 475, 496, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 530, 532, 544, 549, 550, 553, 563, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 643, 644, 672, 677, 680, 703, 724, 741, 752, 776, 797, 798, 800, 814, 839, 840, 841, 842, 843, 844, 845, 849, 880, 884, 892, 896, 897, 898, 995, 997, 998, 999, 1007, 1022, 1023, 1025, 1026, 1027, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1042, 1044, 1046], "gaussian_filt": [53, 80, 81, 87], "gaussian_process": [2, 66, 67, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 389, 417, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 643, 1002, 1022, 1035, 1038, 1039], "gaussianhmm": 1032, "gaussianmixtur": [2, 79, 90, 255, 256, 257, 258, 259, 260, 413, 797, 1000, 1038, 1040, 1041, 1045, 1046, 1048, 1050], "gaussianmixturegaussianmixtur": 259, "gaussiannb": [2, 61, 62, 64, 67, 156, 271, 358, 405, 414, 436, 569, 839, 840, 841, 843, 865, 995, 1002, 1003, 1036, 1037, 1038, 1040, 1045, 1048], "gaussiannois": 377, "gaussianprocessclassifi": [2, 66, 67, 171, 172, 173, 174, 178, 389, 417, 611, 619, 620, 622, 623, 1002, 1038, 1040, 1042, 1046], "gaussianprocessregressor": [2, 170, 175, 176, 177, 178, 179, 417, 610, 613, 614, 615, 616, 617, 621, 624, 625, 643, 1002, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "gaussianprocessregressorifittedgaussianprocessregressor": 175, "gaussianrandomproject": [2, 897, 1013, 1033, 1046, 1048, 1049], "gauthier": 1046, "gauz": 1040, "gave": [64, 405, 800, 803, 804, 814, 871], "gavin": [628, 991], "gaynor": 401, "ga\u00ebl": [390, 1025], "gb": [157, 414, 553, 633], "gbc": 358, "gbdt": [139, 187, 263, 318, 319, 324, 380, 414], "gbdt_appli": 139, "gbdt_applyfunctiontransform": 139, "gbdt_cst": 319, "gbdt_leaves_yield": 139, "gbdt_model": 139, "gbdt_no_cst": [151, 319], "gbdt_pipelin": 154, "gbdt_with_monotonic_cst": 151, "gbdt_with_monotonic_cst_df": 151, "gbgradientboostingregressor": 157, "gbm": [145, 414, 1035], "gbm_early_stop": 144, "gbm_full": 144, "gbp": 1025, "gbr": 146, "gbr_l": 146, "gbrt": [43, 52, 211, 414], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 362, "gc": 49, "gca": [47, 79, 95, 116, 122, 173, 216, 220, 222, 238, 251, 273, 297, 299, 310, 335, 337, 340, 341, 1008, 1029], "gcc": [373, 376, 381, 387], "gcf": [47, 1008], "gcv": [673, 675], "gcv_mode": [673, 1034], "gd": [51, 157], "gdb": [376, 378, 1024], "gdex1": 1042, "ge": [51, 992, 1003, 1044], "ge0": 1017, "gear": 1019, "geb": 57, "gebremichael": [1047, 1048], "gedeck": 1039, "geevarghes": 1047, "gefel": 1001, "gegr": 415, "gei": 1034, "geiger": [1049, 1050], "geist": 372, "gelavizh": 1043, "gelder": 1043, "gemm": 1050, "gen": 781, "gen_batch": [2, 384, 952], "gen_cov": 111, "gen_even_slic": [2, 211, 384, 951], "gender": [250, 877, 1011], "gender_femal": 877, "gender_mal": 877, "gene": [178, 369, 404, 450, 513, 593, 594, 851, 884], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 171, 172, 173, 174, 175, 178, 181, 182, 185, 186, 187, 188, 189, 191, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 363, 367, 368, 370, 372, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 401, 404, 405, 407, 411, 413, 415, 416, 417, 419, 423, 428, 430, 436, 439, 442, 445, 446, 448, 451, 453, 457, 458, 459, 461, 463, 464, 466, 468, 471, 473, 481, 482, 483, 487, 490, 492, 495, 496, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 538, 540, 541, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 614, 615, 618, 619, 620, 622, 623, 627, 628, 629, 630, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 685, 686, 689, 690, 691, 692, 693, 694, 695, 701, 704, 706, 717, 721, 723, 724, 737, 743, 757, 778, 781, 785, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 836, 837, 838, 844, 845, 847, 849, 850, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 904, 905, 906, 907, 909, 910, 913, 915, 916, 917, 918, 942, 943, 947, 948, 951, 952, 965, 969, 971, 974, 989, 990, 991, 993, 995, 996, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1013, 1014, 1016, 1017, 1022, 1023, 1024, 1025, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "generalis": [788, 1001, 1021], "generaliz": [343, 414], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 149, "generate_onli": [942, 1042], "generate_synthetic_data": 53, "generickernelmixin": [178, 1042], "genericunivariateselect": [2, 416, 595, 596, 598, 599, 600, 602, 1046, 1048, 1049], "generos": 375, "genesi": [1046, 1048], "genet": 1020, "genoa": 372, "genom": [58, 513, 1020], "genotyp": 369, "gensim": 1020, "gentil": [372, 1044], "gentli": 412, "genvalen": [1044, 1045, 1046, 1047, 1048], "geodes": [231, 688, 998], "geoff": [835, 1002], "geoffrei": [861, 862, 1005, 1043, 1044, 1045, 1046, 1048], "geograph": [43, 50, 302, 370, 498], "geometr": [122, 407, 688, 704, 731, 757, 998, 1040], "geometri": [74, 407, 998, 1004], "geomspac": 324, "georg": [45, 370, 407, 1038, 1044, 1045, 1046, 1047], "georgi": [1040, 1043], "georgiamaydai": 1047, "geospati": [302, 413], "geovan": [1045, 1046], "geq": [242, 405, 412, 414, 997, 1001, 1011, 1015, 1016], "ger": 415, "gerhard": [45, 370], "german_credit": 263, "germer": [1047, 1048], "geroldcsend": 1045, "geron": [1040, 1045, 1046], "gerstein": 513, "gertrud": 1039, "gertz": 449, "gervai": [1034, 1035], "gesa": 1044, "gesdd": 948, "gesvd": 948, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 85, 89, 121, 125, 146, 149, 156, 165, 168, 170, 175, 176, 181, 186, 187, 188, 189, 205, 213, 226, 229, 231, 245, 246, 267, 270, 271, 273, 277, 280, 282, 286, 289, 294, 302, 310, 318, 325, 329, 332, 336, 339, 341, 344, 348, 350, 352, 354, 356, 363, 368, 369, 370, 373, 375, 376, 377, 378, 380, 381, 382, 389, 393, 401, 403, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 421, 422, 423, 428, 430, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 699, 721, 722, 723, 724, 726, 732, 733, 742, 756, 763, 764, 769, 785, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 937, 939, 940, 941, 947, 948, 953, 959, 990, 996, 997, 998, 1000, 1001, 1011, 1014, 1015, 1016, 1017, 1021, 1029, 1032, 1035, 1038, 1040, 1043, 1045, 1046, 1049], "get_adjacency_matrix": 55, "get_arrai": [844, 845], "get_bin_se": 447, "get_cmap": [62, 64, 344], "get_color": 46, "get_config": [2, 467, 781, 902, 967, 1047], "get_covari": [532, 534, 541], "get_data": [508, 509], "get_data_hom": [2, 47], "get_depth": [912, 913, 914, 915, 1041], "get_feature_nam": [321, 1040, 1041, 1043, 1044, 1045], "get_feature_names_out": [2, 54, 57, 186, 188, 321, 350, 351, 352, 370, 377, 389, 408, 415, 423, 428, 431, 441, 442, 444, 446, 448, 463, 466, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1011, 1045, 1046, 1047, 1048, 1049, 1050], "get_figur": 134, "get_full_scor": 182, "get_height": [47, 144], "get_impute_it": 182, "get_impute_knn_scor": 182, "get_impute_mean": 182, "get_impute_zero_scor": 182, "get_indic": [57, 422, 450, 452], "get_initial_mean": 257, "get_legend_handles_label": [149, 204, 244, 271, 276], "get_lin": 305, "get_metadata_rout": [245, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 958, 959, 960, 1001, 1049], "get_metr": 699, "get_minibatch": 47, "get_n_cal": [844, 845], "get_n_leav": [912, 913, 914, 915, 1041], "get_n_split": [389, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "get_nam": 311, "get_output_feature_nam": 1046, "get_param": [270, 378, 389, 417, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 1042, 1043, 1044, 1046, 1047], "get_precis": [468, 469, 470, 471, 472, 473, 474, 475, 532, 534, 541], "get_redirect": 55, "get_routing_for_object": [2, 245, 957], "get_scor": [2, 325, 389, 733, 1039, 1048], "get_scorer_nam": [2, 406, 732, 1001, 1046, 1049], "get_scores_for_imput": 182, "get_shap": [57, 422, 450, 452], "get_stop_word": [588, 589, 591], "get_submatrix": [422, 450, 452], "get_subplotspec": 382, "get_support": [164, 168, 320, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1034], "get_tag": 2, "get_tree_stat": [844, 845], "get_untrusted_typ": 401, "get_width": [47, 144], "get_x": [47, 144], "get_xaxi": [254, 299, 309], "get_xlim": [111, 207, 216, 309], "get_xticklabel": 280, "get_yaxi": [299, 309], "get_ybound": 86, "get_ylim": [207, 282, 309, 310], "getattr": [43, 47, 263, 309, 377, 389, 1048], "getgaurav2": 1042, "getmoredataget": 395, "gettempdir": 1004, "getter": [468, 469, 470, 471, 472, 473, 474, 475, 593, 594, 597], "geurt": [414, 555, 556, 557, 558, 565, 566, 914, 915], "gewili": [1047, 1048], "gh": 375, "ghahramani": 899, "gharibi": 1042, "ghg": 1038, "ghislain": 1044, "gholdman1": 1043, "ghorai": 1040, "ghosh": [0, 397, 407, 1032, 1033, 1049, 1050], "gia": 1043, "giancarlo": 1046, "gianr": 1047, "gibb": [860, 1006, 1020], "gideon": 1042, "giessel": 1038, "gigant": [1040, 1042, 1047, 1048], "gijsber": 1046, "gil": [362, 363, 376, 1035, 1040, 1041, 1044, 1045, 1049], "gilad": 1025, "gilberto": 1040, "gilbertson": [1046, 1047], "gilch": 1039, "gile": [1035, 1036], "gill": [0, 397, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "gilliam": 1039, "gilmor": 1036, "gim": 1044, "gini": [64, 189, 211, 229, 250, 281, 320, 553, 554, 557, 558, 559, 560, 564, 565, 566, 788, 912, 913, 914, 915, 990, 1009, 1017, 1040, 1041, 1048, 1049], "gionanidi": 1046, "giorgio": [1037, 1038, 1039], "giorgiop": 1037, "giotto": 1020, "giovanni": [1038, 1040], "gist": [375, 383, 1024], "git": [373, 377, 379, 381, 383, 1024, 1028, 1032, 1048, 1050], "github": [0, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 289, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 373, 374, 378, 379, 380, 381, 383, 387, 389, 390, 401, 403, 692, 1019, 1020, 1024, 1042], "githubusercont": 51, "gitter": [1039, 1040], "giudic": 1044, "giusepp": [1040, 1041], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 82, 93, 95, 97, 102, 103, 107, 122, 145, 170, 175, 179, 181, 186, 187, 201, 203, 211, 212, 213, 238, 260, 263, 266, 271, 278, 291, 295, 298, 307, 321, 322, 326, 332, 362, 364, 370, 372, 374, 375, 377, 381, 383, 387, 388, 389, 390, 395, 401, 404, 405, 407, 408, 409, 412, 414, 415, 417, 419, 432, 445, 446, 448, 450, 458, 471, 496, 499, 503, 533, 538, 549, 550, 551, 552, 557, 558, 564, 565, 566, 593, 594, 597, 607, 608, 638, 647, 661, 665, 676, 720, 730, 736, 739, 794, 800, 803, 804, 814, 825, 826, 827, 829, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 881, 882, 884, 885, 893, 997, 1001, 1004, 1005, 1006, 1008, 1009, 1011, 1015, 1016, 1017, 1020, 1025, 1032, 1036, 1039, 1040, 1042, 1043, 1044, 1046, 1048], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 82, 91, 93, 109, 115, 121, 125, 140, 149, 150, 152, 154, 170, 177, 186, 187, 197, 208, 211, 212, 215, 229, 232, 238, 242, 243, 245, 247, 248, 249, 263, 265, 269, 270, 271, 272, 278, 283, 292, 295, 296, 297, 311, 315, 321, 326, 350, 351, 352, 356, 357, 362, 364, 370, 374, 375, 381, 383, 384, 387, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 424, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 455, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 483, 486, 496, 501, 503, 505, 523, 533, 534, 536, 538, 539, 540, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 601, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 631, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 687, 688, 690, 691, 697, 698, 699, 700, 701, 702, 704, 705, 706, 712, 714, 717, 718, 720, 724, 726, 727, 734, 736, 737, 740, 752, 755, 756, 758, 759, 764, 774, 778, 781, 782, 784, 787, 788, 789, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 890, 891, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 923, 934, 935, 936, 956, 957, 959, 984, 988, 990, 993, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "gkevinyen5418": 1040, "gkf": 411, "gkiasta": 1045, "gl": [168, 372], "glad": 375, "glanc": [286, 374], "glaser": [1040, 1041], "glass": 370, "glasso": [409, 477], "glaxosmithklin": 51, "gleb": [1045, 1047, 1048, 1049], "glemaitr": [1041, 1042, 1044], "glen": 1045, "glenn": 1038, "glennfrutiz": 1046, "glibc": 383, "glm": [211, 229, 319, 648, 669, 680, 997, 1032, 1043], "glm_freq": 229, "glm_pure_premium": 229, "glm_sev": 229, "glmnet": [646, 647, 1032], "glob": 47, "global": [2, 3, 47, 49, 77, 90, 120, 211, 231, 232, 252, 278, 306, 319, 358, 362, 363, 381, 387, 389, 407, 417, 441, 451, 461, 467, 590, 626, 632, 688, 691, 692, 695, 707, 729, 730, 738, 783, 784, 787, 788, 818, 885, 900, 902, 970, 990, 998, 1001, 1007, 1011, 1017, 1025, 1040, 1047], "global_dtyp": 363, "global_random_se": 363, "globular": [95, 407], "glorot": [861, 862], "glossari": [2, 358, 375, 377, 381, 418, 419, 436, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 466, 468, 471, 473, 487, 490, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 584, 594, 602, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 774, 778, 781, 793, 797, 798, 800, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 846, 847, 849, 850, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 866, 869, 881, 885, 893, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 914, 915, 947, 948, 971, 974, 990, 991, 997, 1040], "glu": [168, 372], "glushchenkov": 1046, "gl\u00f2ria": [1045, 1047], "gm": 798, "gmil": 370, "gmm": [79, 91, 92, 183, 253, 255, 258, 259, 260, 504, 512, 798, 819, 1000, 1022, 1032, 1033, 1036, 1037, 1038], "gmm_": 1033, "gmm_bic_scor": 259, "gmmgmm": 395, "gmmhmm": [1032, 1033], "gnb": [61, 62, 64, 156, 414, 569, 1003], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 373, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 370, 375, 379, 380, 384, 390, 393, 408, 412, 414, 416, 442, 561, 562, 720, 883, 925, 951, 952, 1011, 1017, 1021, 1043], "goadrich": 1001, "goal": [49, 55, 58, 64, 85, 90, 116, 149, 181, 187, 191, 211, 226, 229, 247, 248, 263, 266, 267, 350, 363, 364, 370, 380, 381, 389, 390, 392, 398, 412, 416, 542, 548, 590, 593, 739, 1001, 1004, 1006, 1007, 1015, 1016, 1017, 1025, 1040], "god": [57, 350, 351], "godbol": 783, "goe": [43, 72, 139, 186, 357, 375, 414, 470, 471, 477, 557, 558, 564, 565, 566, 912, 913, 914, 915, 1011, 1015], "goetz": [1039, 1040], "goh": 1049, "gohlk": 1037, "goix": [0, 1036, 1038, 1039, 1040, 1041], "gold": [69, 206, 212, 214, 217, 221, 225, 228, 255, 260, 276, 295, 338, 381], "goldbaum": 1050, "goldberg": [853, 1004], "goldfarb": 997, "goldman": 51, "goldstein": [187, 1008], "goldszmidt": 1013, "gollonet": [0, 397], "goltermann": 1044, "golub": [534, 842, 884], "golubin": 1039, "gome": [1045, 1046, 1050], "gomez": [1040, 1047, 1049], "gommer": [1035, 1038, 1039, 1047, 1048, 1050], "goncalo": [1039, 1040], "gone": [1032, 1033], "gonthier": 1043, "goo": [168, 372], "good": [43, 48, 58, 62, 64, 75, 79, 80, 82, 85, 86, 88, 91, 106, 112, 116, 129, 140, 142, 145, 146, 149, 171, 175, 181, 186, 197, 201, 211, 212, 217, 226, 236, 238, 242, 245, 248, 255, 257, 262, 263, 269, 275, 282, 307, 314, 315, 320, 326, 328, 333, 339, 350, 351, 358, 362, 363, 364, 374, 376, 377, 378, 381, 383, 387, 389, 404, 405, 407, 409, 411, 412, 414, 415, 416, 417, 436, 438, 443, 534, 559, 561, 562, 590, 630, 640, 647, 648, 656, 658, 659, 661, 669, 680, 690, 694, 723, 731, 742, 764, 829, 898, 923, 948, 990, 996, 997, 998, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1015, 1016, 1017, 1021, 1025, 1038], "goodby": 375, "goodman": [1032, 1037], "googl": [0, 55, 387, 407, 441, 948, 1019, 1032], "gool": 1001, "gorb": 1044, "gordon": [57, 1038, 1042, 1044, 1046], "gorelli": [1040, 1041, 1045, 1047, 1050], "gorgolewski": [0, 397, 1032, 1035], "gorilla": 350, "gorinevski": 997, "gorodkin": 743, "gorro\u00f1o": [1043, 1045, 1046], "got": [176, 245, 276, 358, 380, 551, 649, 665, 1045, 1047, 1049], "gotten": [997, 1011], "gou": 407, "gouillart": 1032, "goupil": [0, 359], "gov": [55, 372], "govern": [186, 358, 362, 375, 389, 1025], "govin": 1038, "go\u0144da": 1047, "gp": [173, 178, 417, 610, 611, 622, 1038], "gp_fix": 171, "gp_opt": 171, "gpapadok": [1042, 1046], "gpassino": 1036, "gpc": [2, 66, 67, 136, 142, 152, 161, 169, 175, 176, 178, 183, 221, 222, 223, 224, 244, 258, 304, 312, 333, 344, 348, 504, 610, 611, 613, 614, 619, 620, 622, 623, 703, 741, 1022, 1023, 1027, 1042], "gpc_rbf_anisotrop": 172, "gpc_rbf_isotrop": 172, "gperftool": 378, "gplearn": 1020, "gpr": [2, 169, 170, 171, 177, 179, 183, 496, 610, 611, 613, 614, 615, 616, 621, 622, 623, 624, 625, 1022, 1023, 1027, 1042], "gpr_model": 179, "gprof": 378, "gpu": [323, 326, 403, 1005, 1021, 1049], "gr": 897, "grab": 375, "gracefulli": [1035, 1036], "grad": [381, 1025], "gradd": 381, "grade": 1001, "gradi": 1042, "gradient": [2, 14, 46, 52, 80, 99, 103, 133, 134, 135, 138, 139, 141, 151, 154, 157, 175, 176, 177, 183, 188, 189, 192, 194, 199, 208, 213, 234, 238, 243, 268, 270, 295, 305, 309, 310, 313, 315, 322, 325, 338, 389, 406, 407, 417, 451, 461, 465, 466, 487, 489, 496, 501, 503, 520, 553, 554, 559, 560, 561, 562, 564, 565, 586, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 631, 632, 634, 635, 639, 648, 649, 658, 659, 668, 669, 672, 674, 676, 677, 678, 680, 687, 692, 694, 695, 741, 742, 748, 750, 790, 800, 803, 804, 805, 821, 827, 830, 860, 861, 862, 865, 877, 878, 908, 974, 998, 1001, 1004, 1005, 1006, 1007, 1020, 1022, 1023, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1045, 1047, 1049], "gradient_boost": [139, 1034, 1035, 1041], "gradientboost": 1037, "gradientboostingclassifi": [2, 139, 145, 148, 311, 358, 387, 553, 561, 632, 633, 1002, 1008, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "gradientboostingclassifier__learning_r": 311, "gradientboostingregressor": [2, 46, 144, 146, 147, 154, 157, 362, 380, 387, 554, 562, 632, 633, 997, 1001, 1002, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "gradientboostingregressorgradientboostingregressor": 157, "gradual": [215, 861, 862, 942, 943, 1015], "graduat": 372, "graham": [1037, 1038], "grai": [45, 53, 80, 81, 83, 84, 86, 120, 123, 148, 168, 209, 211, 229, 242, 246, 247, 276, 306, 372, 412, 493, 494, 502, 521, 1043], "grain": [43, 67, 72, 204, 243, 260, 311, 381, 415, 445, 1021], "gram": [2, 183, 192, 245, 377, 412, 415, 488, 524, 548, 588, 589, 590, 591, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 767, 990, 997, 1011, 1016, 1022, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1045, 1046], "gram_test": 1016, "gram_train": 1016, "gramfort": [0, 120, 390, 396, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "grammar": 375, "grant": [0, 248, 263, 375], "grape": 408, "graph": [2, 55, 62, 74, 79, 80, 99, 100, 178, 231, 266, 289, 291, 331, 362, 375, 378, 389, 404, 409, 418, 440, 443, 444, 451, 452, 456, 461, 462, 470, 471, 477, 511, 585, 586, 688, 691, 692, 695, 782, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 900, 954, 998, 1001, 1004, 1006, 1014, 1017, 1020, 1025, 1032, 1039, 1040, 1042, 1045, 1047], "graph_laplacian": 1039, "graph_lasso": [477, 1040], "graph_model": 291, "graph_shortest_path": [384, 1045], "graphic": [8, 57, 112, 187, 332, 350, 351, 352, 370, 381, 407, 409, 412, 792, 793, 797, 834, 916, 1001, 1002, 1008, 1020], "graphical_lasso": [2, 384, 470, 471, 1040, 1048], "graphicallasso": [2, 113, 409, 468, 469, 471, 472, 473, 474, 475, 477, 1040, 1048], "graphicallassocv": [2, 51, 113, 398, 409, 470, 472, 473, 474, 475, 477, 1040, 1044, 1046, 1048, 1050], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [470, 1037, 1040], "graphlassocv": [471, 1034, 1040], "graphviz": [916, 1017], "grasp": [283, 1016, 1021], "grassberg": [607, 608], "grate": 1025, "graviton": 383, "gray_r": [68, 123, 173, 232, 307, 328, 329], "grayscal": 68, "greasemonkei": 383, "great": [88, 185, 186, 209, 358, 375, 387, 412, 764, 1021, 1025, 1032, 1039], "greater": [62, 118, 134, 136, 186, 228, 243, 248, 257, 263, 275, 288, 295, 296, 354, 362, 380, 389, 405, 406, 407, 410, 414, 440, 444, 445, 448, 451, 462, 471, 536, 541, 557, 558, 559, 560, 561, 562, 564, 565, 566, 593, 594, 597, 610, 611, 628, 640, 642, 664, 666, 667, 671, 676, 677, 678, 692, 709, 712, 720, 735, 736, 739, 742, 788, 795, 797, 798, 834, 846, 847, 854, 855, 861, 862, 867, 882, 894, 898, 901, 904, 905, 912, 913, 914, 915, 948, 969, 990, 996, 997, 998, 1001, 1002, 1007, 1011, 1016, 1017, 1035, 1040, 1043, 1045, 1046, 1047, 1049], "greater_is_bett": [146, 326, 742, 1001], "greatest": [88, 393, 407, 871, 1040], "greatli": [209, 243, 323, 375, 383, 451, 1004, 1017, 1038, 1046], "greedi": [168, 414, 416, 446, 448, 459, 559, 560, 602, 997, 1017], "greedili": [116, 168, 407, 411, 416, 459], "greek": [51, 55, 59, 71, 86, 99, 123, 183, 407, 461, 1022], "green": [63, 112, 118, 137, 151, 156, 170, 191, 236, 305, 310, 314, 319, 325, 389, 1002, 1040, 1041, 1043, 1044], "greenhal": 1040, "greg": [1025, 1038, 1039, 1041, 1042], "gregori": [1038, 1042, 1043, 1044, 1045], "gregorystrubel": 1045, "gregov": 1040, "grei": [44, 279, 309, 346, 370], "grep": 375, "greyscal": 307, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 87, 94, 103, 104, 105, 106, 109, 113, 142, 152, 163, 165, 167, 174, 183, 185, 186, 187, 201, 229, 236, 243, 244, 245, 249, 254, 259, 261, 263, 266, 268, 270, 273, 274, 276, 281, 288, 291, 293, 294, 302, 307, 311, 312, 314, 336, 338, 339, 345, 350, 370, 377, 382, 387, 389, 402, 408, 411, 413, 414, 415, 447, 460, 463, 471, 498, 502, 515, 522, 631, 632, 633, 647, 650, 653, 654, 656, 659, 661, 663, 676, 713, 728, 742, 785, 788, 800, 803, 804, 811, 814, 816, 830, 831, 864, 909, 994, 996, 1001, 1004, 1008, 1021, 1022, 1027, 1032, 1035, 1036, 1037, 1039, 1040, 1046, 1048, 1049, 1050], "grid_encod": 312, "grid_model": 291, "grid_posit": [62, 64], "grid_resolut": [187, 320, 337, 631, 632, 633], "grid_scores_": [1038, 1044, 1045], "grid_search": [106, 140, 250, 259, 267, 277, 325, 408, 1034, 1035, 1036, 1037, 1038, 1039], "grid_siz": [50, 94, 302, 370, 498], "grid_to_graph": [2, 81, 84, 87, 407, 415, 1045], "grid_tograph": 1035, "grid_valu": [187, 633, 1008, 1048], "gridsearch": [87, 109, 280], "gridsearchcv": [2, 43, 87, 101, 103, 105, 106, 109, 127, 140, 183, 244, 250, 259, 261, 263, 267, 268, 269, 270, 274, 277, 280, 286, 291, 293, 307, 311, 320, 324, 325, 339, 343, 358, 363, 377, 387, 389, 398, 403, 408, 411, 414, 417, 421, 502, 520, 540, 541, 575, 599, 607, 653, 703, 742, 811, 814, 864, 874, 904, 912, 990, 997, 1001, 1005, 1015, 1016, 1021, 1022, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050], "gridsearchcvifittedgridsearchcv": [104, 259, 263, 267, 269], "gridsearchcvinot": 250, "gridsiz": 242, "gridspec": [62, 64, 98, 254, 382], "gridspecfromsubplotspec": 382, "griffith": [1040, 1041], "grigorev": 1037, "grigorio": 734, "grime": [689, 693, 998], "grinsztajn": 1049, "grisel": [0, 390, 396, 1019, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "griva": [1046, 1047], "grlivarea": 143, "grobler": [0, 397, 1032, 1033, 1034, 1035], "groceryheist": 1045, "groenen": [690, 694, 998], "grok": 486, "groothui": [627, 991], "grother": 372, "ground": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 150, 178, 197, 206, 211, 212, 248, 260, 272, 351, 389, 407, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 723, 724, 726, 728, 729, 730, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 783, 784, 785, 786, 787, 790, 791, 795, 796, 1001, 1014, 1040], "ground_truth": [88, 296], "group": [0, 2, 51, 72, 75, 88, 91, 93, 156, 187, 189, 211, 232, 245, 260, 264, 315, 325, 330, 351, 357, 370, 380, 389, 390, 398, 407, 413, 414, 415, 432, 445, 495, 588, 589, 591, 594, 718, 788, 800, 801, 802, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 831, 877, 878, 914, 915, 942, 943, 997, 998, 1000, 1001, 1002, 1011, 1017, 1018, 1020, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1048, 1049, 1050], "group_1": 877, "group_2": 877, "group_3": 877, "group_by_dynam": 175, "group_df": 219, "group_kfold": 801, "group_prior": 264, "groupbi": [43, 149, 187, 219, 229], "groupkfold": [2, 264, 274, 325, 398, 411, 594, 805, 806, 807, 808, 809, 818, 823, 825, 826, 827, 828, 831, 1038, 1045], "groupshufflesplit": [2, 264, 411, 1038], "grow": [43, 52, 74, 191, 197, 291, 346, 352, 362, 387, 403, 409, 414, 415, 557, 558, 559, 560, 564, 565, 566, 810, 844, 845, 912, 913, 914, 915, 990, 1001, 1004, 1017, 1025, 1035, 1036], "grower": [149, 414, 561, 562], "grown": [372, 414, 553, 554, 555, 556, 557, 558, 564, 565, 912, 913, 914, 915, 1017], "growth": [1001, 1037, 1038], "grumman": 51, "grusak": 1042, "gryllo": [1037, 1040], "gryze": [1034, 1037], "grzegorz": [1039, 1042], "gs_time": 280, "gsh": 280, "gsh_time": 280, "gsiisg": 1047, "gsk": 51, "gss": [411, 802], "gt": [68, 103, 104, 139, 154, 186, 259, 267, 281, 375, 379, 395], "gu": [1043, 1044, 1046], "guan": 1042, "guangguo": 1038, "guarante": [46, 47, 64, 111, 112, 149, 186, 219, 242, 288, 289, 309, 351, 358, 364, 369, 383, 384, 401, 407, 411, 412, 415, 445, 536, 645, 658, 659, 668, 672, 674, 676, 678, 687, 694, 802, 817, 820, 844, 845, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 898, 911, 930, 931, 993, 997, 998, 1000, 1004, 1009, 1013, 1017, 1042, 1050], "gubri": [1040, 1041], "gudmalwar": 1044, "gued": 1050, "guerin": [1038, 1039], "guess": [55, 134, 142, 411, 414, 415, 532, 538, 540, 541, 547, 788, 1001, 1015], "guestrin": 414, "guha": 1047, "gui": [1033, 1043], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 88, 101, 120, 140, 179, 183, 186, 187, 199, 231, 276, 295, 296, 299, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 374, 375, 380, 381, 382, 383, 388, 389, 390, 395, 398, 408, 414, 418, 419, 420, 421, 424, 430, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 944, 1001, 1002, 1032, 1033, 1034, 1035, 1037, 1039, 1041, 1042, 1049, 1050], "guidanc": [387, 417], "guidelin": [2, 25, 374, 378, 380, 381, 383, 407, 414], "guiel": 494, "guilherm": 1035, "guillaum": [0, 396, 1025, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "guillem": [1041, 1042, 1047], "guillemot": [0, 1038, 1039], "guillermo": 1046, "guiniol": 1039, "guitar": 1047, "guitton": 1044, "guiweb": 1045, "gulati": [1037, 1038, 1039], "gun": [57, 370], "gunduz": 1050, "gunesbayir": [1047, 1048], "gunnar": [535, 948], "guo": 1045, "guoci": 1039, "gupta": [898, 1013, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "gustafson": [1047, 1048], "gustav": 1038, "gustavo": [1040, 1041, 1046], "gutierrez": 1042, "guttman": 694, "guyon": [515, 593, 594, 1001], "guyon2015": 1001, "gwulf": [1036, 1037], "gyeongja": 1050, "gz": [47, 379, 393, 508, 509], "gzip": 1032, "g\u00e9ron": 1040, "g\u00f3rski": [1043, 1044], "g\u00f6khan": [44, 412, 535], "g\u00f6n\u00fcl": 1050, "g\u00fcnther": [1045, 1049], "h": [44, 45, 52, 91, 120, 121, 134, 135, 152, 168, 172, 186, 256, 294, 297, 304, 311, 322, 333, 335, 352, 372, 381, 405, 407, 409, 412, 413, 414, 415, 418, 443, 519, 532, 535, 538, 540, 547, 553, 567, 568, 582, 590, 607, 608, 689, 693, 704, 708, 757, 839, 843, 844, 845, 850, 860, 875, 884, 993, 995, 997, 998, 999, 1001, 1003, 1005, 1006, 1015, 1017, 1038, 1043, 1047, 1048, 1049], "h1998": 414, "h2009": 1008, "h4dr1en": 1042, "h5py": 369, "h_": 997, "h_i": [412, 1006], "h_init": 381, "h_j": 1006, "h_l": 995, "h_m": 414, "h_pad": [120, 142, 355], "h_samples_": 860, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 83, 88, 89, 90, 93, 106, 111, 112, 116, 120, 132, 139, 142, 144, 146, 147, 149, 151, 156, 166, 167, 170, 175, 176, 177, 182, 186, 187, 188, 189, 191, 205, 211, 212, 213, 217, 228, 229, 231, 238, 242, 244, 245, 248, 249, 252, 254, 255, 257, 259, 260, 263, 264, 267, 268, 269, 272, 273, 275, 280, 281, 288, 292, 295, 296, 297, 299, 306, 309, 310, 312, 314, 318, 319, 320, 321, 322, 324, 326, 328, 331, 339, 343, 344, 345, 350, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 383, 384, 387, 388, 389, 390, 393, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 493, 494, 497, 498, 508, 509, 516, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 619, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 695, 711, 713, 720, 722, 741, 763, 774, 778, 779, 780, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 821, 822, 823, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 921, 929, 930, 931, 937, 950, 969, 985, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1021, 1024, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "haan": 1041, "haar": [53, 1049], "haas": 1042, "habchi": 1042, "haberland": [1047, 1048], "haberth\u00fcr": 1039, "hack": [47, 49], "had": [43, 48, 81, 146, 149, 175, 245, 309, 315, 321, 358, 375, 376, 383, 398, 415, 418, 443, 991, 1001, 1025, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1047], "hadamard": 377, "haddad": 1039, "hadrien": [1039, 1042], "hadshirt": 1042, "haenel": 1035, "haesun": [1044, 1047, 1048], "hafner": 1045, "hagai": 797, "hagberg": 55, "hahn": [1039, 1040], "haiat": 1044, "haidar": [1045, 1046], "hail": 315, "hailei": [1042, 1043], "hain": 370, "haitz": [1043, 1045, 1046], "hakaa1": [1039, 1040], "hal": [547, 658, 758, 759, 999], "halchenko": [0, 396, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1048], "hale": [1034, 1046], "half": [2, 43, 61, 123, 149, 243, 247, 267, 269, 281, 370, 371, 412, 414, 462, 522, 562, 593, 597, 602, 770, 863, 871, 913, 1001, 1004, 1017], "half_cal": 597, "half_selector": 597, "halfbath": 143, "halford": [1040, 1047, 1048], "halkidi": 407, "halko": [412, 535, 541, 544, 947, 948], "hall": [997, 1039, 1043], "hallock": 1038, "halpert": [692, 998], "halv": [2, 163, 183, 261, 273, 277, 345, 402, 515, 564, 579, 800, 803, 804, 909, 1022, 1027, 1044], "halvic": 1044, "halvinggridsearchcv": [2, 280, 281, 320, 398, 403, 579, 804, 990, 1044, 1046, 1047, 1049, 1050], "halvingrandomsearchcv": [2, 146, 281, 320, 398, 403, 579, 803, 990, 1044, 1046, 1047, 1048, 1049, 1050], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 281, "halwai": 1038, "ham": [2, 46, 449, 456, 581, 699, 703, 709, 734, 741, 778, 779, 780, 796, 1004], "hamada": 1044, "hamdi": [1049, 1050], "hammerbach": 1036, "hamming_loss": [2, 46, 703, 796, 1001, 1034, 1038, 1041], "hammingdist": 699, "hammoudeh": 1041, "hamoumi": 1045, "hampu": 1036, "hamzeh": [0, 1035, 1036], "han": [407, 441, 449, 456, 1032, 1040, 1041, 1045], "hancock": 1042, "hand": [44, 65, 84, 86, 116, 122, 123, 125, 140, 146, 163, 166, 175, 183, 186, 187, 204, 205, 215, 218, 235, 241, 242, 244, 245, 248, 262, 263, 266, 271, 278, 283, 293, 328, 329, 339, 356, 362, 369, 370, 372, 375, 377, 381, 383, 388, 412, 413, 414, 416, 424, 430, 502, 643, 697, 713, 788, 830, 885, 909, 990, 994, 997, 1001, 1003, 1005, 1009, 1014, 1016, 1022, 1025], "handbook": [720, 740, 1001], "handi": [82, 103, 351, 352, 376, 1048], "handk": 1048, "handl": [0, 2, 43, 48, 103, 140, 143, 147, 149, 150, 154, 191, 197, 204, 244, 245, 263, 271, 276, 278, 286, 288, 289, 296, 315, 318, 325, 350, 352, 357, 362, 367, 369, 375, 376, 377, 384, 387, 389, 414, 415, 417, 496, 544, 577, 581, 582, 588, 589, 591, 610, 635, 646, 647, 652, 658, 659, 660, 661, 662, 668, 675, 676, 678, 681, 720, 788, 868, 877, 878, 904, 905, 909, 916, 920, 949, 957, 960, 998, 1001, 1002, 1003, 1004, 1007, 1009, 1016, 1017, 1020, 1021, 1025, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 103, 139, 143, 154, 187, 188, 240, 248, 250, 252, 315, 319, 322, 877, 878, 1011, 1036, 1040, 1044, 1045], "handler": 1043, "handler_map": 296, "handlerpathcollect": 296, "handletextpad": 355, "handpick": 238, "handprint": 372, "handwritten": [51, 71, 80, 85, 90, 92, 94, 97, 139, 166, 183, 230, 231, 233, 235, 242, 257, 267, 299, 306, 307, 328, 329, 351, 368, 407, 414, 446, 502, 541, 544, 549, 566, 688, 689, 690, 691, 692, 704, 705, 717, 737, 793, 795, 853, 865, 874, 884, 897, 998, 1004, 1022, 1027], "hang": [375, 1042, 1043], "hank": 1035, "hanmin": [0, 396, 1039, 1040, 1041, 1042, 1043], "hann": 1032, "hanna": [1036, 1037, 1043], "hannah": [1042, 1044, 1046], "hannel": [1040, 1041], "hansen": 1040, "hansin": [1046, 1047], "hanu\u0161": 1049, "hanxiang": [679, 997], "hao": [1043, 1044, 1046, 1047], "haoi": 1049, "haoran": 1040, "haoyin": [1043, 1045, 1046], "happen": [2, 44, 64, 139, 199, 263, 309, 315, 351, 358, 362, 363, 373, 374, 375, 379, 380, 381, 387, 389, 390, 393, 401, 407, 409, 411, 414, 436, 515, 572, 658, 785, 882, 884, 904, 997, 1001, 1002, 1016, 1021, 1040, 1044, 1045, 1047, 1048, 1049, 1050], "happi": [186, 263, 350, 387, 390, 818, 819], "haqu": [1034, 1035, 1036], "harabasz": [2, 710], "harabaz": 1038, "hard": [48, 211, 238, 242, 269, 271, 364, 374, 387, 389, 406, 407, 412, 415, 534, 541, 569, 676, 906, 907, 908, 909, 910, 997, 1014, 1016, 1017, 1021, 1041, 1042], "hardcod": [439, 453, 1040], "harder": [278, 279, 313, 370, 374, 377, 383, 387, 407, 515, 561, 562], "hardest": 395, "hardin": 112, "hardli": [88, 607, 608], "hardwar": [57, 332, 352, 362, 363, 370, 373, 387, 393, 401, 403, 1020, 1046, 1047], "hare": 997, "harfouch": 1048, "harikrishnan": 1034, "harizo": [1038, 1039], "harm": [350, 377, 415, 795], "harmanan": [1049, 1050], "harmon": [43, 72, 351, 407, 535, 541, 729, 730, 736, 783, 795, 1001], "haroldfox": [1040, 1041], "harper": 1039, "harri": [1036, 1038, 1044, 1045], "harsanyi": 1048, "harsh": [424, 436, 468, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 610, 658, 666, 668, 674, 675, 676, 799, 822, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 899, 900, 904, 906, 909, 912, 914, 1042, 1044, 1047], "harshit5674": 1047, "hart": [372, 995, 1040], "hartong": 1043, "harutaka": 1045, "harvest": 315, "harwar": 387, "has_fit_paramet": [2, 384], "hasan": 1047, "hasattr": [79, 89, 95, 113, 132, 142, 229, 242, 304, 311, 350, 389, 422, 426, 432, 961, 1042], "haseeb": [1045, 1046], "hash": [2, 47, 52, 133, 183, 351, 352, 362, 364, 367, 375, 378, 387, 414, 514, 544, 557, 566, 581, 582, 589, 640, 839, 965, 993, 1022, 1027, 1033, 1036, 1039], "hashabl": [389, 872, 875, 1012], "hashcode55": 1038, "hasher": [152, 352, 415], "hashingvector": [2, 47, 352, 364, 415, 488, 588, 590, 591, 1033, 1039, 1040, 1041, 1042, 1045], "hashlib": 47, "hasil": 1036, "hasn": 398, "hassaan": [1040, 1041], "hassan": 1045, "hassen": 1032, "hassoun": 1047, "hasti": [2, 134, 137, 138, 148, 168, 199, 268, 372, 411, 414, 519, 520, 553, 559, 560, 628, 656, 721, 723, 724, 834, 851, 897, 912, 913, 991, 995, 997, 1002, 1008, 1013, 1015, 1017], "hat": [112, 129, 265, 269, 294, 321, 373, 405, 409, 413, 414, 992, 997, 998, 1001, 1003, 1005], "hathidara": 1044, "hatwar": [1040, 1041], "hauck": 1038, "hausamann": [1040, 1041], "haussler": 178, "hav": 395, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 80, 81, 83, 86, 88, 90, 93, 95, 97, 98, 102, 103, 109, 111, 116, 118, 125, 134, 141, 142, 143, 144, 146, 149, 164, 165, 168, 170, 171, 175, 176, 177, 182, 185, 186, 187, 188, 189, 191, 193, 197, 211, 212, 213, 215, 229, 235, 238, 240, 245, 246, 248, 249, 255, 256, 257, 259, 262, 263, 269, 270, 272, 275, 276, 282, 283, 284, 286, 289, 291, 292, 295, 296, 309, 314, 315, 316, 318, 320, 321, 325, 329, 330, 331, 336, 342, 343, 344, 346, 350, 351, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 492, 494, 495, 496, 508, 509, 514, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 699, 704, 705, 711, 712, 715, 720, 726, 731, 736, 756, 757, 758, 759, 782, 785, 786, 792, 795, 797, 798, 799, 800, 803, 804, 805, 806, 811, 814, 818, 822, 823, 825, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 930, 932, 934, 936, 937, 948, 975, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "havelabeleddatado": 395, "haversin": [2, 302, 413, 699, 762, 764, 1004, 1041, 1044], "haversine_dist": [2, 762, 1041], "haversinedist": 699, "hawaii": 175, "haxbi": 0, "haya": 1046, "hayashi": 1040, "hbgt": 149, "hd": 51, "hdb": [88, 445], "hdbscan": [2, 71, 79, 82, 98, 183, 242, 443, 512, 884, 991, 1020, 1022, 1026, 1027, 1048, 1049, 1050], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 369, "hdl": [168, 372], "hdmetor": 1038, "he": [375, 726, 756, 861, 862, 894, 895, 1001, 1039, 1046, 1047], "head": [0, 52, 63, 103, 175, 186, 199, 201, 229, 252, 259, 315, 318, 323, 375, 383, 396, 412, 1025, 1037, 1038, 1047, 1048, 1049, 1050], "head_width": 63, "header": [54, 102, 270, 350, 351, 370, 373, 415, 487, 488, 800, 803, 804, 814], "heali": 407, "health": 326, "heap": 449, "heapq": 462, "heard": 375, "heart": 248, "heat": [154, 339, 407, 451, 461, 695], "heatingqc": 154, "heatmap": [187, 189, 193, 197, 280, 323, 339, 632, 1008], "heatmap_kw": 632, "heatmaps_": 632, "heavei": 1040, "heavi": [213, 387, 404, 1021], "heavier": [129, 409, 997], "heavili": [201, 362, 363, 375, 383, 649, 655, 778, 1018], "heavy_rain": [43, 187], "hebei": 407, "hedlund": 1048, "hedyati": 1036, "hee": [1039, 1042], "heer": 1043, "hegd": 1049, "heidelberg": [175, 407, 412, 535, 696, 726, 756, 1001], "height": [47, 54, 86, 123, 143, 144, 168, 309, 315, 325, 350, 413, 445, 493, 494, 506, 586], "heightpet_catpet_dogf64f64f64": 325, "heikki": 1013, "heilman": [1036, 1037], "heitz": 315, "held": [43, 47, 103, 127, 147, 188, 219, 256, 272, 277, 288, 411, 414, 559, 560, 561, 562, 701, 800, 803, 804, 814, 861, 862, 874, 990, 991, 1000, 1009], "helder": [1036, 1045, 1046], "heldout": 218, "heldout_scor": 145, "helen": 323, "heli": 1039, "hello": [375, 383, 961, 965], "helloifeven": 961, "helm": 1050, "helmu": 1036, "help": [0, 41, 43, 48, 50, 88, 102, 106, 125, 130, 187, 197, 229, 231, 263, 270, 272, 282, 286, 307, 336, 339, 351, 352, 358, 362, 363, 375, 376, 377, 378, 379, 380, 381, 383, 384, 389, 390, 392, 401, 407, 408, 411, 415, 417, 431, 536, 577, 627, 650, 654, 665, 685, 686, 692, 714, 840, 912, 913, 914, 915, 991, 995, 996, 998, 1000, 1001, 1003, 1005, 1011, 1012, 1017, 1019, 1020, 1021, 1024, 1025, 1038, 1039, 1040, 1043, 1046, 1050], "helper": [44, 45, 123, 229, 280, 368, 377, 378, 388, 389, 411, 467, 575, 902, 989, 1032, 1039, 1040, 1041, 1045], "helvetica": [916, 918], "heme": 1049, "hempstalk": 1039, "henc": [72, 93, 104, 186, 215, 242, 263, 278, 339, 350, 351, 362, 370, 377, 379, 381, 389, 393, 407, 411, 414, 415, 486, 508, 539, 541, 542, 543, 563, 590, 643, 646, 652, 660, 662, 672, 687, 704, 705, 709, 715, 731, 757, 786, 795, 816, 819, 820, 839, 840, 841, 842, 843, 879, 957, 998, 1000, 1001, 1002, 1007, 1008, 1011, 1021, 1039, 1040, 1043, 1044, 1046], "hendrik": [0, 396, 1032, 1035, 1036, 1037, 1038], "henri": [1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047], "henrymooresc": [1046, 1047], "hepe": [679, 997], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 90, 91, 99, 109, 113, 118, 122, 123, 125, 127, 128, 130, 134, 137, 140, 143, 147, 149, 154, 165, 168, 170, 178, 179, 186, 187, 188, 191, 193, 197, 201, 205, 211, 215, 217, 226, 227, 229, 231, 233, 238, 243, 245, 248, 249, 255, 256, 257, 262, 263, 266, 267, 269, 271, 272, 274, 276, 278, 279, 281, 282, 283, 286, 289, 291, 298, 301, 305, 306, 307, 311, 314, 320, 322, 325, 328, 330, 339, 343, 346, 348, 352, 354, 356, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 380, 381, 383, 387, 388, 398, 401, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 420, 436, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 463, 471, 474, 536, 538, 539, 543, 544, 563, 567, 568, 569, 570, 581, 582, 584, 588, 591, 594, 602, 628, 630, 647, 651, 653, 655, 661, 663, 665, 673, 675, 689, 691, 695, 699, 712, 726, 756, 794, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 831, 840, 844, 845, 868, 876, 879, 882, 885, 896, 897, 907, 966, 990, 993, 997, 998, 999, 1000, 1001, 1004, 1007, 1011, 1013, 1014, 1015, 1016, 1020, 1021, 1024, 1025, 1032, 1040, 1045], "hereaft": 390, "hereund": 1007, "herilalaina": [1039, 1040, 1042], "hermano": [1047, 1048], "hermida": [1041, 1045], "hernandez": 1001, "hern\u00e1ndez": 1001, "hero": [409, 420, 474], "herrou": 1046, "hershei": 1001, "hertel": 1049, "herv": 1036, "hervieu": 1032, "herv\u00e9": 1036, "heryanto": 1039, "hesit": 375, "hessian": [231, 232, 233, 414, 561, 562, 648, 658, 659, 669, 680, 689, 693, 997, 1005, 1026, 1027, 1047], "hessian_tol": [689, 693], "heterogen": [43, 47, 48, 61, 88, 101, 103, 183, 187, 211, 252, 314, 318, 352, 367, 369, 387, 463, 487, 541, 581, 591, 713, 864, 868, 904, 998, 1008, 1011, 1020, 1022, 1027, 1036, 1040, 1042, 1043, 1050], "heteroscedast": [120, 127, 146, 213, 412, 880, 892], "heteroschedast": 1001, "heuer": 1035, "heurist": [51, 54, 145, 248, 350, 363, 407, 416, 448, 451, 460, 461, 508, 509, 537, 539, 546, 676, 677, 678, 691, 695, 803, 804, 906, 907, 908, 909, 910, 935, 998, 999, 1004, 1015, 1017, 1025, 1032, 1033, 1037, 1041, 1044, 1045], "hexbin": 242, "hexdigest": 47, "hgbdt": 140, "hgbdt_model": 187, "hgbdt_model_without_interact": 187, "hgbdt_preprocessor": 187, "hgbt": [140, 149, 414], "hgbt_cst": 149, "hgbt_no_cst": 149, "hgbt_quantil": 149, "hhu": [649, 1041], "hi": [0, 408, 1001], "hibon": 1039, "hida": [1047, 1048], "hidden": [43, 187, 306, 307, 375, 383, 404, 412, 860, 861, 862, 1005, 1006, 1020, 1032, 1043], "hidden_layer_s": [187, 249, 304, 306, 861, 862, 1005], "hide": [52, 78, 375, 383, 839, 840, 841, 842, 843, 1035, 1040, 1048], "hideaki": 1046, "hierarch": [2, 53, 59, 71, 74, 75, 79, 80, 85, 86, 87, 89, 90, 183, 189, 235, 322, 357, 389, 415, 440, 442, 444, 445, 504, 512, 514, 522, 530, 547, 731, 857, 884, 1018, 1021, 1022, 1026, 1027, 1032, 1035, 1036, 1048], "hierarchi": [76, 189, 375, 449, 455, 462, 1006], "higgin": [1049, 1050], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 82, 88, 90, 95, 98, 102, 106, 111, 112, 122, 123, 137, 139, 140, 141, 146, 147, 149, 150, 152, 168, 170, 176, 182, 185, 187, 188, 189, 197, 207, 212, 213, 215, 225, 231, 232, 233, 238, 242, 254, 260, 267, 271, 275, 276, 295, 296, 304, 306, 311, 313, 314, 315, 316, 324, 331, 336, 338, 339, 350, 351, 356, 362, 370, 372, 375, 380, 383, 384, 387, 388, 404, 405, 406, 407, 411, 413, 414, 415, 416, 417, 443, 446, 448, 449, 451, 468, 481, 482, 483, 553, 554, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 644, 670, 671, 679, 689, 692, 693, 726, 731, 742, 746, 756, 789, 792, 808, 810, 844, 845, 849, 878, 879, 883, 885, 906, 908, 909, 912, 913, 914, 915, 969, 990, 995, 996, 997, 998, 1000, 1001, 1004, 1005, 1007, 1009, 1011, 1013, 1016, 1017, 1018, 1020, 1021, 1032, 1033, 1035, 1036, 1040, 1043, 1044, 1045, 1046, 1047], "high_cardin": 315, "high_cardinality_featur": 315, "high_cardinalityindex": 315, "high_i": 207, "high_precision_cv_result": 267, "high_recall_cv_result": 267, "high_x": 207, "higher": [43, 52, 90, 111, 123, 127, 134, 137, 139, 140, 146, 150, 166, 170, 172, 177, 178, 186, 187, 188, 191, 204, 208, 211, 212, 215, 229, 235, 236, 260, 262, 263, 267, 269, 272, 284, 294, 314, 339, 343, 350, 351, 352, 356, 358, 362, 370, 373, 377, 404, 406, 407, 409, 414, 416, 417, 418, 443, 447, 448, 470, 477, 509, 532, 539, 543, 548, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 573, 588, 591, 607, 608, 619, 627, 631, 635, 637, 646, 647, 652, 653, 660, 661, 662, 663, 676, 678, 679, 704, 724, 728, 752, 785, 797, 800, 803, 804, 806, 814, 821, 823, 828, 831, 850, 853, 879, 896, 897, 898, 904, 905, 906, 907, 908, 909, 910, 917, 993, 997, 998, 1000, 1001, 1004, 1008, 1011, 1015, 1016, 1033, 1038, 1040, 1047, 1049], "highest": [2, 55, 63, 113, 164, 168, 215, 267, 269, 280, 320, 350, 375, 387, 405, 407, 411, 414, 416, 436, 555, 557, 564, 592, 595, 596, 598, 599, 600, 603, 604, 606, 635, 637, 726, 756, 794, 797, 800, 803, 804, 814, 901, 912, 950, 990, 997, 1001, 1002, 1005, 1015, 1017, 1044], "highest_protocol": 401, "highli": [43, 48, 64, 104, 111, 112, 122, 130, 150, 197, 207, 216, 263, 269, 272, 278, 305, 343, 351, 362, 363, 375, 381, 387, 405, 407, 411, 414, 415, 451, 461, 496, 563, 671, 692, 812, 814, 860, 923, 997, 1001, 1004, 1005, 1007, 1015, 1016, 1019, 1020], "highlight": [43, 54, 88, 103, 111, 118, 132, 138, 139, 141, 151, 168, 170, 171, 176, 181, 182, 187, 188, 191, 204, 211, 212, 213, 229, 240, 245, 249, 250, 251, 252, 263, 264, 281, 283, 291, 313, 315, 331, 350, 352, 375, 379, 380, 383, 387, 417, 442, 445, 446, 463, 466, 489, 490, 496, 501, 502, 504, 512, 515, 521, 524, 538, 541, 561, 562, 564, 565, 567, 599, 602, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 680, 688, 697, 701, 702, 717, 718, 732, 742, 748, 778, 788, 795, 799, 800, 801, 803, 804, 806, 814, 822, 823, 826, 827, 830, 846, 848, 865, 869, 874, 877, 878, 879, 883, 884, 885, 901, 902, 904, 909, 912, 913, 943, 998, 1001, 1009, 1011, 1016, 1022, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "highlight_min": [146, 201], "higuera": 369, "hila": 407, "hilbert": [216, 870, 993, 1011], "hilferti": 111, "hill": [407, 447, 460, 1042], "him": 415, "himanshu": [1043, 1046], "hind": 1046, "hinder": 1042, "hing": [2, 62, 218, 221, 223, 277, 336, 337, 341, 343, 389, 666, 676, 735, 904, 911, 997, 1015, 1016], "hinge_loss": [2, 343, 1001, 1036, 1044, 1045], "hinrich": 412, "hint": [186, 362, 376, 380, 398, 447, 1001], "hinton": [692, 853, 860, 861, 862, 998, 1004, 1005, 1006], "hintz": 1038, "hiramatsu": 1049, "hirofumi": [1043, 1044], "hirsch": 1040, "hirschberg": [407, 717, 737, 795], "hirzel": 1045, "hispan": 186, "hist": [43, 62, 64, 86, 107, 136, 140, 211, 213, 242, 248, 263, 275, 294, 309, 313, 315, 322, 325, 414], "hist_drop": 143, "hist_n": 143, "hist_nbin": 309, "hist_no_interact": 323, "hist_one_hot": 143, "hist_ordin": 143, "hist_quantil": 322, "hist_x0": 309, "hist_x1": 309, "histgradientboost": 1044, "histgradientboostingclassifi": [2, 139, 140, 263, 318, 319, 320, 321, 323, 325, 363, 387, 401, 559, 564, 632, 633, 991, 1020, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "histgradientboostingclassifierhistgradientboostingclassifi": 263, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 263, "histgradientboostingregressor": [2, 43, 46, 52, 135, 140, 143, 146, 147, 149, 151, 154, 181, 187, 211, 315, 318, 319, 320, 321, 323, 324, 325, 387, 414, 560, 565, 632, 633, 635, 991, 1008, 1020, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "histgradientboostingregressor__interaction_cst": 187, "histgradientboostingregressor__max_depth": 143, "histgradientboostingregressor__max_it": 143, "histgradientboostingregressorhistgradientboostingregressor": [154, 315], "histgradientboostingregressorifittedhistgradientboostingregressor": [151, 323], "histogram": [2, 52, 62, 64, 86, 133, 135, 143, 144, 146, 147, 151, 183, 211, 219, 242, 268, 270, 275, 294, 309, 320, 322, 324, 325, 405, 489, 496, 559, 560, 561, 562, 564, 565, 632, 642, 742, 748, 758, 759, 790, 800, 805, 821, 827, 830, 993, 999, 1011, 1022, 1026, 1027, 1044, 1047, 1049], "histor": [51, 211, 263, 998, 1021], "histori": [51, 379, 559, 560, 1032], "hit": [213, 381], "hitesh": 1044, "hjortkj\u00e6r": 1046, "hkey_local_machin": 393, "hline": 122, "hlle": 998, "hmasdev": 1046, "hmc": 51, "hmm": [1032, 1033, 1034, 1035, 1037], "hmmlearn": 1020, "hn": 381, "hnyk": [1038, 1039], "ho": [414, 555, 556, 1001, 1037, 1040, 1041, 1046], "hoang": [1041, 1042], "hobson": 1038, "hoc": [167, 168, 183, 261, 263, 272, 286, 326, 331, 389, 406, 496, 658, 816, 822, 827, 865, 884, 1022], "hochberg": [595, 1038, 1039], "hochreit": [404, 719], "hockei": [57, 370], "hoctor": 1044, "hoda1394": 1044, "hoenig": 1032, "hoesli": 414, "hoffman": [412, 536, 1037, 1044], "hogan": 1040, "hoh": 1040, "hold": [0, 47, 52, 63, 64, 211, 215, 245, 263, 270, 357, 368, 375, 376, 377, 389, 405, 407, 411, 414, 415, 417, 503, 557, 561, 564, 589, 632, 633, 634, 736, 800, 803, 804, 814, 840, 871, 872, 877, 878, 885, 888, 912, 914, 991, 995, 1001, 1005, 1015, 1016, 1017, 1040, 1044, 1050], "holdgraf": 1040, "holdselig": 415, "hole": [183, 230, 231, 236, 530, 692, 693, 1022, 1046], "holger": 1039, "holidai": [43, 187], "holm": [835, 1002, 1049], "holman": 1047, "holmstr\u00f6m": 1034, "holohan": [1047, 1049], "holt": [0, 397, 1032], "holub": 534, "home": [0, 2, 7, 51, 52, 154, 174, 176, 178, 179, 239, 255, 307, 323, 370, 373, 383, 393, 485, 491, 499, 679, 1025], "homebrew": [378, 393], "homepag": [370, 530, 1017], "homm": 1047, "homo": 91, "homogen": [2, 72, 73, 74, 79, 80, 82, 88, 91, 351, 370, 387, 389, 409, 414, 417, 445, 614, 704, 717, 731, 736, 737, 757, 795, 998, 999, 1001, 1041], "homogeneity_completeness_v_measur": [2, 407, 1041], "homogeneity_scor": [2, 73, 82, 91, 351, 407, 717, 736, 795, 1001], "homomorph": 1020, "homoscedast": [127, 241, 313, 1001, 1040], "homoschedast": 1001, "honda": 51, "honei": 995, "hong": [1038, 1040, 1044, 1045, 1046, 1048, 1050], "hongh": 1040, "hongkahjun": 1039, "honglu": 1042, "hongshaoyang": 1047, "honl": [1044, 1045], "honolulu": 1001, "honor": 315, "hood": [401, 997, 1016], "hoover": [1037, 1038, 1039, 1041], "hope": [30, 44, 176, 229, 389, 1041], "hopefulli": [272, 383, 1032], "hopfensperg": [1049, 1050], "hopper": 1037, "horizont": [66, 120, 231, 243, 309, 312, 380, 389, 463, 515, 697, 701], "horizontal_distance_to_hydrologi": 490, "horizontalalign": [51, 63, 67, 75, 79, 95, 238, 254, 304, 311], "hornik": 635, "hornstein": 1047, "horrel": 1039, "hoshia": 1046, "hossein": [1040, 1041, 1042], "host": [0, 140, 324, 350, 370, 375, 379, 383, 384, 491, 897, 1048], "hot": [2, 43, 103, 139, 154, 186, 211, 278, 310, 311, 315, 320, 339, 389, 414, 415, 551, 566, 581, 648, 658, 659, 669, 680, 867, 869, 871, 872, 875, 877, 878, 885, 997, 1011, 1040, 1046, 1047], "hot_r": [51, 309], "hotel": 1025, "hotspot": 381, "hour": [43, 149, 186, 187, 325, 375, 381, 496, 998, 1019], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 149, 186], "hourly_wag": 185, "hous": [2, 107, 144, 154, 181, 182, 263, 309, 320, 368, 489, 1027], "house_pric": [107, 154], "houseag": [309, 320, 370, 489], "household": 370, "housestyl": [143, 154], "hover": 325, "hover_data": [140, 270], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 83, 84, 85, 86, 90, 93, 101, 102, 103, 106, 109, 111, 116, 129, 134, 135, 138, 142, 143, 144, 146, 147, 149, 152, 154, 165, 166, 177, 183, 186, 187, 188, 189, 191, 195, 200, 201, 202, 204, 208, 212, 213, 214, 215, 218, 219, 225, 229, 235, 236, 240, 243, 245, 247, 248, 249, 251, 260, 263, 264, 265, 267, 269, 270, 271, 276, 278, 279, 281, 283, 284, 288, 289, 291, 292, 293, 295, 296, 301, 306, 314, 316, 319, 320, 321, 324, 325, 336, 337, 339, 342, 343, 346, 350, 351, 354, 356, 357, 362, 363, 364, 370, 373, 374, 376, 377, 378, 380, 383, 388, 389, 390, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 504, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 622, 623, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 704, 720, 757, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 984, 990, 991, 995, 996, 997, 998, 1000, 1001, 1007, 1008, 1009, 1011, 1013, 1014, 1016, 1017, 1019, 1021, 1025, 1027, 1032, 1034, 1037, 1043, 1046, 1047, 1048], "howel": 1039, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 81, 82, 86, 88, 93, 104, 107, 109, 113, 115, 125, 127, 137, 139, 140, 143, 146, 147, 154, 165, 168, 170, 175, 176, 187, 188, 195, 201, 211, 215, 232, 235, 236, 238, 244, 245, 248, 263, 269, 276, 282, 283, 284, 286, 288, 289, 294, 305, 309, 320, 326, 343, 346, 350, 351, 356, 358, 362, 363, 364, 369, 370, 372, 374, 375, 377, 381, 383, 387, 389, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 439, 442, 446, 448, 450, 453, 458, 496, 508, 532, 541, 551, 567, 581, 582, 583, 589, 606, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 632, 633, 638, 643, 655, 656, 672, 687, 692, 695, 700, 763, 765, 800, 802, 803, 804, 814, 817, 820, 827, 831, 832, 843, 861, 862, 867, 876, 877, 882, 906, 907, 909, 926, 953, 969, 990, 991, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1015, 1016, 1017, 1041, 1042, 1044, 1045, 1048], "hoyer": [412, 1035], "hp": 51, "hpq": 51, "hrishikesh": [1033, 1034], "hristo": [1040, 1047], "hsiang": [658, 1036], "hsieh": 1038, "hspace": [45, 53, 54, 79, 95, 120, 229, 238, 254, 256, 257, 260, 294, 320, 329, 336], "hstack": [53, 69, 77, 156, 164, 236, 247, 264, 342, 411, 863], "hsuan": 1037, "ht2001": 1001, "htf": 414, "htm": [912, 913], "html": [2, 43, 47, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 191, 195, 239, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 370, 372, 375, 376, 378, 379, 383, 408, 411, 415, 421, 486, 508, 509, 658, 839, 843, 942, 943, 944, 999, 1020, 1021, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "htmledit": [839, 843, 999], "htmlparser": 47, "htsedebenham": 1047, "http": [43, 45, 47, 51, 52, 55, 61, 103, 168, 191, 211, 219, 227, 229, 236, 283, 286, 288, 289, 306, 369, 370, 372, 373, 375, 379, 380, 381, 383, 387, 389, 393, 407, 411, 416, 441, 448, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 508, 509, 510, 530, 531, 534, 537, 541, 595, 636, 641, 644, 649, 658, 664, 666, 667, 668, 671, 676, 679, 682, 683, 685, 686, 692, 695, 705, 721, 723, 724, 758, 759, 769, 839, 841, 843, 846, 847, 852, 853, 854, 855, 860, 882, 897, 898, 899, 912, 913, 942, 943, 997, 999, 1001, 1014, 1017, 1042], "hu": [1037, 1040, 1042], "hua": [563, 1007], "huang": [370, 658, 1038, 1043], "huangk10": 1043, "huard": 1032, "huber": [25, 196, 221, 414, 560, 649, 676, 678, 1015, 1032, 1034, 1035, 1044], "huberlossfunct": 1045, "huberregressor": [2, 87, 170, 183, 192, 209, 215, 216, 217, 316, 524, 670, 671, 672, 678, 679, 997, 1022, 1038, 1039, 1040, 1041], "hubert": [407, 705, 715, 786], "hubert1985": 705, "hudson": 323, "hue": [126, 149, 259, 269, 314, 372], "huerta": 1042, "hug": [0, 168, 396, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "huge": [213, 216, 362, 381, 627, 1035], "hugh": [879, 1034, 1045], "hugo": [45, 370, 1038, 1043, 1044, 1045, 1046], "hugorichard": 1044, "hugu": 1036, "hui": [199, 538, 540, 547, 656, 997], "huiginn": 1032, "huilgolkar": [1033, 1034], "hujiahong726": 1048, "hull": 1049, "humahn": 1047, "human": [120, 187, 350, 375, 407, 412, 861, 862, 1001, 1008, 1041], "humid": [43, 187, 1008], "hunan": 1040, "hundr": [77, 145, 232, 313, 370, 411, 414, 561, 562, 998, 1043], "hunt": 1047, "hunter": 1041, "hurt": [362, 534, 1040], "husak": 1046, "huszar": 1025, "hut": [692, 998, 1037, 1039, 1042], "huynh": [1042, 1044], "hv": 415, "hvassard": 1046, "hwan": 1043, "hwang": 1038, "hybrid": [445, 649, 1020], "hye": 1043, "hyper": [2, 43, 64, 103, 140, 262, 263, 269, 274, 307, 339, 358, 377, 387, 388, 389, 402, 411, 414, 416, 467, 644, 645, 804, 812, 814, 860, 902, 996, 997, 1001, 1004, 1015, 1016, 1020, 1027, 1032, 1046], "hyperband": 990, "hyperbol": [343, 642, 861, 862, 999, 1005], "hypercub": [238, 515], "hyperlink": 1034, "hyperparamet": [2, 103, 105, 106, 149, 170, 171, 177, 178, 181, 183, 187, 193, 197, 201, 225, 229, 238, 248, 261, 263, 267, 272, 274, 280, 281, 291, 307, 350, 377, 389, 407, 411, 412, 414, 417, 502, 535, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 653, 659, 665, 673, 676, 728, 785, 800, 814, 909, 990, 995, 996, 997, 1000, 1001, 1003, 1005, 1007, 1015, 1021, 1022, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048], "hyperparameter_baseline_similar": 178, "hyperparameter_grid": 325, "hyperparameter_length_scal": 615, "hyperplan": [136, 173, 183, 192, 220, 246, 272, 334, 335, 336, 337, 338, 339, 343, 344, 512, 631, 658, 659, 666, 668, 674, 675, 676, 677, 904, 906, 908, 909, 1015, 1016, 1022], "hyperplane_handl": 204, "hyperplane_label": 204, "hyperspher": 371, "hypothes": 997, "hypothesi": [146, 269, 275, 411, 690, 694, 829, 998], "hypothet": 64, "hyunjin": 1032, "hyvarinen": [419, 533], "h\u00e9lion": 1043, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 337, 338, 339, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 388, 389, 390, 392, 393, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947, 948, 950, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 969, 970, 971, 972, 974, 975, 981, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "i_ax": 289, "i_dataset": [79, 95, 238], "i_j": 1009, "iain": [168, 372, 997], "iampat": 1040, "ian": [1034, 1036, 1041, 1042, 1044, 1047, 1048, 1050], "iasoon": 1046, "ibay": 1032, "ibieta": 1045, "ibm": [51, 57, 332, 352, 370], "ibn": 1032, "ibnukhsein": 1049, "ibraheem": 1041, "ibrahima": 1042, "ibraim": [1037, 1038, 1039], "ib\u00e1\u00f1ez": [1040, 1041, 1044], "ic": [47, 286, 320, 369, 372, 392, 500, 502, 510, 632, 633, 1027, 1044, 1045], "ica": [11, 122, 419, 1017, 1026, 1027], "ica_estim": 120, "icann": 696, "icassp": 1001, "icdm": [563, 1007], "icdmw": 407, "ice_lines_kw": 632, "icml": [62, 64, 405, 407, 415, 436, 438, 839, 841, 860, 1001, 1003, 1015, 1019], "icml03": 841, "icml09": [531, 537], "icon": [325, 377], "icyblad": 1039, "id": [2, 45, 52, 57, 229, 302, 357, 369, 370, 375, 383, 409, 411, 415, 421, 494, 495, 496, 916, 918, 943, 1040, 1041, 1044], "id3": [1023, 1027], "idea": [44, 86, 111, 112, 140, 168, 175, 186, 212, 231, 263, 294, 339, 354, 362, 363, 375, 380, 381, 409, 410, 411, 412, 413, 414, 416, 607, 608, 997, 998, 1001, 1004, 1007, 1019, 1025], "ideal": [211, 213, 229, 263, 266, 269, 276, 278, 279, 358, 374, 375, 376, 379, 380, 383, 387, 389, 405, 406, 726, 756, 990, 1000, 1015, 1016, 1021, 1024], "idelberg": 1049, "ident": [52, 57, 97, 145, 207, 211, 229, 238, 242, 333, 350, 370, 377, 389, 404, 407, 408, 409, 411, 417, 420, 437, 438, 451, 463, 464, 472, 474, 475, 478, 479, 480, 487, 503, 551, 559, 560, 564, 565, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 643, 679, 680, 699, 704, 705, 736, 785, 795, 802, 805, 815, 816, 819, 820, 846, 847, 853, 861, 862, 868, 869, 881, 893, 912, 913, 994, 995, 998, 1001, 1004, 1005, 1016, 1036, 1040, 1041, 1042, 1046, 1050], "identif": [370, 375, 407, 497, 990], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 370, 374, 375, 380, 389, 406, 407, 408, 411, 414, 415, 445, 449, 456, 486, 496, 508, 509, 555, 556, 557, 558, 563, 564, 565, 566, 606, 643, 649, 699, 712, 774, 829, 850, 869, 899, 900, 990, 997, 1001, 1007, 1014, 1025, 1039, 1041, 1046, 1047], "idf": [2, 54, 57, 242, 350, 351, 352, 370, 412, 521, 544, 588, 589, 590, 591, 843, 851, 876, 990, 999, 1003, 1011, 1032], "idf_": [415, 590, 591, 1040], "idier": [412, 538, 540, 547], "idiom": 381, "idl": 1043, "ido": [1047, 1048], "idpol": [211, 229], "idx": [50, 57, 88, 129, 136, 140, 142, 149, 155, 179, 187, 189, 197, 210, 211, 220, 232, 263, 355, 408, 411], "idx_a": 278, "idx_avg_max_test_scor": 282, "idx_b": 278, "idx_r": 210, "idx_sort": 211, "idxmax": 346, "idxmin": 267, "ie": [75, 99, 121, 439, 704, 997, 1011], "ieee": [96, 110, 112, 372, 407, 409, 416, 420, 447, 474, 534, 563, 664, 685, 686, 725, 769, 997, 1001, 1007], "ieeexplor": 769, "ieic": [538, 540, 547], "iem": 658, "if_binari": [186, 252, 877, 1011, 1043], "if_delegate_has_method": [1045, 1046], "iff": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 875], "iforest": 248, "iforest_kw": 248, "iglesi": 1047, "ignacio": 1035, "ignor": [2, 43, 45, 47, 55, 79, 82, 88, 95, 103, 134, 139, 143, 151, 154, 187, 199, 211, 226, 239, 240, 245, 250, 252, 260, 305, 306, 314, 315, 319, 322, 343, 351, 363, 375, 377, 379, 381, 389, 393, 398, 407, 408, 414, 415, 425, 426, 429, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 459, 460, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 503, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 581, 582, 583, 588, 589, 590, 591, 597, 602, 603, 610, 611, 627, 628, 629, 630, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 707, 711, 713, 714, 726, 729, 730, 738, 755, 756, 763, 769, 774, 778, 783, 784, 787, 788, 797, 798, 799, 801, 802, 803, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 923, 937, 975, 984, 989, 997, 998, 1001, 1003, 1007, 1011, 1016, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "ignore_attribut": 369, "ignore_error": 87, "ignore_implicit_zero": [881, 893], "ignore_ti": [726, 756], "ignore_warn": [219, 311, 1038], "ignored_new_col": 408, "ignorerevsfil": 375, "igor": [1038, 1039, 1045], "ih": 294, "ii": [50, 121, 187, 218, 264, 372, 415, 582, 583, 589, 638, 666, 667, 867, 876, 997, 1011, 1019, 1049], "iid": 1040, "iii": [1046, 1049], "iijima": 1041, "iinfo": 1047, "ij": [269, 299, 404, 407, 412, 538, 540, 547, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 997, 998, 1001, 1003, 1006, 1011, 1016], "ijcnn": 1001, "ijcv": 1001, "ijet": 407, "ik": [997, 1001], "ikeda": 1044, "ikko": 1045, "il": [49, 664, 685, 686, 997, 1001], "ilambharathi": [1035, 1036], "ili": [1048, 1049], "ilic": 1045, "ilion": 1046, "iliya": 1047, "iljin": [1047, 1048], "ill": [75, 113, 216, 307, 470, 471, 477, 650, 651, 654, 655, 656, 682, 683, 997, 1000, 1042], "illustr": [48, 52, 60, 61, 63, 67, 69, 85, 89, 90, 102, 103, 106, 107, 109, 111, 116, 118, 122, 134, 137, 148, 149, 151, 153, 154, 163, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 183, 185, 187, 188, 191, 201, 211, 213, 215, 219, 221, 222, 224, 225, 228, 229, 231, 232, 234, 236, 238, 240, 241, 243, 244, 245, 247, 258, 263, 269, 276, 281, 283, 290, 298, 312, 314, 317, 318, 320, 326, 331, 339, 340, 344, 346, 347, 348, 351, 352, 358, 362, 372, 375, 380, 383, 388, 406, 410, 412, 414, 415, 515, 610, 611, 613, 614, 615, 619, 622, 623, 853, 990, 997, 1001, 1004, 1007, 1013, 1014, 1015, 1016, 1020, 1022, 1025], "iloc": [43, 149, 154, 186, 187, 229, 269, 292], "ilya": [1039, 1050], "im": [120, 130, 280, 293], "im_": 697, "im_kw": [697, 1046], "imacul": 1038, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 80, 84, 87, 89, 91, 95, 100, 102, 119, 120, 125, 166, 168, 174, 183, 203, 232, 240, 243, 247, 267, 298, 306, 307, 319, 328, 329, 350, 351, 367, 368, 370, 372, 375, 380, 383, 389, 393, 400, 406, 407, 412, 440, 444, 451, 461, 493, 494, 495, 496, 502, 503, 506, 507, 534, 535, 537, 541, 583, 584, 585, 586, 587, 607, 608, 691, 697, 738, 830, 874, 997, 1001, 1002, 1004, 1006, 1013, 1017, 1020, 1022, 1025, 1027, 1032, 1035, 1040, 1041, 1045, 1047, 1048], "image_height": [583, 584, 587], "image_index": [328, 329], "image_nam": 506, "image_patch": 587, "image_reconstruct": 587, "image_s": 587, "image_shap": [120, 247], "image_width": [583, 584, 587], "imagebox": 232, "imageio": 369, "imagenet": [861, 862], "images_restor": 84, "imagin": [121, 170, 245, 343, 411, 412, 415, 997], "imamura": 1046, "imbal": [262, 272, 283, 411, 707, 729, 730, 738, 783, 784, 787, 788, 1001], "imbalanc": [211, 263, 272, 276, 278, 283, 351, 387, 405, 411, 703, 708, 787, 801, 805, 841, 1001, 1003, 1009, 1020], "imbert": [1039, 1041, 1044, 1046, 1049, 1050], "img": [44, 83, 99, 506, 586], "img_height": 583, "img_to_graph": [2, 80, 99, 415, 1035, 1045], "img_width": 583, "imit": 350, "immanuel": [0, 1032, 1033, 1037], "immedi": [88, 375, 387, 800, 814, 825, 826, 1040], "immens": 1025, "immensu": 1040, "immers": [690, 694], "immobil": 43, "immut": 401, "imp": 991, "imp_mean": [627, 630], "impact": [51, 52, 62, 71, 72, 77, 78, 97, 107, 134, 164, 183, 185, 186, 187, 194, 213, 215, 229, 248, 262, 263, 286, 292, 314, 323, 346, 351, 358, 362, 363, 368, 387, 390, 405, 407, 412, 446, 448, 536, 540, 547, 590, 666, 667, 668, 672, 674, 676, 677, 678, 692, 794, 800, 803, 804, 814, 827, 844, 845, 846, 847, 881, 893, 904, 905, 933, 948, 971, 974, 990, 1000, 1008, 1016, 1022, 1039, 1042, 1045], "imped": 383, "imperfect": [728, 785, 1001, 1034], "imperfectli": [703, 734, 1001], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 80, 89, 112, 120, 140, 149, 182, 189, 191, 197, 201, 208, 225, 229, 231, 238, 244, 245, 263, 267, 269, 278, 286, 288, 289, 291, 294, 312, 318, 319, 320, 321, 322, 324, 350, 352, 362, 363, 364, 369, 370, 372, 373, 375, 376, 377, 380, 381, 383, 384, 389, 393, 398, 403, 404, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 436, 441, 442, 443, 445, 446, 447, 448, 449, 474, 493, 496, 508, 532, 533, 534, 535, 536, 538, 541, 542, 543, 553, 554, 555, 557, 558, 561, 562, 563, 567, 572, 582, 588, 589, 591, 593, 597, 601, 610, 611, 632, 633, 640, 641, 645, 646, 653, 657, 658, 659, 663, 664, 668, 671, 672, 674, 675, 676, 677, 678, 684, 685, 686, 687, 688, 691, 692, 695, 707, 711, 720, 735, 738, 742, 778, 782, 788, 789, 797, 799, 800, 803, 804, 806, 814, 818, 819, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 849, 852, 854, 855, 860, 861, 862, 864, 886, 894, 895, 901, 904, 905, 906, 907, 908, 909, 910, 947, 948, 957, 960, 965, 969, 971, 990, 991, 993, 995, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1011, 1013, 1014, 1017, 1018, 1020, 1021, 1023, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "impli": [43, 170, 186, 350, 351, 352, 412, 414, 417, 473, 573, 582, 610, 611, 622, 735, 934, 997, 998, 1043], "implic": [358, 375], "implicit": [2, 211, 389, 414, 415, 572, 682, 683, 995, 1000, 1020, 1041], "implicitli": [352, 384, 414, 597, 632, 633, 846, 854, 883, 991, 993, 1008, 1011, 1016, 1050], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 392, 393, 394, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 961, 962, 963, 964, 965, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1022, 1025, 1027, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1050], "importance_gett": [416, 593, 594, 597, 1044], "importances_mean": [141, 147, 188, 189, 318, 634, 1009], "importances_std": [141, 634, 1009], "important_word": 57, "importantli": [43, 53, 121, 176, 187, 191, 309, 375, 407, 1050], "importerror": [50, 86, 123, 289, 302, 383], "importlib": 1045, "impos": [74, 90, 151, 200, 206, 215, 315, 387, 407, 412, 414, 415, 527, 657, 997], "imposs": [146, 352, 1021], "impract": 909, "impress": 1025, "improp": [389, 1039], "improv": [0, 30, 43, 61, 62, 69, 109, 110, 113, 125, 130, 134, 135, 140, 142, 144, 145, 146, 148, 149, 154, 164, 182, 186, 191, 198, 211, 219, 229, 263, 270, 272, 286, 289, 292, 307, 314, 324, 342, 343, 351, 358, 363, 373, 378, 380, 381, 383, 384, 387, 389, 390, 401, 412, 414, 416, 448, 449, 531, 532, 534, 537, 538, 539, 541, 542, 543, 546, 554, 557, 558, 559, 560, 561, 562, 564, 565, 610, 611, 643, 652, 664, 666, 667, 668, 672, 673, 674, 675, 676, 678, 685, 687, 692, 729, 730, 783, 784, 787, 788, 853, 861, 862, 878, 880, 892, 912, 913, 915, 948, 990, 995, 997, 998, 1001, 1004, 1005, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "improvis": [50, 302], "impur": [147, 189, 357, 392, 414, 416, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 916, 918, 1017, 1027, 1037, 1038, 1039, 1040], "imput": [2, 103, 149, 154, 188, 240, 250, 252, 319, 322, 367, 379, 388, 389, 398, 408, 414, 489, 501, 565, 580, 627, 628, 629, 630, 639, 645, 672, 826, 847, 865, 929, 931, 1020, 1021, 1022, 1027, 1034, 1035], "imputation_const": 250, "imputation_mean": 250, "imputation_ord": [627, 1042], "imputation_sequence_": 627, "impute_estim": 181, "impute_scor": 182, "imran": [1034, 1035, 1036], "imread": 68, "imshow": [44, 45, 53, 68, 75, 80, 81, 83, 84, 86, 87, 91, 113, 120, 123, 130, 172, 173, 174, 178, 189, 203, 227, 232, 247, 280, 293, 307, 328, 329, 339, 347, 369, 632, 697, 1046], "in1d": 1039, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 88, "inact": [352, 369, 375], "inadvert": [185, 389], "inadvis": 401, "inappropri": [370, 411, 417, 709, 821], "inbuilt": 411, "inc": [0, 102, 268, 991, 1013, 1025], "incap": 88, "incentiv": 379, "incept": 1021, "includ": [0, 11, 18, 43, 68, 70, 88, 111, 140, 143, 144, 145, 185, 186, 188, 197, 211, 215, 229, 245, 270, 286, 289, 305, 309, 321, 322, 324, 339, 344, 350, 352, 358, 362, 363, 369, 371, 373, 375, 376, 377, 379, 380, 381, 383, 384, 389, 390, 393, 401, 404, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 443, 445, 449, 455, 465, 468, 469, 470, 471, 472, 473, 474, 475, 488, 489, 490, 496, 500, 501, 502, 504, 505, 510, 534, 541, 557, 564, 574, 632, 638, 646, 647, 652, 660, 661, 662, 665, 681, 688, 689, 697, 713, 729, 730, 735, 737, 738, 771, 783, 784, 787, 795, 800, 802, 803, 804, 813, 814, 817, 820, 827, 830, 852, 854, 855, 856, 877, 878, 879, 883, 901, 904, 905, 912, 914, 916, 918, 930, 931, 934, 936, 940, 942, 943, 957, 990, 997, 1000, 1001, 1002, 1004, 1005, 1011, 1015, 1016, 1017, 1020, 1021, 1024, 1025, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "include_bia": [43, 193, 284, 879, 883, 1046], "include_boundari": [934, 1046], "include_self": [74, 79, 100, 695, 857, 858, 1036], "include_valu": 697, "inclus": [0, 375, 377, 383, 449, 455, 754, 786, 1001, 1002, 1032, 1046], "incom": [309, 370, 439], "incoming_count": 55, "incompat": [496, 991, 1040, 1041], "incomplet": [375, 393, 403, 407, 705, 795, 991, 998, 1036, 1038], "inconsist": [2, 389, 401, 415, 508, 509, 576, 906, 909, 934, 1007, 1016, 1027, 1032, 1037, 1038, 1039, 1040, 1042, 1045, 1047, 1048, 1049], "inconsistentversionwarn": [2, 401, 1048], "incorpor": [324, 375, 408, 414, 1000, 1020, 1025], "incorrect": [134, 185, 331, 358, 375, 407, 607, 608, 632, 633, 734, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "incorrectli": [195, 276, 414, 415, 553, 559, 561, 734, 740, 1001, 1033, 1038, 1040, 1041, 1043, 1048], "incr_mean_variance_axi": [2, 1038, 1044], "increas": [2, 43, 46, 54, 63, 72, 78, 88, 90, 91, 94, 107, 123, 134, 135, 137, 140, 142, 144, 149, 151, 164, 168, 170, 174, 175, 176, 186, 187, 191, 194, 196, 203, 211, 212, 213, 215, 229, 236, 242, 255, 256, 263, 269, 270, 271, 276, 282, 283, 304, 310, 311, 314, 320, 326, 329, 339, 346, 351, 352, 354, 362, 363, 364, 374, 383, 384, 389, 405, 407, 409, 412, 414, 415, 418, 439, 443, 445, 451, 462, 470, 471, 477, 532, 536, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 627, 635, 636, 637, 645, 650, 651, 654, 655, 656, 658, 659, 666, 667, 668, 676, 677, 678, 682, 683, 685, 686, 692, 706, 707, 712, 778, 782, 789, 803, 804, 833, 852, 854, 855, 856, 859, 861, 862, 878, 904, 912, 913, 914, 915, 948, 990, 992, 996, 997, 998, 1000, 1001, 1004, 1011, 1015, 1016, 1017, 1025, 1032, 1034, 1037, 1041, 1043, 1044, 1047, 1050], "increasing_": 635, "increasing_bool": 636, "increment": [2, 104, 119, 125, 126, 127, 128, 183, 272, 379, 381, 441, 446, 462, 504, 533, 534, 535, 536, 539, 541, 544, 602, 646, 658, 666, 806, 828, 836, 837, 839, 840, 841, 842, 843, 873, 874, 884, 904, 905, 975, 997, 1003, 1022, 1035, 1036], "incrementalpca": [2, 124, 364, 412, 533, 535, 539, 541, 544, 1036, 1039, 1040, 1042, 1043, 1046], "incur": [63, 619, 904, 1016, 1040], "ind": [53, 77, 145, 156, 351, 844, 845], "inde": [44, 46, 62, 64, 70, 74, 75, 86, 88, 91, 113, 116, 125, 134, 137, 167, 168, 170, 186, 188, 193, 197, 199, 201, 211, 213, 271, 272, 276, 278, 286, 289, 309, 314, 346, 351, 358, 362, 374, 380, 388, 389, 390, 407, 409, 414, 567, 568, 997, 1011, 1015, 1046], "indecisiveus": [1043, 1044], "indefinit": 379, "indent": [377, 966], "independ": [2, 32, 52, 62, 64, 72, 80, 121, 122, 124, 139, 142, 177, 187, 204, 247, 248, 269, 272, 274, 278, 288, 309, 316, 318, 351, 358, 362, 363, 371, 377, 388, 389, 393, 401, 404, 405, 407, 408, 409, 410, 411, 415, 419, 448, 463, 487, 503, 515, 516, 517, 518, 520, 532, 533, 535, 537, 539, 540, 546, 547, 551, 552, 604, 607, 608, 625, 640, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 704, 705, 717, 736, 737, 755, 757, 795, 802, 829, 833, 835, 837, 838, 876, 880, 881, 882, 884, 888, 889, 890, 891, 893, 894, 895, 898, 906, 907, 908, 909, 910, 942, 990, 993, 995, 997, 998, 1001, 1002, 1003, 1006, 1008, 1011, 1016, 1017, 1026, 1027, 1032, 1033, 1038, 1040, 1042, 1047], "inder128": 1042, "inderjeet": 1043, "inderjit": [404, 452], "indeterminaci": 544, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 82, 83, 91, 103, 104, 134, 139, 141, 149, 165, 168, 181, 185, 186, 187, 188, 189, 211, 215, 229, 249, 252, 255, 256, 260, 264, 267, 268, 269, 270, 272, 280, 281, 282, 283, 289, 309, 314, 315, 316, 322, 326, 328, 329, 351, 352, 370, 372, 373, 375, 377, 379, 384, 387, 389, 404, 408, 411, 412, 414, 415, 422, 442, 446, 447, 448, 449, 450, 452, 453, 456, 458, 459, 463, 466, 503, 509, 557, 558, 559, 560, 564, 565, 566, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 617, 632, 633, 640, 697, 704, 705, 712, 716, 718, 731, 738, 757, 779, 780, 786, 788, 794, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 830, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 877, 912, 913, 914, 915, 921, 952, 971, 974, 979, 980, 1001, 1003, 1004, 1005, 1015, 1017, 1020, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "index_alpha_path_a": 199, "index_alpha_path_b": 199, "index_map": 55, "indexerror": [1040, 1041], "indexhash": 640, "indexhash_": 640, "indian": 370, "indic": [2, 51, 57, 58, 62, 63, 92, 93, 99, 107, 116, 120, 126, 134, 139, 144, 175, 178, 182, 185, 187, 233, 242, 245, 262, 263, 271, 272, 275, 276, 289, 302, 328, 329, 332, 350, 351, 352, 357, 363, 370, 375, 376, 377, 379, 383, 384, 387, 389, 403, 404, 405, 407, 409, 411, 412, 414, 415, 418, 422, 427, 436, 439, 443, 449, 450, 451, 452, 454, 455, 456, 459, 463, 466, 471, 486, 508, 509, 511, 512, 513, 523, 532, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 581, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 620, 627, 628, 629, 630, 632, 633, 639, 646, 647, 650, 651, 652, 653, 654, 655, 661, 663, 665, 673, 675, 682, 683, 690, 692, 694, 696, 703, 707, 712, 713, 718, 719, 720, 722, 725, 728, 729, 730, 731, 734, 738, 739, 740, 741, 754, 771, 778, 779, 780, 781, 783, 784, 785, 787, 788, 792, 793, 794, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 837, 838, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 868, 871, 875, 877, 885, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 921, 926, 930, 931, 936, 952, 963, 964, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 991, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1012, 1015, 1016, 1021, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1045, 1047, 1048, 1049, 1050], "indicator_": [627, 628, 630], "indicator_matrix_": 1037, "indigo": 228, "indirect": [272, 376, 389], "indirectli": [229, 343], "indispens": 1025, "indistinguish": 309, "individu": [2, 43, 80, 93, 111, 133, 135, 137, 153, 154, 163, 166, 179, 183, 184, 186, 189, 208, 211, 229, 239, 248, 249, 263, 272, 274, 288, 318, 325, 326, 343, 346, 363, 376, 377, 379, 382, 384, 389, 392, 398, 404, 408, 411, 414, 415, 436, 451, 461, 463, 496, 501, 503, 509, 555, 556, 559, 560, 562, 563, 565, 567, 568, 569, 570, 603, 609, 610, 632, 633, 643, 645, 657, 658, 659, 668, 671, 672, 673, 674, 675, 676, 677, 678, 687, 712, 719, 728, 734, 750, 751, 785, 790, 791, 800, 814, 832, 836, 837, 839, 840, 841, 842, 843, 862, 865, 873, 874, 876, 877, 878, 881, 883, 884, 889, 890, 891, 904, 905, 1001, 1002, 1011, 1016, 1022, 1027, 1033, 1036, 1038, 1044, 1046, 1048], "indptr": [55, 289, 357, 975, 976, 977, 978, 979, 980, 981, 982, 983, 1040, 1048], "induc": [25, 63, 89, 186, 197, 203, 205, 209, 212, 226, 244, 248, 346, 352, 404, 412, 414, 445, 448, 539, 543, 553, 557, 558, 559, 560, 564, 565, 566, 643, 726, 756, 877, 912, 913, 914, 915, 994, 1001, 1015], "induct": [43, 71, 132, 146, 178, 183, 389, 407, 414, 421, 440, 512, 564, 627, 631, 899, 900, 961, 984, 997, 1014, 1022, 1034], "inductive_learn": 89, "inductivecluster": 89, "industri": [407, 1020], "ineffect": [313, 405, 1011, 1040, 1041], "ineffici": [2, 414, 442, 574, 832, 833, 1004, 1006], "inequ": [357, 389, 407, 442, 446, 458, 699, 998, 999, 1004], "inertia": [90, 91, 94, 351, 407, 442, 446, 448, 451, 458, 459, 461, 462, 1043], "inertia_": [91, 94, 97, 442, 446, 448, 1043], "inf": [107, 173, 299, 384, 407, 417, 445, 449, 454, 455, 456, 460, 470, 471, 477, 553, 554, 559, 560, 593, 594, 597, 606, 607, 608, 619, 627, 635, 637, 648, 649, 650, 652, 669, 671, 672, 676, 677, 678, 680, 687, 728, 730, 746, 778, 785, 789, 860, 869, 876, 928, 929, 930, 931, 946, 1001, 1011, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050], "infant": 1011, "infeas": [997, 1004, 1006], "infer": [25, 183, 184, 186, 207, 255, 259, 260, 269, 355, 369, 377, 387, 401, 411, 412, 491, 496, 508, 509, 515, 534, 536, 538, 540, 547, 549, 550, 553, 559, 560, 632, 635, 657, 709, 722, 723, 741, 785, 797, 798, 806, 823, 830, 840, 878, 885, 899, 900, 912, 913, 914, 915, 963, 991, 997, 1000, 1001, 1006, 1011, 1014, 1017, 1020, 1021, 1022, 1033, 1037, 1038, 1043, 1046, 1049], "inferencesess": 401, "inferenti": 89, "inferior": [440, 444, 1043], "infin": [2, 269, 346, 541, 682, 683, 712, 825, 911, 929, 1004], "infinit": [64, 212, 254, 272, 343, 362, 417, 445, 622, 623, 778, 797, 928, 930, 931, 993, 1000, 1011, 1016, 1040, 1042, 1045, 1046, 1047, 1049, 1050], "inflammatori": 370, "inflat": [90, 185, 186, 188, 407, 411, 1001, 1011], "inflect": 271, "influenc": [42, 48, 52, 111, 112, 134, 183, 186, 196, 244, 254, 277, 309, 316, 339, 343, 346, 356, 358, 364, 409, 412, 414, 430, 439, 453, 464, 481, 482, 483, 488, 501, 554, 556, 558, 560, 562, 565, 568, 570, 611, 628, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 734, 750, 830, 837, 838, 846, 847, 854, 855, 862, 881, 882, 893, 905, 907, 910, 913, 915, 930, 990, 995, 996, 997, 1004, 1007, 1011, 1015, 1016, 1022, 1025, 1035, 1040, 1041], "influenti": [215, 351, 1025], "info": [2, 45, 77, 103, 120, 186, 187, 245, 263, 267, 372, 374, 379, 389, 415, 463, 496, 561, 562, 956], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 82, 86, 91, 99, 100, 102, 103, 116, 140, 141, 162, 164, 165, 167, 168, 170, 175, 183, 186, 187, 189, 191, 192, 193, 194, 197, 212, 215, 226, 228, 229, 245, 249, 256, 257, 259, 263, 264, 266, 269, 270, 271, 274, 276, 278, 282, 292, 295, 296, 299, 316, 321, 325, 342, 346, 350, 351, 352, 355, 357, 358, 362, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 383, 387, 388, 389, 390, 398, 401, 404, 406, 411, 412, 414, 415, 416, 417, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 492, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 510, 515, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 607, 608, 609, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 695, 697, 701, 704, 705, 715, 726, 730, 743, 755, 756, 757, 786, 788, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 923, 957, 984, 989, 991, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1015, 1017, 1021, 1022, 1024, 1025, 1032, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "informatik": 1001, "informed": 1001, "infrastructur": [306, 324, 1020, 1021], "infrequ": [877, 878, 885, 1001, 1032, 1046, 1047, 1048], "infrequent_categories_": [322, 324, 877, 878, 885, 1011], "infrequent_if_exist": [877, 1011], "infrequent_sklearn": [877, 1011], "infti": [229, 417, 619, 997, 1011, 1039], "ing": 415, "ingela": 1046, "ingest": 415, "ingredi": 417, "ingrid": 1042, "inher": [130, 207, 358, 407, 412, 563, 991, 993, 995, 996, 998, 1002], "inherit": [245, 375, 377, 388, 389, 421, 577, 676, 924, 940, 942, 953, 997, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1047, 1048, 1049], "inhibit": [418, 443], "inhomogen": [417, 614], "ini": 257, "init": [2, 54, 77, 91, 92, 94, 97, 187, 194, 231, 232, 234, 235, 236, 255, 257, 289, 351, 378, 383, 407, 412, 414, 442, 446, 448, 450, 452, 458, 459, 538, 540, 547, 548, 559, 560, 632, 633, 690, 692, 694, 853, 998, 1032, 1041, 1044, 1046, 1047, 1048], "init_": [559, 560], "init_param": [254, 257, 260, 797, 798], "init_s": [94, 351, 448], "init_size_": 1044, "init_tim": 257, "initi": [0, 46, 51, 55, 71, 77, 78, 90, 91, 93, 96, 97, 112, 147, 155, 156, 157, 171, 176, 183, 186, 194, 205, 226, 231, 232, 236, 253, 255, 256, 269, 289, 320, 330, 339, 351, 358, 363, 370, 375, 377, 383, 384, 387, 389, 407, 412, 414, 416, 417, 419, 441, 442, 446, 447, 448, 449, 450, 451, 452, 458, 459, 460, 461, 512, 515, 531, 532, 533, 537, 538, 540, 543, 545, 546, 547, 548, 553, 554, 559, 560, 563, 593, 607, 608, 610, 611, 619, 620, 627, 640, 645, 646, 647, 648, 652, 653, 658, 660, 661, 662, 663, 666, 667, 668, 669, 671, 676, 677, 678, 680, 681, 684, 690, 691, 692, 694, 695, 797, 798, 834, 853, 860, 861, 862, 900, 933, 947, 948, 969, 974, 975, 993, 997, 998, 1000, 1005, 1006, 1007, 1015, 1017, 1020, 1022, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "initial_imputer_": 627, "initial_strategi": 627, "initial_theta": [610, 611], "initialis": [120, 538, 540, 547, 1032, 1040, 1041], "initializedcheck": 376, "inject": [248, 370, 414], "inki": 1038, "inli": [238, 997, 1007], "inlier": [111, 150, 214, 238, 248, 309, 389, 409, 429, 468, 563, 671, 677, 850, 881, 893, 907, 908, 910, 997, 1007, 1039, 1040, 1045], "inlier_mask": 214, "inlier_mask_": [214, 671], "inlier_plot": 111, "inliers_mask": 112, "inlin": [222, 375, 376, 1017], "inner": [64, 125, 146, 149, 270, 274, 288, 330, 362, 415, 442, 514, 582, 589, 618, 648, 669, 680, 775, 777, 993, 1001, 1011, 1016, 1033, 1036, 1046, 1049], "inner_clf": 1001, "inner_cv": [274, 325], "inner_it": 381, "inner_numb": 330, "inner_stat": 1046, "inner_stats_": 1046, "inpaint": 412, "inplac": [2, 229, 248, 281, 453, 481, 482, 483, 484, 859, 867, 870, 873, 874, 876, 880, 881, 882, 884, 973, 976, 977, 978, 982, 983, 1041], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 384], "inplace_csr_row_normalize_l1": [2, 384], "inplace_csr_row_normalize_l2": [2, 384], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 105, 120, 124, 142, 146, 147, 176, 177, 178, 186, 191, 193, 211, 214, 215, 219, 226, 229, 241, 242, 244, 245, 252, 264, 282, 286, 293, 294, 306, 310, 311, 312, 313, 318, 321, 323, 326, 339, 343, 347, 352, 369, 372, 375, 378, 380, 384, 385, 387, 388, 389, 401, 404, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 425, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 444, 447, 448, 449, 453, 456, 457, 460, 463, 464, 466, 467, 468, 470, 471, 481, 482, 483, 488, 503, 509, 516, 517, 518, 520, 524, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 620, 622, 627, 628, 629, 630, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 696, 697, 698, 699, 700, 701, 702, 721, 722, 723, 724, 728, 745, 746, 748, 750, 751, 753, 754, 761, 767, 771, 772, 774, 778, 779, 780, 781, 785, 790, 791, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 891, 892, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 921, 923, 924, 925, 927, 928, 929, 930, 931, 932, 936, 942, 945, 947, 957, 959, 960, 964, 973, 975, 981, 982, 983, 986, 987, 989, 991, 993, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "input_featur": [193, 377, 389, 423, 428, 441, 442, 444, 446, 448, 463, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 1048], "input_nam": [929, 931, 963, 1046], "input_tag": 923, "input_typ": [352, 415, 582], "inputtag": [2, 923], "inria": [0, 658, 1032], "insensit": [244, 643, 676, 678, 788, 905, 994, 1015, 1016, 1032], "insepar": [168, 372], "insert": [93, 186, 211, 387, 407, 486, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 919], "insid": [2, 55, 57, 63, 187, 213, 245, 269, 330, 339, 364, 369, 370, 377, 381, 398, 407, 415, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 957, 960, 1008, 1025, 1049], "insight": [43, 46, 186, 187, 200, 212, 213, 229, 263, 306, 309, 350, 357, 405, 406, 800, 803, 804, 814, 827, 1008, 1017, 1025], "insist": 102, "inspect": [2, 43, 48, 66, 67, 70, 89, 94, 136, 141, 147, 149, 150, 151, 155, 165, 170, 175, 176, 186, 187, 188, 189, 204, 220, 225, 249, 263, 269, 272, 281, 292, 297, 300, 314, 318, 319, 320, 321, 323, 325, 335, 336, 337, 338, 340, 341, 343, 350, 355, 363, 377, 389, 407, 408, 414, 415, 463, 553, 554, 557, 558, 559, 560, 564, 565, 566, 631, 632, 633, 634, 833, 864, 865, 912, 913, 914, 915, 988, 1001, 1002, 1005, 1008, 1009, 1016, 1020, 1022, 1027, 1035], "inspir": [110, 151, 187, 229, 375, 387, 414, 561, 562, 935, 991, 1041], "instabl": [74, 186, 299, 417, 451, 535, 539, 543, 695, 1039, 1042, 1045], "instal": [86, 252, 289, 318, 319, 320, 321, 322, 323, 324, 325, 326, 362, 363, 375, 376, 378, 379, 381, 383, 387, 388, 394, 400, 401, 403, 407, 415, 451, 461, 496, 691, 695, 1017, 1039, 1040, 1041, 1045, 1046], "installment_commit": 263, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 86, 89, 91, 137, 149, 165, 168, 182, 187, 188, 197, 240, 245, 248, 263, 265, 267, 278, 280, 281, 300, 318, 325, 333, 335, 336, 342, 343, 350, 351, 352, 361, 362, 363, 369, 370, 372, 373, 374, 375, 377, 380, 381, 383, 384, 387, 389, 393, 398, 401, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 431, 432, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 461, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 490, 492, 495, 496, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 620, 627, 628, 629, 630, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 707, 720, 729, 730, 738, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 789, 792, 793, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 809, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 930, 931, 933, 942, 943, 947, 948, 956, 957, 958, 959, 969, 970, 971, 974, 984, 985, 989, 990, 991, 997, 998, 1001, 1003, 1004, 1007, 1009, 1011, 1015, 1016, 1017, 1021, 1027, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "instanci": 1041, "instant": 206, "instantan": 508, "instanti": [104, 173, 321, 378, 398, 414, 449, 567, 568, 602, 630, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 938, 1007, 1032, 1040, 1044, 1048], "instead": [0, 43, 44, 45, 52, 58, 86, 88, 89, 90, 103, 125, 137, 151, 165, 168, 170, 211, 213, 226, 229, 235, 248, 260, 265, 266, 270, 271, 282, 288, 294, 309, 318, 319, 320, 321, 322, 339, 341, 343, 350, 352, 357, 358, 362, 363, 369, 370, 373, 374, 375, 376, 377, 379, 380, 383, 384, 387, 388, 389, 398, 401, 403, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 430, 436, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 455, 458, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 509, 510, 533, 534, 535, 536, 538, 540, 541, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 630, 632, 635, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 694, 707, 709, 746, 774, 778, 779, 780, 782, 783, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 812, 814, 816, 818, 819, 820, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 865, 866, 867, 869, 870, 871, 876, 877, 882, 883, 884, 894, 895, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 918, 936, 943, 948, 957, 975, 990, 991, 993, 997, 998, 1000, 1001, 1002, 1005, 1006, 1011, 1015, 1016, 1017, 1020, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "instinct": 350, "institut": [0, 263, 372, 1004], "instruct": [362, 375, 376, 377, 378, 379, 380, 383, 387, 388, 389, 503, 588, 589, 591, 1024, 1032], "instrument": [51, 102, 121, 185], "insuffici": [392, 1000], "insur": [183, 192, 211, 406, 463, 496, 552, 648, 669, 680, 706, 745, 750, 752, 830, 865, 868, 869, 877, 884, 997, 1022], "int": [47, 49, 52, 53, 55, 72, 79, 95, 112, 137, 145, 149, 150, 160, 161, 171, 172, 173, 179, 182, 185, 195, 203, 205, 211, 229, 236, 238, 244, 248, 254, 263, 264, 267, 268, 269, 289, 294, 296, 302, 316, 329, 352, 370, 375, 377, 387, 389, 405, 408, 411, 415, 418, 419, 422, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 707, 709, 713, 726, 727, 729, 730, 731, 734, 738, 756, 757, 769, 774, 778, 779, 780, 781, 782, 783, 784, 787, 789, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 926, 930, 931, 933, 934, 947, 948, 950, 951, 952, 954, 965, 969, 971, 974, 979, 980, 997, 1008, 1032, 1038, 1042, 1043], "int32": [248, 289, 316, 375, 389, 442, 446, 448, 450, 452, 458, 906, 907, 908, 909, 910, 965, 1016, 1041, 1047, 1048, 1049], "int64": [43, 53, 87, 103, 186, 187, 263, 278, 283, 286, 315, 325, 357, 389, 415, 425, 441, 447, 449, 496, 514, 515, 519, 585, 588, 640, 646, 647, 652, 653, 665, 714, 715, 718, 744, 794, 840, 869, 898, 928, 955, 986, 1002, 1040, 1043, 1045, 1047, 1048, 1049], "int64dtyp": 1049, "intact": 877, "integ": [2, 43, 55, 86, 103, 186, 211, 229, 319, 320, 358, 362, 369, 370, 372, 377, 380, 384, 388, 389, 407, 408, 411, 412, 414, 415, 432, 436, 461, 463, 466, 471, 486, 496, 498, 501, 502, 503, 505, 508, 509, 512, 514, 515, 519, 522, 550, 559, 560, 561, 562, 563, 567, 568, 572, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 632, 633, 644, 651, 655, 659, 665, 673, 675, 676, 678, 699, 714, 735, 800, 802, 803, 804, 805, 807, 809, 814, 815, 816, 819, 820, 822, 824, 827, 835, 838, 840, 843, 844, 845, 869, 877, 878, 883, 884, 885, 888, 898, 900, 912, 913, 914, 915, 926, 963, 964, 965, 969, 991, 997, 1002, 1004, 1011, 1014, 1016, 1017, 1032, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "integr": [0, 52, 77, 103, 165, 178, 201, 306, 320, 363, 373, 377, 378, 379, 381, 383, 389, 393, 412, 417, 445, 715, 755, 786, 975, 1000, 1008, 1025, 1033, 1035, 1036, 1044, 1045, 1049], "intel": [1001, 1020], "intelex": [393, 1020], "intellectu": 185, "intellig": [96, 168, 263, 350, 372, 407, 414, 447, 555, 556, 638, 696, 725, 834, 861, 862, 1002, 1013, 1021, 1025], "intend": [90, 91, 124, 212, 252, 343, 350, 375, 376, 382, 387, 389, 407, 411, 467, 582, 673, 699, 873, 874, 884, 902, 921, 996, 997, 1001, 1005, 1012, 1020], "intens": [99, 123, 289, 372, 376, 387, 389, 412, 442, 446, 458, 607, 608, 632, 633, 802, 990, 1008, 1025, 1040], "intention": 64, "inter": [2, 75, 141, 358, 414, 716], "interact": [2, 42, 147, 149, 183, 211, 236, 240, 270, 319, 374, 376, 377, 379, 381, 387, 389, 390, 401, 408, 559, 560, 561, 562, 632, 633, 879, 883, 990, 993, 997, 998, 999, 1006, 1008, 1011, 1019, 1021, 1034, 1039, 1046, 1047], "interaction_cst": [187, 323, 414, 561, 562, 1047], "interaction_onli": [43, 879, 997, 1011], "interactiveshellapp": 381, "intercept": [123, 204, 208, 220, 228, 347, 389, 481, 482, 483, 549, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 879, 883, 886, 904, 905, 911, 997, 999, 1001, 1006, 1015, 1016, 1035, 1037, 1041, 1042], "intercept_": [196, 202, 204, 220, 246, 337, 344, 347, 377, 389, 481, 482, 483, 549, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 904, 905, 906, 907, 908, 909, 910, 995, 997, 1015, 1016, 1032, 1039, 1044, 1046, 1049], "intercept_hidden_": 860, "intercept_init": [666, 667, 668, 676, 678], "intercept_sc": [205, 658, 659, 904, 905, 911, 997, 1016], "intercept_visible_": 860, "intercepts_": [861, 862, 1005], "interchang": [1020, 1049], "interclass": 75, "interdepend": 515, "interest": [0, 43, 45, 52, 77, 79, 83, 88, 95, 99, 104, 134, 146, 154, 165, 168, 175, 181, 186, 187, 188, 201, 211, 212, 213, 229, 232, 243, 262, 263, 266, 269, 270, 272, 278, 283, 286, 326, 339, 346, 351, 357, 362, 370, 372, 375, 380, 381, 383, 387, 390, 406, 407, 409, 412, 415, 417, 493, 494, 500, 504, 510, 646, 647, 904, 991, 997, 998, 1001, 1006, 1007, 1008, 1021, 1025, 1032, 1049], "interestingli": [109, 168, 1011], "interfac": [2, 42, 134, 183, 368, 369, 376, 377, 379, 384, 387, 389, 411, 417, 418, 440, 444, 449, 496, 553, 699, 800, 803, 804, 814, 864, 865, 890, 985, 990, 1004, 1016, 1020, 1021, 1025, 1032, 1034, 1037, 1038, 1040, 1041, 1046, 1048], "interfer": [325, 1042], "interim": 1039, "interior": [670, 997, 1047], "interleav": [2, 371, 387, 522], "intermedi": [43, 46, 85, 88, 139, 146, 248, 339, 387, 415, 559, 560, 619, 864, 1001, 1044, 1050], "intern": [0, 43, 63, 103, 113, 125, 140, 144, 147, 149, 159, 168, 171, 181, 183, 211, 245, 263, 283, 289, 291, 308, 315, 330, 352, 358, 363, 370, 372, 377, 381, 384, 387, 389, 398, 403, 404, 407, 411, 412, 414, 415, 416, 417, 418, 436, 438, 443, 464, 467, 511, 534, 535, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 593, 594, 610, 611, 640, 643, 646, 652, 668, 672, 676, 678, 696, 708, 731, 734, 758, 759, 783, 830, 844, 845, 860, 861, 862, 864, 865, 869, 883, 885, 899, 900, 902, 904, 905, 906, 909, 912, 913, 914, 915, 997, 998, 999, 1001, 1004, 1007, 1011, 1013, 1016, 1017, 1022, 1025, 1032, 1035, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "internet": [370, 380, 1011], "interop": 1020, "interoper": [401, 417, 1021], "interp": [278, 279, 339], "interp1d": [653, 663, 684], "interp_tpr": 279, "interpol": [43, 53, 68, 75, 83, 84, 87, 91, 113, 120, 123, 174, 177, 183, 192, 193, 203, 227, 241, 247, 278, 284, 293, 294, 301, 307, 329, 339, 417, 635, 645, 653, 663, 672, 684, 700, 707, 847, 855, 865, 879, 883, 992, 997, 1001, 1011, 1022, 1039, 1044], "interpret": [43, 64, 149, 168, 177, 183, 184, 185, 187, 204, 211, 212, 216, 227, 229, 262, 269, 271, 272, 283, 307, 310, 313, 320, 350, 352, 362, 373, 375, 376, 381, 383, 384, 389, 392, 405, 407, 408, 413, 415, 451, 463, 464, 466, 496, 541, 572, 611, 639, 643, 653, 672, 673, 691, 692, 695, 701, 729, 753, 758, 759, 783, 792, 793, 806, 815, 827, 828, 830, 833, 865, 877, 884, 995, 997, 1001, 1002, 1008, 1009, 1011, 1017, 1020, 1022, 1032, 1033, 1037, 1040, 1045, 1046, 1047], "interquartil": [248, 882, 894], "interquartile_rang": 882, "interrog": 415, "interrupt": 997, "intersect": [270, 336, 404, 407, 738], "interv": [2, 52, 64, 133, 149, 177, 183, 197, 211, 212, 213, 229, 269, 370, 389, 405, 411, 414, 417, 437, 438, 516, 517, 518, 557, 558, 560, 562, 564, 565, 635, 636, 638, 677, 742, 748, 750, 804, 821, 830, 867, 869, 883, 906, 907, 908, 934, 993, 997, 1001, 1011, 1017, 1022, 1039, 1043], "intervent": [88, 186], "intl": [64, 411], "intp": [422, 450, 452], "intra": [43, 588, 591, 792, 793], "intract": [89, 412, 998, 1006], "intric": [215, 512], "intricaci": 375, "intrins": [193, 389, 412, 414, 1004, 1009, 1015, 1044], "introduc": [43, 109, 111, 112, 125, 149, 167, 183, 188, 193, 197, 204, 215, 237, 242, 245, 248, 250, 276, 323, 324, 352, 371, 373, 375, 377, 379, 380, 383, 387, 389, 398, 405, 407, 409, 411, 412, 414, 415, 431, 440, 441, 442, 444, 446, 448, 458, 463, 467, 481, 482, 483, 484, 496, 504, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 555, 556, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 664, 685, 686, 688, 689, 692, 830, 848, 853, 856, 860, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 898, 902, 995, 997, 1000, 1003, 1004, 1007, 1011, 1013, 1015, 1016, 1022, 1032, 1033, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "introduct": [167, 229, 267, 375, 406, 411, 412, 415, 590, 788, 789, 839, 843, 997, 999, 1001, 1003, 1019, 1026, 1027], "introductori": [146, 169, 170, 175, 176, 178, 179, 183, 237, 417, 611, 622, 1022, 1025], "introspect": [43, 45, 103, 381, 559, 560, 589, 1011], "intrus": 370, "intuit": [43, 52, 67, 79, 85, 95, 125, 134, 137, 143, 163, 170, 186, 187, 212, 213, 233, 238, 270, 286, 294, 311, 314, 336, 339, 343, 351, 375, 389, 405, 407, 409, 411, 413, 645, 782, 783, 784, 787, 875, 904, 906, 907, 909, 910, 993, 997, 998, 1001, 1002, 1008, 1011, 1012, 1016, 1025, 1032], "inv": [109, 113, 305], "inv_kw_arg": 868, "invalid": [2, 47, 211, 389, 445, 578, 671, 712, 774, 989, 997, 1001, 1038, 1040, 1042, 1043, 1045, 1046, 1048], "invalidparametererror": 1001, "invalu": 1025, "invari": [75, 372, 389, 407, 417, 614, 689, 747, 818, 819, 997, 998, 1001, 1016, 1021, 1040, 1043, 1044, 1045], "invent": 1004, "inventor": 1003, "inventori": 1025, "invers": [2, 8, 51, 87, 108, 109, 110, 134, 183, 259, 276, 278, 292, 339, 351, 352, 367, 389, 408, 410, 411, 412, 414, 415, 419, 444, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 527, 533, 534, 535, 539, 541, 543, 557, 561, 564, 589, 590, 591, 628, 644, 645, 658, 659, 666, 668, 674, 675, 676, 677, 678, 680, 724, 743, 752, 797, 798, 846, 847, 854, 855, 861, 862, 864, 868, 871, 877, 878, 880, 896, 897, 904, 905, 906, 909, 910, 912, 914, 936, 995, 997, 1001, 1004, 1005, 1011, 1015, 1016, 1022, 1026, 1027, 1032, 1035, 1040, 1043, 1044, 1046, 1050], "inverse_components_": [896, 897, 1013, 1046], "inverse_func": [107, 186, 408, 464, 868, 1011, 1040, 1050], "inverse_transform": [44, 84, 87, 125, 165, 293, 351, 398, 412, 415, 444, 464, 481, 482, 483, 533, 534, 535, 538, 539, 540, 541, 543, 544, 581, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 630, 800, 803, 804, 814, 864, 868, 869, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 884, 896, 897, 1011, 1012, 1013, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "invert": [113, 125, 165, 232, 351, 352, 387, 409, 415, 630, 689, 693, 1011, 1041], "invert_yaxi": [182, 352], "invest": [381, 1025], "investig": [125, 130, 134, 182, 346, 375, 401, 997], "invok": [377, 531, 537, 539, 545, 546, 567, 569, 570, 799, 822, 825, 901, 1044, 1049], "involv": [314, 316, 318, 326, 339, 343, 362, 364, 370, 375, 389, 390, 401, 410, 417, 699, 832, 833, 998, 1002, 1004, 1008, 1009, 1016, 1020, 1025, 1040], "invscal": [305, 676, 677, 678, 861, 862, 1015], "io": [369, 372, 375, 379, 381, 383, 389, 692, 1020, 1027, 1030], "ioangatop": 1049, "ioanni": 734, "ioerror": 1048, "iofal": 1046, "ion": 1047, "ionescu": [642, 993, 1042], "iowa": [143, 154, 248], "ipca": [2, 124, 533, 534], "ipdb": 383, "ipm": 670, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "ipython": [377, 380, 381, 383], "ipython_config": 381, "iq": 185, "iqbal": 1044, "iqr": [248, 882, 894], "ir": [241, 412, 590, 726, 756, 839, 843, 999, 1001], "iren": [1047, 1048], "iri": [2, 50, 55, 66, 67, 69, 76, 106, 119, 122, 124, 130, 133, 134, 135, 136, 138, 152, 155, 161, 164, 169, 171, 174, 175, 178, 183, 191, 192, 205, 243, 246, 252, 256, 262, 274, 275, 278, 279, 292, 298, 300, 304, 305, 311, 320, 327, 332, 334, 335, 337, 339, 341, 342, 343, 353, 354, 356, 357, 368, 369, 388, 401, 407, 408, 411, 412, 414, 496, 504, 541, 549, 553, 557, 564, 610, 622, 631, 676, 800, 814, 899, 900, 901, 904, 909, 912, 916, 917, 918, 919, 990, 991, 995, 1000, 1001, 1004, 1008, 1011, 1014, 1015, 1016, 1017, 1022, 1027, 1045], "iris": [126, 275, 276], "iris_61": 369, "iris_969": 369, "iris_version_3": 369, "irreduc": [137, 1001], "irregular": [175, 343, 407, 1004], "irregularities_kernel": 175, "irrelev": [163, 197, 358, 381, 409, 414, 416, 604, 740, 1001], "irrespect": [211, 242, 263, 278, 289, 606], "irvin": 372, "is_categor": 632, "is_categorical_": [561, 562], "is_classifi": [2, 377, 389], "is_cluster": 2, "is_data_valid": [671, 997], "is_fit": [2, 984], "is_fitted_": [421, 424, 426, 429, 430], "is_inli": [468, 563, 850], "is_leav": 357, "is_max_test_scor": 105, "is_model_valid": [671, 997], "is_multilabel": [2, 384, 1049], "is_paramet": 988, "is_pypi": 1050, "is_regressor": [2, 389], "is_scalar_nan": 1045, "is_sh": 280, "is_split_nod": 357, "is_stationari": [178, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "isa": 57, "isaac": [1038, 1039, 1041, 1042, 1049], "isaack": 1045, "isaactrost": 1049, "isakov": 1044, "isbn": [372, 407, 997], "isclos": 55, "isdigit": [57, 415], "ish": 69, "ishaan": 1045, "ishan": [1045, 1046], "ishank": [1037, 1038, 1039], "ishikawa": [1044, 1045], "isin": 329, "isinst": [70, 142, 204, 229, 389], "islic": [47, 79, 95], "ism": 1036, "isn": [168, 318, 350, 352, 358, 363, 375, 379, 383, 515, 561, 562, 594, 794, 803, 804, 877, 1004, 1016, 1042, 1050], "iso": [136, 169, 183, 223, 233, 610, 613, 614, 1022], "iso_reg": 635, "isoformat": 55, "isol": [2, 143, 150, 238, 248, 351, 373, 381, 393, 563, 850, 908, 1041, 1042], "isolationforest": [2, 133, 183, 214, 238, 248, 309, 631, 830, 908, 1007, 1022, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049], "isolationforestifittedisolationforest": 150, "isomap": [2, 51, 85, 139, 183, 230, 233, 235, 242, 299, 318, 322, 414, 502, 544, 549, 566, 689, 690, 691, 692, 853, 865, 874, 897, 1004, 1022, 1026, 1027, 1040, 1042, 1045, 1046, 1047, 1048, 1049], "isomap__n_neighbor": 318, "isometr": [231, 688, 690, 691, 692, 998], "isoton": [2, 61, 62, 107, 183, 237, 436, 635, 636, 637, 657, 933, 1022, 1023, 1027, 1033, 1034, 1035, 1036, 1038, 1045, 1048], "isotonic_regress": [2, 635, 1045], "isotonicregress": [2, 241, 992, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1046, 1047, 1048], "isotonicregression0": 635, "isotrop": [2, 70, 88, 90, 94, 125, 172, 174, 231, 233, 407, 409, 417, 512, 519, 532, 615, 619, 620, 622, 623], "isotropi": 412, "isr": 416, "issam": [0, 1038], "issu": [0, 2, 43, 62, 110, 116, 208, 211, 229, 274, 316, 363, 369, 378, 379, 380, 384, 387, 389, 390, 392, 393, 398, 401, 403, 407, 409, 410, 415, 448, 451, 461, 472, 481, 482, 483, 534, 539, 543, 573, 588, 589, 591, 611, 627, 691, 695, 769, 875, 877, 880, 892, 938, 991, 998, 1009, 1011, 1016, 1020, 1021, 1024, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1049, 1050], "issuenumb": 383, "ist": 416, "isupp": 415, "isuru": 1044, "itakura": [412, 538, 540, 547, 1039], "itali": 372, "item": [2, 47, 48, 49, 50, 51, 52, 55, 66, 78, 88, 107, 138, 140, 143, 146, 154, 186, 209, 213, 219, 232, 244, 245, 247, 256, 266, 272, 276, 322, 329, 351, 368, 375, 376, 377, 384, 408, 463, 526, 561, 562, 588, 589, 591, 632, 812, 877, 899, 900, 919, 926, 954, 993, 1014, 1021], "item_idx": 309, "iter": [2, 47, 54, 55, 67, 80, 104, 113, 120, 123, 134, 137, 140, 142, 144, 145, 147, 148, 149, 168, 181, 183, 193, 194, 219, 226, 256, 257, 261, 264, 277, 280, 304, 306, 307, 311, 320, 329, 331, 332, 339, 375, 377, 381, 383, 384, 388, 389, 402, 407, 410, 412, 414, 416, 419, 436, 439, 440, 442, 444, 446, 447, 448, 451, 453, 458, 460, 461, 462, 470, 471, 477, 481, 482, 483, 515, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 559, 560, 561, 562, 564, 567, 568, 581, 582, 588, 589, 591, 593, 594, 602, 610, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 838, 853, 860, 861, 862, 863, 864, 868, 875, 877, 879, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 919, 947, 948, 955, 956, 957, 958, 966, 990, 991, 997, 998, 1000, 1001, 1004, 1005, 1006, 1014, 1015, 1016, 1017, 1021, 1022, 1025, 1027, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "iter_minibatch": 47, "iter_offset": 1046, "iter_offset_": 1046, "iterated_pow": [104, 532, 535, 541, 1038], "iterative_impute_scor": 182, "iterativeimput": [2, 180, 182, 183, 379, 398, 489, 565, 580, 628, 629, 630, 639, 645, 672, 826, 847, 865, 1022, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "itergrid": 1034, "itertool": [47, 77, 79, 95, 155, 187, 200, 255, 260, 269, 276, 278, 414], "ith": [496, 774, 778, 840, 861, 862, 877, 878], "ith_cluster_silhouette_valu": 93, "itk": [1042, 1043, 1044], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 88, 98, 99, 109, 111, 113, 116, 118, 125, 126, 132, 134, 140, 142, 144, 146, 149, 159, 168, 170, 175, 177, 186, 187, 189, 191, 193, 201, 208, 224, 228, 229, 233, 238, 245, 247, 248, 250, 252, 254, 259, 260, 263, 268, 272, 274, 276, 278, 283, 289, 291, 295, 296, 311, 321, 331, 336, 343, 348, 350, 351, 354, 357, 358, 363, 364, 368, 369, 370, 371, 375, 376, 377, 379, 380, 383, 387, 388, 389, 390, 393, 395, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 423, 439, 441, 443, 445, 449, 453, 455, 459, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 497, 503, 523, 531, 533, 534, 535, 537, 538, 540, 541, 542, 544, 550, 553, 555, 556, 557, 558, 559, 560, 564, 565, 566, 583, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 644, 645, 671, 672, 674, 685, 686, 687, 688, 692, 696, 699, 708, 725, 729, 730, 736, 737, 741, 778, 781, 783, 797, 798, 800, 825, 832, 833, 835, 846, 847, 848, 850, 851, 852, 854, 855, 856, 863, 864, 868, 873, 876, 877, 879, 896, 897, 900, 904, 905, 906, 909, 912, 914, 930, 931, 936, 943, 970, 990, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1014, 1015, 1016, 1017, 1020, 1025, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "itsaphel": 1050, "itself": [27, 61, 64, 82, 88, 134, 146, 150, 187, 197, 209, 245, 251, 263, 278, 289, 316, 339, 351, 362, 364, 374, 375, 377, 389, 398, 401, 405, 407, 418, 439, 440, 443, 444, 445, 468, 469, 470, 471, 472, 473, 474, 475, 527, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 551, 566, 569, 583, 592, 595, 596, 598, 599, 600, 602, 603, 639, 640, 641, 642, 643, 645, 655, 689, 691, 792, 793, 839, 840, 841, 842, 843, 844, 845, 849, 857, 858, 869, 870, 871, 899, 900, 957, 993, 997, 998, 1000, 1004, 1005, 1009, 1020, 1036, 1047], "iv": [185, 1001], "ivan": [1040, 1041, 1044, 1047, 1050], "ivanllt": 1047, "iver": 1038, "iverson": 997, "ivicajov": 1035, "ivl": 189, "ivt": 534, "iv\u00e1n": [1039, 1045], "iwhalv": 1045, "iwona": 1049, "ix": [50, 278, 345], "iy_j": 1011, "iyer": 1043, "izadifar": 1050, "j": [0, 50, 55, 72, 73, 75, 78, 94, 102, 110, 111, 112, 134, 137, 138, 148, 166, 171, 182, 187, 223, 234, 247, 254, 268, 269, 274, 280, 293, 299, 302, 313, 323, 357, 363, 369, 370, 372, 379, 381, 387, 396, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 436, 439, 443, 445, 452, 453, 468, 473, 498, 513, 516, 517, 518, 520, 528, 531, 534, 536, 537, 538, 540, 541, 547, 553, 559, 560, 593, 594, 632, 633, 637, 644, 645, 648, 649, 666, 667, 669, 680, 688, 689, 690, 692, 693, 694, 696, 705, 708, 710, 714, 716, 718, 721, 723, 724, 726, 755, 756, 758, 759, 774, 778, 788, 789, 792, 793, 833, 834, 841, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 875, 884, 885, 912, 913, 990, 991, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "j0rd1smit": 1044, "ja": [410, 1039], "jaccard": [2, 288, 404, 449, 456, 699, 703, 719, 729, 734, 738, 778, 779, 780, 796, 1004, 1040, 1041], "jaccard_scor": [2, 288, 703, 729, 734, 796, 1001, 1041, 1044], "jaccard_similarity_scor": [1034, 1036, 1041], "jaccarddist": 699, "jack": [1034, 1037, 1045, 1046, 1047, 1048, 1050], "jacklangerman": [1040, 1041], "jackman": 1033, "jackmartin": 1038, "jackson": [1038, 1039, 1041], "jacob": [0, 397, 1037, 1038, 1039], "jacobi": 1047, "jacobsen": 1035, "jacopo": [1040, 1041], "jacqu": [1033, 1035], "jaehong": 1042, "jaehyun": 1044, "jaewon": 1040, "jai": [1042, 1046], "jaidev": 1037, "jaim": 1042, "jain": [1038, 1039, 1040, 1044, 1046, 1047], "jair": 1039, "jake": [0, 397, 1019, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1046], "jakemick": 1034, "jakhar": 1044, "jakirkham": [1039, 1040, 1041, 1047, 1048], "jakub": 1049, "jakubek": [1045, 1046], "jalali": [0, 390, 396, 401, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "jalexand3r": 1046, "jamaoui": [1040, 1041, 1044], "jame": [0, 372, 411, 834, 1002, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049], "jamestwebb": [1034, 1035], "jami": 1040, "jamieson": 990, "jan": [0, 212, 286, 396, 883, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1044, 1048], "jana": 1042, "janet": 372, "jane\u017e": [1033, 1034], "janfidor": [1047, 1048], "janhang": 1042, "janin": 1039, "janna": 1038, "jannik": 1045, "janso": 1032, "jansson": [1035, 1047], "januari": [373, 375, 1032, 1033, 1042, 1044, 1047, 1049], "janvanrijn": [1040, 1041], "jaqu": [0, 397, 1032, 1033, 1034, 1035], "jardim": 1045, "jare": 1047, "jarfa": 1038, "jarir": 1045, "jarkko": 696, "jarosch": 1034, "jaroslaw": 1039, "jarrod": [0, 397, 1041, 1048, 1049], "jarvelin": [726, 756, 1001], "jaskowiak": 445, "jason": [44, 412, 535, 900, 1038, 1040, 1044, 1047], "jatin": [1036, 1038], "jauhar": 1046, "jauvin": 1033, "java": [407, 441], "javier": [1036, 1050], "jawahar": 993, "jax": 1049, "jay": 1039, "jaya": 1046, "jayaratn": [1043, 1044, 1047, 1048], "jayratn": 1044, "jayzed82": 1039, "jb": [1048, 1049], "jbdelafoss": 1039, "jbirch": [407, 441], "jblackburn": 1038, "jc": [1039, 1040], "jdcaballero": 1036, "jdethuren": [1040, 1041], "je": 1046, "jean": [1032, 1035, 1036, 1037, 1038, 1039, 1045], "jeann": 1046, "jeanselm": 1042, "jeb": 1040, "jeevan": 1044, "jeff": [1036, 1038, 1045, 1046], "jeffrei": [1035, 1038], "jeffrey04": [1037, 1038], "jelfner": 1046, "jell": 1035, "jen": [658, 1040], "jen09": 412, "jenatton": 412, "jenni": 1046, "jennif": 1045, "jensen": [1038, 1044], "jeong": 1042, "jeremi": [1025, 1037, 1038, 1039, 1040, 1043, 1044], "jeremiedbb": [1040, 1041, 1042], "jeremynixon": 1038, "jeroen": 1038, "jeroenpeterbo": 1044, "jeroko": 1039, "jeromedock": 1042, "jerphanion": [0, 396, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "jerryzhu": 899, "jesper": 1042, "jess": [835, 1002, 1045], "jess010": 1035, "jessica": 1038, "jessicakk0711": 1048, "jesu": [57, 350, 351], "jet": 100, "jevnik": 1037, "jewalikar": 1038, "jf": 1041, "jfraj": 1037, "jha": [1036, 1042, 1046], "jhay": 1044, "jhun": 473, "jia": 1038, "jiacheng": 1039, "jiali": 1037, "jian": 407, "jianbo": [407, 451, 461, 691], "jiang": [405, 1036, 1043], "jianzhu": 1045, "jiawei": [1048, 1049, 1050], "jiaxiang": 1044, "jie": [1040, 1041, 1044], "jiefangxuanyan": 1045, "jigna": 1044, "jihan": 1046, "jill": 1038, "jim": 1034, "jim0421": 1044, "jimenez": [1045, 1046], "jimmi": [861, 862, 1005, 1038, 1040], "jim\u00e9nez": [0, 365, 1040, 1043, 1044, 1045, 1046, 1047], "jin": [639, 1043, 1044], "jindal": 1044, "jinkun": 1040, "jiongyan": 1040, "jiquan": 1005, "jirka": 1046, "jiten": 1047, "jitendra": [407, 451, 461, 691], "jitter": [134, 650, 654, 1043], "jiyuan": 1038, "jjabl": 1040, "jjmistri": 1043, "jk": 998, "jkarolczak": 1047, "jkleint": [1039, 1040], "jl": [242, 897], "jmlr": [0, 407, 666, 667, 676, 704, 997, 1016], "jmlr_2014": 692, "jmontoyam": 1039, "jnboehm": 1045, "jnt": 411, "joaak": [1040, 1041], "joan": [1039, 1040, 1041, 1042], "joanna": 1042, "joaquin": 1044, "job": [149, 186, 257, 263, 375, 379, 383, 395, 414, 418, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 467, 471, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 602, 607, 608, 610, 634, 639, 657, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 902, 966, 1025], "joblib": [2, 41, 77, 87, 104, 140, 289, 319, 370, 373, 375, 378, 384, 387, 389, 393, 400, 408, 418, 436, 440, 443, 444, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 508, 509, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 864, 865, 866, 899, 900, 966, 967, 970, 985, 1001, 1021, 1027, 1032, 1033, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050], "joblib_start_method": 387, "jochen": 1034, "jock": 102, "joe": [1037, 1050], "joei": 1048, "joel": [0, 390, 396, 415, 535, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "johann": [1034, 1035, 1040, 1042, 1043, 1046], "johanna": [112, 1050], "johannah": 1038, "johanwork": 1045, "john": [372, 415, 536, 708, 735, 769, 879, 906, 907, 909, 910, 991, 997, 1001, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1045, 1047, 1048, 1049, 1050], "johnathanpi": [1047, 1048], "johnson": [37, 88, 183, 237, 309, 313, 367, 488, 502, 880, 892, 896, 897, 898, 1011, 1018, 1022, 1027, 1040, 1046, 1048], "johnson_lindenstrauss_min_dim": [2, 242, 1013, 1033], "johnston": [168, 372, 997, 1041], "johnstott": 1040, "johnthagen": 1047, "johnwon": 313, "join": [50, 51, 57, 88, 181, 229, 269, 311, 370, 390, 462, 1024, 1032, 1040], "joint": [146, 183, 187, 192, 197, 198, 201, 210, 231, 263, 408, 611, 652, 662, 692, 839, 840, 841, 842, 843, 904, 997, 998, 1002, 1006, 1008, 1012, 1022, 1032], "jointli": [25, 206, 276, 407, 412, 997], "joli": [0, 397, 1033, 1034, 1035, 1036, 1037, 1038], "jon": [350, 1039, 1042, 1043, 1045, 1046, 1049], "jona": [1044, 1049], "jonatan": 1040, "jonathan": [370, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048], "joncral": 1038, "jone": [0, 370, 397, 1032], "jong": 1039, "jonker": [404, 719], "joona": 1032, "jordal": 1038, "jordan": [407, 412, 691, 797, 1042, 1043, 1046, 1047], "jordi": 1038, "jorg": [658, 1035, 1044, 1046], "jori": [0, 396, 1039, 1040, 1041, 1044, 1045], "jose": [168, 372, 658, 1001, 1040, 1042], "joseph": [1035, 1036, 1037, 1038, 1044, 1046, 1047], "josephsalmon": [1039, 1040, 1041], "josh": [415, 1039], "joshi": [1038, 1040, 1046, 1049, 1050], "joshua": [323, 370, 1034, 1035, 1037, 1038, 1044, 1047, 1048], "joshuakennethjon": 1041, "jos\u00e9": [723, 1035, 1045, 1050], "jotasi": 1040, "joudet": [1039, 1040], "journal": [0, 112, 187, 269, 275, 286, 369, 370, 372, 405, 407, 409, 414, 451, 461, 472, 534, 541, 627, 635, 645, 689, 692, 693, 705, 715, 731, 734, 735, 758, 759, 786, 829, 834, 880, 892, 990, 991, 995, 997, 998, 999, 1002, 1008, 1013, 1015, 1016], "jovan": [1046, 1047], "joydeep": 407, "jo\u00e3o": [1047, 1050], "jo\u00ebl": 1040, "jpcar": 1050, "jpeg": [369, 370, 493, 494], "jpfrancoia": [1038, 1039], "jpg": [506, 584, 587], "jpienaar": 1050, "jpm": 51, "jpmml": 1020, "jpmorgan": [51, 1025], "jr": 997, "jrenni": 841, "jrfiedler": 1038, "jschendel": [1039, 1040], "jschuerz": 1046, "json": [52, 369, 375, 393], "jth": [774, 778], "juan": [0, 365, 1032, 1043, 1044, 1045, 1046, 1047], "juanfe88": 1047, "judg": [91, 217, 407], "judgment": [260, 1001], "judithabk6": 1043, "juergen": [1042, 1047], "jul": 278, "juli": [168, 372, 416, 734, 885, 1011, 1035, 1039, 1040, 1041, 1050], "julia": [407, 717, 737, 795], "julian": [1039, 1040, 1050], "juliankahnert": 1038, "juliaschoepp": [1047, 1048], "juliathebrav": 1038, "julien": [0, 396, 658, 997, 1025, 1032, 1035, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "juliet": 1040, "julietcl": 1040, "julio": 1045, "julyrashchenko": 1045, "jumon": 1043, "jump": [43, 212, 309, 372, 375, 415, 883], "jumpi": 415, "june": [407, 998, 1038, 1048], "juneja": 1050, "jung": [1039, 1043, 1047], "jungkook": 1037, "jungl": 998, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 376, 377, 408, 467, 902, 1017, 1020, 1021, 1043, 1046], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "jurgen": 1025, "juri": 566, "jurman": 743, "just": [43, 52, 67, 102, 116, 120, 140, 143, 149, 168, 202, 232, 243, 263, 269, 276, 280, 289, 304, 339, 350, 351, 357, 358, 370, 374, 375, 376, 377, 379, 380, 383, 387, 388, 389, 404, 406, 407, 408, 411, 414, 416, 419, 467, 533, 535, 542, 546, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 579, 584, 610, 611, 646, 652, 657, 658, 660, 662, 666, 667, 668, 676, 677, 678, 806, 823, 853, 861, 862, 990, 997, 1000, 1001, 1002, 1005, 1009, 1011, 1015, 1021, 1032, 1036, 1038, 1040, 1044, 1048], "justglow": 1041, "justif": 676, "justifi": [375, 381, 405, 565], "justin": [1034, 1040, 1044], "jvm": 1045, "jygerardi": [1047, 1048], "j\u00e9r\u00e9mie": [0, 396, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "j\u00e9r\u00f4me": [1041, 1042, 1043, 1049, 1050], "j\u00eann": 1038, "j\u00f6rg": [407, 449, 456, 1040], "j\u00f6rn": 1039, "j\u00f8rgensen": [997, 1049], "k": [2, 33, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 80, 82, 83, 86, 88, 89, 93, 96, 98, 106, 107, 111, 118, 120, 127, 134, 136, 142, 146, 150, 152, 153, 155, 156, 159, 161, 164, 165, 168, 171, 173, 174, 178, 179, 182, 183, 186, 187, 188, 189, 194, 196, 200, 204, 206, 223, 225, 242, 244, 246, 247, 248, 254, 257, 265, 269, 272, 273, 278, 279, 282, 283, 289, 291, 294, 295, 296, 297, 298, 300, 301, 302, 310, 311, 312, 313, 316, 318, 322, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 349, 350, 352, 357, 358, 363, 370, 372, 375, 383, 384, 387, 389, 398, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 439, 442, 445, 446, 447, 448, 449, 450, 451, 452, 458, 459, 461, 468, 471, 487, 502, 512, 523, 531, 537, 541, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 581, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 631, 639, 640, 648, 650, 651, 653, 654, 655, 656, 658, 659, 663, 664, 665, 666, 667, 669, 679, 680, 682, 683, 684, 685, 686, 688, 691, 695, 696, 704, 705, 708, 717, 726, 737, 743, 756, 758, 759, 761, 766, 769, 774, 775, 776, 777, 779, 793, 794, 795, 797, 798, 801, 805, 807, 808, 809, 812, 815, 816, 818, 819, 821, 822, 828, 839, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 865, 869, 870, 871, 875, 876, 877, 879, 880, 884, 892, 897, 911, 919, 933, 943, 948, 974, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1003, 1005, 1006, 1007, 1009, 1014, 1015, 1016, 1017, 1020, 1022, 1026, 1027, 1032, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050], "k0": 995, "k1": [417, 621, 624], "k1__": 417, "k1__constant_valu": 174, "k1__k1": 417, "k1__k1__constant_valu": 417, "k1__k1__constant_value_bound": 417, "k1__k2": 417, "k1__k2__length_scal": [176, 417], "k1__k2__length_scale_bound": 417, "k2": [417, 621, 624], "k2__": 417, "k2__length_scal": 417, "k2__length_scale_bound": 417, "k_": [404, 417, 616, 619, 621, 624, 774, 993, 1011], "k_1": [2, 417, 621, 624], "k_2": [2, 417, 621, 624], "k_best": [592, 901, 1014, 1049], "k_diag": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "k_fit_all_": 870, "k_fit_rows_": 870, "k_fold": 159, "k_gradient": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625], "k_init": [442, 458], "k_mean": [2, 97, 384, 389, 1040, 1048], "k_means_cluster_cent": 97, "k_means_elkan": 1040, "k_means_label": 97, "k_new": 870, "k_ret": [844, 845], "k_true": [844, 845], "ka00ri": [1047, 1048], "kachaiev": 1049, "kaczmarzyk": 1049, "kadatatlu": 1045, "kadota": 1046, "kaggl": [154, 388], "kahni": 1044, "kai": [372, 563, 1007, 1039], "kaicheng": 1036, "kaichogami": 1038, "kailasa": [1046, 1047], "kaim": [861, 862], "kaiser": [412, 532], "kakati": 1047, "kalli": [1040, 1041], "kalyan": 1038, "kamalakerdadi": [1037, 1038], "kamar": 1040, "kamchyev": 1049, "kamel": 1032, "kamishima": [1038, 1039], "kamm": 1001, "kanai": [1038, 1039, 1040], "kanazu": [1047, 1048], "kanchimo": 1050, "kang": [1040, 1042], "kania": [1047, 1048], "kanika": 1042, "kanishk": 1047, "kanissh": 1047, "kanji": 1045, "kanniah": [1035, 1036], "kansal": 1038, "kapadni": 1047, "kapeln": [187, 1008], "kapoor": [1040, 1041], "kappa": [2, 536, 716], "kapur": 1039, "kar": 1038, "karan": [1039, 1040, 1041], "karayev": 1034, "karbownik": 1045, "karen": 1045, "karger": [841, 1003], "karhunen": 534, "karin": [627, 991], "karl": 1040, "karlo": [1049, 1050], "karnofski": 1039, "karnowski": 1044, "karol": 1035, "kartik": 1044, "karypi": 407, "kaseorg": 1042, "kashif": 1037, "kasim": 1036, "kaski": 696, "kasper": 1040, "kassa": [1047, 1048], "kastner": [0, 397, 1034, 1035, 1036, 1043, 1044], "kat": 1039, "kataev": [1040, 1041], "kataki": [720, 734, 740, 1001], "katarina": [1042, 1044], "katheleen": 369, "kathi": [1039, 1042], "kathleen": 1039, "kathryn": 1043, "kati": 1039, "katotten": 1046, "katrin": [1040, 1041], "katrina": 1043, "katriopla": 1040, "katyal": 1042, "katz": [1037, 1044, 1045], "kaufmann": [1013, 1017, 1044], "kaushik": [1039, 1046, 1047, 1048, 1050], "kaushik94": 1035, "kawamura": 1045, "kawwa": 1045, "kayawari": 1045, "kaylani2": 1044, "kaynak": 372, "kazmar": 1036, "kb": [103, 186, 187, 263], "kbest": [104, 592], "kbin": [316, 323], "kbinsdiscret": [2, 43, 86, 118, 183, 194, 211, 229, 249, 308, 311, 316, 323, 347, 512, 657, 867, 883, 913, 1011, 1022, 1040, 1044, 1045, 1046, 1048, 1050], "kbinsdiscretizer__n_bin": 311, "kcachegrind": 378, "kd": [294, 407, 413, 1004, 1040, 1041, 1042], "kd_tree": [418, 443, 445, 449, 456, 688, 689, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1004, 1045, 1049], "kdd": [191, 370, 405, 436, 1013], "kdd06_rp": 897, "kddcup": [248, 368, 492, 1027], "kddcup99": [2, 370, 492], "kde": [185, 186, 283, 286, 293, 294, 302, 413, 849], "kdt": 1004, "kdtree": [2, 445, 449, 456, 688, 689, 844, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1034, 1036, 1040, 1044, 1045, 1048, 1049], "ke": [414, 1043, 1044], "kearn": 1035, "keat": [1047, 1048], "keep": [0, 45, 52, 64, 77, 107, 123, 125, 140, 149, 167, 176, 181, 185, 186, 187, 188, 189, 197, 208, 211, 212, 213, 219, 229, 252, 259, 264, 267, 313, 314, 321, 329, 339, 350, 351, 354, 358, 362, 363, 367, 375, 379, 388, 389, 405, 407, 408, 409, 410, 411, 412, 430, 449, 464, 481, 482, 483, 484, 493, 494, 534, 540, 541, 544, 547, 554, 556, 558, 560, 562, 565, 568, 570, 595, 598, 600, 603, 611, 634, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 708, 818, 837, 838, 847, 855, 861, 862, 900, 905, 907, 910, 913, 915, 997, 1002, 1006, 1009, 1011, 1021, 1024, 1025, 1027, 1032, 1037, 1040, 1041, 1045, 1046, 1048, 1050], "keep_empty_featur": [627, 628, 630, 991, 1047], "keerti": 1047, "kegl": 1036, "kei": [2, 47, 49, 52, 55, 77, 126, 140, 143, 154, 181, 185, 229, 245, 248, 251, 270, 272, 273, 319, 320, 321, 322, 323, 324, 325, 326, 364, 368, 377, 380, 381, 382, 387, 389, 390, 393, 398, 407, 408, 411, 417, 463, 471, 561, 562, 567, 568, 569, 570, 588, 591, 594, 617, 626, 632, 634, 659, 711, 800, 803, 804, 812, 814, 822, 827, 863, 864, 919, 935, 965, 1009, 1021, 1027, 1029, 1038, 1044, 1045, 1047, 1048, 1050], "keith": [350, 1032, 1037], "kekalainen": [726, 756, 1001], "kelkar": [1039, 1040, 1042], "kelleh": [708, 1001], "kelleher2015": 1001, "kellei": [370, 1034, 1035], "keller": 1044, "kellogg": 51, "kellycarmodi": 1042, "kemal": [0, 1034, 1035], "kemenad": 1043, "kemk": 1043, "ken": [372, 1034, 1041], "ken4git": 1046, "kendal": 1047, "kendrick": 1044, "kennedi": [1039, 1042, 1049], "kennel": 1043, "kenneth": [1013, 1032, 1033, 1038, 1039, 1046, 1047], "kenni": 1044, "kensuk": 1042, "kent": 57, "kenta": 1035, "kento": [1047, 1048], "kept": [64, 259, 289, 346, 369, 401, 417, 496, 535, 538, 540, 541, 547, 597, 610, 611, 619, 620, 644, 695, 797, 798, 931, 1011, 1040, 1041], "kera": [387, 1020], "kerimov": [1039, 1040], "kernal": 125, "kernc": [1032, 1046, 1047], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 84, 99, 106, 116, 119, 121, 129, 132, 155, 161, 166, 169, 171, 172, 173, 174, 177, 181, 196, 212, 220, 225, 237, 238, 246, 250, 262, 267, 269, 271, 274, 275, 279, 284, 290, 295, 300, 314, 321, 330, 333, 334, 336, 337, 339, 340, 341, 342, 344, 347, 358, 362, 367, 377, 387, 389, 395, 405, 407, 408, 411, 414, 415, 430, 439, 447, 451, 460, 461, 464, 481, 482, 483, 490, 496, 498, 502, 504, 514, 533, 534, 535, 541, 544, 554, 556, 558, 560, 562, 565, 568, 570, 593, 594, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 631, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 677, 678, 679, 688, 690, 691, 692, 695, 735, 758, 759, 761, 766, 767, 774, 775, 776, 777, 800, 806, 811, 814, 830, 832, 837, 838, 844, 845, 847, 849, 855, 862, 864, 865, 870, 874, 876, 877, 879, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 913, 915, 921, 990, 996, 997, 998, 1001, 1002, 1004, 1007, 1014, 1015, 1022, 1023, 1026, 1027, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "kernel_": [170, 171, 172, 173, 174, 175, 176, 177, 179, 610, 611], "kernel__length_scal": 170, "kernel__period": 170, "kernel_approxim": [2, 43, 181, 183, 190, 191, 225, 238, 243, 320, 638, 639, 640, 641, 642, 677, 758, 759, 870, 993, 1022, 1033, 1039, 1049], "kernel_dens": [844, 845], "kernel_label": 345, "kernel_metr": [2, 639, 640, 641, 642], "kernel_param": [451, 535, 639, 643], "kernel_pca": [44, 125, 408], "kernel_pca_": 688, "kernel_pca_back_proj_ax": 125, "kernel_pca_proj_ax": 125, "kernel_ridg": [2, 170, 244, 643, 1002, 1036], "kernel_ridge_tun": 170, "kernel_svm": 243, "kernel_svm_scor": 243, "kernel_svm_tim": 243, "kernelapproximationkernel": 395, "kernelcenter": [2, 403, 1011, 1042, 1046, 1048, 1049], "kerneldens": [2, 293, 294, 302, 413, 1034, 1040, 1041, 1045, 1046, 1047], "kernelpca": [2, 44, 408, 412, 533, 534, 541, 544, 688, 690, 692, 870, 1011, 1033, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "kernelridg": [2, 125, 170, 244, 672, 994, 1002, 1036, 1049], "kertesz": 1046, "keshat": [666, 667, 997], "keshavan": 1042, "kesshi": [1042, 1043], "kevad": 1042, "kevin": [643, 1034, 1036, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1049], "kevlani": 1040, "keyber": 1050, "keyerror": [919, 1042], "keyword": [350, 369, 375, 377, 380, 382, 389, 407, 418, 421, 437, 443, 444, 449, 451, 456, 463, 466, 496, 503, 535, 538, 540, 559, 560, 567, 568, 569, 570, 620, 631, 632, 639, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 688, 692, 697, 698, 699, 700, 701, 702, 774, 778, 779, 780, 781, 792, 793, 806, 823, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 864, 868, 943, 967, 990, 998, 1001, 1004, 1014, 1032, 1036, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050], "kf": [411, 805], "kfold": [2, 87, 140, 145, 159, 264, 274, 358, 411, 436, 471, 567, 568, 594, 602, 647, 651, 653, 655, 661, 663, 665, 673, 800, 803, 804, 806, 808, 810, 814, 819, 821, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 885, 1033, 1034, 1035, 1037, 1038, 1040, 1042, 1050], "khaja": 1047, "khan": [1047, 1048], "khandelw": 1044, "khanduja": 1035, "khant": 1047, "kharsa": 1046, "khedkar": 1046, "khine": 1046, "kho": 1047, "khoo": 1044, "khosasi": 1045, "khosrow": 1001, "khoual": 1045, "khwaja": 1047, "ki": 1001, "kian": [1037, 1047, 1048, 1049], "kid": 1011, "kieker": [1040, 1041], "kielczewski": 1038, "kie\u00dfl": 1043, "kilian": [415, 1047, 1048], "kill": [350, 387], "killer": [375, 1025], "kilobyt": 86, "kilomet": 764, "kim": [997, 1040, 1041, 1042, 1046], "kimayoung": 1046, "kimberli": 51, "kimbinyi": 1044, "kind": [43, 48, 51, 52, 61, 62, 107, 128, 140, 154, 163, 186, 187, 259, 262, 263, 265, 278, 316, 320, 323, 336, 339, 350, 363, 364, 368, 370, 375, 377, 381, 387, 388, 405, 407, 410, 411, 412, 414, 415, 416, 487, 488, 503, 508, 509, 521, 524, 588, 632, 633, 701, 940, 997, 1003, 1008, 1017, 1035, 1044, 1046, 1047, 1048], "king": 935, "kingjr": 1038, "kingma": [861, 862, 1005], "kink": 201, "kiragu": 1044, "kiran": 1044, "kirandevraj": 1047, "kiril": [1039, 1040, 1042, 1044], "kirkbi": [1039, 1040], "kirkham": [1037, 1038, 1040], "kirthi": 1042, "kishan": 1049, "kishimoto": 1044, "kishor": 1045, "kislovskii": 1049, "kit": 387, "kitchen": [641, 993], "kj": [369, 1003], "kjell": 1038, "kk": 1001, "kl": [412, 998, 1040], "kl_divergence_": [692, 1039], "klarup": 1039, "klass": 98, "klau": [412, 535, 870], "kleczewski": [1039, 1040], "kleiber": 1046, "klevebr": 1040, "klima": 1047, "klopfer": 1041, "kluge": [1047, 1048], "kluger": [2, 404, 450, 513], "klusacek": 1001, "km": [94, 322, 351], "kmatt10": 1045, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 83, 86, 90, 91, 94, 183, 257, 260, 312, 322, 351, 384, 398, 407, 433, 434, 435, 439, 442, 447, 448, 451, 461, 512, 710, 792, 793, 797, 798, 869, 1004, 1011, 1021, 1022, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "kmeans_estim": 120, "kmeans_model": 407, "kmeans_plusplu": [2, 92, 407, 1044, 1049], "kmode": 1020, "kms15": [1040, 1041], "knee": 407, "kneighbor": [314, 322, 846, 847, 848, 850, 852, 1004, 1036, 1041, 1045, 1046, 1047, 1048], "kneighbors_graph": [2, 74, 79, 95, 100, 289, 389, 407, 440, 444, 695, 846, 847, 848, 850, 852, 854, 855, 856, 858, 1004, 1032, 1036, 1041], "kneighborsclassifi": [2, 67, 155, 160, 291, 292, 297, 298, 314, 320, 322, 350, 414, 602, 847, 851, 852, 853, 854, 855, 1002, 1004, 1032, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "kneighborsclassifierkneighbor": 395, "kneighborsregressor": [2, 181, 247, 301, 322, 414, 570, 846, 852, 854, 855, 1002, 1004, 1032, 1034, 1036, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "kneighborstransform": [2, 289, 291, 318, 692, 856, 1004, 1042, 1046, 1047], "knight": 315, "knn": [137, 155, 160, 181, 292, 297, 298, 301, 314, 320, 330, 350, 414, 602, 846, 853, 854, 899, 900, 1004, 1014, 1038], "knn__weight": 292, "knn_graph": 74, "knn_impute_scor": 182, "knnimput": [2, 182, 318, 627, 630, 991, 1042, 1043, 1046, 1047, 1048, 1049], "knnquerybatch": 289, "knot": [43, 212, 321, 883, 1011, 1045], "know": [86, 99, 165, 168, 170, 179, 186, 229, 245, 246, 263, 269, 282, 286, 288, 322, 328, 346, 351, 362, 375, 387, 398, 401, 407, 410, 411, 412, 415, 500, 504, 510, 646, 652, 658, 659, 726, 756, 800, 814, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 990, 1000, 1001, 1002, 1004, 1013, 1038, 1039, 1042, 1044], "knowledg": [90, 149, 186, 228, 248, 263, 269, 282, 283, 370, 375, 378, 381, 388, 389, 407, 411, 414, 418, 443, 511, 555, 556, 563, 720, 736, 740, 783, 833, 1001, 1002, 1013, 1050], "known": [2, 50, 55, 62, 64, 74, 82, 90, 91, 112, 126, 128, 129, 154, 175, 177, 182, 197, 211, 212, 229, 238, 263, 269, 271, 278, 298, 302, 310, 321, 326, 328, 336, 343, 351, 364, 370, 372, 373, 375, 383, 387, 389, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 437, 462, 481, 483, 498, 508, 509, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 588, 589, 591, 594, 609, 622, 633, 658, 659, 672, 682, 683, 694, 704, 710, 713, 718, 729, 743, 755, 757, 795, 833, 839, 840, 841, 842, 843, 846, 851, 854, 860, 888, 912, 913, 914, 915, 948, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1016, 1017], "known_val": 627, "knox": 1044, "knp": 627, "knr": 414, "knyazev": [407, 451, 461, 695, 1042, 1045, 1046], "ko": [51, 63, 171], "kobak": [692, 1045], "kobaski": 1045, "kobayashi": [1044, 1045], "kober": 1040, "kobi": 735, "koch": [1034, 1040, 1041, 1043, 1044], "kocot": 1043, "koehler": 1036, "koen": [1040, 1041], "koenker": [723, 997], "koh": [997, 1025], "kohavi": 411, "kohli": [1049, 1050], "koi8": 415, "koivunen": 112, "kokhlikyan": [1039, 1040], "koki": 1044, "koko": [1040, 1046, 1047], "kolawol": 1045, "kolganov": 1037, "kolh": 1034, "kolstad": 57, "komarov": 1050, "komey": [1046, 1047], "kommireddi": 1046, "kondratyev": 1046, "kong": 1045, "konstantin": [1037, 1038, 1039], "konstantino": [1040, 1049], "konwar": 1043, "koonc": 1040, "korba": 370, "korean": 1020, "kornel": 1038, "kornev": 1047, "korobko": [1049, 1050], "korobov": [1033, 1034, 1035, 1038, 1039], "korolev": 1042, "kosic": 1044, "kosobrodov": 1040, "kossaifi": [1032, 1036, 1037], "kossen": [1047, 1048], "kossori": [1040, 1041], "kostelac": [1047, 1048], "kot271828": 1045, "kothari": 1043, "kotwalia": [1040, 1041], "koumenti": 1047, "koushik": 1046, "koustav": [1049, 1050], "kovalevskyi": 1038, "kowalski87": 1035, "koyama": 1046, "kozachenko": [607, 608], "kozynet": [1044, 1046], "kpca": [2, 533, 534, 535, 1026, 1027, 1032], "kr": [244, 269, 1046], "kr_fit": 244, "kr_predict": 244, "kraig": 1047, "kraktu": 1050, "kranthi": 1046, "kranz": 1025, "kraskov": [607, 608], "krasouli": [1039, 1040, 1041, 1042, 1044, 1045], "kratzwald": 1038, "krawczyk": 1046, "krawutschk": [1047, 1048], "krell": [1036, 1038], "kriegel": [407, 418, 443, 449, 456, 850, 1007], "krinitsyn": 1040, "krishna": [1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047], "krishnachaitanya9": 1043, "krishnakalyan3": 1038, "krishnan": 1042, "krivich": [1038, 1039, 1041], "kronovet": 1037, "krr": [244, 643, 994], "krsto": 1050, "krum": [1044, 1046], "krumetoft": 1046, "krump": 1037, "kruskal": [635, 690, 694, 998], "krzeminski": 1039, "krzysztof": 369, "ksemb": 1040, "kshitij": [1047, 1048, 1050], "ksvd": [664, 685, 686, 997], "ksvm": 191, "ksvm_score": 191, "ksvm_time": 191, "kth": [57, 821], "ku": [1036, 1037], "kuai": [1040, 1041], "kubin": 1043, "kuhlmann": [1039, 1040], "kulbear": 1041, "kulkarni": 1040, "kull": [405, 1001], "kullback": [54, 231, 412, 538, 540, 547, 692, 998, 1039], "kulsinski": [449, 456, 699, 778, 779, 780], "kulsinskidist": [699, 1048], "kumar": [0, 168, 370, 397, 407, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "kumaresshan": [1040, 1041, 1044], "kumawat": 1046, "kund": [1048, 1049], "kunj": 1045, "kuno": 1050, "kuo": 1036, "kurumeyuta": 1045, "kurz": [1046, 1047], "kusanagi": [1043, 1045], "kusanagi2": 1044, "kushal": [1040, 1041], "kushan": 1049, "kushwah": [1048, 1049], "kushwaha": 1044, "kusterl": 1042, "kuth": 1038, "kvam": [1033, 1035], "kvle": 1038, "kw_arg": [139, 868, 1011, 1038], "kwarg": [76, 123, 245, 377, 382, 421, 425, 429, 437, 441, 447, 449, 463, 468, 535, 538, 540, 563, 631, 646, 647, 652, 653, 660, 661, 662, 663, 677, 681, 684, 698, 699, 700, 702, 742, 863, 864, 868, 908, 919, 960, 966, 968, 989, 1039, 1043, 1045, 1049], "kwd": [771, 774, 778, 781, 792, 793], "kwei": [1035, 1036, 1037, 1038, 1039], "kxytim": 1045, "kybernetika": 372, "kye": 1040, "kyeongpil": 1040, "kyle": [0, 397, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044], "kyledrogo": 1040, "kyler": 1037, "k\u00e4rkk\u00e4inen": 997, "l": [0, 46, 53, 55, 75, 80, 81, 99, 100, 112, 137, 168, 188, 207, 215, 220, 221, 274, 275, 276, 286, 305, 313, 346, 372, 373, 381, 383, 404, 405, 407, 411, 412, 414, 417, 473, 516, 517, 518, 538, 540, 547, 555, 556, 557, 558, 565, 566, 590, 607, 608, 610, 611, 615, 619, 622, 623, 634, 648, 649, 658, 669, 672, 674, 680, 687, 689, 692, 693, 705, 715, 725, 726, 731, 756, 786, 841, 875, 912, 913, 914, 915, 990, 995, 997, 998, 1001, 1003, 1004, 1005, 1009, 1013, 1015, 1017, 1035, 1040, 1044, 1045, 1046, 1047, 1049], "l1": [2, 25, 42, 46, 55, 66, 75, 99, 113, 115, 183, 192, 193, 198, 199, 200, 201, 206, 207, 215, 222, 226, 240, 270, 282, 289, 306, 321, 384, 387, 407, 409, 412, 440, 444, 449, 456, 463, 468, 469, 470, 471, 472, 473, 474, 475, 477, 496, 502, 504, 531, 537, 538, 539, 540, 542, 543, 547, 548, 558, 565, 589, 590, 591, 597, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 679, 681, 688, 735, 762, 768, 773, 778, 779, 780, 785, 814, 821, 830, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 876, 884, 891, 904, 905, 911, 913, 915, 933, 982, 997, 999, 1001, 1004, 1011, 1015, 1016, 1017, 1022, 1037, 1039, 1045, 1048], "l1_color": 222, "l1_contour": 222, "l1_distanc": 1032, "l1_min_c": [2, 205, 997, 1016, 1032], "l1_plot": 227, "l1_ratio": [46, 49, 54, 197, 200, 203, 277, 282, 362, 387, 412, 538, 540, 547, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 997, 1015, 1033, 1035, 1037, 1044, 1046], "l1_ratio_": [647, 659, 661], "l1_ratios_": 659, "l2": [2, 53, 66, 75, 113, 115, 183, 185, 186, 192, 193, 197, 200, 203, 205, 211, 216, 222, 226, 227, 229, 270, 282, 289, 309, 316, 332, 350, 351, 377, 384, 387, 407, 409, 412, 414, 415, 440, 444, 449, 456, 524, 538, 540, 547, 558, 561, 562, 565, 589, 590, 591, 643, 646, 647, 648, 649, 652, 657, 658, 659, 660, 661, 662, 663, 668, 669, 672, 676, 678, 680, 681, 686, 687, 688, 735, 750, 761, 762, 778, 779, 780, 814, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 876, 884, 891, 904, 905, 909, 910, 911, 913, 915, 983, 990, 994, 997, 999, 1004, 1005, 1011, 1015, 1017, 1022, 1034, 1036, 1037, 1039, 1041], "l2014": 414, "l2_color": 222, "l2_contour": 222, "l2_regular": [321, 414, 561, 562], "l_": [404, 611, 652, 741, 1001], "l_i": 1011, "l_inf": 55, "l_m": 414, "l_p": [449, 456, 688, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858], "l_x": 53, "la": [0, 315, 372, 396, 1025, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "lab": [0, 370, 467, 536, 902, 1025, 1043], "labb\u00e9": 1050, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 84, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 105, 107, 109, 110, 111, 112, 115, 116, 118, 122, 124, 127, 128, 129, 134, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 157, 164, 166, 170, 171, 175, 176, 177, 178, 179, 181, 183, 186, 189, 191, 193, 194, 196, 197, 199, 201, 202, 204, 206, 208, 211, 212, 213, 214, 217, 218, 219, 220, 221, 225, 226, 228, 229, 232, 233, 234, 238, 239, 243, 244, 246, 248, 249, 256, 262, 263, 264, 267, 268, 270, 271, 272, 273, 275, 278, 279, 280, 281, 282, 283, 284, 288, 294, 296, 298, 301, 305, 307, 309, 310, 314, 318, 319, 322, 325, 327, 331, 332, 333, 341, 343, 345, 346, 350, 351, 354, 355, 356, 364, 367, 368, 369, 374, 375, 377, 379, 380, 384, 389, 390, 404, 405, 406, 417, 418, 424, 425, 429, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 464, 468, 486, 487, 488, 493, 494, 495, 496, 502, 503, 508, 509, 512, 514, 515, 519, 522, 523, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 592, 593, 594, 595, 596, 598, 599, 600, 604, 605, 606, 609, 610, 631, 658, 659, 666, 667, 668, 673, 674, 675, 676, 677, 678, 697, 698, 700, 702, 703, 704, 705, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 722, 725, 726, 727, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 754, 755, 756, 757, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 815, 816, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 853, 854, 861, 862, 864, 868, 871, 872, 875, 877, 878, 885, 888, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 924, 930, 935, 936, 963, 964, 971, 990, 997, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1015, 1016, 1017, 1020, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "label1": 389, "label2": 389, "label_a": 278, "label_b": 278, "label_binar": [2, 276, 278, 871, 1036], "label_binarizer_": 833, "label_distributions_": [328, 329, 899, 900, 1043], "label_im": 99, "label_out": 78, "label_pr": [717, 736, 737, 755, 757, 795], "label_prop_model": [899, 900], "label_propag": 1033, "label_ranking_average_precision_scor": [2, 1001, 1036, 1040, 1041, 1047], "label_ranking_loss": [2, 1001, 1037], "label_spread": 330, "label_tru": [704, 717, 737, 755, 757, 795], "labelbinar": [2, 278, 389, 722, 741, 833, 868, 877, 885, 888, 1002, 1035, 1036, 1037, 1041, 1046], "labelbottom": [157, 269], "labeled_iter_": [331, 901], "labelencod": [2, 389, 569, 878, 1012, 1032, 1040, 1047, 1048], "labeling1": 1001, "labeling2": 1001, "labelkfold": [1037, 1038], "labelleft": 254, "labelpad": 269, "labelpropag": [2, 322, 330, 900, 901, 1002, 1014, 1033, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1048], "labels": [54, 313], "labels_": [73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 91, 94, 95, 96, 98, 100, 322, 324, 351, 375, 389, 407, 425, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 454, 710, 1037], "labels_050": 98, "labels_200": 98, "labels_a": 72, "labels_b": 72, "labels_pr": [407, 704, 705, 714, 715, 717, 731, 736, 737, 755, 757, 786, 795], "labels_tru": [73, 82, 88, 97, 407, 704, 705, 714, 715, 717, 731, 736, 737, 755, 757, 786, 795], "labels_uniqu": 96, "labelshufflesplit": [1037, 1038], "labelspread": [2, 322, 328, 329, 330, 332, 333, 899, 901, 1002, 1014, 1033, 1038, 1039, 1042, 1043, 1046, 1047, 1048], "labelspreadingifittedlabelspread": 330, "labex": 0, "labl": 149, "laboratori": [370, 1020], "lacchia": 1039, "lack": [43, 64, 343, 375, 387, 411, 829, 919, 1016, 1046], "lacost": [658, 997], "lacouth": 1045, "lacrosse91": 1045, "lad": 1045, "lag": [42, 43, 146, 149, 183, 213, 491, 562, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 1022], "lagacheri": 1036, "lagard": 1035, "lagat": 1042, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 314, 343, 1007], "laid": [0, 185, 375], "lakhotia": [1042, 1043], "lakshmi": 1042, "lakshmikanth": 1039, "lakshya": [1040, 1041, 1042], "lal": 900, "lalliacqua": [1042, 1045], "lam": [319, 320, 1043, 1050], "lama": 494, "lamb": [1037, 1045], "lambda": [43, 46, 47, 49, 57, 89, 145, 194, 229, 269, 270, 313, 332, 401, 403, 407, 412, 414, 415, 644, 645, 646, 647, 868, 880, 993, 997, 1011, 1040, 1046], "lambda_": [194, 644, 645, 880, 997, 1039], "lambda_1": [644, 645, 997], "lambda_2": [644, 645, 997], "lambda_i": [997, 1011], "lambda_init": [193, 194, 645, 997, 1042], "lambdas_": [313, 880, 1045, 1048], "lami": 1040, "lamond": 1036, "lamp": 1025, "lamu": 1038, "lan": [658, 1047, 1048], "land": [50, 302, 379, 390, 414], "land_mask": 302, "land_refer": [50, 302], "landeau": 1049, "landmark": [881, 893, 1011], "landscap": 171, "lane": 1038, "langford": [415, 688, 998], "langl": [993, 1001, 1015, 1016], "languag": [0, 352, 380, 412, 415, 1015, 1020, 1021, 1025], "language_level": 376, "lanigan": 1039, "lanl": 55, "lannuzel": 1044, "lanterni": 1046, "lanzani": 1038, "lapack": [362, 363, 373, 532, 535, 541, 688, 1047], "lapack_lit": 381, "lapack_svd_driv": 1047, "laplac": [2, 171, 417, 610, 611, 839, 840, 841, 843, 1003], "laplacian": [2, 231, 367, 404, 439, 451, 461, 620, 639, 643, 691, 695, 765, 766, 774, 900, 997, 998, 1014, 1027, 1033, 1038], "laplacian_kernel": [2, 765, 999, 1037], "laptop": [52, 383, 467, 902, 1046, 1047, 1048], "lar": [0, 2, 123, 168, 183, 192, 197, 198, 201, 203, 206, 372, 397, 470, 471, 477, 501, 531, 537, 539, 542, 543, 545, 546, 548, 651, 652, 653, 654, 655, 656, 663, 664, 665, 678, 681, 682, 683, 684, 685, 686, 1002, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1050], "laradji": [0, 1038], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 81, 82, 83, 85, 86, 88, 105, 107, 120, 124, 137, 139, 140, 146, 149, 150, 152, 164, 175, 176, 188, 189, 193, 194, 201, 203, 211, 213, 215, 216, 217, 229, 243, 248, 263, 266, 272, 275, 278, 291, 298, 306, 309, 311, 321, 322, 325, 339, 344, 346, 351, 352, 362, 370, 375, 381, 384, 387, 388, 389, 393, 401, 407, 409, 411, 412, 413, 414, 416, 418, 420, 441, 443, 445, 446, 449, 450, 451, 452, 457, 461, 472, 474, 499, 514, 534, 536, 538, 540, 541, 544, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 582, 589, 634, 641, 643, 646, 647, 650, 652, 653, 654, 657, 658, 659, 664, 671, 672, 674, 677, 679, 685, 687, 689, 691, 692, 693, 695, 746, 779, 780, 800, 808, 810, 814, 818, 829, 839, 840, 841, 842, 843, 844, 845, 850, 861, 862, 869, 873, 874, 882, 884, 896, 897, 904, 905, 909, 910, 912, 913, 914, 915, 947, 948, 990, 993, 995, 997, 998, 1000, 1003, 1004, 1005, 1009, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "larger": [43, 46, 64, 72, 74, 77, 81, 88, 111, 113, 118, 129, 137, 147, 149, 171, 176, 177, 182, 186, 187, 191, 194, 197, 226, 227, 228, 236, 242, 244, 254, 260, 263, 270, 272, 278, 279, 286, 289, 291, 304, 305, 307, 309, 339, 343, 351, 352, 368, 370, 375, 381, 389, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 439, 442, 448, 449, 451, 453, 455, 515, 527, 541, 544, 561, 562, 563, 567, 568, 582, 589, 643, 652, 672, 673, 674, 675, 679, 687, 692, 704, 719, 736, 797, 849, 850, 881, 883, 884, 885, 893, 898, 947, 948, 971, 974, 993, 994, 997, 998, 1000, 1001, 1004, 1005, 1009, 1011, 1015, 1016, 1036, 1037, 1040, 1041, 1042, 1045, 1046, 1049, 1050], "largest": [113, 122, 140, 168, 213, 372, 407, 409, 412, 442, 527, 541, 557, 558, 559, 560, 564, 565, 588, 709, 797, 798, 819, 842, 874, 912, 913, 914, 915, 948, 998, 1001, 1011, 1016, 1017], "largest_clust": [407, 442], "largest_coef": [113, 527], "larrald": 1049, "lars_path": [2, 200, 384, 531, 537, 539, 542, 543, 545, 546, 548, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 683, 684, 685, 686, 997, 1032, 1034, 1037, 1041, 1043], "lars_path_gram": [2, 682, 997, 1041], "larscv": [2, 398, 650, 665, 682, 683, 1039, 1045, 1049], "larson": [1037, 1041, 1042, 1044, 1046], "larsson": [1044, 1045, 1046], "lasagna": 1038, "laska": 1038, "lasso": [2, 42, 55, 99, 129, 154, 159, 183, 186, 192, 203, 208, 210, 219, 259, 321, 325, 346, 362, 387, 409, 410, 412, 414, 415, 416, 470, 471, 477, 501, 524, 531, 537, 539, 542, 543, 545, 546, 548, 597, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 670, 672, 678, 681, 682, 683, 684, 685, 686, 721, 723, 724, 825, 826, 827, 865, 884, 990, 1001, 1002, 1015, 1022, 1023, 1027, 1032, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1046, 1050], "lasso_cd": [531, 537, 542, 548], "lasso_cv": 159, "lasso_lar": [129, 531, 537, 542, 548, 1042], "lasso_lars_": [199, 201], "lasso_path": [2, 200, 651, 652, 653, 654, 655, 656, 663, 682, 683, 997, 1032, 1034, 1036, 1045], "lasso_pipelin": 154, "lassocolumntransform": 154, "lassocv": [2, 53, 154, 159, 186, 197, 201, 398, 414, 416, 651, 652, 654, 655, 656, 663, 684, 997, 1032, 1035, 1039, 1042, 1043, 1045, 1046, 1049, 1050], "lassocvlassocv": 154, "lassolar": [2, 651, 652, 653, 655, 656, 663, 664, 665, 682, 683, 684, 997, 1002, 1032, 1033, 1035, 1039, 1042, 1043, 1045], "lassolars": [2, 199, 201, 416, 651, 654, 655, 997, 1032, 1039, 1041, 1045, 1046], "lassolarscv": [2, 201, 398, 416, 652, 653, 654, 656, 663, 665, 682, 683, 684, 997, 1032, 1039, 1045, 1049], "lassolarsic__criterion": [199, 201], "last": [43, 58, 79, 91, 146, 186, 193, 211, 212, 219, 224, 238, 260, 272, 280, 281, 314, 320, 322, 331, 354, 362, 370, 373, 377, 379, 380, 383, 389, 393, 401, 407, 408, 415, 419, 437, 441, 446, 458, 463, 466, 467, 515, 533, 559, 560, 561, 562, 583, 584, 587, 593, 594, 597, 610, 682, 683, 685, 686, 697, 698, 700, 701, 702, 707, 782, 797, 798, 803, 804, 819, 844, 845, 849, 864, 865, 869, 877, 883, 919, 951, 975, 989, 990, 996, 997, 998, 1000, 1002, 1005, 1015, 1021, 1032, 1038, 1039, 1040, 1041, 1046, 1048, 1049], "last_hour": [43, 52], "last_mean": 975, "last_n": 975, "last_var": 975, "lat": [50, 302, 498, 764], "late": [315, 364], "latenc": [42, 46, 47, 183, 361, 524, 565, 672, 678, 830, 884, 910, 965, 974, 1020, 1022, 1027, 1035], "latent": [2, 42, 45, 55, 130, 183, 307, 351, 410, 415, 417, 487, 532, 536, 538, 539, 540, 543, 544, 588, 591, 860, 1000, 1020, 1022, 1026, 1027, 1034, 1037], "latentdirichletalloc": [2, 54, 364, 380, 412, 1020, 1037, 1039, 1046, 1047], "later": [0, 50, 86, 134, 139, 147, 170, 187, 191, 193, 248, 263, 286, 302, 352, 358, 373, 381, 387, 388, 401, 414, 850, 873, 874, 882, 884, 993, 1011, 1035, 1038, 1040, 1044], "latest": [318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 375, 379, 381, 383, 1017, 1046], "latestst": 379, "latex": 1032, "latexpdf": 375, "latin": [47, 415], "latitud": [302, 309, 370, 498, 699, 764], "lattarini": 1034, "latter": [43, 54, 259, 269, 278, 279, 297, 314, 346, 364, 372, 389, 406, 411, 414, 415, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 742, 797, 798, 799, 800, 803, 804, 809, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 967, 1004, 1009, 1041], "laughlin": 1039, "launch": [350, 351, 393, 1025], "laur": 1032, "lauren": [0, 359, 692, 696, 998, 1044, 1047], "laurent": [1035, 1036, 1039, 1040, 1047, 1048], "laurenz": 1044, "lauritzen": 1040, "laveen": 1045, "law": 1025, "lawrenc": 263, "lawson": [1039, 1040, 1041], "lawton": 1040, "layer": [2, 43, 67, 142, 152, 161, 172, 174, 183, 218, 227, 249, 303, 306, 307, 311, 312, 333, 344, 362, 383, 414, 514, 515, 522, 567, 830, 860, 861, 862, 865, 884, 1006, 1022, 1023, 1027, 1038], "layout": [134, 309, 387, 904, 905, 906, 909, 931, 1016, 1035, 1037, 1049], "layton": [0, 397, 1032, 1033, 1034, 1035, 1037], "lazaru": 1050, "lazebnik": [758, 759, 999], "lazi": [52, 390, 415, 1015, 1036], "lazyfram": 105, "lazz": 1047, "lb": [871, 1012], "lbfg": [304, 377, 648, 649, 658, 659, 669, 672, 674, 680, 687, 835, 838, 861, 862, 997, 1005, 1036, 1037, 1039, 1040, 1045, 1046, 1047, 1049], "lbfgsb": 658, "lbfin": 1042, "lc": [51, 234, 241], "lceil": [404, 1007], "lda": [54, 69, 119, 122, 124, 126, 130, 183, 298, 358, 372, 403, 504, 536, 541, 549, 550, 853, 1020, 1022, 1023, 1026, 1027, 1037], "lda_featur": 380, "lda_model": 380, "lda_np": 403, "ldavid": 1038, "ldflag": 373, "ldirer": 1039, "ldl": [168, 372], "ldot": [997, 1001, 1003, 1005, 1015], "ldwy4": [1049, 1050], "le": [658, 872, 992, 997, 1004, 1012, 1014, 1040, 1044, 1045, 1049], "le_": 569, "lead": [0, 46, 62, 64, 67, 72, 85, 88, 94, 104, 140, 143, 144, 146, 167, 168, 186, 187, 188, 193, 197, 201, 203, 204, 208, 211, 215, 243, 245, 248, 263, 269, 270, 272, 276, 282, 294, 295, 306, 309, 311, 314, 315, 320, 339, 346, 351, 354, 358, 362, 363, 369, 374, 383, 384, 388, 389, 404, 405, 406, 407, 409, 411, 412, 413, 414, 416, 451, 461, 464, 467, 496, 515, 527, 535, 538, 539, 540, 543, 547, 551, 557, 558, 559, 560, 563, 564, 565, 566, 606, 630, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 679, 691, 695, 746, 797, 803, 804, 832, 844, 845, 849, 868, 875, 885, 896, 897, 902, 904, 912, 913, 914, 915, 990, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1009, 1011, 1014, 1015, 1017, 1025, 1035, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050], "leader": [375, 1025], "leadership": 0, "leaf": [76, 139, 150, 152, 354, 357, 407, 414, 418, 440, 441, 442, 443, 444, 445, 449, 456, 462, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 912, 913, 914, 915, 916, 917, 1004, 1017, 1035, 1037, 1039, 1043, 1046], "leaf_id": 357, "leaf_rot": 189, "leaf_siz": [418, 443, 445, 449, 454, 455, 456, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1004], "leagu": 370, "leak": [139, 274, 350, 358, 408, 411, 864, 889, 890, 892, 893, 894, 895, 1011, 1032, 1039, 1042, 1048, 1049, 1050], "leakag": [388, 389, 408, 1027], "lean": 401, "leandro": [1041, 1045], "lear": 1025, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 327, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 367, 368, 369, 370, 372, 374, 378, 381, 382, 383, 384, 388, 389, 392, 394, 395, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 436, 437, 438, 441, 442, 445, 446, 448, 449, 456, 463, 464, 466, 467, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 508, 509, 510, 512, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 576, 581, 582, 583, 584, 587, 588, 589, 590, 591, 593, 594, 599, 602, 603, 610, 611, 614, 619, 622, 626, 628, 630, 632, 634, 638, 640, 641, 643, 644, 645, 646, 648, 652, 657, 658, 668, 669, 676, 677, 678, 680, 688, 689, 690, 691, 692, 696, 697, 700, 701, 702, 708, 713, 717, 718, 721, 723, 724, 726, 732, 735, 741, 742, 743, 748, 756, 778, 779, 780, 784, 785, 787, 788, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 846, 848, 853, 860, 861, 862, 863, 864, 865, 867, 869, 871, 874, 876, 877, 878, 879, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 909, 912, 913, 914, 915, 920, 922, 933, 942, 943, 953, 966, 967, 990, 991, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1022, 1024, 1027, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "learn_rat": 1033, "learnalgorithm": 395, "learner": [2, 47, 135, 144, 154, 364, 554, 559, 560, 561, 562, 582, 589, 630, 846, 847, 852, 854, 855, 1003, 1006, 1017, 1020, 1021, 1048], "learning_curv": [2, 271, 323, 398, 806, 996, 1035, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1049], "learning_decai": 536, "learning_method": [54, 380, 536], "learning_offset": [54, 536], "learning_r": [46, 134, 144, 145, 146, 147, 148, 149, 236, 289, 305, 307, 319, 321, 414, 553, 554, 559, 560, 561, 562, 668, 676, 677, 678, 692, 860, 861, 862, 998, 1008, 1015, 1033, 1041, 1045], "learning_rate_": [692, 862], "learning_rate_init": [187, 305, 306, 861, 862], "learningcurvedisplai": [2, 244, 271, 323, 996, 1047, 1048], "learnt": [149, 186, 316, 358, 389, 411, 885, 990, 1011], "least": [2, 37, 44, 52, 54, 111, 112, 114, 115, 122, 123, 137, 147, 157, 166, 168, 178, 183, 185, 192, 193, 196, 197, 202, 205, 211, 213, 215, 216, 219, 228, 229, 242, 248, 265, 269, 282, 286, 288, 314, 320, 321, 339, 351, 352, 362, 368, 370, 372, 374, 375, 379, 381, 383, 387, 389, 390, 398, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 443, 447, 449, 455, 456, 457, 460, 473, 480, 481, 482, 483, 484, 494, 501, 516, 531, 537, 539, 541, 542, 543, 545, 546, 547, 548, 549, 557, 558, 559, 560, 562, 564, 565, 566, 593, 594, 602, 635, 643, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 678, 679, 680, 682, 683, 684, 685, 686, 687, 692, 697, 712, 716, 718, 750, 785, 801, 805, 806, 812, 814, 815, 816, 818, 819, 821, 825, 828, 829, 830, 861, 862, 865, 876, 884, 909, 912, 913, 914, 915, 940, 963, 991, 994, 998, 1001, 1004, 1013, 1015, 1016, 1017, 1021, 1022, 1023, 1025, 1027, 1032, 1034, 1035, 1038, 1039, 1043], "least_absolute_devi": [1042, 1044, 1045], "least_angl": 384, "least_squar": 1045, "leastangle_2002": [168, 372], "leastsquareserror": 1041, "leav": [2, 86, 134, 139, 147, 187, 189, 229, 276, 314, 357, 358, 362, 372, 374, 380, 389, 407, 414, 440, 441, 444, 445, 462, 503, 557, 558, 559, 560, 561, 562, 564, 565, 566, 673, 675, 802, 807, 808, 809, 810, 818, 819, 844, 845, 846, 854, 912, 913, 914, 915, 990, 998, 1004, 1008, 1017, 1032, 1039, 1041, 1043, 1044, 1048], "leaveonegroupout": [2, 274, 411, 801, 808, 809, 1038], "leaveonelabelout": 1038, "leaveoneout": [2, 274, 411, 846, 854, 1050], "leavepgroupsout": [2, 411, 802, 1038], "leaveplabelout": 1038, "leaveplabelsout": 1038, "leavepout": [2, 411, 808], "leaves_parallel": 916, "lebedev": [1038, 1039], "lebel": 1047, "lebourgeoi": 1025, "lectur": [407, 644, 993, 1019], "lecture2": 644, "lecun": [1005, 1015], "led": 1032, "ledoit": [2, 49, 65, 70, 108, 109, 112, 113, 183, 298, 472, 474, 478, 479, 512, 549, 995, 1022], "ledoit_wolf": [2, 113, 409, 1045], "ledoit_wolf_shrinkag": [2, 1045], "ledoitwolf": [2, 69, 108, 110, 113, 127, 148, 183, 300, 409, 468, 469, 473, 474, 475, 476, 800, 1022, 1036], "lee": [412, 1032, 1033, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1047], "leepei": 1036, "leereev": 1039, "leeuw": 635, "lefebvr": [1045, 1046], "lefevr": [412, 538], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 84, 88, 95, 97, 104, 107, 112, 113, 118, 122, 123, 134, 137, 139, 140, 141, 143, 146, 149, 154, 156, 173, 179, 182, 186, 189, 205, 211, 212, 213, 215, 222, 224, 225, 228, 229, 238, 242, 246, 248, 249, 254, 256, 257, 260, 265, 266, 267, 268, 270, 278, 279, 281, 292, 294, 295, 302, 304, 307, 309, 322, 324, 325, 329, 338, 339, 343, 357, 370, 375, 377, 379, 404, 407, 410, 411, 413, 414, 415, 417, 424, 430, 445, 471, 481, 482, 483, 484, 493, 498, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 587, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 635, 639, 643, 651, 655, 797, 798, 800, 803, 804, 807, 814, 821, 877, 884, 912, 913, 914, 915, 916, 934, 948, 971, 974, 990, 993, 995, 997, 999, 1001, 1003, 1008, 1013, 1015, 1017, 1039, 1041, 1046], "left_h": 309, "left_impur": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "leftarrow": [407, 1005, 1015], "leftmost": 1005, "legaci": [369, 379, 389, 942, 943, 1032, 1039, 1044], "legarreta": [1043, 1045, 1046], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 94, 104, 105, 107, 109, 110, 111, 112, 115, 116, 122, 124, 126, 127, 128, 129, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 164, 170, 171, 175, 176, 177, 178, 179, 186, 187, 191, 193, 194, 196, 199, 200, 201, 202, 204, 206, 208, 211, 212, 213, 214, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 234, 239, 241, 242, 243, 244, 246, 249, 256, 263, 264, 266, 268, 269, 271, 272, 273, 274, 276, 279, 281, 282, 283, 284, 286, 292, 294, 295, 296, 301, 305, 310, 314, 319, 322, 325, 330, 338, 341, 343, 345, 350, 354, 355, 356, 700, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "legend1": 126, "legend_el": [126, 150, 204, 224, 272, 292, 343], "legend_handl": 296, "legend_lin": 48, "legend_titl": 217, "legitim": [263, 998], "legitimate_accept": 263, "legitimate_refus": 263, "lego": 1020, "lehoucq": 412, "leibler": [54, 231, 412, 538, 540, 547, 692, 998, 1039], "leibniz": 1001, "leig": 1038, "leightonzhang": 1038, "leinweb": [1040, 1041], "leisur": 43, "lejeun": 1039, "lekhwani": 1041, "leland": [1038, 1039, 1040, 1042, 1043, 1048], "lemaitr": [0, 396, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "lemir": 1043, "lemma": [37, 242, 367, 534, 541, 549, 896, 897, 898, 995, 1027, 1035], "lemmat": 415, "lemmatoken": 415, "lemo": [1048, 1049], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 82, 83, 84, 88, 93, 94, 95, 96, 97, 98, 102, 104, 123, 129, 130, 132, 137, 140, 142, 143, 149, 160, 161, 166, 170, 178, 182, 187, 189, 210, 211, 229, 234, 238, 241, 242, 243, 245, 247, 248, 254, 256, 257, 264, 267, 269, 270, 277, 278, 280, 284, 288, 289, 296, 298, 299, 304, 310, 311, 312, 315, 324, 326, 328, 329, 332, 339, 345, 348, 350, 351, 352, 357, 387, 389, 414, 417, 425, 429, 431, 436, 444, 449, 455, 463, 507, 515, 550, 569, 570, 582, 597, 632, 633, 782, 800, 814, 826, 830, 832, 834, 835, 885, 899, 900, 1041, 1044], "lenail": [1040, 1044], "lend": 1025, "lene": 1048, "length": [2, 102, 118, 126, 128, 130, 142, 168, 170, 171, 172, 175, 176, 178, 191, 245, 246, 249, 252, 292, 320, 323, 336, 352, 368, 372, 375, 383, 384, 389, 408, 412, 414, 415, 417, 444, 489, 508, 509, 512, 515, 523, 551, 563, 581, 582, 589, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 632, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 681, 684, 781, 800, 803, 804, 814, 830, 832, 835, 836, 838, 846, 847, 848, 850, 852, 891, 917, 930, 932, 936, 954, 955, 971, 974, 1000, 1007, 1011, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1048], "length_scal": [170, 171, 174, 175, 176, 177, 179, 417, 612, 615, 618, 619, 621, 622, 623, 624], "length_scale_bound": [170, 176, 177, 179, 417, 611, 615, 619, 622, 623], "length_scale_grid": 176, "lengthi": [375, 387], "lenient": [878, 1021, 1049], "lenz": [1043, 1047], "leo": 1049, "leogrin": 1050, "leon": [676, 677, 678, 1032, 1050], "leonardo": 1045, "leonenko": [607, 608], "leonieborn": 1038, "leopoldo": 1045, "leq": [173, 412, 414, 997, 1001, 1004, 1015, 1016, 1017], "lera": 1039, "leriqu": [1038, 1040], "lernen": 449, "lesne": 1046, "less": [43, 44, 47, 64, 85, 86, 93, 118, 120, 123, 130, 134, 141, 146, 147, 149, 170, 177, 186, 196, 197, 211, 213, 215, 244, 248, 255, 257, 263, 269, 270, 278, 280, 283, 284, 310, 313, 314, 315, 320, 322, 326, 343, 350, 351, 358, 362, 364, 370, 375, 377, 387, 389, 401, 407, 411, 412, 414, 415, 419, 438, 440, 442, 444, 447, 449, 451, 456, 459, 461, 462, 481, 482, 483, 496, 515, 531, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 590, 596, 619, 627, 634, 647, 661, 676, 678, 692, 701, 721, 722, 723, 724, 725, 736, 752, 764, 779, 780, 785, 795, 797, 798, 802, 803, 804, 810, 828, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 867, 879, 881, 882, 884, 887, 893, 894, 904, 905, 912, 913, 914, 915, 936, 951, 990, 991, 993, 994, 995, 998, 1000, 1001, 1004, 1006, 1011, 1015, 1016, 1017, 1020, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1042, 1046, 1047, 1049], "lessen": [217, 658, 659], "lesser": [304, 389, 441, 541, 997], "let": [43, 44, 52, 86, 88, 97, 103, 107, 120, 125, 126, 141, 143, 146, 147, 149, 151, 170, 176, 177, 182, 186, 187, 188, 195, 201, 204, 211, 213, 229, 231, 235, 245, 252, 263, 264, 269, 272, 276, 282, 283, 326, 350, 352, 357, 358, 370, 375, 377, 381, 387, 401, 404, 406, 407, 411, 414, 415, 444, 490, 500, 504, 510, 534, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 681, 684, 870, 877, 878, 997, 998, 999, 1000, 1001, 1008, 1009, 1011, 1016, 1017, 1025, 1042], "letelli": 1038, "letter": [168, 178, 370, 372, 379, 415, 788, 789, 806, 823, 1001], "leu": 1046, "leung": 1043, "lev_metr": 387, "levarag": 325, "level": [43, 48, 50, 51, 64, 70, 76, 86, 120, 139, 142, 161, 168, 169, 170, 171, 174, 177, 179, 183, 186, 187, 222, 223, 224, 225, 226, 229, 238, 242, 243, 258, 263, 269, 272, 278, 279, 295, 302, 337, 338, 340, 341, 343, 346, 351, 357, 362, 370, 372, 375, 377, 381, 387, 389, 392, 393, 398, 405, 412, 415, 417, 421, 453, 467, 493, 494, 496, 503, 521, 531, 536, 537, 545, 546, 547, 561, 562, 567, 568, 611, 615, 622, 623, 625, 666, 667, 668, 676, 677, 678, 687, 690, 692, 694, 700, 702, 716, 723, 728, 785, 825, 826, 827, 829, 832, 833, 860, 861, 862, 902, 917, 990, 997, 1001, 1002, 1004, 1009, 1015, 1017, 1020, 1021, 1022, 1035, 1043, 1046, 1047, 1048], "levelnam": 120, "leven": 387, "levenshtein": [326, 387], "levenshtein_dist": 326, "levequ": [842, 884], "leverag": [43, 47, 72, 82, 116, 229, 326, 350, 351, 362, 363, 373, 389, 411, 414, 879, 990, 997, 1035, 1047, 1050], "levesqu": 1038, "levi": [534, 1039], "levinson": [1040, 1041], "levitski": [1047, 1048, 1049], "levitskii": 1045, "lewi": [370, 1039, 1043], "lex": [407, 451, 461], "lexicograph": [389, 567, 788, 794, 846, 854], "lexicon": 1011, "lexsort": 61, "lf": 383, "lfw": [2, 45, 370, 493, 494, 1032], "lfw_home": 370, "lfw_pairs_train": [370, 493], "lfw_peopl": [45, 370, 494], "lg2012": 414, "lgtm": 1039, "li": [0, 331, 370, 396, 397, 639, 642, 696, 726, 756, 897, 990, 993, 1001, 1004, 1011, 1013, 1016, 1032, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "liabil": 229, "liac": [323, 369, 375, 496, 1047, 1048], "liam": [1040, 1041], "liang": [1038, 1043, 1044, 1049, 1050], "liau": 1035, "lib": [363, 373, 393, 1020], "liberti": 260, "libisel": 1050, "liblinear": [205, 337, 381, 658, 659, 788, 904, 905, 906, 909, 910, 997, 1001, 1016, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1048], "libomp": [373, 1044], "librari": [45, 263, 269, 321, 323, 358, 367, 369, 370, 373, 374, 375, 376, 381, 383, 387, 388, 389, 393, 401, 403, 463, 658, 904, 905, 906, 907, 909, 910, 997, 1001, 1016, 1017, 1020, 1021, 1025, 1030, 1035, 1039, 1040, 1041, 1042, 1043, 1045, 1049], "libsvm": [2, 191, 337, 368, 381, 486, 508, 563, 904, 905, 906, 907, 908, 909, 910, 1016, 1027, 1032, 1034, 1040, 1043, 1046], "libsvmtool": [191, 369, 486, 508, 509], "licenc": 369, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 387, 389, 1017, 1025], "lichman": 372, "liddel": 1040, "lidston": [839, 840, 841, 843, 1003], "lie": [52, 93, 115, 167, 186, 243, 309, 330, 337, 339, 412, 414, 606, 852, 854, 855, 856, 904, 905, 995, 998, 1001, 1011, 1016], "lieg": 414, "lieret": 1047, "lieu": [1038, 1039], "life": [52, 149, 262, 326, 383, 998], "lifecycl": [1020, 1021], "lifo": 919, "lift": 393, "light": [137, 370], "lighter": [362, 700, 702, 782, 789, 1048], "lightfm": 1020, "lightgbm": [149, 414, 561, 562, 1020, 1041, 1048], "lightgreen": [156, 217, 228], "lightgrei": 49, "lightweight": [376, 800, 814, 825, 826], "ligo": 1039, "lihaitao": 1050, "lik_max": 109, "lik_min": 109, "like": [0, 2, 43, 51, 52, 85, 88, 91, 93, 102, 118, 123, 127, 129, 132, 134, 136, 141, 146, 149, 150, 170, 176, 186, 194, 211, 245, 260, 263, 269, 272, 273, 276, 277, 284, 298, 307, 309, 314, 315, 318, 331, 339, 343, 350, 351, 358, 362, 364, 367, 369, 370, 374, 375, 377, 379, 382, 383, 384, 387, 388, 389, 398, 401, 403, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 515, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 581, 582, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 926, 928, 935, 936, 950, 954, 963, 964, 971, 972, 973, 985, 987, 989, 990, 993, 995, 996, 997, 998, 1001, 1003, 1004, 1005, 1007, 1008, 1011, 1016, 1017, 1021, 1025, 1029, 1032, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "likelihood": [2, 69, 90, 108, 110, 111, 112, 113, 127, 148, 170, 171, 172, 174, 175, 176, 177, 179, 183, 199, 229, 258, 261, 269, 275, 300, 307, 309, 377, 389, 405, 409, 412, 414, 417, 436, 468, 469, 470, 471, 472, 473, 474, 475, 476, 515, 532, 536, 541, 549, 550, 551, 610, 611, 631, 645, 658, 712, 741, 797, 798, 800, 827, 830, 849, 860, 880, 892, 906, 907, 909, 910, 997, 1000, 1003, 1011, 1016, 1022, 1035, 1036, 1041, 1047], "likewis": [246, 407, 523], "lil": [389, 553, 554, 871, 926, 954, 1004], "lil_matrix": 55, "lili": [1040, 1041], "lilian": [1037, 1038, 1049], "lim": [173, 534], "lima": [1045, 1046], "limit": [43, 47, 55, 64, 72, 77, 90, 99, 113, 134, 141, 147, 154, 181, 186, 187, 188, 193, 211, 212, 228, 242, 276, 311, 315, 321, 346, 352, 358, 363, 376, 377, 380, 387, 389, 390, 405, 406, 407, 410, 412, 416, 445, 462, 467, 559, 560, 561, 562, 632, 650, 679, 682, 683, 688, 778, 821, 852, 854, 855, 856, 877, 878, 902, 906, 907, 908, 909, 910, 990, 997, 998, 1000, 1001, 1008, 1009, 1011, 1021, 1027, 1040, 1042, 1045, 1046, 1049], "limits_": 1004, "lin": [0, 534, 658, 1016, 1037, 1038, 1039, 1040], "lin_clf": 1016, "linalg": [70, 87, 109, 110, 113, 127, 129, 198, 254, 255, 256, 259, 260, 325, 375, 381, 412, 450, 451, 452, 461, 521, 532, 535, 541, 544, 657, 672, 674, 687, 691, 695, 946], "linalgerror": 1042, "lincoln": 370, "lindenbaum": 534, "lindenstrauss": [37, 88, 183, 237, 367, 488, 502, 896, 897, 898, 1018, 1022, 1027], "lindgren": 1050, "lindquist": 1047, "line": [48, 50, 52, 55, 75, 78, 93, 102, 111, 120, 125, 134, 136, 140, 145, 169, 181, 182, 183, 186, 187, 199, 201, 202, 204, 207, 209, 212, 214, 219, 220, 222, 223, 225, 238, 242, 243, 246, 248, 266, 273, 275, 276, 282, 295, 299, 302, 310, 320, 338, 341, 343, 344, 347, 348, 350, 369, 370, 373, 375, 376, 377, 379, 380, 381, 382, 383, 387, 412, 413, 414, 437, 486, 487, 488, 508, 509, 542, 553, 554, 555, 556, 610, 613, 614, 632, 670, 686, 700, 701, 702, 806, 823, 995, 1001, 1005, 1008, 1015, 1020, 1022, 1024, 1034, 1043, 1045, 1048, 1049], "line0": [51, 234], "line1": [46, 51, 234], "line2": [46, 51, 234, 347], "line2d": [48, 111, 225, 295, 338, 341, 806, 823], "line_": [382, 437, 698, 700, 701, 702, 806, 823], "line_bin": 310, "line_fig": 140, "line_i": 214, "line_kw": [149, 151, 249, 271, 319, 325, 632, 806, 823], "line_kwarg": [154, 701], "line_profil": 381, "line_trac": 140, "line_x": [214, 228], "line_y_ransac": 214, "linea": 395, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 85, 90, 106, 107, 109, 110, 111, 112, 113, 116, 120, 125, 126, 128, 137, 139, 152, 154, 157, 159, 161, 163, 168, 174, 176, 181, 182, 184, 185, 187, 191, 194, 196, 197, 198, 199, 201, 202, 204, 207, 209, 212, 213, 215, 216, 219, 223, 225, 227, 228, 229, 230, 233, 235, 241, 242, 244, 246, 247, 250, 259, 262, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 279, 282, 284, 294, 295, 297, 298, 299, 307, 309, 310, 311, 314, 316, 320, 321, 334, 336, 339, 340, 341, 344, 346, 347, 350, 356, 363, 367, 371, 372, 373, 377, 378, 380, 389, 392, 395, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 441, 443, 454, 464, 466, 474, 481, 482, 483, 496, 502, 512, 515, 521, 524, 532, 533, 534, 535, 536, 539, 541, 543, 544, 548, 549, 550, 554, 566, 582, 589, 593, 594, 606, 609, 614, 620, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 701, 707, 716, 719, 750, 753, 765, 767, 774, 800, 811, 815, 827, 830, 844, 845, 849, 853, 860, 861, 862, 865, 869, 870, 871, 874, 877, 879, 881, 882, 883, 884, 893, 897, 904, 905, 906, 907, 908, 909, 910, 990, 992, 993, 994, 996, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1016, 1022, 1023, 1025, 1026, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046], "linear_baselin": 320, "linear_kernel": [2, 403, 761, 765, 999, 1040], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 87, 103, 105, 107, 116, 139, 154, 156, 157, 159, 160, 166, 167, 168, 170, 181, 183, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 238, 239, 240, 241, 245, 247, 250, 252, 263, 265, 272, 277, 278, 282, 283, 284, 288, 307, 310, 311, 314, 316, 318, 319, 320, 321, 322, 324, 325, 326, 332, 350, 358, 362, 364, 374, 375, 377, 381, 383, 384, 388, 389, 398, 403, 406, 408, 414, 427, 432, 437, 464, 537, 539, 542, 543, 545, 546, 548, 567, 568, 569, 570, 597, 631, 632, 634, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 700, 701, 788, 799, 814, 823, 825, 826, 827, 829, 831, 835, 836, 837, 838, 862, 879, 883, 904, 905, 908, 911, 940, 942, 943, 944, 984, 993, 997, 1001, 1002, 1007, 1009, 1011, 1015, 1022, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "linear_model_preprocessor": 211, "linear_pca": 408, "linear_preprocessor": 154, "linear_regress": [213, 284], "linear_sum_assign": [404, 719], "linear_svc": 1016, "linear_svm": 243, "linear_svm_scor": 243, "linear_svm_tim": 243, "lineardiscriminantanalysi": [2, 69, 70, 128, 232, 298, 358, 403, 536, 550, 853, 995, 1002, 1004, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1044, 1046, 1047, 1048], "linearli": [67, 125, 136, 168, 186, 193, 225, 232, 238, 278, 279, 311, 314, 343, 350, 362, 372, 387, 412, 414, 515, 553, 642, 707, 873, 874, 1001, 1004, 1007, 1016, 1039, 1048], "linearly_separ": [67, 304], "linearmodel": 1045, "linearoper": [325, 687], "linearregress": [2, 116, 157, 185, 193, 202, 207, 208, 209, 214, 217, 228, 241, 245, 247, 265, 284, 310, 358, 375, 387, 388, 408, 414, 464, 570, 632, 635, 646, 649, 652, 654, 671, 672, 687, 997, 1001, 1002, 1011, 1036, 1037, 1041, 1044, 1045, 1046, 1048], "linearregressionifittedlinearregress": 241, "linearregressionlinearregress": 157, "linearsvc": [2, 62, 64, 102, 104, 164, 165, 183, 191, 243, 266, 268, 276, 311, 318, 334, 335, 336, 340, 341, 346, 350, 362, 377, 381, 405, 415, 416, 436, 512, 567, 577, 631, 639, 643, 652, 672, 673, 674, 675, 676, 687, 735, 742, 827, 832, 905, 906, 909, 911, 997, 1001, 1002, 1016, 1022, 1032, 1033, 1034, 1038, 1040, 1043, 1048], "linearsvc__c": 311, "linearsvclinearsvc": [104, 165, 276], "linearsvr": [2, 568, 910, 1016, 1036, 1038, 1043, 1048], "linecollect": [51, 234, 241, 632], "linen": [51, 234], "lineno": 381, "lineplot": [149, 269], "liner": [377, 830], "lines_": [382, 632, 806, 823], "linestyl": [49, 50, 69, 93, 105, 111, 127, 129, 134, 145, 156, 159, 161, 170, 173, 175, 177, 179, 188, 189, 199, 200, 201, 211, 212, 213, 217, 221, 223, 224, 229, 246, 248, 263, 266, 268, 272, 273, 278, 282, 283, 294, 302, 305, 310, 337, 340, 341, 343, 344, 346], "linewidth": [61, 69, 70, 72, 75, 91, 105, 109, 116, 118, 122, 135, 146, 149, 151, 170, 174, 178, 201, 202, 204, 206, 207, 208, 209, 212, 214, 217, 225, 228, 238, 246, 248, 278, 282, 295, 299, 310, 319, 325, 337, 338, 340, 356], "linger": 213, "linguist": [716, 901, 1014], "lingyi1110": 1047, "link": [51, 55, 134, 186, 187, 193, 211, 215, 229, 254, 263, 272, 299, 354, 363, 369, 374, 375, 376, 377, 379, 383, 389, 405, 407, 409, 412, 414, 417, 561, 562, 610, 648, 669, 680, 688, 705, 929, 931, 997, 1004, 1017, 1018, 1020, 1024, 1030, 1032, 1035, 1036, 1039, 1040, 1043, 1049], "link_thickness_i": 299, "linkag": [71, 74, 75, 76, 79, 81, 85, 88, 89, 90, 100, 183, 189, 439, 440, 444, 445, 462, 512, 514, 522, 884, 1020, 1022, 1035, 1040, 1043], "linkage_matrix": 76, "linkage_tre": 1036, "linkedin": 379, "linker": 376, "linnerrud": [368, 1027], "linnerud": [2, 372, 505], "linprog": [670, 997], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 82, 88, 111, 112, 121, 129, 135, 146, 170, 171, 173, 174, 175, 176, 177, 179, 187, 193, 194, 196, 197, 202, 204, 206, 211, 212, 213, 217, 221, 222, 223, 224, 225, 229, 236, 238, 241, 242, 244, 246, 258, 269, 271, 272, 276, 277, 278, 279, 284, 294, 295, 301, 302, 310, 312, 322, 323, 338, 339, 342, 343, 344, 346, 347, 348, 631, 632, 806, 828, 844, 845], "lint": [375, 383], "linter": 579, "linthresh": [193, 197], "linu": [1048, 1049, 1050], "linux": [375, 377, 378, 383, 1020, 1032], "lipoprotein": [168, 372], "lippert": 997, "lippmann": 370, "lipschitz": [37, 1013], "lisa": [1040, 1041, 1043, 1044, 1046, 1047], "lise": 1046, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 82, 95, 102, 129, 130, 138, 140, 145, 154, 189, 215, 248, 249, 264, 267, 269, 270, 272, 273, 278, 298, 311, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 332, 342, 351, 352, 364, 369, 370, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 394, 398, 405, 407, 408, 411, 413, 414, 415, 430, 432, 436, 449, 455, 456, 463, 464, 465, 466, 470, 471, 477, 481, 482, 483, 487, 488, 489, 490, 492, 493, 496, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 523, 532, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 591, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 686, 687, 692, 696, 697, 699, 710, 711, 712, 713, 716, 718, 725, 733, 742, 746, 754, 778, 781, 783, 788, 794, 797, 798, 800, 803, 804, 806, 811, 812, 814, 823, 825, 826, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 872, 875, 877, 878, 883, 885, 901, 905, 907, 910, 912, 913, 914, 915, 918, 925, 926, 930, 931, 932, 936, 939, 940, 941, 943, 951, 952, 955, 966, 971, 974, 984, 990, 991, 997, 1001, 1003, 1004, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1025, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "list_param": 375, "listedcolormap": [67, 70, 142, 297, 300, 304, 311], "listen": 350, "listinfo": 383, "lite": 1032, "liter": [375, 1025], "literatur": [175, 269, 286, 351, 372, 375, 381, 383, 387, 388, 407, 410, 412, 414, 442, 446, 448, 501, 536, 538, 540, 547, 555, 556, 588, 591, 708, 797, 990, 993, 997, 1001, 1042], "litsidi": [1047, 1048], "littl": [186, 187, 188, 189, 238, 370, 415, 461, 644, 800, 814, 948, 991, 998, 1000, 1016, 1017, 1033, 1044, 1049], "lituiev": 1045, "liu": [0, 365, 386, 396, 563, 726, 756, 1001, 1007, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "liutong": 1040, "live": [50, 102, 186, 263, 302, 370, 375, 407, 498, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 1024], "livesei": 350, "livni": [407, 441], "lizao": 1040, "lizsz": 1038, "lj2017": 407, "lk": 1035, "lkjcalc": 1040, "lkubin": 1043, "ll": [50, 88, 264, 282, 302, 375, 387, 532, 541, 993, 1004, 1017], "llcrnrlat": [50, 302], "llcrnrlon": [50, 302], "lle": [231, 232, 233, 235, 530, 689, 693, 998, 1044], "lle_hessian": 231, "lle_ltsa": 231, "lle_method": 231, "lle_mod": 231, "lle_standard": 231, "lloyd": [407, 442, 446, 448, 458, 1046, 1047], "llvm": 373, "lm": 195, "lmbda": 313, "lmbda_bc": 313, "lmbda_yj": 313, "lml": [171, 172, 176, 417], "ln": [379, 997, 1005, 1011], "loa": [169, 177, 183, 417, 496, 611, 615, 622, 623, 625, 1022], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 80, 86, 103, 104, 120, 130, 139, 141, 142, 144, 150, 151, 154, 155, 157, 165, 166, 175, 186, 187, 191, 195, 211, 219, 227, 240, 241, 245, 247, 248, 249, 250, 252, 259, 263, 265, 267, 269, 274, 276, 281, 283, 286, 289, 293, 298, 305, 306, 307, 319, 320, 322, 323, 325, 330, 331, 332, 355, 356, 357, 362, 367, 370, 372, 378, 381, 388, 401, 410, 411, 412, 414, 481, 482, 483, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 532, 534, 543, 844, 845, 948, 1011, 1021, 1027, 1032, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "load_ames_h": 154, "load_boston": [1038, 1040, 1045], "load_breast_canc": [2, 168, 189, 331, 354, 380, 592, 595, 596, 598, 674, 675, 788, 1001, 1037, 1038, 1043], "load_cont": 503, "load_dataset": 350, "load_diabet": [2, 46, 147, 157, 159, 168, 182, 199, 200, 201, 208, 249, 265, 323, 414, 558, 562, 568, 673, 701, 825, 826, 827, 913, 915, 1009, 1038, 1043, 1046], "load_digit": [2, 68, 84, 85, 91, 104, 105, 160, 166, 203, 218, 232, 242, 243, 267, 268, 271, 277, 291, 293, 298, 305, 307, 324, 328, 329, 381, 408, 419, 444, 445, 532, 533, 534, 535, 599, 600, 638, 639, 668, 688, 689, 690, 691, 693, 695, 1038, 1043], "load_fil": [2, 369, 370, 1034, 1046], "load_iri": [2, 66, 76, 106, 124, 126, 128, 130, 142, 155, 161, 164, 172, 205, 220, 252, 256, 262, 274, 275, 276, 278, 279, 292, 297, 300, 305, 318, 320, 323, 333, 335, 336, 339, 342, 355, 357, 388, 401, 407, 408, 411, 414, 416, 427, 561, 567, 601, 602, 610, 619, 620, 622, 623, 631, 658, 659, 711, 788, 800, 803, 804, 806, 814, 832, 853, 899, 900, 901, 912, 914, 916, 917, 918, 991, 996, 1001, 1002, 1003, 1004, 1008, 1011, 1017, 1038, 1040, 1043], "load_lfw_pair": 1037, "load_linnerud": [2, 837, 1038, 1043], "load_mnist": [219, 289], "load_mtpl2": 229, "load_sample_imag": [2, 583, 584, 587, 1041], "load_svmlight_fil": [2, 369, 1032, 1033, 1038, 1039, 1040, 1047], "load_win": [2, 48, 251, 314, 848, 856, 1029, 1043], "loader": [2, 270, 332, 350, 368, 369, 370, 498, 499, 508, 1021, 1032, 1037, 1039, 1040, 1043], "loan": [414, 534, 997, 1025], "loayza": 1046, "lobpcg": [80, 451, 461, 688, 691, 695, 1042, 1045, 1046, 1047], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 104, 107, 110, 111, 112, 115, 122, 124, 126, 127, 128, 129, 134, 136, 137, 138, 145, 146, 147, 148, 149, 151, 154, 156, 157, 164, 170, 171, 177, 179, 186, 187, 196, 200, 202, 206, 211, 212, 213, 214, 217, 218, 221, 224, 225, 228, 229, 234, 241, 242, 243, 244, 246, 248, 256, 257, 264, 267, 268, 269, 272, 273, 276, 279, 282, 283, 284, 292, 294, 295, 305, 310, 313, 314, 319, 322, 325, 330, 338, 341, 343, 345, 346, 350, 355, 356, 814, 881, 893], "loc_a": 313, "loc_b": 313, "local": [2, 43, 48, 51, 58, 74, 85, 90, 94, 120, 123, 139, 140, 151, 168, 175, 176, 183, 187, 212, 225, 230, 233, 235, 238, 242, 248, 290, 299, 338, 356, 363, 372, 373, 375, 379, 381, 383, 393, 407, 412, 414, 415, 417, 446, 451, 461, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 502, 538, 540, 544, 547, 549, 559, 560, 563, 566, 610, 611, 688, 689, 690, 691, 692, 693, 695, 696, 758, 759, 847, 850, 853, 855, 865, 874, 897, 900, 908, 966, 999, 1000, 1004, 1005, 1017, 1022, 1024, 1026, 1027, 1036, 1040, 1044, 1047, 1050], "local_filenam": 491, "localcach": 393, "locally_linear_embed": [2, 235, 998], "locallylinearembed": [2, 51, 231, 232, 233, 322, 688, 690, 692, 998, 1004, 1037, 1038, 1046, 1047, 1048], "localoutlierfactor": [2, 238, 248, 295, 296, 322, 389, 563, 908, 1007, 1039, 1040, 1042, 1046, 1047, 1048, 1049], "localoutlierfactor__n_neighbor": 248, "locat": [48, 62, 86, 87, 104, 111, 112, 206, 302, 320, 339, 368, 370, 373, 375, 379, 380, 383, 384, 393, 394, 407, 409, 413, 447, 459, 460, 468, 469, 470, 471, 472, 473, 474, 475, 487, 500, 501, 504, 505, 512, 515, 985, 991, 997, 1002, 1007, 1011, 1017, 1040], "location_": [111, 112, 468, 469, 470, 471, 472, 473, 474, 475], "location_reweight": [468, 473], "lock": [378, 393, 400, 401, 966, 1050], "loev": 534, "lof": [2, 48, 183, 225, 238, 248, 290, 338, 563, 850, 908, 1007, 1022], "lof_kw": 248, "lofti": [1042, 1043], "log": [2, 43, 58, 62, 63, 64, 109, 120, 134, 144, 146, 154, 164, 168, 171, 172, 174, 175, 176, 179, 199, 201, 205, 211, 216, 221, 229, 242, 244, 258, 263, 299, 314, 350, 370, 372, 373, 375, 383, 384, 389, 404, 405, 407, 408, 409, 412, 414, 415, 417, 447, 450, 459, 464, 469, 470, 471, 472, 473, 474, 475, 532, 536, 541, 549, 550, 551, 553, 555, 557, 559, 562, 564, 590, 591, 593, 594, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 642, 645, 648, 658, 659, 669, 671, 676, 680, 722, 741, 755, 797, 798, 800, 803, 804, 814, 839, 840, 841, 842, 843, 844, 845, 849, 860, 861, 868, 869, 898, 901, 906, 909, 911, 912, 914, 946, 990, 993, 995, 997, 998, 1003, 1004, 1006, 1009, 1011, 1015, 1017, 1020, 1021, 1034, 1035, 1036, 1041, 1042, 1043, 1046, 1049, 1050], "log10": [164, 176, 186, 205, 270, 339], "log1p": [107, 241, 868, 1001, 1011], "log2": [138, 221, 250, 557, 558, 559, 560, 564, 565, 912, 913, 914, 915, 1002], "log_": 1001, "log_2": [404, 563, 1007], "log_bas": 726, "log_den": 294, "log_dens": 849, "log_likelihood": [109, 610, 611, 797, 798], "log_likelihood_gradi": [610, 611], "log_logist": 1049, "log_loss": [2, 62, 63, 145, 148, 171, 314, 332, 350, 389, 405, 414, 557, 559, 561, 564, 646, 658, 676, 912, 914, 990, 997, 1001, 1015, 1017, 1034, 1036, 1038, 1046, 1047, 1048, 1049], "log_marginal_likelihood": [171, 172, 174, 176, 179, 417, 610, 611, 1042], "log_marginal_likelihood_value_": [610, 611], "log_prob": [797, 798, 799, 822], "log_reg": [252, 322], "log_reg_input_featur": 322, "log_scal": 1048, "log_scale_transform": [211, 229], "log_scaled_numer": [211, 229], "log_y_prob": 861, "logaddexp": 1049, "logan": [1046, 1047, 1048], "logarithm": [2, 107, 154, 186, 215, 242, 270, 339, 389, 416, 459, 590, 658, 659, 676, 704, 726, 741, 751, 755, 756, 757, 791, 799, 822, 835, 844, 845, 946, 1017, 1039], "logcosh": [419, 533], "logdet": 946, "logged_in": 370, "logger": 1043, "logic": [132, 363, 376, 377, 382, 403, 414, 1017, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "logical_and": [53, 146], "logical_not": [57, 97, 129, 214], "logical_or": [213, 219, 278, 381], "logical_xor": [53, 174, 343], "loginov": 1038, "logist": [2, 62, 64, 66, 101, 103, 107, 139, 160, 166, 183, 192, 200, 207, 209, 215, 217, 222, 228, 239, 241, 252, 263, 277, 280, 282, 283, 286, 288, 306, 307, 314, 322, 346, 350, 389, 390, 405, 408, 414, 416, 417, 436, 488, 496, 502, 504, 512, 541, 559, 561, 610, 631, 646, 657, 658, 659, 666, 668, 676, 741, 800, 814, 830, 833, 860, 861, 862, 864, 884, 911, 933, 935, 1001, 1005, 1006, 1015, 1016, 1022, 1023, 1025, 1027, 1036, 1039, 1040, 1042, 1043], "logistic__c": 105, "logistic_regress": [263, 823, 831], "logistic_regression_multinomi": 204, "logistic_regression_ovr": 204, "logistic_regression_path": [1040, 1041], "logisticregress": [2, 62, 66, 103, 105, 139, 156, 160, 166, 167, 168, 202, 203, 204, 205, 218, 226, 227, 239, 240, 250, 252, 263, 272, 278, 283, 307, 311, 318, 319, 320, 321, 322, 324, 326, 350, 362, 375, 377, 381, 383, 388, 398, 405, 406, 408, 414, 416, 427, 432, 437, 567, 569, 597, 631, 634, 643, 652, 659, 672, 673, 674, 675, 676, 687, 700, 788, 799, 814, 823, 829, 831, 835, 836, 838, 889, 890, 892, 893, 894, 895, 911, 942, 943, 944, 984, 997, 1001, 1002, 1011, 1015, 1016, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "logisticregression__c": [263, 311], "logisticregressioncv": [2, 64, 314, 389, 398, 658, 997, 1002, 1036, 1037, 1038, 1040, 1041, 1042, 1046, 1047, 1049, 1050], "logisticregressionifittedlogisticregress": 307, "logisticregressionlogisticregress": [103, 139, 239, 240, 250, 252, 263, 283, 319, 322], "logit": [2, 405, 417, 658, 659, 997], "loglik_lw": 109, "loglik_oa": 109, "loglik_r": 109, "loglike_": 532, "loglog": [109, 242], "logloss": 1043, "lognorm": [146, 176, 195, 258, 313, 1011], "logo": [0, 411, 807], "logprob": 849, "logreg": 838, "logspac": [43, 51, 64, 105, 109, 127, 159, 168, 171, 176, 186, 205, 215, 216, 242, 244, 258, 263, 270, 282, 293, 304, 311, 314, 339, 346, 823, 831, 996, 997], "logsumexp": [299, 1039], "loguniform": [45, 170, 277, 990, 1042], "logx": [215, 346], "lohit": 1049, "loic": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "loki": [363, 1001, 1040, 1043], "lomp": 373, "lon": 764, "london": [408, 415, 465], "londschien": [1045, 1049], "lone": [1047, 1048], "long": [0, 30, 43, 50, 51, 79, 95, 146, 175, 182, 186, 188, 211, 245, 246, 248, 272, 302, 309, 319, 350, 351, 358, 363, 373, 375, 383, 387, 389, 390, 401, 407, 452, 498, 538, 676, 677, 678, 803, 804, 839, 840, 841, 842, 843, 861, 862, 872, 1001, 1007, 1011, 1012, 1014, 1015, 1019, 1034, 1038, 1044, 1046], "long_term_trend_kernel": 175, "long_titl": 343, "longer": [0, 43, 70, 86, 137, 186, 187, 200, 306, 321, 375, 377, 407, 411, 414, 415, 448, 536, 563, 996, 1000, 1001, 1003, 1006, 1016, 1024, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "longest": 289, "longitud": [302, 309, 370, 498, 699, 764], "longpathsen": 393, "longstand": [1033, 1039], "loo": [389, 808, 1043], "look": [43, 44, 64, 86, 88, 120, 123, 125, 146, 147, 170, 175, 176, 182, 186, 187, 213, 231, 235, 238, 245, 260, 263, 264, 269, 271, 283, 306, 325, 350, 351, 358, 363, 364, 369, 370, 375, 376, 377, 379, 381, 383, 387, 388, 407, 410, 412, 413, 414, 415, 447, 487, 488, 557, 558, 559, 560, 564, 565, 602, 603, 631, 659, 692, 884, 912, 913, 914, 915, 997, 998, 1011, 1015, 1016, 1018, 1032, 1040, 1042], "lookup": [384, 965, 1041], "loop": [46, 47, 137, 146, 186, 264, 274, 350, 357, 362, 375, 376, 381, 407, 411, 416, 646, 647, 652, 653, 659, 660, 661, 662, 663, 990, 1014, 1015, 1035, 1036, 1039, 1044, 1045, 1048, 1049], "loopym": 1042, "loos": [260, 266, 1016, 1040], "looser": 205, "lopusz": 1043, "lorain": 323, "lorek": 1039, "lorentzen": [0, 396, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "lorenz": [211, 229, 1037, 1049], "lorenz_curv": [211, 229], "lose": [215, 228, 352, 370, 389, 410, 415, 417, 947, 948, 991, 997], "losi": [0, 397, 1032], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 129, 140, 145, 146, 147, 148, 170, 171, 183, 192, 196, 202, 204, 205, 213, 215, 216, 218, 219, 223, 229, 244, 263, 277, 305, 306, 314, 321, 325, 326, 332, 336, 337, 341, 343, 346, 350, 387, 389, 405, 412, 417, 463, 464, 496, 508, 509, 532, 538, 539, 540, 543, 547, 552, 553, 554, 558, 559, 560, 561, 562, 565, 643, 646, 649, 658, 659, 666, 667, 668, 669, 670, 671, 672, 676, 677, 678, 679, 703, 706, 709, 722, 723, 734, 735, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 790, 791, 796, 800, 803, 804, 814, 826, 827, 830, 861, 862, 864, 865, 868, 869, 877, 878, 879, 884, 904, 905, 910, 911, 913, 915, 948, 952, 994, 997, 1005, 1009, 1014, 1015, 1016, 1017, 1022, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "loss_": [305, 861, 862, 1005, 1046], "loss_curve_": [305, 861, 862], "loss_func": 52, "loss_funct": 52, "loss_function_": 1049, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1041, "lossi": 407, "lossili": 389, "lost": [58, 90, 113, 370, 376, 387, 401, 998, 1001], "lostanlen": 1042, "lostcoast": 1042, "lot": [43, 113, 149, 186, 215, 370, 375, 376, 377, 383, 412, 414, 803, 804, 896, 897, 990, 1013, 1015, 1016, 1020, 1021, 1025, 1032, 1037, 1039, 1040, 1041, 1042, 1044], "lot_area": 248, "lotan": 1025, "lotconfig": 143, "lotfrontag": 107, "loui": [323, 1037, 1038, 1042, 1044, 1046, 1048, 1049], "louib": [1040, 1041], "loupp": [0, 397, 414, 555, 556, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lourida": 1038, "low": [2, 37, 43, 50, 51, 72, 83, 112, 116, 122, 124, 127, 134, 137, 150, 168, 188, 205, 207, 211, 213, 215, 225, 231, 233, 238, 242, 248, 254, 255, 257, 260, 262, 263, 269, 271, 275, 276, 295, 296, 306, 313, 315, 316, 324, 331, 338, 339, 350, 357, 371, 372, 375, 380, 383, 387, 389, 393, 404, 405, 406, 411, 412, 415, 441, 443, 448, 467, 521, 524, 535, 582, 589, 603, 679, 692, 696, 705, 726, 742, 789, 849, 878, 885, 902, 948, 965, 990, 996, 997, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1011, 1013, 1016, 1017, 1023, 1027, 1033, 1036, 1037, 1038, 1040, 1041, 1046, 1047], "low_cardin": 315, "low_cardinality_featur": 315, "low_cardinalityindex": 315, "low_i": 207, "low_x": 207, "lower": [37, 44, 52, 63, 64, 67, 69, 91, 110, 116, 120, 122, 127, 134, 137, 140, 142, 146, 149, 150, 166, 170, 172, 174, 176, 178, 186, 187, 188, 197, 198, 200, 202, 211, 212, 213, 214, 224, 231, 235, 241, 242, 247, 256, 260, 263, 268, 269, 271, 272, 276, 277, 279, 282, 283, 292, 293, 295, 296, 311, 314, 322, 326, 331, 339, 350, 351, 352, 355, 370, 375, 389, 405, 406, 407, 410, 411, 412, 413, 414, 415, 418, 443, 447, 463, 466, 498, 509, 532, 534, 541, 544, 559, 560, 561, 562, 563, 588, 589, 591, 603, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 677, 679, 712, 716, 725, 728, 734, 739, 797, 798, 850, 852, 854, 855, 856, 858, 885, 904, 905, 906, 907, 908, 911, 934, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1016, 1017, 1034, 1035, 1040, 1047, 1049], "lower_bound": 268, "lower_bound_": [797, 798, 1040], "lowercas": [415, 423, 441, 442, 444, 446, 448, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 588, 589, 591, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 865, 870, 896, 897, 1045], "lowest": [2, 107, 116, 187, 197, 259, 369, 407, 411, 635, 637, 803, 804, 807, 911, 912, 998, 1001, 1017, 1047], "loyal": 1037, "loyola": [0, 365, 1045, 1046], "lo\u00efc": [0, 396, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "lp_model": [328, 329], "lpgo": [411, 809], "lpo": 810, "lprun": 381, "lr": [62, 64, 139, 156, 157, 214, 240, 241, 265, 272, 388, 398, 414, 568, 569, 570, 712, 984], "lr_": 1001, "lr__c": 414, "lr_base": 272, "lrap": [739, 1001], "lrjball": [1042, 1043], "lrlinearregress": 157, "ls100": 333, "ls2010": 993, "ls30": 333, "ls50": 333, "ls_pipelin": 332, "lsa": [2, 412, 544, 1034], "lsa_vector": 351, "lshforest": [1036, 1039], "lsi": 412, "lsqr": [69, 316, 549, 672, 674, 687, 995, 1033, 1039, 1046], "lstrip": [67, 79, 95, 238, 304, 311], "lstsq": [129, 375, 657, 670], "lsturtew": 1045, "lsvc": 416, "lsvm": 191, "lsvm_score": 191, "lsvm_time": 191, "lt": [103, 104, 139, 154, 186, 259, 267, 281, 375, 395], "ltd": [263, 370], "ltg": [168, 372, 501], "ltorgo": 370, "ltsa": [231, 232, 233, 689, 693, 998], "lu": [541, 544, 947, 948, 1038, 1039, 1040, 1041, 1048, 1049, 1050], "luangkot": 1039, "luca": [1032, 1042, 1043, 1044, 1045], "lucca": 1045, "luce": 1035, "lucen": 415, "lucgiffon": 1043, "luci": [0, 365, 386, 396, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "luciano": [1040, 1047], "lucieclair": 1046, "lucija": 1040, "lucio": 1041, "lucki": 358, "lucyleeow": 1043, "ludwig": 1032, "luessi": 1034, "lui": [658, 1033, 1035, 1036, 1040, 1049], "luiz": 1046, "luk": 1041, "luka": [1036, 1043, 1049, 1050], "luke": 1040, "lukowski": 1047, "luk\u00e1\u0161": 1049, "luna": 1046, "lunt": 1035, "luo": 1036, "lupo": 1044, "luqi": 1041, "luqu": 1042, "lurk": 1032, "lustig": 997, "lutz": [1038, 1042, 1045, 1049], "luxburg": [407, 451, 461, 691], "luzgin": 1042, "lv_ep": 243, "lvdmaaten": [692, 1039], "lw": [93, 109, 110, 112, 124, 128, 129, 206, 212, 214, 217, 221, 228, 234, 257, 264, 279, 294, 309, 330, 345], "lw_cov_": 113, "lw_mse": 110, "lw_prec_": 113, "lw_score": 127, "lw_shrinkag": 110, "lwda": 449, "lx": 1004, "ly": [243, 852, 854, 855, 856, 1036], "ly648499246": 1045, "lynch": [1033, 1039], "lyon": [1038, 1039], "lyra": [1033, 1036, 1037], "lyrl2004": [370, 497], "l\u00e9o": 1040, "l\u00e9on": [1015, 1046, 1047, 1048], "l\u00e9onard": [1042, 1047], "l\u00e9one": 1038, "l\u00e9oni": 1038, "l\u00f3pez": [1036, 1040, 1041, 1044], "l\u00f6fstedt": 1039, "l\u00f6ning": 1044, "m": [0, 43, 47, 50, 57, 63, 64, 79, 91, 92, 96, 97, 98, 111, 112, 120, 134, 157, 196, 211, 229, 269, 273, 302, 325, 332, 335, 345, 350, 362, 363, 369, 370, 372, 373, 375, 379, 381, 389, 393, 404, 405, 407, 409, 412, 414, 416, 418, 443, 444, 445, 449, 456, 472, 473, 500, 513, 528, 532, 534, 536, 541, 639, 645, 649, 664, 671, 685, 686, 689, 693, 708, 716, 726, 741, 756, 758, 759, 797, 798, 850, 875, 948, 979, 980, 991, 993, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1015, 1017, 1025, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "m1": [373, 403], "m11": 370, "m2": 403, "m2012": 994, "m2019": 1008, "m_max": 172, "ma": [113, 315, 339, 997, 1038, 1043], "maascha": 1047, "maaten": [692, 696, 998], "mabel": [1040, 1044], "mabu": 1045, "mac": [57, 315, 332, 370, 375, 708, 1001], "macaulei": 315, "macbook": 1040, "macdonald": [1042, 1043], "mach": [274, 405, 411, 593, 594], "machado": [405, 723], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 96, 105, 140, 160, 164, 165, 168, 170, 175, 184, 188, 202, 204, 207, 223, 251, 263, 269, 272, 275, 286, 303, 309, 314, 316, 320, 323, 326, 335, 340, 343, 346, 350, 352, 362, 363, 368, 369, 370, 372, 375, 378, 382, 387, 388, 389, 392, 395, 401, 405, 407, 411, 412, 414, 415, 417, 436, 438, 447, 470, 471, 477, 502, 504, 510, 516, 517, 518, 530, 532, 534, 541, 544, 555, 556, 557, 558, 559, 560, 564, 565, 566, 593, 594, 610, 611, 614, 619, 622, 634, 638, 639, 641, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 659, 676, 682, 683, 692, 708, 713, 725, 735, 741, 743, 785, 788, 797, 829, 830, 844, 845, 850, 853, 860, 861, 862, 864, 882, 884, 890, 904, 905, 906, 907, 909, 910, 914, 915, 990, 991, 993, 994, 997, 998, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1011, 1015, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1032, 1034, 1044, 1045, 1046, 1047, 1049], "machineri": 953, "maciej": 1043, "maci\u00e0": [1001, 1045, 1047], "mackai": [644, 645, 997], "mackenbach": 1043, "maco": [376, 378, 393, 403, 1040, 1044, 1046], "macosx": 1032, "macro": [45, 68, 102, 165, 267, 307, 318, 328, 329, 370, 411, 707, 713, 729, 730, 738, 783, 784, 787, 788, 822, 1001, 1032, 1040, 1048], "macro_roc_auc_ovo": 278, "macro_roc_auc_ovr": 278, "macroscop": 407, "macsween": [1041, 1042], "mad": [671, 1038], "madan": 1044, "made": [0, 52, 64, 102, 112, 125, 126, 134, 140, 157, 177, 186, 187, 211, 229, 248, 260, 273, 315, 319, 339, 355, 362, 370, 372, 375, 379, 389, 390, 398, 407, 414, 415, 419, 442, 445, 446, 448, 458, 496, 503, 588, 589, 591, 630, 631, 656, 665, 679, 685, 686, 735, 783, 800, 803, 804, 814, 818, 819, 820, 841, 844, 845, 1002, 1007, 1017, 1020, 1025, 1032, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1045, 1046, 1050], "madelon": 515, "madhura": [1041, 1043, 1044, 1047, 1048], "madinak": 1047, "madsen": [1038, 1040], "mae": [43, 52, 154, 211, 213, 558, 565, 745, 913, 915, 1001, 1017, 1039, 1040, 1044, 1045], "mae_test": 186, "mae_train": 186, "maennel": 1047, "magali": 1046, "magazin": [112, 416], "magda": 1043, "magenta": [109, 148], "maggi": [1046, 1050], "maggiecheg": [1042, 1046], "maggio": [1043, 1044, 1045], "magic": [245, 376, 381, 417, 616, 621, 624], "magnesium": 372, "magnitud": [43, 129, 136, 171, 182, 186, 228, 248, 274, 309, 314, 321, 326, 362, 370, 381, 407, 414, 417, 613, 652, 704, 884, 997, 1001, 1005, 1011, 1015, 1017, 1034, 1041, 1050], "mahajan": [1040, 1042, 1049], "mahal": 111, "mahal_emp_cov": 111, "mahal_robust_cov": 111, "mahalanobi": [108, 112, 183, 214, 407, 409, 449, 456, 468, 469, 470, 471, 472, 473, 474, 475, 699, 778, 779, 780, 995, 1004, 1007, 1022, 1040, 1043, 1044], "mahalanobisdist": 699, "mahapatra": 1039, "mahdavi": 639, "maheshakya": [0, 1035, 1036, 1037], "mahieux": 1025, "mahimkar": 1050, "mahmood": 1050, "mahout": 841, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 80, 89, 103, 116, 120, 143, 144, 149, 168, 174, 176, 178, 186, 189, 191, 194, 197, 201, 204, 215, 217, 236, 245, 248, 272, 274, 276, 277, 283, 304, 314, 329, 339, 343, 346, 350, 351, 352, 358, 362, 363, 364, 367, 369, 370, 371, 372, 374, 375, 377, 379, 380, 383, 387, 389, 390, 393, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 430, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 458, 461, 464, 468, 471, 481, 482, 483, 486, 487, 488, 496, 508, 509, 515, 534, 535, 538, 540, 541, 544, 547, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 574, 581, 594, 597, 602, 610, 611, 617, 620, 634, 635, 637, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 679, 681, 684, 686, 688, 689, 691, 692, 693, 695, 697, 705, 711, 712, 715, 716, 718, 719, 721, 722, 723, 724, 726, 738, 756, 763, 785, 786, 800, 802, 803, 804, 805, 814, 815, 816, 819, 820, 825, 829, 832, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 852, 854, 855, 856, 862, 863, 864, 867, 869, 879, 881, 882, 883, 884, 885, 887, 893, 896, 897, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 928, 930, 931, 937, 951, 952, 990, 991, 993, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "maikia": [1040, 1041, 1043, 1044], "mail": [370, 375, 379, 383, 387, 390, 1040, 1041], "mailhot": 1032, "mailman": 383, "main": [2, 37, 48, 68, 95, 116, 124, 143, 183, 238, 278, 288, 317, 346, 350, 362, 363, 364, 368, 373, 375, 377, 379, 381, 383, 387, 388, 389, 392, 393, 405, 407, 412, 414, 415, 417, 503, 525, 530, 549, 550, 625, 713, 834, 904, 905, 990, 998, 1000, 1001, 1008, 1013, 1021, 1024, 1032, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "mainak": 1039, "maingret": 1043, "mainli": [64, 86, 134, 137, 170, 278, 286, 362, 377, 405, 611, 1003, 1008], "maint": 379, "maintain": [88, 216, 229, 231, 245, 269, 363, 374, 378, 381, 382, 383, 387, 389, 390, 393, 407, 414, 439, 441, 873, 874, 880, 881, 884, 889, 892, 893, 895, 997, 998, 1011, 1020, 1021, 1027, 1047], "mainten": [0, 375, 383, 387, 393, 400, 997, 1021, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mainy": 1044, "mair": 635, "mairal": [412, 531, 537], "maisonneuv": 1044, "maithreyi": 1042, "maj": 569, "major": [2, 49, 54, 70, 140, 263, 276, 309, 313, 318, 319, 320, 321, 322, 323, 324, 325, 343, 352, 356, 362, 370, 374, 375, 379, 381, 387, 390, 401, 407, 411, 413, 415, 551, 569, 570, 694, 916, 918, 1001, 1004, 1015, 1021, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "majorfeatur": 379, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 89, 94, 95, 100, 105, 125, 134, 140, 143, 146, 149, 152, 165, 168, 170, 175, 178, 185, 186, 187, 188, 193, 197, 198, 201, 204, 205, 206, 211, 212, 213, 215, 217, 229, 232, 240, 242, 244, 245, 246, 248, 254, 256, 259, 260, 263, 264, 269, 271, 272, 278, 279, 280, 283, 288, 298, 306, 309, 310, 315, 322, 324, 326, 339, 348, 350, 351, 352, 356, 358, 362, 363, 364, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 383, 387, 389, 393, 398, 401, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 419, 439, 440, 441, 442, 444, 446, 448, 450, 451, 452, 457, 458, 459, 461, 487, 503, 514, 515, 522, 523, 527, 532, 534, 541, 551, 552, 555, 556, 561, 562, 583, 584, 607, 608, 631, 649, 655, 656, 671, 691, 695, 730, 737, 742, 768, 769, 781, 797, 798, 800, 802, 805, 811, 815, 816, 819, 820, 826, 827, 834, 835, 838, 871, 880, 883, 884, 888, 892, 894, 895, 896, 897, 910, 918, 923, 930, 931, 942, 948, 955, 961, 986, 991, 993, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "make_": 1041, "make_biclust": [2, 59, 513, 1034], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 204, 223, 238, 257, 312, 319, 322, 337, 340, 341, 347, 371, 378, 414, 515, 696, 710, 792, 793, 920, 1040, 1043, 1046], "make_cbar": 280, "make_checkerboard": [2, 58, 511, 1034], "make_circl": [2, 67, 79, 95, 125, 152, 236, 304, 305, 311, 330, 371, 1033, 1040, 1043], "make_classif": [2, 62, 64, 67, 138, 139, 141, 165, 167, 266, 272, 280, 281, 299, 304, 311, 318, 320, 324, 326, 346, 358, 371, 378, 403, 406, 414, 436, 437, 486, 512, 553, 555, 557, 564, 605, 607, 666, 697, 698, 700, 702, 799, 822, 823, 828, 829, 831, 834, 861, 864, 904, 911, 990, 1001, 1002, 1011, 1016, 1038, 1039, 1040, 1042], "make_column_selector": [2, 103, 143, 154, 248, 408, 463, 466, 1042], "make_column_transform": [2, 143, 154, 186, 240, 319, 408, 463, 465, 1040], "make_data": [70, 94], "make_dataset": 1041, "make_default": 970, "make_ellips": 256, "make_estim": 248, "make_friedman1": [2, 371, 414, 539, 543, 593, 594, 632], "make_friedman2": [2, 371, 611, 613, 614, 615, 616, 617, 621, 624, 625], "make_friedman3": [2, 371], "make_gaussian_quantil": [2, 134, 136, 371, 469, 473, 474, 475, 480, 520], "make_hastie_10_2": [2, 148, 273, 371, 414, 559, 1008], "make_heatmap": 280, "make_low_rank_matrix": [2, 324, 326, 524], "make_ml_clf": 118, "make_moon": [2, 67, 79, 95, 238, 269, 304, 305, 311, 371, 990, 1039, 1043], "make_multilabel_classif": [2, 118, 246, 371, 515, 536, 788, 835, 836, 1001, 1034, 1035, 1037, 1043], "make_pipelin": [2, 43, 67, 91, 116, 139, 143, 154, 164, 165, 168, 181, 182, 186, 187, 191, 193, 199, 201, 211, 212, 217, 225, 229, 232, 238, 239, 240, 248, 249, 250, 252, 263, 266, 276, 283, 289, 298, 304, 311, 314, 315, 316, 318, 319, 320, 321, 322, 323, 351, 358, 388, 398, 408, 411, 567, 676, 678, 856, 864, 889, 890, 892, 893, 894, 895, 904, 905, 906, 907, 909, 910, 991, 1004, 1011, 1015, 1016, 1035, 1042, 1045], "make_plot": 309, "make_regress": [2, 49, 107, 193, 195, 196, 198, 214, 215, 282, 319, 325, 358, 371, 378, 388, 554, 556, 560, 565, 606, 608, 609, 635, 646, 647, 649, 651, 652, 653, 655, 660, 661, 662, 663, 664, 665, 667, 671, 679, 681, 682, 683, 685, 686, 687, 862, 905, 922, 1001, 1002, 1004], "make_s_curv": [2, 231, 236], "make_scor": [2, 52, 146, 149, 263, 273, 326, 398, 406, 411, 711, 800, 822, 826, 827, 1001, 1041, 1049], "make_sparse_coded_sign": [2, 210, 531, 537, 545, 546, 1046, 1048], "make_sparse_spd_matrix": [2, 113, 477, 529, 1049], "make_sparse_uncorrel": [2, 371], "make_spd_matrix": [2, 527], "make_subplot": 140, "make_swiss_rol": [2, 100, 235, 1046], "make_union": [2, 408, 863, 1035, 1039], "makedir": 1039, "maker": [185, 186], "makhija": 1047, "makoeppel": 1045, "maksym": 1047, "maladier": 1047, "maladi\u00e8r": [1047, 1048], "malcolm": 1040, "maldonado": [1042, 1045], "male": [103, 186, 323, 380, 877, 878, 1011], "malem": 1049, "malet": 1032, "malform": [55, 1036], "malic": [314, 372], "malic_acid": 48, "malici": 401, "malign": [168, 372, 500], "malik": [407, 451, 461, 691], "mallat": [664, 685, 686, 997], "mallatpursuit93": [664, 685, 686], "mallow": [731, 1038], "maloo": [1040, 1041], "malt": [1045, 1046, 1047, 1049], "maltimor": 1042, "malu": 229, "malzer": 445, "mal\u00e9zieux": 1045, "mamba": 401, "mame": 1049, "mammal": 50, "mammalian": 412, "man": [412, 590, 769, 839, 843, 999, 1001, 1003], "manag": [0, 2, 116, 252, 361, 369, 373, 376, 377, 379, 383, 387, 389, 390, 401, 414, 449, 467, 626, 902, 995, 1017, 1020, 1021, 1025, 1027, 1045, 1048], "manaileng": 1045, "manasimj": 1050, "mandal": 1042, "mandatori": [375, 415], "mandatorili": 1039, "mandera": 1035, "mandi": [1043, 1046], "mandjev": 1046, "mandyam": 1042, "mangasarian": [168, 372], "mangipudi": 1038, "manh": 1040, "manhattan": [407, 440, 444, 449, 456, 699, 762, 771, 778, 779, 780, 851, 999, 1004, 1036, 1041, 1048], "manhattan_dist": [2, 449, 456, 688, 762, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1032, 1042, 1047, 1048], "manhattandist": 699, "mani": [43, 46, 49, 57, 88, 89, 106, 109, 113, 134, 140, 141, 142, 147, 164, 168, 188, 211, 231, 242, 255, 262, 263, 269, 277, 281, 282, 289, 309, 314, 315, 318, 319, 320, 321, 322, 324, 325, 326, 350, 358, 362, 364, 370, 372, 374, 375, 377, 388, 389, 390, 393, 401, 404, 405, 407, 408, 409, 412, 414, 415, 416, 417, 419, 503, 541, 553, 554, 557, 558, 559, 560, 564, 565, 566, 606, 609, 627, 639, 650, 654, 658, 659, 666, 667, 668, 676, 677, 678, 692, 695, 774, 778, 800, 804, 814, 861, 862, 877, 882, 884, 904, 912, 913, 914, 915, 990, 991, 993, 997, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1014, 1016, 1018, 1019, 1020, 1021, 1025, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1048], "manideep": 1050, "manifest": [383, 998, 1004], "manifold": [2, 51, 74, 85, 100, 139, 234, 235, 236, 242, 289, 299, 318, 322, 323, 330, 368, 389, 407, 412, 414, 502, 525, 530, 544, 549, 566, 688, 689, 690, 691, 692, 693, 694, 695, 696, 853, 865, 874, 897, 933, 1004, 1022, 1026, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1049], "manimaran": [1041, 1043, 1044, 1045, 1046], "manipul": [2, 369, 403, 507, 1020, 1038], "manish": 1043, "maniteja": [1038, 1039, 1040], "mankoo": 1047, "mann": 1042, "mannbi": 1040, "manner": [43, 107, 120, 165, 187, 191, 256, 322, 323, 363, 375, 381, 407, 412, 414, 415, 709, 844, 845, 990, 1001, 1017, 1035, 1042], "mannila": 1013, "manning2008": 1001, "manoharan": [1039, 1040], "manoj": [0, 168, 397, 1035, 1036, 1037, 1038, 1039], "manraj": 1039, "mansi": 1047, "mansingh": 1046, "mansouri": 1048, "mantovani": 1047, "manu": 370, "manual": [2, 43, 80, 88, 186, 187, 189, 212, 222, 271, 289, 331, 337, 350, 352, 362, 363, 370, 375, 379, 380, 387, 388, 393, 401, 407, 411, 412, 413, 436, 448, 567, 799, 822, 854, 877, 883, 990, 995, 996, 997, 1000, 1001, 1004, 1011, 1021, 1040, 1042, 1048, 1050], "manuel": [1032, 1036, 1040, 1041, 1044, 1045, 1050], "manufactur": [186, 414], "manvendra": [1038, 1039], "maocx": 1042, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 86, 116, 125, 138, 145, 148, 152, 170, 183, 191, 211, 229, 231, 233, 237, 245, 248, 270, 273, 278, 297, 300, 302, 308, 309, 332, 339, 343, 351, 352, 369, 370, 376, 387, 389, 398, 401, 405, 407, 408, 411, 412, 414, 415, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 496, 498, 502, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 762, 765, 797, 798, 799, 800, 803, 804, 811, 812, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 954, 957, 958, 990, 993, 998, 1001, 1003, 1013, 1016, 1017, 1022, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049], "mapd": 1001, "mape": [2, 52, 746, 1001], "mape_cv_mean": 143, "mape_cv_std": 143, "mapi": 52, "mar": 51, "marc": [1039, 1041, 1042, 1048], "march": [175, 726, 756, 1001, 1032, 1036, 1040, 1042, 1047], "marchand": 1046, "marchman": [1033, 1034], "marco": [1038, 1040, 1041, 1045, 1046, 1047, 1050], "marcofalk": 1039, "marcogorelli": [1040, 1041], "marcolini": 1045, "marcom": 1046, "marcu": [1040, 1049], "mare": 1049, "marek": [1032, 1049], "maren": [0, 365, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "margeta": 1040, "margin": [30, 43, 51, 62, 64, 136, 161, 171, 172, 173, 174, 175, 176, 183, 186, 187, 192, 221, 222, 224, 246, 248, 269, 286, 309, 312, 315, 334, 335, 337, 338, 339, 341, 343, 347, 348, 372, 405, 412, 414, 417, 512, 610, 611, 631, 645, 676, 735, 833, 881, 893, 906, 909, 997, 1001, 1003, 1007, 1008, 1011, 1015, 1016, 1022, 1039, 1041], "marguli": 1042, "mari": [102, 1040, 1041, 1042, 1043, 1046], "maria": [168, 407, 1043, 1044, 1045, 1046, 1047], "mariam": 1044, "mariana": 1043, "mariangela": 1045, "mariano": 269, "mariel": 1043, "marielaraj": 1045, "marija": [1043, 1044, 1050], "marijn": 1044, "marin": [528, 1050], "marina": 407, "marinelm": 1041, "mario": [405, 1036, 1038, 1046, 1047, 1048], "marit": [325, 496], "mari\u00e9": [0, 365, 1041, 1042, 1043, 1044, 1045, 1046], "mark": [2, 70, 91, 118, 163, 182, 273, 280, 367, 375, 379, 383, 384, 389, 407, 535, 607, 608, 611, 632, 658, 857, 858, 899, 900, 917, 923, 938, 943, 948, 997, 1025, 1027, 1032, 1033, 1038, 1040, 1041, 1048, 1049, 1050], "markdown": 378, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 85, 88, 91, 92, 93, 96, 97, 115, 118, 122, 140, 153, 177, 178, 191, 199, 205, 207, 209, 211, 213, 214, 226, 228, 232, 254, 256, 257, 263, 264, 269, 271, 272, 273, 296, 309, 314, 330, 354, 378, 379, 415, 1040, 1042, 1043, 1048], "markeredgecolor": [82, 88, 94, 96, 97], "markeredgewidth": [111, 273], "markerfacecolor": [82, 88, 94, 96, 97], "markers": [82, 88, 91, 94, 96, 97, 146, 173, 177, 241, 263, 322], "markerstyl": 263, "market": [42, 80, 85, 149, 183, 231, 232, 407, 409, 453, 470, 471, 689, 998, 1022, 1025], "marketplac": 1025, "markham": [1036, 1043, 1044], "markiwanchyshyn": 1040, "marko": [1032, 1041, 1042, 1048], "markou": 1045, "markov": [417, 611, 1006, 1020, 1032], "markovtsev": 1040, "marktab": 1037, "marku": [407, 449, 456, 1040, 1042, 1043, 1044], "marmo": [0, 366, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "maron": [407, 441], "marr": 186, "marr_unmarri": 186, "marreddi": 1046, "marri": 186, "marriott": 51, "marsgui": 1040, "marsh": 1043, "marshal": 372, "marsi": 1035, "marsland": 530, "marslast": 530, "marszalek": [758, 759, 999], "mart": [51, 1042], "martel": 1046, "martha": 315, "martian": 1042, "martin": [0, 365, 721, 723, 724, 997, 1001, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050], "martin1997": 1001, "martina": [1042, 1044], "martinbpr": [1037, 1038], "martinez": 1039, "martino": 1037, "martinosorb": 1037, "martinsson": [55, 535, 541, 948], "martynov": 1045, "mart\u00edn": [1045, 1046], "marufo": 1047, "marufur": 1039, "marvin": [1047, 1048], "marwaha": 1040, "marx": 1011, "maryanmorel": [1037, 1038], "marzinotto": [1040, 1041], "mar\u00eda": [1046, 1047, 1048], "mas_vnr_typ": 248, "masafumi": 1037, "masanori": [1047, 1048], "masashi": [1042, 1044], "masecchia": 1032, "mash": 415, "mask": [2, 53, 77, 99, 211, 219, 248, 267, 268, 332, 384, 389, 408, 414, 463, 468, 473, 561, 562, 581, 585, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 629, 630, 632, 633, 649, 671, 800, 803, 804, 814, 972, 991, 1008, 1032, 1035, 1037, 1038, 1040, 1042, 1050], "mask_al": 991, "mask_false_neg": 263, "mask_false_posit": 263, "mask_missing_values_onli": 991, "mask_out": 53, "mask_test": 229, "mask_train": [187, 229], "mask_true_neg": 263, "mask_true_posit": 263, "mask_y_pr": 66, "maskani": [1040, 1042, 1043, 1044], "masked_arrai": [339, 800, 814], "masked_equ": 113, "maskedarrai": [273, 1038], "mason": 1036, "mass": [168, 249, 372, 445, 797, 997, 1008], "massachusett": 370, "massia": [0, 1043, 1045, 1046], "massich": [1039, 1040, 1041, 1042], "massil": 1038, "masstran": 1041, "master": [51, 289, 323, 375, 1025], "masurel": 1033, "masvnrarea": [107, 154], "masvnrtyp": [143, 154], "mat": [369, 415], "match": [2, 43, 58, 72, 87, 120, 121, 123, 129, 140, 183, 191, 192, 211, 233, 241, 248, 343, 352, 370, 373, 377, 407, 412, 414, 415, 428, 448, 463, 465, 491, 508, 509, 515, 526, 531, 537, 542, 548, 551, 567, 568, 572, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 658, 664, 665, 685, 686, 699, 703, 704, 705, 713, 715, 719, 734, 778, 779, 780, 786, 844, 845, 849, 853, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 904, 911, 917, 934, 998, 1000, 1001, 1003, 1004, 1022, 1023, 1027, 1032, 1038, 1039, 1040, 1042, 1044, 1045, 1048, 1050], "matchingdist": 699, "matchmak": 1025, "matcovici": 1042, "mate": 350, "matem\u00e1tica": 997, "mateo": 1045, "materi": [53, 186, 325, 390, 541, 581, 894, 895], "matern": [2, 179, 417, 1043, 1047], "mateusz": [1036, 1043, 1044, 1049, 1050], "math": [82, 102, 149, 168, 248, 269, 270, 372, 393, 764], "mathbb": [120, 137, 173, 410, 1001, 1008, 1016], "mathbf": [173, 343, 412, 997, 1001, 1005, 1006, 1015], "mathcal": [215, 346, 412, 414, 627, 696, 993, 995, 997, 1001, 1015, 1045], "mathemat": [37, 134, 186, 199, 228, 272, 367, 372, 375, 389, 392, 407, 409, 412, 413, 417, 549, 550, 557, 564, 635, 646, 656, 792, 793, 798, 862, 906, 909, 912, 914, 997, 1001, 1005, 1011, 1013, 1023, 1025, 1027, 1046], "matheu": 1038, "mathew": 1047, "mathi": 1045, "mathia": 1046, "mathieu": [0, 397, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045], "mathrm": [407, 409, 412, 416, 997, 1017], "mathschi": 1044, "mathur": [1039, 1041, 1042, 1047, 1048, 1050], "mathurin": [0, 1043, 1045, 1046], "mathurinm": [1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "matjansen": 1046, "mato": 1044, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 322, 323, 325, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 371, 375, 382, 393, 400, 437, 502, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 996, 1020, 1029, 1041, 1044, 1045, 1046, 1047, 1050], "matric": [2, 37, 70, 74, 75, 111, 113, 120, 216, 255, 256, 258, 259, 260, 289, 302, 319, 325, 332, 350, 351, 367, 369, 377, 378, 387, 388, 389, 407, 408, 409, 410, 412, 415, 416, 422, 449, 450, 452, 463, 472, 480, 481, 482, 483, 526, 534, 535, 538, 540, 541, 544, 547, 549, 550, 555, 556, 563, 566, 581, 582, 589, 643, 646, 647, 652, 653, 658, 664, 672, 674, 687, 754, 760, 768, 774, 778, 779, 780, 781, 792, 797, 798, 830, 848, 851, 856, 867, 871, 873, 876, 879, 881, 882, 884, 887, 889, 891, 893, 894, 895, 896, 897, 906, 907, 909, 910, 926, 948, 955, 964, 971, 973, 974, 991, 993, 995, 998, 999, 1000, 1002, 1004, 1005, 1013, 1015, 1016, 1020, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 87, 95, 102, 110, 111, 112, 113, 115, 120, 121, 122, 130, 177, 183, 189, 192, 198, 212, 216, 239, 242, 243, 245, 259, 261, 263, 276, 306, 322, 325, 328, 329, 343, 350, 351, 352, 357, 362, 370, 371, 372, 375, 377, 381, 384, 387, 388, 389, 404, 408, 409, 410, 415, 416, 417, 418, 419, 429, 430, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 453, 456, 458, 459, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 492, 496, 497, 500, 501, 502, 503, 504, 505, 508, 509, 510, 519, 521, 523, 524, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 593, 594, 603, 604, 605, 606, 607, 608, 609, 611, 620, 629, 630, 631, 633, 635, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 712, 713, 714, 715, 716, 718, 722, 729, 730, 731, 734, 738, 739, 740, 741, 754, 755, 758, 759, 760, 761, 763, 764, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 787, 788, 792, 793, 796, 797, 798, 799, 800, 803, 804, 814, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 873, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 926, 928, 929, 930, 931, 936, 945, 946, 947, 948, 949, 952, 954, 955, 963, 964, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 989, 991, 993, 995, 997, 998, 1002, 1003, 1004, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "matrixorz": 1035, "matshow": [58, 59, 99, 166, 306, 502], "matsubara": 1001, "matt": [1035, 1036, 1037, 1042, 1043, 1047, 1048], "matteo": [1036, 1038, 1046], "matter": [129, 260, 343, 358, 407, 408, 414, 567, 668, 676, 678, 997, 1036], "matthew": [2, 374, 380, 536, 743, 1032, 1035, 1039, 1041, 1045, 1046, 1050], "matthews_corrcoef": [2, 1001, 1032, 1038, 1039, 1046], "matthia": [1032, 1034, 1035, 1038, 1039, 1040, 1044, 1047], "matthieu": [0, 397, 1032, 1036, 1047], "matti": [1033, 1036, 1037], "matur": [375, 1020, 1021], "mat\u00e9rn": 619, "mat\u00eda": 1046, "maud": 1035, "mauna": 175, "maura": 1043, "mauroantonioserrano": 1047, "mav": 1050, "mavani": 1040, "mavroforaki": [1036, 1038], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 85, 91, 95, 100, 104, 105, 108, 110, 113, 120, 123, 127, 130, 134, 136, 142, 148, 152, 159, 160, 161, 163, 164, 168, 172, 174, 175, 182, 183, 186, 196, 199, 201, 204, 205, 207, 213, 214, 217, 225, 227, 229, 234, 242, 246, 267, 268, 269, 280, 288, 289, 291, 295, 296, 300, 302, 304, 306, 309, 311, 312, 314, 321, 326, 331, 333, 347, 362, 407, 409, 412, 468, 469, 470, 471, 472, 473, 474, 475, 476, 512, 536, 555, 556, 557, 558, 559, 560, 563, 564, 565, 606, 627, 631, 632, 648, 649, 669, 672, 674, 680, 691, 692, 696, 699, 704, 705, 757, 792, 793, 800, 861, 862, 873, 874, 876, 883, 890, 891, 912, 913, 914, 915, 997, 999, 1004, 1011, 1015, 1016, 1022, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "max_": [407, 1001], "max_abs_": 873, "max_abs_scal": 1011, "max_bin": [321, 322, 414, 561, 562, 1049], "max_categori": [315, 322, 324, 877, 878, 1011, 1046, 1048], "max_cluster_s": 445, "max_column": 229, "max_degre": [879, 1045], "max_depth": [46, 67, 135, 136, 139, 142, 143, 144, 145, 146, 147, 148, 152, 153, 155, 181, 232, 266, 281, 286, 320, 321, 354, 356, 357, 388, 389, 406, 414, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 711, 803, 804, 828, 912, 913, 914, 915, 916, 917, 918, 990, 1008, 1017, 1041, 1043], "max_df": [54, 270, 332, 350, 351, 588, 591, 1043, 1050], "max_dist": 242, "max_doc_update_it": 536, "max_ep": [407, 449, 454, 455, 456], "max_error": [2, 403, 1001, 1041], "max_estim": 138, "max_featur": [54, 67, 138, 148, 247, 266, 281, 320, 414, 416, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 588, 591, 597, 912, 913, 914, 915, 990, 997, 1032, 1034, 1035, 1039, 1040, 1043, 1046, 1049], "max_features_": [559, 560, 597, 912, 913, 914, 915, 1046], "max_fpr": [788, 1001, 1040], "max_fun": [861, 862, 1042], "max_i": [246, 1003], "max_idf": 1045, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 104, 105, 120, 123, 139, 140, 143, 149, 156, 159, 160, 181, 182, 186, 187, 193, 198, 205, 218, 219, 220, 223, 224, 226, 231, 232, 233, 234, 236, 249, 250, 254, 255, 256, 257, 260, 282, 299, 304, 305, 306, 315, 320, 321, 322, 328, 329, 336, 350, 351, 381, 389, 414, 419, 439, 442, 446, 447, 448, 453, 458, 460, 470, 471, 477, 481, 482, 483, 531, 532, 533, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 561, 562, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 692, 693, 694, 797, 798, 814, 853, 861, 862, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 991, 993, 997, 1004, 1005, 1014, 1015, 1033, 1036, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050], "max_iter": 329, "max_iter_list": 149, "max_iter_predict": 610, "max_j": [646, 652], "max_leaf_nod": [134, 140, 148, 211, 321, 357, 414, 557, 558, 559, 560, 561, 562, 564, 565, 566, 912, 913, 914, 915, 1035, 1041, 1043], "max_n": [588, 589, 591, 1032], "max_n_alpha": [651, 655], "max_nbyt": 966, "max_no_improv": [77, 94, 97, 448, 537, 538, 539, 546, 1046, 1047], "max_patch": [83, 415, 583, 584, 1040], "max_resourc": [146, 803, 804, 990], "max_resources_": [803, 804], "max_sampl": [150, 181, 414, 555, 556, 557, 558, 563, 564, 565, 634, 1042, 1045, 1048], "max_samples_": 563, "max_skip": 671, "max_subpopul": [228, 679, 1046], "max_thread": [363, 376], "max_train_s": [43, 52, 411, 821, 1039], "max_trial": [671, 997], "max_val": 934, "max_valu": [627, 1043, 1044], "max_x": 246, "maxabs_scal": [2, 389, 873, 1040], "maxabsscal": [2, 364, 403, 868, 889, 991, 1011, 1037, 1040, 1041, 1042, 1043, 1048, 1049], "maxent": [2, 658, 659, 997], "maxent_du": 658, "maxi": 1047, "maxim": [115, 116, 120, 126, 130, 146, 193, 259, 260, 263, 270, 274, 278, 279, 282, 283, 299, 314, 320, 339, 343, 354, 357, 372, 389, 404, 406, 407, 410, 412, 414, 416, 417, 549, 594, 610, 611, 644, 645, 648, 669, 679, 680, 720, 800, 803, 804, 814, 873, 879, 889, 995, 997, 1000, 1001, 1004, 1006, 1016, 1035, 1037, 1042, 1045, 1047, 1050], "maxima": 407, "maximesaur": [1047, 1048], "maximis": [159, 255, 297, 995, 1004], "maximum": [2, 43, 47, 50, 64, 69, 72, 90, 109, 110, 111, 112, 113, 122, 134, 136, 139, 140, 142, 149, 171, 173, 176, 177, 183, 192, 199, 248, 263, 279, 291, 295, 296, 302, 309, 334, 335, 337, 338, 341, 343, 351, 354, 356, 362, 370, 380, 381, 388, 389, 404, 405, 407, 409, 410, 412, 414, 415, 417, 418, 419, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 453, 456, 458, 460, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 481, 482, 483, 498, 509, 511, 512, 513, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 584, 597, 610, 627, 631, 632, 635, 637, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 716, 744, 781, 797, 800, 803, 804, 806, 814, 821, 828, 853, 860, 861, 862, 868, 869, 873, 874, 876, 879, 880, 881, 883, 892, 893, 898, 899, 900, 901, 904, 905, 909, 912, 913, 914, 915, 916, 918, 927, 934, 990, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1015, 1016, 1017, 1022, 1039, 1040, 1042, 1043, 1046, 1047, 1049], "maxin": [1042, 1043], "maxsiz": 617, "maxval": [511, 513], "maxwel": [0, 365, 1042, 1045, 1046, 1047, 1048], "maxwelllzh": 1047, "may_share_memori": 1049, "mayb": [106, 306, 389, 415, 1016, 1021], "mayer": [414, 1044, 1046, 1049, 1050], "mayer2022": 414, "mayilvahanan": 407, "mayorov": [1035, 1036, 1037, 1038], "mayur": 1040, "mazari": 1040, "mb": [47, 242, 263, 350, 352, 370, 381, 496, 906, 907, 908, 909, 910, 1016, 1022, 1028], "mbilling": 1037, "mbillingr": 1042, "mbk": [77, 97], "mbk_means_cluster_cent": 97, "mbk_means_label": 97, "mbk_means_labels_uniqu": 77, "mblondel": [369, 508], "mbnmf": 54, "mc4229": 1043, "mc_clf": 1008, "mcar": 149, "mcc": [2, 743, 1001, 1046], "mccall": 102, "mccallum": [839, 1003], "mccarthi": [0, 359, 1032, 1040], "mcclish": [278, 788], "mcconaghi": 1025, "mccullagh": 997, "mcculloh": [1037, 1038], "mcd": [2, 51, 111, 112, 409, 468, 473], "mcdermott": [1034, 1049], "mcdonald": 51, "mcdowel": 1040, "mcfadden": 1001, "mcfee": [1037, 1038], "mcgibbon": [1034, 1035, 1038], "mcgushion": 1041, "mcinn": [407, 1038, 1039, 1040, 1042, 1043, 1048], "mcivor": [1047, 1048], "mcm": [754, 1001], "mcm_": 754, "mcmahon": 1049, "mcsherri": [726, 756, 1001], "mctiernan": [1046, 1047], "mcve": [380, 387], "md": [2, 231, 232, 233, 234, 379, 688, 692, 694, 1026, 1027, 1032, 1044, 1047], "md5": 1044, "md5_checksum": 369, "md_scale": 231, "mdarii": 1048, "mdbecker": 1025, "mdi": [141, 147, 183, 184, 189, 414, 416, 463, 496, 564, 630, 634, 830, 864, 878, 1009, 1022], "mdi_import": [188, 189], "mds_result": 694, "me": 350, "me1": 286, "me2": 286, "me3": 286, "mea": 91, "mean": [2, 43, 44, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 80, 82, 83, 86, 87, 88, 93, 103, 110, 111, 112, 113, 116, 118, 120, 123, 124, 125, 127, 134, 136, 137, 140, 142, 143, 146, 147, 149, 154, 155, 156, 167, 168, 170, 175, 176, 177, 179, 181, 183, 186, 187, 194, 196, 201, 203, 204, 205, 208, 211, 213, 217, 218, 220, 226, 227, 228, 229, 234, 236, 238, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 263, 265, 266, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 300, 309, 312, 314, 315, 316, 318, 321, 324, 326, 331, 339, 342, 343, 346, 348, 349, 350, 352, 358, 362, 367, 369, 370, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 387, 388, 389, 398, 404, 405, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 430, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 501, 502, 512, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 588, 589, 590, 591, 594, 597, 602, 606, 607, 608, 609, 610, 611, 613, 622, 627, 628, 630, 632, 633, 634, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 707, 709, 712, 713, 716, 717, 724, 726, 729, 730, 731, 736, 737, 738, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 774, 778, 779, 781, 783, 784, 785, 787, 788, 790, 791, 792, 793, 795, 797, 798, 799, 800, 803, 804, 806, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 869, 873, 874, 876, 880, 882, 884, 885, 890, 892, 893, 895, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 926, 930, 931, 933, 974, 975, 981, 985, 990, 991, 992, 995, 997, 998, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1014, 1015, 1016, 1017, 1022, 1025, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "mean_": [121, 273, 532, 533, 534, 539, 541, 543, 884, 1011, 1040], "mean_absolute_error": [2, 52, 211, 213, 229, 403, 1001, 1033, 1035], "mean_absolute_percentage_error": [2, 52, 143, 403, 1001, 1044, 1046], "mean_auc": 279, "mean_change_tol": 536, "mean_fit_tim": [140, 291, 800, 814], "mean_fpr": 279, "mean_gamma_devi": [2, 403, 1001, 1042], "mean_impute_scor": 182, "mean_l1_ratio": 1035, "mean_pinball_loss": [2, 52, 146, 149, 321, 997, 1001, 1045], "mean_pinball_loss_95p": 1001, "mean_poisson_devi": [2, 211, 403, 1001, 1042], "mean_precis": 267, "mean_precision_": 797, "mean_precision_prior": [254, 260, 797], "mean_precision_prior_": 797, "mean_predict": [52, 177], "mean_predictions_gpr": 170, "mean_prior": 797, "mean_prior_": 797, "mean_recal": 267, "mean_scor": [104, 278, 281, 351, 1045], "mean_score_tim": [140, 267, 270, 800, 814], "mean_shift": [2, 1037, 1040], "mean_square_error": 1033, "mean_squared_error": [2, 46, 144, 146, 147, 208, 211, 213, 215, 217, 229, 358, 403, 414, 752, 1001, 1033, 1035, 1042, 1043, 1049], "mean_squared_log_error": [2, 403, 711, 1001, 1039, 1045, 1049], "mean_test_": 273, "mean_test_precis": [267, 273], "mean_test_recal": 267, "mean_test_scor": [103, 104, 105, 113, 140, 159, 167, 259, 268, 269, 270, 277, 280, 281, 291, 339, 471, 594, 800, 814, 990, 1038, 1045], "mean_tim": 1038, "mean_tpr": [278, 279], "mean_train_precis": [800, 814], "mean_train_scor": [800, 814, 1038], "mean_tweedie_devi": [2, 229, 403, 1001, 1042], "mean_variance_axi": [2, 384, 1038, 1045], "mean_y_pr": 175, "meaning": [72, 189, 204, 236, 298, 326, 352, 404, 406, 411, 415, 416, 548, 729, 730, 738, 783, 784, 787, 853, 1005, 1015, 1016, 1032, 1048], "meaningfulli": [211, 1001], "meaningless": [187, 415, 906, 909, 1035], "means_": [70, 254, 255, 256, 257, 259, 260, 549, 550, 797, 798], "means_init": [256, 257, 798], "meanshift": [2, 79, 322, 407, 439, 1035, 1036, 1037, 1040, 1042, 1043, 1046, 1047, 1048, 1050], "meant": [90, 149, 168, 248, 326, 370, 384, 473, 493, 677, 850, 923, 966, 967, 989, 991, 1005, 1007, 1011, 1033], "meanwhil": [387, 1016], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 82, 91, 93, 94, 121, 137, 138, 146, 150, 157, 168, 170, 175, 183, 185, 186, 187, 191, 201, 206, 210, 211, 215, 217, 229, 261, 267, 269, 275, 276, 314, 343, 350, 351, 362, 370, 372, 377, 381, 389, 404, 409, 411, 412, 413, 414, 415, 448, 451, 461, 498, 515, 538, 540, 547, 551, 557, 558, 559, 560, 563, 564, 565, 604, 607, 608, 611, 627, 631, 658, 690, 692, 698, 702, 704, 705, 707, 709, 712, 713, 716, 717, 720, 725, 726, 727, 729, 731, 736, 737, 739, 740, 743, 747, 755, 756, 757, 782, 783, 784, 786, 787, 788, 789, 792, 795, 825, 827, 830, 850, 881, 893, 912, 913, 914, 915, 921, 991, 997, 999, 1004, 1006, 1007, 1009, 1015, 1017, 1022, 1032, 1035, 1037, 1038, 1040, 1042], "mechan": [74, 245, 347, 350, 363, 375, 377, 401, 405, 407, 415, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 999, 1017, 1025], "mecopur": 1049, "med": [57, 102, 278, 370, 1011], "meda": [107, 186, 1001], "media": [407, 1025], "median": [2, 43, 52, 72, 103, 107, 111, 112, 146, 181, 182, 186, 213, 217, 228, 240, 248, 309, 319, 321, 322, 370, 409, 414, 416, 439, 453, 457, 460, 473, 552, 554, 558, 565, 597, 627, 630, 635, 670, 671, 679, 721, 753, 851, 882, 894, 913, 915, 991, 1011, 1017, 1035, 1036], "median_absolute_error": [2, 107, 186, 1001, 1036, 1042, 1044], "median_predict": 52, "medic": [272, 411, 712, 997, 1025], "medicin": [272, 712, 1001], "medina": [1032, 1034], "medinc": [309, 320, 370, 489], "medium": [42, 183, 244, 316, 339, 407, 643, 878, 994, 997], "medoid": 445, "medoids_": 445, "medri": 1035, "meekail": [0, 396, 1046, 1047, 1048, 1049], "meer": [96, 407, 447], "meet": [375, 387, 390, 416, 572, 603, 861, 862, 901, 1001, 1014, 1025, 1040, 1041, 1042], "megabyt": 1046, "megasari": 1044, "meghann": [1040, 1042], "mehak": 1039, "mehdi": [1036, 1045], "mehgarg": 1047, "mehmet": [1039, 1045], "mehmetcanakbai": 1047, "mehrdad": 1046, "mehta": [1036, 1037, 1038, 1040, 1041, 1042, 1043, 1047, 1048], "mehul": 1039, "mei": [1037, 1042], "meier": 1039, "meila": 407, "mein": 415, "meinshausen": 197, "meirel": 1043, "meketon": 1039, "melani": [1025, 1039, 1040], "melderi": 1040, "melemo2": 1046, "meli": [1045, 1046, 1047], "melissa": 1040, "mellon": 899, "melnik": 1047, "melsyt": [1040, 1041], "mem": [87, 381, 508, 509, 1022], "member": [0, 350, 351, 370, 375, 378, 390, 407, 422, 441, 445, 447, 450, 452, 492, 555, 556, 557, 558, 563, 564, 565, 566, 581, 658, 659, 666, 667, 668, 676, 677, 678, 704, 705, 715, 717, 731, 736, 737, 757, 786, 795, 800, 904, 997, 1004, 1032, 1044, 1047], "membership": [30, 89, 390, 404, 407, 511, 512, 513, 514, 515, 519, 522, 1016], "memit": 381, "memmap": [363, 370, 389, 412, 508, 534, 1040, 1049], "memoiz": [104, 370, 389], "memor": 188, "memori": [2, 47, 87, 103, 104, 124, 186, 187, 263, 291, 315, 318, 320, 322, 323, 326, 350, 351, 352, 363, 364, 369, 375, 378, 384, 387, 389, 401, 407, 408, 411, 412, 415, 418, 419, 440, 441, 442, 443, 444, 445, 446, 448, 449, 453, 456, 458, 467, 472, 478, 496, 503, 508, 509, 533, 534, 535, 538, 541, 555, 556, 557, 558, 563, 564, 565, 566, 581, 582, 588, 589, 591, 646, 647, 648, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 684, 778, 779, 780, 781, 800, 806, 814, 823, 825, 826, 827, 828, 831, 832, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 864, 865, 882, 884, 894, 895, 897, 902, 904, 905, 912, 913, 914, 915, 931, 969, 985, 997, 1003, 1004, 1011, 1013, 1014, 1016, 1017, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "memory_profil": [381, 393, 400], "memoryerror": [1040, 1044], "memoryview": 376, "memorywis": 401, "men": 372, "menes": 1047, "meng": [1032, 1033, 1036, 1038, 1039], "menoci": 1050, "menon": 405, "mensch": [1037, 1038, 1039, 1040], "mention": [88, 116, 134, 229, 283, 319, 358, 362, 375, 379, 380, 387, 407, 696, 896, 897, 990, 995, 997, 1021, 1024, 1025, 1039, 1040, 1041], "menu": 393, "menuet": 1041, "mercer": 993, "mere": [43, 269, 389, 831, 1015], "merg": [74, 76, 80, 84, 321, 373, 375, 378, 383, 387, 390, 407, 439, 440, 441, 444, 445, 462, 820, 1032, 1039], "merit": [375, 379, 390], "meritocrat": 390, "merritt": 1038, "mersenn": 1043, "merz": 405, "mesfer": 1045, "mesh": [91, 142, 152, 172, 243, 297, 304, 311, 333, 335], "meshgrid": [50, 63, 77, 91, 111, 142, 152, 171, 172, 173, 174, 176, 187, 222, 223, 224, 225, 236, 238, 258, 295, 302, 304, 311, 312, 333, 338, 339, 343, 344, 347, 348, 631], "meshulam": 1035, "meson": [373, 378, 393, 400], "mess": 1046, "messag": [73, 79, 95, 102, 120, 245, 350, 351, 370, 373, 374, 378, 379, 380, 383, 384, 407, 439, 453, 467, 539, 543, 548, 574, 627, 712, 800, 803, 804, 806, 814, 823, 828, 831, 833, 853, 861, 862, 902, 929, 930, 931, 934, 938, 963, 984, 989, 1001, 1011, 1032, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "met": [245, 377, 416, 534, 541, 627, 671, 997, 1001, 1040], "meta": [2, 7, 30, 31, 89, 102, 133, 157, 183, 211, 274, 278, 283, 285, 288, 324, 325, 354, 356, 358, 369, 373, 377, 379, 387, 389, 398, 405, 416, 417, 427, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 496, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 581, 582, 588, 590, 591, 597, 603, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 807, 809, 816, 818, 822, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 921, 953, 960, 989, 990, 1002, 1021, 1022, 1023, 1027, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1047, 1049], "meta_clf_sample_weight": 245, "meta_est": 245, "meta_meta_est": 245, "metaclassifi": [245, 246], "metaclassifierifittedmetaclassifi": 245, "metadata": [2, 61, 132, 183, 195, 237, 263, 326, 351, 369, 370, 401, 421, 424, 427, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 958, 959, 960, 984, 1001, 1020, 1021, 1022, 1027, 1048], "metadata_rout": [2, 245, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 958, 959, 960], "metadatarequest": [2, 245, 421, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 468, 469, 470, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 595, 596, 598, 599, 600, 603, 610, 611, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 652, 654, 656, 657, 658, 660, 662, 664, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 957, 959, 1049], "metadatarout": [2, 245, 436, 463, 464, 471, 555, 556, 563, 567, 568, 569, 570, 593, 594, 597, 602, 627, 647, 651, 653, 655, 659, 661, 663, 665, 671, 673, 675, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 863, 864, 901, 959, 1049], "metaestim": [2, 89, 389, 901, 921, 961, 1036, 1045, 1046, 1049], "metaestimatormixin": [2, 245], "metaireau": [1032, 1035], "metal": 403, "metaregressor": 245, "metatransfom": 1037, "meteorologi": 405, "meth_nam": 313, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 94, 98, 101, 104, 110, 111, 114, 116, 120, 123, 125, 128, 129, 130, 132, 134, 139, 141, 147, 154, 163, 164, 168, 181, 191, 200, 201, 204, 212, 219, 228, 230, 232, 234, 235, 236, 238, 242, 244, 245, 246, 248, 252, 253, 256, 263, 271, 274, 276, 277, 278, 283, 286, 289, 295, 296, 298, 309, 313, 316, 318, 320, 321, 342, 350, 351, 352, 357, 358, 362, 363, 364, 367, 372, 373, 375, 376, 377, 381, 382, 384, 387, 388, 392, 398, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 504, 512, 514, 522, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 705, 710, 711, 722, 731, 732, 735, 736, 741, 742, 763, 768, 769, 774, 778, 783, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 921, 924, 933, 937, 938, 948, 956, 957, 958, 959, 960, 961, 966, 969, 984, 985, 988, 989, 990, 991, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1025, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "method_map": [245, 957], "method_max_it": [545, 546, 1042], "method_nam": [245, 957, 960], "methodmap": [2, 245, 957], "methodmetadatarequest": 956, "methodol": 1011, "methodolog": [411, 1024], "methodologi": [541, 877, 991, 1001, 1025], "methodpair": 958, "metric": [2, 13, 43, 45, 46, 50, 52, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 81, 82, 85, 91, 93, 97, 102, 107, 113, 134, 139, 144, 145, 147, 148, 149, 154, 165, 168, 171, 181, 183, 185, 186, 188, 197, 201, 207, 208, 211, 213, 215, 217, 229, 234, 239, 242, 243, 248, 251, 261, 262, 265, 266, 267, 269, 270, 272, 276, 278, 279, 283, 288, 289, 291, 299, 302, 307, 309, 314, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 350, 351, 358, 362, 367, 370, 375, 377, 387, 388, 389, 392, 398, 402, 405, 406, 412, 413, 414, 417, 418, 424, 436, 440, 443, 444, 445, 449, 453, 454, 455, 456, 461, 468, 520, 535, 549, 550, 551, 553, 555, 557, 558, 559, 561, 562, 564, 565, 567, 569, 578, 602, 610, 620, 628, 631, 634, 638, 639, 640, 641, 642, 643, 658, 659, 663, 666, 668, 674, 675, 676, 688, 690, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 829, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 870, 876, 899, 900, 904, 906, 909, 912, 914, 921, 991, 993, 996, 998, 1002, 1004, 1007, 1009, 1020, 1021, 1022, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "metric_kwarg": [779, 780], "metric_obj": 699, "metric_param": [418, 443, 445, 449, 454, 455, 456, 688, 692, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 1036, 1039, 1046], "metsi": [839, 1003], "metzen": [0, 396, 1032, 1035, 1036, 1037, 1038], "mexican": 129, "meyer89": 1043, "mferrari3": [1040, 1041], "mgrid": [53, 161], "mhg": 1037, "mi": [64, 72, 163, 407, 607, 608, 704, 755, 757, 991, 1001, 1015], "mia": 1047, "miao": 1045, "mib": [362, 467, 902], "mic": [885, 1011], "micah": 1042, "micci": [885, 1011], "mice": [369, 627, 991], "miceprotein": 369, "michael": [372, 405, 407, 449, 628, 637, 691, 797, 991, 997, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1047, 1049, 1050], "michal": [1036, 1039, 1045, 1046], "michali": 407, "michalkrawczyk": [1045, 1046], "micha\u0142": 1043, "micha\u0142owski": 1041, "michel": [0, 397, 1032, 1034, 1035, 1037, 1039, 1046, 1047], "michelbach": 1036, "michiaki": 1038, "micka\u00ebl": [1040, 1041], "micky774": [1046, 1047], "micro": [49, 302, 332, 362, 379, 707, 713, 729, 730, 738, 783, 784, 787, 788, 1001, 1032, 1040, 1041, 1047, 1050], "micro_roc_auc_ovr": 278, "microarrai": [404, 450, 513, 628, 991], "microcontrol": 1020, "microphon": 121, "microryzomi": [50, 302, 370, 498], "microryzomys_minutu": 498, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 373, 376, 393], "mid": [63, 339, 1001, 1003], "middl": [43, 61, 70, 93, 125, 197, 347, 372, 1008, 1011], "mideast": [57, 370], "midina": 1039, "midnight": 43, "midpoint": 339, "midpointnorm": 339, "midvidi": 1045, "midwest": [168, 372], "might": [0, 43, 44, 52, 67, 77, 79, 93, 95, 102, 142, 149, 152, 165, 176, 182, 186, 187, 188, 191, 208, 211, 229, 238, 263, 269, 271, 283, 292, 305, 320, 326, 343, 348, 358, 362, 363, 369, 373, 375, 376, 377, 379, 380, 381, 383, 387, 389, 390, 393, 401, 405, 406, 408, 411, 412, 413, 414, 415, 417, 432, 442, 487, 496, 501, 503, 508, 515, 523, 536, 555, 556, 557, 561, 562, 564, 579, 580, 582, 610, 611, 627, 650, 654, 655, 656, 658, 659, 676, 678, 692, 757, 794, 802, 803, 804, 817, 820, 828, 853, 869, 884, 897, 916, 918, 920, 922, 926, 930, 931, 948, 969, 990, 991, 993, 995, 997, 998, 1000, 1001, 1003, 1004, 1008, 1009, 1011, 1016, 1017, 1033, 1035, 1040, 1041, 1043, 1046, 1047, 1048, 1049], "mignon": [1032, 1035, 1036, 1039], "migrat": [375, 1032], "miguel": [1042, 1050], "miguelbarao": 1042, "miguelcsilva": 1050, "mihael": [407, 449, 456], "mihevc": 1042, "mike": 1039, "mikebenfield": 1039, "miketip": [534, 541], "mikhail": [1033, 1034, 1035, 1038, 1039, 1047, 1048], "miki": [1049, 1050], "mikulski": 1043, "milajev": 1036, "milan": 1044, "milana2": 1046, "mileag": 362, "milen": 1039, "mileston": 379, "militari": 102, "mill": 1042, "millawel": 1046, "miller": [370, 1040, 1041, 1045], "million": [77, 89, 175, 191, 415, 692, 998, 1016, 1025, 1046, 1047], "millman": [0, 397, 1041, 1048, 1049], "milman": 1040, "miln": 370, "miltenberg": 1047, "milton": 1049, "milutinov": 1041, "mimic": [181, 211, 350, 818], "mimicri": 350, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 85, 91, 107, 120, 123, 134, 136, 142, 145, 146, 152, 161, 168, 172, 174, 175, 176, 182, 186, 196, 199, 201, 204, 207, 213, 214, 217, 232, 242, 243, 246, 288, 295, 296, 302, 304, 306, 309, 311, 312, 314, 326, 333, 347, 384, 407, 410, 412, 481, 482, 484, 512, 534, 535, 538, 540, 541, 549, 550, 563, 627, 631, 632, 654, 655, 656, 657, 682, 683, 704, 757, 780, 803, 804, 853, 861, 862, 874, 883, 890, 948, 965, 992, 997, 1001, 1004, 1011, 1038, 1041, 1043, 1044, 1047], "min_": [321, 407, 414, 874, 997, 1011, 1015, 1016, 1017], "min_arg": 52, "min_batch_s": 951, "min_bin_freq": [447, 460], "min_c": 1003, "min_categori": [840, 1044], "min_cluster_s": [79, 98, 324, 407, 445, 449, 455, 1041], "min_degre": [879, 1045], "min_df": [54, 57, 102, 270, 332, 350, 351, 415, 588, 591, 1032, 1034, 1043, 1050], "min_dist": 242, "min_estim": 138, "min_faces_per_person": [45, 370, 494], "min_features_to_select": [167, 594, 1040], "min_frequ": [322, 324, 877, 878, 1011, 1046, 1048], "min_grad_norm": [692, 1038], "min_i": 246, "min_idf": 1045, "min_impurity_decreas": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1017, 1039], "min_impurity_split": 1039, "min_max_axi": 1041, "min_max_scal": 1011, "min_n": [588, 589, 591, 1032], "min_n_compon": 242, "min_po": [2, 384], "min_resourc": [146, 803, 804, 990], "min_resources_": [803, 804], "min_sampl": [79, 82, 98, 387, 389, 407, 418, 443, 445, 449, 454, 455, 456, 671, 997, 1041, 1045], "min_sample_split": 1047, "min_samples_leaf": [140, 145, 146, 188, 318, 321, 354, 414, 557, 558, 559, 560, 561, 562, 564, 565, 566, 912, 913, 914, 915, 1017, 1038], "min_samples_split": [146, 147, 148, 273, 281, 310, 320, 414, 557, 558, 559, 560, 564, 565, 566, 803, 804, 912, 913, 914, 915, 990, 1017, 1038], "min_val": [927, 934], "min_valu": [627, 1043, 1044], "min_w": 997, "min_weight_fraction_leaf": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1017, 1035, 1038, 1039], "min_x": 246, "mina": [1042, 1043], "mincovdet": [2, 111, 112, 409, 468, 469, 472, 474, 475, 1007, 1032, 1039], "mind": [125, 149, 185, 186, 187, 229, 313, 314, 350, 351, 358, 375, 401, 409, 411, 414, 646, 647, 704, 997, 1016, 1020], "minden": [407, 451, 461], "mine": [0, 269, 351, 370, 407, 418, 443, 511, 563, 720, 734, 740, 783, 997, 1001, 1007, 1013], "ming": [563, 1007, 1036, 1040, 1041, 1042, 1046], "minghui": [1039, 1040], "mingw": 1035, "minh": 1040, "mini": [2, 47, 97, 120, 322, 364, 389, 415, 439, 441, 446, 448, 450, 452, 531, 533, 536, 537, 538, 539, 540, 542, 543, 545, 546, 1005, 1006, 1032, 1043, 1045], "mini_batch": [450, 452], "minibatch": [47, 79, 407, 412, 448, 534, 676, 860, 861, 862, 1032], "minibatch_iter": 47, "minibatch_kmean": 351, "minibatch_s": [47, 364], "minibatchdictionarylearn": [2, 120, 123, 364, 412, 531, 538, 542, 545, 546, 1033, 1035, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "minibatchkmean": [2, 57, 71, 73, 78, 79, 83, 91, 92, 94, 96, 183, 351, 364, 407, 412, 439, 441, 446, 512, 779, 1022, 1033, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "minibatchnmf": [2, 54, 364, 412, 1046, 1048, 1049, 1050], "minibatchsparsepca": [2, 531, 533, 537, 540, 542, 543, 545, 546, 1032, 1033, 1043, 1045, 1046, 1047, 1048, 1049], "miniforg": [373, 383, 393, 394], "miniforge3": [373, 383], "minim": [2, 43, 51, 52, 64, 90, 99, 109, 110, 146, 170, 178, 193, 204, 208, 209, 211, 213, 215, 219, 229, 231, 241, 242, 254, 259, 263, 270, 278, 279, 309, 318, 321, 336, 343, 346, 354, 374, 375, 378, 383, 387, 389, 401, 405, 407, 409, 412, 414, 439, 440, 444, 445, 449, 462, 538, 540, 547, 557, 558, 559, 560, 564, 565, 609, 610, 611, 641, 646, 649, 657, 658, 659, 667, 671, 672, 674, 678, 679, 687, 692, 694, 695, 748, 780, 851, 853, 862, 880, 892, 898, 912, 913, 914, 915, 997, 998, 1001, 1004, 1005, 1011, 1013, 1014, 1015, 1016, 1020, 1023, 1027, 1036, 1041, 1042], "minima": [176, 199, 412, 446, 692, 998, 1040], "minimal_reproduc": 383, "minimalist": [380, 415, 1024], "minimis": [52, 268, 407, 411, 658, 659, 1017], "minimum": [2, 48, 88, 90, 111, 146, 147, 149, 167, 201, 221, 242, 248, 279, 295, 296, 377, 384, 393, 400, 404, 407, 414, 415, 440, 444, 445, 449, 453, 455, 468, 469, 472, 473, 474, 475, 511, 513, 541, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 594, 627, 631, 632, 635, 637, 668, 671, 676, 678, 679, 682, 683, 692, 705, 725, 779, 780, 803, 804, 825, 840, 861, 862, 873, 874, 877, 878, 879, 883, 897, 898, 911, 912, 913, 914, 915, 927, 930, 931, 934, 951, 998, 1001, 1005, 1007, 1011, 1013, 1017, 1032, 1035, 1039, 1040, 1044, 1045, 1049], "minimum_cluster_s": 407, "minka": [127, 541, 997], "minknowski": 1045, "minkowski": [418, 443, 449, 454, 455, 456, 688, 699, 778, 779, 780, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 1004, 1032, 1035, 1046, 1047, 1048], "minkowski_dist": [449, 456, 688, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858], "minkowskidist": [699, 1045], "minmax_scal": [2, 307, 309, 874, 1037, 1040], "minmaxscal": [2, 43, 44, 104, 164, 166, 191, 232, 248, 305, 320, 364, 403, 408, 463, 890, 991, 1011, 1034, 1037, 1040, 1042, 1043, 1044, 1048, 1049], "minmaxscalerminmaxscal": 104, "minnesota": 407, "minor": [248, 263, 272, 276, 370, 379, 390, 496, 1001, 1032, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "minu": [269, 760, 1001], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 370, 375, 998, 1019], "minutu": [50, 302, 370, 498], "minval": [511, 513], "minwoo": 1032, "minyushkin": 1038, "miola": 1047, "miott": [1032, 1035], "miotto": 1043, "mir": 415, "miroslav": [1033, 1034, 1037], "mirror": [841, 990], "mirza": 1045, "misa": 1047, "misc": [57, 86, 123, 270, 332, 350, 351, 352, 370], "misc_featur": 248, "miscalibr": 64, "miscellan": [368, 369, 1022, 1038, 1039, 1046, 1047, 1049, 1050, 1051], "miscfeatur": 154, "misclassif": [46, 134, 263, 343, 796, 1015, 1016, 1017, 1033], "misclassifi": [70, 134, 262, 263, 343, 350, 1016], "misclassification_error": 134, "misdetect": 1049, "mish": 415, "mishra": [1044, 1045], "mislabel": [262, 414, 1003], "mislead": [72, 141, 147, 186, 376, 392, 414, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1027, 1045], "mismatch": [79, 1000, 1041], "misread": 236, "miss": [2, 20, 103, 154, 168, 188, 240, 250, 263, 269, 289, 319, 323, 326, 358, 362, 367, 370, 372, 374, 375, 380, 389, 403, 406, 407, 408, 409, 445, 471, 489, 496, 498, 501, 557, 558, 561, 562, 564, 565, 566, 627, 628, 629, 630, 639, 645, 672, 690, 694, 727, 769, 826, 847, 865, 873, 874, 878, 880, 881, 884, 885, 889, 892, 893, 895, 912, 913, 914, 915, 921, 997, 998, 1001, 1020, 1021, 1022, 1023, 1025, 1027, 1034, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "missclassif": 134, "missforest": [181, 991], "missing": [149, 414, 627, 628, 630, 1041], "missing_featur": [181, 182], "missing_fract": 149, "missing_fraction_list": 149, "missing_r": 182, "missing_sampl": [181, 182], "missing_valu": [181, 182, 250, 389, 627, 628, 629, 630, 769, 991, 1040, 1041], "missingind": [2, 627, 628, 630, 991, 1040, 1041, 1042, 1046, 1048], "mission": [0, 351, 1025], "misspecifi": 64, "misspel": 415, "mistak": [134, 165, 283, 329, 358, 407, 411, 735, 875, 889, 890, 892, 893, 894, 895, 997, 1002], "misti": [43, 187], "mit": [286, 370, 381, 407, 417, 610, 611, 614, 619, 622, 643, 666, 667, 676, 841, 994], "mitar": 1041, "mitig": [64, 88, 149, 188, 316, 363, 364, 998, 1017, 1044], "mitra": [1042, 1043, 1047], "mitrov": 1041, "mitzi": [1045, 1046], "miwojc": 1046, "mix": [2, 43, 95, 101, 102, 121, 122, 143, 183, 186, 211, 240, 250, 252, 270, 309, 315, 369, 377, 387, 389, 408, 412, 419, 463, 465, 466, 496, 533, 538, 540, 547, 600, 604, 630, 646, 647, 652, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 800, 814, 830, 864, 877, 878, 884, 885, 964, 971, 974, 997, 1006, 1022, 1044, 1046, 1047], "mixed_encoded_preprocessor": 315, "mixed_pip": 315, "mixed_target": 315, "mixin": [2, 375, 389, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 601, 942, 1034, 1043, 1047], "mixing_": [121, 122, 533], "mixtur": [2, 46, 48, 70, 79, 88, 90, 98, 118, 173, 182, 199, 256, 257, 280, 299, 325, 370, 371, 389, 407, 412, 413, 417, 623, 797, 798, 800, 1021, 1022, 1026, 1027, 1032, 1036, 1037, 1038, 1039], "mizil": [62, 64, 405, 436, 438], "mizuki": 1046, "mk": 1017, "mkdir": [47, 381, 383], "mkdtemp": [87, 408], "mkl": [362, 363, 373, 383, 387, 1032], "mkl_num_thread": 363, "mksol": 102, "ml": [47, 168, 286, 369, 372, 380, 500, 502, 510, 997, 999, 1020, 1021, 1025], "ml_map": 395, "mlant": 1046, "mlb": [370, 875], "mlc": 372, "mlcomp": 1032, "mld": 47, "mldata": [1032, 1040], "mle": [111, 127, 541, 1040, 1043], "mlewis1729": 1039, "mlflow": 1020, "mlg": 1036, "mlinari\u0107": 1047, "mline": [48, 111, 225, 295, 338, 341], "mljar": 1020, "mlle": [689, 693, 998], "mlliou112": 1039, "mlo": 175, "mlondschien": 1045, "mlop": 1020, "mlp": [183, 187, 249, 303, 305, 496, 830, 861, 862, 1005, 1022], "mlp_disp": 249, "mlp_model": 187, "mlp_preprocessor": 187, "mlpclassifi": [2, 67, 148, 160, 183, 303, 304, 306, 364, 502, 504, 514, 522, 860, 862, 874, 1002, 1005, 1022, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mlpregressor": [2, 43, 187, 249, 364, 860, 861, 1005, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "mlpregressormlpregressor": 249, "mlxtend": 1020, "mm": 191, "mm_bunch": 50, "mmap_mod": [401, 966], "mmm": 51, "mmse": [110, 409, 420, 474], "mn193": 1049, "mnb": 1003, "mnist": [183, 192, 203, 205, 219, 226, 289, 303, 305, 496, 658, 830, 861, 884, 933, 997, 1005, 1022], "mnist_10000": 289, "mnist_20000": 289, "mnist_784": [219, 227, 289, 306], "mo": [323, 1043], "mobil": 383, "mock": 1042, "mockdatafram": 1042, "modal": [2, 238, 473, 950], "mode": [2, 48, 49, 80, 81, 111, 211, 238, 289, 291, 307, 318, 373, 375, 379, 383, 384, 387, 404, 410, 414, 418, 442, 443, 446, 448, 451, 458, 461, 470, 471, 477, 481, 486, 508, 509, 557, 561, 564, 592, 595, 596, 598, 599, 600, 610, 627, 644, 645, 658, 659, 666, 668, 673, 674, 675, 676, 679, 682, 683, 689, 693, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 860, 904, 906, 909, 912, 914, 936, 947, 948, 950, 1004, 1007, 1020, 1033, 1041, 1046, 1049], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 82, 87, 88, 89, 91, 94, 101, 103, 104, 105, 109, 113, 116, 119, 120, 129, 130, 133, 134, 135, 137, 139, 142, 145, 146, 148, 149, 151, 153, 154, 157, 159, 161, 162, 164, 165, 173, 174, 176, 177, 178, 179, 182, 184, 185, 189, 194, 196, 198, 200, 202, 203, 204, 205, 207, 212, 213, 215, 216, 217, 219, 223, 224, 226, 227, 228, 238, 241, 246, 254, 256, 257, 258, 262, 264, 265, 267, 270, 272, 273, 274, 275, 277, 278, 283, 284, 286, 289, 291, 292, 293, 295, 298, 302, 310, 313, 315, 316, 318, 320, 322, 323, 324, 326, 328, 329, 336, 338, 339, 340, 341, 342, 344, 346, 348, 351, 352, 355, 358, 367, 369, 370, 378, 381, 389, 392, 398, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 426, 430, 432, 436, 441, 448, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 489, 496, 498, 500, 501, 502, 503, 509, 522, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 588, 589, 593, 594, 597, 602, 606, 609, 610, 611, 615, 627, 632, 633, 634, 635, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 701, 706, 711, 721, 722, 723, 724, 734, 735, 741, 750, 753, 785, 788, 789, 792, 797, 798, 799, 800, 803, 804, 805, 806, 814, 815, 816, 817, 821, 822, 823, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 847, 849, 850, 851, 853, 855, 860, 861, 862, 864, 865, 867, 869, 871, 876, 877, 879, 880, 881, 883, 884, 885, 889, 890, 892, 893, 894, 895, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 984, 991, 993, 994, 995, 998, 999, 1002, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037], "model_1": 269, "model_1_scor": 269, "model_2": 269, "model_2_scor": 269, "model__estimator__max_depth": 990, "model_coef": 185, "model_color": 345, "model_detail": 142, "model_displai": 139, "model_fixed_threshold": 263, "model_from_prevision_vers": 401, "model_i": 269, "model_i_scor": 269, "model_idx": 248, "model_k": 269, "model_k_scor": 269, "model_l1": 346, "model_l2": 346, "model_nam": [140, 248, 288], "model_no_cf": 316, "model_param": 226, "model_prop": 43, "model_scor": [269, 288], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 87, 103, 104, 105, 106, 107, 109, 116, 125, 127, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 159, 164, 165, 167, 170, 181, 182, 183, 185, 186, 188, 189, 191, 197, 207, 208, 211, 213, 218, 219, 226, 227, 229, 239, 244, 245, 248, 250, 251, 252, 256, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 293, 297, 298, 304, 306, 307, 311, 313, 314, 315, 316, 318, 319, 320, 323, 324, 325, 326, 331, 332, 339, 342, 346, 354, 357, 358, 375, 377, 380, 388, 389, 398, 403, 406, 408, 411, 414, 436, 437, 558, 560, 567, 568, 579, 659, 697, 698, 700, 702, 742, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 853, 861, 862, 864, 912, 913, 914, 915, 990, 991, 996, 1001, 1003, 1004, 1009, 1011, 1016, 1021, 1022, 1029, 1036, 1038, 1039], "model_selection_tut": 159, "model_step": 43, "model_titl": 142, "model_with_cf": 316, "moder": [269, 375, 417, 453, 1007], "modern": [43, 149, 415, 467, 503, 590, 690, 694, 730, 902, 998, 1020, 1021, 1048], "modif": [375, 410, 414, 415, 445, 1014, 1049, 1050], "modifi": [107, 197, 221, 231, 232, 233, 245, 248, 324, 348, 375, 377, 389, 404, 407, 414, 417, 442, 446, 453, 458, 467, 481, 482, 483, 484, 495, 510, 581, 610, 611, 613, 619, 676, 678, 689, 693, 719, 729, 730, 768, 783, 784, 787, 928, 982, 983, 997, 1014, 1015, 1021, 1026, 1027, 1032, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047], "modified_fil": 375, "modified_hub": [46, 676, 1015], "modified_huber_loss": 221, "modified_tol": [689, 693], "modrak": [1047, 1048], "modroiu": 1001, "modul": [7, 11, 16, 30, 31, 71, 72, 82, 86, 108, 114, 117, 119, 120, 133, 162, 169, 180, 183, 184, 190, 192, 226, 230, 231, 253, 261, 285, 286, 287, 290, 303, 305, 306, 308, 327, 334, 349, 353, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 387, 389, 392, 393, 401, 405, 407, 410, 414, 415, 416, 418, 443, 503, 535, 579, 580, 659, 940, 990, 995, 997, 999, 1001, 1002, 1005, 1007, 1008, 1011, 1013, 1015, 1017, 1018, 1025, 1033, 1034, 1035, 1037, 1038, 1042, 1046], "modulo": [415, 1043], "moeller": 1038, "mogavero": 1042, "moham": [1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "mohamedbsh": 1047, "mohammad": [1040, 1041], "mohit": [1046, 1049], "mohn": [1040, 1044], "mohr": 1038, "moin": 1044, "mois\u00e9": 1013, "moitra": [1032, 1033, 1034], "mojca": 1043, "mojdeh": 1049, "mola": [1043, 1049], "molden": 1034, "molecul": 998, "molin": 1047, "molla": [1033, 1034], "molnar": [187, 1008], "moment": [362, 412, 417, 439, 615, 623, 861, 862, 964, 1005, 1006], "momentum": [305, 861, 862, 1005], "mon": [43, 149, 187], "mona": [169, 177, 183, 417, 496, 611, 615, 622, 623, 625, 1022], "monaf": 1047, "monei": [0, 229, 1025], "monitor": [144, 197, 219, 378, 389, 553, 554, 559, 560, 561, 562, 1005, 1024, 1035, 1040, 1042, 1044], "mono": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684], "monografia": 997, "monomi": 212, "monotoinc": 319, "monoton": [2, 22, 43, 62, 133, 183, 187, 229, 241, 249, 319, 405, 557, 558, 559, 560, 561, 562, 564, 565, 632, 635, 636, 694, 706, 880, 892, 906, 909, 912, 913, 914, 915, 998, 1002, 1011, 1016, 1022, 1039, 1043, 1047, 1049], "monotonic_cst": [149, 151, 319, 321, 325, 414, 557, 558, 561, 562, 564, 565, 912, 913, 914, 915, 1047, 1050], "mont": [243, 417, 611, 641, 642, 993, 1006], "montecchio": 1036, "montesel": 1050, "month": [0, 43, 175, 187, 315, 370, 375, 379, 390, 1032], "month_co": 43, "month_sin": 43, "monthli": [175, 390, 1001], "montoya": 1039, "montreal": 323, "moodi": 1037, "moon": [269, 305, 311, 350, 351, 522], "moonkyung94": 1046, "moor": [0, 735, 1001, 1025, 1049], "moosmann": 566, "moradizadeh": 1046, "morai": 1050, "moral": [57, 350, 658, 1040, 1044, 1045, 1050], "morawiec": [1039, 1040], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 80, 82, 85, 86, 88, 90, 93, 100, 107, 111, 118, 120, 123, 127, 134, 135, 137, 140, 141, 143, 145, 146, 147, 148, 149, 150, 154, 166, 168, 170, 176, 179, 182, 183, 186, 187, 189, 191, 193, 194, 197, 198, 201, 203, 204, 206, 209, 211, 212, 213, 215, 226, 227, 228, 229, 231, 235, 238, 243, 244, 245, 246, 248, 250, 254, 256, 257, 259, 260, 262, 263, 267, 269, 270, 271, 272, 276, 278, 283, 286, 288, 289, 291, 292, 299, 304, 305, 307, 309, 310, 311, 314, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 329, 336, 339, 343, 344, 346, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 430, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 920, 922, 923, 944, 946, 948, 950, 963, 966, 984, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "moreau": [1038, 1039, 1040, 1041, 1042], "moreov": [159, 176, 311, 322, 358, 407, 411, 417, 897, 970, 1001, 1009, 1025, 1040, 1046, 1047], "moreyra": 1045, "morgan": [1013, 1017], "mori": 1047, "morikko": 1039, "morina": 1045, "moritz": [1045, 1047], "morn": 43, "moroz": 1038, "morril": 1032, "mors": 1043, "moslei": 1001, "mosley2013": 1001, "mosold": 154, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 85, 86, 88, 95, 109, 115, 116, 126, 128, 134, 140, 141, 147, 149, 154, 163, 164, 165, 167, 168, 175, 182, 185, 186, 187, 188, 189, 191, 197, 211, 212, 229, 245, 249, 254, 260, 263, 266, 267, 272, 276, 277, 279, 283, 286, 288, 298, 309, 315, 316, 318, 321, 324, 326, 329, 339, 343, 350, 351, 352, 358, 362, 363, 364, 370, 371, 373, 375, 376, 377, 379, 380, 381, 383, 387, 389, 390, 393, 398, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 442, 443, 445, 449, 455, 456, 459, 467, 496, 503, 521, 524, 532, 534, 539, 543, 549, 551, 561, 562, 566, 567, 588, 589, 591, 593, 604, 611, 627, 630, 649, 658, 672, 674, 676, 678, 687, 688, 692, 695, 725, 728, 758, 759, 763, 785, 794, 797, 798, 803, 804, 819, 832, 833, 846, 847, 848, 850, 852, 853, 854, 855, 856, 879, 881, 889, 890, 892, 893, 894, 895, 902, 921, 947, 948, 950, 963, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049], "most_common": 57, "most_frequ": [272, 551, 627, 630, 854, 991, 1001, 1040, 1042, 1044], "mostli": [0, 2, 80, 102, 211, 229, 314, 377, 383, 387, 389, 412, 414, 415, 521, 779, 780, 1016, 1020, 1025, 1040, 1041, 1042, 1048], "mother": 998, "motiv": [129, 375, 377, 389, 993, 1001, 1011, 1025, 1045], "motmoti": 1042, "motoda": 407, "motor": 229, "motorcycl": [57, 370], "mottl": [1040, 1041], "moudgalya": [1048, 1049], "moufad": 1047, "moulavi": [407, 445], "mount": 383, "mountain": 1040, "mountford": [1048, 1049], "mous": 369, "mouseid": 369, "moussa": 1038, "move": [64, 142, 270, 307, 339, 374, 375, 381, 405, 407, 549, 550, 571, 572, 573, 575, 577, 578, 942, 943, 967, 1032, 1033, 1037, 1040, 1042, 1045, 1046], "moveabl": 408, "movelikeriv": 1041, "movement": 370, "movi": 415, "movie_entri": 415, "moya": 1044, "mp": 997, "mpce": 57, "mpl": [70, 254, 255, 256, 260, 309], "mpl_toolkit": [50, 100, 126, 187, 231, 233, 302], "mplot3d": [100, 126, 187, 231, 233], "mpoemsl": 1046, "mppca": [534, 541], "mprun": 381, "mpy": 415, "mr": [323, 1033, 1036, 1046], "mrandrewandrad": 1038, "mrastgoo": [1047, 1049], "mrg": 383, "mridul": 1038, "mrinal": 1046, "mrinaltyagi": 1046, "mrl09": 412, "mrmjauh": 1039, "mro": [377, 424, 430, 1042, 1043], "mrs2008": 590, "msabati": 1046, "msc": 372, "mschaffenroth": 1042, "mse": [44, 46, 109, 110, 144, 146, 147, 181, 182, 211, 213, 215, 217, 284, 325, 647, 653, 1001, 1017, 1043, 1045], "mse_path_": [201, 647, 651, 653, 655, 661, 663], "mse_valu": 46, "mses_california": 182, "mses_diabet": 182, "msft": 51, "msg": [289, 984], "msle": 1001, "msm": [168, 372], "mssubclass": 154, "mst": 407, "msvc": 1035, "msvcp140": 1046, "mt19937": [276, 281, 933, 1043], "mthorrel": [1039, 1042], "mtrand": 358, "mtse": 679, "mu": [54, 111, 112, 269, 412, 420, 472, 474, 475, 478, 479, 480, 540, 547, 995, 997, 1039, 1042], "mu_i": 1003, "mu_j": 407, "mu_k": 995, "muayyad": 1040, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 88, 111, 113, 118, 123, 129, 139, 146, 147, 154, 155, 156, 170, 181, 182, 186, 187, 188, 189, 191, 209, 213, 242, 245, 248, 263, 269, 271, 272, 275, 280, 282, 306, 310, 314, 315, 316, 320, 321, 323, 339, 344, 350, 351, 358, 362, 363, 364, 370, 375, 376, 377, 380, 383, 387, 388, 393, 401, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 446, 447, 496, 534, 535, 536, 538, 559, 560, 561, 562, 658, 659, 666, 667, 668, 676, 677, 678, 692, 779, 780, 803, 804, 818, 846, 854, 879, 897, 904, 990, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1009, 1013, 1014, 1016, 1017, 1021, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mudd": 1045, "mueller": [0, 396, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "muhammad": [1040, 1041, 1045], "mukherje": 1043, "mula": 1044, "multi": [2, 50, 67, 124, 126, 133, 142, 152, 155, 161, 172, 174, 183, 192, 197, 198, 201, 204, 210, 218, 227, 230, 233, 237, 238, 246, 249, 261, 266, 278, 288, 303, 311, 312, 318, 323, 333, 344, 350, 355, 357, 363, 370, 372, 378, 384, 389, 393, 407, 414, 415, 417, 424, 436, 451, 461, 468, 473, 495, 496, 504, 505, 510, 514, 515, 519, 520, 522, 541, 549, 550, 551, 553, 555, 557, 558, 559, 561, 564, 565, 567, 569, 610, 631, 633, 643, 646, 647, 652, 653, 657, 658, 660, 661, 662, 663, 666, 668, 672, 673, 674, 675, 676, 681, 684, 690, 703, 713, 720, 734, 740, 742, 783, 799, 800, 814, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 852, 854, 860, 861, 862, 865, 871, 884, 888, 899, 900, 904, 906, 909, 912, 914, 916, 917, 918, 920, 924, 930, 933, 936, 990, 1002, 1004, 1008, 1011, 1015, 1020, 1021, 1022, 1023, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1050], "multi_class": [278, 318, 610, 658, 659, 788, 904, 920, 997, 1002, 1016, 1032, 1036, 1040, 1045, 1047, 1050], "multi_confus": 754, "multi_label": [920, 922], "multi_layer_regressor": 414, "multi_output": [384, 924, 930, 989], "multi_target_forest": 1002, "multialign": 281, "multiarch": 383, "multiclass": [2, 31, 63, 66, 140, 192, 204, 227, 239, 246, 248, 251, 261, 266, 274, 276, 279, 288, 307, 336, 347, 354, 370, 371, 377, 378, 380, 389, 398, 407, 414, 436, 451, 461, 488, 496, 504, 557, 559, 561, 564, 567, 568, 594, 602, 610, 631, 632, 633, 658, 659, 666, 668, 673, 674, 675, 676, 702, 706, 708, 729, 730, 734, 735, 738, 743, 754, 783, 784, 787, 788, 789, 794, 800, 801, 803, 804, 805, 806, 814, 816, 818, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 871, 885, 904, 906, 909, 912, 914, 962, 963, 964, 995, 997, 1011, 1012, 1016, 1017, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1047, 1048, 1049], "multicollinear": [141, 147, 183, 184, 188, 275, 331, 410, 500, 564, 634, 655, 830, 997, 1009, 1022], "multicor": [1044, 1045], "multidimension": [2, 410, 688, 690, 692, 694, 998, 1004], "multigrid": 461, "multiindex": 1046, "multilabel": [2, 30, 31, 115, 117, 183, 237, 276, 287, 331, 370, 377, 378, 389, 402, 481, 486, 496, 497, 508, 509, 515, 523, 541, 557, 564, 567, 658, 674, 675, 703, 707, 713, 726, 729, 730, 734, 735, 738, 739, 754, 756, 783, 784, 787, 788, 794, 796, 830, 833, 835, 837, 861, 868, 871, 875, 877, 888, 909, 912, 914, 922, 936, 962, 963, 964, 1012, 1022, 1023, 1027, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050], "multilabel_": [833, 1037], "multilabel_confusion_matrix": [2, 713, 729, 730, 738, 784, 787, 1001, 1041], "multilabelbinar": [2, 389, 833, 868, 877, 1002, 1035, 1037, 1038, 1040, 1041], "multilay": [387, 999], "multilearn": 1020, "multimetr": [711, 990, 1042, 1047], "multimetric_": [800, 803, 804, 814], "multimod": 238, "multinomi": [2, 47, 66, 183, 192, 202, 203, 205, 226, 246, 264, 278, 286, 306, 370, 371, 375, 412, 414, 496, 512, 523, 551, 553, 559, 561, 631, 658, 659, 741, 830, 833, 839, 840, 841, 842, 843, 884, 933, 1001, 1017, 1022, 1023, 1027, 1032, 1036, 1038, 1039, 1040, 1045, 1046, 1050], "multinomialdevi": 1043, "multinomialhmm": 1032, "multinomialnb": [2, 47, 364, 370, 415, 839, 840, 841, 842, 1003, 1034, 1036, 1039, 1040, 1044, 1045, 1047], "multiouput": 1042, "multioutput": [2, 41, 153, 278, 288, 389, 398, 430, 464, 481, 482, 483, 551, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 632, 633, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 788, 790, 791, 825, 833, 835, 836, 837, 838, 847, 855, 862, 871, 905, 907, 910, 912, 913, 914, 915, 936, 963, 964, 1001, 1022, 1023, 1027, 1032, 1033, 1034, 1038, 1039, 1045, 1046], "multioutput_arrai": 375, "multioutputclassifi": [2, 398, 788, 833, 835, 837, 1001, 1039, 1041, 1042, 1043, 1044, 1048, 1049], "multioutputregressor": [2, 153, 398, 430, 464, 481, 482, 483, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 836, 838, 847, 855, 862, 905, 907, 910, 913, 915, 1038, 1039, 1041, 1043, 1044, 1048, 1049], "multipl": [2, 25, 52, 80, 101, 104, 118, 129, 134, 140, 142, 144, 164, 183, 186, 206, 243, 263, 269, 274, 277, 281, 286, 288, 291, 318, 324, 342, 362, 363, 364, 369, 371, 372, 375, 377, 378, 379, 380, 387, 389, 401, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 443, 459, 463, 465, 466, 468, 473, 487, 490, 492, 495, 496, 497, 503, 504, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 581, 599, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 660, 661, 662, 663, 666, 667, 668, 671, 673, 676, 678, 679, 689, 690, 692, 693, 694, 711, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 788, 790, 791, 793, 797, 798, 800, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 834, 835, 836, 837, 838, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 866, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 926, 942, 947, 948, 971, 974, 993, 996, 997, 998, 1002, 1003, 1004, 1008, 1009, 1014, 1015, 1017, 1020, 1021, 1022, 1032, 1033, 1035, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "multipleloc": [231, 294], "multiplex": 1017, "multipli": [186, 215, 229, 269, 357, 362, 384, 389, 412, 414, 415, 420, 463, 474, 515, 538, 540, 541, 547, 557, 561, 564, 646, 648, 652, 654, 658, 659, 660, 662, 668, 669, 670, 672, 676, 677, 678, 680, 686, 687, 689, 693, 764, 906, 909, 912, 914, 936, 976, 977, 978, 990, 993, 997, 1001, 1015, 1043], "multiprocess": [387, 389, 966, 1004, 1032, 1040, 1046], "multirespons": 997, "multiscal": 461, "multisurfac": [168, 372], "multitarget": 384, "multitask": [288, 415, 1002], "multitaskelasticnet": [2, 646, 647, 652, 661, 662, 663, 681, 997, 1002, 1032, 1039, 1040, 1043, 1045], "multitaskelasticnetcv": [2, 398, 646, 647, 652, 660, 662, 663, 681, 997, 1002, 1035, 1042, 1043, 1045, 1049], "multitasklasso": [2, 206, 652, 660, 663, 997, 1002, 1032, 1040, 1043, 1045], "multitasklassocv": [2, 398, 661, 662, 1002, 1035, 1042, 1043, 1045, 1049], "multithread": [362, 407, 774, 778, 904, 905, 906, 907, 908, 909, 910], "multivari": [2, 120, 186, 367, 409, 412, 415, 472, 516, 517, 518, 627, 628, 629, 630, 649, 671, 678, 679, 839, 840, 841, 842, 843, 995, 997, 1000, 1003, 1020, 1027], "multivariate_norm": [113, 116, 254, 420, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480], "multiwai": 1017, "muma": 112, "mungui": 1045, "munoz": [1038, 1044], "muoki": 1044, "murad": 1035, "murashkin": 1036, "murata": [1045, 1046], "murder": 350, "murezzda": 1048, "murmurhash": 384, "murmurhash3": [2, 415, 582, 589, 965], "murmurhash3_32": [2, 384], "murmurhash3_x86_32": [384, 965], "murphi": [405, 643, 994], "murrai": [1038, 1039], "music": 1025, "must": [88, 186, 187, 189, 195, 197, 228, 229, 238, 249, 264, 295, 310, 315, 350, 358, 370, 374, 375, 376, 377, 379, 381, 383, 389, 390, 398, 403, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 428, 437, 440, 443, 444, 445, 446, 448, 449, 450, 454, 456, 458, 460, 461, 463, 465, 466, 468, 473, 486, 508, 509, 512, 523, 531, 537, 538, 539, 540, 541, 543, 544, 547, 553, 554, 559, 560, 561, 562, 567, 568, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 617, 620, 627, 628, 629, 630, 631, 632, 633, 638, 642, 643, 648, 649, 652, 658, 659, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 699, 703, 706, 709, 735, 746, 764, 771, 774, 778, 781, 788, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 809, 810, 812, 814, 815, 816, 818, 819, 821, 825, 828, 830, 831, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 860, 861, 862, 864, 867, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 888, 904, 905, 906, 907, 908, 909, 910, 911, 917, 975, 984, 986, 989, 990, 991, 997, 998, 999, 1001, 1004, 1005, 1007, 1008, 1015, 1016, 1017, 1032, 1035, 1039, 1043, 1045, 1046, 1049], "mutat": [358, 989, 1040], "mutual": [2, 72, 73, 82, 88, 91, 162, 183, 389, 414, 416, 445, 592, 595, 596, 599, 600, 606, 607, 608, 609, 704, 705, 715, 755, 757, 786, 795, 802, 817, 820, 990, 997, 1001, 1002, 1022, 1032, 1038, 1048], "mutual_info_classif": [2, 104, 416, 592, 595, 596, 599, 600, 1038, 1044, 1047, 1050], "mutual_info_regress": [2, 163, 322, 416, 592, 595, 596, 599, 600, 609, 1038, 1039, 1044, 1046, 1047, 1048, 1050], "mutual_info_scor": [2, 72, 407, 704, 1001, 1040, 1043, 1044], "mu\u00f1oz": [1045, 1047], "mwestt": 1041, "my": [369, 375, 380, 383, 496], "my_custom_loss_func": 1001, "my_data": 380, "my_dataset": 486, "my_estim": [377, 408], "my_extra_param": 377, "my_featur": 375, "my_fil": 381, "my_func": [376, 381], "my_g": [419, 533], "my_group": [245, 398], "my_kernel": [335, 1016], "my_memb": [94, 96, 97], "my_other_weight": [245, 398], "my_pipelin": 1041, "my_script": 363, "my_test_script": 383, "my_token": 415, "my_weight": [245, 398], "myatt": [1041, 1042], "mycach": [508, 509], "mycluster": 425, "myenugula": 1050, "myer": [1035, 1039], "myestim": [377, 421, 423, 424, 426, 427, 428, 429, 430], "myestimator0": 423, "myestimator1": 423, "mymultioutputestim": 377, "mypi": [375, 379, 393, 400, 1043], "myself": 375, "mysvmlightfil": 508, "mytransform": [377, 431], "m\u00e9hault": [1040, 1041], "m\u00f6rtberg": 1038, "m\u00fcller": [0, 390, 412, 535, 870, 1005, 1011, 1015, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 91, 102, 107, 111, 115, 118, 120, 123, 125, 127, 129, 130, 134, 136, 137, 141, 156, 163, 166, 168, 170, 174, 179, 187, 189, 194, 197, 204, 211, 212, 215, 226, 228, 229, 231, 241, 242, 243, 246, 254, 256, 257, 267, 269, 272, 274, 275, 276, 278, 279, 282, 289, 292, 294, 307, 311, 313, 314, 320, 323, 325, 329, 343, 346, 357, 362, 369, 372, 373, 375, 379, 381, 383, 384, 389, 393, 394, 398, 404, 405, 407, 410, 411, 412, 413, 414, 415, 417, 418, 443, 444, 446, 447, 449, 468, 470, 473, 477, 488, 515, 516, 517, 518, 523, 528, 538, 540, 541, 547, 557, 558, 559, 560, 563, 564, 565, 566, 588, 589, 590, 591, 607, 608, 614, 627, 649, 671, 679, 692, 696, 699, 706, 707, 755, 805, 808, 810, 815, 816, 819, 840, 844, 845, 849, 869, 896, 898, 912, 913, 914, 915, 927, 946, 951, 952, 975, 979, 980, 990, 993, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1032, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "n1": 123, "n2": 123, "n4": 123, "n_": [111, 112, 189, 269, 321, 407, 412, 414, 646, 652, 685, 696, 993, 997, 1001, 1003, 1004, 1008, 1011, 1013, 1016, 1017], "n_alpha": [216, 471, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 673, 675, 681, 682, 683, 684, 1035], "n_atom": 1033, "n_averag": 69, "n_bar": 182, "n_batch_iter_": 536, "n_best": 450, "n_bin": [61, 62, 64, 86, 211, 229, 310, 312, 316, 437, 438, 869, 1011], "n_bins_": 869, "n_bootstrap": [272, 1033], "n_bulk_repeat": 49, "n_byte": 242, "n_c": [407, 659], "n_call": [844, 845], "n_candid": [803, 804, 990], "n_candidates_": [281, 803, 804, 990], "n_candidates_0": 990, "n_candidates_i": 990, "n_categori": [316, 840, 878, 1011], "n_categorical_featur": [143, 561, 562, 632, 633], "n_categories_": 840, "n_center": [77, 512], "n_channel": [583, 584, 587], "n_class": [2, 45, 72, 118, 134, 136, 141, 142, 165, 167, 226, 232, 243, 246, 256, 276, 277, 278, 298, 299, 318, 355, 357, 358, 371, 375, 377, 389, 414, 436, 487, 488, 502, 515, 519, 523, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 604, 610, 634, 639, 658, 659, 666, 667, 668, 674, 675, 676, 677, 697, 707, 716, 718, 722, 735, 738, 741, 754, 788, 794, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 851, 853, 854, 861, 864, 871, 872, 875, 878, 885, 888, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 914, 916, 917, 935, 936, 997, 1001, 1002, 1005, 1012, 1015, 1016, 1037, 1038, 1039, 1041, 1042, 1043, 1049], "n_classes_": [551, 553, 555, 557, 559, 564, 610, 832, 833, 912, 914, 1033, 1042, 1044], "n_classes_pr": [714, 755], "n_classes_tru": [714, 755], "n_classifi": [66, 569, 570], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 120, 322, 351, 375, 389, 407, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 462, 511, 513, 710, 792, 793, 1032, 1036, 1038, 1040, 1041, 1043, 1046], "n_clusters_": [73, 82, 88, 96, 440, 444], "n_clusters_list": 78, "n_clusters_per_class": [67, 138, 165, 167, 266, 299, 304, 311, 371, 380, 515, 605, 607], "n_clusters_rang": 72, "n_clusters_tru": 94, "n_col": [45, 57, 120, 247, 422, 450, 452, 511, 513, 632], "n_column": [404, 450, 452], "n_column_clust": [450, 452, 513], "n_comp": [130, 191], "n_comparison": 269, "n_compon": [43, 44, 45, 51, 54, 79, 85, 90, 91, 92, 102, 104, 105, 106, 115, 116, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 152, 191, 210, 231, 232, 233, 234, 235, 236, 238, 242, 243, 246, 250, 254, 255, 256, 257, 258, 259, 260, 268, 293, 298, 307, 314, 320, 322, 325, 326, 351, 377, 380, 381, 389, 408, 410, 412, 419, 450, 451, 461, 463, 481, 482, 483, 484, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 639, 640, 641, 642, 688, 689, 690, 691, 692, 693, 694, 695, 696, 797, 798, 853, 860, 863, 896, 897, 898, 948, 993, 995, 998, 1000, 1004, 1033, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050], "n_components_": [105, 127, 389, 440, 444, 534, 538, 539, 540, 541, 542, 543, 896, 897, 1041, 1043], "n_components_fa": 127, "n_components_pca": 127, "n_components_pca_ml": 127, "n_components_rang": 242, "n_connected_compon": 462, "n_connected_components_": [440, 444, 1041], "n_core": 140, "n_core_sampl": [418, 443], "n_cpu": [363, 389], "n_cv": [411, 436], "n_cv_alpha": [651, 655], "n_cv_fold": [143, 315, 806, 823, 828, 831], "n_digit": 91, "n_dim": [477, 527, 529, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 1049], "n_dimens": [797, 798], "n_dimensions_of_x": [906, 907, 908, 909, 910], "n_dir": 53, "n_e": 407, "n_element": [417, 617], "n_encoded_featur": [877, 878], "n_error": 296, "n_error_outli": [225, 295, 338], "n_error_outliers_sgd": 225, "n_error_test": [225, 295, 338], "n_error_test_sgd": 225, "n_error_train": [225, 338], "n_error_train_sgd": 225, "n_estim": [46, 49, 63, 67, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 152, 153, 156, 181, 189, 232, 247, 251, 256, 266, 281, 311, 318, 320, 362, 388, 389, 414, 416, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 632, 803, 804, 990, 1007, 1008, 1029, 1040, 1048], "n_estimators_": [144, 559, 560], "n_estimators_ful": 144, "n_exampl": 47, "n_face": 247, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 85, 91, 93, 94, 109, 110, 111, 112, 113, 118, 120, 127, 134, 136, 138, 140, 141, 165, 167, 168, 181, 182, 191, 193, 196, 197, 198, 206, 207, 210, 214, 215, 226, 228, 232, 238, 242, 243, 245, 254, 259, 266, 272, 276, 278, 279, 281, 282, 299, 304, 311, 318, 319, 320, 322, 324, 325, 326, 346, 350, 351, 352, 358, 362, 368, 369, 371, 375, 377, 380, 387, 388, 389, 398, 407, 409, 410, 412, 414, 415, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 492, 494, 501, 504, 508, 509, 512, 515, 516, 519, 521, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 700, 701, 702, 710, 725, 758, 759, 760, 761, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 922, 948, 975, 976, 977, 978, 979, 980, 981, 982, 983, 989, 993, 997, 1002, 1004, 1005, 1011, 1015, 1016, 1017, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "n_feature_influ": 49, "n_features_": [167, 593, 594, 1045, 1047], "n_features_a": 853, "n_features_b": 853, "n_features_in_": [377, 389, 428, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 989, 1043, 1045, 1047, 1050], "n_features_max": 69, "n_features_missing_ind": 630, "n_features_new": [431, 441, 444, 532, 534, 536, 537, 539, 542, 543, 549, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 635, 638, 639, 640, 641, 642, 853, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897], "n_features_opt": 104, "n_features_out": 630, "n_features_out_": 883, "n_features_rang": 69, "n_features_to_comput": 1040, "n_features_to_select": [166, 168, 320, 416, 593, 602, 1044, 1046], "n_features_to_select_": 602, "n_features_with_miss": 629, "n_features_with_missing_": 627, "n_fold": [159, 647, 651, 653, 655, 659, 661, 663, 1033, 1034, 1038], "n_gram_rang": 1032, "n_group": [411, 809, 1038], "n_i": [1003, 1011], "n_imag": 267, "n_index": [846, 847, 848, 850, 852, 854, 855], "n_inform": [62, 64, 67, 138, 141, 165, 167, 193, 197, 214, 215, 266, 272, 282, 299, 304, 311, 318, 346, 371, 380, 515, 524, 553, 554, 555, 556, 564, 565, 605, 606, 607, 608, 609, 646, 647, 652, 660, 661, 662, 665, 681, 682, 683, 834, 922, 1002, 1040], "n_init": [57, 77, 78, 83, 90, 91, 94, 97, 231, 232, 233, 234, 319, 322, 351, 407, 442, 446, 448, 450, 451, 452, 458, 461, 690, 694, 797, 798, 1032, 1040, 1046, 1047, 1048], "n_init_rang": 94, "n_inlier": 238, "n_input_features_": 1045, "n_instanc": [49, 633], "n_iter": [45, 55, 103, 149, 170, 219, 270, 277, 289, 307, 341, 377, 381, 388, 419, 453, 477, 532, 533, 544, 545, 546, 547, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 692, 694, 803, 804, 812, 814, 860, 862, 947, 948, 990, 1015, 1033, 1038, 1039, 1040, 1044, 1046, 1047, 1048, 1050], "n_iter_": [43, 123, 149, 219, 257, 389, 439, 446, 447, 448, 470, 471, 481, 482, 483, 531, 532, 533, 536, 537, 538, 539, 540, 543, 561, 562, 627, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 679, 680, 690, 692, 797, 798, 853, 861, 862, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 1036, 1039, 1040, 1042, 1045, 1046, 1048], "n_iter_no_chang": [46, 140, 144, 149, 219, 321, 350, 380, 389, 414, 559, 560, 561, 562, 666, 667, 668, 676, 677, 678, 861, 862, 1015, 1040, 1043], "n_iter_search": 277, "n_iter_without_progress": [232, 692, 1037, 1038], "n_iterations_": [281, 803, 804], "n_iters_": 1038, "n_job": [52, 87, 104, 105, 140, 141, 146, 147, 154, 167, 168, 181, 186, 187, 188, 189, 232, 234, 250, 263, 268, 270, 271, 273, 282, 286, 289, 318, 319, 320, 323, 346, 363, 375, 389, 414, 418, 436, 443, 445, 447, 449, 451, 454, 455, 456, 457, 460, 463, 466, 471, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 966, 990, 1001, 1002, 1004, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1050], "n_k": [407, 550], "n_kernel": 612, "n_kernel_param": [610, 611], "n_knot": [43, 212, 321, 883, 1011, 1045], "n_l1_ratio": [647, 659, 661, 1035], "n_l1_ratios_": 659, "n_label": [51, 118, 246, 389, 486, 523, 713, 720, 726, 739, 740, 754, 756, 792, 793, 820, 1001, 1038, 1040], "n_labeled_point": [328, 329], "n_layer": [861, 862], "n_layers_": [861, 862], "n_leav": [462, 912, 913, 914, 915], "n_leaves_": [440, 444], "n_left": 563, "n_local_tri": 459, "n_m": 1017, "n_mask": 211, "n_missing_featur": 629, "n_missing_sampl": 182, "n_nearest_featur": [182, 627], "n_neighbor": [51, 79, 95, 100, 155, 181, 231, 232, 233, 235, 238, 248, 289, 291, 292, 295, 296, 297, 298, 301, 314, 318, 320, 350, 414, 451, 602, 607, 608, 628, 688, 689, 691, 693, 695, 696, 846, 847, 848, 850, 852, 853, 857, 899, 900, 991, 998, 1004, 1007, 1014, 1039, 1046, 1048, 1049], "n_neighbors_": [691, 850], "n_neighbors_list": [248, 291], "n_neighbour": 1046, "n_node": [357, 440, 444, 462, 557, 558, 564, 565, 566, 912, 913, 914, 915, 954], "n_node_sampl": 357, "n_nodes_ptr": [557, 558, 564, 565, 566], "n_noise_": 82, "n_nonzero": 129, "n_nonzero_coef": [210, 526, 531, 537, 542, 545, 546, 548, 650, 664, 685, 686, 1050], "n_nonzero_coefs_": [664, 665, 1050], "n_nonzero_column": 352, "n_numerical_featur": 143, "n_order": 194, "n_original_featur": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "n_out": 566, "n_outlier": [111, 112, 150, 214, 238, 296], "n_output": [357, 389, 414, 424, 430, 431, 436, 441, 444, 464, 468, 481, 482, 483, 532, 534, 536, 537, 539, 542, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 628, 630, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 754, 785, 788, 790, 791, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 853, 854, 855, 860, 861, 862, 863, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 896, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 936, 971, 1001, 1002, 1017, 1039, 1042], "n_output_featur": 628, "n_output_features_": 879, "n_outputs_": [551, 552, 557, 558, 564, 565, 566, 861, 862, 912, 913, 914, 915], "n_oversampl": [450, 452, 541, 544, 948, 1046], "n_pack": [2, 951, 952], "n_patch": [583, 584, 587], "n_permut": [275, 411, 829], "n_pixel": [247, 267], "n_point": [264, 844, 845], "n_points_per_clust": 98, "n_popul": [384, 969], "n_possible_iterations_": [803, 804], "n_predict": 49, "n_pt": 53, "n_q": 407, "n_quantil": [107, 187, 313, 881, 893, 1041], "n_quantiles_": 881, "n_queri": [688, 846, 847, 848, 850, 852, 854, 855, 856], "n_random_featur": 201, "n_redund": [62, 64, 67, 141, 165, 167, 266, 272, 299, 304, 311, 371, 380, 436, 515, 553, 555, 564, 834], "n_refin": 471, "n_region": 80, "n_regions_plu": 80, "n_regressor": 570, "n_relevant_featur": 206, "n_remaining_candidates_": [803, 804], "n_repeat": [137, 141, 147, 167, 186, 188, 189, 269, 283, 286, 318, 411, 515, 634, 815, 816, 1009], "n_required_iterations_": [803, 804], "n_resourc": 990, "n_resources_": [281, 803, 804, 990], "n_resources_0": 990, "n_resources_i": 990, "n_restarts_optim": [176, 177, 417, 610, 611], "n_retri": [487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 1046, 1050], "n_row": [45, 57, 120, 404, 422, 450, 452, 511, 513], "n_row_clust": [450, 452, 513], "n_run": [72, 94, 191, 351], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 107, 109, 110, 111, 112, 113, 116, 118, 120, 121, 125, 127, 134, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 160, 161, 167, 168, 179, 181, 182, 185, 193, 195, 196, 197, 198, 199, 202, 204, 206, 207, 210, 211, 212, 214, 215, 219, 223, 226, 228, 229, 231, 232, 233, 234, 235, 236, 238, 242, 243, 245, 248, 255, 257, 258, 259, 260, 266, 267, 269, 272, 273, 276, 278, 279, 280, 281, 282, 284, 289, 299, 311, 312, 313, 316, 319, 320, 322, 324, 325, 326, 330, 337, 340, 341, 346, 350, 351, 358, 368, 372, 375, 377, 380, 384, 387, 388, 389, 398, 406, 407, 409, 410, 411, 412, 414, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 494, 501, 504, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 770, 771, 772, 773, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 920, 922, 935, 936, 948, 950, 952, 962, 969, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 989, 990, 993, 997, 1001, 1002, 1004, 1005, 1011, 1012, 1013, 1015, 1016, 1017, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "n_samples1": 870, "n_samples2": 870, "n_samples_": 541, "n_samples_1": [341, 1016], "n_samples_2": [341, 1016], "n_samples_a": [792, 793], "n_samples_fit": [430, 464, 481, 482, 483, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 688, 837, 838, 846, 847, 848, 850, 852, 854, 855, 856, 862, 905, 907, 910, 913, 915], "n_samples_fit_": [289, 846, 847, 848, 850, 852, 854, 855, 856], "n_samples_i": [612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781], "n_samples_per_cent": 94, "n_samples_rang": [110, 242], "n_samples_seen": 884, "n_samples_seen_": [534, 873, 874, 884, 1040], "n_samples_test": [282, 906, 907, 908, 909, 910, 1004, 1011], "n_samples_train": [282, 906, 907, 908, 909, 910], "n_samples_transform": [289, 848, 856], "n_samples_x": [611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781], "n_seed": 460, "n_selected_featur": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "n_skips_": 1039, "n_skips_invalid_data_": 671, "n_skips_invalid_model_": 671, "n_skips_no_inliers_": 671, "n_spline": [43, 883], "n_split": [43, 52, 140, 145, 149, 181, 182, 186, 256, 264, 269, 271, 274, 279, 283, 286, 325, 331, 339, 346, 358, 411, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 827, 1038, 1040, 1050], "n_splits_": [800, 803, 804, 814], "n_steps_": [123, 448, 537, 538, 1045], "n_subpopulation_": 679, "n_subsampl": [679, 936], "n_subsets_of_featur": 594, "n_support_": [906, 907, 908, 909, 910, 1016, 1042], "n_support_vector": 46, "n_sv": [906, 907, 908, 909, 910, 1016, 1042], "n_svd_vec": [450, 452], "n_t": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "n_t_l": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "n_t_r": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "n_target": [389, 410, 481, 482, 483, 484, 524, 556, 611, 643, 646, 647, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 671, 672, 673, 674, 675, 681, 684, 685, 686, 687, 1002, 1044, 1046, 1048], "n_task": [206, 997], "n_test": [47, 49, 69, 137, 269, 1032, 1035], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [635, 727, 782, 789], "n_tick": [806, 823, 828, 831], "n_top": 277, "n_top_word": 54, "n_topic": [380, 536, 1039], "n_tot": 699, "n_total_sampl": [328, 329], "n_train": [47, 49, 69, 137, 269, 1032, 1035], "n_train_po": 47, "n_transformed_featur": 864, "n_tree": 46, "n_trees_per_iter": 561, "n_trees_per_iteration_": [559, 560, 561, 562], "n_trials_": 671, "n_uncorrelated_featur": 275, "n_unequ": 699, "n_unique_categori": 315, "n_unique_label": [729, 730, 738, 783, 784, 787, 964], "n_unique_tick": [806, 828], "n_valu": [823, 831, 1040], "n_values_": 1040, "n_values_feature_j": 633, "n_x": [87, 585], "n_y": [87, 585, 1003, 1011], "n_z": 585, "na": [627, 628, 629, 630, 769, 778, 928, 930, 931, 1042, 1043, 1046, 1047, 1048, 1049], "nabarun": 1040, "nabla": 1005, "nabsolut": 217, "nacross": 283, "nada": 57, "nadeau": [269, 1040], "nadia": 1044, "nadim": 1045, "nadirhan": 1046, "nadya": 1038, "nagarajan": [645, 997], "nagarjuna": [1039, 1040], "nagasaka": 1045, "naghshhnejad": [1042, 1043], "naipawat": [1046, 1047], "naiv": [2, 32, 64, 67, 152, 269, 271, 288, 350, 352, 370, 405, 414, 415, 436, 544, 839, 840, 841, 842, 843, 995, 996, 1004, 1009, 1023, 1027, 1032, 1033, 1034, 1035, 1040, 1042, 1045, 1047], "naive_bay": [2, 47, 61, 62, 64, 67, 152, 156, 270, 271, 350, 358, 364, 370, 414, 436, 569, 839, 840, 841, 842, 843, 865, 995, 1002, 1003, 1033, 1034, 1036, 1037, 1038, 1039], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 364, "naivebayesna": 395, "naivelycalibratedlinearsvc": [62, 64], "najera": 1039, "najork": [726, 756, 1001], "naka": 1045, "nakamura": 1046, "nakano": [1039, 1040], "nalepa": 1039, "naman": 1049, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 91, 95, 103, 105, 107, 113, 121, 126, 137, 138, 139, 140, 143, 146, 149, 154, 186, 187, 188, 201, 209, 211, 213, 215, 217, 218, 226, 228, 229, 231, 232, 238, 244, 245, 247, 248, 252, 256, 263, 264, 266, 267, 270, 272, 273, 276, 278, 279, 283, 286, 289, 297, 298, 304, 305, 311, 313, 315, 322, 323, 326, 332, 344, 350, 351, 352, 363, 364, 369, 370, 373, 375, 377, 379, 380, 382, 383, 389, 393, 398, 404, 407, 411, 414, 415, 417, 421, 423, 428, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 697, 698, 699, 700, 702, 708, 709, 711, 713, 732, 733, 742, 779, 780, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 812, 814, 818, 822, 823, 827, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 929, 930, 931, 934, 939, 940, 941, 943, 956, 957, 958, 960, 963, 970, 984, 988, 989, 990, 995, 997, 1001, 1002, 1008, 1009, 1011, 1017, 1021, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "name_to_color": 315, "named_estim": [567, 568, 569, 570], "named_estimators_": [567, 568, 569, 570, 1040, 1042], "named_step": [105, 116, 166, 408, 593, 594, 597, 864, 865, 904, 905, 997, 1039, 1041], "named_transform": [863, 1047], "named_transformers_": 463, "namedtupl": [2, 617, 1048], "namespac": 403, "namiya": 1039, "nan": [2, 107, 143, 149, 181, 182, 186, 229, 248, 250, 252, 264, 272, 315, 318, 323, 324, 325, 326, 362, 367, 384, 389, 414, 445, 467, 496, 555, 556, 557, 561, 562, 564, 593, 594, 597, 603, 606, 609, 627, 628, 629, 630, 635, 712, 713, 714, 716, 721, 722, 723, 724, 728, 729, 730, 769, 778, 783, 784, 785, 787, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 873, 874, 878, 880, 881, 884, 885, 889, 892, 893, 895, 921, 928, 929, 930, 931, 975, 990, 1001, 1011, 1017, 1027, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "nan_euclidean": [628, 762, 778], "nan_euclidean_dist": [2, 318, 762, 991, 1042], "nandana": [1038, 1039, 1040], "nanshan": 1045, "nanta": 1035, "nanxin": 1040, "nanyang": 372, "naois": [1047, 1049], "naoki": [1034, 1044], "naoya": [1038, 1039, 1040, 1041], "naozin555": 1045, "napa": 315, "narasimhan": 851, "nardelli": 1035, "narendra": [1043, 1049], "narendramukherje": 1043, "narendran": 1040, "narin": [1039, 1040], "narinek": [1039, 1040], "narr": [375, 389, 658, 904, 909, 1032, 1033], "narrai": 594, "narrow": [52, 137, 146, 309, 311, 380, 844, 845], "nartayxd": 1046, "nasa": [102, 350, 351, 372], "nasdaq": 51, "naser": 1042, "nasir": 1040, "nass": 1047, "nastegiano": 1046, "nat": [607, 608, 704, 755, 757, 1046], "natasha": 1042, "natchiappan": [1045, 1046], "nate": [1038, 1039, 1045], "nath": 1040, "nathan": [535, 1040, 1044, 1047, 1050], "nathaniel": [1039, 1040, 1042], "nathansquan": 1046, "nati": 1047, "nation": [50, 111, 302, 370, 851], "nativ": [43, 149, 153, 175, 181, 263, 363, 370, 389, 401, 414, 496, 561, 562, 836, 837, 997, 1001, 1002, 1020, 1042, 1044], "native_result": 143, "natl": [689, 693, 998], "natur": [43, 64, 67, 140, 146, 177, 186, 187, 191, 197, 211, 212, 228, 229, 235, 248, 254, 260, 278, 288, 350, 375, 377, 389, 412, 414, 415, 418, 443, 449, 456, 551, 590, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 692, 704, 741, 755, 757, 846, 847, 848, 850, 852, 854, 855, 856, 883, 946, 997, 998, 1000, 1001, 1004, 1006, 1011, 1015, 1020, 1032, 1040], "naul": [1037, 1038], "nav": 51, "navarret": [1040, 1041, 1042], "navarro": 1047, "navi": [69, 102, 110, 124, 128, 129, 153, 193, 214, 222, 234, 255, 256, 257, 260, 276, 278, 294, 301, 330], "navig": [383, 1034], "navin": 900, "navistar": 51, "navkal": 1040, "navractil": 1001, "navratil2007": 1001, "nawazish": [1047, 1048], "naziya": 1050, "nb": [47, 127, 152, 358, 841, 1003], "nbclaim": 229, "nber": 49, "nbr": [852, 1004], "nbrown": 1050, "nbrs_": [688, 689], "nbsp": [146, 201], "nbviewer": [51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357], "nbyte": [86, 242], "nca": [232, 297, 298, 299, 853, 1004], "nca_pip": 1004, "ncall": 381, "ncanip": 853, "nclass": 264, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 86, 90, 99, 120, 125, 130, 144, 187, 208, 211, 212, 213, 219, 229, 231, 232, 241, 248, 263, 265, 271, 272, 280, 282, 283, 289, 292, 305, 310, 311, 313, 314, 323, 345, 346, 351, 371], "ncorrect": 269, "ncsu": [168, 372], "ncv": [450, 452], "nd": [1045, 1049], "ndarrai": [86, 91, 211, 252, 267, 268, 269, 375, 376, 377, 381, 382, 403, 415, 418, 419, 422, 423, 425, 428, 429, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 715, 718, 721, 722, 723, 724, 727, 728, 738, 745, 746, 748, 751, 753, 754, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 927, 928, 929, 930, 935, 936, 945, 947, 948, 949, 950, 955, 962, 964, 965, 969, 972, 973, 975, 976, 977, 978, 981, 986, 987, 989, 1001, 1016, 1021, 1035, 1039, 1042, 1043, 1046, 1047, 1048, 1049], "ndata": 275, "ndataset": [226, 311], "ndbscan": 98, "ndcg": [726, 756, 1001, 1039], "ndcg_score": [2, 726, 1001, 1039, 1042, 1047, 1048], "ndenumer": 223, "ndepend": 187, "ndim": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 930, 931], "ndimag": [53, 80, 81, 87, 307], "ndingwal": 1039, "ndirangu": [1042, 1046], "ne": [1001, 1004], "neal": [997, 1045], "near_uniqu": 316, "nearbi": [407, 1004], "nearer": [2, 848, 856, 1004], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 83, 84, 87, 91, 94, 99, 104, 109, 113, 120, 123, 150, 160, 174, 182, 195, 203, 223, 227, 233, 236, 247, 248, 262, 293, 295, 298, 299, 306, 307, 314, 339, 344, 348, 367, 372, 384, 387, 389, 407, 413, 414, 418, 421, 431, 443, 445, 447, 449, 451, 456, 460, 461, 496, 502, 504, 607, 608, 627, 628, 630, 631, 635, 688, 689, 691, 692, 696, 792, 793, 800, 830, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 865, 869, 884, 974, 998, 1007, 1016, 1021, 1022, 1023, 1027, 1032, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1044], "nearest_neighbor": [79, 451, 691], "nearest_neighbor_algorithm": [846, 854, 855], "nearest_neighbors_algorithm": [847, 852], "nearestcentroid": [2, 300, 350, 1002, 1004, 1032, 1036, 1039, 1044, 1047], "nearestneighbor": [2, 289, 322, 393, 407, 418, 443, 445, 447, 460, 688, 689, 693, 846, 847, 848, 850, 854, 855, 856, 1004, 1032, 1036, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "nearli": [37, 62, 272, 370, 389, 764, 1001, 1004, 1013], "neat": 1032, "necess": [998, 1004], "necessari": [46, 53, 138, 197, 211, 216, 254, 263, 269, 270, 276, 291, 343, 362, 370, 373, 374, 375, 376, 377, 378, 379, 383, 387, 407, 409, 414, 451, 461, 487, 488, 490, 492, 493, 494, 495, 497, 534, 644, 645, 646, 652, 656, 657, 660, 661, 662, 663, 664, 665, 671, 673, 675, 676, 691, 695, 795, 867, 876, 887, 891, 897, 990, 993, 997, 1000, 1003, 1011, 1017, 1032, 1040], "necessarili": [43, 67, 104, 123, 186, 211, 219, 229, 243, 244, 255, 276, 311, 350, 351, 369, 401, 403, 405, 407, 414, 627, 852, 854, 855, 856, 995, 998, 1000, 1001], "need": [0, 30, 43, 48, 51, 68, 80, 86, 88, 90, 113, 122, 132, 140, 143, 145, 146, 147, 149, 154, 168, 170, 175, 181, 182, 186, 199, 213, 228, 229, 232, 238, 241, 243, 245, 248, 249, 254, 255, 259, 260, 263, 267, 269, 271, 272, 274, 286, 288, 289, 291, 314, 318, 325, 331, 339, 350, 351, 356, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 388, 389, 390, 392, 393, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 423, 436, 440, 444, 448, 463, 464, 466, 503, 541, 551, 572, 582, 583, 588, 589, 590, 591, 627, 635, 638, 639, 640, 642, 649, 666, 668, 671, 676, 679, 692, 711, 720, 721, 722, 723, 724, 781, 785, 797, 798, 800, 803, 804, 814, 815, 816, 825, 833, 836, 844, 845, 861, 864, 867, 871, 876, 877, 881, 899, 906, 909, 921, 957, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1021, 1025, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "needl": [168, 372], "needs_proba": [1041, 1049], "needs_threshold": 1049, "neeraj": 1039, "neg": [2, 42, 43, 45, 61, 93, 107, 109, 116, 140, 145, 146, 151, 183, 185, 186, 192, 202, 208, 209, 211, 229, 258, 259, 263, 266, 269, 272, 276, 278, 279, 283, 289, 309, 313, 322, 326, 350, 381, 389, 390, 407, 411, 414, 415, 416, 418, 419, 430, 439, 443, 451, 464, 468, 481, 482, 483, 487, 531, 533, 535, 536, 537, 538, 540, 542, 544, 547, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 588, 591, 592, 595, 596, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 677, 678, 679, 680, 687, 698, 699, 704, 705, 712, 713, 715, 716, 718, 719, 721, 722, 723, 724, 727, 729, 730, 731, 735, 738, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 782, 783, 784, 785, 787, 790, 791, 793, 797, 798, 806, 823, 825, 830, 837, 838, 847, 850, 855, 862, 871, 880, 882, 883, 888, 892, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 931, 946, 948, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1015, 1016, 1022, 1026, 1027, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "neg_": [806, 823, 1038], "neg_brier_scor": [1001, 1042], "neg_label": [263, 283, 871, 888], "neg_log_loss": [64, 263, 1001], "neg_lr": 272, "neg_lr_bas": 272, "neg_lr_base_std": 272, "neg_max_error": 1001, "neg_mean_absolute_error": [43, 154, 213, 1001], "neg_mean_absolute_percentage_error": [52, 143, 1001, 1009], "neg_mean_gamma_devi": 1001, "neg_mean_pinball_loss_05p_scor": 146, "neg_mean_pinball_loss_95p_scor": 146, "neg_mean_poisson_devi": 1001, "neg_mean_squared_error": [181, 182, 213, 244, 284, 325, 827, 1001, 1009, 1038], "neg_mean_squared_log_error": 1001, "neg_median_absolute_error": 1001, "neg_root_mean_squared_error": [43, 149, 315, 1001], "neg_root_mean_squared_log_error": 1001, "neg_root_mean_squared_log_error_scor": 1049, "negat": [389, 806, 823, 1001], "negate_scor": [244, 806, 823], "negative_class": 712, "negative_likelihood_ratio": [272, 712], "negative_linestyl": 238, "negative_loglik": 109, "negative_mahal_dist": 468, "negative_outlier_factor": 850, "negative_outlier_factor_": [248, 296, 850, 1007], "neglig": [186, 1004, 1035, 1049], "neigh": [781, 846, 847, 848, 850, 852, 854, 855, 856], "neigh_dist": [846, 847, 848, 850, 852, 854, 855, 856], "neigh_ind": [846, 847, 848, 850, 852, 854, 855, 856], "neighbor": [2, 51, 67, 74, 79, 81, 93, 99, 104, 149, 150, 152, 155, 160, 181, 182, 195, 232, 233, 235, 236, 238, 247, 248, 262, 293, 294, 295, 296, 298, 299, 300, 302, 306, 320, 322, 323, 350, 367, 372, 384, 387, 389, 393, 407, 413, 414, 415, 418, 421, 431, 440, 443, 444, 445, 447, 449, 451, 456, 457, 460, 462, 496, 502, 504, 563, 570, 602, 607, 608, 627, 628, 631, 688, 689, 690, 691, 692, 693, 695, 696, 781, 800, 830, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 884, 900, 908, 974, 1002, 1007, 1021, 1022, 1023, 1026, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "neighbor_feat_idx": 627, "neighborhood": [2, 88, 113, 128, 160, 183, 231, 289, 290, 291, 292, 300, 301, 372, 389, 407, 412, 418, 443, 449, 456, 502, 504, 515, 541, 549, 628, 631, 696, 830, 846, 847, 850, 852, 853, 854, 855, 856, 858, 864, 865, 884, 998, 1007, 1022, 1023, 1027, 1041], "neighborhoodcomponentanalysi": 298, "neighborhoodcomponentsanalysi": [2, 232, 297, 298, 299, 1004, 1041, 1046, 1050], "neighbors_algorithm": [688, 689], "neighborsbas": [1044, 1047], "neighborsclassifi": [852, 854, 855, 856, 1032], "neighborsregressor": 1032, "neighbour": [445, 461, 692, 1006], "neighbourhood": [853, 1004], "neighbourhood_components_analysi": 853, "neil": 1044, "neill": 1044, "neither": [182, 186, 318, 350, 358, 387, 405, 436, 594, 628, 934, 1004, 1017], "nelder": 997, "nell": [0, 396, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1044], "nelson": [0, 1038, 1039, 1044, 1050], "nemour": 51, "neo": 1040, "nep": 1042, "neptun": 1020, "neq": [407, 1001, 1003, 1011], "ness": [182, 229], "nest": [125, 134, 183, 201, 245, 261, 263, 264, 286, 325, 363, 381, 389, 393, 407, 411, 417, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 461, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 504, 519, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 805, 814, 822, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 1001, 1004, 1022, 1032, 1033, 1036, 1038, 1039, 1040, 1046], "nested_lin": 274, "nested_scor": 274, "nesterov": [305, 861, 862, 1005, 1048, 1049], "nesterovs_momentum": [305, 861, 862], "nestor": 1047, "net": [2, 25, 67, 183, 192, 197, 198, 201, 203, 206, 222, 245, 282, 381, 411, 470, 471, 477, 501, 524, 557, 558, 559, 560, 564, 565, 566, 646, 647, 652, 657, 658, 659, 660, 661, 662, 663, 668, 676, 678, 681, 682, 684, 860, 912, 913, 914, 915, 990, 1001, 1006, 1015, 1022, 1023, 1025, 1027, 1032, 1037, 1041, 1042, 1044], "netbsd": 1032, "neto": [590, 730, 1050], "nettei": 1045, "network": [34, 45, 248, 306, 362, 363, 364, 369, 370, 379, 389, 390, 401, 407, 412, 414, 419, 496, 533, 535, 567, 568, 696, 741, 861, 862, 997, 999, 1001, 1015, 1017, 1020, 1023, 1026, 1027, 1032, 1046, 1050], "networkx": [55, 384], "neural": [34, 44, 45, 67, 269, 306, 389, 401, 411, 412, 414, 419, 533, 535, 538, 540, 547, 567, 568, 639, 645, 696, 741, 797, 853, 860, 861, 862, 870, 993, 997, 998, 999, 1001, 1004, 1007, 1011, 1015, 1017, 1020, 1023, 1025, 1026, 1027, 1032, 1044], "neural_network": [2, 67, 183, 187, 249, 303, 304, 305, 306, 307, 364, 387, 860, 861, 862, 1002, 1005, 1022, 1034, 1049], "neuro": 1020, "neurodebian": 0, "neuroimag": [1019, 1025], "neuron": [861, 862, 999, 1005], "neutral": 716, "nevalu": 154, "never": [140, 246, 326, 358, 375, 384, 387, 401, 406, 407, 408, 410, 411, 449, 456, 523, 555, 556, 557, 564, 864, 865, 989, 993, 1011, 1042, 1045], "nevertheless": [43, 189, 414], "new": [2, 43, 46, 47, 49, 83, 89, 91, 93, 102, 103, 126, 127, 134, 136, 138, 139, 140, 144, 146, 149, 153, 154, 165, 168, 170, 176, 182, 188, 189, 211, 217, 225, 238, 245, 252, 263, 268, 271, 276, 288, 293, 295, 315, 319, 322, 325, 326, 329, 332, 338, 343, 358, 363, 364, 369, 370, 372, 373, 374, 377, 378, 379, 381, 383, 384, 388, 389, 390, 393, 401, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 432, 436, 437, 439, 441, 442, 444, 446, 447, 448, 451, 461, 462, 463, 471, 481, 482, 483, 504, 508, 509, 534, 541, 544, 555, 556, 557, 558, 563, 564, 565, 566, 581, 602, 630, 631, 635, 640, 641, 642, 645, 646, 652, 688, 689, 690, 697, 698, 700, 701, 702, 788, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 834, 850, 873, 874, 879, 880, 881, 883, 884, 885, 892, 893, 901, 919, 928, 933, 970, 975, 990, 991, 993, 997, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1013, 1014, 1015, 1016, 1021, 1025, 1027, 1030, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "new_data": [293, 377], "new_valu": [567, 568, 569, 570], "newaxi": [51, 53, 57, 61, 77, 113, 129, 135, 171, 195, 202, 212, 213, 214, 216, 217, 228, 241, 243, 284, 294, 301, 356, 404, 536, 997], "newei": 1040, "newer": [170, 374, 393, 412], "newgroups20": 226, "newli": [373, 388, 414, 462, 1008, 1038, 1039, 1047], "newsgroup": [2, 46, 54, 57, 242, 270, 332, 351, 352, 368, 404, 415, 487, 488, 1027], "newsgroups_test": 370, "newsgroups_train": [370, 487], "newsgroups_vector": 488, "newsl": [885, 1011], "newslett": 369, "newswir": 370, "newton": [211, 229, 307, 610, 648, 658, 659, 669, 680, 861, 862, 997, 1036, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "newton_cg": 1042, "next": [46, 62, 93, 111, 142, 143, 147, 157, 177, 185, 189, 205, 211, 239, 245, 247, 251, 252, 256, 264, 275, 288, 314, 315, 316, 320, 329, 350, 354, 357, 358, 373, 375, 377, 379, 395, 401, 404, 407, 408, 411, 414, 508, 509, 610, 634, 692, 698, 700, 702, 781, 797, 798, 830, 966, 990, 994, 1000, 1001, 1011, 1025, 1029, 1032, 1045, 1046], "nezar": 1042, "nff": 699, "nfit": 329, "nfkd": [588, 589, 591, 1042], "nfor": 246, "nfrom": 175, "nft": 699, "ng": [407, 412, 691, 850, 1005, 1007, 1043], "ngiam": 1005, "ngo": 1044, "ngram_rang": [270, 332, 415, 588, 589, 591], "ngram_vector": 415, "ngroup": 264, "ngshya": 1043, "nguyen": [1042, 1043, 1046, 1047], "nguy\u1ec5n": 1047, "ni": [1038, 1043], "nic": 1045, "nice": [43, 100, 212, 245, 309, 362, 412], "nicer": 631, "nichol": 1036, "nichola": [1040, 1041, 1043], "nicholson": [1038, 1039, 1040], "nick": [168, 372, 1032, 1038, 1039, 1040, 1041], "nicki": 1046, "nickledav": 1038, "nicknam": 370, "nico": [1038, 1045], "nicol": 1039, "nicola": [0, 168, 396, 658, 997, 1014, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "nicolashug": 1041, "nicolasservel": 1043, "nicolau": 1040, "nicula": [0, 120, 396, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041], "niculescu": [62, 64, 405, 436, 438], "nidhin": 1042, "niederb\u00fchl": 1040, "niederhut": [1040, 1042], "nielsen": [743, 1040], "nielsenmarkus11": [1039, 1040], "nigam": [839, 1003], "nigel": 1045, "night": 52, "nightli": [0, 363, 378, 379], "nightwalkx": 1048, "nihal": 1047, "nihar": 1040, "niket": 1046, "nikhil": 1046, "nikita": [1039, 1040, 1042, 1045, 1046, 1047], "nikla": [1042, 1043], "nikolai": [1035, 1036, 1037, 1038, 1040, 1041, 1046, 1048], "nil": 1044, "nilearn": 1020, "nilesh": 1040, "nilotp": [635, 637], "nima": 1047, "nima10khodaveisi": 1047, "ninertia": 97, "ningchi": 1038, "ninh": 191, "ninja": [373, 1025], "nip": [127, 372, 515, 541, 566, 641, 1001], "nipal": [410, 482, 483], "nipy_spectr": [51, 74, 80, 81, 84, 85, 93, 94], "nirvan": [1040, 1044], "nishan": 1042, "nishihara": 1044, "nishu": 1048, "nist": [372, 1001], "nistir": 372, "nit": 375, "nithish": 1050, "nitinramvelraj": 1047, "nitish": 1039, "nitya": 1042, "niuk": 1048, "niyogi": 998, "nizam": 1040, "nizhibitski": 1033, "nk": 696, "nkish": 1043, "nkmean": 79, "nl": [52, 381], "nl1_ratio": 203, "nlasso": 197, "nlathia": 1038, "nlearn": 305, "nlog": 176, "nlogn": 692, "nlp": [370, 412, 415, 839, 843, 999, 1025], "nls_max_it": 1037, "nltk": [415, 1019, 1020], "nm": 362, "nmcd": 111, "nmd": 234, "nmean": 124, "nmf": [2, 11, 54, 104, 381, 415, 535, 538, 544, 547, 1026, 1027, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "nmf_estim": 120, "nmi": [72, 407, 717, 736, 737, 757], "nmixtur": 79, "nmle": 111, "nmse": [44, 284], "nmslib": 289, "nmslib_": 289, "nmslibtransform": 289, "nn": [247, 415, 695], "nn_candid": 281, "nn_compon": [242, 243], "nn_sampl": [242, 281], "nndsvd": [412, 538, 540, 547, 1041, 1044], "nndsvda": [54, 412, 538, 540, 547, 1041, 1044], "nndsvdar": [412, 538, 540, 547, 1041], "nneq": 699, "nnl": [207, 657], "nnlnr": [1047, 1048], "nnmf": [415, 1026, 1027, 1032], "nntp": [350, 370], "nnz": [198, 351, 370, 699], "no_chang": 901, "no_interact": [561, 562, 1047], "no_mathjax": 375, "no_structur": [79, 95], "no_valid": [923, 989], "no_weight": 224, "no_weights_handl": 224, "noa": [1043, 1049], "noah": 997, "noc": 51, "noced": 658, "nodar": 1045, "node": [2, 51, 76, 143, 147, 197, 318, 324, 325, 354, 357, 383, 384, 407, 409, 412, 414, 440, 441, 444, 462, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 650, 654, 656, 682, 683, 692, 844, 845, 912, 913, 914, 915, 916, 918, 954, 1004, 1006, 1007, 1008, 1017, 1035, 1036, 1037, 1038, 1039, 1041, 1044, 1045, 1046, 1047, 1049], "node_count": [318, 354, 357, 912, 913, 914, 915], "node_depth": 357, "node_id": [357, 916, 918], "node_idx": 357, "node_ind": 357, "node_index": 357, "node_position_model": 51, "noel": [0, 397, 1032, 1033, 1034, 1035, 1036, 1044], "noelano": 1044, "nof": 150, "nogil": 376, "noinfo": 248, "noir": 315, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 82, 85, 87, 88, 94, 95, 100, 107, 116, 120, 121, 123, 125, 127, 135, 137, 146, 151, 152, 169, 170, 171, 175, 179, 183, 193, 195, 196, 197, 201, 202, 207, 209, 210, 213, 214, 215, 216, 228, 234, 236, 238, 240, 241, 244, 269, 277, 282, 284, 301, 304, 305, 311, 316, 319, 325, 345, 356, 358, 371, 377, 380, 405, 407, 412, 414, 416, 417, 418, 443, 445, 451, 511, 513, 514, 515, 516, 517, 518, 522, 524, 525, 530, 532, 534, 541, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 621, 622, 624, 625, 644, 645, 649, 650, 651, 653, 654, 655, 656, 663, 664, 665, 671, 679, 685, 686, 692, 881, 893, 899, 922, 994, 996, 997, 998, 1001, 1004, 1014, 1022, 1033, 1038, 1043, 1045, 1046], "noise_coef": 87, "noise_kernel": 175, "noise_level": [170, 175, 176, 612, 625], "noise_level_bound": [175, 176, 625], "noise_level_grid": 176, "noise_std": 177, "noise_vari": [199, 532, 656, 997, 1046], "noise_variance_": [120, 199, 532, 534, 541, 656, 1039, 1046], "noise_variance_init": 532, "noiseless": [123, 999], "noisi": [44, 69, 82, 88, 95, 121, 134, 164, 170, 176, 197, 210, 213, 234, 241, 260, 270, 276, 278, 279, 282, 314, 356, 358, 407, 415, 417, 418, 443, 445, 449, 521, 524, 948, 996, 998, 1004, 1016], "noisier": 998, "noisili": 187, "noisy_circl": [79, 95], "noisy_moon": [79, 95], "noiz": 115, "nolan": 1049, "noll": [211, 229], "nomenclatur": [997, 1038], "nomin": [187, 369, 389, 390, 414, 415, 581, 582, 716, 1011, 1021], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 82, 90, 95, 103, 107, 111, 113, 121, 122, 123, 125, 136, 143, 151, 152, 154, 164, 165, 167, 174, 176, 182, 183, 185, 186, 187, 188, 189, 192, 193, 197, 198, 200, 202, 205, 206, 208, 209, 210, 212, 213, 217, 225, 226, 227, 229, 234, 235, 239, 240, 241, 242, 244, 248, 254, 256, 260, 261, 262, 263, 264, 269, 278, 286, 289, 293, 295, 307, 309, 311, 313, 314, 319, 320, 321, 322, 324, 325, 332, 334, 336, 341, 342, 343, 346, 347, 350, 351, 352, 357, 358, 362, 363, 367, 370, 371, 375, 376, 377, 380, 381, 383, 384, 387, 389, 390, 401, 405, 407, 408, 411, 413, 414, 415, 416, 417, 419, 436, 440, 444, 445, 449, 451, 455, 461, 462, 463, 464, 466, 467, 487, 496, 497, 503, 504, 508, 526, 532, 535, 536, 538, 540, 544, 547, 549, 551, 552, 553, 557, 558, 559, 560, 561, 562, 564, 565, 566, 572, 588, 589, 591, 592, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 631, 635, 638, 643, 650, 652, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 672, 676, 677, 678, 685, 686, 687, 688, 689, 690, 691, 692, 694, 698, 699, 702, 706, 707, 712, 715, 717, 719, 720, 726, 727, 728, 735, 737, 739, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 778, 782, 785, 788, 789, 790, 791, 794, 797, 798, 800, 801, 805, 807, 808, 809, 810, 812, 818, 826, 830, 833, 852, 854, 855, 856, 859, 864, 865, 867, 868, 869, 872, 876, 877, 878, 879, 880, 881, 883, 884, 891, 892, 893, 894, 895, 897, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 929, 930, 931, 946, 948, 952, 955, 963, 990, 991, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1022, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "non_determinist": [377, 923, 1046], "non_neg": [582, 1039], "non_negative_factor": [2, 1041, 1043, 1044, 1045, 1049], "non_nest": 274, "non_nested_scor": 274, "non_nested_scores_lin": 274, "non_noisy_label": 324, "non_outliers_mask": 309, "non_zero": [46, 51], "nonblasdotwarn": 1044, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 85, 87, 88, 89, 95, 122, 125, 129, 138, 142, 143, 145, 148, 149, 161, 168, 171, 177, 178, 189, 193, 211, 212, 219, 222, 229, 231, 244, 245, 246, 248, 262, 264, 269, 270, 281, 294, 296, 300, 313, 316, 320, 321, 329, 332, 337, 339, 340, 343, 344, 345, 350, 351, 370, 371, 372, 375, 377, 382, 384, 389, 398, 401, 407, 411, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 714, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 734, 735, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 923, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 940, 942, 947, 948, 951, 952, 954, 955, 959, 960, 963, 966, 969, 971, 974, 975, 981, 984, 985, 987, 989, 990, 997, 1001, 1011, 1014, 1017, 1027, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "nonecheck": 376, "nonetheless": [389, 1001], "nonexist": 632, "nonflavanoid": 372, "nonlinear": [284, 321, 644, 688, 689, 693, 696, 870, 997, 998, 1006, 1011], "nonmetr": [690, 694, 998], "nonneg": [407, 412, 452, 538, 540, 547, 881], "nonner": 1043, "nono": 395, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 395, "nonoisomapisomapspectralembeddingspectr": 395, "nonojustlookingjust": 395, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 395, "nonolinearsvclinear": 395, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 395, "nonopredict": 395, "nonopredictingstructurepredict": 395, "nonosvcsvcensembleclassifiersensembl": 395, "nonosvr": 395, "nonotoughlucktough": 395, "nonoverlap": 372, "nonparametr": [416, 417, 607, 608], "nonzero": [55, 57, 129, 210, 242, 273, 352, 404, 418, 443, 523, 524, 531, 537, 542, 548, 588, 591, 685, 686, 699, 846, 847, 850, 852, 854, 855, 1001], "nonzero_coef": 997, "noptic": 98, "noptimum": 176, "noqa": [100, 126, 146, 168, 181, 182, 187, 231, 233, 280, 281, 320, 350, 379, 579, 580, 627, 803, 804, 990, 1041], "nor": [146, 272, 350, 358, 362, 380, 387, 405, 415, 436, 445, 594, 934, 1005, 1017, 1043], "norbert": [0, 365, 1034, 1044, 1045, 1046], "nordbi": 1049, "nore\u00f1a": 1045, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 87, 123, 173, 176, 193, 197, 198, 203, 234, 254, 255, 256, 258, 260, 266, 270, 294, 309, 339, 351, 381, 384, 389, 407, 415, 416, 441, 442, 446, 458, 459, 463, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 488, 531, 534, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 589, 590, 591, 597, 643, 646, 647, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 672, 674, 676, 678, 681, 684, 685, 686, 690, 692, 693, 694, 770, 841, 876, 891, 904, 906, 909, 982, 983, 994, 997, 999, 1001, 1011, 1015, 1035, 1037, 1039, 1043], "norm1": 463, "norm2": 463, "norm_diag": 527, "norm_laplacian": 695, "norm_ord": [597, 1039], "norm_y_weight": 1044, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 80, 90, 94, 95, 99, 105, 107, 109, 110, 111, 115, 116, 121, 134, 135, 137, 140, 145, 146, 149, 150, 151, 163, 173, 176, 177, 182, 183, 185, 186, 192, 193, 194, 195, 196, 197, 202, 205, 207, 209, 213, 214, 215, 217, 225, 229, 234, 248, 254, 259, 260, 262, 263, 266, 269, 275, 294, 295, 298, 308, 310, 314, 319, 322, 325, 326, 331, 339, 351, 352, 358, 367, 370, 371, 372, 375, 380, 384, 388, 389, 403, 404, 405, 407, 408, 410, 413, 414, 415, 419, 439, 448, 450, 451, 452, 461, 463, 464, 474, 481, 482, 483, 488, 496, 512, 515, 519, 526, 527, 533, 536, 541, 542, 544, 548, 549, 552, 553, 554, 557, 558, 559, 560, 562, 563, 564, 565, 566, 579, 580, 582, 588, 589, 590, 591, 611, 625, 627, 639, 658, 659, 669, 672, 676, 680, 687, 691, 695, 697, 703, 704, 706, 718, 724, 726, 734, 736, 741, 745, 749, 750, 752, 755, 756, 757, 761, 770, 794, 795, 796, 803, 804, 830, 832, 841, 843, 849, 850, 853, 864, 865, 868, 869, 872, 874, 877, 878, 879, 880, 881, 882, 884, 889, 890, 892, 893, 894, 895, 899, 900, 912, 913, 914, 915, 947, 948, 952, 976, 977, 982, 983, 993, 995, 997, 998, 999, 1000, 1003, 1007, 1012, 1014, 1016, 1017, 1022, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "normalis": [186, 611, 788], "normalization_": [639, 993], "normalize_compon": [1040, 1042], "normalize_i": [175, 179, 417, 611, 1046], "normalized_discounted_cumulative_gain": 756, "normalized_mutual_info_scor": [2, 72, 407, 736, 755, 795, 1001, 1040, 1046], "normalized_stress": [231, 690, 694, 998, 1047], "normalized_weight": 195, "norms_squar": 686, "north": [372, 407], "northern": 315, "northrop": 51, "northwestern": 658, "norvan": 1042, "nose": [372, 1035, 1039], "nosetest": 1034, "not_memb": 186, "notabl": [204, 245, 309, 369, 389, 406, 496, 728, 877, 998, 1000, 1004, 1036, 1039, 1046], "notarstefano": [1040, 1041], "notat": [150, 389, 408, 412, 415, 590, 712, 997, 1001, 1041, 1048], "notch": 1025, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 86, 99, 103, 104, 111, 113, 115, 116, 118, 123, 137, 138, 140, 142, 146, 147, 151, 168, 170, 177, 181, 185, 186, 187, 188, 189, 191, 199, 201, 205, 208, 211, 212, 213, 215, 219, 225, 227, 229, 231, 232, 233, 235, 238, 239, 241, 243, 244, 245, 246, 248, 255, 263, 264, 265, 269, 272, 275, 277, 283, 288, 289, 291, 295, 296, 305, 309, 310, 313, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 333, 339, 343, 350, 357, 362, 363, 369, 372, 373, 375, 376, 377, 379, 381, 382, 387, 388, 389, 393, 398, 401, 402, 405, 407, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 486, 489, 496, 498, 509, 515, 519, 527, 530, 533, 534, 536, 538, 539, 540, 541, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 597, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 632, 633, 635, 636, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 699, 700, 707, 708, 713, 715, 720, 721, 722, 723, 724, 728, 729, 730, 732, 734, 738, 741, 746, 754, 755, 758, 763, 764, 768, 770, 774, 778, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 920, 921, 923, 926, 936, 938, 947, 948, 960, 963, 975, 984, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1027, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 376, 377, 381, 408, 467, 902, 1017, 1019, 1020, 1021, 1043, 1046], "notes_neighbor": 1032, "notfittederror": [2, 132, 389, 853, 984, 1036, 1038, 1041, 1042, 1048, 1049], "noth": [57, 102, 326, 350, 351, 380, 542, 714, 867, 876, 931, 1011], "nothman": [0, 390, 396, 415, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "notic": [46, 52, 62, 63, 70, 86, 90, 111, 137, 139, 140, 146, 149, 167, 193, 197, 238, 251, 266, 267, 269, 270, 272, 278, 279, 289, 314, 343, 350, 351, 352, 358, 377, 380, 390, 406, 411, 414, 496, 541, 563, 990, 1000, 1001, 1007, 1029, 1045], "notif": 379, "notifi": [2, 572, 573, 574, 1030, 1042], "notimplementederror": [553, 554, 891, 1039, 1049], "notin": 407, "notion": [278, 343, 351, 364, 387, 407, 412, 414, 997, 1001], "notmatthancock": [1040, 1042], "noto": 1045, "notplancha": 1050, "noun": 389, "nouri": [362, 1033, 1035], "novak": 1035, "novarti": 51, "novaya": [1042, 1045], "novel": [225, 295, 338, 358, 405, 990], "novelti": [183, 225, 238, 248, 290, 296, 338, 850, 1022, 1023, 1026, 1027, 1032, 1040], "novemb": [168, 211, 229, 372, 379, 1037, 1038, 1040], "novic": 1034, "now": [43, 44, 46, 52, 55, 58, 86, 90, 103, 116, 125, 134, 135, 139, 141, 142, 143, 146, 147, 154, 157, 168, 170, 175, 176, 177, 182, 185, 186, 187, 188, 191, 193, 195, 198, 199, 201, 212, 213, 215, 235, 243, 245, 263, 265, 269, 272, 280, 281, 282, 283, 286, 292, 314, 319, 320, 322, 323, 324, 325, 326, 330, 339, 350, 351, 352, 358, 362, 364, 370, 375, 376, 377, 381, 387, 388, 389, 393, 404, 407, 411, 412, 414, 415, 419, 427, 493, 508, 509, 512, 536, 549, 579, 580, 582, 627, 630, 649, 653, 658, 663, 684, 726, 756, 797, 798, 803, 804, 836, 851, 863, 864, 975, 991, 997, 1001, 1007, 1010, 1011, 1016, 1017, 1021, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "nowadai": 375, "nozawa": [1047, 1048], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 161, 163, 164, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 288, 289, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 307, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 362, 369, 370, 375, 377, 380, 381, 384, 387, 389, 398, 404, 407, 408, 411, 412, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 484, 493, 496, 497, 500, 504, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 563, 564, 565, 566, 569, 570, 581, 582, 585, 586, 588, 589, 593, 594, 597, 601, 604, 606, 609, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 636, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 687, 691, 692, 694, 695, 699, 702, 703, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 743, 744, 748, 753, 754, 755, 756, 763, 769, 773, 778, 781, 782, 783, 784, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 826, 827, 828, 830, 831, 832, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 854, 855, 856, 860, 861, 868, 869, 871, 872, 877, 878, 879, 880, 881, 883, 884, 885, 892, 893, 896, 897, 898, 899, 900, 901, 904, 906, 907, 909, 910, 912, 913, 914, 915, 921, 926, 927, 928, 929, 930, 931, 933, 935, 936, 946, 947, 948, 954, 955, 962, 963, 965, 969, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 990, 991, 996, 997, 999, 1001, 1002, 1004, 1005, 1007, 1011, 1012, 1013, 1015, 1016, 1017, 1033, 1035, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "npach": [1047, 1048], "npo": 234, "npolynomi": 43, "nprior": 254, "npropag": 79, "nqy18": 415, "nreceiv": 278, "nrow": [43, 44, 66, 68, 70, 90, 99, 105, 120, 149, 179, 187, 211, 213, 219, 229, 231, 232, 235, 248, 263, 271, 272, 289, 311, 313, 314, 323, 329, 345, 346, 371], "nsampl": [377, 797, 798], "nswdemand": 149, "nswprice": 149, "nt": 55, "nt_uri": 55, "ntest": 298, "ntf": 699, "nth": [276, 707, 1001], "nthe": [187, 267, 357], "ntime": [50, 280], "nto": [217, 278], "ntol": 168, "ntrain": 83, "ntree": 43, "ntrue": [45, 328, 329], "ntt": 699, "ntu": [191, 369, 486, 508, 509, 658], "ntwo": 371, "nu": [2, 46, 48, 50, 179, 225, 238, 338, 362, 414, 417, 619, 677, 906, 907, 908, 1007, 1015, 1016, 1043, 1047], "nuanc": [204, 389], "nuc": 286, "nuclear": [168, 372], "nuclei": [168, 372], "nudge_dataset": 307, "nuff": 1039, "nugmanov": [1040, 1041], "nuisanc": 417, "nukariya": [1044, 1045], "null": [79, 103, 186, 187, 188, 263, 269, 275, 407, 411, 496, 648, 669, 680, 704, 731, 757, 795, 829, 997, 998, 1001, 1016, 1042], "null_count": 52, "nullabl": [627, 628, 629, 630, 1043, 1047], "nullformatt": [231, 233, 236, 289], "nullloc": 294, "num": [43, 51, 103, 168, 170, 175, 176, 177, 187, 188, 213, 276, 277, 322, 324, 325, 414, 496, 632], "num_col": 252, "num_cor": 381, "num_depend": 263, "num_featur": [999, 1047], "num_linear_processor": 154, "num_missing_cel": 149, "num_pip": 252, "num_preprocess": 463, "num_proc": [240, 319], "num_sampl": [800, 814, 1047], "num_selector": 154, "num_sent": 102, "num_thread": 289, "num_tree_processor": 154, "num_trial": 274, "numba": [289, 1021], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 94, 95, 96, 100, 102, 103, 104, 105, 107, 113, 115, 116, 118, 120, 122, 124, 125, 127, 134, 135, 137, 140, 142, 144, 145, 146, 147, 150, 154, 156, 164, 165, 166, 168, 178, 179, 182, 183, 186, 187, 191, 197, 201, 210, 211, 212, 213, 218, 219, 225, 226, 227, 228, 229, 231, 238, 242, 246, 248, 249, 254, 255, 257, 259, 260, 262, 263, 264, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 282, 286, 289, 291, 295, 296, 309, 311, 312, 315, 318, 319, 320, 321, 322, 323, 324, 326, 332, 339, 344, 346, 351, 352, 354, 357, 358, 363, 364, 367, 369, 370, 371, 372, 373, 375, 378, 379, 381, 382, 383, 384, 387, 388, 389, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 430, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 582, 583, 584, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 707, 712, 713, 714, 716, 718, 720, 724, 728, 729, 730, 731, 734, 735, 738, 740, 752, 755, 774, 778, 781, 782, 783, 784, 785, 786, 787, 788, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 930, 931, 934, 947, 948, 951, 952, 969, 971, 974, 975, 990, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 99, 103, 107, 143, 154, 168, 175, 178, 187, 188, 201, 211, 229, 248, 250, 252, 276, 299, 315, 321, 325, 352, 369, 370, 372, 378, 380, 381, 387, 388, 389, 403, 407, 409, 414, 415, 416, 417, 419, 420, 439, 442, 446, 458, 470, 471, 474, 477, 488, 489, 490, 496, 500, 501, 502, 504, 505, 510, 531, 533, 535, 540, 541, 547, 561, 562, 567, 581, 590, 611, 617, 620, 627, 630, 632, 633, 646, 652, 654, 672, 687, 690, 694, 714, 778, 788, 794, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 839, 840, 841, 842, 843, 861, 862, 867, 872, 877, 878, 885, 916, 917, 918, 930, 931, 947, 948, 990, 991, 997, 998, 1002, 1009, 1011, 1012, 1017, 1024, 1025, 1032, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "numeric_featur": [103, 322], "numeric_onli": 187, "numeric_preprocessor": 250, "numeric_transform": [103, 322], "numerical_column": [186, 188, 466], "numerical_columns_subset": 143, "numerical_featur": [187, 315], "numerical_pip": 188, "numerical_transform": 103, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 161, 163, 164, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 288, 289, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 307, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 362, 368, 369, 370, 373, 375, 376, 377, 378, 381, 383, 384, 387, 388, 389, 393, 398, 400, 401, 403, 404, 407, 408, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 484, 489, 493, 494, 496, 503, 506, 508, 509, 521, 527, 531, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 569, 570, 581, 582, 585, 586, 588, 589, 591, 601, 604, 618, 627, 628, 629, 630, 631, 632, 633, 643, 646, 647, 649, 652, 653, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 678, 684, 687, 688, 691, 692, 693, 694, 695, 699, 702, 703, 706, 707, 709, 712, 714, 726, 727, 729, 730, 732, 734, 735, 738, 739, 754, 756, 773, 779, 781, 782, 783, 784, 787, 788, 789, 794, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 827, 830, 831, 832, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 906, 907, 909, 910, 912, 926, 927, 928, 929, 933, 935, 945, 946, 947, 948, 952, 954, 955, 962, 963, 969, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 990, 991, 996, 997, 999, 1001, 1002, 1004, 1007, 1011, 1013, 1016, 1017, 1019, 1021, 1032, 1035, 1036, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "numpydoc": [375, 389, 393, 400], "nune": 1033, "nuniformli": 150, "nuniqu": 315, "nurseit": 1049, "nusvc": [2, 362, 436, 907, 1002, 1016, 1032, 1033, 1034, 1037, 1040, 1042, 1043, 1044, 1046], "nusvr": [2, 46, 362, 910, 1016, 1034, 1040, 1042, 1043, 1044, 1046, 1047], "nutshel": 999, "nv": 51, "nvidia": [0, 387], "nvirginica": 278, "nwanna": 1047, "nweight": 156, "nwith": [72, 90, 94, 167, 351], "nx": [50, 302, 370, 498], "nxorabl": 1042, "ny": [50, 52, 268, 302, 370, 372, 498, 991, 1013], "nyc": [1019, 1025], "nymark": 1047, "nystroem": [2, 43, 181, 225, 238, 243, 367, 640, 641, 642, 677, 870, 909, 910, 1027, 1033, 1039, 1042, 1044, 1045, 1046], "nystroem_approx_svm": 243, "nystroem_scor": 243, "nystroem_tim": 243, "nystrom": [879, 1041, 1042], "nystr\u00f6m": [43, 993], "nyu": [0, 853], "nz": 530, "nzw": 1040, "n\u00e1jera": [1036, 1037, 1038, 1039], "n\u00e1pole": 1045, "o": [0, 55, 57, 64, 66, 73, 82, 88, 93, 94, 96, 97, 113, 115, 122, 151, 168, 178, 199, 205, 209, 211, 226, 244, 254, 263, 269, 271, 278, 309, 310, 314, 319, 322, 325, 332, 343, 354, 362, 370, 372, 375, 383, 393, 407, 409, 412, 414, 418, 420, 443, 446, 447, 449, 472, 474, 499, 534, 604, 627, 666, 667, 692, 832, 860, 875, 916, 969, 993, 995, 997, 998, 1001, 1002, 1004, 1005, 1015, 1016, 1017, 1032, 1035, 1038, 1040, 1041, 1044, 1045, 1047, 1048, 1049], "oa": [2, 49, 65, 70, 108, 112, 113, 127, 148, 183, 298, 300, 409, 468, 469, 472, 473, 475, 476, 512, 549, 800, 995, 1022], "oa_ms": 110, "oa_shrinkag": 110, "oak": 315, "oarc": 997, "ob2019": 1001, "obaja": 1036, "obatin": 314, "obei": [389, 999], "obj": [245, 401, 567, 568, 938, 957, 959, 960, 961, 966], "obj_func": [610, 611], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 83, 95, 99, 102, 103, 123, 126, 132, 149, 154, 159, 167, 175, 183, 187, 197, 211, 227, 229, 237, 245, 249, 251, 252, 263, 267, 276, 278, 279, 281, 302, 315, 321, 322, 324, 325, 328, 351, 352, 358, 368, 369, 370, 375, 376, 378, 380, 381, 382, 384, 388, 389, 390, 398, 401, 407, 408, 409, 412, 415, 416, 417, 421, 423, 428, 430, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 711, 718, 732, 733, 742, 758, 759, 781, 782, 789, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 919, 930, 931, 932, 933, 934, 937, 938, 942, 944, 953, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 985, 986, 988, 997, 998, 999, 1000, 1004, 1007, 1008, 1011, 1014, 1015, 1016, 1020, 1021, 1022, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "object_nam": [245, 957, 960], "obozinski": 412, "obscur": [1008, 1048], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 86, 95, 103, 109, 111, 112, 113, 121, 122, 125, 126, 127, 134, 137, 138, 140, 141, 146, 149, 150, 153, 168, 170, 173, 175, 176, 177, 179, 186, 187, 188, 193, 194, 204, 207, 209, 211, 212, 213, 215, 225, 229, 235, 236, 241, 242, 248, 263, 265, 269, 271, 272, 276, 282, 283, 289, 292, 295, 302, 314, 324, 326, 331, 338, 339, 343, 344, 350, 351, 352, 356, 370, 372, 389, 393, 405, 407, 409, 410, 411, 412, 413, 416, 417, 440, 442, 444, 445, 446, 448, 458, 459, 468, 469, 470, 471, 472, 473, 474, 475, 524, 532, 551, 552, 563, 610, 611, 646, 652, 657, 701, 716, 718, 758, 821, 842, 850, 883, 885, 997, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1024, 1033, 1045, 1046, 1047, 1048], "observatori": 175, "obsolet": [1032, 1048], "obstruct": 1039, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 88, 90, 91, 103, 106, 107, 125, 127, 134, 143, 146, 147, 152, 159, 168, 172, 174, 186, 187, 197, 208, 211, 213, 215, 225, 235, 248, 254, 255, 256, 263, 265, 269, 270, 271, 275, 278, 282, 292, 314, 321, 337, 343, 351, 352, 357, 358, 370, 372, 377, 389, 401, 405, 406, 407, 409, 410, 412, 414, 415, 416, 417, 436, 441, 468, 496, 532, 533, 555, 556, 557, 558, 559, 560, 563, 564, 565, 593, 606, 614, 645, 659, 661, 666, 668, 672, 674, 676, 677, 687, 708, 712, 726, 739, 756, 793, 806, 823, 829, 832, 833, 836, 850, 861, 881, 893, 906, 909, 912, 913, 948, 990, 991, 993, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1015, 1016, 1038, 1040, 1043, 1045, 1046, 1047, 1048, 1049], "obviat": 993, "obviou": [186, 343, 358, 362, 375, 404, 412], "obvious": [182, 362], "oc": 1047, "occas": 375, "occasion": [390, 727, 1041], "occup": [186, 309, 325, 496], "occupation_cler": 186, "occupation_manag": 186, "occupation_oth": 186, "occupation_profession": 186, "occupation_sal": 186, "occupation_servic": 186, "occupi": [407, 1001], "occur": [54, 102, 144, 211, 215, 229, 346, 358, 375, 383, 390, 404, 407, 409, 411, 415, 443, 508, 509, 572, 581, 590, 627, 671, 798, 800, 803, 804, 806, 814, 823, 826, 827, 828, 831, 874, 935, 1001, 1003, 1011, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "occurr": [2, 211, 315, 351, 352, 370, 375, 379, 407, 415, 569, 570, 581, 589, 590, 617, 627, 628, 629, 630, 783, 839, 867, 1003, 1033, 1038], "ocean": 302, "ocsvm": [48, 225], "oct": [692, 769, 998, 1004], "octob": [110, 370, 1032, 1039, 1045, 1046, 1048], "od280": 372, "od315": 372, "odd": [272, 414, 514, 712, 1001, 1039, 1040], "ofcategoriesknownnumb": 395, "off": [44, 51, 53, 72, 74, 75, 81, 85, 86, 109, 113, 115, 120, 140, 149, 167, 168, 183, 204, 215, 232, 243, 247, 261, 262, 268, 270, 271, 272, 282, 286, 309, 326, 329, 331, 333, 339, 348, 350, 370, 375, 377, 389, 406, 407, 409, 416, 441, 496, 553, 554, 559, 560, 588, 591, 634, 656, 658, 692, 715, 797, 798, 800, 803, 804, 814, 816, 822, 827, 865, 884, 952, 1000, 1006, 1016, 1021, 1022, 1032, 1036, 1037, 1039], "offer": [43, 140, 200, 377, 383, 387, 388, 389, 393, 401, 411, 412, 414, 415, 990, 991, 1002, 1005, 1017, 1020, 1021, 1025, 1038, 1050], "offic": 1025, "offici": [370, 377, 387, 389, 393, 493, 497, 1020, 1040, 1041, 1044], "offlin": [263, 362, 375], "offset": [137, 191, 387, 409, 412, 468, 508, 509, 563, 632, 633, 641, 642, 644, 645, 677, 728, 775, 777, 850, 908, 1001, 1015, 1040], "offset_": [468, 563, 677, 850, 908, 1040], "offset_init": 677, "offsetbox": 232, "offsetimag": 232, "ofmulticlass": 1016, "often": [43, 57, 61, 62, 64, 69, 102, 106, 140, 149, 152, 174, 181, 186, 187, 212, 229, 232, 248, 256, 271, 274, 309, 314, 339, 348, 350, 351, 352, 362, 363, 369, 370, 372, 375, 377, 380, 383, 387, 388, 389, 392, 395, 401, 405, 407, 408, 409, 411, 412, 414, 415, 417, 419, 467, 521, 524, 533, 536, 632, 646, 647, 652, 653, 660, 661, 662, 663, 672, 674, 687, 728, 874, 882, 890, 902, 990, 991, 993, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1011, 1014, 1015, 1017, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "og": 415, "ogbonna": 1045, "ogordon100": 1045, "ogrid": 53, "ogu": 415, "ogura": 1047, "oh": [877, 1042], "ohad": 1046, "ohayon": [1040, 1041, 1048], "ohio": 370, "ohno": 405, "oj_lappi": 1044, "oja": [419, 533], "ojala": [275, 411, 829], "ojeda": 1046, "ok": [49, 375, 1007], "okal": 1036, "okbalefthand": 1038, "okhlopkov": [1038, 1039], "okon": 1046, "okroshiashvili": 1045, "ol": [193, 202, 207, 208, 209, 217, 228, 321, 656, 997], "ol2001": 991, "olatunji": 1047, "old": [229, 375, 379, 381, 407, 467, 536, 646, 652, 902, 998, 1021, 1032, 1037, 1038, 1040, 1045, 1046, 1047], "olden": 1040, "older": [245, 374, 379, 401, 463, 1024, 1030, 1035, 1042, 1044], "oldest": 496, "oldid": 1001, "oldja": 1044, "oleg": 1042, "oleggio": 1036, "olegovich": 1039, "oleh": [1044, 1046], "oleksandr": [1040, 1041, 1042, 1043, 1046], "oleksii": 1049, "olemiss": 679, "olga": [628, 991], "oli": 1039, "oliblum90": [1039, 1040], "olicairn": 1043, "olimpio": 1040, "oliph": 1032, "oliv": [1040, 1041, 1043, 1044, 1045], "oliveira": [1038, 1040, 1042, 1046], "olivetti": [2, 120, 368, 412, 495, 1027, 1032, 1040], "olivetti_fac": 495, "olivi": [0, 390, 396, 900, 1014, 1019, 1021, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "oll": 1047, "olr": 193, "olsen": 1039, "olshen": [912, 913, 1017], "olson": 1038, "olszewski": 1045, "olvi": [168, 372], "om": 1039, "omar": [0, 396, 1042, 1047, 1048, 1049, 1050], "omarmanzoor": 1048, "omega": [346, 410, 995], "omega_": 995, "omega_k": [410, 995], "omer": 1037, "omit": [141, 185, 186, 333, 380, 420, 474, 534, 666, 668, 676, 807, 809, 832, 833, 836, 839, 840, 841, 842, 843, 861, 999, 1006], "omohundro": 1004, "omp": [2, 123, 129, 210, 412, 531, 537, 542, 548, 664, 665, 685, 686, 1023, 1027, 1032, 1040], "omp_cv": 210, "omp_get_max_thread": 376, "omp_num_thread": 363, "omtcyfz": 1039, "onc": [2, 43, 47, 83, 165, 168, 170, 175, 204, 232, 245, 248, 263, 267, 270, 282, 283, 286, 289, 315, 318, 322, 350, 352, 356, 357, 358, 362, 364, 369, 370, 373, 375, 379, 380, 381, 382, 383, 388, 389, 390, 401, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 448, 450, 452, 471, 508, 509, 538, 544, 551, 559, 560, 590, 591, 597, 611, 619, 627, 647, 651, 653, 655, 661, 663, 665, 666, 667, 668, 676, 677, 678, 697, 712, 716, 718, 736, 781, 801, 805, 808, 818, 822, 839, 840, 841, 842, 843, 916, 997, 998, 1004, 1011, 1015, 1016, 1017, 1029, 1032, 1040, 1042, 1043, 1044, 1045, 1049], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 81, 86, 88, 90, 91, 93, 94, 97, 99, 103, 112, 120, 123, 125, 126, 129, 139, 140, 144, 146, 149, 150, 154, 157, 167, 168, 170, 177, 178, 181, 185, 186, 187, 188, 189, 191, 193, 194, 197, 201, 202, 204, 205, 206, 208, 211, 213, 220, 221, 226, 229, 233, 238, 245, 246, 248, 252, 256, 259, 263, 265, 266, 267, 269, 270, 272, 273, 276, 277, 278, 279, 286, 288, 289, 294, 307, 310, 311, 314, 315, 318, 320, 321, 322, 326, 331, 338, 339, 347, 350, 351, 352, 354, 357, 358, 362, 363, 364, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 392, 393, 395, 398, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 459, 461, 463, 468, 473, 486, 487, 489, 490, 492, 493, 494, 495, 496, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 514, 534, 539, 540, 541, 543, 547, 551, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 581, 583, 584, 588, 589, 590, 591, 610, 611, 615, 616, 620, 627, 630, 632, 633, 634, 635, 643, 647, 648, 649, 650, 654, 657, 658, 659, 661, 666, 668, 669, 671, 673, 674, 675, 676, 678, 680, 688, 692, 695, 699, 703, 709, 711, 720, 729, 730, 734, 738, 750, 751, 754, 763, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 790, 791, 792, 793, 796, 797, 798, 799, 800, 803, 804, 806, 807, 808, 810, 812, 814, 818, 819, 822, 823, 825, 827, 828, 830, 831, 832, 833, 834, 836, 837, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 860, 864, 867, 868, 869, 871, 872, 874, 875, 876, 877, 878, 883, 884, 885, 888, 890, 904, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 926, 936, 940, 950, 971, 990, 991, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "one_class": 246, "one_d_arrai": 921, "one_d_label": 924, "one_hot": [315, 326], "one_hot_encod": [43, 143], "one_hot_encoder_": 566, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 143, "one_hot_tim": 43, "one_imag": [415, 584, 587], "one_vs_on": [417, 610, 1002], "one_vs_rest": [610, 1002], "oneclasssvm": [2, 48, 50, 225, 238, 321, 338, 563, 677, 850, 1007, 1015, 1016, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "oned": 393, "onehot": [250, 310, 311, 408, 869, 1011], "onehot_categor": [211, 229], "onehotencod": [2, 43, 103, 139, 143, 154, 186, 187, 211, 229, 240, 248, 250, 252, 315, 319, 321, 324, 325, 326, 369, 389, 408, 414, 465, 466, 566, 581, 582, 867, 871, 872, 875, 878, 885, 991, 1011, 1033, 1036, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "onehotencoderonehotencod": [103, 139, 154, 186, 187, 240, 250, 319, 322], "ones": [43, 50, 70, 78, 88, 103, 112, 144, 150, 170, 191, 197, 215, 216, 238, 241, 245, 269, 277, 280, 296, 313, 329, 348, 362, 363, 375, 383, 389, 407, 409, 411, 414, 422, 425, 429, 449, 532, 566, 581, 610, 611, 618, 644, 645, 658, 659, 670, 676, 703, 796, 802, 807, 818, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 879, 883, 954, 997, 1001, 1006, 1007, 1011, 1016, 1032, 1040, 1041, 1042], "onetoonefeaturemixin": [2, 377, 431], "onevsoneclassifi": [2, 286, 398, 833, 834, 1033, 1035, 1036, 1038, 1039, 1041, 1044, 1046, 1049], "onevsrestclassifi": [2, 66, 204, 226, 246, 276, 278, 286, 398, 405, 658, 659, 832, 834, 904, 1033, 1034, 1036, 1038, 1039, 1045, 1046, 1049, 1050], "ong": 708, "ongari": 1049, "onggo": 1048, "ongo": [324, 376, 390], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 82, 86, 88, 91, 99, 102, 103, 104, 106, 107, 112, 123, 124, 126, 130, 134, 136, 141, 142, 143, 145, 153, 154, 163, 164, 165, 168, 170, 172, 177, 179, 182, 185, 186, 187, 191, 197, 201, 208, 211, 212, 214, 217, 219, 220, 229, 231, 232, 238, 240, 242, 244, 245, 249, 252, 254, 255, 256, 259, 260, 263, 265, 267, 269, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 295, 297, 300, 302, 306, 309, 310, 314, 315, 320, 321, 328, 329, 331, 335, 336, 339, 343, 344, 346, 347, 350, 351, 352, 354, 355, 357, 358, 362, 363, 364, 368, 369, 370, 372, 373, 375, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 427, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 488, 489, 490, 492, 494, 496, 497, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 516, 519, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 707, 709, 713, 726, 729, 730, 734, 736, 737, 738, 741, 743, 756, 758, 760, 774, 778, 779, 780, 781, 783, 784, 787, 788, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 928, 929, 930, 931, 934, 936, 940, 948, 950, 954, 956, 961, 966, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1021, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050], "onlin": [2, 44, 45, 47, 54, 71, 84, 120, 123, 183, 192, 219, 225, 247, 263, 305, 364, 370, 374, 380, 389, 407, 412, 415, 417, 441, 445, 446, 448, 495, 502, 531, 536, 537, 538, 539, 545, 546, 582, 584, 658, 666, 667, 668, 676, 678, 830, 839, 840, 841, 842, 843, 846, 847, 852, 854, 855, 873, 874, 884, 904, 905, 993, 997, 1005, 1007, 1019, 1022, 1023, 1025, 1027, 1032, 1036, 1037, 1039, 1047], "onlineldavb": 536, "only_non_neg": 1045, "only_physical_cor": 140, "onnx": [1020, 1021, 1027], "onnxruntim": 401, "onto": [116, 232, 233, 243, 309, 387, 412, 415, 419, 445, 447, 460, 533, 539, 543, 627, 628, 630, 688, 995, 999, 1004], "onward": [878, 1036, 1050], "onx": 401, "oob": [133, 145, 183, 414, 515, 564, 1021, 1022, 1034, 1045, 1049], "oob_best_it": 145, "oob_color": 145, "oob_decision_function_": [555, 557, 564], "oob_error": 138, "oob_improvement_": [145, 414, 559, 560, 1034], "oob_lin": 145, "oob_prediction_": [556, 558, 565], "oob_scor": [138, 414, 555, 556, 557, 558, 564, 565, 1037, 1039], "oob_score_": [138, 555, 556, 557, 558, 559, 560, 564, 565, 1034, 1048], "oob_scores_": [559, 560, 1048], "op": [379, 426, 658, 659, 666, 667, 668, 676, 677, 678, 861, 862, 904, 1011], "opaqu": 1009, "open": [0, 47, 51, 55, 233, 369, 370, 373, 374, 375, 379, 381, 387, 388, 390, 401, 408, 415, 486, 496, 508, 509, 991, 1020, 1025, 1035, 1039, 1040, 1042, 1048], "open_pric": 51, "openbla": [362, 363, 373, 383, 387, 1045, 1049, 1050], "openblas_num_thread": 363, "opencv": 370, "opengraph": [375, 393, 400], "openml": [2, 43, 52, 103, 154, 175, 186, 211, 219, 227, 229, 239, 263, 283, 286, 288, 306, 368, 393, 496, 1027, 1040, 1042, 1045], "openml1": 52, "openml100": 369, "openmp": [319, 373, 378, 387, 389, 407, 414, 1043, 1045, 1048, 1050], "opentsn": 692, "oper": [2, 19, 53, 168, 178, 183, 239, 244, 251, 261, 263, 264, 266, 271, 276, 352, 362, 363, 372, 373, 375, 378, 381, 387, 389, 390, 393, 401, 403, 406, 411, 412, 414, 415, 416, 420, 441, 447, 460, 467, 474, 481, 482, 483, 484, 504, 533, 534, 541, 551, 552, 566, 572, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 616, 621, 624, 630, 635, 643, 658, 689, 693, 702, 706, 707, 708, 727, 774, 781, 782, 788, 789, 819, 830, 833, 844, 845, 867, 871, 876, 887, 888, 902, 909, 912, 950, 973, 997, 1004, 1011, 1016, 1020, 1022, 1025, 1036, 1038, 1039, 1040, 1042, 1043, 1048], "operand": 417, "operation": [229, 1025], "operatornam": [412, 741, 997, 1001, 1017], "opinion": 390, "opitz": 1001, "opportun": [534, 1015], "oppos": [100, 245, 403, 407, 900, 1004, 1016, 1032, 1050], "opposit": [62, 86, 100, 125, 186, 187, 201, 263, 276, 389, 405, 409, 411, 416, 442, 446, 448, 468, 538, 540, 547, 563, 712, 730, 850, 908, 1032], "opposite_lof_scor": 850, "opt": [373, 377], "opta": 897, "optic": [2, 71, 79, 183, 322, 368, 418, 443, 445, 454, 455, 456, 502, 1022, 1026, 1027, 1041, 1045, 1046, 1047, 1048, 1049, 1050], "optim": [46, 52, 53, 64, 86, 87, 90, 93, 104, 109, 110, 120, 144, 145, 147, 149, 167, 168, 170, 171, 174, 175, 176, 177, 178, 197, 199, 201, 204, 205, 219, 227, 244, 248, 263, 267, 274, 277, 282, 283, 286, 288, 293, 307, 309, 314, 322, 326, 331, 341, 346, 350, 351, 352, 358, 362, 369, 372, 375, 377, 378, 387, 389, 393, 402, 404, 406, 407, 409, 411, 412, 414, 416, 417, 418, 443, 446, 447, 448, 449, 451, 456, 460, 461, 471, 472, 478, 531, 534, 535, 537, 539, 543, 557, 558, 559, 560, 574, 610, 611, 619, 620, 635, 638, 640, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 687, 690, 692, 694, 695, 701, 719, 723, 730, 799, 800, 814, 822, 846, 847, 848, 850, 852, 853, 854, 855, 856, 861, 862, 880, 892, 896, 897, 904, 905, 906, 907, 908, 909, 910, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1015, 1016, 1017, 1020, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048], "optima": 417, "optimis": [377, 407, 1004, 1035, 1045, 1047], "optimist": [52, 201, 274, 350, 358, 707, 997, 1001], "optimum": [94, 176, 186, 191, 263, 282, 406, 412, 471, 997, 1000], "option": [2, 43, 66, 80, 85, 127, 140, 147, 176, 182, 195, 197, 212, 248, 263, 272, 278, 319, 326, 350, 354, 358, 364, 369, 370, 371, 373, 375, 376, 378, 380, 381, 383, 384, 387, 389, 390, 393, 401, 407, 408, 410, 411, 412, 414, 415, 418, 431, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 458, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 689, 690, 692, 694, 695, 711, 713, 717, 729, 730, 735, 736, 737, 757, 758, 759, 764, 766, 767, 771, 774, 775, 776, 777, 778, 781, 783, 784, 787, 792, 793, 795, 799, 801, 802, 803, 804, 806, 807, 809, 818, 822, 823, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 938, 986, 990, 991, 997, 1000, 1001, 1004, 1011, 1014, 1016, 1017, 1021, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "option_context": 229, "ora": 1045, "oracl": [2, 69, 211, 229, 420, 468, 469, 472, 473, 474, 475, 995, 1032], "orallo": 1001, "orang": [46, 48, 86, 111, 118, 121, 122, 127, 134, 148, 149, 151, 177, 182, 199, 201, 208, 221, 246, 257, 263, 300, 319, 325, 1002, 1049], "orazbayev": 1046, "orbit": [350, 351], "order": [2, 43, 53, 58, 61, 64, 81, 88, 97, 98, 104, 109, 129, 142, 143, 147, 149, 161, 175, 185, 186, 189, 191, 201, 205, 211, 212, 217, 225, 229, 233, 242, 245, 248, 252, 256, 264, 267, 269, 276, 288, 307, 309, 314, 315, 316, 320, 321, 326, 346, 350, 352, 358, 362, 363, 370, 375, 376, 377, 379, 380, 381, 384, 389, 393, 394, 398, 401, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 436, 439, 442, 445, 446, 448, 449, 454, 455, 456, 458, 463, 487, 488, 489, 495, 497, 515, 534, 535, 539, 540, 541, 543, 547, 551, 553, 555, 556, 557, 558, 559, 563, 564, 565, 566, 567, 581, 588, 591, 593, 594, 597, 606, 607, 608, 610, 622, 627, 631, 640, 658, 659, 665, 676, 685, 686, 688, 689, 693, 697, 699, 700, 702, 704, 712, 713, 718, 722, 726, 729, 730, 738, 740, 741, 742, 754, 756, 778, 782, 783, 784, 787, 788, 789, 794, 799, 800, 801, 803, 804, 805, 807, 811, 814, 818, 819, 822, 825, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 854, 861, 864, 875, 877, 878, 879, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 930, 931, 936, 948, 964, 969, 991, 997, 998, 1001, 1002, 1004, 1005, 1011, 1014, 1015, 1016, 1017, 1021, 1032, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "order_": [835, 838], "order_centroid": 351, "ordered_sampl": 229, "ordereddict": 138, "ordering_": [98, 407, 449, 454, 455, 456], "ordin": [43, 86, 103, 154, 248, 312, 315, 316, 320, 323, 369, 389, 414, 496, 567, 709, 869, 872, 877, 878, 885, 997, 998, 1011, 1021, 1040, 1046], "ordinal_encod": [143, 248], "ordinal_result": 143, "ordinalencod": [2, 143, 154, 187, 188, 211, 248, 315, 323, 369, 389, 581, 840, 872, 877, 885, 991, 1003, 1011, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049], "ordinalencoderordinalencod": [154, 187, 188, 315], "ordinari": [2, 122, 137, 157, 183, 192, 193, 196, 197, 211, 213, 214, 216, 228, 265, 321, 501, 635, 646, 652, 654, 655, 656, 657, 672, 678, 682, 683, 687, 750, 785, 830, 1015, 1022, 1023, 1027], "ordinarili": [387, 389], "ordowski": 1001, "oregon": 315, "oren": 1040, "oresti": 1041, "orfano": [1045, 1046, 1047, 1048, 1049], "org": [43, 51, 52, 55, 61, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 191, 195, 211, 219, 227, 229, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 288, 306, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 363, 368, 373, 375, 378, 381, 383, 390, 411, 595, 636, 668, 671, 676, 695, 705, 769, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 942, 943, 997, 1001, 1017, 1027, 1040, 1044], "organ": [0, 50, 52, 102, 111, 350, 369, 374, 375, 390, 852, 1020], "ori": 1038, "orient": [66, 120, 186, 231, 309, 389, 916, 998], "orig": [53, 296], "orig_coin": [80, 81], "orig_data_ax": 125, "origin": [43, 44, 53, 58, 59, 80, 81, 84, 89, 91, 106, 107, 120, 122, 123, 126, 129, 149, 152, 164, 165, 168, 170, 172, 174, 175, 181, 182, 187, 191, 199, 201, 215, 231, 232, 233, 235, 236, 242, 243, 244, 248, 260, 263, 266, 272, 282, 292, 297, 307, 310, 314, 324, 329, 343, 350, 352, 358, 363, 370, 372, 374, 375, 377, 379, 380, 387, 389, 401, 404, 407, 408, 411, 412, 414, 415, 417, 418, 419, 420, 432, 436, 440, 442, 443, 444, 445, 446, 448, 449, 458, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 493, 494, 495, 501, 519, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 581, 582, 584, 588, 590, 591, 594, 607, 608, 610, 611, 614, 630, 632, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 692, 696, 701, 728, 763, 769, 799, 801, 802, 807, 809, 818, 822, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 880, 881, 882, 883, 884, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 930, 931, 935, 936, 959, 971, 974, 994, 995, 997, 998, 1000, 1001, 1004, 1007, 1012, 1013, 1014, 1015, 1018, 1020, 1025, 1035, 1036, 1038, 1040, 1042, 1044, 1046, 1048], "original_param": 148, "original_sklearn_vers": [401, 576], "original_space_centroid": 351, "orii": 1034, "orphan": [447, 460, 1032], "orr": [1005, 1015], "orr\u00f9": 1035, "orthogon": [2, 37, 87, 121, 122, 123, 129, 183, 192, 412, 526, 531, 537, 539, 542, 543, 548, 664, 665, 685, 686, 1013, 1022, 1023, 1027, 1032], "orthogonal_mp": [2, 548, 664, 665, 686, 997], "orthogonal_mp_gram": [2, 664, 665, 685, 1046], "orthogonalmatchingpursuit": [2, 210, 665, 685, 686, 997, 1002, 1032, 1034, 1037, 1040, 1045, 1050], "orthogonalmatchingpursuitcv": [2, 210, 398, 664, 1034, 1045, 1049], "orthonorm": [2, 45, 384, 947, 993], "orthotrop": 1004, "ortiz": [1042, 1048], "os": 1050, "osa": 1040, "osaid": 1040, "osborn": [1035, 1036], "oscar": [1035, 1039], "oscil": [151, 187, 216, 407, 439], "oscillatori": [212, 1011], "osei": 1046, "osendorf": [1032, 1033], "oserror": [393, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498], "osindero": [860, 1006], "osman": [1041, 1047], "osx": 362, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 85, 90, 99, 101, 103, 104, 116, 122, 123, 125, 127, 137, 139, 140, 142, 143, 146, 147, 149, 150, 156, 163, 181, 182, 183, 185, 186, 187, 188, 191, 193, 200, 204, 205, 211, 215, 229, 231, 232, 233, 235, 238, 239, 240, 242, 244, 245, 248, 249, 256, 259, 263, 264, 266, 269, 270, 271, 278, 279, 283, 286, 294, 295, 296, 308, 309, 313, 314, 316, 318, 319, 321, 325, 326, 328, 339, 343, 345, 348, 350, 351, 354, 356, 357, 358, 362, 367, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 383, 384, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 436, 442, 443, 445, 446, 447, 448, 449, 451, 456, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 496, 497, 503, 533, 534, 535, 536, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 597, 602, 610, 611, 612, 613, 620, 627, 628, 630, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 692, 696, 699, 704, 718, 763, 774, 778, 785, 792, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 859, 861, 862, 864, 865, 867, 869, 870, 871, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 892, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 942, 943, 957, 989, 990, 991, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1027, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1048, 1049], "other_parti": 263, "other_payment_plan": 263, "other_scor": 380, "otherwis": [50, 89, 95, 136, 179, 182, 195, 213, 219, 263, 302, 343, 346, 358, 364, 377, 379, 381, 389, 398, 407, 409, 411, 415, 417, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 452, 453, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 496, 527, 533, 534, 535, 536, 538, 540, 541, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 597, 602, 610, 611, 614, 631, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 690, 692, 696, 697, 698, 700, 702, 703, 707, 709, 713, 714, 724, 726, 727, 728, 729, 730, 738, 741, 752, 754, 755, 756, 766, 774, 778, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 814, 818, 819, 822, 823, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 859, 861, 862, 864, 867, 868, 869, 870, 871, 875, 876, 883, 884, 885, 886, 889, 890, 891, 893, 894, 895, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 917, 919, 930, 931, 933, 937, 947, 948, 959, 961, 984, 986, 989, 996, 997, 998, 1001, 1004, 1005, 1007, 1008, 1011, 1013, 1015, 1016, 1020, 1025, 1034, 1040, 1041, 1042, 1045, 1048], "ott": 1036, "oudshoorn": [627, 991], "ought": 362, "our": [0, 43, 44, 46, 50, 51, 52, 77, 86, 89, 102, 103, 111, 112, 116, 120, 121, 134, 135, 141, 143, 144, 146, 147, 163, 168, 170, 175, 176, 177, 183, 185, 186, 187, 188, 189, 211, 215, 229, 233, 235, 245, 262, 263, 269, 272, 275, 276, 282, 292, 306, 309, 315, 319, 321, 326, 333, 336, 342, 344, 346, 350, 351, 352, 358, 363, 374, 379, 380, 383, 387, 388, 389, 390, 398, 407, 411, 414, 415, 417, 418, 443, 449, 563, 644, 692, 708, 720, 726, 738, 756, 846, 847, 848, 850, 852, 854, 855, 856, 990, 991, 997, 998, 1001, 1007, 1011, 1014, 1015, 1016, 1021, 1024, 1025, 1039, 1040, 1042, 1043, 1046, 1047, 1049], "our_rand_r": 1041, "oura": [1045, 1046, 1047], "ourselv": 1025, "ouss1508": [1047, 1048], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 83, 88, 102, 103, 127, 133, 138, 140, 141, 147, 148, 161, 183, 185, 186, 188, 197, 211, 213, 215, 219, 229, 248, 254, 256, 263, 267, 269, 272, 277, 281, 282, 286, 288, 314, 315, 321, 331, 333, 335, 336, 339, 346, 350, 361, 370, 372, 373, 375, 377, 378, 379, 381, 387, 389, 395, 401, 407, 410, 412, 414, 415, 417, 423, 433, 434, 435, 441, 442, 444, 445, 446, 448, 453, 471, 481, 482, 483, 484, 499, 515, 516, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 588, 589, 591, 604, 607, 608, 634, 639, 640, 641, 642, 651, 655, 666, 668, 673, 675, 676, 688, 689, 692, 701, 727, 741, 800, 802, 803, 804, 805, 807, 808, 809, 810, 814, 830, 839, 840, 841, 842, 843, 846, 848, 853, 854, 856, 860, 861, 862, 870, 874, 881, 893, 896, 897, 919, 962, 964, 969, 989, 991, 995, 996, 1000, 1001, 1002, 1004, 1009, 1011, 1021, 1022, 1023, 1025, 1027, 1032, 1034, 1036, 1038, 1040, 1041, 1044, 1045, 1048, 1050], "out_activation_": [861, 862], "out_bounds_predict": 213, "out_fil": [916, 1017], "out_of_bound": [241, 635], "out_of_cluster_doc": 57, "outcom": [43, 140, 186, 282, 389, 395, 414, 569, 658, 709, 742, 794, 832, 899, 900, 901, 906, 909, 997, 1001, 1017, 1024, 1036, 1040, 1042], "outdat": 378, "outer": [58, 125, 274, 330, 450, 514, 640, 650, 651, 654, 993, 1033], "outer_cv": [274, 325], "outer_numb": 330, "outermost": 343, "outli": [48, 111, 389, 468, 473, 997, 1007], "outlier": [2, 42, 70, 79, 87, 111, 112, 146, 150, 170, 183, 192, 209, 213, 214, 215, 216, 217, 225, 237, 290, 308, 313, 316, 338, 348, 370, 377, 389, 407, 409, 414, 429, 445, 463, 465, 468, 469, 472, 473, 474, 475, 489, 490, 492, 496, 510, 512, 522, 524, 563, 631, 639, 649, 670, 671, 672, 676, 677, 678, 679, 692, 702, 830, 850, 854, 865, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 889, 890, 891, 892, 893, 894, 895, 907, 908, 910, 1001, 1015, 1016, 1020, 1022, 1023, 1026, 1027, 1032, 1037, 1038, 1040], "outlier_detector": [248, 377, 429], "outlier_label": [854, 1042], "outlier_label_": 854, "outlier_mask": 214, "outlier_plot": 111, "outliermixin": [2, 377, 1049], "outliers_": 649, "outliers_cov": 111, "outliers_fract": 238, "outliers_index": 112, "outliers_offset": 112, "outlin": [99, 142, 375, 377, 389, 390, 392, 407, 990, 1027], "outlying": 1007, "outperform": [109, 116, 149, 154, 286, 314, 387, 411, 414, 451, 461, 1003, 1011], "output": [2, 30, 31, 51, 54, 62, 64, 72, 86, 92, 123, 133, 134, 137, 142, 154, 170, 178, 181, 182, 183, 186, 237, 245, 252, 257, 262, 263, 267, 269, 272, 276, 278, 279, 283, 286, 289, 310, 313, 315, 316, 318, 321, 322, 324, 326, 351, 352, 357, 368, 369, 370, 372, 375, 377, 381, 383, 387, 388, 389, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 423, 428, 431, 436, 440, 441, 442, 444, 445, 446, 448, 449, 451, 458, 459, 461, 462, 463, 464, 465, 466, 467, 481, 482, 483, 484, 487, 490, 492, 493, 494, 495, 496, 497, 503, 505, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 657, 658, 660, 661, 662, 663, 666, 667, 668, 671, 673, 674, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 692, 694, 696, 699, 700, 713, 714, 721, 723, 724, 726, 728, 735, 745, 746, 748, 750, 751, 752, 753, 754, 756, 761, 767, 772, 785, 788, 790, 791, 797, 798, 799, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 825, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 847, 848, 849, 853, 854, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 892, 893, 896, 897, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 930, 931, 933, 936, 948, 949, 956, 957, 959, 967, 987, 990, 991, 993, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1016, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "output_dict": [713, 1040, 1044], "output_distribut": [107, 309, 313, 408, 880, 881, 892, 893, 1011], "output_fil": 486, "output_indices_": [463, 1045], "output_label": 330, "output_label_arrai": 330, "outputcodeclassifi": [2, 286, 398, 832, 833, 1039, 1044, 1048, 1049], "outputs_2d_": [846, 854, 1042], "outreach": 390, "outsid": [45, 48, 57, 142, 212, 213, 241, 252, 401, 415, 445, 635, 883, 1007, 1040], "outward": 309, "outweigh": 1036, "ouvert": [758, 759, 999], "ova": [220, 666, 668, 676, 1015], "ovb": [185, 186], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 83, 88, 89, 104, 105, 106, 120, 137, 140, 144, 149, 150, 163, 167, 170, 178, 181, 185, 187, 196, 204, 206, 211, 219, 229, 238, 248, 263, 269, 270, 272, 274, 276, 277, 278, 281, 294, 302, 304, 305, 311, 321, 322, 324, 328, 350, 351, 362, 363, 364, 370, 371, 374, 375, 376, 377, 381, 388, 389, 403, 405, 407, 408, 411, 412, 413, 414, 415, 419, 445, 448, 463, 471, 509, 533, 534, 536, 537, 538, 539, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 588, 589, 591, 594, 602, 630, 632, 633, 634, 644, 645, 646, 647, 652, 653, 658, 660, 661, 662, 663, 665, 666, 667, 668, 676, 677, 678, 685, 686, 697, 716, 718, 739, 763, 788, 793, 797, 800, 803, 804, 806, 811, 812, 814, 823, 825, 826, 827, 828, 829, 831, 860, 861, 862, 863, 879, 883, 904, 912, 914, 921, 927, 936, 942, 943, 990, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1025, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "overal": [43, 78, 134, 137, 140, 144, 154, 175, 204, 229, 263, 266, 289, 314, 315, 351, 362, 374, 375, 381, 404, 405, 414, 446, 448, 463, 470, 471, 477, 549, 885, 998, 1001, 1017, 1025, 1042], "overallqu": 154, "overcom": [141, 215, 362, 415], "overcomplet": 412, "overconstrain": 149, "overestim": [127, 358, 411], "overfit": [43, 64, 139, 144, 146, 149, 183, 187, 188, 189, 193, 208, 212, 215, 238, 256, 261, 263, 264, 270, 274, 282, 283, 304, 310, 311, 313, 314, 315, 316, 339, 346, 354, 356, 370, 389, 405, 406, 411, 414, 436, 487, 488, 561, 562, 567, 568, 657, 800, 803, 804, 814, 822, 826, 827, 861, 862, 864, 879, 883, 996, 1005, 1007, 1009, 1011, 1017, 1022, 1025, 1035], "overflow": [374, 383, 387, 403, 1024, 1035, 1039, 1040, 1041, 1042, 1043, 1045], "overflowerror": 1042, "overhead": [47, 289, 363, 364, 375, 381, 384, 387, 389, 414, 440, 444, 448, 534, 699, 836, 837, 839, 840, 841, 842, 843, 844, 845, 1003, 1004, 1035, 1040, 1041, 1044], "overlai": [383, 632], "overlaid": 1008, "overlap": [2, 51, 52, 72, 88, 126, 147, 167, 204, 234, 256, 351, 404, 407, 411, 414, 415, 587, 792, 793, 801, 802, 805, 807, 808, 809, 810, 817, 818, 820, 998, 1011, 1038], "overli": [52, 62, 63, 201, 274, 358, 412, 1001], "overlin": [269, 404], "overparameter": 997, "overrid": [377, 415, 445, 449, 456, 542, 548, 588, 589, 591, 593, 594, 597, 656, 664, 685, 686, 806, 823, 846, 847, 848, 850, 852, 854, 855, 856, 1032, 1040, 1042, 1046, 1048], "overridden": [377, 389, 417, 542, 548, 616, 621, 624, 694, 1040, 1041, 1048], "oversampl": [544, 1032], "oversc": 1047, "overset": [412, 1008], "overst": 186, "oversubscript": [778, 1046], "overview": [107, 183, 274, 285, 288, 354, 376, 378, 388, 389, 496, 734, 743, 800, 816, 827, 832, 833, 834, 912, 1003, 1015, 1022, 1026, 1027], "overwhelm": 375, "overwrit": [149, 445, 496, 631, 1032, 1043, 1048, 1049], "overwrite_": 1032, "overwritten": [441, 532, 533, 534, 536, 541, 548, 607, 608, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 672, 674, 679, 681, 682, 683, 684, 686, 970, 1045], "ovo": [286, 318, 788, 832, 906, 909, 1001, 1002, 1016], "ovo_tpr": 278, "ovo_tre": 286, "ovr": [2, 66, 226, 286, 288, 318, 347, 658, 659, 788, 833, 904, 906, 909, 1001, 1002, 1016, 1032, 1037, 1038, 1040, 1041, 1042, 1046, 1047], "ovr_jaccard_scor": 288, "ovr_tre": 286, "ow": 93, "owen": [649, 1041, 1042], "own": [2, 16, 52, 70, 140, 229, 245, 259, 289, 291, 330, 351, 363, 369, 378, 380, 383, 384, 393, 406, 407, 419, 423, 439, 453, 533, 557, 564, 646, 797, 798, 846, 847, 848, 850, 852, 854, 855, 856, 878, 912, 914, 936, 942, 997, 1003, 1004, 1007, 1011, 1016, 1020, 1025, 1039, 1040, 1042, 1049], "own_telephon": 263, "owner": [245, 370, 372, 956, 957], "ownership": 377, "oyamada": 1037, "oyindamola": 1047, "oywa": 1042, "ozga": 1040, "ozsvald": 1034, "p": [0, 2, 50, 53, 61, 63, 64, 76, 94, 111, 112, 115, 118, 127, 145, 164, 168, 173, 191, 223, 228, 229, 231, 233, 242, 269, 275, 276, 302, 369, 370, 372, 373, 380, 383, 404, 405, 406, 407, 409, 410, 412, 414, 416, 417, 418, 420, 441, 443, 445, 446, 449, 454, 455, 456, 468, 470, 473, 474, 477, 498, 528, 534, 538, 540, 541, 547, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 564, 565, 566, 590, 592, 593, 594, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 615, 616, 627, 640, 643, 688, 690, 692, 694, 699, 705, 715, 724, 741, 752, 786, 788, 802, 808, 809, 810, 813, 829, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 860, 864, 865, 880, 892, 898, 914, 915, 916, 994, 995, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1015, 1016, 1032, 1033, 1035, 1038, 1040, 1047, 1048, 1049], "p0": 63, "p1": [63, 156], "p1d": 63, "p2": [63, 156, 229], "p3": 156, "p4": 156, "p5": 948, "p592": 138, "p_": [164, 1001, 1004, 1017], "p_c": [118, 523], "p_e": 716, "p_grid": 274, "p_i": [1001, 1004], "p_k": [276, 1001], "p_n": [276, 707, 1001], "p_o": 716, "p_val": 269, "p_val_uncorrect": 269, "p_valu": [604, 605, 606], "p_w": 118, "p_w_c": [118, 523], "pa": [666, 667, 901, 997, 1001, 1014], "pab": [1047, 1048], "pablo": [1042, 1045, 1046], "pabloduque0": 1045, "pace": 370, "pacha": 1040, "pacif": 269, "pack": [384, 1040], "packag": [0, 80, 86, 181, 245, 289, 363, 368, 369, 372, 373, 375, 376, 377, 379, 383, 384, 387, 389, 393, 394, 401, 409, 414, 415, 451, 477, 646, 647, 991, 997, 1000, 1004, 1011, 1017, 1025, 1032, 1038, 1040, 1041, 1042], "packet": 362, "packg": 393, "pacman": 393, "paczuski": [1040, 1041], "pad": [120, 142, 181, 187, 231, 248, 350, 355, 415, 588, 589, 591], "page": [0, 51, 55, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 195, 231, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 362, 370, 372, 375, 377, 379, 381, 383, 390, 407, 409, 472, 516, 517, 518, 628, 644, 834, 899, 948, 991, 997, 1001, 1002, 1030, 1032, 1036, 1037], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": [55, 948], "pagh": [191, 993], "pai": [0, 186, 229, 263, 375], "paid": 997, "pain": 387, "paint": [916, 918], "pair": [2, 49, 52, 72, 79, 91, 97, 125, 136, 138, 142, 146, 161, 174, 178, 194, 220, 223, 229, 242, 264, 269, 276, 278, 333, 335, 337, 339, 340, 341, 343, 351, 355, 370, 387, 389, 404, 405, 408, 411, 415, 417, 436, 439, 440, 444, 449, 456, 462, 470, 471, 477, 493, 508, 509, 582, 592, 595, 596, 598, 599, 600, 610, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 632, 633, 643, 645, 692, 699, 700, 705, 706, 707, 715, 731, 740, 758, 759, 763, 766, 769, 770, 771, 772, 773, 774, 776, 778, 779, 780, 781, 782, 786, 832, 844, 845, 919, 1001, 1002, 1003, 1004, 1011, 1017, 1032, 1044, 1045, 1047, 1048, 1049], "pair_confusion_matrix": [2, 407, 1044], "pair_list": 278, "pair_scor": 278, "paired_cosine_dist": [2, 403], "paired_dist": [2, 763, 769, 778, 1036], "paired_euclidean_dist": [2, 403], "paired_manhattan_dist": 2, "pairidx": 355, "pairplot": [126, 185, 186], "pairwis": [2, 37, 97, 185, 186, 242, 248, 278, 318, 322, 323, 350, 362, 367, 389, 403, 407, 412, 417, 445, 453, 457, 460, 461, 467, 486, 508, 509, 535, 561, 562, 620, 638, 639, 640, 641, 642, 643, 688, 690, 692, 694, 696, 699, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 788, 792, 793, 832, 848, 852, 856, 870, 902, 921, 993, 1001, 1004, 1013, 1016, 1027, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050], "pairwise_bayesian": 269, "pairwise_bayesian_df": 269, "pairwise_comp_df": 269, "pairwise_dist": [2, 75, 326, 389, 407, 418, 443, 445, 449, 456, 688, 696, 762, 771, 779, 780, 792, 793, 848, 850, 852, 856, 999, 1032, 1036, 1038, 1040, 1041, 1043, 1044, 1049, 1050], "pairwise_dist_chunk_s": [467, 902], "pairwise_distance_funct": [692, 696, 778, 781, 1004], "pairwise_distances_argmin": [2, 97, 322, 780, 1040, 1046, 1047, 1048, 1049], "pairwise_distances_argmin_min": [2, 322, 779, 1035, 1040, 1046, 1047, 1048, 1049], "pairwise_distances_chunk": [2, 362, 778, 1040, 1043, 1049], "pairwise_indices_": 832, "pairwise_kernel": [2, 389, 417, 451, 461, 643, 765, 870, 999, 1032, 1039, 1049], "pairwise_kernel_funct": [620, 643, 774], "pairwise_kernels_kwarg": 620, "pairwise_t_test": 269, "pairwisedistancesreduct": 363, "pairwisekernel": [2, 417], "paislei": [412, 536], "pakdd": 407, "pal": [1040, 1046], "palacio": 1045, "palafox": 1032, "palett": [186, 269], "palevioletr": [225, 295, 338], "palioura": [839, 1003], "paliw": 1040, "palladium": 1025, "palmol": 51, "pami": [372, 407, 725], "pamnani": 1040, "pan": 395, "panchal": 1044, "pancholi": 1039, "panda": [2, 43, 51, 62, 102, 103, 104, 134, 140, 141, 143, 146, 149, 151, 167, 175, 181, 185, 186, 187, 188, 189, 193, 197, 201, 211, 215, 219, 229, 248, 249, 252, 259, 263, 267, 269, 270, 272, 280, 281, 283, 286, 314, 315, 316, 318, 321, 322, 346, 350, 351, 369, 370, 373, 374, 375, 377, 378, 383, 387, 389, 393, 400, 408, 431, 441, 442, 444, 446, 448, 463, 465, 467, 481, 482, 483, 484, 488, 489, 490, 492, 496, 500, 501, 502, 504, 505, 510, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 688, 689, 692, 800, 803, 804, 814, 830, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 926, 990, 991, 1011, 1020, 1021, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "pandata": [1047, 1048], "pandei": [1039, 1044], "panel": [260, 294, 309, 413, 1020], "panga": [1047, 1048], "panico": [1040, 1044], "pankaj": 1044, "pano": 1038, "panpiort8": [1042, 1044], "paolo": [0, 397, 1032, 1036, 1042, 1050], "papadopoulo": [1045, 1046, 1047, 1048, 1049], "papapanagiot": 1039, "paper": [0, 168, 191, 263, 269, 372, 381, 387, 407, 409, 414, 441, 448, 477, 504, 534, 541, 563, 641, 658, 666, 667, 671, 676, 679, 692, 788, 841, 850, 853, 896, 897, 997, 1001, 1004, 1007, 1016, 1032, 1039, 1040], "paper355": 671, "papier": [664, 685, 686], "par": 1011, "paraboloid": 997, "paradi": 1047, "paradigm": 997, "paragraph": [415, 503], "paralel": 1048, "parallel": [2, 53, 138, 140, 142, 187, 213, 270, 319, 320, 322, 344, 357, 361, 367, 373, 375, 376, 378, 379, 387, 389, 408, 418, 419, 436, 443, 445, 447, 448, 449, 451, 456, 457, 460, 463, 466, 471, 531, 533, 534, 535, 537, 539, 541, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 589, 594, 602, 607, 608, 610, 632, 634, 639, 658, 688, 689, 690, 691, 692, 693, 694, 781, 800, 803, 804, 806, 811, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 863, 866, 899, 900, 967, 970, 1021, 1027, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1047, 1048], "parallel_backend": [2, 363, 418, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900, 1040, 1050], "parallel_batch_queri": 289, "parallel_coordin": 270, "parallel_help": 1042, "parallelbackendbas": 970, "parallelis": [270, 467, 902, 1039], "param": [79, 88, 94, 95, 103, 144, 145, 147, 148, 231, 244, 245, 267, 269, 277, 281, 293, 305, 325, 371, 375, 377, 389, 398, 414, 417, 421, 424, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 812, 814, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 960, 989, 990, 1038, 1042, 1043, 1045, 1046, 1049, 1050], "param1": 377, "param2": 377, "param3": 377, "param_": 140, "param_c": [280, 800], "param_classifier__c": 103, "param_covariance_typ": 259, "param_degre": 800, "param_dist": [277, 281, 320], "param_distribut": [103, 170, 270, 277, 281, 320, 388, 804, 812, 814, 1048], "param_gamma": [280, 800, 814], "param_grid": [43, 45, 103, 104, 105, 106, 140, 146, 244, 250, 259, 263, 267, 268, 269, 273, 274, 277, 280, 286, 291, 311, 325, 339, 389, 398, 408, 414, 742, 800, 803, 811, 812, 990, 1001], "param_kernel": [800, 814], "param_list": 812, "param_min_samples_split": 273, "param_n_compon": 259, "param_nam": [140, 270, 282, 324, 346, 398, 823, 831, 996], "param_pca__n_compon": 105, "param_preprocessor__cat__selector__percentil": 103, "param_preprocessor__num__imputer__strategi": 103, "param_rang": [282, 324, 346, 823, 831, 996, 1048], "param_reduce_dim__n_compon": 268, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 87, 88, 91, 93, 94, 95, 103, 104, 105, 110, 112, 113, 118, 120, 126, 132, 134, 138, 140, 142, 143, 144, 147, 148, 149, 159, 165, 168, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 193, 194, 195, 196, 197, 199, 200, 201, 203, 208, 211, 213, 215, 216, 219, 228, 229, 235, 236, 238, 240, 243, 244, 245, 254, 255, 256, 257, 259, 260, 262, 263, 268, 269, 270, 271, 273, 274, 277, 280, 281, 286, 289, 291, 292, 295, 296, 302, 304, 305, 307, 309, 310, 311, 313, 314, 318, 319, 321, 322, 323, 324, 332, 334, 336, 341, 343, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 358, 362, 363, 364, 367, 368, 370, 378, 380, 382, 383, 384, 387, 398, 402, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1017, 1020, 1021, 1022, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "parameter": [354, 417, 614, 615, 622, 623, 797, 798, 997, 998, 1006, 1011, 1017], "parameter_grid": 270, "parameter_nam": [567, 568, 569, 570], "parametergrid": [2, 800, 1034, 1040], "parameters_str": 88, "parametersampl": [2, 814, 1034, 1040, 1044], "parametr": [2, 48, 61, 62, 113, 241, 293, 313, 321, 405, 408, 413, 414, 436, 551, 553, 635, 685, 696, 880, 892, 942, 943, 997, 1000, 1003, 1004, 1011, 1014, 1017, 1040, 1042, 1045], "parametrize_with_check": [2, 318, 377, 923, 942, 1042, 1043], "params_str": 281, "parcel": [87, 100, 407], "parch": [188, 323], "pardeep": 1044, "parel": 1036, "parent": [47, 185, 245, 357, 375, 379, 389, 407, 441, 462, 957, 958, 1032, 1049], "parent_hourly_wag": 185, "parenthes": 938, "parenthesi": [76, 375], "paresh": [1041, 1042], "pareto": 213, "pargent": 1011, "pari": [0, 372, 408, 465, 764, 872, 1012, 1046], "pariet": [1025, 1032], "parikh": [1041, 1046, 1047, 1048, 1049, 1050], "parimi": 1050, "paris_in_radian": 764, "paristech": 0, "pariti": 1017, "parizi": 1047, "park": [1037, 1042, 1044, 1047, 1048], "parmet": 1049, "parmind": 1039, "parquet": 52, "parra": 1040, "parri": [1037, 1038, 1039], "parrot": 350, "pars": [47, 55, 362, 369, 370, 376, 508], "parse_vers": [147, 189, 318, 670], "parser": [47, 149, 263, 283, 318, 322, 496, 1047, 1048], "parsifalxu": 1050, "parsimoni": [412, 1011], "parsing_tim": 47, "parson": [1043, 1045], "part": [0, 44, 45, 67, 71, 84, 94, 103, 113, 120, 123, 126, 137, 140, 142, 146, 152, 159, 160, 161, 165, 175, 183, 193, 245, 247, 257, 263, 264, 266, 284, 304, 311, 314, 316, 352, 364, 370, 372, 375, 377, 381, 383, 388, 389, 393, 395, 403, 405, 406, 407, 411, 412, 414, 415, 417, 445, 448, 493, 494, 495, 521, 531, 537, 542, 574, 584, 585, 586, 613, 625, 793, 869, 887, 889, 890, 891, 892, 893, 894, 895, 990, 991, 993, 998, 1002, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1032, 1040, 1041, 1043, 1045, 1047], "part3": 411, "part_of_speech": 415, "partev": [1046, 1047, 1048, 1049], "parthiv": 1044, "parti": [229, 286, 324, 363, 374, 377, 387, 401, 802, 809, 1032, 1043, 1048, 1049], "partial": [2, 43, 47, 51, 83, 114, 115, 151, 183, 184, 229, 237, 320, 323, 372, 375, 389, 392, 409, 410, 412, 414, 417, 463, 481, 482, 483, 484, 496, 501, 534, 536, 541, 562, 589, 632, 633, 657, 788, 830, 832, 833, 860, 861, 862, 865, 877, 878, 881, 884, 913, 998, 1005, 1015, 1022, 1027, 1029, 1033, 1040, 1041, 1045, 1049], "partial_correl": 51, "partial_depend": [2, 187, 632, 1008, 1033, 1041, 1042, 1043, 1044, 1047, 1048], "partial_fit": [47, 83, 120, 322, 364, 377, 389, 407, 412, 441, 448, 534, 536, 537, 538, 589, 597, 658, 659, 666, 667, 668, 676, 677, 678, 832, 833, 836, 837, 839, 840, 841, 842, 843, 860, 861, 862, 873, 874, 884, 904, 989, 997, 1003, 1005, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049], "partial_fit_": 1045, "partial_fit_classifi": 47, "partial_fit_param": [597, 832, 833, 836, 837], "partialdependencedisplai": [2, 149, 151, 187, 249, 319, 320, 321, 323, 325, 382, 633, 1008, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "particip": [374, 375, 390, 1025], "particl": 1006, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 93, 103, 109, 118, 125, 128, 143, 146, 149, 150, 174, 181, 186, 187, 211, 213, 219, 243, 263, 266, 270, 272, 278, 289, 298, 302, 309, 318, 319, 322, 351, 352, 358, 362, 363, 369, 370, 373, 374, 375, 377, 379, 380, 381, 383, 384, 388, 389, 393, 407, 408, 411, 412, 414, 415, 416, 417, 445, 468, 472, 496, 544, 563, 609, 653, 658, 663, 672, 674, 684, 687, 712, 728, 785, 836, 929, 931, 991, 993, 995, 997, 1001, 1004, 1005, 1006, 1007, 1009, 1011, 1021, 1025, 1032, 1035, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1049], "particularli": [58, 67, 102, 103, 106, 129, 152, 186, 212, 240, 269, 283, 311, 319, 326, 348, 358, 362, 375, 377, 384, 389, 407, 408, 410, 413, 415, 496, 806, 823, 841, 948, 969, 997, 998, 1001, 1003, 1009, 1021, 1025, 1032, 1037, 1039, 1040, 1046], "partit": [80, 99, 102, 150, 152, 269, 306, 389, 404, 405, 407, 411, 414, 448, 450, 452, 461, 511, 557, 558, 559, 560, 563, 564, 565, 704, 705, 715, 786, 852, 912, 913, 914, 915, 1000, 1004, 1007, 1011, 1017], "partli": [80, 401, 769], "partnership": 1025, "parvu": 372, "pasbi": [1039, 1040], "pascal": 1001, "pascual": 1035, "paskov": 1039, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 140, 149, 151, 165, 195, 197, 212, 239, 241, 242, 245, 248, 249, 251, 259, 263, 267, 270, 316, 318, 321, 326, 344, 352, 358, 362, 363, 364, 370, 375, 376, 377, 380, 381, 382, 383, 384, 387, 389, 398, 401, 403, 406, 407, 408, 411, 412, 414, 415, 417, 418, 419, 424, 425, 429, 430, 436, 437, 439, 441, 442, 443, 445, 446, 447, 448, 449, 451, 453, 456, 458, 459, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 490, 492, 495, 496, 497, 503, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 588, 589, 590, 591, 593, 594, 597, 602, 607, 608, 610, 611, 617, 620, 626, 631, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 711, 732, 733, 742, 763, 774, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 881, 883, 884, 885, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 924, 929, 930, 931, 938, 942, 943, 947, 948, 950, 952, 955, 957, 960, 961, 970, 971, 974, 984, 989, 990, 991, 997, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1014, 1015, 1016, 1021, 1025, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "passiv": [2, 47, 218, 666, 667, 1023, 1027, 1033], "passiveaggress": [364, 415], "passiveaggressiveclassifi": [2, 47, 218, 362, 364, 997, 1002, 1033, 1036, 1037, 1039, 1040, 1043, 1045, 1050], "passiveaggressiveregressor": [2, 364, 997, 1033, 1036, 1039, 1040, 1043, 1045, 1050], "passo": [0, 397, 1032, 1033], "passthrough": [43, 104, 143, 186, 187, 211, 229, 248, 315, 323, 408, 463, 466, 567, 568, 863, 864, 1011, 1041, 1043, 1046, 1047, 1049], "passthrough_numer": [211, 229], "passthroughpassthrough": [187, 315], "past": [50, 52, 379, 380, 383, 387, 390, 411, 412, 414, 538, 555, 556, 678, 1025, 1048], "pat": [628, 991], "patch": [2, 70, 83, 248, 254, 255, 256, 259, 260, 264, 370, 387, 412, 414, 555, 556, 583, 584, 587, 1032, 1040], "patch_height": [583, 584, 587], "patch_siz": [83, 123, 415, 583, 584, 587], "patch_width": [583, 584, 587], "patchextractor": [2, 415, 1048], "patel": [1040, 1042, 1043, 1044, 1046], "path": [2, 47, 55, 183, 192, 197, 198, 201, 203, 206, 215, 227, 282, 346, 354, 369, 373, 375, 379, 383, 384, 389, 401, 440, 444, 449, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 508, 509, 548, 557, 558, 563, 564, 565, 566, 593, 594, 597, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 681, 682, 683, 684, 685, 686, 688, 864, 865, 911, 912, 913, 914, 915, 954, 990, 997, 998, 1007, 1021, 1022, 1032, 1033, 1036, 1038, 1039, 1041, 1042, 1044, 1045, 1047, 1048], "path_length": 954, "path_method": [688, 998], "pathak": [1047, 1048], "patheffect": 75, "pathlib": [47, 1047, 1048], "pathlik": [496, 1048], "patholog": [85, 1000, 1038], "pathwai": 376, "pati": 1034, "patienc": [383, 389], "patient": [46, 157, 168, 182, 372, 383, 406, 411, 997], "patil": [1046, 1049], "paton": 1045, "patric": [1044, 1045], "patricio": 1046, "patrick": [1039, 1040, 1045, 1046, 1049, 1050], "patrini": [1037, 1038, 1039], "pattaniyil": 1042, "pattern": [43, 52, 58, 96, 113, 115, 119, 126, 127, 170, 181, 183, 187, 197, 215, 245, 248, 321, 343, 350, 351, 352, 358, 372, 375, 377, 390, 404, 407, 408, 412, 414, 415, 447, 463, 465, 504, 532, 534, 541, 555, 556, 638, 708, 725, 741, 769, 788, 789, 797, 884, 993, 995, 997, 1001, 1002, 1008, 1016, 1018, 1021, 1022, 1025, 1044], "patterson": [494, 1037], "paul": [370, 1035, 1038, 1039, 1040, 1041, 1045, 1046], "paula": [1042, 1043, 1050], "pauli": 1037, "paulo": [1039, 1045, 1047], "paus": 80, "pava": 635, "pavel": [1033, 1041], "pavlo": [1040, 1041], "pavlyk": [1040, 1041, 1042, 1043], "pawel": 1041, "pawe\u0142": [1035, 1039, 1044, 1045], "payn": 1042, "pazzani": 64, "pb_q": [321, 997], "pbl": 146, "pc": [57, 332, 352, 370], "pca": [2, 11, 42, 45, 55, 68, 69, 84, 99, 101, 102, 104, 106, 107, 116, 119, 122, 129, 130, 160, 183, 220, 232, 234, 241, 243, 246, 250, 256, 262, 268, 275, 277, 280, 289, 292, 293, 298, 307, 321, 355, 358, 367, 377, 389, 403, 407, 408, 413, 423, 472, 475, 483, 496, 502, 504, 514, 532, 533, 534, 535, 539, 540, 543, 544, 549, 643, 658, 688, 690, 692, 696, 800, 826, 830, 853, 860, 863, 864, 866, 874, 882, 884, 919, 993, 995, 998, 1004, 1011, 1015, 1017, 1022, 1026, 1027, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1043, 1045, 1046, 1047, 1049, 1050], "pca0": 423, "pca1": [408, 423], "pca2": [408, 423], "pca_2": 116, "pca__n_compon": 105, "pca_back_proj_ax": 125, "pca_estim": 120, "pca_proj_ax": 125, "pca_scor": 127, "pcapca": [104, 250], "pcd": [860, 1006], "pchelintsev": 1044, "pclass": [103, 188, 252, 318, 322, 323], "pcolor": 171, "pcolormesh": [70, 152, 161, 292, 297, 335, 339, 343, 631], "pcr": [116, 410], "pd": [43, 51, 62, 103, 104, 134, 140, 141, 146, 151, 167, 181, 185, 186, 187, 188, 189, 193, 197, 201, 211, 215, 219, 229, 249, 252, 259, 267, 269, 270, 272, 280, 281, 283, 286, 314, 315, 316, 321, 322, 346, 350, 351, 380, 389, 408, 463, 465, 627, 628, 629, 630, 632, 778, 928, 930, 931, 990, 991, 1008, 1011, 1043, 1045, 1046, 1047, 1049], "pd2000": 1001, "pd_": 1008, "pd_line_kw": 632, "pd_result": 632, "pdb": 383, "pdbcl": 383, "pdf": [168, 269, 294, 309, 372, 375, 407, 416, 441, 448, 531, 534, 537, 541, 641, 644, 649, 658, 664, 666, 667, 671, 676, 679, 682, 683, 685, 686, 692, 841, 853, 860, 897, 899, 997, 1014, 1017, 1024, 1028, 1032], "pdist": [692, 778, 781], "pdp": [2, 632, 1008, 1046], "pdp_lim": 632, "pdp_line_kw": 632, "pe": 583, "pe_tran": 583, "peai": 1041, "peak": [43, 52, 64, 187, 405, 411, 1046], "pear": 1002, "pearson": [2, 606, 609, 1045], "pearu": 1032, "pedersen": [1036, 1048], "pedigo": [1044, 1045], "pedregosa": [0, 397, 1032, 1033, 1034, 1035, 1036, 1038], "pedro": [1033, 1035, 1036, 1040], "peek": [187, 375, 1008], "peer": 1025, "peev": [1040, 1043], "pegaso": 1015, "pei": [407, 1039], "peixinho": 1046, "pelennor": 1046, "penal": [2, 53, 66, 113, 154, 197, 201, 205, 211, 215, 227, 229, 282, 314, 346, 407, 409, 412, 414, 416, 468, 469, 470, 471, 472, 473, 474, 475, 477, 561, 562, 647, 652, 653, 661, 663, 676, 705, 715, 734, 786, 795, 877, 904, 905, 911, 997, 1001, 1003, 1005, 1015, 1016], "penalis": [209, 226, 696], "penalti": [2, 25, 46, 49, 66, 113, 183, 192, 193, 197, 200, 201, 205, 211, 215, 218, 226, 227, 240, 277, 282, 304, 321, 332, 344, 350, 362, 383, 387, 409, 412, 416, 470, 471, 472, 473, 474, 475, 477, 502, 531, 537, 538, 539, 540, 542, 543, 547, 548, 597, 643, 646, 647, 648, 649, 652, 653, 654, 657, 658, 659, 660, 661, 662, 668, 669, 670, 672, 676, 678, 680, 681, 687, 814, 884, 904, 905, 907, 909, 910, 911, 990, 997, 1000, 1005, 1011, 1015, 1016, 1022, 1034, 1037, 1039, 1041, 1042, 1044, 1045, 1047, 1048], "peng": [679, 997, 1038, 1039, 1040, 1042, 1044], "peopl": [2, 45, 102, 186, 247, 272, 350, 351, 363, 364, 370, 372, 374, 375, 379, 390, 413, 493, 494, 641, 841, 1020], "pep": [51, 383, 1032], "pep073": 376, "pep257": 389, "pep440": 379, "pep8": [377, 379, 383], "pepsi": 51, "per": [43, 49, 58, 70, 86, 97, 139, 140, 143, 175, 177, 186, 187, 211, 226, 229, 248, 252, 255, 263, 265, 276, 278, 309, 315, 320, 325, 326, 346, 350, 352, 362, 370, 371, 375, 380, 381, 384, 387, 389, 405, 407, 411, 412, 413, 414, 415, 417, 445, 447, 449, 456, 460, 463, 467, 486, 496, 500, 502, 503, 504, 508, 510, 512, 515, 523, 532, 534, 535, 536, 539, 541, 543, 549, 550, 561, 562, 569, 583, 588, 591, 610, 611, 632, 633, 641, 642, 658, 659, 666, 667, 668, 671, 673, 674, 675, 676, 678, 692, 696, 713, 716, 720, 722, 741, 754, 758, 759, 781, 783, 797, 798, 825, 832, 833, 834, 836, 837, 840, 842, 860, 863, 869, 871, 873, 874, 877, 878, 884, 885, 902, 904, 905, 906, 907, 908, 909, 910, 935, 936, 948, 975, 990, 993, 997, 1000, 1001, 1002, 1005, 1008, 1015, 1016, 1017, 1021, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1048, 1049], "perc": 264, "percal": 381, "percent": [134, 492, 600, 1014], "percent10": [248, 492], "percentag": [2, 52, 87, 128, 143, 203, 229, 264, 272, 275, 411, 416, 534, 541, 544, 549, 593, 594, 648, 669, 680, 703, 734, 746, 818, 819, 820, 834, 916, 918, 1002, 1017, 1034, 1038, 1044, 1045], "percentil": [2, 49, 52, 103, 146, 149, 248, 252, 309, 362, 592, 595, 596, 598, 599, 600, 603, 606, 632, 633, 748, 1011, 1037, 1045], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 264, "percept": [163, 187, 1008], "perceptron": [2, 47, 67, 142, 152, 161, 172, 174, 183, 218, 221, 227, 249, 303, 311, 312, 333, 344, 364, 387, 415, 514, 515, 522, 666, 676, 830, 860, 861, 862, 865, 884, 999, 1002, 1006, 1015, 1022, 1023, 1027, 1036, 1038, 1039, 1040, 1044], "percol": 74, "perdisci": [407, 441], "perdok": 1047, "pere": 1049, "peredachi": [607, 608], "pereira": [1037, 1040, 1041], "peretti": 1047, "perez": [1040, 1047], "perf_count": 248, "perfect": [58, 63, 72, 102, 112, 123, 125, 211, 350, 351, 375, 407, 411, 553, 554, 690, 694, 704, 705, 708, 717, 726, 728, 731, 737, 743, 756, 757, 785, 786, 795, 997, 1001, 1004, 1016, 1025, 1046], "perfectli": [63, 64, 72, 272, 284, 343, 392, 407, 414, 437, 567, 606, 704, 705, 715, 717, 736, 737, 757, 786, 795, 877, 996, 998, 1001, 1016, 1045, 1046], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 82, 86, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 106, 109, 116, 123, 129, 132, 134, 140, 143, 144, 145, 147, 148, 149, 153, 154, 159, 163, 166, 167, 168, 171, 179, 181, 182, 183, 186, 187, 188, 189, 191, 197, 201, 208, 211, 213, 215, 217, 218, 219, 228, 229, 232, 233, 235, 238, 243, 246, 248, 255, 256, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 274, 275, 277, 278, 280, 282, 283, 286, 288, 289, 302, 307, 309, 311, 313, 315, 316, 318, 324, 325, 327, 329, 330, 339, 342, 343, 346, 350, 352, 356, 358, 361, 363, 364, 370, 372, 377, 378, 379, 381, 383, 384, 387, 388, 389, 392, 398, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 425, 429, 439, 441, 442, 443, 445, 446, 447, 449, 451, 453, 454, 458, 460, 467, 468, 481, 482, 483, 484, 494, 502, 512, 515, 531, 532, 533, 535, 537, 542, 543, 544, 545, 546, 548, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 594, 601, 602, 603, 610, 611, 627, 630, 631, 638, 640, 645, 651, 654, 655, 656, 658, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 678, 682, 683, 685, 687, 689, 690, 693, 694, 697, 703, 704, 705, 707, 708, 712, 713, 726, 729, 730, 738, 740, 742, 755, 756, 757, 778, 783, 784, 786, 787, 788, 794, 795, 796, 797, 798, 800, 803, 804, 811, 812, 814, 818, 825, 826, 827, 829, 830, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 851, 853, 854, 859, 860, 861, 862, 864, 865, 867, 870, 871, 873, 874, 876, 877, 878, 880, 881, 884, 885, 887, 889, 890, 891, 893, 894, 895, 899, 900, 902, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 931, 973, 984, 989, 990, 991, 993, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1025, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "performancetip": 381, "perhap": [102, 142, 372, 374, 383, 389, 413, 1021], "perimet": [168, 372], "period": [2, 52, 149, 170, 175, 179, 379, 389, 390, 405, 417, 615, 821, 883, 1040, 1045, 1047], "periodic_spline_transform": 43, "periodicity_bound": [170, 175, 179, 615], "peripheri": 407, "perla": 1035, "perm_scores_iri": 275, "perm_scores_rand": 275, "perm_sorted_idx": 189, "permalink": 379, "perman": 383, "permiss": [374, 379, 390, 393, 394, 1025, 1047], "permit": [408, 466, 588, 589, 591, 800, 803, 804, 814, 826, 865, 866, 1001, 1002, 1003, 1038], "permut": [2, 58, 59, 72, 112, 147, 161, 163, 183, 184, 227, 261, 269, 316, 331, 392, 402, 407, 414, 416, 463, 496, 500, 504, 559, 560, 564, 565, 627, 630, 634, 679, 704, 705, 717, 736, 737, 755, 757, 795, 817, 819, 829, 830, 864, 878, 909, 912, 913, 948, 969, 971, 974, 1001, 1015, 1022, 1027, 1032, 1038, 1045, 1047], "permutation_import": [2, 141, 147, 188, 189, 318, 414, 553, 554, 557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915, 1009, 1042, 1044, 1045, 1049], "permutation_scor": 829, "permutation_test_scor": [2, 275, 398, 411, 1032, 1039, 1044], "permuted_categori": 316, "perp_tol": 536, "perpendicular": [70, 344], "perperogl": 1011, "perplex": [183, 230, 231, 233, 235, 289, 514, 525, 536, 692, 998, 1022, 1037, 1039, 1046], "perri": 1042, "perrin": 1038, "perrot": [0, 1032], "persian": 1020, "persist": [383, 387, 412, 445, 610, 611, 860, 1006, 1020, 1027, 1038, 1041], "persola": 1040, "person": [45, 186, 263, 272, 370, 374, 411, 415, 493, 494, 495, 1011, 1040], "personal_statu": 263, "perspect": [88, 93, 211, 283, 362, 370, 387, 390, 530, 643, 904, 994], "pertin": 211, "perturb": [186, 228, 307, 412, 414, 1000], "peru": [50, 302, 370, 498], "pervas": [358, 375], "pessimist": [145, 414], "pessoa": 1045, "pestrickland": 1038, "pet": [321, 325, 788, 1001], "pet_cat": 321, "pet_dog": 321, "pet_fish": 321, "petal": [126, 128, 130, 142, 252, 320, 323, 372, 408, 917, 1017], "petal_col": 323, "petar": 1047, "pete": [1039, 1043, 1044], "peter": [0, 96, 397, 407, 447, 449, 456, 649, 792, 793, 997, 1001, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1049], "peterlongo": 1049, "peterson": [1032, 1034], "petfood": 1025, "petrov": [1039, 1040, 1048], "petrushev": 1041, "pe\u00f1a": 1036, "pfaffel": 1045, "pfahring": [835, 1002], "pfe": 51, "pfister": 1011, "pfizer": 51, "pft": 212, "pg": [51, 381, 649, 997, 1037], "pg_i": 649, "pgithub": 1044, "ph": 1044, "pham": [191, 993, 1039], "phan": 412, "pharmaceut": 372, "phase": [43, 197, 206, 362, 627, 993, 998, 1004, 1025, 1040, 1042], "phase_nois": 75, "phd": [0, 407, 414, 1021, 1025], "phenol": 372, "phenomena": 175, "phenomenon": [351, 1011], "phi": [75, 412, 414, 743, 870, 993, 1001, 1011, 1016], "phi_coeffici": 1001, "phil": [1037, 1048], "philipp": [1034, 1035, 1038, 1047], "phillip": [2, 50, 302, 370, 498], "phlypo": 1035, "phongpanagnam": 1045, "phongpanangam": 1045, "photogrammetr": 997, "php": 1001, "phrase": 415, "phy": [607, 608], "phyo": 1046, "physic": [2, 102, 140, 363, 505, 965, 997, 1048], "physician": 406, "physiolog": [272, 372], "pi": [43, 53, 70, 74, 75, 121, 129, 151, 153, 163, 170, 194, 197, 199, 206, 212, 233, 254, 255, 256, 259, 260, 284, 302, 319, 325, 356, 393, 413, 417, 516, 517, 518, 615, 642, 995, 996, 997, 1003], "pianomania": 1037, "pick": [88, 93, 189, 246, 277, 322, 328, 370, 375, 379, 407, 414, 442, 459, 523, 673, 914, 915, 990, 997, 998, 1000, 1015, 1043], "pickl": [379, 389, 415, 589, 844, 845, 1020, 1021, 1027, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "pickleabl": [868, 1038], "pickup": 1040, "pico": [1035, 1036], "pict": [834, 1002], "pictur": [51, 55, 59, 71, 86, 99, 123, 183, 242, 260, 370, 390, 407, 412, 415, 461, 493, 494, 521, 1021, 1022], "piec": [70, 81, 212, 363, 1000], "piecewis": [129, 321, 404, 992, 997, 1011, 1017], "pierr": [1032, 1040, 1041, 1043, 1045, 1047, 1049, 1050], "pierreablin": 1040, "pierreattard": [1045, 1046], "pierretallott": [1040, 1041, 1042], "pierron": 1035, "piet": [1046, 1047], "pieter": [55, 1038, 1039, 1046], "pietro": [1032, 1035, 1049], "pietruh": 1040, "pig": 783, "pillow": [375, 393, 400], "pim": 1041, "pin": [381, 401], "pinaki": 1040, "pinbal": [2, 52, 146, 149, 321, 414, 562, 670, 723, 748, 997, 1045, 1046], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [897, 1013, 1038, 1039], "pink": 194, "pinki": 1046, "pinot": 315, "pinto": 1032, "pintor": 1043, "pinvh": [1039, 1041], "piontek": 1048, "piotr": [1040, 1041, 1050], "pip": [289, 318, 319, 320, 321, 322, 323, 324, 325, 326, 363, 373, 375, 379, 381, 383, 393, 401, 403, 1017], "pip3": [373, 393], "pipe": [104, 105, 143, 166, 245, 250, 268, 315, 320, 321, 388, 398, 408, 415, 590, 864, 889, 890, 892, 893, 894, 895, 990, 1011], "pipe_sgd": 225, "pipegraph": 387, "pipelin": [2, 7, 43, 67, 87, 91, 103, 106, 107, 116, 139, 140, 143, 160, 162, 164, 166, 167, 168, 181, 182, 187, 188, 191, 193, 199, 201, 211, 212, 217, 225, 229, 232, 237, 238, 239, 241, 243, 248, 249, 252, 261, 263, 266, 268, 269, 276, 277, 280, 283, 284, 289, 291, 292, 297, 298, 304, 307, 311, 314, 316, 318, 319, 320, 321, 322, 323, 324, 332, 350, 351, 358, 362, 367, 369, 370, 375, 378, 389, 398, 401, 411, 415, 417, 421, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 487, 502, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 607, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 713, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 991, 993, 997, 1004, 1005, 1010, 1011, 1015, 1016, 1020, 1021, 1022, 1023, 1025, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1049], "pipelineifittedpipelin": [103, 139, 165, 186, 188, 239, 249, 252, 276, 322], "pipelineinot": [154, 240, 250, 270, 283, 315, 319], "pipelinepipelin": [103, 104, 250, 263], "pita": 1049, "pitfal": [168, 183, 184, 185, 188, 215, 216, 269, 320, 388, 389, 392, 411, 464, 466, 496, 653, 672, 673, 701, 753, 815, 827, 830, 865, 877, 884, 997, 1022, 1027], "pitkin": [187, 1008], "pitt": 57, "pitter": 1047, "pivot": [80, 280, 281], "pivot_t": 280, "pixel": [2, 44, 45, 53, 58, 68, 81, 86, 120, 166, 191, 242, 267, 306, 307, 372, 407, 412, 415, 416, 493, 494, 495, 585, 586, 607, 608, 1004, 1006, 1017], "pixelwis": 120, "pixi": 401, "piyg": 311, "pkdd": 0, "pkg": 373, "pkgsrc": 393, "pkl": 401, "pl": [2, 52, 105, 116, 175, 325, 372, 410, 481, 482, 483, 484, 1037], "place": [2, 43, 93, 239, 249, 293, 362, 375, 376, 377, 380, 382, 390, 405, 415, 417, 440, 441, 444, 445, 481, 482, 483, 515, 581, 590, 628, 630, 631, 768, 781, 797, 887, 889, 890, 891, 892, 893, 894, 895, 979, 980, 1020, 1032, 1039, 1042, 1043, 1045, 1049, 1050], "placehold": [57, 379, 627, 628, 629, 630, 815, 816, 819, 820, 989, 991], "plagre": 1039, "plai": [121, 147, 172, 220, 262, 300, 335, 336, 362], "plain": [341, 417, 657, 1015], "plan": [51, 369, 373, 375, 376, 390, 401, 1011, 1035], "planar": 407, "plane": [51, 168, 223, 243, 295, 341, 343, 344, 348, 372, 451, 461, 995, 997, 1016], "plant": [275, 278, 279, 368, 1001, 1027], "plasma": 309, "plasma_r": 309, "plateau": [140, 144, 167, 263, 267, 271], "platform": [378, 389, 390, 1020, 1024, 1025, 1037, 1040, 1041, 1043, 1045, 1046, 1049, 1050], "platt": [405, 436, 906, 907, 909, 910, 1016], "platypu": 350, "pldtc325": 1039, "pleas": [0, 2, 51, 55, 63, 103, 104, 139, 141, 147, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 215, 239, 240, 241, 243, 245, 248, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 289, 299, 307, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 343, 356, 357, 363, 369, 370, 373, 375, 376, 377, 379, 383, 387, 388, 389, 393, 398, 401, 403, 407, 414, 415, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 1001, 1005, 1011, 1015, 1016, 1020, 1021, 1024, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "pleasant": [374, 1025], "plenti": 62, "plgreenliru": 1043, "plo": [369, 607, 608], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 87, 88, 89, 91, 92, 93, 94, 95, 98, 104, 105, 106, 107, 110, 111, 112, 116, 117, 120, 123, 124, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 141, 144, 145, 146, 148, 149, 151, 152, 153, 161, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 188, 189, 191, 192, 196, 199, 200, 201, 202, 204, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 223, 224, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 241, 242, 244, 246, 247, 252, 254, 255, 256, 258, 260, 261, 262, 263, 264, 269, 270, 272, 274, 275, 279, 280, 281, 282, 283, 284, 286, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 311, 312, 313, 314, 316, 319, 322, 323, 324, 325, 329, 330, 331, 333, 334, 335, 339, 340, 341, 344, 345, 346, 347, 348, 351, 352, 353, 354, 357, 375, 378, 384, 387, 392, 393, 402, 405, 407, 409, 411, 413, 414, 437, 440, 445, 449, 455, 463, 470, 496, 501, 502, 504, 512, 523, 553, 557, 560, 562, 564, 565, 569, 570, 610, 622, 631, 632, 633, 657, 658, 672, 676, 697, 698, 700, 701, 702, 703, 718, 727, 735, 761, 782, 784, 787, 788, 789, 800, 806, 817, 823, 825, 826, 827, 828, 831, 833, 842, 846, 862, 865, 877, 878, 879, 881, 884, 904, 906, 909, 912, 913, 918, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1015, 1016, 1017, 1020, 1021, 1022, 1027, 1033, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "plot_": [321, 393], "plot_2d": [118, 231], "plot_3d": 231, "plot_accuraci": 47, "plot_adaboost_multiclass": [134, 1022], "plot_adaboost_regress": [135, 1022], "plot_adaboost_twoclass": [136, 1022], "plot_adjusted_for_chance_measur": [72, 1022], "plot_affinity_propag": [73, 1022], "plot_agglomerative_clust": [74, 1022], "plot_agglomerative_clustering_metr": [75, 1022], "plot_agglomerative_dendrogram": [76, 1022], "plot_all_sc": [309, 1022], "plot_anomaly_comparison": [238, 1022], "plot_ard": [193, 644, 1022], "plot_arg": 305, "plot_bayesian_ridge_curvefit": [194, 1022], "plot_benchmark_throughput": 49, "plot_bias_vari": [137, 1022], "plot_bicluster_newsgroup": [57, 1022], "plot_birch_vs_minibatchkmean": [77, 1022], "plot_bisect_kmean": [78, 1022], "plot_caching_nearest_neighbor": [291, 1022], "plot_calibr": [61, 375, 1022], "plot_calibration_curv": [62, 1022], "plot_calibration_multiclass": [63, 1022], "plot_causal_interpret": [185, 1022], "plot_chance_level": [248, 263, 276, 278, 279, 700, 702, 1048], "plot_classif": [292, 1022], "plot_classification_prob": [66, 1022], "plot_classifier_chain_yeast": [288, 1022], "plot_classifier_comparison": [67, 1022], "plot_clust": 85, "plot_cluster_comparison": [79, 1022], "plot_coin_segment": [80, 1022], "plot_coin_ward_segment": [81, 1022], "plot_color": [136, 355], "plot_column_transform": [102, 1022], "plot_column_transformer_mixed_typ": [103, 1022], "plot_compare_calibr": [64, 1022], "plot_compare_cross_decomposit": [115, 1022], "plot_compare_gpr_krr": [170, 1022], "plot_compare_method": [231, 1022], "plot_compare_reduct": [104, 1022], "plot_concentration_prior": [254, 1022], "plot_confusion_matrix": [262, 318, 1022, 1042, 1043, 1044, 1045], "plot_cost_complexity_prun": [354, 1022], "plot_cost_sensitive_learn": [263, 1022], "plot_covariance_estim": [109, 1022], "plot_custom_kernel": [335, 1022], "plot_cv_diabet": [159, 1022], "plot_cv_indic": [264, 1022], "plot_cv_predict": [265, 1022], "plot_cyclical_feature_engin": [43, 1022], "plot_dbscan": [82, 1022], "plot_decision_funct": 348, "plot_dendrogram": 76, "plot_det": [266, 1022], "plot_det_curv": [1044, 1045], "plot_dict_face_patch": [83, 1022], "plot_digit": 44, "plot_digits_agglomer": [84, 1022], "plot_digits_classif": [68, 1022], "plot_digits_classification_exercis": [160, 1022], "plot_digits_denois": [44, 1022], "plot_digits_kde_sampl": [293, 1022], "plot_digits_linkag": [85, 1022], "plot_digits_pip": [105, 1022], "plot_discret": [310, 1022], "plot_discretization_classif": [311, 1022], "plot_discretization_strategi": [312, 1022], "plot_display_object_visu": [239, 1022], "plot_distribut": 309, "plot_document_classification_20newsgroup": [350, 1022], "plot_document_clust": [351, 1022], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [195, 1022], "plot_ellips": [70, 254], "plot_embed": 232, "plot_ensemble_oob": [138, 1022], "plot_estimator_represent": [240, 1022], "plot_f_test_vs_mi": [163, 1022], "plot_face_compress": [86, 1022], "plot_face_recognit": [45, 1022], "plot_faces_decomposit": [120, 1022], "plot_feature_agglomeration_vs_univariate_select": [87, 1022], "plot_feature_effect": 350, "plot_feature_select": [164, 1022], "plot_feature_selection_pipelin": [165, 1022], "plot_feature_transform": [139, 1022], "plot_feature_union": [106, 1022], "plot_forest_hist_grad_boosting_comparison": [140, 1022], "plot_forest_import": [141, 1022], "plot_forest_iri": [142, 1022], "plot_galleri": [45, 120], "plot_gmm": [255, 1022], "plot_gmm_covari": [256, 1022], "plot_gmm_init": [257, 1022], "plot_gmm_pdf": [258, 1022], "plot_gmm_select": [259, 1022], "plot_gmm_sin": [260, 1022], "plot_gpc": [171, 1022], "plot_gpc_iri": [172, 1022], "plot_gpc_isoprob": [173, 1022], "plot_gpc_xor": [174, 1022], "plot_gpr_co2": [175, 1022], "plot_gpr_noisi": [176, 1022], "plot_gpr_noisy_target": [177, 1022], "plot_gpr_on_structured_data": [178, 1022], "plot_gpr_prior_posterior": [179, 1022], "plot_gpr_sampl": 179, "plot_gradient_boosting_categor": [143, 1022], "plot_gradient_boosting_early_stop": [144, 1022], "plot_gradient_boosting_oob": [145, 1022], "plot_gradient_boosting_quantil": [146, 1022], "plot_gradient_boosting_regress": [147, 1022], "plot_gradient_boosting_regular": [148, 1022], "plot_grid_search_digit": [267, 1022], "plot_grid_search_refit_cal": [268, 1022], "plot_grid_search_stat": [269, 1022], "plot_grid_search_text_feature_extract": [270, 1022], "plot_hashing_vs_dict_vector": [352, 1022], "plot_hdbscan": [88, 1022], "plot_hgbt_regress": [149, 1022], "plot_huber_vs_ridg": [196, 1022], "plot_hyperplan": [204, 220, 246], "plot_ica_blind_source_separ": [121, 1022], "plot_ica_vs_pca": [122, 1022], "plot_idx": 142, "plot_image_denois": [123, 1022], "plot_incremental_pca": [124, 1022], "plot_indic": 272, "plot_inductive_clust": [89, 1022], "plot_influ": 46, "plot_info": 143, "plot_iris_dtc": [355, 1022], "plot_iris_exercis": [161, 1022], "plot_iris_svc": [336, 1022], "plot_isolation_forest": [150, 1022], "plot_isotonic_regress": [241, 1022], "plot_iterative_imputer_variants_comparison": [181, 1022], "plot_johnson_lindenstrauss_bound": [242, 1022], "plot_kde_1d": [294, 1022], "plot_kernel_approxim": [243, 1022], "plot_kernel_pca": [125, 1022], "plot_kernel_ridge_regress": [244, 1022], "plot_kind": 43, "plot_kmeans_assumpt": [90, 1022], "plot_kmeans_digit": [91, 1022], "plot_kmeans_plusplu": [92, 1022], "plot_kmeans_silhouette_analysi": [93, 1022], "plot_kmeans_stability_low_dim_dens": [94, 1022], "plot_label_propagation_digit": [328, 1022], "plot_label_propagation_digits_active_learn": [329, 1022], "plot_label_propagation_structur": [330, 1022], "plot_lasso_and_elasticnet": [197, 1022], "plot_lasso_dense_vs_sparse_data": [198, 1022], "plot_lasso_lars_": [199, 1022], "plot_lasso_lasso_lars_elasticnet_path": [200, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 1022], "plot_lasso_model_select": [201, 647, 653, 1022], "plot_lda": [69, 1022], "plot_lda_qda": [70, 1022], "plot_learning_curv": [271, 1022], "plot_likelihood_ratio": [272, 1022], "plot_linear_model_coefficient_interpret": [186, 1022], "plot_linearsvc_support_vector": [337, 1022], "plot_linkage_comparison": [95, 1022], "plot_lle_digit": [232, 1022], "plot_lof_novelty_detect": [295, 1022], "plot_lof_outlier_detect": [296, 1022], "plot_logist": [202, 1022], "plot_logistic_l1_l2_spars": [203, 1022], "plot_logistic_multinomi": [204, 1022], "plot_logistic_path": [205, 1022], "plot_lw_vs_oa": [110, 1022], "plot_mahalanobis_dist": [111, 1022], "plot_manifold_spher": [233, 1022], "plot_map_data_to_norm": [313, 1022], "plot_md": [234, 1022], "plot_mean_shift": [96, 1022], "plot_metadata_rout": [245, 1022], "plot_method": [48, 70, 225, 292, 297, 335, 337, 338, 340, 341, 343, 631], "plot_mini_batch_kmean": [97, 1022], "plot_missing_valu": [182, 1022], "plot_mlp_alpha": [304, 1022], "plot_mlp_training_curv": [305, 1022], "plot_mnist_filt": [306, 1022], "plot_model_complexity_influ": [46, 1022], "plot_monotonic_constraint": [151, 1022], "plot_multi_metric_evalu": [273, 1022], "plot_multi_task_lasso_support": [206, 1022], "plot_multiclass_overview": [286, 1022], "plot_multilabel": [246, 1022], "plot_multioutput_face_complet": [247, 1022], "plot_n_features_influ": 49, "plot_nca_classif": [297, 1022], "plot_nca_dim_reduct": [298, 1022], "plot_nca_illustr": [299, 1022], "plot_nearest_centroid": [300, 1022], "plot_nested_cross_validation_iri": [274, 1022], "plot_nnl": [207, 1022], "plot_num": [79, 95, 238], "plot_obs_pr": 229, "plot_ol": [208, 1022], "plot_ols_ridge_vari": [209, 1022], "plot_omp": [210, 1022], "plot_on_dataset": 305, "plot_oneclass": [338, 1022], "plot_opt": [98, 1022], "plot_out_of_core_classif": [47, 1022], "plot_outlier_detection_bench": [248, 1022], "plot_outlier_detection_win": [48, 1022], "plot_partial_depend": [187, 318, 319, 320, 1022, 1037, 1041, 1042, 1043, 1044, 1045, 1046], "plot_partial_dependence_visualization_api": [249, 1022], "plot_pca_iri": [126, 1022], "plot_pca_vs_fa_model_select": [127, 1022], "plot_pca_vs_lda": [128, 1022], "plot_pcr_vs_pl": [116, 1022], "plot_permutation_import": [188, 189, 1022], "plot_permutation_importance_multicollinear": [189, 1022], "plot_permutation_tests_for_classif": [275, 1022], "plot_pipeline_displai": [250, 1022], "plot_poisson_regression_non_normal_loss": [211, 1022], "plot_polynomial_interpol": [212, 879, 883, 1022], "plot_precision_recal": [276, 1022], "plot_precision_recall_curv": [318, 1042, 1044, 1045], "plot_prediction_lat": [49, 1022], "plot_quantile_regress": [213, 1022], "plot_random_forest_embed": [152, 1022], "plot_random_forest_regression_multioutput": [153, 1022], "plot_random_multilabel_dataset": [118, 1022], "plot_randomized_search": [277, 1022], "plot_rang": 136, "plot_ransac": [214, 1022], "plot_rbf_paramet": [339, 1022], "plot_rbm_logistic_classif": [307, 1022], "plot_regress": [301, 1022], "plot_release_highlights_0_22_0": [318, 1022], "plot_release_highlights_0_23_0": [319, 1022], "plot_release_highlights_0_24_0": [320, 1022], "plot_release_highlights_1_0_0": [321, 1022], "plot_release_highlights_1_1_0": [322, 1022], "plot_release_highlights_1_2_0": [323, 1022], "plot_release_highlights_1_3_0": [324, 1022], "plot_release_highlights_1_4_0": [325, 1022], "plot_release_highlights_1_5_0": [326, 1022], "plot_result": [70, 143, 254, 255, 260], "plot_rfe_digit": [166, 1022], "plot_rfe_with_cross_valid": [167, 1022], "plot_ridge_coeff": [215, 1022], "plot_ridge_path": [216, 1022], "plot_robust_fit": [217, 1022], "plot_robust_vs_empirical_covari": [112, 1022], "plot_roc": [278, 1022], "plot_roc_crossv": [279, 1022], "plot_roc_curv": [318, 1042, 1044], "plot_roc_curve_visualization_api": [251, 1022], "plot_roc_pr_curv": 263, "plot_sampl": [122, 260], "plot_scalable_poly_kernel": [191, 1022], "plot_scaling_import": [314, 1022], "plot_scatt": 89, "plot_segmentation_toi": [99, 1022], "plot_select_from_model_diabet": [168, 1022], "plot_self_training_varying_threshold": [331, 1022], "plot_semi_supervised_newsgroup": [332, 1022], "plot_semi_supervised_versus_svm_iri": [333, 1022], "plot_separating_hyperplan": [340, 1022], "plot_separating_hyperplane_unbalanc": [341, 1022], "plot_set_output": [252, 1022], "plot_sgd_comparison": [218, 1022], "plot_sgd_early_stop": [219, 1022], "plot_sgd_iri": [220, 1022], "plot_sgd_loss_funct": [221, 1022], "plot_sgd_penalti": [222, 1022], "plot_sgd_separating_hyperplan": [223, 1022], "plot_sgd_weighted_sampl": [224, 1022], "plot_sgdocsvm_vs_ocsvm": [225, 1022], "plot_sparse_cod": [129, 1022], "plot_sparse_cov": [113, 1022], "plot_sparse_logistic_regression_20newsgroup": [226, 1022], "plot_sparse_logistic_regression_mnist": [227, 1022], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 1022], "plot_species_kd": [302, 1022], "plot_spectral_biclust": [58, 1022], "plot_spectral_coclust": [59, 1022], "plot_stack_predictor": [154, 1022], "plot_step": [136, 142, 355], "plot_step_coars": 142, "plot_stock_market": [51, 1022], "plot_subfigur": 246, "plot_successive_halving_heatmap": [280, 1022], "plot_successive_halving_iter": [281, 1022], "plot_surfac": 187, "plot_svm_anova": [342, 1022], "plot_svm_kernel": [343, 1022], "plot_svm_margin": [344, 1022], "plot_svm_regress": [345, 1022], "plot_svm_scale_c": [346, 1022], "plot_svm_tie_break": [347, 1022], "plot_swissrol": [235, 1022], "plot_t_sne_perplex": [236, 1022], "plot_target_encod": [315, 1022], "plot_target_encoder_cross_v": [316, 1022], "plot_theilsen": [228, 1022], "plot_time_series_lagged_featur": [52, 1022], "plot_titl": 254, "plot_tomography_l1_reconstruct": [53, 1022], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1022], "plot_train_error_vs_test_error": [282, 1022], "plot_training_data_with_decision_boundari": 343, "plot_transformed_target": [107, 1022], "plot_tre": [2, 355, 357, 1017, 1041, 1043, 1044, 1045, 1047, 1048, 1050], "plot_tree_regress": [356, 1022], "plot_tuned_decision_threshold": [283, 1022], "plot_tweedie_regression_insurance_claim": [229, 1022], "plot_underfitting_overfit": [284, 1022], "plot_unveil_tree_structur": [357, 1022], "plot_varimax_fa": [130, 1022], "plot_voting_decision_region": [155, 1022], "plot_voting_proba": [156, 1022], "plot_voting_regressor": [157, 1022], "plot_ward_structured_vs_unstructur": [100, 1022], "plot_weighted_sampl": [348, 1022], "plotli": [140, 270, 375, 393, 400], "pls1": [410, 483], "pls2": [410, 483], "plsca": [115, 482], "plscanon": [2, 115, 481, 483, 484, 1002, 1023, 1027, 1036, 1040, 1042, 1044, 1046, 1050], "plsregress": [2, 115, 116, 1002, 1023, 1027, 1039, 1042, 1044, 1046, 1048, 1050], "plssvd": [2, 481, 482, 1023, 1027, 1044, 1046, 1050], "plsw2a": 410, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 322, 323, 325, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 371, 382, 437, 502, 631, 632, 697, 698, 700, 701, 702, 806, 823, 918, 1008, 1029], "plu": [276, 372, 380, 679, 835, 838, 1002, 1015], "plug": [412, 997, 1025], "plugin": 393, "plural": 1038, "pm": [179, 187, 279, 414, 1001], "pmlr": 696, "pmml": 1020, "png": [0, 68, 916], "pnucci": 1048, "po": [147, 234, 415], "podshumok": [1038, 1039], "poesio": 716, "poetri": 401, "poh": [1040, 1041], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 82, 85, 88, 91, 93, 97, 100, 111, 112, 115, 118, 119, 121, 123, 125, 126, 134, 136, 140, 142, 143, 144, 149, 152, 167, 168, 172, 177, 178, 183, 186, 187, 188, 193, 201, 206, 208, 209, 211, 212, 213, 215, 217, 220, 223, 224, 228, 229, 231, 232, 233, 234, 235, 238, 241, 243, 256, 260, 261, 262, 266, 270, 271, 272, 276, 278, 279, 286, 288, 289, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 310, 311, 313, 315, 326, 328, 329, 331, 333, 335, 339, 340, 341, 343, 344, 347, 348, 350, 351, 352, 355, 356, 358, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 383, 387, 389, 390, 403, 406, 407, 412, 413, 414, 415, 418, 419, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 459, 460, 468, 471, 473, 496, 498, 504, 512, 514, 515, 519, 522, 525, 530, 533, 535, 541, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 611, 628, 631, 632, 633, 637, 638, 639, 644, 645, 651, 655, 657, 658, 670, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 701, 706, 707, 710, 713, 717, 723, 725, 731, 736, 737, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 764, 779, 780, 790, 791, 797, 798, 800, 814, 816, 822, 825, 827, 834, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 865, 869, 874, 883, 884, 898, 899, 900, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 928, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1027, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "pointer": [375, 383, 441, 1041], "pointplot": 149, "points_color": 231, "pointwis": [137, 177, 418, 443], "poisson": [2, 43, 52, 183, 192, 246, 371, 414, 463, 464, 496, 523, 552, 558, 562, 565, 648, 669, 672, 680, 706, 724, 745, 749, 750, 752, 830, 864, 865, 868, 869, 877, 878, 879, 884, 913, 915, 952, 997, 1017, 1022, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "poisson_gbrt": 211, "poisson_glm": 211, "poissonregressor": [2, 211, 229, 319, 322, 648, 680, 997, 1043, 1046, 1047], "pokorni": 1047, "pola": 52, "polar": [105, 175, 375, 387, 393, 400, 431, 441, 442, 444, 446, 448, 463, 467, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 688, 689, 692, 848, 853, 856, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 1049, 1050], "pole": 233, "poli": [43, 161, 191, 269, 336, 343, 345, 451, 535, 620, 765, 774, 800, 879, 906, 907, 908, 909, 910, 997, 1011], "polici": [149, 185, 186, 211, 229, 263, 378, 389, 535, 541, 997, 1047], "policyhold": [211, 229, 997], "polit": [57, 350, 370, 374, 997, 1002], "pollak": 1050, "polli": 350, "pollut": [350, 728, 785, 1001, 1007], "polmauri": 1039, "poloso": 1046, "polycollect": [806, 823], "polynomi": [2, 54, 181, 183, 190, 192, 211, 217, 243, 250, 269, 284, 294, 320, 321, 336, 345, 367, 371, 451, 490, 620, 639, 640, 641, 643, 645, 672, 765, 774, 775, 830, 865, 874, 876, 879, 883, 904, 906, 907, 908, 909, 910, 996, 1016, 1022, 1023, 1027, 1044, 1045], "polynomial_featur": 284, "polynomial_kernel": [2, 403, 765, 999, 1049], "polynomialcountsketch": [2, 191, 639, 641, 993, 1044, 1046, 1049], "polynomialfeatur": [2, 43, 193, 211, 212, 217, 250, 284, 320, 343, 883, 997, 1011, 1036, 1040, 1041, 1042, 1045, 1046, 1048, 1049], "polynomialfeaturespolynomialfeatur": 250, "polysemi": 412, "polytop": 515, "pomegran": 1020, "ponc": [412, 531, 537], "poncho": 1025, "pone": 369, "ponnuthurai": 372, "ponzi": 315, "pooch": [86, 375, 393, 400], "pooja": [1047, 1048, 1049], "pool": [278, 387, 444, 635, 969, 1021, 1043], "pooling_func": [444, 1040], "poolqc": 143, "poolsawat": [1046, 1047], "poor": [187, 191, 275, 331, 405, 411, 412, 690, 694, 738, 841, 844, 845, 995, 996, 998, 1003, 1021, 1039, 1040, 1041, 1043, 1045], "poor_scor": [920, 922], "poorer": [143, 358, 412], "poorest": 1003, "poorli": [62, 64, 95, 109, 116, 137, 148, 235, 363, 407, 414, 528, 630, 997, 998, 1038], "poorna": [1042, 1044], "pop": [357, 387, 919, 1040], "popa": [1042, 1043], "popitem": 919, "popo": 1035, "popul": [104, 109, 111, 149, 186, 211, 248, 272, 309, 370, 384, 389, 409, 439, 489, 712, 718, 846, 847, 848, 850, 852, 854, 855, 856, 969, 1001, 1007, 1011, 1017], "popular": [6, 10, 181, 235, 370, 373, 380, 383, 387, 389, 413, 414, 415, 417, 451, 461, 991, 993, 997, 999, 1006, 1015, 1021], "port": [373, 393, 1042], "portabl": [401, 1020], "portfolio": [211, 229, 995], "portion": [45, 47, 112, 144, 168, 278, 362, 370, 372, 375, 381, 389, 788, 825, 842, 990, 1000, 1004], "portland": [407, 418, 443], "portnoi": [997, 1049], "portrait": [45, 412], "pos_class": 47, "pos_label": [239, 248, 263, 283, 389, 406, 437, 438, 698, 700, 702, 706, 707, 709, 727, 729, 730, 738, 782, 783, 784, 787, 789, 799, 871, 888, 1001, 1040, 1044, 1046, 1050], "pos_lr": 272, "pos_lr_bas": 272, "pos_lr_base_std": 272, "pos_tagg": 415, "pos_vector": 415, "pos_window": 415, "pose": [215, 277, 997], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 100, 130, 149, 151, 156, 166, 179, 185, 186, 197, 200, 207, 211, 212, 213, 215, 229, 234, 242, 248, 263, 266, 269, 272, 276, 278, 279, 282, 283, 309, 319, 320, 324, 326, 350, 357, 362, 370, 374, 375, 377, 382, 384, 389, 390, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 437, 438, 441, 445, 446, 448, 463, 466, 494, 498, 500, 504, 508, 509, 510, 525, 527, 529, 530, 531, 533, 535, 536, 537, 542, 545, 546, 548, 549, 550, 557, 561, 562, 563, 564, 592, 593, 594, 595, 596, 598, 599, 600, 602, 606, 610, 611, 620, 631, 632, 643, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 669, 672, 673, 674, 675, 677, 680, 681, 682, 683, 684, 687, 690, 698, 700, 702, 707, 709, 712, 713, 715, 716, 718, 720, 722, 724, 727, 729, 730, 731, 735, 736, 738, 739, 740, 741, 743, 744, 752, 754, 758, 766, 782, 783, 784, 787, 788, 789, 797, 798, 799, 803, 804, 827, 844, 845, 846, 848, 850, 852, 854, 856, 857, 867, 868, 871, 877, 880, 883, 888, 892, 896, 897, 899, 900, 904, 905, 908, 909, 910, 912, 914, 921, 924, 927, 946, 948, 965, 967, 992, 993, 997, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1016, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "position": 389, "positive_class": [47, 712], "positive_cod": [120, 531, 537, 542, 545, 546], "positive_dict": [120, 531, 537, 545, 546], "positive_featur": 380, "positive_likelihood_ratio": [272, 712], "positive_onli": [921, 924], "posix": [363, 387], "posixpath": 52, "possa": 1039, "possibl": [30, 43, 52, 55, 63, 64, 72, 82, 88, 103, 109, 120, 137, 140, 149, 151, 170, 186, 187, 188, 189, 204, 211, 228, 229, 243, 245, 263, 269, 270, 271, 272, 274, 275, 276, 278, 279, 288, 318, 339, 346, 350, 351, 358, 362, 363, 364, 368, 369, 370, 375, 376, 377, 378, 379, 381, 383, 387, 388, 389, 393, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 421, 430, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 496, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 709, 721, 722, 723, 724, 728, 742, 756, 778, 783, 785, 788, 797, 798, 799, 800, 802, 803, 804, 806, 812, 813, 814, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 928, 930, 931, 934, 940, 971, 974, 990, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1009, 1011, 1016, 1017, 1021, 1025, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048], "possibli": [90, 116, 168, 211, 226, 343, 351, 372, 374, 383, 401, 407, 414, 415, 450, 452, 589, 839, 840, 841, 842, 843, 909, 910, 912, 913, 914, 915, 990, 993, 998, 1004, 1011, 1047], "post": [2, 46, 54, 57, 102, 167, 168, 183, 239, 261, 273, 276, 286, 322, 326, 331, 350, 351, 352, 353, 357, 362, 370, 374, 375, 380, 388, 402, 407, 447, 487, 488, 496, 500, 551, 557, 558, 559, 560, 561, 564, 565, 658, 700, 702, 712, 718, 742, 784, 787, 799, 800, 816, 822, 827, 830, 865, 884, 902, 912, 913, 914, 915, 1001, 1017, 1022, 1024, 1025, 1027, 1043], "post1": [373, 393, 399, 400, 1030], "poster": [350, 374, 375], "posterior": [169, 170, 171, 176, 183, 193, 263, 269, 283, 412, 417, 549, 550, 552, 610, 611, 613, 614, 615, 619, 622, 623, 627, 644, 645, 708, 797, 799, 822, 995, 1020, 1022, 1038, 1041], "posteriori": [997, 1003], "postfit_hook": 46, "postiv": 276, "postpon": [377, 379], "postprocess": [61, 405, 535, 541], "postprocessor": 1043, "postscript": 916, "potenti": [2, 43, 64, 88, 109, 149, 182, 185, 187, 193, 204, 263, 295, 296, 304, 324, 325, 343, 352, 362, 363, 373, 389, 393, 398, 406, 407, 411, 414, 415, 467, 481, 482, 483, 484, 496, 524, 549, 557, 558, 561, 562, 564, 565, 573, 606, 611, 634, 763, 822, 894, 895, 902, 912, 913, 914, 915, 1007, 1015, 1017, 1020, 1035, 1042, 1043, 1046, 1049, 1050], "poughon": 1039, "poundal": 102, "pour": 1001, "pourbozorg": [1040, 1041, 1042], "pow": [676, 677, 678, 861, 862], "powel": [45, 370], "power": [2, 43, 46, 55, 140, 144, 185, 212, 229, 260, 272, 277, 293, 309, 310, 313, 328, 336, 362, 363, 388, 405, 407, 410, 413, 414, 415, 418, 443, 481, 482, 483, 532, 535, 541, 544, 630, 680, 694, 724, 747, 749, 752, 846, 847, 854, 855, 857, 858, 879, 880, 881, 892, 893, 947, 948, 997, 998, 1001, 1009, 1011, 1015, 1016, 1025, 1035, 1038, 1040, 1042, 1043, 1045, 1049], "power_iteration_norm": [403, 541, 544, 947, 948, 1046], "power_t": [676, 677, 678, 861, 862, 1015], "power_transform": [2, 880, 893, 1040], "powers_": 879, "powershel": 373, "powertransform": [2, 313, 881, 892, 991, 1011, 1040, 1043, 1046, 1048], "pox": 286, "poznik": [1045, 1046, 1047], "pp": [0, 96, 168, 268, 372, 407, 409, 415, 418, 419, 443, 447, 451, 461, 511, 533, 534, 541, 590, 635, 643, 664, 685, 686, 720, 726, 730, 740, 756, 769, 783, 839, 841, 843, 860, 880, 892, 994, 1001, 1003, 1004, 1014], "pp2013": 993, "pp84": 417, "ppc64le": 383, "ppf": 269, "ppm": 175, "pprint": [55, 146, 245, 270, 370, 943], "pq": [52, 323], "pr": [0, 156, 363, 375, 378, 379, 383, 415, 741, 1001, 1024, 1042, 1044], "pr_displai": 239, "pr_number": 383, "prabakaran": [1040, 1041, 1044, 1046, 1047], "prabhakar": 412, "practic": [64, 86, 103, 111, 116, 123, 140, 143, 144, 149, 170, 185, 186, 191, 197, 204, 213, 238, 244, 270, 277, 295, 296, 320, 326, 339, 343, 363, 375, 377, 378, 379, 381, 383, 388, 389, 407, 409, 411, 412, 413, 414, 415, 417, 446, 451, 461, 521, 524, 589, 632, 633, 670, 797, 843, 897, 904, 990, 991, 995, 997, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1020, 1021, 1023, 1025, 1026, 1027, 1034, 1038, 1040, 1042, 1044], "practicalswift": 1038, "practis": 216, "practition": [138, 215], "pradeep": [1040, 1041], "pragmat": 375, "prakash": [1037, 1039, 1045], "pramod": 1046, "pranayanchuri": 1045, "prang": 376, "prasanth": 1047, "pratama": 1043, "pratap": [1036, 1039, 1046], "prathmesh": 1041, "pratik": 1039, "pratiqu": 372, "pravar": 1040, "pravarmahajan": [1039, 1040], "pre": [44, 103, 186, 201, 282, 309, 352, 373, 375, 389, 393, 406, 409, 411, 412, 414, 415, 416, 418, 419, 442, 443, 446, 458, 533, 535, 690, 712, 763, 799, 867, 909, 1001, 1006, 1011, 1016, 1017, 1020, 1021, 1027, 1035, 1040, 1046, 1050], "pre_dispatch": [800, 806, 814, 823, 825, 826, 827, 828, 831, 966, 1035], "preambl": 88, "prec": [113, 239, 527, 1001], "prec_": 113, "prec_macro": 411, "preced": [363, 375, 379, 486, 1001, 1032], "precipit": 405, "precis": [2, 8, 45, 52, 62, 68, 102, 107, 113, 120, 165, 176, 177, 183, 191, 239, 261, 262, 263, 267, 307, 309, 328, 329, 375, 377, 389, 403, 404, 405, 406, 407, 409, 412, 414, 442, 468, 469, 470, 471, 472, 473, 474, 475, 477, 504, 523, 532, 534, 541, 544, 644, 645, 646, 648, 650, 651, 652, 654, 655, 656, 669, 672, 674, 680, 682, 683, 687, 699, 700, 706, 707, 708, 713, 727, 729, 730, 731, 739, 741, 763, 782, 783, 784, 787, 788, 797, 798, 822, 830, 833, 844, 845, 850, 865, 884, 888, 904, 909, 916, 918, 948, 995, 997, 1004, 1005, 1016, 1022, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "precision_": [51, 113, 468, 469, 470, 471, 472, 473, 474, 475], "precision_macro": 411, "precision_recall_curv": [2, 239, 276, 700, 706, 707, 727, 1001, 1033, 1034, 1038, 1045, 1046, 1048, 1050], "precision_recall_fscore_support": [2, 713, 729, 730, 784, 787, 1001, 1036, 1040, 1042, 1048], "precision_scor": [2, 62, 263, 276, 708, 787, 1001, 1032, 1034, 1035, 1036, 1037, 1042, 1048], "precision_threshold": 267, "precisionrecalldisplai": [2, 263, 276, 321, 782, 784, 787, 1001, 1042, 1045, 1048, 1049, 1050], "precisions_": [797, 798], "precisions_cholesky_": [797, 798, 1046], "precisions_init": [798, 1046, 1048], "precompil": 373, "precomput": [119, 120, 121, 183, 192, 210, 234, 245, 289, 291, 377, 384, 387, 389, 407, 415, 418, 430, 439, 440, 443, 444, 445, 449, 451, 456, 464, 470, 481, 482, 483, 524, 531, 535, 537, 540, 541, 542, 548, 554, 556, 558, 560, 562, 565, 568, 570, 610, 611, 620, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 682, 684, 685, 688, 690, 691, 692, 696, 774, 778, 781, 792, 793, 800, 814, 837, 838, 846, 847, 848, 850, 851, 852, 854, 855, 856, 862, 905, 906, 907, 908, 909, 910, 913, 915, 921, 976, 977, 978, 993, 997, 999, 1004, 1016, 1021, 1022, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "precompute_dist": [1036, 1043], "precompute_gram": 1034, "precomputed_nearest_neighbor": [451, 691], "precondit": [407, 451, 461, 695, 1017, 1048], "pred": [43, 46, 50, 52, 68, 347, 350, 370, 648, 669, 680, 697, 702, 706, 718, 729, 730, 738, 783, 784, 787, 788, 1001], "pred1": 157, "pred2": 157, "pred3": 157, "pred4": 157, "pred_background": 50, "pred_decis": [735, 1001, 1045], "pred_entropi": [328, 329], "pred_nam": 45, "pred_ort": 401, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [134, 449, 454, 455, 456, 1049], "predecessor_": [449, 456], "predecessor_correct": [449, 455], "predefin": [2, 273, 813, 990, 1004, 1047, 1049], "predefinedsplit": [2, 411, 1036], "predetermin": [407, 998], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 89, 90, 91, 95, 102, 103, 104, 105, 107, 115, 130, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 165, 166, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 191, 193, 196, 197, 204, 207, 208, 209, 212, 213, 214, 215, 217, 218, 219, 220, 225, 226, 228, 229, 238, 239, 241, 243, 245, 247, 255, 256, 257, 258, 259, 260, 261, 262, 267, 269, 271, 272, 275, 278, 279, 283, 284, 286, 288, 292, 295, 296, 297, 300, 301, 307, 309, 310, 314, 315, 318, 319, 320, 321, 322, 324, 325, 326, 329, 331, 332, 333, 335, 336, 338, 339, 343, 345, 346, 347, 350, 351, 355, 357, 358, 361, 363, 367, 370, 372, 375, 377, 382, 384, 389, 392, 398, 401, 402, 403, 405, 407, 408, 410, 412, 414, 415, 416, 421, 424, 429, 430, 436, 437, 438, 439, 441, 442, 443, 446, 447, 448, 464, 468, 481, 482, 483, 486, 501, 508, 524, 534, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 582, 593, 594, 602, 606, 610, 611, 613, 614, 615, 616, 622, 625, 627, 628, 630, 631, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 714, 715, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 738, 741, 742, 743, 746, 748, 750, 752, 756, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 796, 797, 798, 799, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 861, 862, 864, 871, 884, 885, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 974, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "predict_ecoc": 1036, "predict_joint_log_proba": [839, 840, 841, 842, 843, 1047], "predict_log_proba": [377, 389, 549, 550, 551, 553, 555, 557, 559, 564, 593, 594, 658, 659, 676, 799, 800, 803, 804, 814, 822, 825, 835, 839, 840, 841, 842, 843, 861, 864, 901, 906, 909, 912, 914, 1016, 1032, 1045, 1049], "predict_ovo": 1036, "predict_ovr": 1036, "predict_param": [245, 464, 567, 568, 593, 594, 1045], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 152, 156, 168, 171, 172, 173, 174, 263, 278, 283, 288, 304, 311, 314, 318, 320, 326, 350, 377, 382, 389, 405, 406, 414, 436, 437, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 593, 594, 610, 619, 620, 622, 623, 631, 632, 633, 658, 659, 676, 698, 700, 702, 722, 741, 742, 788, 797, 798, 799, 800, 803, 804, 814, 822, 825, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 854, 861, 864, 871, 899, 900, 901, 906, 909, 912, 914, 923, 997, 1001, 1003, 1005, 1008, 1014, 1015, 1016, 1017, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "predict_proba_ovr": 1036, "predicted_label": [328, 329], "prediction_df": 149, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 107, 154, 186, 265, 323, 1001, 1047, 1049], "predictions_kr": 170, "predictive_analyt": 1017, "predictive_word": 350, "predictor": [2, 107, 133, 135, 143, 157, 181, 183, 211, 229, 240, 377, 388, 389, 408, 410, 411, 414, 417, 465, 466, 481, 482, 483, 496, 516, 517, 518, 555, 556, 562, 565, 568, 602, 610, 630, 632, 633, 648, 653, 657, 669, 673, 680, 701, 825, 827, 836, 837, 864, 865, 877, 878, 884, 974, 997, 1002, 1022, 1033, 1039, 1042], "predispatch": [806, 823, 828, 831], "predit": 116, "predomin": [377, 1033], "prefer": [73, 79, 88, 149, 260, 278, 309, 358, 362, 363, 364, 375, 376, 377, 389, 407, 411, 412, 414, 415, 439, 453, 470, 471, 477, 486, 508, 509, 627, 632, 633, 654, 658, 659, 701, 726, 728, 742, 757, 758, 835, 853, 879, 904, 905, 954, 966, 990, 993, 995, 997, 1001, 1006, 1016, 1017, 1020, 1024, 1033, 1039, 1041, 1045, 1046, 1049], "prefetch": 966, "prefit": [63, 263, 389, 405, 406, 416, 436, 567, 568, 597, 799, 822, 1021, 1044, 1045, 1046], "prefix": [2, 55, 102, 270, 291, 318, 375, 379, 381, 383, 417, 423, 441, 442, 444, 446, 448, 463, 466, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 639, 640, 641, 642, 688, 689, 692, 806, 828, 848, 853, 856, 860, 863, 864, 870, 896, 897, 1038, 1039, 1045, 1047, 1050], "prein": [0, 365, 1044, 1045, 1046], "preiss": 1045, "preliminari": 461, "prematur": 1045, "prepar": [212, 245, 350, 362, 379, 381, 383, 923, 1017, 1025, 1040, 1048], "prepend": [186, 1032], "preprint": 372, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 82, 86, 88, 91, 95, 102, 103, 104, 105, 107, 116, 120, 130, 139, 143, 164, 166, 168, 175, 188, 191, 193, 195, 199, 201, 203, 211, 212, 217, 227, 229, 232, 239, 240, 249, 252, 263, 266, 276, 278, 283, 284, 292, 297, 298, 304, 305, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 332, 339, 342, 351, 364, 367, 369, 372, 375, 380, 388, 389, 401, 403, 404, 407, 408, 411, 414, 415, 416, 463, 464, 465, 466, 488, 567, 581, 582, 588, 589, 591, 630, 658, 659, 672, 674, 676, 678, 687, 833, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 907, 909, 910, 991, 997, 1002, 1005, 1012, 1015, 1016, 1018, 1020, 1022, 1024, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "preprocessor": [103, 154, 186, 211, 240, 248, 250, 315, 319, 321, 322, 323, 325, 408, 415, 588, 589, 591, 1020, 1032, 1035, 1040, 1042], "preprocessor__cat__selector__percentil": 103, "preprocessor__num__imputer__strategi": 103, "preprocessor_list": 248, "prescrib": 389, "presenc": [2, 48, 93, 95, 111, 112, 132, 185, 189, 197, 215, 248, 309, 373, 376, 389, 409, 412, 712, 726, 756, 769, 833, 867, 875, 877, 884, 984, 991, 997, 1001, 1002, 1015, 1024, 1035, 1036, 1038, 1042, 1044, 1046], "present": [0, 2, 43, 44, 52, 78, 82, 118, 120, 127, 139, 140, 146, 149, 150, 167, 168, 176, 179, 193, 196, 197, 201, 211, 238, 241, 245, 259, 263, 267, 272, 275, 278, 279, 289, 309, 312, 314, 351, 372, 373, 377, 380, 387, 389, 398, 405, 407, 409, 412, 414, 415, 425, 426, 429, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 488, 489, 490, 491, 492, 496, 500, 501, 502, 503, 504, 505, 510, 531, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 549, 550, 561, 562, 563, 566, 569, 570, 581, 582, 583, 588, 589, 591, 617, 627, 628, 629, 630, 650, 654, 677, 688, 689, 690, 691, 712, 729, 730, 738, 769, 783, 784, 787, 797, 798, 800, 803, 804, 812, 814, 828, 846, 847, 848, 850, 852, 854, 855, 856, 863, 868, 876, 877, 878, 879, 880, 882, 885, 896, 897, 908, 916, 918, 919, 948, 984, 1000, 1001, 1002, 1003, 1008, 1011, 1019, 1021, 1035, 1040, 1042, 1043, 1044, 1046, 1047, 1049], "preserv": [37, 43, 125, 235, 242, 264, 378, 411, 412, 414, 415, 581, 588, 589, 591, 646, 652, 696, 774, 778, 818, 819, 820, 888, 925, 930, 931, 991, 997, 998, 1011, 1013, 1020, 1032, 1035, 1036, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050], "preserves_dtyp": 925, "preservs": 1046, "preset": [666, 668, 676, 1005], "presort": [1037, 1042], "press": [370, 407, 412, 417, 418, 443, 590, 610, 611, 614, 619, 622, 643, 839, 843, 994, 997, 999, 1003], "pressur": [168, 372], "preston": [1037, 1038, 1039], "presum": [186, 288, 407, 415, 839], "prettenhof": [0, 397, 1032, 1033, 1034, 1035, 1036, 1037], "pretti": [187, 235, 267, 350, 362, 375, 387, 861, 862, 1005, 1041], "preuss": 1048, "prev_scor": 55, "preval": [134, 318, 389, 700, 712, 1001], "prevalence_pos_label": [276, 700], "prevent": [43, 88, 144, 146, 165, 185, 208, 212, 215, 309, 315, 316, 339, 350, 354, 358, 375, 377, 379, 387, 388, 401, 403, 407, 412, 415, 441, 448, 487, 488, 561, 562, 590, 591, 611, 728, 785, 861, 862, 889, 890, 892, 893, 894, 895, 1001, 1003, 1006, 1007, 1011, 1017, 1034, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "previou": [43, 78, 86, 103, 120, 137, 143, 144, 146, 154, 170, 175, 176, 185, 186, 187, 197, 198, 212, 242, 244, 245, 263, 269, 272, 276, 309, 314, 322, 350, 351, 352, 358, 362, 370, 375, 377, 379, 380, 381, 383, 387, 389, 390, 393, 406, 407, 414, 415, 467, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 630, 646, 648, 652, 653, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 707, 819, 835, 838, 853, 861, 862, 901, 918, 997, 1001, 1005, 1011, 1021, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "previous": [46, 86, 90, 103, 134, 176, 186, 263, 267, 276, 283, 322, 370, 383, 387, 393, 407, 412, 415, 439, 442, 453, 524, 534, 541, 649, 658, 659, 666, 667, 668, 676, 677, 678, 904, 997, 1011, 1020, 1029, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "previous_loss": [666, 667, 668, 677], "previs": 239, "price": [51, 107, 143, 144, 149, 154, 248, 315, 991, 997, 998, 1025], "priceless": 375, "prieur": 1045, "primal": [658, 659, 677, 904, 905, 1015, 1016], "primari": [389, 412, 515, 921, 1008, 1024, 1025], "primarili": [260, 274, 375, 389, 403, 407, 958, 1025, 1041, 1042], "primat": 350, "primdal": 1040, "primit": 1047, "princ": 1045, "princip": [2, 42, 114, 115, 119, 122, 124, 125, 128, 130, 152, 183, 220, 231, 243, 246, 256, 262, 275, 292, 298, 314, 320, 355, 367, 407, 410, 419, 483, 504, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 550, 657, 688, 689, 690, 692, 693, 830, 853, 865, 884, 919, 947, 948, 998, 1004, 1022, 1026, 1027, 1032], "principl": [134, 177, 294, 352, 375, 387, 389, 390, 411, 414, 948, 990, 1000, 1004, 1015, 1039], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 96, 100, 102, 103, 105, 106, 107, 111, 115, 116, 118, 120, 123, 126, 127, 128, 130, 134, 137, 140, 141, 142, 143, 145, 147, 149, 159, 160, 164, 165, 167, 168, 170, 171, 173, 175, 179, 185, 187, 188, 189, 191, 197, 198, 200, 203, 207, 208, 211, 213, 214, 215, 218, 219, 226, 227, 229, 232, 233, 236, 240, 242, 244, 245, 248, 252, 257, 262, 263, 267, 268, 269, 270, 272, 274, 277, 278, 282, 289, 293, 300, 302, 305, 306, 307, 311, 314, 316, 318, 319, 320, 322, 324, 325, 326, 328, 329, 332, 339, 350, 351, 352, 354, 357, 358, 362, 369, 370, 373, 376, 377, 383, 389, 398, 401, 408, 411, 414, 415, 417, 463, 466, 467, 471, 477, 489, 494, 502, 512, 513, 541, 544, 549, 550, 559, 560, 561, 562, 564, 565, 569, 570, 577, 583, 584, 585, 587, 588, 589, 591, 612, 617, 618, 630, 646, 647, 649, 650, 652, 653, 654, 656, 660, 661, 662, 663, 666, 667, 676, 677, 684, 696, 713, 717, 737, 795, 797, 798, 799, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 831, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 865, 866, 874, 880, 884, 892, 902, 903, 904, 905, 906, 909, 911, 917, 929, 934, 961, 984, 991, 1001, 1002, 1003, 1004, 1009, 1017, 1032, 1034, 1040, 1041, 1043, 1047], "print_changed_onli": [467, 902, 1041, 1043, 1044], "print_datafram": 267, "print_progress": 966, "print_rout": 245, "printabl": 1024, "prior": [2, 42, 46, 55, 80, 81, 90, 98, 99, 100, 118, 169, 170, 176, 182, 183, 188, 193, 195, 197, 253, 255, 259, 260, 263, 269, 280, 299, 375, 377, 389, 393, 398, 407, 410, 412, 414, 416, 417, 464, 523, 536, 548, 549, 550, 551, 559, 611, 613, 614, 615, 619, 622, 623, 630, 644, 645, 646, 647, 651, 652, 654, 655, 656, 660, 661, 662, 672, 678, 681, 716, 797, 839, 840, 841, 842, 843, 864, 865, 879, 906, 909, 967, 990, 993, 995, 997, 1000, 1001, 1003, 1009, 1017, 1018, 1022, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1048], "prior_k": 549, "priori": [211, 228, 278, 288, 309, 389, 407, 414, 588, 594, 1000, 1048], "priorit": [406, 1021, 1039], "prioriti": [374, 632, 832, 833, 1021, 1035], "priors_": [549, 550], "privaci": 1020, "privat": [0, 377, 379, 389, 390, 926, 1025, 1032, 1040, 1042, 1043, 1045, 1046], "privileg": [248, 383], "priyam": 1047, "priyank": 1050, "priyansh": 1050, "priyash": 1050, "prng": 113, "pro": [401, 1000], "proanthocyanin": 372, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [437, 438], "prob_tru": [437, 438], "proba": [62, 64, 156, 436, 912, 914], "proba_": [906, 909, 1043], "proba_map": 88, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 113, 119, 120, 129, 130, 169, 170, 173, 176, 177, 183, 244, 263, 350, 389, 405, 413, 414, 436, 472, 475, 532, 534, 535, 541, 559, 588, 589, 610, 622, 643, 645, 676, 703, 741, 800, 826, 871, 906, 907, 909, 910, 994, 995, 997, 1000, 1001, 1006, 1011, 1016, 1017, 1020, 1022, 1025, 1032, 1035, 1039], "probabilisticpca": [1032, 1035], "probabilities_": [88, 445], "probabilities_or_label": 569, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 88, 107, 118, 133, 136, 147, 149, 155, 163, 169, 170, 171, 172, 183, 186, 189, 204, 223, 226, 227, 231, 235, 239, 241, 242, 263, 269, 271, 272, 275, 276, 279, 283, 286, 288, 307, 309, 313, 318, 320, 326, 331, 333, 345, 346, 362, 370, 371, 377, 381, 387, 389, 406, 407, 411, 412, 415, 416, 417, 433, 434, 435, 436, 437, 438, 445, 446, 448, 504, 512, 515, 523, 527, 549, 550, 551, 553, 555, 557, 559, 561, 564, 567, 569, 570, 593, 594, 610, 613, 614, 622, 627, 631, 632, 633, 658, 659, 671, 676, 692, 698, 700, 702, 703, 706, 707, 709, 712, 716, 720, 722, 726, 727, 729, 739, 740, 741, 756, 782, 784, 787, 788, 789, 794, 797, 798, 799, 800, 803, 804, 814, 822, 829, 830, 833, 835, 836, 839, 840, 841, 842, 843, 846, 849, 854, 860, 861, 885, 897, 898, 899, 900, 901, 904, 906, 909, 912, 914, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1017, 1021, 1022, 1023, 1027, 1032, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046], "probable_clust": 89, "probas_pr": [782, 1050], "probb_": [906, 909, 1043], "probe": 1009, "probinette4": 1044, "probl": [607, 608], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 87, 88, 90, 99, 120, 134, 137, 140, 146, 147, 170, 183, 188, 191, 193, 197, 198, 201, 204, 205, 206, 211, 213, 215, 228, 229, 233, 238, 239, 246, 248, 251, 267, 269, 274, 278, 279, 283, 284, 286, 288, 289, 294, 301, 313, 321, 325, 326, 336, 339, 343, 346, 347, 350, 351, 357, 358, 362, 370, 371, 372, 373, 374, 376, 377, 380, 381, 383, 384, 387, 389, 395, 405, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 443, 446, 448, 449, 451, 456, 461, 464, 477, 503, 508, 509, 515, 516, 517, 518, 523, 524, 528, 531, 533, 537, 539, 542, 543, 544, 545, 546, 547, 548, 551, 552, 557, 561, 564, 567, 571, 573, 589, 610, 631, 643, 648, 650, 652, 654, 655, 656, 657, 658, 659, 664, 665, 666, 668, 669, 672, 673, 674, 675, 676, 677, 679, 680, 685, 686, 687, 688, 689, 691, 693, 695, 708, 716, 719, 729, 730, 735, 738, 739, 783, 784, 787, 788, 797, 798, 801, 802, 803, 804, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 832, 833, 834, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 870, 871, 877, 885, 888, 894, 895, 904, 905, 912, 914, 936, 948, 991, 992, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1015, 1018, 1021, 1023, 1025, 1026, 1027, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "problemat": [43, 186, 263, 265, 408, 991, 1040], "proc": [64, 110, 405, 415, 449, 689, 693, 839, 990, 998, 1003, 1007], "proce": [83, 165, 195, 373, 379, 410, 411, 414, 439, 877, 997], "procedur": [25, 80, 89, 140, 146, 168, 194, 199, 259, 271, 312, 316, 339, 350, 358, 375, 387, 388, 389, 390, 405, 409, 411, 412, 414, 416, 531, 537, 538, 540, 545, 546, 547, 553, 554, 555, 556, 559, 560, 593, 595, 602, 609, 644, 672, 674, 687, 728, 785, 846, 854, 861, 862, 881, 893, 921, 971, 990, 997, 1003, 1011, 1014, 1015, 1016, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "proceed": [111, 168, 370, 372, 407, 418, 438, 443, 511, 696, 708, 726, 756, 851, 901, 1001, 1013, 1014, 1015], "process": [0, 2, 19, 37, 43, 44, 57, 63, 66, 67, 70, 80, 81, 83, 99, 102, 104, 106, 110, 112, 121, 122, 124, 134, 136, 142, 144, 146, 151, 152, 161, 185, 193, 196, 213, 215, 221, 222, 223, 224, 244, 245, 246, 248, 254, 255, 258, 260, 263, 269, 271, 272, 281, 286, 304, 309, 312, 320, 324, 329, 333, 343, 344, 348, 351, 352, 354, 362, 363, 364, 370, 374, 375, 377, 379, 381, 384, 387, 388, 389, 401, 407, 408, 409, 411, 412, 413, 414, 415, 416, 420, 447, 448, 474, 496, 504, 523, 534, 535, 536, 537, 538, 561, 562, 563, 588, 589, 591, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 632, 633, 639, 643, 664, 672, 685, 686, 703, 723, 741, 781, 797, 799, 800, 803, 804, 814, 822, 825, 826, 827, 836, 837, 853, 867, 871, 873, 874, 875, 884, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 966, 990, 993, 997, 1001, 1004, 1011, 1013, 1015, 1017, 1020, 1021, 1022, 1023, 1025, 1027, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049], "process_rout": [2, 245, 1049], "processor": [103, 154, 186, 418, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 531, 535, 536, 537, 539, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 632, 634, 639, 647, 651, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 846, 847, 850, 852, 854, 855, 857, 858, 863, 866, 899, 900], "procter": 51, "prod": [351, 621], "prod_": 1003, "prod_i": 993, "proding": 1048, "produc": [52, 53, 62, 63, 79, 90, 102, 123, 146, 147, 148, 150, 197, 204, 275, 307, 331, 358, 363, 370, 371, 375, 377, 380, 389, 390, 407, 408, 411, 412, 414, 439, 442, 445, 451, 519, 536, 559, 563, 581, 588, 593, 594, 632, 633, 802, 803, 804, 812, 817, 820, 825, 869, 879, 906, 909, 992, 993, 997, 999, 1000, 1001, 1004, 1007, 1008, 1012, 1014, 1015, 1016, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "product": [2, 58, 103, 120, 155, 170, 175, 187, 343, 358, 362, 377, 378, 381, 384, 404, 412, 414, 450, 538, 540, 547, 582, 589, 590, 591, 613, 614, 633, 640, 664, 665, 685, 686, 761, 763, 775, 777, 876, 879, 896, 897, 949, 990, 993, 997, 999, 1011, 1013, 1015, 1016, 1020, 1025, 1027, 1040], "production": 1025, "prof": 381, "profession": 186, "professor": 1025, "profil": [211, 362, 375, 378, 521, 524, 997, 1025], "profile_default": 381, "profit": [0, 263, 326, 1049], "prog": [168, 372], "prognosi": [168, 372], "program": [0, 83, 168, 351, 358, 363, 364, 372, 373, 375, 377, 381, 387, 508, 635, 670, 894, 895, 997, 1016, 1017, 1020, 1021, 1024, 1032, 1034], "programmat": [377, 499, 1041], "progress": [43, 46, 47, 120, 157, 168, 182, 205, 208, 294, 322, 372, 379, 380, 390, 398, 403, 407, 559, 560, 692, 833, 835, 838, 853, 861, 862, 1025, 1032, 1034, 1041, 1046], "prohibit": [185, 248, 411, 414, 627, 1006, 1014, 1039], "proj": [53, 649], "proj_gradi": 381, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 88, 91, 100, 119, 120, 122, 124, 126, 130, 174, 176, 178, 179, 183, 187, 231, 232, 233, 235, 237, 239, 243, 246, 255, 293, 298, 302, 307, 336, 351, 362, 367, 369, 373, 374, 375, 380, 381, 384, 389, 390, 393, 404, 410, 412, 413, 419, 439, 445, 450, 451, 461, 473, 481, 482, 483, 484, 488, 502, 504, 531, 533, 534, 535, 537, 539, 541, 542, 543, 544, 548, 549, 573, 582, 589, 641, 642, 649, 672, 674, 688, 691, 695, 696, 834, 853, 881, 896, 897, 898, 947, 948, 995, 997, 998, 999, 1002, 1004, 1005, 1007, 1014, 1017, 1022, 1025, 1027, 1032, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "projected_data": 242, "projected_dist": 242, "projectedgradientnmf": 1037, "prokopi": [1037, 1040], "prolifer": 377, "prolin": [57, 314, 372], "promin": [123, 389], "promis": [389, 1021], "promot": [186, 441, 708, 1020, 1043, 1045, 1049], "prompt": [373, 375, 379, 393, 400, 415], "prone": [64, 211, 256, 313, 387, 405], "pronounc": [74, 75, 85, 175], "proof": [387, 414, 898, 1013], "prop": [105, 112, 217, 256, 295, 338, 357], "propag": [2, 58, 68, 71, 72, 82, 96, 166, 183, 327, 370, 439, 453, 502, 512, 514, 697, 704, 705, 713, 714, 717, 718, 737, 793, 795, 864, 878, 899, 900, 901, 966, 967, 1005, 1022, 1023, 1026, 1027, 1032, 1044, 1047], "proper": [64, 88, 201, 204, 229, 263, 364, 377, 381, 405, 414, 448, 541, 553, 676, 948, 975, 996, 997, 998, 1001, 1016, 1032, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "properli": [43, 52, 62, 88, 151, 175, 264, 282, 318, 364, 373, 375, 379, 383, 413, 904, 905, 906, 907, 908, 909, 910, 990, 1035, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "properti": [51, 62, 177, 178, 213, 228, 255, 291, 314, 357, 362, 368, 375, 377, 393, 404, 405, 407, 409, 412, 414, 416, 417, 422, 441, 444, 450, 451, 452, 463, 464, 542, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 591, 593, 594, 597, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 646, 652, 655, 660, 662, 674, 675, 699, 704, 705, 708, 799, 800, 803, 804, 814, 822, 832, 833, 863, 864, 877, 878, 879, 885, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 993, 996, 997, 998, 1001, 1002, 1004, 1007, 1011, 1014, 1016, 1017, 1018, 1021, 1037, 1041, 1042, 1045, 1046, 1049, 1050], "property_magnitud": 263, "propon": 102, "proport": [54, 63, 75, 149, 167, 198, 211, 218, 224, 238, 248, 263, 272, 276, 292, 296, 299, 346, 348, 357, 362, 370, 405, 407, 409, 411, 412, 414, 415, 437, 438, 445, 468, 473, 515, 549, 550, 555, 557, 559, 560, 561, 562, 563, 564, 583, 584, 588, 591, 627, 632, 658, 659, 666, 667, 668, 674, 675, 676, 678, 696, 701, 712, 722, 801, 802, 803, 804, 817, 820, 830, 850, 861, 862, 878, 904, 905, 906, 909, 910, 912, 914, 916, 918, 936, 990, 1000, 1001, 1004, 1007, 1015, 1016, 1017, 1037, 1049], "propos": [90, 109, 110, 289, 370, 375, 377, 387, 389, 407, 409, 414, 419, 449, 535, 607, 608, 676, 677, 678, 861, 862, 997, 1000, 1004, 1015, 1039], "proprietari": 1017, "propto": [413, 1003], "prorokovi\u0107": 1050, "protect": [376, 379, 966], "protein": 369, "protocol": [401, 1001, 1020, 1035, 1048, 1049], "protocol_typ": 248, "prototyp": 1025, "prove": [121, 1025], "proven": [269, 995, 999, 1025], "provenc": 315, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 88, 93, 112, 120, 141, 149, 152, 154, 170, 176, 186, 187, 193, 198, 199, 201, 204, 212, 215, 232, 236, 239, 240, 245, 259, 263, 269, 270, 271, 275, 299, 302, 306, 309, 313, 318, 319, 321, 323, 337, 343, 346, 350, 351, 354, 357, 358, 362, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 381, 383, 384, 387, 388, 389, 392, 393, 398, 401, 403, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 428, 436, 439, 441, 442, 443, 445, 446, 448, 449, 451, 458, 459, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 491, 493, 494, 496, 498, 501, 532, 533, 534, 535, 536, 538, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 593, 594, 601, 605, 610, 611, 627, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 690, 694, 699, 711, 722, 735, 741, 742, 764, 774, 778, 788, 792, 794, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 816, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 861, 862, 864, 867, 869, 870, 871, 874, 875, 876, 879, 881, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 920, 922, 936, 942, 953, 957, 959, 976, 977, 978, 989, 990, 991, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "provinc": 315, "provost": [788, 1001], "proxi": [185, 186, 412, 416, 860, 1037], "prun": 381, "prune": [183, 353, 357, 416, 500, 557, 558, 559, 560, 564, 565, 593, 644, 830, 912, 913, 914, 915, 1004, 1022, 1023, 1027, 1032, 1035, 1042, 1043], "przybocki": 1001, "ps_lsvm_score": 191, "ps_lsvm_time": 191, "pseudo": [212, 307, 377, 411, 419, 439, 451, 453, 461, 468, 469, 470, 472, 473, 474, 475, 533, 561, 562, 563, 627, 634, 639, 641, 642, 646, 647, 652, 653, 660, 661, 662, 663, 677, 691, 695, 803, 804, 812, 814, 853, 860, 896, 897, 901, 904, 905, 906, 909, 947, 948, 997, 1013, 1037, 1046], "pseudo_likelihood": 860, "pseudocount": [536, 1040], "psf": 375, "psi": 412, "psi_1": 412, "psi_2": 412, "psi_n": 412, "pspachtholz": [1042, 1043, 1044], "psycholog": [407, 705, 716], "psychometrica": 635, "psychometrika": [690, 694, 998], "pt": [50, 370, 416, 880, 1011], "pt_i": 299, "pt_j": 299, "ptocca": 1042, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [236, 899], "public": [0, 110, 369, 375, 377, 379, 380, 387, 388, 389, 390, 411, 414, 467, 664, 671, 685, 686, 692, 902, 997, 1005, 1032, 1037, 1038, 1043, 1044, 1045, 1048], "publicli": [375, 1042], "publish": [369, 370, 377, 379, 383, 389, 1013, 1021, 1044], "pubu": [225, 242, 295, 338], "pubu_r": 111, "puerta": 1047, "puggioni": 1036, "puhuk": [1046, 1047], "pujalt": 1046, "pulapakura": [1049, 1050], "pulchritud": 350, "pulido": 1045, "pulkit": [1040, 1041, 1043], "pull": [102, 321, 363, 373, 378, 389, 390, 1024, 1042], "puls": 372, "punctuat": [415, 588, 589, 591], "puneet": 1039, "puneeth": [1049, 1050], "puor": 123, "puor_r": 174, "pure": [111, 112, 116, 197, 211, 389, 407, 472, 478, 496, 557, 558, 559, 560, 564, 565, 566, 705, 715, 786, 795, 912, 913, 914, 915, 1011], "pure_emp_cov": 112, "pure_loc": 112, "pure_x": 112, "purepremium": 229, "puriti": [136, 916, 918], "purna": 1046, "purpl": [109, 118, 235], "purport": 1039, "purpos": [48, 51, 72, 116, 144, 149, 181, 208, 225, 226, 227, 231, 233, 246, 257, 259, 263, 265, 266, 339, 340, 346, 350, 351, 358, 370, 375, 388, 389, 390, 393, 400, 404, 407, 408, 412, 414, 415, 416, 417, 826, 827, 864, 921, 998, 1001, 1002, 1004, 1007, 1020, 1044, 1046, 1050], "pursu": 186, "pursuit": [2, 87, 121, 123, 129, 183, 192, 412, 473, 526, 531, 537, 542, 548, 664, 665, 685, 686, 1022, 1023, 1027, 1032], "push": [64, 375, 379, 405, 1024], "pushd": 383, "put": [75, 91, 161, 170, 172, 239, 243, 250, 254, 283, 304, 311, 322, 333, 344, 348, 364, 377, 379, 380, 383, 401, 417, 442, 446, 458, 515, 614, 647, 661, 797, 881, 885, 893, 906, 907, 908, 909, 910, 938, 991, 998, 1000, 1001, 1002, 1008, 1011], "putnam": 1038, "putschblo": 1045, "pvalu": [2, 592, 595, 596, 598, 599, 600, 829], "pvalue_iri": 275, "pvalue_rand": 275, "pvalues_": [164, 592, 595, 596, 598, 599, 600, 1032], "pvnguyen": 1036, "pwalchessen": 1044, "pwd": 383, "px": [140, 270], "pxd": 375, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 363, 375, 376, 379, 381, 383, 389, 393, 415, 530, 644, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 879, 883, 943, 1001, 1020, 1022, 1032, 1034, 1038, 1042, 1046], "py3": 393, "py39": 393, "pyamg": [80, 393, 400, 407, 451, 461, 691, 695], "pyarrow": [393, 400], "pybrain": 1032, "pycon": [401, 1019], "pyd": 376, "pydata": [43, 375, 383, 393, 400, 401, 1019, 1025], "pydata_2013": 1025, "pydebug": 381, "pyflak": 377, "pyfunc": [699, 1004], "pyfuncdist": 699, "pymc": 1020, "pynndesc": 289, "pynndescenttransform": 289, "pyodid": 375, "pyoxid": 1045, "pypi": [363, 373, 377, 379, 381, 393, 1017, 1040, 1044, 1046, 1047, 1049], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 322, 323, 325, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 371, 375, 382, 437, 502, 631, 632, 697, 698, 700, 701, 702, 806, 823, 1029, 1046], "pyplpt": 369, "pypy3": 1040, "pysniak": 1035, "pystruct": 387, "pytabl": 369, "pytb": 383, "pytest": [2, 318, 363, 373, 375, 377, 378, 393, 400, 403, 923, 942, 943, 1042, 1045], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 364, 369, 373, 375, 376, 377, 378, 379, 380, 383, 384, 387, 389, 393, 394, 400, 401, 403, 408, 415, 496, 508, 509, 581, 699, 811, 878, 1001, 1011, 1016, 1017, 1021, 1024, 1025, 1027, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049], "python2": 1040, "python3": [373, 393], "python37": 393, "pythonsoftwarefound": 393, "pythonx": 373, "pytorch": [45, 326, 387, 1020, 1021, 1048, 1049], "pytorch_enable_mps_fallback": 403, "pyx": [375, 376, 381, 383], "p\u00e9rez": 1040, "p\u00f6lsterl": [1039, 1042, 1045], "q": [51, 103, 115, 146, 211, 321, 404, 407, 412, 947, 997, 1016], "q1": 509, "q327": 372, "q_": 1016, "q_m": 1017, "q_max": [882, 894], "q_min": [882, 894], "qaiser": 1049, "qda": [67, 372, 549, 550, 1023, 1027, 1037], "qdeffens": [1042, 1045], "qemu": 383, "qi": [509, 1044], "qian": [1038, 1043], "qiang": 1036, "qianm": 1044, "qid": [486, 508, 509, 1033, 1038], "qimu": 1038, "qin": [0, 372, 396, 415, 1039, 1040, 1041, 1042, 1043], "qingi": 1040, "qizhi": 1043, "qmarcou": 1049, "qn": 509, "qodari": 1050, "qp": 1016, "qr": [80, 213, 403, 534, 541, 544, 947, 948, 998, 1038, 1049], "qt": [313, 881], "qtconsol": 381, "quad": [417, 1004, 1015], "quadcontourset": 631, "quadmesh": 631, "quadrant": 309, "quadrat": [2, 12, 43, 48, 65, 69, 111, 112, 113, 175, 183, 225, 248, 259, 271, 321, 439, 457, 460, 549, 550, 623, 631, 648, 658, 659, 669, 676, 680, 716, 909, 910, 997, 998, 1001, 1004, 1007, 1011, 1015, 1016, 1022, 1023, 1027, 1033], "quadraticdiscriminantanalysi": [2, 67, 70, 549, 995, 1002, 1004, 1032, 1037, 1039, 1047], "quadro": 1045, "quadv": 1046, "qualifi": 380, "qualit": [44, 45, 86, 88, 94, 140, 146, 211, 323, 370, 407, 438, 701, 1047], "qualiti": [0, 13, 27, 45, 58, 61, 72, 80, 82, 91, 123, 142, 149, 186, 217, 262, 267, 276, 277, 278, 343, 375, 383, 387, 389, 402, 407, 409, 412, 451, 461, 468, 473, 557, 558, 559, 560, 564, 565, 743, 814, 896, 897, 912, 913, 914, 915, 948, 996, 998, 1006, 1013, 1017, 1020, 1021, 1025, 1027], "quang": 1043, "quansight": 0, "quantifi": [13, 27, 43, 72, 82, 109, 175, 229, 263, 276, 326, 377, 389, 402, 573, 867, 996, 1009, 1011, 1027], "quantil": [2, 79, 86, 96, 134, 136, 183, 192, 309, 312, 313, 371, 387, 414, 437, 438, 457, 519, 552, 553, 560, 562, 657, 670, 723, 745, 748, 750, 827, 869, 881, 882, 883, 893, 894, 1001, 1011, 1022, 1023, 1027, 1032, 1036, 1039, 1041, 1045, 1046, 1048, 1050], "quantile_list": 52, "quantile_rang": [309, 882, 894, 1038], "quantile_regress": 213, "quantile_transform": [2, 107, 881, 892, 1011, 1039, 1040, 1041, 1050], "quantileregressor": [2, 321, 997, 1001, 1045, 1046, 1047], "quantiles_": [881, 1011, 1042], "quantiletransform": [2, 107, 187, 313, 408, 464, 880, 893, 991, 1011, 1039, 1040, 1041, 1042, 1043, 1048, 1050], "quantiletransformerquantiletransform": 187, "quantit": [43, 44, 45, 52, 62, 94, 146, 149, 157, 168, 265, 284, 372], "quantiti": [51, 143, 204, 269, 320, 362, 389, 407, 414, 721, 722, 723, 724, 785, 860, 990, 992, 995, 997, 1037], "quantiz": [71, 123, 183, 370, 442, 446, 448, 869, 1011, 1022], "quantum": 999, "quartil": 882, "quartimax": [532, 1044], "quasi": [377, 861, 862, 997], "quazi": [1039, 1040], "queensland": 372, "quentin": [1039, 1040, 1041, 1048, 1049], "queqichao": 1036, "queri": [193, 292, 302, 362, 413, 418, 443, 445, 449, 456, 552, 610, 611, 628, 644, 645, 726, 756, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 1001, 1004, 1017, 1020, 1024, 1034, 1036, 1037, 1040], "query_id": [486, 508, 509], "query_radiu": [844, 845], "question": [0, 159, 185, 263, 269, 346, 374, 375, 380, 383, 401, 411, 414, 833, 906, 909, 997, 1000, 1001, 1007, 1025], "queue": [47, 1004, 1035], "quick": [43, 125, 251, 375, 377, 381, 393, 606, 830, 1001, 1002, 1011, 1025, 1029], "quicker": 1000, "quickest": 373, "quickli": [74, 249, 305, 318, 372, 375, 376, 411, 414, 692, 778, 997, 1004, 1005, 1025, 1043], "quinlan": 1017, "quinonez": 1040, "quintana": 1001, "quit": [43, 52, 64, 86, 90, 116, 137, 159, 168, 186, 187, 204, 209, 229, 263, 277, 286, 321, 350, 362, 380, 388, 407, 415, 996, 998, 1003, 1025, 1040], "quiver": 122, "quot": [37, 51, 52, 54, 102, 270, 350, 351, 363, 369, 370, 373, 375, 379, 393, 394, 403, 487, 488, 496, 1001, 1013, 1016, 1047], "quota": [1045, 1046], "quotat": 370, "quotient": 1001, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 98, 107, 109, 110, 111, 112, 116, 120, 127, 130, 134, 137, 138, 142, 146, 147, 148, 157, 164, 171, 172, 173, 177, 178, 179, 181, 182, 186, 196, 197, 200, 201, 211, 218, 221, 229, 236, 241, 244, 254, 257, 260, 268, 269, 272, 274, 275, 276, 279, 282, 288, 291, 292, 296, 300, 302, 315, 322, 341, 343, 352, 358, 370, 372, 376, 379, 387, 389, 401, 404, 405, 407, 409, 410, 411, 412, 414, 415, 424, 430, 436, 445, 450, 452, 464, 468, 473, 477, 481, 482, 483, 498, 504, 513, 520, 534, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 588, 589, 590, 591, 594, 606, 609, 610, 611, 627, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 685, 686, 692, 696, 716, 721, 722, 723, 724, 728, 730, 781, 785, 788, 799, 800, 814, 817, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 861, 862, 875, 880, 892, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 917, 966, 991, 993, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1015, 1016, 1017, 1020, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1047, 1049], "r0": [803, 804], "r1": 570, "r11": [211, 229], "r2": [107, 135, 140, 154, 185, 187, 207, 244, 282, 408, 414, 554, 570, 673, 827, 862, 922, 1001, 1009, 1041], "r2007": 414, "r22": 211, "r25": 229, "r26": 211, "r2_score": [2, 107, 185, 197, 207, 208, 403, 414, 430, 464, 481, 482, 483, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 724, 728, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 990, 1001, 1033, 1035, 1041, 1045, 1046, 1050], "r2_score_ard": 197, "r2_score_enet": 197, "r2_score_lasso": 197, "r2_score_nnl": 207, "r2_score_ol": 207, "r2_with_abl": 185, "r2_without_": 185, "r3": 570, "r72": 211, "r73": 229, "r82": 211, "r93": 211, "r_": [50, 129, 224, 225, 255, 276, 295, 296, 338, 344, 348, 407, 707, 1001, 1017], "r_0": 990, "r_k": 276, "r_multi": 1009, "r_n": [276, 707, 1001], "r_regress": [2, 416, 606, 1045, 1046, 1049], "r_squar": 388, "raamana": [1040, 1041], "rabbit": [322, 324, 1011], "raccoon": [86, 123, 412], "raccoon_fac": [86, 123], "race": [186, 325, 370, 496, 1035], "race_hispan": 186, "race_oth": 186, "race_whit": 186, "rachel": [1044, 1047], "rachelcjordan": 1043, "rachez": [1037, 1038], "rachit": [1038, 1044, 1047], "rachum": 1044, "radar": 1025, "radford": 997, "radhakrishnan": 1040, "radial": [2, 44, 125, 170, 175, 177, 339, 343, 367, 451, 622, 691, 999, 1016, 1027], "radian": [302, 699, 764], "radii": [844, 845], "radiu": [2, 168, 296, 339, 372, 407, 441, 449, 688, 764, 781, 844, 845, 846, 847, 848, 852, 854, 855, 856, 858, 1004, 1034, 1036, 1046, 1049], "radius1": 99, "radius2": 99, "radius3": 99, "radius4": 99, "radius_neighbor": [322, 852, 854, 855, 856, 1036, 1041, 1042, 1044, 1045, 1046, 1047], "radius_neighbors_graph": [2, 407, 418, 443, 846, 847, 848, 850, 852, 854, 855, 856, 857, 1004, 1036, 1041, 1044], "radiusneighborsclassifi": [2, 322, 846, 847, 852, 855, 1002, 1004, 1032, 1034, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "radiusneighborsregressor": [2, 322, 846, 847, 852, 854, 1002, 1004, 1032, 1034, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "radiusneighborstransform": [2, 318, 848, 1004, 1042, 1044, 1046, 1047], "radostin": [1040, 1041], "raduspaimoc": 1043, "raf": 1041, "rafael": [1025, 1033, 1034, 1036, 1039], "rafal": [1047, 1048], "rafei": 1044, "raff": 1035, "raffaello": 1041, "rafiqu": [1040, 1041], "raghav": [0, 397, 1036, 1037, 1038, 1039, 1040, 1044], "raghavan": [412, 590, 839, 843, 999, 1001, 1003], "raghu": [407, 441], "raghunathan": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "raghuv": [1047, 1048], "raghuwanshi": 1046, "rah": 641, "rahiel": 1036, "rahil": [1046, 1047, 1048, 1049, 1050], "rahimi": [641, 993], "rahmaan": 1042, "rahman": [1039, 1040, 1044], "rahn": [1039, 1042], "rahul": [1044, 1049], "rai": [0, 397, 1001, 1032, 1042, 1044, 1045], "raimundo": 1040, "rain": [43, 52, 187, 406, 997], "rainbow": [61, 233], "rainfal": 997, "rais": [2, 132, 212, 245, 246, 263, 272, 313, 321, 375, 377, 379, 380, 381, 384, 387, 389, 398, 401, 408, 411, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 509, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 577, 581, 582, 588, 589, 590, 591, 603, 610, 611, 617, 629, 632, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 696, 698, 702, 709, 711, 712, 713, 714, 716, 727, 729, 730, 738, 778, 782, 783, 784, 787, 788, 789, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 814, 818, 822, 823, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 853, 854, 855, 859, 861, 862, 863, 864, 867, 868, 869, 870, 871, 876, 877, 878, 882, 883, 884, 891, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 923, 928, 930, 931, 933, 934, 952, 957, 961, 963, 984, 985, 986, 987, 989, 990, 1001, 1011, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "raisadz": 1050, "raise_exc": 711, "raise_except": 986, "raise_unknown": 963, "raise_warn": [272, 712, 986], "raj": [1049, 1050], "rajagopalan": [0, 397, 1040, 1044], "rajaona": [1038, 1039], "rajat": [1035, 1042], "rajdeep": 1041, "rajendra": 1040, "raji": [1047, 1048], "rakotoarison": [1039, 1040, 1042], "ralf": [1035, 1038, 1039, 1047, 1048, 1050], "ralph": 1050, "ram": [55, 86, 364, 401, 414, 896, 897, 1003, 1016, 1038, 1044, 1047, 1048], "ramakrishnan": [407, 441], "ramana": [1038, 1039], "ramanath": 1037, "ramesh": [370, 1025, 1035, 1038, 1042], "rameshwar": [1039, 1040], "ramil": [1040, 1041], "rammig": [1025, 1038], "ramo": 1047, "rampin": 1039, "ramyanp": [1044, 1045], "ramzi": 1044, "ram\u00edrez": 1001, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 82, 91, 95, 127, 137, 151, 153, 163, 193, 197, 233, 234, 238, 244, 245, 284, 301, 319, 320, 325, 332, 333, 345, 351, 356, 384, 398, 544, 704, 705, 715, 757, 781, 786, 896, 897, 899, 900, 901, 1013, 1032, 1043, 1044], "rand_index": 705, "rand_scor": [2, 72, 407, 715, 1001, 1044], "randal": [884, 1036, 1046], "randi": 1038, "randint": [50, 72, 112, 118, 145, 182, 188, 234, 241, 245, 247, 281, 320, 325, 377, 380, 388, 398, 804, 821, 839, 840, 841, 843, 990, 991], "randn": [53, 69, 70, 74, 87, 98, 99, 111, 112, 123, 127, 150, 163, 170, 174, 185, 188, 201, 206, 207, 210, 224, 225, 228, 255, 258, 259, 264, 276, 278, 279, 284, 295, 296, 316, 319, 320, 325, 338, 343, 344, 348, 377, 380, 643, 670, 672, 678, 687, 821, 907, 910], "randolf": 1050, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 83, 85, 87, 88, 90, 91, 93, 94, 95, 97, 98, 99, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 127, 133, 135, 137, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 161, 163, 164, 167, 170, 171, 174, 176, 177, 179, 181, 182, 183, 184, 185, 193, 194, 195, 196, 197, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 220, 224, 225, 228, 229, 231, 232, 234, 235, 236, 237, 238, 243, 244, 245, 247, 248, 254, 255, 257, 258, 259, 260, 261, 264, 266, 267, 268, 269, 270, 272, 274, 276, 278, 279, 280, 281, 284, 288, 289, 294, 295, 296, 301, 304, 310, 312, 313, 316, 319, 320, 322, 324, 326, 328, 329, 332, 333, 338, 339, 341, 342, 343, 344, 345, 348, 350, 351, 362, 363, 367, 371, 378, 380, 387, 388, 389, 398, 402, 403, 405, 407, 415, 416, 420, 432, 439, 442, 446, 448, 450, 451, 452, 453, 457, 458, 459, 461, 463, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 487, 488, 489, 490, 492, 495, 496, 497, 502, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 536, 538, 539, 540, 541, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 582, 583, 584, 589, 607, 608, 610, 611, 627, 630, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 660, 661, 662, 663, 670, 671, 672, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 701, 704, 705, 708, 731, 743, 781, 788, 793, 797, 798, 800, 802, 803, 804, 805, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 829, 830, 835, 837, 838, 839, 840, 841, 843, 844, 845, 849, 853, 860, 861, 862, 864, 867, 869, 878, 881, 885, 893, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 933, 945, 947, 948, 969, 971, 974, 991, 993, 996, 998, 1000, 1001, 1005, 1006, 1007, 1009, 1011, 1016, 1017, 1021, 1022, 1023, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "random_": 201, "random_02": 201, "random_05": 201, "random_08": 201, "random_11": 201, "random_cat": [188, 1009], "random_choice_csc": 1042, "random_forest": 139, "random_from_data": [257, 797, 798, 1000], "random_label": 72, "random_num": [188, 1009], "random_offset_": [641, 642], "random_project": [2, 232, 242, 896, 897, 898, 1013, 1018, 1033, 1038, 1048, 1049], "random_sampl": [197, 844, 845, 849], "random_se": [49, 118, 142], "random_search": [270, 277], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 107, 113, 116, 118, 120, 122, 125, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 159, 164, 165, 167, 170, 176, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 195, 196, 198, 204, 210, 211, 214, 215, 217, 218, 219, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 243, 246, 247, 248, 249, 251, 252, 254, 256, 257, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 286, 288, 289, 292, 293, 297, 298, 299, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 337, 339, 340, 341, 346, 347, 350, 351, 354, 357, 358, 371, 377, 380, 384, 388, 389, 403, 406, 407, 408, 411, 412, 414, 415, 419, 432, 436, 437, 439, 442, 446, 448, 450, 451, 452, 453, 457, 458, 459, 461, 468, 473, 477, 486, 487, 490, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 584, 593, 594, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 632, 633, 634, 635, 638, 639, 640, 641, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 710, 735, 788, 792, 793, 797, 798, 799, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 849, 853, 860, 861, 862, 864, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 911, 912, 913, 914, 915, 917, 918, 920, 922, 923, 945, 947, 948, 969, 971, 974, 990, 991, 993, 996, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1016, 1017, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "random_state_": [377, 536, 627, 853, 1046], "random_tre": 566, "random_tree_embed": 139, "random_unlabeled_point": [320, 899, 900, 901], "random_weights_": [641, 642], "randomforest": [49, 142, 362, 414, 912, 913, 1037], "randomforestclassifi": [2, 63, 64, 67, 89, 138, 139, 140, 141, 142, 156, 188, 189, 250, 251, 266, 281, 318, 320, 325, 350, 358, 388, 389, 405, 414, 416, 557, 558, 559, 561, 566, 567, 569, 803, 804, 822, 834, 914, 990, 991, 1002, 1009, 1025, 1029, 1036, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "randomforestclassifierifittedrandomforestclassifi": [63, 141, 325], "randomforestclassifierinot": 325, "randomforestclassifierrandomforestclassifi": [63, 188, 250, 281], "randomforestregressor": [2, 49, 140, 153, 154, 157, 181, 182, 320, 325, 388, 414, 557, 558, 560, 562, 566, 568, 570, 632, 633, 914, 991, 1002, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "randomforestregressorrandomforestregressor": [154, 157], "randomgeek78": 1046, "randomized_range_find": [2, 384, 1033, 1038], "randomized_svd": [2, 55, 384, 450, 452, 532, 541, 544, 546, 1032, 1033, 1038, 1045, 1046, 1047], "randomized_svd_low_rank": 1039, "randomizedlasso": 1039, "randomizedlogisticregress": 1039, "randomizedpca": [1025, 1032, 1034, 1035, 1037, 1038, 1039], "randomizedsearchcv": [2, 45, 103, 170, 270, 277, 320, 358, 388, 398, 403, 575, 990, 1001, 1015, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050], "randomizedsearchcvinot": 103, "randomli": [2, 52, 72, 83, 94, 103, 117, 137, 149, 150, 181, 183, 187, 228, 242, 246, 259, 264, 275, 286, 288, 328, 331, 358, 363, 384, 387, 388, 407, 411, 414, 417, 448, 457, 515, 523, 531, 537, 545, 546, 551, 559, 560, 561, 562, 563, 564, 565, 610, 611, 671, 679, 690, 694, 716, 797, 798, 860, 898, 912, 913, 914, 915, 1000, 1002, 1004, 1007, 1009, 1013, 1017, 1022, 1043, 1047, 1049], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 83, 94, 95, 112, 113, 116, 120, 122, 127, 135, 145, 146, 149, 150, 151, 153, 164, 170, 171, 174, 176, 177, 179, 181, 182, 185, 188, 193, 194, 195, 196, 197, 201, 206, 212, 213, 218, 225, 234, 238, 244, 245, 254, 257, 264, 272, 275, 276, 278, 279, 280, 281, 301, 304, 310, 312, 313, 316, 319, 320, 322, 324, 325, 328, 329, 333, 342, 356, 377, 380, 384, 389, 398, 412, 419, 420, 439, 442, 446, 448, 450, 451, 452, 453, 457, 458, 459, 461, 468, 469, 473, 474, 475, 477, 478, 479, 480, 487, 490, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 584, 607, 608, 610, 611, 627, 632, 634, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 674, 676, 677, 678, 679, 687, 689, 690, 691, 692, 693, 694, 695, 701, 781, 793, 797, 798, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 822, 828, 829, 830, 834, 835, 838, 839, 840, 841, 843, 844, 845, 849, 853, 860, 861, 862, 869, 881, 885, 893, 896, 897, 899, 900, 901, 904, 905, 906, 909, 910, 912, 913, 914, 915, 933, 947, 948, 969, 971, 974, 1011, 1027], "randomtreesembed": [2, 139, 152, 232, 414, 914, 991, 1033, 1040, 1041, 1045, 1046, 1047], "randomtreesembedding_": 566, "randomtreesembeddingrandomtreesembed": 139, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 80, 81, 83, 84, 88, 93, 94, 96, 97, 109, 110, 112, 113, 134, 136, 137, 138, 141, 146, 149, 153, 163, 166, 167, 171, 186, 187, 191, 197, 201, 202, 204, 206, 209, 211, 212, 215, 218, 219, 227, 229, 232, 234, 241, 242, 247, 248, 254, 256, 259, 260, 263, 264, 268, 269, 270, 272, 273, 274, 276, 277, 278, 280, 281, 282, 284, 288, 293, 299, 301, 302, 307, 309, 314, 315, 318, 322, 323, 329, 339, 346, 350, 351, 355, 357, 363, 369, 370, 372, 375, 377, 381, 384, 389, 401, 407, 411, 414, 417, 439, 460, 468, 470, 471, 472, 473, 474, 475, 477, 480, 490, 494, 495, 514, 527, 541, 553, 554, 559, 560, 563, 588, 589, 591, 629, 632, 638, 640, 648, 649, 669, 671, 676, 677, 678, 680, 692, 712, 731, 746, 788, 830, 836, 850, 852, 854, 855, 860, 874, 881, 882, 883, 889, 890, 893, 894, 897, 898, 947, 948, 990, 997, 1001, 1005, 1015, 1021, 1025, 1037, 1038, 1039, 1040, 1042, 1045, 1048], "range_n_clust": 93, "range_n_outli": 112, "rangeindex": [186, 263, 496], "rangl": [993, 1001, 1015, 1016], "ranjanikrishnan": 1045, "rank": [2, 43, 55, 62, 111, 124, 127, 141, 166, 188, 189, 229, 267, 269, 277, 371, 402, 404, 405, 409, 410, 412, 414, 415, 508, 509, 521, 524, 549, 550, 593, 594, 606, 648, 657, 669, 680, 696, 720, 726, 727, 739, 740, 756, 788, 794, 803, 804, 948, 990, 992, 993, 998, 1009, 1011, 1025, 1027, 1033, 1038, 1041, 1042, 1046, 1047, 1050], "rank_": 657, "rank_t": 800, "rank_test_": 273, "rank_test_precis": [267, 273], "rank_test_recal": 267, "rank_test_scor": [269, 277, 800, 814, 1038], "rankdata": 1039, "ranked_exposur": [211, 229], "ranked_frequ": 211, "ranked_pure_premium": 229, "ranking_": [166, 593, 594], "rankylau": 1040, "ransac": [2, 183, 192, 217, 228, 524, 649, 657, 671, 678, 679, 1022], "ransacregressor": [2, 214, 217, 228, 398, 649, 678, 679, 997, 1002, 1035, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1050], "rao": [411, 1044, 1047], "raphael": 1049, "rapha\u00ebl": 1042, "raphson": [648, 669, 680], "rapid": 1025, "rapidli": [215, 271, 1016, 1025], "rare": [64, 187, 315, 358, 379, 387, 389, 392, 405, 407, 411, 589, 648, 658, 659, 669, 680, 904, 935, 997, 1011, 1025, 1039, 1040, 1041, 1045, 1047, 1050], "rarer": [350, 352, 415], "raschka": [1037, 1038, 1039, 1040, 1041, 1044], "rashchedrin": 1039, "rasmu": [191, 1039], "rasmussen": [175, 417, 610, 611, 614, 619, 622], "raspberri": 393, "raster": 102, "rastgoo": 1049, "rastogi": 1040, "rastrojo": [407, 705], "rasul": [1037, 1039, 1040], "rat": [50, 302, 370, 498], "rate": [2, 43, 134, 138, 143, 149, 163, 187, 211, 218, 229, 242, 248, 263, 266, 269, 278, 279, 305, 306, 307, 364, 375, 406, 407, 408, 412, 416, 445, 465, 536, 553, 554, 559, 560, 561, 562, 592, 595, 596, 598, 599, 600, 606, 644, 645, 668, 676, 677, 678, 692, 698, 702, 727, 782, 789, 860, 861, 862, 898, 990, 997, 998, 1001, 1004, 1005, 1015, 1017, 1025, 1036, 1040, 1041], "rather": [51, 64, 86, 113, 134, 137, 149, 181, 186, 211, 212, 225, 248, 283, 313, 314, 350, 351, 358, 363, 371, 373, 375, 377, 380, 381, 383, 387, 388, 389, 390, 407, 411, 412, 414, 415, 417, 447, 460, 462, 463, 466, 565, 581, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 629, 646, 647, 652, 653, 660, 661, 662, 663, 781, 814, 835, 837, 838, 867, 904, 905, 916, 921, 948, 995, 997, 998, 1001, 1003, 1004, 1008, 1021, 1032, 1033, 1034, 1035, 1039, 1040, 1041, 1042, 1047, 1048, 1050], "ratio": [2, 46, 86, 99, 105, 128, 183, 242, 244, 257, 261, 362, 375, 407, 409, 411, 414, 449, 455, 493, 494, 515, 541, 549, 550, 551, 631, 658, 710, 712, 716, 725, 730, 736, 739, 782, 783, 784, 787, 795, 827, 830, 850, 897, 969, 995, 1007, 1017, 1022, 1047, 1049], "ration": [2, 175, 263, 623, 999], "rationalquadrat": [2, 175, 179, 417, 616], "raton": 997, "raul": [1034, 1035], "rausch": [1040, 1041, 1044], "rauwuckl": 1044, "ravel": [2, 44, 53, 55, 57, 63, 77, 86, 87, 91, 111, 129, 135, 137, 142, 146, 152, 153, 154, 161, 170, 172, 174, 175, 176, 177, 186, 193, 202, 203, 205, 211, 224, 225, 232, 236, 238, 242, 244, 248, 252, 256, 258, 263, 272, 276, 278, 283, 289, 294, 295, 301, 302, 304, 305, 306, 307, 311, 312, 322, 326, 333, 339, 344, 345, 347, 348, 350, 356, 464, 493, 494, 495, 631, 718, 987, 1001, 1048], "ravi": [1044, 1047], "raw": [2, 17, 43, 51, 52, 54, 72, 112, 122, 154, 175, 186, 191, 307, 316, 330, 352, 362, 370, 377, 383, 389, 405, 407, 409, 412, 415, 468, 473, 501, 502, 503, 559, 560, 561, 563, 582, 588, 589, 590, 591, 634, 677, 690, 694, 705, 786, 850, 908, 998, 1001, 1005, 1007, 1008, 1011, 1014, 1033, 1037, 1040, 1043, 1049], "raw_coef_": [904, 905], "raw_covariance_": [409, 468, 473], "raw_data": 352, "raw_docu": [588, 591], "raw_location_": [409, 468, 473], "raw_model": 316, "raw_pixel_classifi": 307, "raw_support_": [468, 473], "raw_target_regr": 408, "raw_valu": [721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 1001, 1040, 1043], "raw_x": [415, 582], "raytheon": 51, "raz": 1046, "ra\u00fal": 1041, "rb": [47, 401], "rbf": [2, 44, 45, 46, 49, 50, 66, 67, 125, 155, 161, 170, 171, 172, 174, 175, 176, 177, 178, 179, 183, 191, 225, 237, 238, 244, 267, 269, 271, 274, 295, 333, 334, 336, 345, 367, 395, 408, 412, 414, 451, 461, 502, 504, 535, 541, 610, 611, 612, 613, 616, 618, 619, 620, 621, 623, 624, 631, 639, 640, 641, 642, 643, 676, 691, 765, 774, 776, 800, 811, 814, 820, 864, 884, 899, 900, 904, 906, 907, 908, 909, 910, 990, 993, 994, 998, 1001, 1007, 1011, 1014, 1022, 1027, 1038, 1043], "rbf_featur": [641, 993], "rbf_kernel": [2, 403, 765, 999, 1036], "rbf_svc": [333, 1016], "rbfsampler": [2, 243, 639, 640, 642, 993, 1036, 1046, 1047], "rbm": [2, 307, 860, 861, 862, 1006], "rbm_features_classifi": 307, "rc": [225, 379], "rceil": [404, 1007], "rcond": 129, "rcparam": [47, 238, 243, 316], "rcv1": [2, 368, 497, 1027, 1037], "rcwoolston": 1043, "rd": 415, "rd9e56ef97513": 2, "rda": 372, "rdbu": [67, 70, 120, 227, 304, 339, 344], "rdbu_r": [87, 113, 130, 339], "rdownload": 47, "rdylbu": [142, 355], "re": [43, 47, 53, 63, 64, 89, 102, 103, 134, 143, 173, 185, 186, 229, 245, 255, 259, 272, 274, 278, 319, 350, 352, 363, 375, 376, 383, 388, 390, 398, 405, 411, 415, 468, 469, 470, 471, 472, 473, 474, 475, 491, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 646, 652, 660, 662, 802, 817, 820, 912, 913, 914, 915, 997, 1002, 1004, 1011, 1016, 1021, 1025, 1032, 1036, 1037, 1039, 1041], "reach": [94, 140, 144, 168, 176, 211, 213, 227, 229, 263, 271, 322, 339, 357, 380, 390, 393, 407, 412, 416, 449, 456, 508, 509, 593, 594, 627, 644, 645, 646, 647, 652, 653, 654, 655, 656, 660, 661, 662, 663, 666, 667, 668, 676, 677, 678, 679, 681, 682, 683, 684, 729, 730, 783, 797, 798, 861, 862, 901, 990, 1001, 1005, 1015, 1017, 1025, 1043, 1047, 1048, 1049], "reachability_": [98, 407, 449, 454, 455, 456], "reachabl": [2, 88, 98, 445, 449, 454, 455, 456, 850, 954], "react": 301, "reactiv": 381, "read": [47, 52, 55, 120, 231, 276, 318, 319, 320, 322, 324, 362, 369, 376, 377, 378, 379, 380, 382, 383, 387, 388, 389, 395, 401, 407, 418, 419, 420, 421, 424, 430, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 944, 990, 997, 1001, 1002, 1020, 1025, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1049, 1050], "read_byt": 47, "read_csv": [51, 380, 496, 1047], "read_csv_kwarg": [496, 1048], "read_parquet": 52, "readabl": [113, 270, 321, 380, 381, 383, 534, 1041, 1044, 1045, 1046, 1047], "reader": [45, 77, 321, 364, 375], "readi": [43, 46, 175, 212, 263, 370, 375, 379, 383, 463], "readili": [322, 412, 1017, 1025], "readm": [383, 415, 493], "readonli": [904, 905, 1045, 1047, 1048], "readonly_memmap": 1049, "readthedoc": 389, "real": [52, 67, 70, 88, 90, 102, 106, 109, 111, 112, 134, 149, 173, 186, 215, 235, 238, 248, 262, 263, 275, 284, 293, 296, 310, 311, 338, 343, 352, 356, 362, 368, 369, 372, 379, 381, 384, 387, 388, 389, 404, 405, 407, 409, 411, 412, 414, 415, 468, 488, 489, 493, 494, 495, 496, 497, 500, 501, 504, 510, 551, 552, 555, 556, 557, 558, 559, 560, 564, 565, 592, 594, 595, 596, 597, 598, 599, 600, 631, 699, 704, 724, 728, 752, 755, 757, 785, 795, 829, 861, 862, 906, 907, 908, 909, 910, 913, 915, 991, 992, 993, 998, 1001, 1003, 1005, 1006, 1007, 1017, 1019, 1022, 1027, 1032, 1045, 1049], "real_cov": [109, 110, 420, 469, 472, 473, 474, 475, 478, 479, 480], "real_data": 293, "realist": [43, 47, 271, 278, 279, 336, 370, 1001], "realiti": 371, "realiz": [211, 1025], "realli": [109, 188, 201, 379, 380, 381, 1001, 1007, 1025, 1046], "reappli": 414, "rearrang": [58, 59, 404], "reason": [43, 47, 51, 64, 77, 86, 102, 146, 149, 168, 186, 187, 191, 211, 212, 219, 229, 238, 242, 243, 245, 248, 263, 266, 269, 270, 275, 282, 286, 289, 310, 314, 343, 351, 352, 358, 362, 363, 364, 370, 374, 375, 376, 377, 379, 383, 387, 388, 389, 390, 406, 407, 408, 409, 412, 414, 415, 508, 532, 574, 638, 646, 652, 654, 672, 687, 692, 763, 800, 814, 848, 853, 860, 879, 901, 920, 922, 923, 990, 991, 996, 997, 998, 1001, 1003, 1004, 1005, 1007, 1011, 1015, 1016, 1017, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "reassign": [83, 375, 446, 448, 1033, 1037], "reassignment_ratio": 448, "rebalanc": 389, "rebas": 379, "rebecca": 1039, "rebekah": [1040, 1041, 1042], "reboul": 1042, "rebuild": [362, 373, 401, 415, 441], "rebuilt": [68, 373, 844, 845], "rec": [57, 352, 370, 641], "rec_l1": 53, "rec_l2": 53, "rec_macro": 411, "recal": [2, 45, 62, 68, 102, 113, 125, 165, 183, 239, 248, 261, 263, 267, 286, 307, 328, 329, 375, 389, 406, 407, 504, 604, 700, 706, 707, 708, 712, 713, 727, 729, 730, 731, 782, 783, 784, 787, 788, 822, 830, 833, 865, 884, 888, 904, 997, 1017, 1022, 1035, 1036, 1039, 1041, 1042, 1044, 1045, 1046, 1048, 1049], "recalcul": [249, 251, 407, 1029, 1032], "recall_macro": [411, 1001], "recall_scor": [2, 62, 263, 276, 411, 708, 784, 1001, 1032, 1034, 1035, 1036, 1037, 1042, 1048], "recant": 390, "receiv": [0, 2, 57, 159, 183, 239, 245, 251, 261, 263, 264, 266, 271, 352, 358, 375, 377, 383, 389, 406, 411, 414, 504, 658, 702, 706, 708, 727, 782, 788, 789, 819, 830, 832, 833, 871, 909, 1002, 1005, 1006, 1015, 1022, 1042, 1043], "recent": [52, 245, 373, 380, 383, 387, 389, 407, 467, 538, 565, 1015, 1025, 1035, 1044], "recht": [641, 993], "recip": [379, 401, 998, 1025], "reciproc": [371, 1001], "reckon": 370, "recogn": [43, 44, 65, 84, 86, 116, 123, 166, 183, 212, 262, 293, 321, 328, 329, 381, 398, 407, 415, 502, 697, 713, 830, 909, 1001, 1022, 1049], "recognit": [42, 48, 54, 120, 183, 247, 307, 314, 368, 380, 412, 494, 502, 532, 534, 541, 697, 708, 713, 741, 769, 788, 789, 797, 814, 830, 884, 909, 993, 997, 1001, 1002, 1006, 1016, 1018, 1022, 1027, 1032], "recommend": [116, 181, 204, 228, 239, 245, 265, 278, 313, 320, 343, 362, 363, 369, 370, 373, 375, 377, 381, 383, 387, 393, 401, 410, 411, 412, 414, 416, 437, 446, 448, 450, 459, 496, 508, 535, 538, 544, 549, 561, 562, 569, 582, 583, 589, 606, 611, 631, 632, 638, 658, 659, 670, 676, 692, 697, 698, 700, 702, 806, 812, 814, 823, 860, 867, 869, 876, 883, 884, 889, 890, 892, 893, 894, 895, 897, 906, 909, 948, 989, 990, 998, 1001, 1003, 1005, 1008, 1011, 1013, 1015, 1016, 1017, 1019, 1025, 1027, 1034, 1035, 1041, 1042, 1043, 1044, 1046, 1048], "recompil": [376, 381, 393], "recomput": [88, 89, 249, 251, 291, 318, 468, 473, 997, 1013, 1037, 1048], "reconstruct": [2, 42, 55, 58, 99, 120, 121, 125, 183, 210, 234, 235, 322, 401, 412, 415, 416, 481, 482, 483, 531, 533, 535, 537, 538, 539, 540, 542, 543, 545, 546, 548, 583, 587, 652, 672, 688, 689, 693, 896, 897, 997, 998, 1022, 1046], "reconstruct_from_patches_2d": [2, 123, 415, 583], "reconstruction_err_": [538, 540], "reconstruction_error": 688, "reconstruction_error_": 689, "record": [2, 50, 121, 138, 149, 188, 245, 263, 315, 352, 362, 375, 401, 407, 409, 449, 456, 498, 620, 643, 692, 771, 774, 778, 779, 780, 781, 827, 850, 1045, 1046], "recov": [75, 98, 113, 121, 122, 127, 143, 170, 185, 197, 210, 211, 215, 231, 282, 352, 409, 413, 416, 419, 459, 533, 559, 997, 998, 1000, 1021, 1038], "recoveri": [51, 113, 197, 210, 409, 416], "recreat": 249, "rect": [47, 85, 193], "rect_colorbar": 309, "rect_histi": 309, "rect_histx": 309, "rect_scatt": 309, "rectangl": 47, "rectangular": [370, 389, 948, 1021], "rectifi": [861, 862], "recurs": [2, 18, 52, 150, 159, 162, 165, 168, 183, 264, 267, 268, 272, 274, 283, 293, 354, 377, 407, 411, 439, 440, 441, 444, 462, 502, 515, 563, 593, 594, 597, 602, 632, 633, 658, 819, 864, 874, 1001, 1004, 1007, 1008, 1017, 1022, 1023, 1027, 1032, 1042, 1043], "recursionerror": 1050, "red": [48, 49, 50, 63, 69, 70, 93, 111, 118, 120, 121, 122, 137, 154, 157, 179, 191, 193, 194, 202, 209, 236, 249, 264, 275, 302, 305, 310, 314, 315, 330, 339, 356, 373, 389, 407, 412, 1002], "reda": 1038, "redden": 1043, "reddi": [1039, 1040, 1041, 1046, 1049], "redefin": [58, 146, 186], "redesign": [387, 1032], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 441, "redo": 351, "reduc": [2, 37, 43, 46, 77, 80, 81, 86, 103, 104, 109, 137, 146, 148, 149, 152, 165, 186, 193, 194, 197, 209, 215, 216, 219, 240, 242, 245, 248, 270, 276, 286, 298, 311, 314, 315, 323, 351, 352, 358, 367, 369, 372, 375, 381, 387, 389, 401, 405, 406, 407, 409, 411, 412, 414, 415, 416, 418, 443, 444, 449, 456, 459, 493, 534, 544, 549, 555, 556, 557, 558, 563, 564, 565, 566, 573, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 610, 627, 643, 652, 672, 673, 674, 675, 687, 692, 695, 781, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 831, 873, 874, 881, 893, 896, 897, 904, 905, 912, 913, 914, 915, 990, 993, 995, 996, 997, 998, 1001, 1004, 1013, 1014, 1016, 1018, 1032, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1048, 1050], "reduce_dim": [104, 250, 268, 408], "reduce_dim__k": 104, "reduce_dim__n_compon": [104, 268, 408], "reduce_func": [781, 1043], "reduced_data": 91, "reducer_label": 104, "reduct": [2, 11, 45, 57, 87, 90, 101, 105, 116, 120, 128, 137, 152, 183, 230, 232, 233, 236, 242, 246, 290, 297, 299, 322, 336, 358, 362, 367, 407, 408, 410, 412, 414, 416, 467, 481, 482, 483, 484, 502, 530, 532, 534, 535, 538, 539, 540, 541, 544, 547, 549, 553, 554, 557, 558, 559, 560, 564, 565, 566, 599, 607, 688, 689, 690, 691, 692, 693, 781, 800, 830, 846, 853, 860, 864, 865, 874, 884, 902, 904, 912, 913, 914, 915, 993, 998, 1013, 1017, 1020, 1021, 1022, 1023, 1025, 1027, 1033, 1034, 1035, 1038, 1046, 1047, 1048], "redund": [62, 64, 130, 167, 255, 260, 325, 358, 371, 374, 375, 380, 389, 405, 515, 634, 1021, 1044], "redundantli": 389, "ref": [375, 383, 991, 1038], "ref_lin": 437, "refactor": [322, 427, 1032, 1034, 1035, 1036, 1042, 1045, 1046, 1047], "refer": [43, 44, 72, 73, 93, 96, 103, 111, 126, 134, 147, 149, 154, 168, 175, 179, 188, 199, 229, 245, 248, 263, 269, 274, 275, 276, 283, 292, 299, 309, 318, 319, 320, 321, 322, 323, 324, 325, 326, 351, 363, 369, 370, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 393, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 456, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 498, 503, 511, 513, 515, 516, 517, 518, 519, 520, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 544, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 590, 593, 594, 595, 602, 607, 608, 610, 611, 614, 619, 622, 623, 627, 628, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 647, 649, 651, 653, 655, 656, 658, 661, 663, 665, 666, 667, 668, 671, 673, 675, 676, 678, 679, 682, 683, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 704, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 734, 735, 736, 737, 738, 740, 741, 743, 756, 758, 759, 769, 783, 785, 786, 788, 789, 792, 793, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 839, 840, 841, 843, 846, 849, 850, 851, 853, 860, 861, 862, 864, 869, 870, 871, 873, 874, 876, 877, 878, 880, 881, 882, 884, 885, 892, 897, 898, 899, 900, 901, 902, 904, 906, 907, 909, 910, 912, 913, 914, 915, 935, 942, 943, 948, 966, 990, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1024, 1032, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "referenc": [372, 375, 377, 383, 389, 896, 897, 1004, 1039, 1045], "references_": 881, "refin": [62, 113, 471, 709, 1001], "refit": [141, 159, 165, 167, 183, 261, 268, 270, 273, 276, 277, 281, 389, 406, 411, 417, 502, 567, 568, 627, 659, 665, 713, 800, 803, 804, 814, 822, 830, 909, 990, 997, 1001, 1022, 1039, 1040, 1041, 1050], "refit_strategi": 267, "refit_time_": [800, 803, 804, 814, 1040], "reflect": [51, 75, 80, 81, 111, 118, 121, 143, 187, 188, 211, 229, 278, 293, 351, 371, 374, 375, 379, 389, 392, 404, 449, 455, 998, 1001, 1007, 1009, 1033, 1041, 1050], "reformul": 374, "refrain": [212, 375], "refurbish": 7, "refus": [263, 387, 894, 895], "reg": [147, 186, 194, 245, 310, 319, 344, 414, 558, 560, 568, 650, 651, 653, 654, 655, 656, 657, 663, 664, 665, 670, 671, 678, 679, 689, 693, 915, 997, 1037], "reg1": [157, 414], "reg2": [157, 414], "reg3": [157, 414], "reg_covar": [254, 797, 798], "reg_nnl": 207, "reg_ol": 207, "reg_param": 550, "regard": [0, 11, 44, 46, 50, 52, 86, 88, 103, 125, 126, 160, 170, 175, 187, 188, 201, 213, 233, 244, 248, 271, 278, 279, 292, 351, 370, 375, 376, 380, 387, 389, 395, 401, 407, 412, 414, 415, 417, 442, 446, 451, 458, 461, 501, 614, 619, 656, 658, 701, 743, 798, 806, 822, 823, 828, 846, 847, 994, 997, 1001, 1003, 1004, 1006, 1008, 1015, 1016, 1017, 1039, 1042], "regardless": [229, 270, 271, 272, 363, 375, 407, 535, 632, 633, 658, 704, 715, 1001, 1013, 1040, 1047, 1048], "regedit": 393, "regener": 869, "regex": [269, 352, 463, 465], "regexp": [588, 589, 591], "regim": [43, 389, 904, 905, 1000], "region": [51, 55, 59, 62, 71, 81, 82, 86, 89, 99, 123, 155, 177, 183, 186, 211, 229, 238, 242, 243, 260, 301, 312, 339, 346, 372, 382, 389, 407, 414, 417, 447, 449, 455, 461, 587, 998, 1001, 1004, 1007, 1011, 1015, 1017, 1022], "region_1": 315, "region_2": 315, "regist": [2, 197, 350, 381, 970], "register_parallel_backend": [2, 1040, 1050], "registri": [373, 393, 1020], "regr": [408, 554, 556, 565, 646, 647, 667, 837, 862, 905, 907, 910, 1016], "regr_1": [135, 356], "regr_2": [135, 356], "regr_3": 356, "regr_multirf": 153, "regr_rf": 153, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 87, 101, 103, 111, 112, 114, 121, 122, 123, 133, 134, 137, 139, 140, 141, 144, 145, 148, 149, 150, 153, 154, 160, 166, 168, 169, 171, 179, 181, 182, 183, 185, 186, 187, 188, 189, 192, 195, 196, 197, 198, 200, 202, 206, 207, 212, 214, 215, 216, 217, 222, 227, 234, 237, 239, 247, 248, 252, 263, 265, 277, 280, 282, 283, 284, 286, 288, 290, 292, 306, 307, 309, 310, 314, 320, 321, 322, 323, 325, 334, 346, 350, 353, 354, 357, 363, 364, 367, 368, 370, 372, 375, 377, 380, 383, 384, 387, 388, 389, 402, 405, 409, 410, 411, 412, 414, 416, 430, 436, 463, 464, 473, 483, 488, 489, 492, 496, 501, 502, 504, 505, 512, 516, 517, 518, 524, 528, 531, 535, 537, 539, 541, 542, 543, 545, 546, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 570, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 609, 610, 611, 614, 615, 622, 623, 625, 631, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 701, 706, 721, 723, 724, 728, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 785, 790, 791, 800, 803, 804, 806, 814, 823, 827, 828, 830, 831, 833, 835, 837, 838, 846, 847, 852, 854, 855, 861, 862, 864, 865, 868, 869, 871, 877, 878, 879, 881, 884, 885, 888, 893, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 918, 922, 924, 930, 933, 935, 952, 990, 991, 993, 996, 998, 1008, 1009, 1011, 1012, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "regression_data": 46, "regression_model": 1039, "regression_test": 383, "regressioncriterion": 1040, "regressionregressionramdomizedpcaramdom": 395, "regressor": [2, 30, 43, 107, 116, 147, 153, 154, 157, 170, 175, 182, 183, 186, 192, 194, 196, 197, 208, 211, 212, 214, 217, 228, 229, 245, 272, 284, 294, 314, 319, 320, 362, 375, 377, 387, 389, 405, 408, 417, 430, 433, 434, 435, 464, 481, 482, 483, 484, 524, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 565, 566, 567, 568, 569, 570, 605, 606, 609, 611, 632, 633, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 701, 832, 833, 836, 837, 838, 847, 855, 860, 861, 862, 865, 871, 879, 884, 885, 905, 907, 910, 912, 913, 914, 915, 918, 922, 923, 924, 937, 940, 942, 990, 991, 997, 1001, 1002, 1004, 1009, 1015, 1020, 1022, 1023, 1027, 1032, 1033, 1037, 1038, 1039, 1041, 1042, 1045, 1046, 1047, 1049], "regressor_": [186, 464, 593, 594, 597], "regressor__sample_weight": 211, "regressor_tag": [923, 937], "regressor_with_": 185, "regressor_without_": 185, "regressorchain": [2, 398, 835, 837, 1040, 1043, 1047], "regressormixin": [2, 245, 377, 389, 464, 924, 1043], "regressortag": [2, 923, 937], "regul": 0, "regular": [2, 62, 64, 67, 71, 75, 90, 91, 92, 93, 94, 103, 105, 110, 125, 133, 142, 144, 145, 147, 152, 159, 161, 170, 171, 172, 174, 177, 179, 181, 183, 185, 192, 193, 194, 196, 197, 199, 200, 201, 203, 207, 208, 209, 211, 218, 225, 227, 229, 244, 255, 261, 262, 265, 270, 271, 273, 294, 295, 303, 305, 306, 307, 311, 312, 313, 314, 315, 316, 333, 334, 336, 338, 339, 340, 343, 344, 350, 352, 354, 362, 375, 387, 388, 405, 407, 409, 410, 412, 413, 414, 417, 436, 442, 446, 470, 471, 475, 477, 478, 479, 480, 504, 512, 514, 515, 520, 522, 524, 528, 538, 539, 540, 543, 547, 548, 550, 559, 561, 562, 588, 589, 591, 638, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 693, 735, 741, 750, 797, 798, 817, 823, 830, 831, 861, 862, 865, 884, 904, 905, 906, 907, 909, 910, 911, 990, 991, 993, 994, 995, 996, 998, 1000, 1006, 1007, 1011, 1014, 1015, 1016, 1022, 1023, 1025, 1027, 1032, 1033, 1034, 1036, 1037, 1041, 1042, 1044, 1045, 1050], "regularis": [215, 420, 472, 474], "regularli": [142, 286, 387, 1003], "regulatori": 149, "rehan": 1047, "rehman": 1040, "reiichiro": [1039, 1040], "reilli": 1049, "reimburs": 263, "reimplement": [381, 387, 389, 1038, 1042], "reinforc": 1021, "reinit": 383, "reiniti": 387, "reinstal": 393, "reintroduc": 1048, "reitsam": 1044, "reject": [246, 263, 389, 390, 523, 671, 727, 930, 931, 997, 1001, 1040], "rel": [43, 45, 47, 55, 58, 64, 88, 94, 125, 141, 175, 189, 191, 194, 211, 229, 257, 282, 295, 296, 310, 319, 322, 339, 343, 350, 351, 370, 374, 377, 383, 389, 405, 407, 411, 414, 415, 417, 439, 442, 446, 448, 458, 521, 524, 531, 534, 537, 541, 545, 546, 557, 558, 559, 560, 564, 565, 566, 604, 649, 658, 659, 671, 672, 674, 690, 694, 729, 746, 747, 800, 803, 804, 806, 814, 823, 828, 831, 844, 845, 849, 861, 862, 873, 874, 884, 900, 904, 905, 906, 909, 911, 912, 913, 914, 915, 997, 998, 1001, 1003, 1004, 1005, 1007], "relabel": [374, 818, 819, 901], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 370, 371, 374, 375, 379, 380, 382, 383, 384, 387, 389, 390, 392, 398, 401, 406, 407, 408, 409, 410, 411, 412, 414, 417, 449, 463, 468, 496, 549, 550, 562, 563, 639, 673, 677, 692, 701, 723, 743, 821, 827, 862, 863, 865, 868, 869, 874, 877, 879, 880, 883, 892, 908, 990, 993, 995, 1001, 1002, 1004, 1005, 1008, 1011, 1016, 1017, 1018, 1021, 1022, 1024, 1027, 1032, 1036, 1037, 1038, 1040, 1041, 1044, 1045, 1048], "relate_point": 299, "relationship": [2, 43, 52, 58, 134, 135, 149, 176, 185, 186, 193, 197, 200, 204, 211, 213, 214, 276, 283, 288, 310, 316, 325, 389, 407, 409, 411, 461, 496, 636, 714, 998, 1001, 1003, 1004, 1008, 1009, 1037], "relative_tim": 257, "relax": [46, 407, 415, 452, 1014, 1039], "releas": [0, 54, 88, 103, 132, 138, 139, 141, 151, 168, 181, 182, 187, 188, 191, 211, 212, 213, 240, 245, 249, 250, 251, 252, 263, 264, 281, 283, 291, 315, 331, 363, 373, 375, 376, 378, 383, 387, 389, 415, 442, 445, 446, 463, 466, 489, 490, 496, 501, 502, 504, 512, 515, 521, 524, 538, 541, 561, 562, 564, 565, 567, 599, 602, 628, 630, 632, 634, 640, 646, 648, 652, 658, 669, 680, 688, 697, 701, 702, 717, 718, 732, 742, 748, 778, 788, 795, 799, 800, 801, 803, 804, 806, 814, 822, 823, 826, 827, 830, 846, 848, 865, 869, 874, 877, 878, 879, 883, 884, 885, 901, 902, 904, 909, 912, 913, 943, 1017, 1022, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "release_highlight": 1022, "relev": [46, 48, 57, 108, 112, 168, 183, 193, 206, 214, 269, 270, 276, 358, 362, 364, 370, 372, 374, 375, 377, 380, 381, 389, 390, 398, 409, 410, 416, 417, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 726, 740, 756, 799, 801, 802, 803, 804, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 882, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 1001, 1002, 1007, 1018, 1021, 1022, 1035, 1040, 1046], "reli": [125, 140, 143, 168, 189, 199, 201, 286, 289, 319, 323, 350, 362, 363, 377, 380, 383, 384, 387, 389, 403, 404, 407, 412, 414, 415, 549, 593, 597, 607, 608, 778, 828, 831, 869, 953, 966, 990, 993, 995, 997, 1001, 1004, 1009, 1011, 1016, 1025, 1040, 1041, 1042, 1046, 1048, 1049], "reliabl": [2, 62, 64, 405, 411, 437, 438, 646, 1017, 1025], "relianc": [125, 215], "religion": [57, 270, 350, 351, 352, 370, 1002], "reloc": 1041, "relova": 1045, "relu": [861, 862], "remain": [47, 62, 64, 103, 134, 141, 145, 147, 167, 186, 211, 215, 227, 254, 267, 271, 275, 278, 404, 407, 408, 409, 411, 415, 445, 463, 466, 515, 516, 521, 528, 534, 570, 610, 611, 763, 769, 803, 804, 805, 808, 810, 839, 840, 841, 843, 952, 990, 991, 993, 1000, 1001, 1005, 1011, 1017, 1021, 1034, 1040, 1046, 1049], "remaind": [43, 143, 186, 201, 211, 213, 229, 248, 323, 354, 408, 463, 466, 1032, 1039, 1040, 1041, 1044, 1045, 1048, 1050], "remaining_column": 463, "remark": [88, 116, 168, 263, 364, 375, 1011], "remedi": 228, "rememb": [88, 377, 379, 380, 393, 415, 1004, 1008, 1017], "remi": 1039, "remind": [245, 390], "reminisc": 123, "remot": [191, 329, 375, 378], "remov": [1, 2, 44, 54, 55, 87, 88, 102, 107, 166, 168, 181, 182, 186, 189, 270, 309, 316, 318, 319, 320, 325, 350, 351, 354, 358, 367, 370, 374, 375, 376, 377, 379, 380, 384, 389, 393, 400, 407, 408, 411, 414, 415, 417, 418, 427, 441, 443, 444, 449, 456, 481, 482, 483, 484, 487, 488, 527, 534, 535, 538, 540, 541, 553, 567, 568, 569, 570, 579, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 630, 644, 654, 655, 656, 658, 659, 673, 675, 679, 692, 709, 742, 778, 779, 780, 782, 800, 803, 804, 806, 814, 823, 828, 829, 831, 851, 863, 864, 868, 869, 881, 882, 884, 893, 901, 919, 928, 930, 931, 942, 943, 991, 998, 1004, 1017, 1023, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "remove_zero_eig": [535, 1034, 1041], "rempfler": 1043, "renaissance0n": 1050, "renam": [126, 147, 189, 259, 270, 318, 375, 379, 407, 446, 458, 463, 470, 471, 477, 527, 536, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 778, 877, 928, 930, 931, 1032, 1033, 1034, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "rename_axi": 269, "render": [51, 63, 86, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 207, 215, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 375, 377, 379, 380, 381, 389, 551, 589, 631, 700, 702, 881, 893, 916, 918, 1000, 1017, 1045, 1049], "rene": 1045, "renni": [2, 839, 841, 1003, 1040], "renorm": 63, "rent": 43, "rental": [43, 52, 187, 1008], "reorder": [58, 389, 697, 718, 1021, 1040], "reordered_data": 58, "reordered_row": 58, "reorgan": 1038, "rep": 372, "reparameter": 1016, "reparametr": 346, "repartit": 43, "repeat": [2, 49, 69, 99, 110, 112, 145, 168, 170, 176, 177, 187, 191, 213, 263, 264, 269, 270, 281, 286, 329, 351, 352, 377, 384, 389, 390, 404, 405, 407, 412, 415, 416, 588, 593, 607, 608, 615, 627, 634, 659, 805, 815, 816, 819, 936, 991, 1000, 1017, 1027, 1040, 1042], "repeatedkfold": [2, 186, 411, 805, 816, 1039], "repeatedli": [134, 322, 358, 389, 407, 414, 417, 508, 546, 666, 667, 676, 677, 678, 781, 991, 1005], "repeatedstratifiedkfold": [2, 269, 283, 286, 411, 815, 819, 1039], "repercuss": 314, "repetit": [269, 283, 286, 380, 411, 815, 816, 1009, 1046], "replac": [2, 43, 62, 111, 124, 134, 149, 170, 175, 177, 181, 187, 198, 212, 252, 272, 289, 311, 316, 320, 341, 373, 375, 379, 381, 384, 389, 401, 408, 411, 414, 415, 440, 444, 463, 503, 515, 555, 556, 563, 582, 588, 589, 590, 591, 607, 608, 627, 630, 634, 639, 641, 728, 785, 806, 812, 814, 823, 863, 864, 867, 887, 900, 901, 907, 920, 922, 969, 971, 974, 990, 991, 993, 997, 1001, 1011, 1016, 1017, 1020, 1021, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "replai": [803, 804], "repli": [54, 350, 374, 375, 378], "replic": [269, 374, 377, 1027], "repo": [375, 379, 1021, 1024], "report": [0, 2, 43, 47, 52, 68, 102, 107, 165, 178, 199, 263, 267, 277, 283, 286, 318, 328, 358, 370, 374, 376, 377, 378, 381, 383, 387, 389, 393, 401, 407, 411, 611, 649, 658, 664, 685, 686, 700, 713, 729, 730, 738, 783, 784, 787, 833, 842, 861, 862, 899, 917, 942, 997, 1004, 1009, 1020, 1021, 1024, 1033, 1036, 1039, 1040, 1042, 1043, 1045, 1047, 1048], "reporthook": 47, "repositori": [43, 47, 52, 191, 263, 324, 368, 370, 372, 373, 375, 377, 379, 383, 387, 390, 393, 504, 1020, 1024, 1027], "repr": [577, 1043, 1044, 1046], "repreat": 269, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 82, 83, 86, 120, 122, 128, 129, 141, 150, 186, 193, 204, 213, 215, 216, 220, 233, 235, 243, 248, 257, 262, 263, 266, 269, 272, 276, 294, 311, 343, 350, 352, 357, 364, 367, 370, 372, 377, 387, 388, 389, 390, 401, 405, 407, 411, 412, 413, 414, 415, 416, 437, 441, 445, 451, 462, 463, 469, 470, 471, 472, 473, 474, 475, 487, 489, 490, 492, 494, 496, 498, 500, 501, 502, 504, 505, 510, 527, 534, 536, 538, 540, 541, 547, 550, 555, 563, 581, 588, 591, 594, 629, 632, 634, 640, 676, 678, 697, 699, 701, 711, 730, 743, 789, 800, 802, 813, 814, 817, 820, 822, 827, 829, 830, 833, 834, 840, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 871, 877, 878, 901, 904, 905, 930, 931, 952, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1012, 1014, 1015, 1017, 1038, 1040, 1043, 1044, 1047, 1050], "represent": [2, 43, 51, 55, 58, 63, 86, 103, 104, 120, 123, 139, 141, 150, 151, 152, 154, 157, 165, 175, 186, 188, 191, 195, 197, 231, 232, 233, 239, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 286, 299, 307, 315, 320, 322, 323, 325, 330, 351, 352, 356, 357, 358, 367, 369, 378, 389, 401, 407, 408, 412, 413, 414, 421, 462, 531, 535, 537, 540, 542, 548, 566, 588, 590, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 630, 643, 646, 652, 658, 659, 660, 662, 666, 667, 668, 676, 677, 678, 769, 797, 798, 806, 823, 860, 873, 877, 878, 882, 884, 897, 904, 916, 918, 921, 927, 944, 966, 993, 998, 1000, 1002, 1004, 1005, 1006, 1008, 1011, 1016, 1021, 1032, 1033, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "reproduc": [44, 51, 93, 134, 186, 191, 199, 278, 286, 307, 363, 374, 375, 377, 378, 383, 387, 389, 407, 411, 412, 415, 419, 439, 453, 459, 468, 473, 487, 490, 492, 495, 497, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 607, 608, 610, 611, 634, 639, 640, 641, 642, 646, 647, 650, 652, 653, 654, 660, 661, 662, 663, 666, 667, 668, 671, 676, 678, 679, 689, 690, 692, 693, 694, 793, 797, 798, 802, 803, 804, 805, 806, 812, 814, 815, 816, 817, 818, 819, 820, 828, 829, 830, 834, 835, 838, 849, 853, 860, 861, 862, 869, 881, 885, 893, 896, 897, 904, 905, 906, 909, 947, 948, 971, 974, 993, 1020, 1024, 1032, 1040, 1045, 1046], "reproduct": [387, 997], "request": [2, 47, 55, 80, 211, 229, 245, 321, 363, 369, 373, 374, 378, 389, 390, 398, 401, 412, 415, 416, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 588, 590, 591, 599, 600, 610, 611, 632, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 699, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 957, 959, 1001, 1004, 1024, 1038, 1039, 1040, 1049, 1050], "request_rout": 245, "requir": [30, 31, 43, 46, 53, 62, 80, 86, 88, 90, 91, 100, 102, 124, 126, 139, 140, 143, 144, 147, 149, 150, 154, 168, 187, 197, 201, 211, 231, 233, 239, 242, 245, 248, 252, 263, 270, 278, 280, 283, 289, 291, 309, 314, 320, 321, 350, 351, 352, 369, 372, 373, 375, 376, 377, 381, 383, 387, 389, 390, 393, 394, 398, 401, 403, 407, 408, 409, 411, 412, 414, 415, 416, 418, 424, 430, 436, 437, 438, 443, 445, 449, 451, 456, 461, 463, 466, 468, 481, 482, 483, 496, 508, 521, 524, 535, 541, 549, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 579, 580, 581, 602, 610, 611, 619, 627, 632, 633, 634, 643, 646, 647, 652, 653, 658, 659, 666, 667, 668, 671, 674, 675, 676, 677, 678, 686, 689, 691, 692, 693, 695, 699, 724, 729, 730, 747, 749, 752, 763, 783, 784, 787, 799, 800, 803, 804, 807, 809, 814, 822, 827, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 864, 865, 866, 868, 878, 879, 880, 884, 892, 896, 897, 899, 900, 904, 905, 906, 909, 912, 913, 914, 915, 921, 923, 924, 930, 931, 937, 942, 943, 957, 960, 966, 986, 989, 990, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1015, 1016, 1017, 1021, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "requires_fit": [923, 984], "requires_i": [424, 430, 989, 1043], "requires_positive_x": [1042, 1047], "requires_vector_input": [612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "requisit": 377, "rerais": 1049, "rerun": [51, 63, 77, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 383], "resampl": [2, 85, 146, 186, 229, 293, 384, 387, 389, 555, 556, 974, 1021, 1041, 1045], "resampled_arrai": 971, "rescal": [43, 80, 81, 88, 125, 195, 199, 234, 248, 309, 348, 409, 414, 419, 468, 469, 470, 471, 472, 473, 474, 475, 533, 538, 646, 649, 652, 876, 882, 906, 907, 908, 909, 910, 1001, 1011, 1036, 1037], "rescaled_coin": [80, 81], "rescu": [401, 415], "research": [0, 168, 185, 263, 269, 275, 286, 370, 372, 387, 407, 501, 513, 635, 645, 692, 735, 829, 834, 990, 998, 1002, 1004, 1016, 1021, 1025], "resembl": [74, 215, 245], "reserv": [263, 315, 375, 561, 562, 1025], "reserva": 315, "reservoir": 969, "reservoir_sampl": 969, "reset": [252, 358, 383, 534, 676, 677, 678, 844, 845, 873, 874, 884, 989, 1034], "reset_n_cal": [844, 845], "reshama": [0, 360, 365, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050], "reshap": [2, 43, 44, 45, 53, 61, 68, 80, 81, 83, 84, 86, 87, 91, 104, 111, 115, 120, 123, 129, 137, 142, 152, 161, 166, 170, 172, 173, 174, 175, 176, 177, 179, 193, 203, 224, 225, 227, 228, 232, 234, 236, 238, 243, 247, 258, 267, 293, 295, 302, 304, 306, 307, 310, 311, 312, 316, 318, 321, 322, 324, 325, 333, 338, 339, 344, 347, 348, 387, 404, 412, 414, 415, 444, 464, 584, 631, 732, 830, 879, 883, 997, 1011, 1017, 1037], "resid": 370, "residence_sinc": 263, "residenti": 154, "residu": [2, 107, 213, 265, 430, 464, 481, 482, 483, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 674, 678, 679, 685, 686, 701, 744, 785, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 997, 1001, 1044, 1045, 1047], "residual_metr": 1038, "residual_threshold": [228, 671, 997, 1045], "residual_vs_predict": [43, 52, 107, 265, 323, 701], "residues_": 1037, "resign": 390, "resili": 415, "resist": [111, 112, 375], "resiz": [45, 80, 81, 249, 370, 493, 494], "resolut": [43, 50, 55, 129, 187, 301, 302, 339, 390, 405, 1042], "resolv": [55, 374, 375, 379, 383, 390, 415, 445, 451, 461, 691, 695, 948, 991, 1001, 1039, 1041, 1042, 1045, 1050], "resort": [271, 370, 401, 555, 1042], "resourc": [55, 77, 146, 149, 181, 211, 306, 320, 361, 378, 387, 389, 406, 414, 803, 804, 990, 1002, 1021, 1025, 1027, 1040, 1045, 1046], "resourcewarn": 1035, "resp": [370, 414, 597, 797, 798, 1015, 1040], "respect": [64, 88, 100, 125, 126, 134, 138, 140, 142, 151, 178, 191, 193, 197, 201, 213, 225, 228, 231, 233, 239, 242, 244, 248, 259, 263, 278, 295, 296, 307, 314, 322, 336, 343, 357, 362, 363, 370, 371, 375, 405, 407, 410, 412, 414, 415, 417, 445, 463, 466, 469, 470, 471, 472, 473, 474, 475, 534, 540, 541, 547, 553, 561, 562, 597, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 628, 636, 643, 671, 690, 694, 712, 728, 782, 785, 797, 798, 840, 850, 861, 862, 916, 918, 989, 990, 994, 995, 997, 998, 1001, 1004, 1005, 1006, 1007, 1011, 1016, 1020, 1024, 1025, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "respond": [186, 375, 407], "respons": [0, 25, 168, 187, 211, 214, 245, 279, 282, 350, 372, 375, 389, 407, 408, 414, 445, 463, 481, 482, 483, 567, 568, 631, 632, 633, 674, 675, 698, 700, 702, 742, 797, 798, 1002, 1008, 1049], "response_method": [48, 66, 70, 89, 136, 150, 155, 204, 220, 225, 263, 272, 292, 297, 300, 314, 326, 335, 336, 338, 343, 355, 631, 632, 633, 698, 700, 702, 742, 799, 822, 1001, 1049], "rest": [2, 30, 62, 66, 143, 147, 183, 192, 197, 202, 226, 245, 248, 257, 286, 318, 332, 336, 381, 389, 417, 512, 610, 631, 644, 658, 659, 676, 754, 788, 832, 833, 834, 853, 904, 906, 909, 997, 1001, 1002, 1005, 1008, 1016, 1022, 1025, 1036, 1037, 1046, 1047, 1048, 1050], "restart": [90, 176, 378, 383, 446, 531, 537, 538, 543, 545, 546, 610, 611, 998, 1045], "restor": [1035, 1040, 1041, 1042, 1043, 1047], "restrict": [2, 64, 99, 100, 105, 160, 181, 183, 202, 204, 228, 303, 377, 381, 405, 407, 414, 415, 464, 493, 502, 532, 581, 610, 653, 654, 655, 656, 658, 682, 683, 713, 782, 788, 789, 830, 852, 854, 855, 856, 858, 860, 861, 862, 864, 890, 1001, 1017, 1022, 1026, 1027, 1032, 1034, 1042, 1044, 1049], "restructuredtext": 375, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 80, 86, 87, 88, 93, 95, 99, 103, 105, 107, 112, 116, 120, 123, 125, 130, 137, 138, 139, 141, 143, 144, 146, 147, 150, 152, 153, 161, 167, 168, 170, 172, 174, 176, 178, 181, 186, 187, 188, 189, 194, 198, 200, 201, 202, 204, 207, 212, 213, 215, 219, 225, 226, 229, 231, 232, 235, 238, 241, 243, 249, 254, 259, 260, 262, 263, 264, 267, 269, 270, 272, 275, 276, 277, 278, 280, 281, 283, 286, 289, 291, 295, 304, 305, 306, 309, 310, 311, 314, 318, 320, 322, 323, 324, 325, 326, 328, 331, 333, 339, 343, 344, 346, 350, 352, 357, 362, 363, 364, 369, 370, 372, 375, 377, 379, 380, 381, 383, 387, 388, 389, 390, 401, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 432, 439, 440, 442, 444, 445, 446, 449, 450, 451, 452, 453, 454, 456, 458, 461, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 478, 488, 508, 509, 511, 513, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 579, 580, 581, 582, 584, 588, 589, 591, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 632, 634, 636, 640, 643, 652, 653, 658, 664, 665, 666, 667, 675, 676, 677, 678, 686, 689, 690, 691, 692, 693, 694, 695, 708, 710, 711, 712, 717, 725, 726, 728, 729, 730, 731, 732, 736, 737, 738, 754, 756, 757, 764, 771, 774, 778, 779, 780, 781, 783, 784, 785, 787, 793, 794, 797, 798, 800, 802, 803, 804, 805, 810, 814, 815, 816, 819, 820, 825, 831, 832, 833, 835, 836, 837, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 868, 869, 877, 878, 881, 882, 885, 893, 897, 901, 904, 906, 909, 912, 913, 914, 915, 916, 917, 930, 931, 947, 948, 950, 955, 965, 966, 971, 974, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1020, 1021, 1024, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "results_df": [219, 269, 315], "results_for_preval": 272, "results_sc": 346, "retail": 1025, "retain": [2, 193, 389, 407, 410, 411, 415, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 494, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 695, 696, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 877, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 1014, 1032], "retbin": 1011, "retent": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "retrac": 245, "retract": 375, "retrain": [401, 1021, 1048, 1050], "retri": [188, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 1040, 1046, 1050], "retriev": [2, 116, 186, 215, 276, 351, 357, 379, 389, 412, 415, 416, 467, 496, 590, 593, 594, 626, 653, 663, 684, 699, 726, 730, 732, 733, 756, 781, 839, 843, 876, 902, 997, 999, 1001, 1003, 1020, 1021, 1037, 1042, 1044, 1046, 1049], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 86, 89, 94, 102, 107, 118, 126, 127, 129, 132, 134, 137, 139, 145, 146, 149, 150, 154, 168, 173, 176, 178, 182, 189, 193, 194, 199, 201, 204, 211, 212, 219, 220, 221, 229, 245, 248, 251, 252, 257, 259, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 276, 284, 289, 294, 299, 302, 307, 309, 311, 314, 318, 326, 335, 339, 350, 352, 354, 357, 362, 368, 369, 370, 375, 376, 377, 381, 382, 384, 387, 389, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 926, 927, 928, 930, 931, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 969, 970, 971, 972, 973, 974, 975, 981, 984, 985, 986, 987, 988, 989, 991, 1001, 1004, 1008, 1009, 1016, 1017, 1021, 1029, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "return_a": [585, 586, 966, 1035], "return_cent": [512, 1043], "return_cod": 546, "return_cost": [470, 471, 477], "return_count": [331, 351, 856], "return_cov": [389, 567, 568, 611, 864], "return_dist": [87, 462, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 1004, 1036], "return_distribut": [118, 523], "return_estim": [43, 186, 283, 325, 411, 827, 1040], "return_ind": 523, "return_indic": [411, 827, 1048], "return_inner_stat": 1046, "return_intercept": [687, 1041], "return_invers": [148, 377], "return_log": [844, 845], "return_model": [1034, 1036], "return_n_it": [419, 453, 458, 477, 545, 546, 646, 647, 652, 653, 660, 661, 662, 663, 681, 682, 683, 684, 685, 686, 687, 694, 1046], "return_norm": [891, 1039], "return_path": [682, 683, 685, 686], "return_std": [170, 175, 176, 177, 179, 193, 194, 389, 552, 567, 568, 611, 613, 614, 615, 616, 625, 627, 644, 645, 864, 1039, 1040, 1044, 1049], "return_sum_weight": 981, "return_tim": [271, 828, 1042], "return_train_scor": [140, 273, 283, 315, 411, 800, 803, 804, 814, 827, 1038, 1039, 1041], "return_x_i": [44, 46, 54, 91, 102, 103, 104, 105, 120, 140, 143, 157, 159, 160, 164, 181, 182, 188, 189, 191, 199, 200, 201, 203, 208, 218, 226, 227, 239, 247, 248, 251, 252, 265, 268, 271, 276, 277, 286, 288, 291, 298, 305, 306, 307, 314, 318, 320, 322, 323, 324, 325, 331, 342, 352, 354, 368, 380, 381, 388, 401, 407, 408, 411, 414, 416, 419, 427, 445, 487, 488, 489, 490, 492, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 532, 533, 534, 535, 558, 561, 562, 567, 568, 592, 595, 596, 598, 599, 600, 601, 602, 610, 619, 620, 622, 623, 638, 639, 658, 659, 668, 673, 674, 675, 688, 689, 690, 691, 693, 695, 701, 711, 788, 803, 804, 806, 832, 837, 848, 853, 856, 913, 914, 915, 991, 996, 1001, 1002, 1003, 1004, 1011, 1029, 1038, 1040, 1042, 1045], "return_x_mean": 419, "reuben": 1032, "reus": [52, 170, 205, 263, 270, 318, 352, 377, 389, 407, 408, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 634, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 861, 862, 1009, 1013, 1025, 1039, 1049], "reuter": [362, 370], "reuters21578": 47, "reuterspars": 47, "rev": [375, 607, 608], "revamp": [377, 1042], "reveal": [43, 52, 186, 188, 350, 381, 404, 998, 1048], "revers": [107, 168, 216, 269, 534, 541, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 789, 864, 1001, 1032, 1033, 1042, 1044, 1048], "revert": [121, 403, 630, 632, 633, 1039, 1044, 1049], "review": [286, 315, 362, 370, 377, 378, 380, 381, 387, 390, 411, 412, 535, 541, 1001, 1011], "revillet": 1032, "revis": [390, 670], "revisit": [407, 418, 443], "revolv": 998, "reward": 375, "reweight": [134, 351, 389, 409, 414, 590, 591, 648, 669, 680], "reweight_covari": [468, 473], "rewrit": [381, 387, 1017, 1032], "rewritten": [375, 649, 1034, 1036], "rey": 1047, "reza": 1042, "rezazadeh": 1045, "rf": [139, 140, 153, 156, 157, 188, 318, 358, 414, 567, 569, 570], "rf_123": 358, "rf__n_estim": 414, "rf_appli": 139, "rf_applyfunctiontransform": 139, "rf_cst": 325, "rf_inst": 358, "rf_leaves_yield": 139, "rf_model": 139, "rf_no_cst": 325, "rf_pipelin": 154, "rfc": [64, 251, 318, 1029], "rfc_disp": [251, 318, 1029], "rfe": [2, 166, 167, 398, 416, 594, 597, 602, 1032, 1036, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "rfecv": [2, 167, 398, 416, 593, 597, 602, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1048, 1049, 1050], "rfrandomforestregressor": 157, "rgb": [370, 415, 493, 494, 583, 584, 587], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1039, "rho": [222, 412, 677, 997, 1015, 1033], "rho_k": 413, "ri": [407, 705, 786], "ribeiro": [590, 730, 1045], "ricardo": [1035, 1045, 1046, 1049], "ricardojnf": 1045, "riccadonna": 743, "riccardo": [1043, 1049], "rice": [50, 302, 370, 498, 1045], "rich": [85, 149, 383, 387, 407, 438, 1025, 1043, 1046], "richard": [370, 416, 658, 1033, 1042, 1044, 1046, 1047, 1050], "richardscottoz": 1045, "richer": [85, 129, 407], "richi": 1040, "rick": 1043, "ricker": 129, "ricker_funct": 129, "ricker_matrix": 129, "rickiepark": 1039, "rid": [48, 1015], "riddel": [1035, 1037, 1039], "ridg": [2, 24, 44, 49, 53, 87, 107, 121, 122, 137, 154, 159, 168, 169, 175, 176, 177, 181, 183, 185, 186, 187, 192, 193, 197, 205, 208, 211, 212, 237, 247, 282, 310, 345, 346, 350, 362, 387, 403, 412, 414, 417, 524, 535, 539, 543, 611, 615, 622, 625, 643, 644, 645, 647, 649, 657, 661, 673, 674, 675, 678, 687, 701, 750, 800, 806, 814, 837, 910, 1001, 1002, 1009, 1011, 1015, 1016, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1050], "ridge_alpha": [539, 543, 1039], "ridge_cv": 107, "ridge_cv_with_trans_target": 107, "ridge_glm": 211, "ridge_regress": [2, 1040, 1041, 1047], "ridgeclassifi": [2, 350, 362, 672, 673, 675, 997, 1002, 1037, 1041, 1045, 1046, 1047, 1050], "ridgeclassifiercv": [2, 398, 673, 674, 788, 997, 1001, 1002, 1040, 1042, 1043, 1045, 1046, 1050], "ridgecv": [2, 43, 107, 154, 168, 186, 247, 389, 398, 414, 568, 643, 672, 675, 997, 1002, 1032, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050], "ridgecvridgecv": [154, 186], "ridgeridg": 186, "ridgewai": [145, 414], "riedmann": 1044, "ries": 1046, "rifkin": 997, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 84, 86, 93, 95, 97, 110, 111, 113, 118, 122, 123, 125, 126, 127, 129, 134, 136, 137, 138, 146, 147, 148, 149, 156, 164, 170, 173, 182, 189, 200, 202, 212, 213, 214, 215, 217, 218, 221, 222, 238, 241, 242, 254, 256, 257, 259, 260, 263, 264, 265, 269, 272, 276, 279, 280, 282, 283, 294, 302, 304, 307, 309, 311, 314, 324, 325, 329, 339, 341, 343, 346, 348, 350, 355, 357, 358, 375, 377, 383, 387, 388, 390, 404, 406, 407, 410, 412, 413, 414, 417, 463, 481, 482, 483, 484, 534, 541, 544, 557, 558, 559, 560, 561, 562, 564, 565, 566, 587, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 635, 676, 678, 869, 912, 913, 914, 915, 916, 934, 948, 990, 993, 995, 997, 999, 1001, 1003, 1004, 1008, 1013, 1015, 1016, 1017, 1021, 1025, 1027, 1034, 1040, 1046, 1048, 1049], "right_impur": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "rightarrow": [417, 619, 1005], "rijn": [369, 1040], "rileran": 1046, "rio": [1042, 1044, 1045, 1046], "ripe": 315, "rise": 175, "rishabh": 1046, "rishi": 1044, "rishikesh": 1039, "risk": [16, 48, 88, 149, 211, 215, 229, 310, 346, 358, 374, 375, 389, 401, 406, 411, 414, 567, 568, 889, 890, 892, 893, 894, 895, 997, 1001, 1025, 1039], "riski": 229, "riskiest": [211, 229], "ritchi": 1043, "rithvik": 1044, "ritter": [1046, 1047], "ritual": 350, "rival": [43, 901, 1014], "rk": 98, "rkf": [411, 815], "rl2007": 997, "rlm": 1042, "rm": [111, 173, 379, 383, 409], "rmse": [43, 52, 112, 149, 315, 1001, 1043], "rmse_": 315, "rmse_test_mean": 315, "rmse_test_scor": 315, "rmse_test_std": 315, "rmse_train_mean": 315, "rmse_train_scor": 315, "rmse_train_std": 315, "rmsle": 1001, "rmtree": [87, 104, 408], "rna": 387, "rnd": 310, "rng": [44, 58, 59, 67, 70, 72, 79, 83, 95, 112, 116, 120, 122, 127, 135, 146, 149, 150, 151, 153, 170, 171, 174, 176, 177, 179, 181, 182, 185, 188, 193, 194, 195, 196, 197, 201, 206, 212, 213, 218, 225, 238, 244, 245, 247, 254, 264, 272, 275, 280, 281, 301, 304, 313, 316, 319, 320, 322, 324, 325, 328, 329, 333, 342, 356, 358, 363, 377, 380, 398, 420, 469, 473, 474, 475, 477, 478, 479, 480, 643, 649, 670, 672, 678, 687, 812, 839, 840, 841, 843, 844, 845, 849, 852, 854, 855, 856, 881, 893, 896, 897, 899, 900, 901, 910], "ro": 63, "road": 387, "rob": [1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1044, 1047], "robert": [0, 168, 199, 286, 372, 397, 412, 528, 535, 628, 656, 721, 723, 724, 735, 870, 991, 997, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1047, 1050], "roberto": [407, 441, 1050], "robertson": 1045, "robin": [181, 182, 627, 991, 1038, 1041, 1046, 1047], "robinson": 1045, "robl": 1039, "robson": 1042, "robust": [2, 48, 70, 94, 96, 108, 110, 144, 146, 168, 182, 183, 186, 187, 192, 202, 213, 215, 228, 238, 248, 284, 309, 324, 364, 372, 383, 407, 414, 415, 445, 447, 468, 469, 472, 473, 474, 475, 524, 534, 559, 560, 649, 657, 670, 671, 678, 679, 750, 834, 865, 879, 881, 882, 893, 899, 946, 1001, 1005, 1007, 1011, 1014, 1015, 1020, 1022, 1023, 1025, 1026, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1048], "robust_contour": 111, "robust_cov": 111, "robust_mah": 111, "robust_scal": [2, 882, 893, 1040], "robustli": [8, 214], "robustscal": [2, 248, 881, 894, 991, 1011, 1037, 1038, 1040, 1042, 1043, 1044, 1048], "roc": [2, 50, 62, 139, 168, 183, 237, 239, 248, 249, 261, 263, 264, 271, 325, 326, 382, 405, 406, 411, 504, 510, 564, 658, 702, 706, 707, 708, 727, 782, 788, 789, 819, 830, 833, 871, 909, 1007, 1022, 1029, 1034, 1035, 1037, 1038, 1042, 1044, 1048], "roc_auc": [50, 168, 269, 273, 278, 279, 382, 634, 702, 733, 1001, 1029], "roc_auc_ovo": [1001, 1042], "roc_auc_ovo_weight": [1001, 1042], "roc_auc_ovr": [1001, 1042], "roc_auc_ovr_weight": [1001, 1042], "roc_auc_scor": [2, 62, 168, 269, 278, 318, 325, 702, 706, 707, 708, 789, 1001, 1034, 1035, 1040, 1042, 1046, 1047], "roc_curv": [2, 50, 239, 266, 278, 702, 706, 727, 782, 788, 1001, 1032, 1033, 1034, 1037, 1038, 1040, 1045, 1048, 1050], "roc_displai": 239, "rocchio": [350, 851], "rocco": [1045, 1046, 1047], "roccurvedisplai": [2, 139, 248, 251, 263, 266, 278, 279, 318, 382, 788, 789, 1007, 1029, 1042, 1048, 1049, 1050], "rock": 112, "rocklin": [374, 380], "roddi": [1041, 1042], "rodent": [50, 302, 370, 498], "roderick": 991, "rodion": 1045, "rodrigo": [1040, 1050], "rodrigu": [1039, 1040, 1045], "rodr\u00edguez": 315, "roeder": 1042, "roehr": [1048, 1049], "roei": 1044, "roeschk": 1041, "roger": [723, 1039, 1040, 1044], "rogerstanimoto": [449, 456, 699, 778, 779, 780, 1004], "rogerstanimotodist": 699, "rohan": [1037, 1038, 1040, 1041, 1045], "rohit": [1035, 1036, 1040, 1041], "roi": [1032, 1046], "roi_siz": 87, "roic": 1047, "rok": 1042, "rokem": [1032, 1038], "rokhlin": [535, 541, 948], "roland": [1034, 1035], "rolando": [1033, 1034], "role": [0, 278, 362, 374, 412], "roll": [2, 100, 183, 230, 231, 236, 378, 407, 530, 692, 693, 942, 1022, 1025, 1042, 1047], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1039, 1044], "roman": [0, 396, 627, 918, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "roman4oo": 1047, "romaniuk": 1036, "romero": 1050, "romijnd": 1044, "romuald": 1041, "ron": [0, 397, 1032], "ronald": [370, 1005, 1035, 1045], "ronan": [1032, 1035, 1040], "ronchetti": [649, 997], "rong": 1016, "ronrubin": [664, 685, 686, 997], "ronsin": [1040, 1041, 1049], "room": [309, 370, 380, 407, 1024], "roopam": [1040, 1041], "root": [2, 43, 111, 149, 168, 195, 357, 372, 375, 383, 407, 441, 501, 541, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 639, 790, 791, 912, 913, 914, 915, 916, 918, 1001, 1007, 1017, 1034, 1040, 1041, 1042, 1043, 1046, 1047], "root_": 441, "root_mean_squared_error": [2, 52, 149, 403, 1001, 1049], "root_mean_squared_log_error": [2, 403, 1001, 1049], "rope": 269, "rope_interv": 269, "rope_prob": 269, "rori": 1043, "rosa": 1047, "rosal": 411, "rosati": 1050, "rose": 370, "rosenberg": [407, 717, 737, 795], "rosenfeld": 1040, "ross": [534, 607, 608, 1017, 1046, 1047], "rosset": [134, 414, 519, 553], "rossi": 1035, "rosslimlinyang_ijcv": 534, "rostamizadeh": 990, "rostomyan": 1040, "rotat": [47, 75, 115, 119, 122, 125, 127, 145, 156, 183, 189, 234, 280, 281, 288, 339, 345, 410, 412, 417, 419, 504, 532, 541, 550, 614, 697, 884, 916, 997, 1022, 1043, 1044], "rotation_mod": 280, "rotations_": 550, "roth": [1037, 1040, 1047], "rough": [25, 395, 1007], "roughli": [134, 146, 201, 260, 279, 289, 314, 362, 389, 412, 415, 519, 998, 1032], "rouli": 1035, "round": [46, 48, 62, 115, 140, 149, 181, 182, 218, 229, 269, 275, 311, 313, 350, 389, 449, 455, 456, 564, 565, 593, 594, 597, 627, 692, 713, 802, 812, 869, 901, 916, 918, 991, 1005, 1017, 1034, 1036, 1038, 1040, 1041, 1043, 1045, 1046, 1048, 1049], "rounded_list": 812, "rouseeuw1984": 473, "rousseeuw": [111, 112, 407, 409, 468, 473, 792, 793, 1007], "rousseuw": [111, 112], "rout": [2, 61, 132, 183, 195, 237, 263, 326, 421, 424, 427, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 957, 958, 959, 960, 984, 1022, 1027, 1046, 1048], "route_param": [245, 957], "routed_param": [245, 960], "routemappingpair": 957, "router": [2, 245, 389, 398, 957, 958, 959, 960], "routerconsumerclassifi": 245, "routerconsumerclassifierifittedrouterconsumerclassifi": 245, "routin": [325, 364, 369, 372, 375, 376, 377, 378, 383, 387, 389, 416, 672, 674, 687, 847, 906, 907, 908, 909, 910, 998, 1004, 1011, 1012, 1015, 1025, 1032, 1046, 1047, 1048], "routing_info": 957, "routlei": 1038, "rouvinen": 1037, "roux": [658, 997, 1014], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 93, 107, 118, 140, 142, 152, 155, 181, 211, 212, 213, 239, 242, 248, 249, 263, 311, 357, 362, 370, 377, 384, 388, 389, 404, 407, 410, 415, 422, 441, 442, 446, 448, 449, 450, 452, 455, 456, 458, 463, 467, 487, 489, 490, 492, 493, 494, 495, 500, 501, 502, 504, 505, 510, 511, 513, 526, 534, 542, 548, 551, 590, 591, 620, 628, 632, 643, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 692, 696, 697, 710, 718, 719, 725, 758, 759, 763, 766, 768, 769, 770, 771, 773, 774, 776, 778, 779, 780, 781, 797, 798, 833, 839, 840, 841, 842, 843, 849, 852, 853, 854, 855, 856, 859, 870, 874, 876, 877, 879, 889, 890, 891, 894, 895, 898, 902, 921, 926, 930, 931, 948, 971, 974, 978, 980, 982, 983, 986, 987, 990, 991, 993, 995, 997, 999, 1001, 1002, 1004, 1011, 1012, 1015, 1016, 1021, 1039, 1040, 1041, 1042, 1047], "row_compl": 57, "row_id_attribut": 369, "row_idx": [59, 211], "row_idx_shuffl": 58, "row_ind": [422, 450, 452], "row_indic": 149, "row_labels_": [57, 58, 59, 404, 450, 452], "row_norm": 257, "rowan": 1047, "rowei": [689, 693, 853, 998, 1004], "rows_": [57, 404, 422, 450, 452], "royal": [541, 627, 880, 892, 1015], "rp": 242, "rpath": 373, "rr2007": 993, "rragundez": 1040, "rsalakhu": 644, "rsh": [281, 320], "rskf": 816, "rsme": 1001, "rsnegrin": 1046, "rsplit": [45, 55, 270], "rst": [363, 375, 383, 1032], "rstride": 187, "rt": 139, "rt_model": 139, "rtn": 51, "rtol": [377, 844, 845, 849], "ruben": 1047, "rubi": 1044, "rubia": 1035, "rubial": 1045, "rubin": 991, "rubinstein": [664, 685, 686], "rubric": 998, "ruchitagard": 1042, "rudi": 1038, "rudresh": 1047, "ruff": [375, 393, 400], "ruifeng": [1038, 1039, 1044], "ruin": 375, "ruiter": 1047, "rule": [2, 13, 27, 43, 64, 140, 191, 204, 263, 355, 357, 358, 362, 372, 375, 376, 377, 387, 389, 390, 402, 405, 406, 407, 411, 412, 414, 416, 536, 549, 550, 551, 552, 553, 561, 562, 569, 570, 594, 602, 634, 645, 658, 659, 666, 667, 668, 673, 675, 676, 677, 678, 706, 707, 711, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 853, 904, 917, 990, 995, 1003, 1004, 1015, 1017, 1021, 1027, 1034, 1037, 1044, 1049], "ruleset": 1017, "rumelhart": 1005, "rumsfeld": [45, 370], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 373, 375, 376, 377, 379, 380, 381, 382, 383, 387, 389, 390, 393, 394, 401, 403, 407, 409, 411, 414, 417, 418, 419, 436, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 461, 463, 466, 467, 470, 471, 531, 532, 533, 534, 535, 537, 539, 541, 542, 543, 545, 546, 548, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 582, 592, 594, 595, 596, 598, 599, 600, 602, 610, 611, 630, 634, 640, 646, 647, 649, 651, 652, 653, 655, 656, 660, 661, 662, 663, 682, 683, 688, 689, 690, 691, 692, 693, 694, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 836, 837, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 866, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 921, 923, 942, 943, 971, 974, 990, 1000, 1002, 1005, 1014, 1016, 1017, 1020, 1021, 1025, 1032, 1035, 1037, 1039, 1040, 1041, 1042, 1046, 1047, 1048], "run_histori": 47, "run_id": 94, "run_tim": [226, 227], "rung": 1011, "runnabl": [54, 379, 380], "runtim": [30, 47, 49, 91, 134, 198, 226, 228, 243, 307, 311, 363, 377, 378, 387, 389, 401, 407, 414, 449, 563, 679, 814, 904, 905, 906, 907, 908, 909, 910, 1015, 1016, 1035, 1039, 1040, 1046, 1047, 1049, 1050], "runtime_histori": 47, "runtimewarn": 179, "runxfail": 383, "rupesh": 1035, "rush": [43, 52, 375], "rushabh": 1043, "rushil": [1047, 1048], "russ": [628, 991], "russel": [1038, 1039], "russellrao": [449, 456, 699, 778, 779, 780, 1004], "russellraodist": 699, "russian": 415, "ruth": 1042, "rutter": 1045, "ruusmann": 1038, "rv": [0, 804, 812, 814, 990, 1032, 1033, 1036, 1037, 1038, 1039, 1040], "rv_discrete_frozen": 281, "rvd": [468, 473], "rvdriessen": [468, 473], "rw2006": [417, 610, 611], "rwelsch427": 1050, "ryad": 1038, "ryan": [1035, 1038, 1040, 1041], "ryb": 355, "ryder": 51, "ryotaro": 1044, "r\u00e9my": 1038, "r\u00fcdiger": [1040, 1041, 1043], "s1": [121, 168, 178, 199, 201, 372], "s2": [121, 168, 178, 199, 201, 372, 550], "s22": 498, "s3": [57, 121, 168, 199, 201, 372], "s4": [168, 199, 201, 372], "s5": [168, 199, 201, 372, 1009], "s6": [168, 199, 201, 372], "s_": [121, 273, 997, 998, 1009, 1011], "s__p": 864, "s_color": 231, "s_hessian": 231, "s_i": [407, 997, 1011], "s_ica_": 122, "s_isomap": 231, "s_j": 407, "s_ltsa": 231, "s_mod": 231, "s_pca_": 122, "s_point": 231, "s_scale": 231, "s_spectral": 231, "s_standard": 231, "s_t_sne": 231, "sa": [370, 492], "saaba": 1037, "saad": 1050, "sabharw": 1042, "sabri": 1047, "sach": 51, "sachdev": 1047, "sachdeva": 1039, "sachin": [1039, 1040, 1046], "sackei": 1042, "saclai": 0, "sacr": 1020, "sad": [818, 819], "sadak": 1044, "sadhana": 1040, "sadli": 146, "sadra": 1048, "sad\u0142ocha": 1045, "saeed": 1001, "saeger": [1037, 1038, 1039], "safari": 1011, "safe": [2, 72, 186, 201, 263, 351, 375, 377, 407, 408, 432, 464, 508, 509, 567, 568, 593, 597, 774, 778, 828, 829, 831, 863, 898, 966, 972, 1004, 1038, 1039, 1040, 1045, 1046], "safe_copi": 1039, "safe_index": [384, 1042], "safe_mask": [2, 384], "safe_realloc": 1035, "safe_sparse_dot": [2, 384, 1042], "safe_sqr": [2, 384], "safeguard": 401, "safer": [351, 358, 373, 407, 411, 1032], "safest": [211, 229, 358, 369], "safeti": [102, 387, 408, 966, 1021, 1042], "safikh": 1047, "safiuddin": 1047, "sag": [218, 658, 659, 672, 674, 687, 997, 1015, 1037, 1038, 1039, 1041, 1042], "sag_solv": 1041, "saga": [66, 203, 226, 227, 658, 659, 672, 674, 687, 814, 997, 1039, 1041], "sagar": 1042, "sagnik": 1040, "saha": 1046, "sahil": 1048, "sahin": 1042, "sahu": 1044, "sai": [198, 238, 346, 350, 351, 375, 405, 407, 408, 412, 414, 415, 445, 446, 500, 504, 510, 677, 990, 1007, 1014, 1025, 1049, 1050], "said": [149, 186, 238, 270, 370, 375, 792, 999, 1007], "saihttam": 1038, "sailesh": [1039, 1040], "saint": 1038, "saito": [412, 538, 540, 547, 1039], "saiw": 1038, "sake": [43, 64, 146, 149, 182, 186, 211, 314, 343, 350, 352, 383, 387, 670], "saket": [1036, 1037, 1044], "sakinaouisrani": 1046, "salahuddin": 1047, "salakhutdinov": [644, 853, 1004], "salamin": 1036, "sale": [143, 248, 269, 1001, 1025], "saleem": 1042, "salerno": 372, "salim": [1049, 1050], "sallisaw": [408, 465], "salman": [0, 396, 1047, 1048, 1049, 1050], "salt": [67, 243, 311, 1046], "salvator": [1032, 1046, 1047, 1049, 1050], "salz": 1039, "salzmann": [211, 229], "sam": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047], "sambhav": 1043, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 86, 88, 90, 91, 97, 102, 103, 104, 118, 120, 122, 125, 127, 129, 135, 137, 141, 143, 146, 147, 149, 152, 168, 170, 186, 187, 189, 198, 199, 201, 206, 211, 212, 213, 219, 229, 245, 249, 259, 263, 264, 265, 266, 267, 269, 270, 272, 274, 275, 277, 282, 283, 289, 292, 294, 306, 309, 310, 312, 314, 315, 318, 320, 331, 339, 350, 351, 352, 357, 358, 362, 363, 364, 369, 370, 372, 374, 375, 377, 379, 381, 383, 384, 387, 388, 389, 390, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 432, 437, 438, 445, 449, 455, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 493, 495, 496, 498, 504, 508, 509, 531, 532, 535, 536, 537, 538, 539, 540, 543, 547, 549, 551, 552, 553, 554, 557, 559, 560, 561, 562, 564, 565, 567, 568, 589, 590, 602, 603, 606, 610, 611, 613, 622, 627, 628, 629, 632, 633, 646, 649, 652, 653, 655, 658, 659, 663, 666, 667, 668, 672, 673, 674, 675, 676, 677, 678, 684, 687, 699, 704, 705, 712, 713, 715, 717, 726, 731, 732, 736, 755, 756, 757, 778, 779, 780, 786, 788, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 808, 809, 814, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 846, 847, 848, 852, 854, 855, 856, 867, 868, 869, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 893, 904, 905, 912, 914, 925, 932, 936, 948, 966, 971, 974, 975, 985, 990, 991, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1020, 1021, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "same_kind": 1049, "samesh": [1042, 1043], "samm": [134, 414, 553, 1048, 1049], "samoocha": 1040, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 80, 82, 86, 89, 90, 91, 92, 93, 98, 111, 112, 113, 116, 118, 120, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 149, 150, 155, 156, 157, 165, 167, 168, 170, 174, 175, 176, 177, 179, 181, 183, 186, 187, 191, 192, 197, 198, 199, 201, 204, 211, 213, 215, 218, 219, 221, 222, 223, 225, 227, 228, 229, 231, 238, 242, 243, 245, 246, 248, 254, 255, 257, 258, 259, 260, 261, 263, 264, 268, 269, 271, 272, 273, 275, 277, 281, 283, 284, 288, 289, 293, 294, 295, 296, 298, 299, 300, 302, 306, 307, 309, 311, 312, 313, 314, 316, 318, 320, 321, 323, 325, 326, 328, 330, 331, 332, 333, 334, 335, 337, 339, 341, 343, 344, 346, 347, 350, 351, 355, 357, 362, 368, 370, 371, 374, 375, 377, 378, 387, 388, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 424, 425, 426, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 455, 456, 457, 460, 461, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 611, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 687, 688, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 763, 764, 768, 769, 770, 771, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 926, 930, 931, 935, 936, 948, 952, 969, 971, 974, 975, 978, 981, 989, 990, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "sample_i": [179, 417, 611, 1046], "sample_id": [357, 370, 497], "sample_interv": 638, "sample_interval_": 1048, "sample_posterior": [182, 627, 991], "sample_s": [91, 243, 351, 793], "sample_score_mean": 273, "sample_score_std": 273, "sample_silhouette_valu": 93, "sample_step": 638, "sample_weight": [61, 195, 211, 224, 229, 245, 319, 324, 325, 348, 375, 389, 398, 407, 414, 418, 424, 430, 436, 442, 443, 446, 448, 458, 459, 464, 468, 481, 482, 483, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 610, 611, 632, 633, 634, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 800, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 869, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 960, 988, 1001, 1015, 1016, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "sample_weight1": 245, "sample_weight2": 245, "sample_weight_const": 348, "sample_weight_last_ten": 348, "sample_weight_vect": 936, "sample_without_replac": [2, 384, 1038], "samples_weight": 224, "samplewis": [754, 1001], "samson": 1039, "samuel": [696, 1025, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "samuela": 1035, "samu\u00ebl": 1039, "san": [168, 372, 415, 1013], "sanchez": [1040, 1041], "sandbox": 401, "sandeep": 1044, "sander": [407, 418, 443, 445, 449, 456, 850, 1007, 1041, 1042], "sandi": 1045, "sandip": [1049, 1050], "sandra": [1041, 1047], "sandro": [1040, 1047], "sandrocasagrand": [1040, 1041], "sandrovskii": 1039, "sangam": 1047, "sangamswadik": 1047, "sangeeth": 1041, "saniti": [378, 868, 1001, 1032, 1033], "sanjabi": 1042, "sanjai": 1046, "sanjai_3": [1047, 1048], "sanjoi": [898, 1013], "sano": 1046, "sanofi": 51, "santa": [178, 1047], "santana": [1043, 1046], "santhanam": 1040, "santhosh": 1043, "santhoshbala18": 1043, "santi": [1037, 1039, 1040], "santiago": 1043, "sap": 51, "sapiro": [412, 531, 537], "saqib": 1040, "sara": 1045, "sarah": [1039, 1041, 1044], "sarahremu": [1047, 1050], "sarajpoor": 1047, "sarat": 1043, "sarawagi": 783, "sarra": 1042, "sartaj": 1038, "sasank": 1038, "sashka": [1047, 1048], "sass": [375, 393, 400], "sassenhagen": [1044, 1049], "sat": [43, 149, 187, 415], "satellit": 1004, "satisfi": [407, 650, 654, 699, 717, 736, 737, 844, 845], "satish": 1040, "sato": 1035, "satrajit": [0, 397, 1032, 1033], "satur": [72, 186, 309], "sauerbrei": 1011, "sauerkraut": 415, "saul": [689, 693, 998, 1039, 1040, 1042], "saurabh": [1036, 1037, 1038, 1039, 1040, 1044], "sauvignon": 315, "saval": 1041, "savard": 1032, "save": [86, 102, 104, 248, 307, 374, 375, 379, 381, 382, 383, 389, 401, 411, 419, 467, 491, 534, 535, 627, 844, 845, 902, 997, 1001, 1011, 1017, 1025, 1032, 1035, 1039, 1042, 1050], "savings_statu": 263, "savkomax": 1047, "saw": [121, 212, 215], "sawtooth": 121, "say_hello": 961, "sc": [369, 407], "scaja": 1049, "scala": 1021, "scalabl": [77, 79, 95, 183, 190, 243, 261, 323, 351, 375, 407, 414, 415, 447, 490, 502, 589, 640, 806, 817, 828, 830, 842, 865, 874, 876, 904, 906, 909, 910, 993, 996, 998, 1001, 1014, 1016, 1022, 1025, 1032, 1035, 1036, 1042, 1043, 1046, 1047], "scalar": [2, 120, 321, 326, 381, 389, 403, 408, 417, 419, 463, 466, 524, 533, 615, 616, 617, 622, 623, 627, 628, 630, 738, 742, 926, 934, 993, 1005, 1007, 1011, 1015, 1020, 1042, 1043, 1046, 1048], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 80, 81, 89, 91, 94, 103, 104, 110, 113, 116, 122, 125, 144, 151, 168, 170, 171, 172, 175, 176, 177, 183, 187, 191, 194, 195, 199, 203, 211, 213, 215, 225, 226, 227, 229, 230, 233, 238, 244, 248, 259, 266, 269, 270, 271, 272, 276, 292, 294, 305, 306, 307, 308, 309, 313, 319, 322, 324, 325, 333, 334, 336, 339, 343, 358, 361, 362, 367, 368, 369, 372, 375, 380, 384, 387, 388, 389, 407, 408, 412, 414, 415, 416, 417, 445, 446, 449, 450, 456, 463, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 501, 510, 514, 515, 524, 534, 538, 540, 541, 547, 549, 550, 561, 562, 582, 590, 591, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 631, 632, 641, 644, 645, 646, 647, 649, 652, 658, 659, 660, 661, 662, 672, 674, 676, 677, 678, 681, 687, 688, 689, 690, 692, 694, 699, 703, 716, 741, 747, 757, 759, 769, 775, 777, 814, 817, 830, 831, 832, 844, 845, 846, 861, 862, 865, 868, 873, 874, 876, 879, 881, 882, 884, 889, 890, 891, 893, 894, 896, 897, 904, 905, 906, 907, 908, 909, 910, 975, 976, 977, 978, 981, 990, 993, 994, 997, 1001, 1002, 1003, 1004, 1005, 1009, 1015, 1016, 1021, 1022, 1025, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "scale_": [649, 873, 874, 882, 884, 894, 1011, 1037], "scaled_clf": 314, "scaled_pca": 314, "scaled_x_train": 314, "scaler": [45, 103, 105, 166, 183, 227, 228, 243, 248, 250, 252, 283, 292, 297, 308, 313, 314, 323, 339, 342, 358, 380, 408, 411, 489, 658, 659, 672, 674, 687, 864, 873, 874, 876, 880, 881, 882, 884, 889, 890, 891, 892, 893, 894, 895, 1005, 1011, 1015, 1022, 1032, 1037, 1040, 1045], "scaler2": 252, "scalewai": 383, "scaling_": 550, "scalings_": [549, 550], "scanpi": 1049, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 82, 85, 89, 90, 91, 92, 93, 95, 100, 111, 116, 118, 122, 124, 125, 126, 128, 135, 136, 140, 142, 150, 152, 153, 155, 161, 163, 170, 171, 172, 174, 176, 177, 178, 179, 185, 186, 191, 194, 202, 204, 208, 209, 212, 213, 214, 220, 223, 224, 225, 228, 231, 232, 233, 234, 235, 236, 238, 243, 244, 246, 254, 255, 256, 257, 258, 259, 260, 264, 270, 272, 284, 289, 292, 295, 296, 297, 298, 299, 300, 301, 304, 309, 311, 312, 314, 322, 330, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 350, 355, 356, 371, 409, 631, 701, 995, 997], "scatter_": 701, "scatter_fig": 140, "scatter_handl": 204, "scatter_kwarg": [43, 52, 107, 154, 186, 701], "scatter_label": 204, "scatter_trac": 140, "scatterplot": [115, 193, 269], "scatterpoint": [124, 128, 234, 256, 330], "scenario": [90, 102, 149, 170, 191, 215, 272, 358, 382, 393, 406, 411, 414, 537, 543, 545, 546, 995, 1001, 1011, 1042], "scene": [372, 383, 1004, 1006, 1045], "schapir": [50, 286, 302, 370, 414, 498, 553, 554], "schedul": [149, 305, 363, 379, 676, 677, 678, 861, 862, 1015, 1025, 1039], "scheidegg": 1032, "scheme": [278, 294, 315, 316, 370, 379, 389, 407, 411, 413, 415, 566, 590, 658, 659, 705, 813, 847, 871, 872, 875, 877, 881, 885, 888, 893, 904, 909, 990, 997, 1011, 1015, 1032, 1040, 1043, 1044, 1049, 1050], "scherer": 1038, "scheubrein": 1044, "schloss": 1001, "schl\u00fcter": [1032, 1040], "schmerler": 1047, "schmid": [758, 759, 999], "schmidt": [658, 997, 1035], "schmitt": [1042, 1043], "schmitz": 1049, "schneider": [350, 1045, 1050], "schoelkopf": 900, "schoentgen": [1040, 1041], "schofield": 1032, "schole": 1044, "scholkopf1997": 412, "scholkopf1998": 1011, "scholz": 1050, "school": [102, 175, 186, 372, 407, 788, 1001], "schreiber": [0, 397, 1037, 1038, 1039], "schroeder": [45, 370], "schubert": [407, 418, 443, 449, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1050], "schucker": 1038, "schuder": [1040, 1041, 1042], "schuetz": [839, 843], "schuldt": 1036, "schult": 55, "schulz": 1032, "schumach": [1035, 1036, 1037], "schut": 1032, "schwardt": 1032, "schwartz": [1032, 1034, 1046], "schwetlick": [1043, 1044], "sch\u00f6lkopf": [44, 412, 535, 870, 1007, 1011, 1016], "sch\u00f6nberger": [1034, 1035], "sch\u00fctze": [412, 590, 999, 1001, 1003], "sci": [57, 102, 350, 351, 352, 370, 387, 487, 689, 693, 875, 998, 1011], "scibol": 1043, "scienc": [0, 73, 111, 168, 178, 186, 286, 369, 372, 387, 407, 439, 453, 538, 540, 547, 688, 689, 693, 851, 991, 993, 997, 998, 1001, 1004, 1013, 1021, 1025, 1040], "scientif": [0, 68, 243, 369, 373, 387, 393, 407, 451, 461, 501, 1025, 1027], "scientist": [991, 1025], "scikera": 1020, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 364, 367, 369, 370, 371, 372, 374, 375, 378, 381, 382, 383, 384, 388, 389, 394, 395, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 437, 442, 445, 446, 449, 456, 463, 464, 466, 467, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 512, 515, 521, 524, 538, 541, 561, 562, 564, 565, 567, 576, 581, 582, 583, 589, 599, 602, 611, 626, 628, 630, 632, 634, 638, 640, 646, 648, 652, 658, 669, 680, 688, 697, 700, 701, 702, 717, 718, 732, 742, 748, 778, 779, 780, 788, 795, 799, 800, 801, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 822, 823, 826, 827, 830, 832, 833, 846, 848, 864, 865, 867, 869, 871, 874, 876, 877, 878, 879, 883, 884, 885, 888, 901, 902, 904, 909, 912, 913, 920, 922, 942, 943, 953, 966, 967, 990, 991, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1014, 1015, 1016, 1017, 1019, 1022, 1024, 1027, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "scikit_learn": 1020, "scikit_learn_data": [52, 370, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499], "scipi": [0, 2, 45, 53, 55, 57, 76, 80, 81, 86, 87, 109, 110, 113, 121, 123, 127, 145, 170, 186, 189, 198, 202, 255, 259, 260, 266, 269, 277, 281, 289, 294, 299, 307, 319, 320, 325, 326, 328, 329, 362, 369, 370, 373, 375, 377, 381, 383, 384, 387, 388, 389, 393, 400, 401, 403, 404, 407, 412, 415, 449, 450, 451, 452, 456, 461, 462, 496, 503, 508, 532, 534, 535, 541, 544, 581, 582, 585, 586, 588, 589, 610, 611, 648, 649, 653, 657, 658, 659, 663, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 684, 687, 691, 692, 695, 719, 760, 763, 778, 779, 780, 781, 792, 793, 804, 812, 814, 830, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 861, 867, 876, 877, 882, 883, 884, 887, 891, 894, 895, 904, 906, 907, 909, 910, 945, 949, 950, 955, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 990, 991, 997, 999, 1002, 1004, 1005, 1011, 1015, 1016, 1019, 1021, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "sckit": 1048, "scls19fr": 1037, "scognamiglio": 414, "scope": [45, 57, 263, 362, 364, 375, 387, 415, 1020, 1021], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 91, 93, 102, 103, 104, 105, 106, 107, 109, 113, 116, 127, 132, 134, 136, 142, 143, 144, 145, 146, 149, 150, 153, 154, 160, 163, 164, 165, 168, 181, 183, 185, 186, 187, 188, 189, 191, 197, 203, 204, 207, 211, 213, 217, 219, 227, 229, 238, 243, 244, 245, 248, 252, 258, 261, 263, 267, 269, 270, 271, 272, 273, 274, 277, 278, 280, 281, 282, 283, 284, 286, 288, 296, 297, 298, 304, 305, 306, 307, 311, 314, 315, 316, 318, 319, 320, 321, 325, 326, 328, 329, 331, 332, 339, 346, 350, 351, 354, 358, 370, 375, 377, 380, 388, 389, 401, 402, 403, 404, 405, 406, 408, 410, 412, 414, 416, 424, 426, 430, 436, 442, 446, 448, 451, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 502, 504, 532, 536, 541, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 609, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738, 739, 740, 742, 755, 756, 757, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 803, 804, 806, 814, 819, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 853, 854, 855, 860, 861, 862, 864, 884, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 920, 922, 950, 990, 993, 997, 999, 1004, 1007, 1009, 1011, 1015, 1021, 1022, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 274, "score_estim": [211, 229], "score_full_data": 181, "score_func": [72, 103, 104, 416, 592, 595, 596, 598, 599, 600, 742, 1032, 1034, 1049], "score_iri": 275, "score_iterative_imput": 181, "score_label": [229, 275], "score_mean": 342, "score_nam": [62, 72, 244, 271, 324, 351, 806, 823], "score_param": [593, 594, 659, 1049], "score_rand": 275, "score_sampl": [258, 294, 295, 296, 302, 389, 413, 468, 532, 541, 563, 677, 797, 798, 800, 803, 804, 814, 849, 850, 860, 864, 908, 1007, 1035, 1040, 1042, 1044], "score_simple_imput": 181, "score_std": 342, "score_tim": [271, 411, 827, 828], "score_times_nb": 271, "score_times_svm": 271, "score_typ": [244, 271, 282, 324, 806, 823, 1048], "score_valu": 351, "scorer": [2, 149, 154, 229, 245, 263, 273, 325, 377, 389, 398, 406, 411, 414, 416, 561, 562, 594, 602, 634, 659, 673, 675, 711, 732, 733, 742, 800, 803, 804, 806, 814, 822, 823, 826, 827, 828, 829, 831, 958, 990, 997, 1001, 1009, 1021, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "scorer1_nam": 411, "scorer2_nam": 411, "scorer_": [800, 803, 804, 814], "scorer_nam": [273, 800, 814], "scores_": [193, 194, 592, 595, 596, 598, 599, 600, 644, 645, 659, 1032, 1042], "scores_df": 52, "scores_glm_pure_premium": 229, "scores_matrix": 280, "scores_max": 55, "scores_product_model": 229, "scores_std": 159, "scoring_cal": 711, "scoring_inner_cv": 325, "scoring_on_bootstrap": 272, "scoring_weight": 398, "scott": [413, 849, 1032, 1033, 1038, 1040, 1041, 1042, 1047, 1048], "scottlog": 1050, "scratch": [376, 441, 1001, 1034], "screen": [48, 1045], "screenporch": 143, "screenshot": 373, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 375, 376, 377, 378, 379, 381, 387, 389, 393, 401, 415, 1021, 1024], "scroll": 395, "scrollbar": 380, "scrutin": 278, "scsi": 57, "scullei": 407, "sdenton4": 1035, "sdg_param": 332, "se": [168, 233, 372, 393], "seabold": [1035, 1037, 1038], "seaborn": [72, 126, 135, 149, 185, 186, 193, 197, 259, 269, 375, 393, 400, 1020], "seagreen": 206, "seal": 1038, "seamu": 1034, "sean": [1044, 1045, 1047], "seanpwilliam": 1039, "sear": 1038, "search": [2, 45, 52, 64, 80, 87, 103, 104, 105, 106, 146, 163, 165, 167, 168, 170, 183, 229, 244, 245, 259, 261, 263, 268, 270, 273, 274, 276, 281, 288, 289, 291, 293, 307, 311, 323, 339, 345, 350, 358, 372, 373, 375, 377, 387, 389, 402, 407, 408, 411, 414, 415, 416, 418, 442, 447, 449, 451, 456, 457, 460, 463, 470, 471, 477, 502, 515, 522, 557, 558, 559, 560, 564, 565, 566, 579, 599, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 628, 653, 676, 688, 689, 692, 693, 713, 728, 785, 788, 800, 803, 804, 811, 812, 814, 816, 830, 831, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 864, 909, 912, 913, 914, 915, 954, 988, 994, 996, 998, 1001, 1004, 1005, 1015, 1017, 1021, 1022, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1046, 1047, 1049], "search_05p": 146, "search_95p": 146, "search_cv": 103, "searchcv": [388, 1047], "searchforpass": 1048, "searchgrid": 1021, "searchsort": 50, "season": [43, 52, 175, 187, 212, 374], "seasonal_kernel": 175, "seasoncountcatu32": 52, "sebastian": [1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "sebastien": 1040, "sebastin": [1039, 1040], "sebasti\u00e1n": 1038, "seberg": 1033, "sec": [49, 219, 233, 236, 289], "sec65": 1047, "secant": 642, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 370, 377, 381, 389, 404, 406, 407, 411, 412, 414, 415, 417, 463, 466, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 504, 510, 553, 583, 588, 589, 590, 591, 621, 624, 631, 632, 699, 712, 716, 758, 759, 763, 764, 766, 767, 774, 775, 776, 777, 778, 781, 800, 803, 804, 814, 828, 834, 835, 838, 841, 852, 854, 855, 856, 861, 862, 990, 991, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1012, 1017, 1047], "secondari": [635, 1036], "secondli": [373, 387, 407, 414, 657, 997], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 120, 125, 137, 144, 149, 154, 159, 160, 161, 175, 179, 185, 186, 187, 189, 193, 197, 199, 201, 213, 235, 239, 245, 248, 250, 263, 267, 269, 272, 278, 314, 315, 316, 320, 350, 351, 352, 358, 368, 370, 373, 375, 376, 377, 379, 380, 381, 382, 383, 390, 398, 405, 406, 408, 410, 411, 412, 414, 415, 416, 417, 438, 442, 458, 534, 614, 619, 622, 637, 645, 788, 798, 906, 909, 990, 995, 997, 1001, 1002, 1004, 1005, 1007, 1008, 1015, 1016, 1017, 1018, 1032, 1034, 1035, 1036, 1039], "sector": 186, "sector_construct": 186, "sector_manufactur": 186, "sector_oth": 186, "secur": [379, 389, 1020, 1021, 1025, 1027], "sed": [379, 1032], "sedamaki": 1046, "sedykh": 1047, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 82, 83, 86, 88, 90, 91, 95, 97, 98, 100, 101, 111, 116, 120, 125, 126, 130, 134, 135, 136, 137, 140, 141, 142, 143, 145, 146, 147, 149, 151, 154, 159, 164, 165, 166, 168, 170, 175, 176, 177, 181, 183, 186, 187, 189, 191, 193, 194, 195, 197, 203, 204, 212, 213, 214, 215, 217, 228, 229, 231, 233, 240, 242, 245, 248, 249, 250, 252, 255, 256, 257, 262, 263, 264, 266, 268, 269, 270, 271, 272, 274, 276, 278, 279, 280, 283, 284, 286, 289, 295, 296, 298, 302, 309, 315, 316, 318, 319, 320, 321, 322, 323, 324, 330, 339, 343, 346, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 367, 368, 369, 370, 372, 373, 374, 375, 377, 379, 381, 382, 383, 387, 388, 389, 395, 401, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 490, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 610, 611, 614, 619, 622, 623, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 705, 706, 708, 711, 713, 743, 763, 774, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 947, 948, 969, 971, 974, 984, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 85, 87, 90, 92, 93, 97, 98, 103, 109, 110, 111, 118, 121, 137, 142, 161, 163, 188, 202, 207, 209, 214, 217, 220, 224, 228, 234, 255, 257, 258, 259, 260, 272, 275, 284, 294, 295, 296, 343, 344, 348, 351, 358, 363, 377, 384, 387, 389, 407, 411, 412, 442, 446, 447, 449, 451, 456, 458, 459, 460, 461, 470, 471, 472, 536, 544, 553, 554, 555, 556, 559, 560, 627, 646, 647, 652, 653, 660, 661, 662, 663, 677, 689, 691, 693, 695, 797, 798, 804, 835, 838, 853, 907, 933, 947, 948, 965, 969, 990, 991, 996, 998, 1036, 1037, 1041, 1042, 1048], "seeger": [639, 993], "seek": [231, 233, 235, 374, 375, 387, 390, 508, 509, 998], "seel": 1046, "seem": [43, 48, 52, 80, 88, 146, 149, 176, 187, 211, 235, 238, 270, 286, 305, 313, 346, 350, 351, 374, 375, 380, 406, 411, 501, 997, 1001], "seemingli": [229, 358, 387], "seen": [55, 62, 75, 88, 99, 113, 123, 129, 141, 146, 149, 186, 187, 235, 241, 245, 305, 309, 339, 350, 370, 377, 379, 388, 389, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 423, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 521, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 623, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 975, 981, 990, 996, 1001, 1004, 1005, 1011, 1017, 1025, 1044, 1045, 1046, 1047, 1048, 1049], "segfault": [363, 376, 1032, 1040, 1045], "segment": [51, 53, 55, 59, 71, 81, 86, 123, 183, 234, 241, 370, 383, 407, 415, 451, 461, 508, 509, 691, 860, 1001, 1022, 1025, 1040, 1042, 1044], "seguin": 1037, "sei": 415, "seismic_r": [193, 197], "sejourn": 1041, "sel": [398, 416], "seladu": 1048, "seldom": 904, "sele": [1046, 1047], "selecci\u00f3n": 315, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 84, 88, 90, 95, 101, 103, 106, 113, 118, 119, 120, 129, 130, 134, 136, 143, 146, 149, 154, 163, 165, 175, 177, 186, 187, 189, 191, 192, 194, 196, 197, 198, 200, 210, 215, 219, 226, 229, 232, 238, 242, 244, 248, 253, 254, 255, 263, 267, 268, 269, 270, 274, 282, 283, 293, 309, 314, 315, 320, 324, 326, 328, 329, 332, 334, 339, 346, 350, 351, 352, 358, 362, 370, 372, 373, 375, 377, 379, 383, 388, 389, 404, 407, 408, 409, 412, 414, 415, 417, 442, 444, 445, 446, 448, 450, 452, 457, 458, 459, 463, 465, 466, 471, 472, 475, 487, 488, 492, 493, 496, 497, 500, 501, 502, 504, 512, 515, 532, 534, 535, 540, 541, 544, 549, 551, 558, 559, 560, 563, 565, 581, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 627, 631, 632, 645, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 671, 673, 676, 678, 682, 683, 691, 692, 697, 712, 716, 718, 754, 788, 792, 793, 797, 798, 800, 803, 804, 805, 806, 814, 826, 827, 828, 830, 832, 846, 847, 848, 850, 852, 854, 855, 856, 864, 865, 869, 874, 880, 884, 901, 904, 905, 909, 912, 913, 914, 915, 926, 969, 970, 995, 996, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1011, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "select__k": 990, "select_dtyp": [107, 143, 323, 465], "selected_featur": 189, "selected_features_nam": 189, "selectfdr": [2, 416, 592, 596, 598, 599, 600, 606, 1036, 1038, 1039, 1048], "selectfpr": [2, 375, 416, 592, 595, 598, 599, 600, 606, 1048], "selectfrommodel": [2, 168, 389, 398, 593, 602, 603, 1023, 1027, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1049], "selectfw": [2, 416, 592, 595, 596, 599, 600, 606, 1048], "selectkbest": [2, 104, 106, 164, 165, 322, 358, 375, 398, 408, 416, 581, 592, 595, 596, 598, 600, 606, 990, 1033, 1038, 1048, 1049], "selectkbestselectkbest": [165, 322], "selector": [2, 52, 103, 164, 165, 248, 346, 383, 415, 416, 465, 581, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1034, 1042, 1044, 1048], "selectormixin": [2, 1043], "selectpercentil": [2, 87, 103, 252, 342, 416, 592, 595, 596, 598, 599, 603, 606, 1033, 1038, 1048, 1049], "selectpercentileselectpercentil": [103, 252], "self": [2, 47, 57, 62, 64, 89, 98, 118, 132, 178, 183, 189, 245, 283, 289, 327, 333, 339, 350, 369, 375, 376, 377, 380, 381, 382, 383, 407, 415, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 500, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 703, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 819, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 953, 957, 958, 960, 961, 966, 974, 989, 1004, 1021, 1022, 1023, 1025, 1027, 1034, 1039, 1046], "self_request": 245, "self_training_clf": 331, "self_training_model": [320, 901], "selftrain": 332, "selftrainingclassifi": [2, 320, 331, 332, 333, 398, 1014, 1044, 1049], "selftrainingclassifierifittedselftrainingclassifi": 320, "seljak": 1047, "sell": 107, "selvan": 1044, "semant": [54, 350, 351, 389, 544, 1026, 1027, 1034], "semi": [2, 38, 57, 67, 142, 161, 172, 243, 246, 311, 320, 335, 336, 339, 343, 370, 389, 487, 504, 535, 588, 590, 676, 729, 830, 864, 868, 899, 900, 901, 909, 999, 1004, 1007, 1022, 1023, 1027, 1032, 1044, 1047], "semi_supervis": [2, 183, 320, 322, 327, 328, 329, 330, 331, 332, 333, 398, 899, 900, 901, 1002, 1014, 1022, 1033, 1038, 1039, 1046, 1047], "semiconductor": 1025, "semidefinit": [179, 1011, 1016], "semilogi": [200, 242], "semilogx": [159, 200, 201], "semin": 414, "seminar": 1001, "semisupervis": [328, 389], "sen": [2, 150, 183, 192, 214, 217, 309, 649, 657, 671, 678, 679, 1022], "send": [375, 379, 390, 407, 419, 533], "sender": [350, 370], "sendyk": 1041, "seng": 1044, "senger": [0, 1048, 1049, 1050], "senior": [1011, 1025], "sens": [42, 43, 52, 55, 62, 88, 99, 176, 183, 186, 191, 242, 309, 315, 329, 339, 350, 358, 362, 375, 376, 389, 407, 409, 411, 416, 461, 468, 469, 470, 471, 472, 473, 474, 475, 652, 655, 656, 672, 801, 811, 901, 995, 997, 1004, 1005, 1007, 1011, 1014, 1022], "sensibl": [85, 181, 282, 286, 351, 377, 997, 1011], "sensit": [43, 79, 88, 111, 112, 137, 146, 183, 187, 213, 214, 215, 238, 239, 248, 261, 273, 276, 283, 309, 326, 339, 363, 364, 390, 406, 409, 414, 451, 461, 496, 551, 561, 658, 692, 700, 702, 712, 713, 718, 742, 784, 787, 788, 799, 800, 822, 830, 865, 884, 902, 996, 997, 998, 1000, 1001, 1005, 1007, 1015, 1016, 1022, 1036, 1050], "sensor": 197, "sent": [149, 407, 833, 1017], "sentenc": [102, 350, 352, 370, 390, 415], "seoeun": 1048, "sep": [118, 278], "sepal": [126, 128, 130, 142, 172, 252, 292, 320, 323, 336, 372, 1011], "sepal_col": 323, "separ": [52, 53, 61, 62, 66, 67, 75, 88, 93, 95, 99, 105, 111, 119, 120, 122, 125, 134, 136, 139, 152, 168, 173, 182, 183, 187, 188, 191, 192, 204, 210, 212, 232, 246, 256, 269, 272, 278, 279, 309, 311, 314, 320, 331, 334, 335, 337, 338, 339, 343, 344, 350, 358, 362, 371, 372, 377, 380, 383, 387, 389, 401, 405, 407, 408, 409, 412, 414, 415, 417, 463, 512, 519, 533, 538, 540, 541, 547, 549, 581, 588, 589, 591, 610, 631, 638, 646, 647, 673, 676, 677, 690, 694, 725, 732, 745, 746, 748, 753, 792, 819, 836, 837, 863, 864, 906, 908, 909, 914, 915, 990, 991, 993, 995, 997, 998, 1000, 1007, 1008, 1011, 1015, 1016, 1022, 1032, 1035, 1037, 1038, 1042, 1044, 1045, 1048, 1049], "seper": 553, "septemb": [734, 1001, 1032, 1035, 1038, 1040, 1045, 1048, 1050], "seq": 633, "seq_dataset": [1032, 1042], "seqlearn": 387, "sequenc": [2, 51, 134, 142, 199, 234, 377, 389, 408, 411, 412, 414, 415, 503, 512, 553, 554, 561, 562, 569, 570, 581, 582, 588, 589, 591, 646, 800, 803, 811, 830, 864, 888, 951, 952, 963, 971, 974, 1032, 1035, 1037, 1038], "sequencekernel": 178, "sequenti": [2, 52, 142, 162, 165, 183, 206, 270, 320, 373, 412, 414, 415, 500, 501, 534, 593, 597, 602, 603, 605, 606, 646, 647, 652, 653, 658, 660, 661, 662, 663, 673, 788, 864, 865, 884, 991, 1009, 1015, 1022, 1023, 1027, 1032, 1041, 1044], "sequentialfeatureselector": [2, 168, 398, 416, 593, 597, 603, 1044, 1045, 1046, 1047, 1048], "sergei": [407, 1034, 1038, 1039, 1040, 1041, 1042], "sergeyf": 1034, "sergio": [1032, 1034, 1035, 1044, 1047], "sergiodsr": 1043, "sergul": [1039, 1040, 1043], "seri": [2, 42, 43, 51, 58, 113, 141, 146, 149, 183, 185, 188, 189, 196, 211, 213, 215, 231, 252, 274, 283, 316, 322, 328, 367, 370, 380, 389, 407, 488, 489, 490, 491, 492, 496, 500, 501, 502, 504, 505, 510, 541, 562, 690, 694, 701, 742, 745, 746, 748, 790, 821, 826, 827, 830, 926, 992, 997, 998, 1002, 1004, 1015, 1020, 1022, 1035, 1038, 1039, 1040, 1044, 1047, 1049, 1050], "serial": [389, 401, 421, 956, 1020, 1021, 1032, 1040, 1044, 1049], "serializetostr": 401, "serious": 1003, "serum": [168, 372], "serv": [102, 124, 134, 176, 263, 272, 343, 408, 551, 993, 1027, 1046], "server": [0, 168, 362, 372, 373, 375, 496, 1024, 1040], "servic": [0, 43, 239, 248, 375, 379, 401, 1025, 1040], "sess": 401, "session": [377, 381, 387, 393, 1019, 1025], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 82, 83, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 102, 103, 105, 111, 112, 113, 116, 120, 125, 126, 132, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 156, 159, 164, 165, 168, 170, 176, 177, 178, 183, 185, 186, 187, 188, 189, 193, 197, 199, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 213, 216, 219, 224, 225, 229, 231, 232, 233, 238, 239, 240, 241, 243, 244, 245, 248, 252, 254, 256, 258, 259, 262, 264, 267, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 282, 284, 286, 288, 291, 295, 296, 297, 298, 299, 302, 305, 306, 307, 309, 311, 313, 314, 315, 316, 318, 320, 321, 325, 328, 329, 332, 333, 336, 338, 341, 343, 346, 350, 351, 352, 356, 357, 358, 362, 363, 364, 367, 368, 370, 372, 373, 375, 377, 379, 380, 382, 383, 388, 389, 390, 393, 398, 401, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 487, 488, 493, 495, 496, 497, 499, 502, 503, 508, 509, 510, 515, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 700, 701, 702, 703, 711, 713, 714, 716, 719, 721, 723, 726, 727, 728, 729, 730, 731, 734, 738, 740, 745, 746, 748, 750, 751, 753, 756, 779, 780, 782, 783, 784, 785, 787, 789, 790, 791, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 930, 931, 937, 942, 943, 948, 952, 956, 957, 969, 970, 971, 974, 975, 981, 984, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "set1": [269, 298, 299], "set_": [245, 398, 1050], "set_alpha": [70, 254, 255, 256, 259, 260], "set_arrai": [51, 234, 241], "set_aspect": [43, 122, 173, 222, 256, 347], "set_autoscaley_on": 77, "set_axis_bgcolor": 113, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 293, "set_clip_box": [70, 254, 255, 256, 259, 260], "set_color": [46, 222], "set_config": [2, 245, 250, 252, 263, 316, 319, 325, 362, 363, 398, 408, 436, 442, 443, 446, 448, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 593, 594, 597, 602, 610, 611, 626, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 1041, 1043, 1046, 1048], "set_constrained_layout_pad": 120, "set_edgecolor": 120, "set_facecolor": [113, 254], "set_fit_request": [245, 325, 398, 436, 442, 443, 446, 448, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 588, 591, 635, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 836, 837, 839, 840, 841, 842, 843, 849, 869, 870, 883, 884, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "set_fmt_str_length": 52, "set_i": 90, "set_index": [62, 134, 146, 201, 229, 269, 315, 351], "set_inverse_transform_request": [533, 581, 871, 884], "set_label": [75, 173, 242], "set_label_posit": 46, "set_linewidth": [51, 234, 241], "set_major_formatt": [231, 233, 236, 289, 294], "set_major_loc": [231, 294], "set_output": [183, 187, 237, 250, 314, 315, 378, 387, 431, 441, 442, 444, 446, 448, 463, 467, 481, 482, 483, 484, 496, 504, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 688, 689, 692, 830, 848, 853, 856, 860, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 902, 1022, 1047, 1048, 1049], "set_param": [123, 130, 138, 143, 146, 187, 188, 194, 199, 201, 205, 215, 219, 243, 248, 252, 263, 282, 292, 318, 342, 351, 378, 389, 407, 408, 414, 417, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 991, 1007, 1032, 1038, 1039, 1040, 1045, 1046], "set_partial_fit_request": [448, 534, 666, 667, 668, 676, 677, 678, 832, 833, 836, 837, 839, 840, 841, 842, 843, 861, 884], "set_path_effect": 75, "set_posit": [100, 222, 309], "set_predict_proba_request": [912, 914], "set_predict_request": [245, 481, 482, 483, 552, 611, 635, 644, 645, 912, 913, 914, 915], "set_printopt": 262, "set_prop_cycl": 212, "set_score_request": [245, 263, 325, 398, 436, 442, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 799, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 854, 855, 861, 862, 864, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 1001], "set_siz": 296, "set_size_inch": [93, 159, 249], "set_split_request": [801, 802, 807, 809, 818], "set_start_method": 387, "set_stat": 990, "set_tick_param": 254, "set_ticklabel": [126, 350], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 86, 88, 90, 93, 97, 98, 104, 107, 111, 118, 125, 130, 134, 139, 141, 144, 150, 152, 154, 155, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 201, 203, 204, 209, 211, 212, 213, 219, 231, 232, 235, 236, 241, 243, 244, 248, 249, 254, 262, 263, 264, 265, 266, 269, 271, 272, 276, 280, 281, 283, 286, 288, 289, 292, 293, 294, 299, 304, 305, 309, 310, 311, 312, 313, 314, 318, 322, 328, 329, 336, 343, 346, 347, 348, 350, 354, 371], "set_transform_request": [245, 481, 482, 483, 533, 536, 582, 588, 590, 591, 635, 867, 870, 876, 884], "set_vis": [54, 70, 293, 299, 309], "set_xlabel": [46, 49, 86, 93, 104, 105, 107, 118, 125, 144, 179, 181, 182, 185, 187, 188, 189, 191, 201, 207, 209, 211, 213, 226, 227, 243, 263, 269, 271, 275, 280, 281, 283, 286, 294, 309, 310, 314, 331, 351, 352, 354], "set_xlim": [67, 77, 93, 107, 111, 118, 139, 152, 182, 187, 209, 211, 216, 243, 254, 273, 275, 286, 294, 304, 309, 311, 312, 313, 314, 319, 325, 347], "set_xscal": [201, 216], "set_xtick": [43, 47, 49, 67, 78, 93, 97, 130, 152, 156, 187, 189, 203, 227, 243, 254, 280, 281, 288, 304, 306, 311, 312, 336], "set_xticklabel": [47, 49, 111, 130, 156, 173, 187, 189, 280, 281, 288], "set_ylabel": [46, 47, 49, 66, 70, 86, 93, 98, 104, 105, 107, 111, 118, 125, 130, 134, 141, 144, 179, 187, 191, 201, 203, 207, 209, 211, 213, 215, 226, 243, 254, 263, 269, 271, 275, 280, 281, 283, 288, 294, 309, 310, 314, 318, 331, 346, 351, 354], "set_ylim": [47, 49, 67, 77, 93, 104, 118, 139, 151, 152, 179, 187, 194, 209, 211, 212, 243, 254, 273, 288, 294, 304, 309, 311, 312, 314, 319, 325, 331, 347], "set_yscal": [144, 211], "set_ytick": [43, 67, 78, 93, 97, 130, 152, 181, 182, 189, 203, 227, 254, 280, 304, 306, 311, 312, 336, 352], "set_yticklabel": [130, 173, 181, 182, 189, 280, 352], "set_zord": 122, "setattr": 377, "setdefault": [55, 919], "setdiff1d": 345, "seth": 1038, "sethdandridg": 1036, "setminu": 1017, "setosa": [126, 128, 278, 279, 372, 504], "setp": [47, 49, 280, 284], "settabl": 1001, "settingwithcopywarn": 187, "setup": [276, 278, 362, 373, 377, 381, 383, 1004], "setuptool": 1050, "seuclidean": [449, 456, 699, 778, 779, 780, 1004, 1040, 1043, 1044], "seuclideandist": 699, "seung": 412, "seven": [370, 994], "seventh": [511, 1013], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 88, 89, 90, 94, 106, 137, 149, 152, 154, 157, 165, 168, 170, 175, 176, 183, 186, 191, 197, 201, 211, 215, 230, 231, 234, 235, 236, 242, 256, 264, 269, 274, 283, 289, 291, 305, 309, 321, 346, 350, 351, 362, 369, 370, 372, 375, 377, 380, 383, 387, 389, 404, 407, 408, 411, 413, 414, 415, 417, 446, 448, 463, 486, 499, 508, 509, 538, 555, 556, 559, 560, 563, 564, 565, 570, 588, 589, 591, 610, 645, 646, 652, 688, 689, 690, 691, 692, 693, 797, 798, 800, 803, 804, 814, 832, 833, 839, 840, 841, 842, 843, 863, 864, 871, 888, 912, 913, 914, 915, 933, 990, 993, 998, 1001, 1002, 1004, 1009, 1011, 1015, 1017, 1018, 1019, 1020, 1022, 1024, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1045, 1048, 1049], "sevin": 1040, "sewook": 1042, "sex": [103, 168, 186, 188, 199, 201, 252, 323, 325, 372, 496, 1009], "sex_mal": 186, "seyedsaman": 1046, "sf": [168, 269, 320, 370, 416, 492, 602], "sfm": 168, "sfs_backward": 168, "sfs_forward": 168, "sfu": [407, 441], "sgd": [2, 46, 47, 50, 124, 126, 129, 136, 145, 146, 155, 173, 174, 183, 192, 195, 203, 218, 225, 238, 245, 258, 277, 302, 305, 306, 321, 340, 341, 344, 348, 350, 355, 358, 364, 504, 512, 631, 649, 666, 667, 668, 671, 676, 677, 678, 679, 861, 862, 990, 1005, 1022, 1023, 1027, 1032, 1035, 1036, 1037, 1039, 1043, 1045], "sgdclassifi": [2, 25, 46, 47, 218, 219, 220, 221, 222, 223, 224, 243, 277, 332, 341, 350, 358, 362, 364, 381, 389, 405, 415, 638, 640, 641, 642, 646, 658, 666, 668, 904, 909, 993, 997, 1002, 1015, 1016, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "sgdoneclasssvm": [2, 225, 238, 321, 908, 1007, 1015, 1045, 1047, 1048, 1049, 1050], "sgdregressor": [2, 25, 49, 222, 362, 364, 387, 646, 649, 667, 671, 676, 679, 862, 905, 910, 997, 1015, 1034, 1036, 1038, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1050], "sgi": 350, "sgkf": [411, 818], "sgm": 47, "sgml": [47, 362], "sh": [280, 383, 990], "sh_color": 235, "sh_err": 235, "sh_lle": 235, "sh_point": 235, "sh_tsne": 235, "sha256": [47, 52, 491, 1047], "shack": [1042, 1043, 1044], "shade": [58, 86, 166, 292, 297, 335, 412], "shader": 403, "shadi": [1047, 1048], "shadow": [124, 128, 129, 234, 330, 345, 352, 415], "shafer": 102, "shagun": 1038, "shah": [1036, 1037, 1038, 1044, 1050], "shaharyar": 1050, "shahebaz": 1040, "shahriar": 1034, "shaikh": [0, 360, 365, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050], "shail": 1044, "shakerimoff": 1046, "shalev": [666, 667, 997, 1015], "shalil": 1040, "shall": 175, "shallow": [381, 414, 561, 562, 919], "shamsi": 1040, "shandeng123": 1046, "shane": [1041, 1044, 1047], "shanghai": [689, 693, 998], "shangwu": [1040, 1041], "shankar": 1042, "shanmuga": 1038, "shanno": 997, "shannon": [557, 564, 912, 914, 998, 1017], "shantanu": 783, "shao": [1044, 1045, 1046], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 80, 81, 84, 85, 86, 87, 88, 91, 93, 94, 99, 102, 106, 107, 111, 120, 121, 123, 135, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 161, 164, 166, 171, 172, 174, 175, 176, 177, 181, 182, 183, 187, 188, 199, 201, 204, 211, 213, 218, 220, 223, 224, 225, 226, 227, 230, 232, 233, 234, 238, 241, 242, 243, 244, 245, 247, 248, 254, 256, 258, 259, 260, 267, 269, 271, 272, 275, 276, 278, 279, 289, 294, 295, 299, 302, 304, 306, 311, 312, 318, 320, 323, 324, 325, 330, 331, 333, 336, 339, 342, 343, 344, 347, 348, 350, 351, 357, 362, 368, 369, 370, 375, 377, 389, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 927, 932, 935, 936, 942, 946, 948, 950, 954, 955, 962, 964, 969, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 989, 991, 996, 997, 1001, 1002, 1003, 1004, 1005, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1022, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1048, 1049], "shape_fit_": [906, 907, 908, 909, 910], "shape_img": 585, "sharad": 1040, "sharan": [1039, 1040], "share": [70, 115, 152, 186, 259, 350, 357, 358, 362, 363, 377, 383, 401, 407, 412, 415, 549, 668, 704, 708, 797, 798, 803, 804, 995, 1008, 1024, 1032, 1034, 1040, 1042, 1044, 1047], "shared_yax": 140, "sharedmem": 1040, "sharei": [43, 52, 70, 107, 118, 125, 130, 155, 179, 187, 204, 208, 211, 213, 219, 271, 280, 282, 283, 294, 310, 315, 345, 346, 351, 371], "sharex": [43, 46, 54, 70, 105, 118, 125, 155, 179, 187, 204, 208, 213, 271, 282, 283, 294, 331, 371], "sharma": [1036, 1038, 1040, 1041, 1043, 1044, 1046, 1049, 1050], "sharmadharmp": 1046, "sharon": [45, 370], "sharova": 1039, "sharp": [43, 187, 1008, 1011], "sharper": 726, "shashank": [1038, 1044], "shaun": 1033, "shawpan": 1038, "shaymernaturalint": 1046, "she": [375, 894, 895, 1042], "shea": [1040, 1041], "shebanov": [1040, 1041], "sheep": 1025, "sheer": [375, 1025], "sheerman": 1032, "sheet": 1034, "sheetscikit": 395, "shekhar": 1038, "shell": [376, 383, 387], "shellyfung": 1047, "shen": 1045, "sheng": 1042, "shengxiduan": 1038, "shenhanc78": 1040, "sheni": 1044, "shenk": 1040, "shenoi": 1039, "sherlock": [628, 991], "sheth": 1040, "shetti": 1045, "shi": [407, 451, 461, 691], "shibata": 1042, "shiebler": 1038, "shield": 389, "shift": [2, 52, 71, 73, 79, 82, 97, 183, 193, 234, 259, 294, 307, 309, 343, 409, 413, 439, 447, 457, 460, 468, 512, 515, 689, 693, 850, 873, 1011, 1022, 1026, 1027, 1032, 1036, 1040], "shifted_gaussian": 258, "shifted_opposite_lof_scor": 850, "shih": [841, 1003], "shiki": 1043, "shilt": 1035, "shinehid": 1045, "shinitski": 1049, "shinnar": 1045, "shinsuk": 1047, "ship": [57, 154, 182, 355, 363, 373, 393, 415, 997, 1032, 1041], "shiqiao": [0, 397, 1032, 1033], "shirsat": 1047, "shiva": [1047, 1048], "shivam": [1040, 1041, 1042], "shivamgargsya": [1039, 1043, 1045], "shivan": 1037, "shivram": 1040, "shiyu": 1041, "shleifer": [1038, 1039], "shmelkov": 1037, "shoaib": 1047, "shoemak": 1043, "shogo": [1047, 1048], "shooter23": [1044, 1045], "shop": 1025, "short": [44, 126, 143, 150, 203, 267, 306, 350, 375, 383, 411, 415, 419, 997, 998, 1004, 1024, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "short_nam": 55, "shortcom": 997, "shortcut": [383, 401, 417], "shorten": [375, 1016, 1045], "shorten_param": 270, "shorter": [43, 176, 257, 387, 407, 412, 449, 456, 563, 697, 1003, 1007, 1043], "shortest": [2, 74, 380, 384, 688, 954, 998, 1045], "shortest_path": 1045, "shorthand": [91, 389, 408, 466, 561, 562, 865, 866, 1035], "shortlog": 379, "shortname_slic": 55, "shota": 1038, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 86, 132, 134, 137, 140, 143, 146, 149, 168, 181, 186, 191, 193, 194, 197, 204, 211, 229, 238, 243, 244, 245, 248, 263, 269, 272, 275, 276, 278, 283, 286, 289, 310, 311, 316, 330, 339, 346, 351, 358, 362, 363, 364, 370, 373, 374, 375, 377, 379, 380, 382, 383, 384, 388, 389, 393, 398, 401, 403, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 424, 430, 436, 439, 441, 442, 443, 444, 446, 448, 449, 451, 453, 456, 457, 458, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 496, 503, 508, 509, 516, 521, 523, 524, 527, 532, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 593, 594, 597, 602, 607, 608, 610, 611, 620, 627, 628, 629, 631, 632, 633, 635, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 689, 690, 691, 692, 693, 694, 695, 696, 701, 709, 727, 728, 742, 766, 771, 774, 778, 779, 780, 781, 782, 785, 788, 789, 792, 799, 801, 802, 807, 808, 809, 810, 817, 818, 819, 820, 822, 826, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 883, 884, 885, 887, 891, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 930, 934, 936, 940, 948, 953, 957, 961, 966, 969, 971, 974, 975, 976, 977, 978, 979, 980, 981, 989, 990, 991, 995, 996, 997, 998, 1001, 1002, 1004, 1006, 1007, 1008, 1011, 1014, 1015, 1016, 1017, 1021, 1024, 1025, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "shouldn": [255, 260, 375], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 354, 355, 356, 357, 363, 364, 371, 375, 381, 387, 388, 393, 394, 398, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 437, 502, 559, 593, 594, 631, 632, 697, 698, 700, 701, 702, 713, 806, 823, 846, 864, 916, 917, 918, 990, 993, 995, 996, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1016, 1021, 1034, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050], "show_top10": 370, "show_vers": [2, 362, 373, 375, 383, 393, 394, 1040], "show_weight": 917, "show_with_diff": 123, "showcas": [132, 135, 140, 143, 146, 147, 149, 183, 377], "shown": [62, 90, 132, 136, 140, 146, 179, 185, 187, 197, 202, 209, 229, 236, 238, 243, 248, 256, 269, 272, 275, 278, 286, 294, 305, 306, 309, 310, 311, 328, 346, 350, 351, 375, 380, 390, 405, 407, 408, 411, 412, 413, 415, 417, 437, 459, 632, 698, 700, 701, 702, 713, 800, 814, 916, 918, 997, 998, 1001, 1004, 1011, 1015, 1016, 1017, 1036, 1041, 1042, 1043, 1046], "shown_imag": 232, "shrankhla": 1047, "shreesha": [1048, 1049], "shreya": 1042, "shrink": [63, 113, 120, 147, 187, 197, 207, 209, 215, 231, 258, 282, 309, 346, 412, 559, 560, 676, 678, 851, 861, 862, 906, 907, 908, 909, 910, 1004, 1016], "shrink_threshold": [300, 851, 1004, 1032, 1044], "shrinkag": [2, 69, 108, 110, 113, 127, 148, 183, 300, 420, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 539, 543, 549, 561, 562, 800, 997, 1011, 1022, 1023, 1027, 1032, 1036, 1037, 1039], "shrinkage_": [109, 110, 472, 474], "shrinkage_coeffici": 479, "shroff": 1050, "shrunk": [2, 109, 127, 309, 316, 324, 420, 472, 474, 475, 478, 479, 480, 549, 885, 995, 1015, 1026, 1027], "shrunk_cov": [420, 478, 480], "shrunk_cov_scor": 127, "shrunk_covari": [2, 409, 1049], "shrunkcovari": [2, 109, 127, 409, 468, 469, 472, 473, 474], "shrunken": [851, 1032], "shu": [1033, 1036, 1040], "shuangchi": [1046, 1047], "shubernetskii": 1034, "shubh": 1043, "shubhal": 1049, "shubham": [1039, 1042, 1050], "shubhanshu": 1044, "shubhraneel": 1046, "shuckle16": 1038, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 93, 94, 120, 140, 141, 142, 149, 154, 182, 197, 208, 219, 220, 225, 238, 270, 274, 275, 282, 289, 316, 328, 329, 330, 331, 341, 350, 351, 358, 370, 384, 389, 402, 468, 473, 487, 488, 490, 492, 495, 497, 503, 511, 512, 513, 514, 515, 519, 522, 524, 531, 537, 539, 540, 546, 547, 553, 554, 555, 556, 564, 565, 567, 568, 602, 605, 607, 658, 659, 666, 667, 668, 672, 674, 676, 677, 678, 687, 800, 802, 803, 804, 805, 806, 814, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 861, 862, 885, 904, 905, 906, 909, 947, 948, 969, 971, 996, 997, 1002, 1009, 1015, 1016, 1027, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "shuffle_param": 346, "shuffled_arrai": 974, "shufflesplit": [2, 264, 271, 346, 411, 802, 808, 810, 820, 830, 1032, 1033, 1035, 1037, 1038], "shuhei": 1045, "shuhua": 1044, "shutil": [87, 104, 408], "shuttl": 351, "shuzh": 1042, "shwartz": [666, 667, 997, 1015], "shwed": 1040, "shyam": 1045, "si": 102, "siam": [407, 411, 451, 459, 461, 535, 541], "siang": 1035, "siavash": 1045, "siavrez": 1046, "sibsp": [188, 323], "sid": 1039, "siddharth": [1039, 1043], "siddiqui": 1050, "side": [43, 64, 92, 146, 205, 215, 229, 233, 241, 263, 309, 343, 350, 358, 370, 387, 405, 408, 411, 412, 415, 424, 430, 515, 800, 814, 997, 998, 1001, 1003, 1016, 1041], "sidebar": 375, "sidhpura": 1047, "siebert": 1040, "sierra": [531, 537], "sievert": 1042, "siftikha": 1040, "sig": 121, "sigh": 350, "sigkdd": [369, 370, 511, 676, 885, 1011, 1013], "sigma": [53, 80, 81, 87, 111, 127, 146, 267, 269, 404, 409, 412, 414, 614, 649, 995, 997, 999, 1003, 1006], "sigma2": [534, 541], "sigma_": [409, 644, 645, 1045, 1049], "sigma_0": [173, 174, 179, 417, 614], "sigma_0_bound": [179, 614], "sigma_i": [1003, 1011], "sigma_k": [412, 995], "sigmod": [407, 449, 456, 850, 1007], "sigmoid": [2, 61, 62, 63, 64, 367, 414, 436, 451, 535, 561, 620, 639, 643, 765, 774, 777, 861, 862, 906, 907, 908, 909, 910, 1006, 1016, 1027, 1045, 1049], "sigmoid_kernel": [2, 403, 765, 999], "sign": [75, 110, 116, 121, 124, 136, 197, 259, 304, 346, 375, 407, 412, 415, 544, 582, 589, 606, 635, 636, 658, 659, 666, 668, 674, 675, 676, 677, 735, 742, 904, 908, 946, 948, 965, 997, 1001, 1006, 1011, 1015, 1016, 1032, 1036, 1041, 1045, 1047, 1050], "signal": [2, 11, 53, 112, 120, 121, 122, 129, 144, 146, 170, 175, 176, 183, 192, 193, 198, 199, 200, 201, 206, 207, 210, 212, 260, 282, 321, 407, 409, 415, 416, 417, 420, 474, 503, 521, 526, 531, 534, 537, 541, 545, 546, 625, 644, 645, 646, 647, 652, 653, 663, 664, 672, 684, 685, 686, 785, 821, 830, 878, 997, 1001, 1018, 1022, 1025, 1026, 1027], "signatur": [245, 350, 351, 370, 487, 488, 557, 558, 564, 565, 594, 610, 611, 659, 673, 675, 711, 742, 806, 823, 826, 828, 831, 877, 960, 990, 1039, 1045, 1049], "signif": [45, 993], "signifi": [407, 581, 811, 1006], "signific": [2, 43, 88, 140, 146, 163, 164, 166, 183, 215, 229, 261, 269, 288, 289, 350, 358, 369, 370, 387, 407, 410, 411, 414, 504, 532, 534, 549, 627, 658, 659, 666, 667, 668, 676, 677, 678, 819, 829, 904, 906, 907, 908, 909, 910, 990, 1000, 1001, 1004, 1022, 1032, 1034, 1035, 1036, 1040], "significantli": [43, 61, 62, 64, 72, 109, 110, 134, 140, 144, 146, 149, 168, 186, 187, 188, 211, 215, 219, 227, 229, 263, 269, 289, 319, 320, 351, 352, 358, 363, 379, 407, 412, 414, 415, 420, 468, 473, 478, 479, 538, 540, 547, 558, 565, 646, 647, 652, 653, 660, 661, 662, 663, 684, 692, 844, 845, 993, 997, 998, 1004, 1009, 1016, 1032, 1034, 1035, 1039, 1040, 1045, 1046, 1047], "sijaranamu": 1038, "silenc": 245, "silent": [245, 415, 581, 860, 1011, 1037, 1038, 1040, 1041, 1045, 1046], "silhouett": [2, 58, 71, 73, 82, 90, 91, 183, 351, 446, 512, 792, 793, 1022, 1032, 1036], "silhouette_avg": 93, "silhouette_sampl": [2, 93, 793, 1036, 1038, 1040, 1048], "silhouette_scor": [2, 73, 82, 91, 93, 351, 375, 407, 1032, 1036, 1038, 1040, 1042, 1046], "silicon": 373, "silk": 1046, "sillanp\u00e4\u00e4": 1032, "silva": [405, 688, 998, 1043, 1045, 1050], "silverman": [413, 849, 1047], "silverthorn": 1032, "silvestrin": 1049, "sim": 412, "sim4n6": 1047, "simd": [389, 1047], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 82, 84, 90, 93, 107, 116, 120, 124, 134, 146, 167, 170, 177, 185, 186, 187, 188, 197, 204, 211, 213, 225, 231, 233, 234, 235, 238, 244, 245, 260, 263, 266, 269, 272, 275, 276, 277, 286, 288, 289, 309, 321, 338, 343, 346, 351, 352, 358, 362, 367, 369, 371, 374, 375, 377, 380, 381, 383, 384, 387, 389, 401, 404, 405, 407, 410, 411, 412, 414, 415, 416, 417, 418, 439, 442, 443, 449, 451, 453, 454, 503, 508, 509, 536, 582, 589, 590, 591, 610, 677, 692, 695, 703, 705, 715, 719, 725, 728, 729, 731, 734, 738, 740, 755, 760, 761, 786, 792, 793, 796, 797, 798, 826, 831, 876, 897, 900, 904, 905, 906, 907, 921, 931, 990, 993, 994, 996, 997, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1027, 1032, 1036, 1037, 1038, 1040, 1044, 1045], "similarli": [43, 51, 72, 88, 118, 150, 187, 189, 197, 201, 211, 239, 248, 263, 269, 304, 309, 324, 326, 339, 358, 363, 371, 373, 377, 380, 387, 389, 401, 403, 404, 410, 411, 415, 729, 730, 738, 783, 784, 787, 822, 996, 998, 999, 1001, 1008, 1015, 1016, 1018, 1040, 1046, 1048], "simmon": 1025, "simon": [997, 1025, 1035, 1036, 1045, 1046, 1047, 1048], "simona": [1043, 1044, 1045], "simonamaggio": [1043, 1044, 1045], "simoncw": 1042, "simonpl": 1037, "simpl": [2, 13, 37, 43, 64, 88, 103, 107, 109, 115, 116, 120, 140, 144, 177, 183, 187, 197, 212, 228, 251, 270, 286, 290, 293, 302, 322, 335, 350, 352, 355, 358, 373, 375, 377, 378, 379, 380, 382, 387, 388, 389, 390, 398, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 421, 428, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 461, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 514, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 786, 788, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 956, 993, 995, 996, 997, 998, 1000, 1001, 1004, 1011, 1013, 1015, 1017, 1021, 1022, 1025, 1029, 1032], "simplefilt": 401, "simpleimput": [2, 103, 154, 181, 182, 188, 240, 250, 252, 319, 322, 358, 389, 627, 628, 629, 991, 1011, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "simpleimputersimpleimput": [103, 154, 188, 240, 250, 319, 322], "simplepipelin": 245, "simpler": [147, 189, 204, 229, 318, 339, 362, 374, 407, 412, 997, 1002, 1037], "simplest": [86, 411, 998], "simplex": [63, 670, 797, 879], "simpli": [74, 116, 152, 170, 178, 235, 246, 248, 278, 302, 320, 321, 362, 370, 375, 377, 380, 387, 389, 409, 410, 411, 412, 414, 415, 484, 695, 762, 765, 871, 923, 950, 993, 1001, 1002, 1003, 1004, 1015, 1039, 1040, 1041], "simplic": [43, 53, 67, 197, 208, 343, 350, 352, 389, 413, 1004, 1005, 1006, 1016], "simplif": [371, 374, 380, 1032, 1038], "simplifi": [43, 103, 199, 245, 339, 374, 376, 380, 407, 410, 515, 562, 863, 864, 1001, 1003, 1011], "simplist": [211, 415], "simul": [110, 122, 149, 186, 206, 246, 269, 1025], "simultan": [58, 88, 121, 204, 273, 277, 324, 346, 356, 367, 404, 407, 990, 1001, 1002, 1017, 1025, 1039], "sin": [43, 53, 57, 74, 121, 135, 145, 146, 151, 153, 163, 170, 176, 177, 179, 193, 194, 197, 206, 212, 217, 233, 244, 260, 301, 310, 319, 325, 345, 356, 417, 516, 615, 699, 764], "sin_transform": 43, "sina": 1045, "sinayev": 1034, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 82, 86, 88, 99, 102, 103, 104, 121, 143, 159, 165, 168, 170, 175, 186, 187, 189, 191, 196, 204, 211, 213, 215, 228, 239, 243, 244, 245, 256, 259, 263, 265, 269, 271, 272, 278, 279, 282, 283, 286, 288, 289, 291, 292, 315, 321, 322, 333, 336, 339, 346, 350, 351, 352, 358, 363, 370, 373, 375, 376, 377, 379, 380, 383, 387, 388, 389, 393, 398, 401, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 424, 427, 436, 441, 444, 445, 449, 452, 455, 468, 481, 482, 483, 484, 496, 527, 536, 538, 540, 547, 549, 550, 551, 552, 553, 555, 557, 559, 561, 562, 563, 564, 567, 569, 588, 589, 591, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 632, 633, 638, 651, 655, 658, 659, 666, 668, 673, 674, 675, 676, 679, 692, 707, 709, 735, 742, 778, 782, 789, 799, 800, 803, 804, 814, 822, 828, 829, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 862, 864, 869, 894, 895, 899, 900, 901, 904, 906, 909, 912, 914, 928, 930, 931, 948, 957, 990, 993, 994, 995, 997, 998, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1015, 1016, 1017, 1025, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "sinclert": 1040, "sind": 415, "sine": [2, 43, 170, 175, 176, 183, 206, 217, 253, 254, 255, 256, 258, 259, 356, 371, 615, 797, 798, 1000, 1017, 1022], "singer": [286, 666, 667, 735, 997, 1001, 1015, 1016], "singh": [1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "singl": [2, 30, 31, 70, 74, 85, 86, 88, 91, 94, 95, 104, 122, 133, 134, 135, 142, 143, 153, 168, 170, 176, 181, 183, 187, 189, 191, 197, 208, 211, 213, 215, 249, 251, 259, 263, 265, 278, 286, 306, 322, 324, 339, 350, 351, 352, 355, 356, 358, 362, 363, 369, 370, 375, 380, 382, 383, 384, 387, 388, 389, 398, 405, 406, 408, 410, 411, 412, 414, 415, 416, 432, 436, 439, 440, 444, 445, 446, 448, 453, 463, 465, 466, 493, 494, 496, 506, 509, 534, 553, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 582, 592, 599, 600, 602, 606, 627, 632, 634, 643, 666, 667, 673, 676, 677, 678, 690, 692, 694, 710, 711, 721, 722, 723, 724, 725, 736, 737, 738, 741, 774, 785, 797, 798, 800, 803, 804, 814, 821, 822, 826, 827, 829, 830, 833, 841, 844, 845, 849, 861, 862, 863, 873, 874, 877, 878, 879, 884, 885, 899, 900, 912, 913, 914, 915, 924, 926, 964, 987, 990, 996, 997, 998, 1001, 1002, 1004, 1006, 1008, 1009, 1011, 1015, 1016, 1017, 1020, 1022, 1025, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "single_output": [377, 924], "single_prior": 179, "single_source_shortest_path_length": [2, 384], "singleton": [363, 808, 933, 1045, 1048], "singular": [2, 120, 384, 404, 407, 410, 450, 452, 481, 482, 483, 484, 521, 524, 534, 538, 540, 541, 544, 547, 549, 550, 657, 672, 673, 674, 687, 948, 997, 998, 1000, 1026, 1027, 1038, 1039, 1050], "singular_": 657, "singular_values_": [534, 541, 544, 1039], "sinha": [1040, 1049, 1050], "sinhrk": [1036, 1037], "sink": [641, 993], "sinoisoid": 146, "sinusoid": [121, 135, 146, 197, 244, 645, 994], "sio": 401, "siola": [1047, 1048], "sip\u0151cz": [1042, 1043, 1044, 1048, 1050], "siqi": 1046, "siqueira": 1042, "sir": 372, "sister": 1020, "site": [373, 375, 383, 393, 414, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 1025, 1040], "situat": [62, 79, 90, 104, 185, 186, 217, 238, 272, 375, 383, 401, 409, 411, 412, 414, 467, 528, 534, 582, 877, 880, 892, 902, 995, 997, 1003, 1004, 1014, 1017, 1040], "situp": 372, "sivamani": 1042, "sivaprasad": [1035, 1036], "six": [168, 212, 232, 313, 372, 1041], "sixteenth": 1013, "sixth": 370, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 80, 81, 85, 87, 88, 90, 91, 93, 94, 95, 99, 100, 105, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 137, 145, 146, 149, 150, 151, 164, 170, 172, 173, 176, 177, 183, 185, 187, 188, 193, 194, 195, 196, 198, 202, 207, 209, 212, 213, 214, 217, 224, 225, 231, 236, 238, 241, 242, 243, 244, 245, 247, 248, 256, 262, 265, 267, 269, 271, 272, 274, 275, 276, 286, 295, 296, 297, 304, 307, 310, 311, 312, 313, 316, 319, 322, 324, 325, 329, 333, 335, 337, 338, 339, 346, 348, 350, 351, 352, 354, 362, 363, 364, 370, 371, 375, 380, 384, 387, 388, 389, 393, 398, 404, 405, 407, 409, 411, 412, 415, 417, 418, 420, 443, 444, 445, 447, 448, 449, 456, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 493, 494, 495, 515, 527, 534, 536, 538, 540, 547, 557, 558, 559, 560, 561, 562, 564, 565, 583, 587, 588, 594, 632, 633, 643, 657, 666, 667, 679, 683, 692, 695, 705, 719, 738, 740, 743, 781, 793, 802, 805, 806, 810, 817, 820, 821, 822, 825, 828, 830, 839, 840, 841, 843, 846, 847, 848, 849, 850, 852, 854, 855, 856, 861, 862, 879, 881, 893, 898, 902, 906, 907, 908, 909, 910, 912, 913, 914, 915, 918, 947, 951, 952, 963, 964, 966, 969, 975, 991, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1013, 1015, 1016, 1017, 1024, 1025, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1047, 1048, 1050], "size_cluster_i": 93, "size_mb": 350, "sizeabl": [802, 817, 820], "sk": 550, "skaft": 1046, "skeleton": 1035, "sketch": [2, 23, 191, 364, 367, 384, 639, 640, 641, 965, 1027, 1044], "skew": [2, 48, 146, 214, 242, 248, 309, 324, 367, 405, 411, 639, 640, 641, 642, 880, 892, 997, 1011, 1027, 1035, 1039, 1048], "skewed": [642, 1039], "skewedchi2sampl": [2, 638, 639, 640, 641, 993, 1039, 1046, 1047], "skf": [256, 411, 819], "skfold": 331, "skforecast": 1020, "skill": 1001, "skimag": [80, 81, 369], "skip": [363, 375, 384, 403, 415, 467, 646, 647, 652, 660, 661, 662, 671, 681, 902, 923, 1036, 1039, 1042, 1044, 1046, 1048], "skip_check_arrai": 989, "skip_complet": 627, "skip_comput": 1042, "skip_parameter_valid": [467, 902, 1048], "skipper": [1035, 1037, 1038], "skiptestwarn": 923, "skl2onnx": 401, "sklear": 376, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 387, 388, 389, 392, 393, 394, 398, 401, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "sklearn2pmml": 1020, "sklearn_api": 0, "sklearn_assume_finit": 362, "sklearn_cache_": 318, "sklearn_enable_debug_cython_direct": 376, "sklearn_fail_no_openmp": 373, "sklearn_graph_cache_": 291, "sklearn_is_fit": [132, 1022], "sklearn_run_float32_test": 375, "sklearn_site_joblib": 1040, "sklearn_warning_as_error": 363, "sklearnex": 393, "skop": [1020, 1027], "skorch": 1020, "sktime": [52, 1020], "sl": 211, "slack": 1015, "slai": 350, "slama": [1042, 1044], "slep": [375, 389], "slep000": 390, "slep009": [1043, 1045, 1046], "slep010": [377, 1043], "slep011": 1021, "slep018": [252, 377, 1047], "slep020": 390, "slice": [2, 43, 52, 55, 142, 149, 220, 233, 243, 297, 300, 321, 322, 335, 370, 376, 384, 408, 463, 466, 493, 494, 508, 546, 639, 774, 778, 781, 921, 926, 951, 952, 971, 1044, 1046, 1050], "slice_": [493, 494, 1047], "sliceabl": 955, "slide": [270, 644, 997, 1019], "slight": [143, 216, 320, 401, 414, 448, 1042], "slightli": [43, 62, 64, 97, 113, 137, 140, 143, 146, 150, 154, 168, 170, 171, 172, 188, 193, 211, 229, 234, 236, 245, 248, 277, 283, 289, 318, 336, 352, 374, 375, 405, 407, 414, 415, 417, 419, 445, 588, 589, 591, 638, 658, 803, 804, 904, 906, 909, 947, 948, 990, 997, 1011, 1015, 1016, 1017, 1041, 1045, 1046, 1048, 1050], "slishak": 1046, "sloan": 0, "slogdet": 946, "slope": [187, 209, 213, 228, 407, 490, 723, 748, 999, 1001], "sloppili": 415, "sloth": [50, 302, 370, 498], "slow": [291, 309, 350, 362, 369, 373, 375, 412, 415, 446, 699, 878, 879, 883, 906, 909, 948, 998, 1004, 1021, 1039], "slower": [104, 123, 140, 143, 181, 244, 278, 352, 389, 414, 415, 416, 445, 450, 452, 538, 540, 547, 555, 556, 557, 558, 563, 564, 565, 566, 588, 589, 591, 631, 632, 633, 643, 659, 672, 674, 687, 692, 704, 832, 836, 837, 994, 998, 999, 1000, 1002, 1004, 1017, 1036, 1043], "slowest": [143, 947, 948], "slowli": [387, 389, 544, 948], "slug": 102, "smacof": [2, 690, 1047], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 82, 86, 88, 102, 109, 113, 116, 125, 135, 137, 143, 145, 146, 175, 177, 186, 187, 194, 198, 202, 203, 212, 215, 217, 226, 228, 229, 256, 263, 269, 276, 281, 283, 291, 302, 305, 307, 309, 311, 313, 320, 328, 333, 339, 344, 346, 350, 351, 364, 368, 370, 372, 375, 378, 384, 387, 389, 401, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 420, 440, 442, 444, 445, 446, 448, 457, 458, 462, 474, 496, 498, 538, 540, 541, 547, 555, 556, 557, 561, 562, 563, 564, 582, 589, 590, 602, 607, 608, 650, 654, 655, 656, 658, 659, 679, 682, 683, 803, 804, 818, 829, 832, 861, 862, 869, 897, 906, 909, 948, 990, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1014, 1017, 1020, 1021, 1025, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "smaller": [2, 37, 47, 61, 75, 80, 88, 113, 134, 149, 168, 175, 176, 181, 200, 201, 203, 215, 242, 286, 295, 296, 304, 309, 326, 339, 346, 351, 375, 404, 407, 409, 411, 412, 414, 416, 438, 439, 445, 449, 453, 455, 514, 534, 535, 557, 558, 559, 560, 561, 562, 564, 565, 593, 610, 619, 633, 646, 647, 649, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 672, 674, 682, 683, 692, 709, 797, 803, 804, 850, 853, 877, 878, 896, 897, 904, 912, 913, 914, 915, 948, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1011, 1013, 1015, 1016, 1017, 1021, 1040, 1045, 1049], "smallest": [111, 112, 211, 289, 326, 354, 370, 407, 409, 416, 527, 541, 630, 654, 655, 656, 682, 683, 690, 694, 695, 800, 803, 804, 814, 819, 874, 927, 1017, 1045], "smallest_ab": 326, "smallest_coef": [113, 527], "smari": [1041, 1042, 1043], "smart": [245, 442, 458, 459, 590], "smartphon": 1025, "smedbergm": 1038, "smedemark": 1042, "smile": [107, 370, 1046], "sminchisescu": [642, 993], "smirnov": 1044, "smith": [1038, 1039, 1040, 1041, 1042, 1044], "sml": [860, 1006], "smo": [904, 905], "smola": [412, 415, 535, 870, 1011, 1016], "smolskii": 1047, "smooth": [43, 80, 81, 87, 168, 175, 205, 212, 227, 315, 339, 372, 390, 407, 413, 414, 417, 447, 448, 537, 538, 539, 546, 557, 558, 559, 560, 564, 565, 566, 590, 591, 619, 622, 676, 839, 840, 841, 843, 881, 885, 893, 912, 913, 914, 915, 997, 1003, 1011, 1015, 1016, 1017], "smooth_idf": [415, 590, 591], "smoothened_coin": [80, 81], "smoother": [43, 44, 146, 187, 306, 413], "smoothli": 369, "smt": 1048, "smtp": [370, 492], "smujjiga": 1042, "sn": [72, 126, 135, 149, 185, 186, 193, 197, 259, 269], "snake": [322, 324, 582, 885, 1011], "snapshot": [401, 559, 560, 1021], "sne": [51, 183, 230, 231, 232, 233, 235, 289, 514, 525, 692, 1022, 1026, 1027], "snippet": [132, 358, 375, 380, 383, 387, 403, 414, 415, 416, 991, 1011, 1024, 1045], "snowhit": 1043, "snr": 87, "snuderl": 1036, "sny": 51, "snyder": [692, 998], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 88, 89, 94, 98, 112, 140, 142, 143, 144, 145, 149, 153, 170, 175, 186, 188, 191, 194, 211, 212, 238, 245, 248, 263, 269, 282, 286, 289, 295, 296, 299, 305, 306, 310, 315, 316, 319, 331, 339, 350, 352, 357, 358, 362, 363, 364, 369, 370, 373, 374, 375, 377, 379, 380, 381, 383, 384, 389, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 496, 508, 509, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 705, 708, 716, 726, 756, 778, 788, 797, 798, 799, 800, 803, 804, 806, 807, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 894, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 966, 975, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1011, 1013, 1014, 1015, 1016, 1020, 1021, 1025, 1032, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049], "soar": 1047, "sobkevich": 1044, "sobolev": 1036, "soc": [57, 370], "socastro": [1042, 1048], "socg2006": 446, "social": [186, 379, 390, 407, 1025], "societi": [168, 372, 407, 409, 468, 473, 541, 627, 880, 892, 997, 1015], "sodhani": 1038, "soft": [2, 129, 155, 156, 375, 389, 569, 570, 900, 908, 1015, 1025, 1037], "softmax": [414, 561, 658, 659, 997, 1004, 1005], "softw": 997, "softwar": [0, 168, 362, 372, 375, 383, 387, 389, 401, 415, 627, 635, 658, 991, 1025], "soil_typ": 248, "sokalmichen": [449, 456, 699, 778, 779, 780, 1004], "sokalmichenerdist": 699, "sokalsneath": [449, 456, 699, 778, 779, 780, 1004], "sokalsneathdist": 699, "sok\u00f3\u0142": [1049, 1050], "sole": [100, 375, 387, 407], "soledad": 1044, "soler": [0, 397], "solid": [50, 67, 69, 145, 173, 223, 224, 238, 248, 302, 311, 1025], "solntz": 350, "solosil": 1045, "solut": [80, 193, 197, 201, 203, 216, 225, 238, 244, 282, 321, 339, 373, 389, 401, 404, 406, 407, 409, 411, 412, 415, 416, 448, 450, 452, 531, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 646, 648, 650, 652, 654, 655, 656, 658, 660, 662, 664, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 797, 798, 814, 853, 861, 862, 994, 995, 997, 998, 1000, 1005, 1007, 1015, 1016, 1019, 1025, 1032, 1035, 1045, 1046, 1047], "solutu": 1040, "solutusimmensu": 1040, "solv": [2, 44, 45, 99, 170, 201, 243, 269, 288, 374, 375, 376, 377, 380, 387, 395, 407, 409, 411, 412, 417, 446, 452, 461, 477, 531, 537, 538, 539, 543, 545, 546, 547, 548, 635, 637, 646, 652, 654, 655, 664, 665, 670, 672, 674, 677, 685, 686, 687, 719, 834, 904, 905, 908, 948, 992, 995, 997, 998, 1001, 1002, 1015, 1016, 1017, 1019, 1020, 1025, 1038, 1042, 1045], "solvabl": 407, "solver": [54, 66, 69, 70, 80, 99, 183, 192, 201, 203, 205, 211, 219, 226, 227, 229, 304, 305, 306, 307, 316, 325, 326, 350, 381, 387, 389, 393, 403, 407, 419, 451, 461, 470, 471, 477, 502, 533, 535, 540, 541, 544, 547, 549, 646, 647, 648, 652, 653, 658, 659, 660, 661, 662, 663, 666, 668, 669, 670, 672, 674, 676, 680, 681, 684, 687, 688, 689, 691, 693, 695, 788, 814, 830, 835, 838, 861, 862, 906, 907, 908, 909, 910, 995, 998, 1001, 1002, 1005, 1015, 1016, 1022, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "solver_": [672, 674], "solver_opt": 670, "somani": 1044, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 83, 86, 88, 89, 91, 95, 100, 103, 106, 109, 111, 112, 116, 120, 135, 136, 140, 143, 146, 147, 149, 150, 151, 154, 155, 164, 170, 172, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 191, 193, 195, 197, 199, 200, 201, 202, 204, 206, 207, 211, 212, 215, 219, 220, 225, 228, 229, 231, 233, 238, 242, 245, 248, 255, 256, 257, 262, 263, 264, 269, 270, 271, 272, 275, 277, 283, 286, 288, 292, 295, 300, 305, 306, 309, 314, 319, 320, 321, 322, 323, 324, 325, 326, 335, 336, 338, 339, 346, 348, 350, 351, 352, 357, 358, 362, 363, 364, 368, 369, 370, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 430, 436, 442, 443, 446, 448, 450, 452, 458, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 496, 499, 508, 509, 515, 523, 524, 533, 534, 536, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 581, 582, 588, 590, 591, 606, 609, 610, 611, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 689, 690, 692, 693, 697, 698, 700, 701, 702, 707, 708, 715, 720, 726, 727, 738, 739, 740, 746, 754, 756, 757, 763, 782, 784, 787, 788, 789, 794, 797, 799, 801, 802, 807, 809, 818, 819, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 930, 931, 957, 990, 991, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1029, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "some_funct": [375, 938], "some_integ": 411, "some_iter": 375, "some_param": 375, "somebodi": 390, "someestim": 374, "somehow": 187, "someon": [375, 379, 389, 1032], "someth": [186, 232, 286, 350, 375, 378, 379, 383, 415, 920, 922, 1001, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "sometim": [104, 154, 185, 263, 269, 306, 351, 358, 363, 364, 375, 377, 381, 388, 389, 407, 409, 412, 414, 415, 448, 534, 535, 538, 540, 541, 869, 870, 871, 919, 996, 997, 998, 1001, 1006, 1011, 1012, 1016, 1029, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048], "somewhat": [346, 358, 364, 375, 412, 414, 906, 909, 997, 1016, 1017], "somewher": [381, 1001], "sommer": 1050, "somya": 1040, "son": [372, 991], "song": 998, "soni": [51, 1042, 1044], "sonni": 1037, "sonniv": [1047, 1048], "sonoiya": 1042, "sonoma": 315, "soon": [112, 389], "sooner": 1049, "sophist": [991, 1003], "sorbaro": 1037, "sorensen": 412, "soriano": 1041, "sornarajah": 1037, "sorri": 1040, "sorro": 1041, "sorski": [1046, 1047], "sort": [2, 43, 47, 49, 51, 58, 61, 93, 102, 105, 132, 137, 143, 146, 153, 168, 175, 193, 197, 211, 212, 229, 247, 269, 270, 273, 284, 301, 345, 350, 356, 375, 379, 383, 384, 389, 411, 414, 415, 417, 534, 541, 555, 566, 581, 594, 610, 617, 697, 712, 718, 729, 730, 738, 754, 783, 784, 787, 789, 800, 827, 839, 840, 841, 842, 843, 844, 845, 852, 854, 855, 856, 859, 869, 875, 877, 878, 881, 883, 885, 893, 906, 909, 948, 954, 997, 1004, 1007, 1011, 1025, 1032, 1036, 1042, 1043, 1044, 1046, 1047, 1050], "sort_graph_by_row_valu": [2, 384, 1047], "sort_index": 286, "sort_result": [844, 845, 852, 854, 855, 856, 1044], "sort_valu": [103, 188, 189, 252, 259, 269, 280, 315, 316], "sorted_idx": [147, 318], "sorted_importances_idx": 188, "sortofamudkip": [1047, 1048], "sought": 781, "soumirai": 1042, "sound": [168, 358], "sounder": 1038, "sourav": [1039, 1042], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 369, 372, 374, 375, 376, 378, 379, 381, 383, 384, 387, 388, 393, 401, 404, 408, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 998, 1011, 1017, 1020, 1022, 1025, 1042, 1046, 1050], "south": [50, 149, 186, 302, 370, 413], "south_y": 186, "sp": [43, 186, 325, 991], "sp_version": 670, "space": [2, 37, 43, 47, 49, 57, 67, 80, 86, 90, 91, 93, 94, 96, 98, 102, 103, 106, 116, 120, 122, 126, 128, 130, 139, 142, 146, 152, 165, 168, 170, 176, 191, 197, 212, 231, 232, 233, 235, 242, 243, 244, 248, 249, 255, 260, 277, 280, 281, 289, 298, 299, 311, 320, 343, 350, 351, 352, 357, 358, 362, 367, 370, 371, 372, 375, 382, 387, 388, 389, 404, 407, 410, 412, 413, 414, 415, 417, 442, 446, 447, 448, 451, 461, 463, 464, 465, 466, 481, 482, 483, 487, 498, 532, 534, 535, 538, 539, 540, 541, 543, 544, 549, 573, 582, 588, 589, 591, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 638, 640, 641, 642, 643, 688, 689, 690, 692, 693, 694, 696, 699, 800, 803, 804, 806, 814, 823, 834, 844, 845, 852, 853, 854, 855, 864, 869, 870, 876, 881, 896, 897, 898, 917, 952, 993, 994, 995, 996, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1026, 1027, 1032, 1033, 1035, 1040, 1041, 1042, 1046, 1047, 1048], "spacek": 1037, "spain": 315, "spam": [581, 709, 741, 839, 1001, 1003, 1025], "span": [52, 88, 109, 146, 243, 263, 266, 370, 407, 415, 549, 636, 800, 803, 1001], "spanish": 1020, "spannbauer": 1044, "sparciti": 351, "spare": [369, 674, 675], "spark": [370, 1021], "sparrai": 1049, "spars": [2, 25, 45, 46, 47, 51, 53, 55, 57, 66, 74, 75, 87, 88, 90, 102, 108, 109, 110, 119, 121, 139, 152, 183, 192, 193, 199, 200, 201, 204, 206, 207, 210, 227, 242, 244, 270, 276, 282, 289, 307, 319, 323, 326, 332, 349, 352, 357, 362, 367, 369, 370, 371, 375, 377, 378, 379, 380, 387, 388, 389, 401, 407, 408, 414, 415, 417, 418, 422, 429, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 456, 458, 459, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 486, 487, 488, 496, 497, 503, 508, 523, 524, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 585, 586, 588, 589, 590, 591, 593, 594, 603, 604, 605, 606, 607, 608, 609, 629, 630, 631, 633, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 712, 713, 714, 729, 730, 731, 734, 738, 739, 740, 754, 755, 760, 761, 763, 764, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 792, 793, 796, 799, 800, 803, 804, 814, 821, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 873, 874, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 926, 928, 929, 930, 931, 936, 945, 948, 949, 952, 954, 955, 963, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 989, 991, 994, 997, 998, 999, 1001, 1002, 1004, 1014, 1016, 1017, 1021, 1022, 1023, 1026, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "sparse_cg": [350, 672, 674, 687, 997, 1033, 1039, 1041, 1042, 1046, 1048], "sparse_coef_": [646, 652, 660, 662, 1032], "sparse_encod": [2, 542, 650, 651, 652, 653, 654, 655, 656, 663, 664, 665, 682, 683, 684, 685, 686, 1032, 1039, 1040, 1042, 1046], "sparse_encode_parallel": 1032, "sparse_format": [527, 1049], "sparse_func": [1038, 1044], "sparse_input_": 871, "sparse_lasso": 198, "sparse_output": [43, 143, 252, 315, 322, 325, 566, 871, 875, 877, 883, 888, 1011, 1047, 1048], "sparse_output_": [463, 551], "sparse_symmetric_arrai": 986, "sparse_threshold": [187, 463, 466, 1040], "sparsearrai": 1043, "sparsecod": [2, 129, 412, 531, 537, 540, 548, 1039, 1040, 1042, 1044, 1046], "sparsecodingmixin": 1032, "sparsefunc": [2, 384, 975, 976, 977, 978, 979, 980, 981, 1045], "sparsefuncs_fast": [2, 384, 982, 983], "sparsepca": [2, 120, 531, 533, 534, 535, 537, 539, 540, 541, 542, 545, 546, 1032, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1050], "sparser": [88, 193, 203, 282, 412, 470, 477, 539, 543, 997, 1004, 1015], "sparserandomproject": [2, 232, 242, 896, 1013, 1033, 1038, 1046, 1048, 1049], "sparsetool": 1039, "sparsifi": [46, 197, 362, 658, 659, 666, 667, 668, 676, 677, 678, 904, 984, 1034], "sparsiti": [2, 53, 66, 113, 183, 192, 197, 200, 205, 222, 226, 227, 244, 346, 351, 362, 389, 409, 412, 414, 416, 502, 527, 531, 537, 538, 539, 540, 543, 545, 546, 547, 646, 652, 658, 676, 678, 721, 723, 724, 873, 879, 884, 889, 994, 997, 1004, 1011, 1022, 1034], "sparsity_en_lr": 203, "sparsity_l1_lr": 203, "sparsity_l2_lr": 203, "sparsity_ratio": 362, "spatial": [81, 82, 88, 189, 197, 228, 306, 370, 389, 407, 418, 443, 445, 449, 451, 456, 679, 692, 760, 763, 778, 779, 780, 781, 792, 793, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 997, 1004, 1011, 1034, 1038, 1045, 1048], "spawn": [362, 387, 800, 814, 825, 826, 827, 1043], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "speak": [351, 362, 375, 1015], "spearman": [189, 635, 636, 992], "spearmanr": 189, "spec": [1047, 1048], "speci": [2, 42, 126, 183, 248, 290, 350, 368, 413, 498, 706, 789, 849, 908, 919, 1001, 1007, 1022, 1027, 1032], "special": [145, 186, 202, 229, 286, 299, 315, 339, 369, 371, 377, 381, 387, 389, 407, 410, 412, 463, 466, 553, 555, 559, 825, 916, 990, 995, 997, 999, 1000, 1001, 1002, 1004, 1017, 1039, 1042, 1044, 1046], "special_charact": [916, 1017], "species_nam": [50, 302], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 88, 95, 98, 102, 104, 140, 149, 154, 175, 178, 183, 186, 187, 191, 215, 229, 263, 264, 269, 286, 309, 318, 319, 323, 326, 343, 350, 351, 352, 358, 362, 363, 370, 375, 378, 380, 381, 383, 387, 389, 393, 401, 403, 407, 408, 411, 412, 414, 415, 416, 417, 431, 496, 503, 534, 551, 557, 564, 567, 568, 569, 570, 574, 588, 591, 593, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 640, 643, 646, 647, 652, 658, 672, 687, 697, 699, 712, 713, 800, 801, 802, 807, 808, 809, 814, 827, 840, 921, 940, 942, 943, 963, 976, 977, 978, 995, 997, 998, 1000, 1001, 1003, 1004, 1006, 1008, 1009, 1011, 1015, 1017, 1018, 1019, 1024, 1032, 1036, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "specifi": [2, 43, 58, 64, 88, 120, 143, 144, 149, 171, 174, 176, 177, 178, 201, 212, 219, 254, 263, 277, 362, 363, 369, 375, 377, 383, 384, 388, 389, 398, 401, 405, 407, 408, 411, 412, 414, 416, 417, 419, 421, 436, 440, 444, 449, 451, 462, 463, 466, 468, 469, 471, 472, 473, 474, 475, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 503, 515, 527, 531, 533, 537, 538, 540, 541, 546, 547, 552, 557, 559, 560, 561, 562, 564, 567, 568, 583, 584, 593, 594, 597, 602, 610, 611, 620, 631, 632, 633, 638, 643, 646, 647, 648, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 665, 668, 669, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 687, 691, 698, 700, 702, 709, 711, 729, 730, 738, 742, 754, 771, 779, 780, 783, 784, 787, 800, 803, 804, 806, 807, 809, 813, 814, 817, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 839, 840, 842, 843, 844, 845, 849, 854, 877, 878, 879, 882, 883, 885, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 943, 950, 984, 991, 997, 998, 1000, 1001, 1004, 1008, 1009, 1011, 1014, 1015, 1016, 1032, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "spector": 411, "spectral": [2, 53, 56, 71, 79, 80, 82, 88, 102, 183, 232, 233, 330, 332, 350, 351, 352, 375, 415, 448, 450, 451, 452, 461, 468, 469, 470, 471, 472, 473, 474, 475, 487, 511, 513, 591, 688, 689, 690, 691, 692, 695, 719, 795, 1004, 1014, 1022, 1026, 1027, 1032, 1033], "spectral_clust": [2, 80, 99, 1040, 1042, 1044, 1045, 1046, 1047, 1049], "spectral_embed": [2, 389, 998, 1033, 1036, 1038, 1040, 1042, 1045, 1046, 1047, 1049], "spectralbiclust": [2, 404, 452, 1034, 1038, 1039, 1043], "spectralclust": [2, 79, 322, 407, 439, 1004, 1032, 1033, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "spectralcoclust": [2, 57, 59, 404, 450, 1034, 1039, 1043], "spectralembed": [2, 85, 231, 232, 233, 688, 689, 690, 692, 998, 1033, 1038, 1042, 1046, 1047, 1049], "spectrum": [105, 524, 544, 695, 948, 1025, 1040], "speech": [415, 1001], "speed": [80, 81, 90, 102, 123, 132, 140, 182, 187, 198, 201, 205, 248, 289, 320, 329, 350, 352, 364, 375, 378, 384, 387, 389, 403, 405, 407, 412, 414, 415, 418, 442, 443, 446, 447, 448, 449, 451, 456, 458, 459, 460, 461, 531, 532, 610, 627, 632, 633, 634, 639, 646, 647, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 684, 692, 797, 798, 806, 828, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 879, 948, 990, 993, 998, 1000, 1002, 1015, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "speedi": 362, "speedup": [325, 362, 412, 414, 650, 654, 657, 1032, 1033, 1034, 1035, 1047], "speer": 1034, "spell": 415, "spend": 415, "spent": [289, 315, 376, 381, 828, 1047], "sperret6": 1050, "sphere": [134, 183, 230, 231, 234, 235, 236, 289, 351, 413, 519, 589, 688, 689, 690, 691, 692, 764, 933, 995, 999, 1004, 1022], "sphere_data": 233, "spheric": [70, 90, 115, 150, 233, 256, 258, 259, 302, 371, 764, 797, 798, 997, 1000, 1004], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 363, 379, 389, 393, 400, 1032, 1039], "sphinxcontrib": [375, 393, 400], "sphinxext": [375, 393, 400], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1032, "spidlen": [692, 998], "spie": [168, 372], "spielman": 1042, "spike": 187, "spikebh": 1046, "spikhalskii": 1037, "spiki": 43, "spin": 383, "spine": [46, 54, 70, 222, 309], "spirit": 412, "spite": 1003, "spline": [2, 183, 192, 193, 284, 294, 516, 517, 518, 672, 865, 879, 883, 1020, 1022, 1045], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 212, 248, 321, 879, 1011, 1045, 1047, 1048], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 102, 125, 134, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 159, 164, 185, 186, 189, 197, 207, 208, 211, 214, 219, 229, 239, 248, 255, 256, 262, 263, 264, 267, 269, 274, 276, 279, 283, 286, 292, 298, 304, 306, 310, 311, 316, 322, 324, 331, 339, 350, 352, 357, 370, 382, 388, 389, 393, 398, 405, 406, 407, 412, 414, 415, 416, 436, 441, 442, 471, 472, 478, 479, 497, 531, 537, 539, 542, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 591, 594, 602, 647, 651, 653, 655, 661, 663, 665, 673, 675, 695, 704, 705, 717, 731, 737, 757, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 844, 845, 861, 862, 885, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 971, 990, 993, 997, 998, 1004, 1007, 1008, 1009, 1011, 1015, 1017, 1021, 1027, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "split0_test_precis": [800, 814], "split0_test_scor": [800, 814, 1038], "split0_train_scor": [800, 814, 1038], "split1_test_scor": [800, 814], "split1_train_scor": [800, 814], "split2_test_scor": 800, "split_cod": 412, "split_sign": [531, 537, 542], "splitter": [43, 245, 324, 325, 389, 398, 411, 436, 471, 564, 565, 567, 568, 594, 602, 647, 651, 653, 655, 659, 661, 663, 665, 673, 675, 800, 802, 803, 804, 805, 806, 814, 815, 816, 819, 820, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 912, 913, 914, 915, 1017, 1021, 1038, 1039, 1040, 1041, 1048, 1049, 1050], "splot": [255, 260], "splt": 212, "sply88": 1046, "spmatrix": 1049, "spolski": 415, "sport": [57, 370], "spot": [86, 240, 407], "spottabl": 381, "spread": [43, 75, 233, 270, 309, 328, 329, 330, 333, 346, 362, 375, 407, 451, 461, 515, 881, 893, 901, 1001], "spring": [43, 52, 187], "springboard": 1020, "springer": [137, 138, 148, 175, 268, 405, 407, 411, 412, 414, 520, 535, 559, 560, 690, 694, 696, 705, 720, 726, 740, 741, 756, 797, 912, 913, 998, 1001, 1002, 1008, 1017], "sprint": [374, 375, 1032], "spuriou": [339, 383, 1011, 1045, 1046, 1047], "spy": 206, "sq": 769, "sqeuclidean": [73, 449, 456, 778, 779, 780], "sqft": 248, "sql": 369, "sqr": 75, "sqrt": [51, 111, 112, 113, 123, 129, 138, 159, 189, 193, 195, 234, 236, 250, 254, 255, 256, 259, 260, 269, 344, 346, 407, 414, 415, 417, 462, 468, 469, 470, 471, 472, 473, 474, 475, 538, 540, 547, 557, 558, 559, 560, 564, 565, 619, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 699, 731, 763, 764, 769, 884, 897, 912, 913, 914, 915, 993, 997, 998, 1001, 1003, 1013, 1046], "squar": [2, 43, 44, 52, 94, 103, 110, 111, 112, 114, 115, 121, 122, 130, 137, 147, 149, 150, 157, 168, 170, 175, 183, 185, 186, 192, 193, 195, 196, 197, 201, 202, 211, 213, 216, 221, 228, 229, 241, 242, 244, 257, 265, 284, 313, 320, 321, 323, 336, 350, 367, 372, 375, 381, 384, 389, 407, 409, 410, 412, 413, 414, 418, 419, 430, 439, 441, 442, 443, 445, 446, 448, 449, 453, 456, 458, 459, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 501, 531, 537, 539, 541, 543, 545, 546, 547, 549, 552, 554, 556, 558, 559, 560, 562, 565, 568, 570, 590, 591, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 611, 615, 622, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 685, 686, 687, 688, 690, 692, 694, 696, 709, 721, 722, 723, 724, 750, 751, 758, 759, 763, 769, 770, 785, 790, 791, 830, 837, 838, 846, 847, 850, 851, 852, 854, 855, 862, 865, 884, 904, 905, 907, 909, 910, 911, 913, 915, 946, 973, 986, 992, 994, 995, 1004, 1005, 1009, 1015, 1017, 1022, 1023, 1027, 1032, 1035, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "square_dist": 1044, "squared_epsilon_insensit": [667, 676, 678, 905, 997, 1038], "squared_error": [46, 52, 129, 146, 147, 321, 414, 558, 559, 560, 562, 565, 671, 676, 678, 693, 913, 915, 1015, 1017, 1045, 1048, 1049], "squared_hing": [218, 346, 666, 676, 904, 911, 997, 1016], "squared_loss": [387, 1045], "squareform": 189, "squash": [248, 379, 417, 531, 537, 542, 548], "squeez": [107, 176, 177, 248, 289, 309], "sr": 1025, "sr_color": 235, "sr_err": 235, "sr_lle": 235, "sr_point": 235, "sr_tsne": 235, "srajan": 1040, "sre": 1047, "srebro": 1015, "srep30750": 407, "sri": [671, 997, 1039, 1040], "sridharan": 1037, "sriharsha": [1040, 1041], "srikantan": 997, "srimukh": 1044, "srinath": [1046, 1047], "srinivasan": [1040, 1043], "sripada": 1044, "srivastava": [1035, 1047, 1050], "srivatsan": [1038, 1039, 1042], "srvanrel": 1038, "sr\u0161e\u0148": 1050, "ss": 411, "sse": 442, "sseg": 1037, "ssrn": [211, 229], "sss": 820, "ssvm": 387, "st": [81, 100, 269, 323, 1035, 1038, 1040], "st30": 333, "st50": 333, "st_pipelin": 332, "sta4273": 644, "stabil": [72, 138, 144, 186, 232, 274, 309, 346, 351, 389, 404, 445, 650, 654, 670, 842, 861, 862, 880, 892, 947, 991, 997, 1000, 1011, 1021, 1032, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "stabilis": 193, "stabl": [43, 64, 186, 206, 209, 213, 289, 319, 346, 351, 373, 375, 379, 384, 389, 393, 411, 415, 419, 470, 471, 477, 533, 541, 655, 672, 674, 687, 692, 724, 752, 947, 948, 997, 1003, 1004, 1011, 1021, 1028, 1032, 1033, 1038, 1043, 1045, 1049], "stack": [2, 14, 107, 133, 135, 143, 157, 181, 183, 240, 294, 357, 374, 383, 387, 389, 413, 463, 465, 466, 496, 515, 562, 565, 567, 568, 612, 627, 628, 630, 653, 673, 701, 825, 827, 865, 869, 877, 878, 884, 974, 991, 1021, 1022, 1023, 1024, 1027, 1032, 1035, 1039, 1040, 1041, 1042, 1043], "stack_method": [414, 567], "stack_method_": [414, 567, 568], "stacking_regressor": 154, "stackingclassifi": [2, 318, 358, 389, 398, 414, 568, 991, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "stackingregressor": [2, 154, 318, 389, 398, 414, 567, 991, 1042, 1043, 1044, 1045, 1046, 1049], "stackingregressorinot": 154, "stackoverflow": [380, 383, 387], "stade": 1036, "stage": [0, 46, 63, 104, 134, 139, 144, 147, 263, 379, 389, 403, 407, 414, 447, 553, 554, 559, 560, 561, 562, 588, 589, 591, 602, 998, 1011, 1019, 1040, 1044], "staged_decision_funct": [553, 559, 561], "staged_predict": [134, 144, 147, 414, 553, 554, 559, 560, 561, 562, 1032, 1044], "staged_predict_proba": [145, 148, 553, 559, 561, 1032], "staged_scor": [553, 554], "stagewis": 134, "stagg": 1045, "stai": [43, 52, 63, 72, 129, 186, 351, 374, 375, 379, 389, 390, 1006, 1024, 1038], "stairstep": 276, "stalei": [1041, 1042], "stall": [374, 378], "stallei": 1044, "stan": [842, 1049], "stand": [272, 352, 379, 387, 412, 531, 537, 545, 546, 596, 609, 678, 705, 717, 736, 737, 757, 786, 788, 795, 1000, 1001, 1007], "standalon": [381, 658, 904], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 88, 94, 102, 103, 105, 111, 112, 116, 121, 134, 137, 139, 140, 141, 142, 150, 154, 168, 170, 175, 177, 179, 186, 193, 200, 201, 209, 211, 220, 231, 232, 233, 243, 248, 259, 263, 264, 267, 268, 269, 270, 272, 309, 314, 337, 350, 362, 363, 367, 368, 369, 371, 372, 373, 375, 377, 378, 380, 381, 384, 387, 389, 393, 401, 403, 407, 409, 410, 411, 415, 417, 445, 463, 467, 471, 487, 496, 501, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 522, 524, 525, 530, 532, 535, 541, 552, 590, 594, 611, 634, 644, 645, 672, 673, 674, 675, 676, 678, 687, 689, 693, 788, 806, 821, 823, 841, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 868, 873, 874, 877, 880, 881, 882, 884, 892, 893, 894, 895, 902, 904, 905, 930, 990, 993, 997, 998, 1001, 1003, 1004, 1005, 1007, 1015, 1016, 1021, 1025, 1027, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1050], "standard_coef_": 1043, "standard_intercept_": 1043, "standard_norm": [358, 687], "standard_scal": 250, "standard_t": 122, "standardscal": [2, 45, 49, 67, 79, 82, 88, 91, 95, 103, 105, 116, 130, 154, 168, 186, 193, 199, 201, 203, 211, 227, 229, 239, 240, 248, 249, 250, 252, 263, 266, 276, 283, 292, 297, 298, 304, 311, 314, 318, 319, 321, 322, 323, 325, 326, 339, 342, 358, 364, 375, 377, 380, 384, 388, 408, 411, 428, 465, 466, 567, 676, 678, 864, 865, 868, 881, 895, 904, 905, 906, 907, 909, 910, 991, 998, 1005, 1011, 1015, 1016, 1018, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "standardscalerifittedstandardscal": 252, "standardscalerstandardscal": [103, 154, 186, 239, 240, 249, 250, 252, 263, 276, 283, 319, 322], "standpoint": 83, "stanford": [168, 372, 649, 682, 683, 839, 842, 843, 897, 999], "stanislav": [1047, 1048], "stanlei": [1046, 1047, 1048], "stap": 1040, "stapl": 1036, "star": [70, 118, 157, 375], "stareh": 1043, "start": [0, 43, 46, 49, 51, 52, 58, 63, 86, 91, 97, 100, 106, 116, 123, 139, 144, 146, 165, 168, 175, 177, 187, 191, 194, 195, 201, 211, 212, 213, 219, 229, 231, 235, 239, 243, 245, 257, 263, 269, 277, 289, 322, 324, 329, 350, 357, 358, 362, 363, 364, 375, 376, 377, 379, 380, 381, 387, 389, 393, 404, 407, 411, 412, 416, 417, 439, 441, 449, 453, 455, 538, 610, 617, 632, 645, 653, 659, 666, 667, 668, 676, 677, 678, 690, 694, 781, 782, 789, 797, 798, 800, 803, 804, 814, 846, 847, 848, 850, 852, 860, 954, 984, 990, 997, 1000, 1005, 1006, 1015, 1021, 1025, 1035, 1037, 1040, 1042, 1044, 1045, 1046, 1047, 1048], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 234], "start_reut": 47, "start_tim": [46, 49, 57, 141, 144, 154, 170, 201, 232], "start_titl": 47, "start_top": 47, "startstart": 395, "startswith": [52, 102, 232, 302], "startup": 1025, "stat": [2, 45, 47, 49, 102, 111, 168, 170, 189, 266, 269, 277, 281, 294, 320, 328, 329, 372, 384, 388, 409, 473, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 682, 683, 804, 812, 814, 912, 913, 950, 990, 997, 1011, 1039, 1041, 1045], "stat_learn_tut_index": [159, 160, 161], "state": [37, 86, 90, 102, 104, 111, 149, 213, 242, 250, 255, 263, 275, 320, 358, 363, 364, 375, 377, 381, 383, 387, 389, 390, 406, 414, 415, 420, 439, 442, 446, 448, 453, 458, 474, 544, 589, 679, 803, 804, 812, 814, 816, 844, 845, 851, 899, 900, 933, 990, 991, 997, 1003, 1006, 1013, 1021, 1025, 1034, 1036, 1038, 1040, 1042, 1045, 1048], "state_to_print": 376, "stateless": [102, 351, 364, 389, 415, 582, 583, 589, 638, 867, 868, 876, 923, 984, 1011, 1048], "statement": [186, 377, 380, 383, 387, 389, 412], "static": [375, 377, 381, 383, 646, 647, 652, 653, 660, 661, 662, 663], "station": 175, "stationari": [174, 417, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "statist": [2, 47, 52, 112, 134, 137, 138, 148, 163, 167, 168, 183, 185, 186, 187, 188, 197, 199, 215, 261, 263, 266, 268, 271, 278, 286, 288, 309, 315, 320, 358, 368, 370, 372, 381, 389, 405, 406, 407, 408, 409, 411, 412, 414, 416, 432, 468, 473, 493, 494, 516, 517, 518, 520, 522, 541, 553, 559, 560, 562, 604, 605, 606, 609, 627, 630, 634, 635, 644, 649, 656, 690, 694, 696, 710, 716, 721, 723, 724, 731, 743, 788, 800, 816, 834, 861, 862, 880, 881, 882, 884, 889, 892, 893, 895, 909, 912, 913, 975, 990, 991, 995, 997, 998, 1000, 1001, 1002, 1003, 1008, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1022, 1037, 1040, 1043, 1044, 1046, 1047, 1050], "statistician": [389, 884], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 630, "statlearnspars": [721, 723, 724], "statlib": 370, "statnikov": 1001, "statsmodel": [997, 1020], "statu": [52, 132, 325, 369, 393, 496, 844, 845, 1050], "statweb": [649, 682, 683], "staub": 1038, "staubda": 1035, "std": [43, 50, 51, 52, 72, 80, 83, 87, 94, 99, 110, 112, 113, 121, 122, 123, 141, 142, 143, 149, 154, 176, 179, 181, 182, 186, 194, 200, 220, 242, 267, 268, 269, 271, 272, 274, 277, 279, 283, 284, 315, 331, 342, 351, 358, 389, 407, 411, 414, 515, 606, 609, 829, 884, 895, 1011, 1040, 1044], "std_": [273, 1037], "std_auc": 279, "std_display_styl": [244, 271, 806, 823], "std_error": 159, "std_fit_tim": [140, 291, 800, 814], "std_i": 186, "std_precis": 267, "std_predict": 177, "std_predictions_gpr": 170, "std_recal": 267, "std_scaler": 326, "std_score": [351, 1045], "std_score_tim": [140, 270, 800, 814], "std_test_precis": 267, "std_test_recal": 267, "std_test_scor": [103, 105, 140, 159, 167, 268, 269, 270, 277, 291, 471, 594, 800, 814, 1038, 1045], "std_time": 1038, "std_tpr": 279, "std_train_scor": [800, 814, 1038], "std_y_pr": 175, "stderr": [51, 833], "stdin": 383, "stdout": [47, 120, 219, 833, 853, 861, 862], "stds_california": 182, "stds_diabet": 182, "steadi": [899, 900], "steelblu": [121, 122, 156], "steep": [2, 171, 187, 278, 279, 407, 411, 417, 449, 455], "stef": [627, 991], "stefan": [1035, 1036, 1040, 1042], "stefani": [0, 1045, 1047, 1048, 1049, 1050], "stefanini": 1046, "stefano": 1034, "steffen": 1050, "stehl": [1046, 1047], "stein": 1038, "steinbach": [407, 1047, 1049], "steinfurt": [1042, 1044], "steingold": [1039, 1040], "steinlei": [407, 705], "steinley2004": 705, "stella": [407, 451, 461], "stellalin7": 1047, "stem": [137, 144, 188, 204, 210, 260, 282, 411, 415, 993, 1003], "step": [52, 58, 63, 69, 77, 87, 88, 91, 100, 102, 103, 104, 105, 106, 112, 116, 123, 127, 134, 139, 142, 143, 144, 154, 165, 166, 167, 172, 175, 186, 188, 211, 219, 229, 239, 240, 243, 249, 252, 260, 263, 267, 270, 276, 278, 283, 289, 291, 292, 297, 304, 307, 311, 314, 315, 319, 322, 333, 335, 339, 351, 352, 354, 358, 362, 370, 373, 374, 375, 377, 378, 380, 383, 387, 389, 401, 404, 405, 407, 409, 410, 412, 414, 415, 416, 441, 446, 448, 536, 537, 538, 539, 546, 563, 588, 589, 591, 593, 594, 597, 606, 627, 644, 648, 666, 667, 669, 676, 678, 679, 680, 694, 700, 797, 798, 800, 803, 804, 814, 835, 836, 837, 838, 860, 861, 862, 864, 865, 867, 904, 905, 906, 907, 909, 910, 947, 948, 971, 975, 991, 997, 1000, 1005, 1006, 1011, 1015, 1017, 1018, 1020, 1024, 1032, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1048, 1050], "stephan": [708, 1035, 1041, 1042, 1044], "stephani": 1043, "stephen": [1025, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045], "stepwis": [149, 635, 654, 655, 656, 682, 683, 997], "stern": [788, 1001], "steve": [1034, 1036, 1040, 1045, 1047], "steven": [1034, 1035, 1037, 1039, 1040, 1045, 1047, 1048, 1050], "steward": 1039, "stewart": [1037, 1042, 1045, 1047, 1050], "stick": [48, 797, 1000], "stijn": 1039, "stikhin": 1042, "still": [43, 52, 64, 68, 79, 86, 88, 90, 95, 113, 124, 126, 146, 149, 154, 170, 176, 185, 186, 188, 189, 193, 197, 200, 211, 213, 229, 243, 272, 278, 282, 309, 320, 321, 324, 350, 351, 358, 364, 369, 374, 375, 379, 380, 381, 383, 389, 407, 411, 414, 415, 418, 439, 443, 453, 473, 496, 627, 632, 635, 637, 658, 659, 717, 756, 778, 781, 792, 793, 802, 803, 804, 817, 820, 882, 884, 904, 928, 953, 990, 991, 995, 997, 1000, 1001, 1004, 1007, 1009, 1016, 1017, 1019, 1021, 1024, 1025, 1032, 1034, 1037, 1038, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1050], "stine": [1040, 1041], "stochast": [2, 46, 91, 144, 145, 148, 160, 183, 191, 192, 199, 233, 235, 238, 243, 295, 297, 298, 303, 306, 321, 338, 407, 412, 414, 461, 487, 496, 502, 503, 504, 514, 522, 536, 544, 559, 560, 604, 627, 631, 639, 658, 659, 668, 672, 674, 676, 677, 678, 679, 687, 688, 689, 690, 692, 830, 853, 860, 861, 862, 865, 874, 908, 947, 948, 974, 990, 1004, 1005, 1007, 1022, 1023, 1026, 1027, 1032, 1033, 1036, 1037, 1039, 1041, 1043], "stochastic_gradi": [1034, 1035, 1041], "stock": [42, 80, 85, 183, 231, 232, 407, 409, 453, 470, 471, 689, 998, 1022], "stogbauer": [607, 608], "stojanov": [1046, 1047], "stolbunov": 1037, "stone": [375, 912, 913, 1017], "stop": [43, 46, 51, 55, 79, 95, 133, 134, 140, 175, 177, 183, 187, 192, 199, 213, 313, 319, 375, 377, 383, 384, 389, 407, 412, 414, 416, 439, 440, 442, 444, 446, 448, 451, 453, 461, 462, 470, 471, 477, 481, 482, 483, 489, 496, 508, 509, 532, 536, 537, 538, 539, 540, 543, 545, 546, 547, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 588, 589, 591, 602, 617, 627, 644, 645, 646, 648, 649, 652, 656, 658, 659, 666, 667, 668, 669, 671, 676, 677, 678, 680, 691, 692, 695, 714, 750, 797, 798, 830, 861, 862, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 954, 974, 990, 997, 1005, 1006, 1016, 1017, 1021, 1022, 1023, 1025, 1027, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "stop_n_inli": [671, 997], "stop_prob": 671, "stop_scor": [671, 997], "stop_word": [54, 57, 350, 351, 415, 588, 589, 591], "stop_words_": 1050, "stopiter": 1044, "stopword": 488, "storag": [0, 352, 389, 658, 659, 666, 667, 668, 676, 677, 678, 904, 1004, 1016, 1035, 1040], "storch": 1041, "store": [2, 68, 86, 87, 102, 104, 112, 165, 178, 191, 198, 201, 215, 232, 239, 249, 259, 263, 274, 278, 328, 352, 357, 362, 369, 370, 375, 377, 382, 383, 384, 387, 389, 401, 403, 408, 410, 412, 414, 415, 417, 418, 437, 439, 443, 445, 449, 456, 463, 466, 468, 469, 472, 473, 474, 475, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 503, 508, 534, 535, 541, 549, 550, 555, 556, 557, 558, 563, 564, 565, 566, 569, 570, 585, 589, 610, 611, 627, 631, 632, 635, 649, 650, 654, 660, 661, 662, 663, 666, 667, 673, 675, 676, 677, 678, 688, 689, 690, 692, 697, 698, 700, 701, 702, 781, 797, 798, 800, 806, 814, 822, 823, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 875, 882, 884, 885, 899, 900, 901, 930, 931, 957, 958, 971, 974, 986, 991, 993, 997, 1002, 1004, 1013, 1016, 1017, 1020, 1029, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "store_cent": [445, 1049], "store_covari": [70, 549, 550, 1037, 1039], "store_cv_result": [263, 673, 675, 822, 1050], "store_cv_valu": [673, 675, 1040, 1043, 1050], "store_precis": [69, 110, 468, 469, 472, 473, 474, 475], "stori": [185, 269, 286, 370, 1000], "stork": 995, "stott": 1040, "stoyanov": [1040, 1041], "str": [47, 49, 52, 91, 93, 128, 130, 142, 166, 229, 248, 269, 281, 289, 299, 337, 350, 369, 370, 384, 415, 418, 419, 423, 428, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 456, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 617, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 696, 697, 698, 699, 700, 702, 707, 709, 711, 713, 727, 729, 730, 732, 733, 738, 742, 771, 774, 778, 779, 780, 781, 782, 783, 784, 787, 789, 792, 793, 799, 800, 801, 802, 803, 804, 806, 807, 809, 811, 812, 814, 818, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 923, 925, 926, 929, 930, 931, 934, 938, 940, 944, 956, 957, 958, 960, 963, 984, 985, 988, 1047], "str_": [51, 278, 493, 500, 504, 510, 872], "strai": 1006, "straight": [125, 202, 209, 266, 343, 362], "straightforward": [310, 374, 406, 412, 1025], "straka": 1044, "strateg": 390, "strategi": [2, 30, 43, 52, 85, 87, 91, 94, 103, 143, 148, 149, 154, 160, 165, 167, 181, 182, 183, 188, 197, 201, 204, 211, 219, 229, 240, 248, 250, 261, 263, 268, 270, 272, 273, 274, 276, 277, 278, 279, 281, 283, 288, 303, 306, 308, 310, 311, 315, 316, 318, 319, 322, 347, 352, 361, 377, 381, 388, 389, 401, 406, 411, 414, 415, 416, 419, 436, 437, 438, 444, 446, 451, 461, 471, 502, 504, 512, 514, 522, 533, 538, 551, 552, 561, 562, 564, 565, 567, 568, 588, 589, 591, 592, 594, 602, 627, 628, 630, 634, 645, 647, 651, 653, 655, 661, 663, 665, 673, 675, 691, 695, 704, 711, 713, 732, 755, 757, 795, 800, 802, 803, 804, 806, 814, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 861, 862, 869, 874, 885, 899, 904, 906, 909, 912, 913, 914, 915, 971, 990, 991, 1000, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1015, 1016, 1017, 1022, 1027, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "stratif": [801, 802, 808, 809, 816, 818, 819, 820, 971, 1041], "stratifi": [2, 44, 125, 141, 150, 164, 188, 226, 239, 248, 252, 263, 264, 269, 272, 278, 292, 297, 298, 318, 377, 389, 406, 551, 559, 567, 568, 602, 659, 666, 668, 676, 799, 800, 803, 804, 806, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 853, 861, 971, 1001, 1004, 1037, 1038, 1039, 1041, 1042, 1045], "stratifiedgroupkfold": [2, 264, 1045], "stratifiedkfold": [2, 167, 256, 264, 275, 279, 331, 411, 436, 567, 568, 594, 602, 659, 673, 800, 801, 803, 804, 805, 806, 808, 810, 814, 818, 820, 823, 824, 825, 826, 827, 828, 829, 831, 885, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1045], "stratifiedshufflesplit": [2, 264, 339, 411, 1032, 1033, 1038, 1039, 1045], "stream": [47, 407, 412, 415, 461, 589, 873, 874, 884, 993, 1040, 1043], "stream_reuters_docu": 47, "streamhandl": 1043, "streamlin": 997, "street": [154, 168, 372], "strehl": 407, "strength": [51, 154, 177, 200, 211, 215, 270, 282, 318, 362, 410, 414, 445, 567, 568, 643, 648, 649, 652, 658, 659, 669, 672, 673, 674, 675, 676, 678, 680, 687, 783, 861, 862, 904, 905, 909, 910, 990, 997, 1004, 1007, 1015, 1016], "stress": [690, 694, 998, 1047], "stress_": 690, "stretch": [235, 258], "stretched_gaussian": 258, "strickland": 1038, "strict": [358, 373, 389, 403, 412, 503, 535, 588, 589, 591, 997, 1032, 1041, 1044, 1050], "stricter": 181, "strictli": [64, 211, 229, 245, 309, 324, 351, 380, 389, 405, 410, 412, 414, 415, 508, 509, 535, 541, 544, 561, 562, 588, 591, 602, 642, 670, 671, 673, 675, 695, 700, 739, 766, 800, 803, 804, 810, 814, 827, 853, 880, 892, 896, 897, 899, 900, 904, 905, 909, 910, 946, 990, 992, 997, 1001, 1011, 1015, 1033, 1043, 1048], "striebel": [1038, 1039], "strife": 998, "strike": [144, 187, 215], "string": [2, 47, 103, 142, 178, 229, 240, 263, 273, 321, 326, 352, 362, 369, 370, 375, 376, 377, 381, 389, 408, 411, 414, 415, 416, 418, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 488, 489, 496, 505, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 617, 620, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 699, 709, 711, 719, 732, 762, 765, 771, 774, 778, 779, 780, 781, 792, 793, 797, 798, 800, 803, 804, 806, 814, 822, 823, 827, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 921, 928, 930, 931, 939, 940, 941, 964, 984, 985, 990, 991, 1001, 1014, 1016, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "strip": [54, 229, 351, 362, 369, 370, 496], "strip_acc": [588, 589, 591], "strip_accents_unicod": 1042, "stripe": 312, "stripplot": 186, "strive": [374, 390, 1025], "strong": [32, 43, 52, 87, 170, 183, 185, 186, 192, 205, 209, 215, 216, 217, 244, 288, 316, 346, 405, 412, 414, 524, 649, 672, 994, 995, 997, 998, 1000, 1008, 1016, 1022], "stronger": [270, 643, 652, 658, 659, 672, 673, 674, 675, 676, 678, 687], "strongest": [55, 205], "strongli": [62, 64, 113, 116, 123, 143, 147, 186, 196, 226, 245, 275, 350, 375, 392, 393, 405, 414, 658, 736, 795, 997, 998, 1027, 1041, 1048], "stroudsburg": [901, 1014], "strubel": 1045, "struct": [373, 389, 1035], "structur": [0, 2, 42, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 80, 85, 86, 87, 88, 89, 95, 113, 130, 150, 169, 183, 231, 232, 235, 240, 245, 260, 264, 275, 294, 314, 319, 322, 327, 339, 343, 353, 354, 355, 362, 370, 372, 375, 377, 380, 387, 389, 390, 393, 404, 407, 409, 410, 411, 412, 414, 415, 416, 417, 440, 441, 444, 445, 449, 450, 451, 452, 453, 456, 461, 462, 470, 471, 496, 503, 504, 508, 511, 513, 514, 521, 530, 535, 541, 544, 563, 610, 611, 612, 616, 617, 618, 689, 696, 709, 713, 830, 852, 857, 884, 896, 897, 900, 912, 913, 914, 915, 918, 947, 948, 971, 974, 998, 1000, 1001, 1004, 1006, 1007, 1011, 1014, 1017, 1020, 1021, 1022, 1032, 1033, 1035, 1036, 1038, 1042], "struggl": [374, 390, 407], "stuck": [94, 692, 998], "student": [0, 122, 269, 998, 1021, 1025], "studi": [43, 64, 93, 146, 211, 229, 272, 275, 276, 283, 350, 370, 372, 411, 416, 696, 708, 758, 759, 829, 999, 1001, 1015], "studio": [373, 1025], "study_135": 369, "study_14": 369, "study_34": 369, "study_98": 369, "study_99": 369, "stuff": 1025, "stump": [136, 414, 559, 1043], "stupp": [1038, 1039], "stupperich": 1044, "sturla": 1034, "style": [112, 146, 201, 219, 229, 273, 375, 382, 407, 415, 442, 446, 458, 700, 806, 823, 930, 931, 944, 1032, 1035, 1046], "st\u00e9fan": 376, "st\u00e9phan": 1042, "st\u00e9phane": [1041, 1042, 1046, 1047], "su": [721, 723, 724], "sub": [47, 72, 86, 88, 90, 93, 102, 129, 245, 247, 254, 320, 328, 329, 336, 339, 347, 370, 375, 377, 381, 389, 408, 414, 415, 436, 442, 443, 446, 448, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 588, 590, 591, 597, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 863, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 921, 958, 997, 1001, 1015, 1042, 1046, 1048, 1049], "sub_sampl": 536, "subclass": [132, 377, 417, 574, 966, 1037, 1040, 1045, 1049], "subclust": [407, 441], "subcluster_centers_": [77, 441], "subcluster_labels_": 441, "subcompon": [120, 412], "subdirectori": 375, "subdivid": [370, 417], "subestim": 377, "subestimator__c": 377, "subestimator__class_weight": 377, "subestimator__du": 377, "subestimator__fit_intercept": 377, "subestimator__intercept_sc": 377, "subestimator__l1_ratio": 377, "subestimator__max_it": 377, "subestimator__multi_class": 377, "subestimator__n_job": 377, "subestimator__penalti": 377, "subestimator__random_st": 377, "subestimator__solv": 377, "subestimator__tol": 377, "subestimator__verbos": 377, "subestimator__warm_start": 377, "subexpress": 52, "subfold": [2, 373, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 503, 1045], "subgraph": 404, "subhash": 1046, "subhodeep": [1032, 1033, 1034], "subi": [1041, 1042, 1047], "subject": [16, 102, 151, 260, 272, 350, 370, 375, 377, 379, 387, 389, 390, 405, 409, 411, 412, 495, 658, 659, 685, 822, 867, 923, 970, 992, 997, 1016, 1019, 1041, 1042, 1045, 1047], "subject_body_extractor": 102, "subject_body_transform": 102, "subjectbodi": 102, "subjectbodyextractor": 102, "sublinear": [412, 590, 591], "sublinear_tf": [350, 412, 415, 590, 591], "submatric": 404, "submatrix": [404, 422, 450, 452], "submiss": 375, "submit": [372, 373, 374, 377, 378, 379, 380, 383, 389, 390, 393], "submitt": 374, "submodel": 411, "submodul": [379, 993, 999, 1032], "subobject": [421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 803, 804, 814, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915], "suboptim": [411, 700, 702, 782, 789, 1004, 1040, 1048], "subpackag": [375, 379, 1036, 1041], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 83, 84, 86, 87, 88, 89, 90, 93, 95, 98, 99, 105, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 151, 152, 154, 155, 156, 163, 172, 174, 179, 181, 182, 186, 187, 189, 191, 194, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 219, 224, 225, 227, 229, 231, 232, 235, 236, 238, 239, 241, 243, 244, 246, 247, 248, 249, 254, 255, 256, 257, 259, 260, 263, 264, 265, 266, 269, 271, 272, 274, 275, 276, 278, 279, 280, 282, 283, 284, 288, 289, 291, 292, 293, 294, 297, 298, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 322, 323, 331, 333, 336, 337, 338, 339, 343, 345, 346, 347, 348, 350, 351, 352, 354, 355, 371, 382], "subplot_kw": [231, 293], "subplot_spec": 382, "subplot_titl": 140, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 83, 84, 87, 95, 97, 111, 113, 118, 122, 123, 129, 136, 137, 154, 186, 210, 211, 226, 229, 238, 246, 254, 256, 257, 260, 264, 280, 294, 302, 304, 307, 311, 320, 329, 336, 339], "subpopul": [228, 679, 997], "subproblem": 1037, "subrahmanyam": [1032, 1035], "subramaniam": [1047, 1048, 1049], "subramaniyan": 1044, "subramanyam": 1039, "subrat": 1044, "subrat93": 1044, "subsampl": [129, 145, 148, 187, 228, 265, 316, 320, 457, 559, 560, 561, 562, 563, 632, 679, 701, 803, 804, 830, 869, 881, 893, 926, 936, 993, 997, 1021, 1032, 1042, 1046, 1048, 1049, 1050], "subscrib": 1030, "subscript": [363, 1045], "subsect": [25, 363, 375], "subsequ": [46, 68, 91, 107, 123, 134, 165, 199, 213, 271, 274, 289, 291, 339, 358, 375, 377, 379, 381, 389, 403, 407, 408, 414, 417, 436, 496, 508, 553, 554, 559, 561, 562, 666, 668, 676, 803, 804, 832, 833, 836, 839, 840, 841, 842, 843, 861, 879, 883, 991, 1000, 1002, 1041, 1042, 1046, 1048, 1050], "subset": [2, 46, 57, 58, 63, 64, 68, 102, 103, 111, 112, 141, 142, 143, 144, 159, 165, 168, 187, 189, 201, 212, 226, 227, 228, 229, 241, 243, 247, 248, 263, 267, 270, 272, 278, 279, 281, 286, 314, 315, 320, 328, 332, 350, 351, 352, 358, 370, 375, 383, 387, 389, 404, 405, 407, 408, 411, 414, 415, 417, 424, 436, 448, 463, 465, 466, 468, 487, 488, 492, 493, 497, 508, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 602, 610, 629, 639, 640, 641, 642, 651, 655, 658, 666, 667, 668, 671, 674, 675, 676, 677, 678, 679, 697, 703, 704, 711, 713, 716, 718, 731, 734, 755, 757, 793, 796, 799, 802, 822, 828, 830, 832, 833, 834, 835, 839, 840, 841, 842, 843, 846, 851, 854, 861, 870, 899, 900, 904, 906, 909, 912, 914, 926, 969, 990, 997, 1001, 1002, 1012, 1014, 1016, 1017, 1035, 1040, 1041, 1043, 1045, 1050], "subset_featur": 103, "subset_label": 229, "subsidi": 186, "subspac": [127, 410, 414, 451, 515, 555, 556, 691, 695, 948, 995, 1004, 1007, 1013, 1025], "substanti": [159, 291, 295, 296, 310, 375, 850, 1007, 1036, 1039], "substitut": [398, 984, 1021, 1038], "subtl": [348, 358, 1000, 1021], "subtleti": 1027, "subtract": [175, 186, 248, 410, 412, 442, 446, 458, 534, 644, 645, 1039, 1049], "subtre": [557, 558, 559, 560, 564, 565, 912, 913, 914, 915, 1017], "subwindow": 1017, "succe": [127, 149, 197, 283], "succeed": 375, "success": [2, 83, 163, 183, 261, 273, 276, 277, 345, 358, 402, 407, 411, 412, 414, 515, 564, 579, 800, 803, 804, 821, 909, 1004, 1022, 1025, 1027, 1044], "successfulli": [43, 53, 313, 374, 379, 401, 407, 415, 1015], "successor": [449, 455, 1017, 1020], "suchak": 1045, "sudo": [373, 393], "suen": 1005, "suffer": [116, 188, 289, 309, 351, 362, 407, 414, 544, 763, 996, 997, 1001, 1004, 1041], "suffic": [90, 91, 377], "suffici": [2, 64, 88, 154, 219, 284, 339, 362, 389, 407, 416, 532, 657, 682, 683, 816, 819, 820, 1002, 1004, 1021, 1041, 1047, 1048], "suffix": [393, 827, 1001, 1042], "suganthan": 372, "sugar": [168, 372], "suggest": [111, 123, 137, 141, 186, 189, 269, 339, 362, 374, 375, 382, 389, 411, 412, 414, 468, 473, 565, 645, 829, 995, 997, 998, 1006, 1009, 1016, 1036, 1043, 1046, 1049], "suh": 1040, "suha": 1050, "suit": [58, 120, 152, 186, 211, 212, 238, 259, 321, 322, 324, 350, 363, 375, 377, 380, 381, 383, 393, 395, 401, 410, 412, 414, 449, 451, 503, 677, 841, 885, 942, 990, 993, 998, 1001, 1003, 1004, 1015, 1020, 1021, 1025, 1039, 1046], "suitabl": [138, 146, 197, 198, 204, 215, 305, 352, 369, 370, 381, 384, 401, 407, 412, 415, 451, 461, 467, 486, 505, 508, 627, 635, 839, 840, 843, 878, 879, 902, 965, 969, 995, 997, 1000, 1011, 1013, 1015, 1020, 1046, 1047], "sullivan": [1035, 1036, 1037], "sultan": 1046, "sum": [2, 30, 47, 55, 57, 63, 94, 112, 118, 123, 129, 145, 146, 164, 168, 178, 186, 195, 211, 215, 226, 229, 232, 234, 248, 263, 278, 289, 296, 299, 322, 326, 332, 343, 344, 346, 350, 351, 352, 357, 372, 381, 389, 404, 405, 407, 409, 410, 412, 413, 414, 415, 417, 430, 441, 442, 446, 448, 458, 463, 464, 481, 482, 483, 515, 520, 523, 531, 534, 536, 537, 541, 544, 545, 546, 549, 550, 552, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 590, 591, 611, 613, 623, 625, 635, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 676, 677, 678, 679, 681, 684, 690, 694, 696, 699, 709, 710, 719, 726, 741, 756, 758, 759, 763, 788, 832, 833, 837, 838, 847, 851, 855, 862, 863, 883, 884, 904, 905, 907, 910, 912, 913, 914, 915, 950, 975, 981, 986, 997, 1001, 1002, 1003, 1004, 1016, 1017, 1035, 1036, 1038, 1040, 1041, 1043, 1048, 1049], "sum_": [269, 278, 346, 404, 405, 407, 412, 413, 414, 538, 540, 547, 696, 755, 995, 997, 998, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1015, 1016, 1017], "sum_gradi": 414, "sum_h": 1006, "sum_hessian": 414, "sum_i": [321, 414, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 992, 993, 997, 999, 1001, 1006], "sum_j": [646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 997, 1001, 1006], "sum_k": [414, 549, 1017], "sum_m": 414, "sum_n": [276, 707, 1001], "sum_n_compon": [463, 863], "sum_over_featur": [1032, 1047], "sum_weight": 981, "sumit": 1046, "summar": [211, 260, 276, 278, 352, 375, 377, 392, 414, 521, 658, 694, 706, 707, 997, 998, 1001, 1007, 1027], "summari": [52, 168, 322, 357, 358, 372, 387, 561, 562, 692, 713, 788, 917, 999, 1002, 1020], "summaris": [240, 319], "summat": [1003, 1005], "summer": [0, 43, 52, 175, 1032], "sun": [43, 149, 187, 1040, 1045, 1046], "sundai": 43, "sundaramahalingam": 1049, "sung": 1043, "sunglok": 997, "sunita": 783, "sunitha": 1044, "sunmi": 1043, "super": [57, 62, 64, 377, 415, 1040], "superflu": 412, "superimpos": 412, "superior": 414, "superposit": 197, "supersed": [374, 1037], "superset": [411, 821, 1001], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 82, 87, 91, 116, 128, 139, 142, 149, 161, 172, 232, 243, 246, 256, 269, 298, 311, 320, 331, 335, 336, 339, 343, 351, 362, 370, 377, 388, 389, 405, 407, 410, 411, 412, 414, 415, 417, 436, 438, 463, 487, 503, 504, 553, 588, 590, 593, 594, 634, 676, 729, 801, 802, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 830, 853, 863, 864, 868, 878, 885, 899, 900, 901, 909, 995, 998, 1001, 1003, 1004, 1007, 1011, 1012, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1027, 1032, 1038, 1044], "supervised_learning_tut": [160, 161], "supp": 383, "suppli": [149, 387, 407, 646, 930, 931, 1004, 1025, 1036, 1038, 1040, 1045], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 80, 102, 103, 104, 133, 138, 153, 154, 164, 165, 175, 187, 212, 221, 222, 223, 229, 243, 244, 245, 251, 262, 267, 274, 276, 286, 289, 307, 309, 313, 322, 326, 328, 329, 332, 333, 335, 336, 339, 340, 341, 342, 343, 344, 346, 362, 363, 364, 369, 373, 375, 377, 379, 380, 381, 382, 384, 385, 388, 389, 390, 401, 407, 411, 412, 415, 416, 417, 436, 439, 449, 451, 452, 463, 465, 466, 468, 473, 486, 496, 512, 538, 540, 541, 544, 547, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 613, 614, 615, 617, 619, 620, 622, 623, 625, 627, 631, 632, 633, 643, 645, 657, 658, 659, 670, 671, 672, 674, 675, 676, 677, 678, 687, 690, 694, 699, 707, 713, 729, 730, 738, 743, 778, 779, 780, 783, 784, 787, 788, 800, 803, 804, 806, 814, 822, 827, 828, 836, 837, 842, 844, 845, 848, 850, 856, 864, 865, 869, 875, 877, 878, 880, 884, 892, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 936, 942, 943, 988, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1015, 1020, 1021, 1022, 1023, 1025, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "support_": [244, 345, 468, 473, 593, 594, 602, 906, 907, 908, 909, 910, 1016], "support_fract": [48, 468, 473], "support_reweight": [468, 473], "support_vector": [337, 343], "support_vector_indic": 337, "support_vectors_": [46, 49, 340, 343, 344, 906, 907, 908, 909, 910, 1016], "suppos": [245, 272, 328, 362, 363, 375, 377, 379, 381, 409, 414, 415, 416, 557, 561, 564, 658, 659, 666, 668, 674, 675, 676, 850, 904, 906, 909, 912, 914, 936, 1005, 1041, 1043, 1049], "suppress": [186, 362, 383, 692, 1004, 1039], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 83, 86, 90, 93, 100, 107, 120, 123, 130, 134, 142, 143, 151, 154, 179, 186, 187, 189, 206, 208, 210, 226, 227, 231, 232, 233, 247, 257, 263, 265, 282, 283, 307, 309, 311, 318, 320, 328, 329, 333, 345, 346, 355], "surac": 1042, "sure": [2, 63, 89, 205, 217, 245, 246, 263, 356, 358, 362, 363, 369, 373, 374, 375, 376, 377, 379, 380, 383, 387, 393, 405, 408, 415, 493, 523, 649, 930, 931, 942, 953, 986, 991, 998, 1015, 1020, 1021, 1039, 1040, 1042, 1047], "suresh": 1046, "surf": 187, "surfac": [124, 126, 128, 133, 134, 135, 136, 138, 155, 183, 220, 275, 335, 336, 353, 354, 356, 357, 414, 504, 553, 557, 564, 631, 764, 912, 918, 995, 1000, 1015, 1016, 1017, 1022], "surface_": 631, "surgan12": 1041, "surpass": [134, 343, 861, 862], "surplu": 411, "surpris": [86, 187, 373, 997, 1020, 1034], "surprisingli": [229, 370, 415], "surrend": 57, "surrog": 1025, "surround": [246, 375, 850, 1007], "survei": [186, 410], "surviv": [103, 188, 990, 1020], "surya": [1045, 1046], "suscept": 401, "susik": 1036, "suspect": 43, "suspici": 370, "sustain": 0, "sutherland": [1034, 1036, 1037, 1039, 1040, 1041, 1042], "sutiono": 1043, "suzuki": [1043, 1044], "sv": 1016, "sv_ind": 244, "sv_ratio": 244, "svc": [2, 45, 62, 64, 66, 67, 68, 102, 106, 144, 155, 161, 171, 183, 191, 203, 243, 246, 250, 262, 267, 269, 271, 274, 275, 276, 279, 280, 311, 313, 314, 318, 320, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 347, 348, 350, 362, 377, 381, 389, 405, 408, 411, 414, 433, 434, 435, 436, 467, 515, 555, 697, 698, 700, 702, 800, 817, 831, 833, 864, 901, 902, 904, 906, 907, 910, 988, 990, 996, 999, 1001, 1002, 1011, 1022, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050], "svc__c": [311, 864], "svc_disp": [251, 318, 1029], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 251, "svcsvc": [250, 267, 269, 320], "svd": [2, 70, 127, 152, 232, 351, 384, 403, 410, 419, 450, 452, 481, 482, 484, 521, 532, 533, 534, 535, 539, 540, 541, 544, 546, 549, 550, 664, 672, 673, 674, 685, 686, 687, 863, 948, 995, 1034, 1038, 1039, 1045, 1047, 1050], "svd__n_compon": 863, "svd_lapack_driv": 948, "svd_method": [57, 450, 452, 532, 1035], "svd_solver": [45, 102, 120, 127, 325, 326, 403, 412, 535, 541, 1038, 1050], "sven": [1046, 1047], "svg": [0, 395], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 102, 104, 106, 120, 132, 142, 152, 155, 158, 162, 167, 168, 172, 174, 178, 183, 192, 195, 205, 220, 221, 222, 223, 224, 238, 244, 246, 247, 250, 251, 262, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 279, 280, 284, 295, 300, 301, 304, 306, 311, 312, 318, 320, 327, 331, 332, 334, 337, 345, 346, 350, 362, 370, 377, 381, 389, 408, 411, 412, 414, 416, 433, 434, 435, 436, 494, 504, 512, 515, 541, 555, 556, 563, 567, 568, 577, 593, 594, 599, 600, 605, 631, 639, 643, 668, 676, 677, 678, 689, 697, 698, 700, 702, 713, 735, 742, 761, 800, 814, 820, 826, 827, 830, 832, 833, 850, 864, 865, 877, 879, 884, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 988, 990, 993, 996, 998, 999, 1001, 1002, 1006, 1014, 1016, 1018, 1022, 1023, 1027, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039], "svm1": 408, "svm2": 408, "svm__c": 106, "svm_weight": 164, "svm_weights_select": 164, "svmlight": [2, 368, 486, 508, 509, 1027, 1032, 1033, 1039, 1041], "svmlight_file_test": 509, "svmlight_file_train": 509, "svmsgd": 1015, "svr": [2, 46, 49, 183, 237, 318, 334, 362, 395, 433, 434, 435, 556, 567, 568, 593, 594, 643, 678, 800, 806, 905, 907, 909, 994, 1022, 1032, 1034, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "svr_fit": 244, "svr_lin": 345, "svr_poli": 345, "svr_predict": 244, "svr_rbf": 345, "sw": 289, "sw_test": [61, 319], "sw_train": [61, 319], "swap": [2, 407, 412, 716, 736, 979, 980, 1032], "swapnil": 1046, "swart": 55, "sweep": 860, "swier": [1043, 1044], "swiss": [2, 100, 183, 230, 231, 236, 407, 530, 692, 693, 1022, 1046], "switch": [361, 678, 704, 717, 737, 755, 757, 795, 844, 845, 947, 948, 1001, 1004, 1027, 1032], "swpeas": 1045, "swu": 1036, "sy": [47, 51, 57, 219, 242, 289, 332, 352, 370, 387, 617], "syd": 1047, "sydnei": 0, "syhw": [1033, 1034], "sylvain": [0, 365, 1036, 1041, 1042, 1043, 1044, 1045, 1046], "sylvainlan": [1040, 1041, 1042, 1043, 1044], "symbol": [51, 352, 363, 377, 381, 409, 415, 499, 582, 588, 589, 591, 916, 918, 1020], "symbol_dict": 51, "symlink": 379, "symlognorm": [193, 197], "symmetr": [2, 79, 146, 179, 189, 213, 389, 405, 407, 451, 461, 462, 473, 519, 527, 529, 690, 694, 695, 704, 705, 715, 716, 717, 722, 724, 728, 736, 737, 755, 757, 763, 785, 795, 797, 798, 986, 990, 997, 1001, 1004, 1048], "symmetri": [168, 372, 699, 877, 880, 892, 999], "symmetric_arrai": 986, "symposium": [168, 372, 407, 459], "symptomat": 263, "synchron": [375, 415], "syndrom": 369, "synonym": [389, 846, 847, 848, 854, 855, 856], "synonymi": 412, "syntax": [363, 375, 380, 383, 408, 467, 863, 864, 902, 990, 1043, 1045], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 82, 141, 146, 152, 170, 175, 177, 187, 202, 204, 213, 228, 304, 311, 346, 358, 362, 368, 378, 390, 407, 409, 416, 658, 659, 904, 905, 911, 995, 1038], "synthetic_feature_weight": [658, 659], "syonekura": 1040, "system": [44, 125, 197, 269, 276, 326, 358, 362, 363, 364, 370, 372, 375, 376, 377, 378, 383, 387, 393, 401, 407, 412, 414, 418, 443, 470, 471, 477, 535, 539, 543, 550, 639, 645, 650, 651, 654, 655, 656, 682, 683, 726, 756, 769, 797, 853, 899, 900, 997, 1001, 1004, 1013, 1020, 1021, 1025, 1032, 1040, 1041], "systemat": [43, 149, 269, 712, 728, 920, 922, 1001, 1047], "sysuresh": 1046, "szabo": [1034, 1035], "szepieniec": 1038, "szlam": [412, 947, 948], "szpak": [1039, 1042], "szyma\u0144ski": [1040, 1041], "s\u00e1nchez": 1044, "s\u00e3o": 1050, "s\u00e4ger": [1035, 1038], "s\u00e9bastien": [1025, 1038, 1040], "s\u00f6nke": 1042, "s\u00f8ren": 1049, "s\u0142apek": 1043, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 85, 87, 91, 102, 104, 109, 110, 111, 113, 115, 118, 121, 122, 127, 129, 130, 134, 137, 138, 145, 146, 147, 148, 149, 153, 154, 168, 171, 173, 174, 175, 178, 179, 183, 186, 187, 188, 189, 193, 195, 197, 206, 209, 210, 211, 212, 229, 230, 232, 233, 234, 235, 245, 246, 255, 258, 260, 263, 268, 269, 282, 283, 288, 289, 302, 306, 318, 321, 322, 324, 328, 329, 331, 335, 336, 339, 340, 344, 350, 351, 352, 356, 357, 358, 362, 363, 369, 370, 372, 375, 377, 379, 381, 383, 388, 389, 393, 398, 401, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 420, 424, 427, 430, 432, 436, 446, 447, 449, 455, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 495, 496, 513, 514, 515, 519, 520, 525, 530, 532, 534, 541, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 590, 591, 594, 607, 608, 610, 611, 627, 628, 630, 631, 632, 633, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 695, 696, 704, 710, 716, 717, 726, 736, 737, 755, 756, 757, 767, 788, 789, 794, 795, 799, 800, 803, 804, 814, 822, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 860, 861, 862, 870, 873, 874, 875, 877, 878, 884, 885, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 923, 948, 949, 964, 990, 993, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1015, 1016, 1017, 1022, 1026, 1027, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 80, 83, 85, 91, 95, 97, 123, 197, 198, 226, 227, 228, 233, 236, 238, 242, 244, 270, 325, 350, 351, 352, 676, 677, 678], "t1": [79, 80, 95, 226, 233, 236, 238], "t15h": 1039, "t_": [666, 667, 668, 676, 677, 678, 861, 862, 1015], "t_0": 1015, "t_batch": 97, "t_i": 1003, "t_k": [414, 1001, 1017], "t_m": 1017, "t_mini_batch": [77, 97], "t_p": 276, "t_post": 269, "t_sne": [231, 1040], "t_stat": 269, "t_stat_uncorrect": 269, "t_t": 1017, "taa": 178, "taac": 178, "tab": [46, 48, 70, 86, 111, 134, 149, 151, 154, 170, 175, 177, 199, 201, 208, 263, 319, 325, 408, 1039], "tab10": [243, 259], "tab20b": 43, "tabea": [1047, 1048], "tabibian": 1038, "tabl": [91, 229, 269, 375, 376, 384, 407, 415, 582, 658, 680, 800, 814, 841, 965, 997, 1001, 1002, 1007, 1020, 1033], "tabular": [43, 52, 187, 377, 414, 1009, 1020], "tacit": 389, "tacitli": 1034, "tackl": [147, 269, 363, 375, 407, 841, 1003, 1025], "tadej": [1033, 1034], "tae": 1044, "taehoon": [1039, 1040], "taemin": 997, "tag": [2, 47, 82, 103, 238, 330, 369, 374, 378, 379, 383, 387, 389, 403, 415, 424, 430, 496, 832, 920, 921, 922, 924, 925, 937, 953, 984, 989, 1021, 1024, 1037, 1041, 1042, 1043, 1046, 1047, 1048, 1049], "tahar": 1039, "tahiri": 1044, "taifi": 1038, "tail": [52, 146, 182, 186, 211, 213, 269, 309, 521, 524, 997], "tail_strength": [326, 521, 524], "takanori": 1040, "take": [2, 44, 47, 52, 58, 66, 80, 86, 88, 90, 99, 107, 111, 118, 120, 134, 142, 170, 172, 175, 179, 186, 191, 215, 219, 220, 235, 245, 256, 257, 263, 264, 270, 274, 278, 279, 288, 289, 292, 295, 296, 297, 299, 300, 309, 322, 326, 331, 335, 336, 339, 348, 351, 352, 355, 362, 363, 364, 369, 370, 373, 375, 377, 380, 381, 382, 383, 387, 389, 390, 398, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 436, 442, 445, 446, 448, 449, 451, 456, 457, 458, 460, 462, 468, 519, 533, 538, 539, 540, 546, 547, 581, 592, 595, 596, 598, 599, 600, 610, 611, 616, 620, 621, 624, 632, 643, 649, 671, 673, 674, 675, 676, 679, 691, 692, 699, 705, 707, 709, 719, 729, 730, 738, 743, 756, 771, 774, 778, 779, 780, 781, 783, 784, 787, 788, 800, 801, 805, 806, 814, 818, 828, 846, 847, 848, 850, 852, 853, 854, 855, 856, 868, 878, 899, 900, 904, 905, 906, 907, 908, 909, 910, 934, 970, 990, 993, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1011, 1016, 1017, 1025, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "takeawai": 288, "taken": [37, 43, 46, 67, 77, 86, 88, 148, 168, 175, 186, 242, 243, 257, 275, 286, 311, 370, 372, 374, 375, 379, 389, 407, 411, 415, 419, 439, 533, 561, 562, 583, 584, 646, 647, 650, 652, 653, 654, 658, 659, 660, 661, 662, 663, 677, 679, 681, 684, 695, 877, 878, 898, 901, 907, 908, 959, 1001, 1003, 1011, 1013, 1038, 1041, 1044, 1045], "takeshi": [1040, 1045, 1046, 1047], "takeuchi": 370, "takingitcasu": [1040, 1041], "talbot": 274, "talgatomarov": 1043, "talk": [57, 102, 270, 350, 351, 352, 370, 389, 401, 1025, 1027], "talli": 413, "tallott": 1040, "talwalkar": 990, "tamara": [370, 1049], "tamer": 1047, "tami": 91, "tamir": [1043, 1046], "tamirlan1": 1043, "tamper": 47, "tampermonkei": 383, "tan": [861, 862, 1005, 1039], "tandfonlin": 407, "tang": [372, 1042, 1043, 1044], "tangent": [231, 343, 689, 693, 999, 1026, 1027], "tanh": [343, 777, 861, 862, 999, 1016], "tanjina": 1049, "tann": [1040, 1045], "tao": [1048, 1049], "tar": [47, 379], "taranjeet": 1038, "tarashanski": 1049, "tarbal": [379, 1047], "tarcusx": 1040, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 85, 101, 103, 105, 106, 116, 124, 126, 128, 135, 142, 143, 144, 146, 147, 149, 151, 153, 154, 155, 157, 161, 163, 166, 168, 170, 172, 175, 176, 182, 183, 185, 186, 187, 188, 193, 197, 205, 208, 211, 213, 215, 216, 219, 220, 232, 239, 241, 242, 243, 244, 247, 248, 249, 256, 262, 263, 265, 267, 270, 272, 274, 275, 278, 279, 283, 286, 288, 289, 292, 297, 300, 301, 305, 308, 309, 319, 320, 322, 324, 328, 329, 332, 333, 335, 336, 339, 343, 345, 350, 351, 355, 357, 358, 362, 364, 367, 368, 369, 370, 371, 372, 375, 377, 379, 380, 383, 384, 388, 392, 401, 407, 410, 411, 414, 417, 431, 436, 437, 438, 441, 444, 463, 464, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 508, 510, 520, 524, 531, 532, 534, 536, 537, 539, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 573, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 697, 698, 700, 701, 702, 707, 708, 709, 712, 713, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 735, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 853, 854, 855, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 888, 893, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 923, 924, 930, 962, 963, 964, 989, 992, 993, 994, 997, 998, 1001, 1005, 1008, 1009, 1015, 1016, 1017, 1021, 1022, 1024, 1025, 1027, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "target_class": 314, "target_column": [488, 489, 496], "target_encod": 316, "target_filenam": [501, 505], "target_gener": 176, "target_idx": 632, "target_mean_": [885, 1011], "target_nam": [45, 57, 66, 85, 124, 126, 128, 185, 220, 232, 256, 262, 270, 278, 279, 292, 315, 332, 350, 355, 368, 370, 487, 488, 490, 492, 493, 494, 496, 497, 500, 502, 503, 504, 505, 510, 713, 1001, 1017, 1042], "target_opset": 401, "target_tag": [377, 923, 937], "target_test": [263, 509], "target_train": [263, 509], "target_typ": [315, 885, 934, 963, 1049], "target_type_": 885, "targetencod": [2, 315, 316, 389, 877, 878, 991, 1011, 1020, 1048, 1049], "targetencodertargetencod": 315, "targets_test": 243, "targets_train": 243, "targettag": [2, 923], "tari": 91, "tashai": [1040, 1041], "task": [2, 38, 43, 46, 123, 141, 147, 149, 167, 178, 183, 192, 197, 198, 201, 210, 211, 227, 231, 248, 263, 266, 283, 288, 343, 352, 362, 364, 370, 372, 374, 375, 380, 381, 384, 387, 388, 389, 412, 414, 415, 416, 417, 447, 460, 493, 505, 515, 592, 595, 596, 598, 599, 600, 604, 605, 606, 609, 632, 633, 646, 647, 652, 653, 660, 661, 662, 663, 674, 681, 684, 727, 729, 730, 754, 782, 784, 787, 789, 801, 805, 818, 824, 966, 967, 998, 1001, 1002, 1003, 1004, 1012, 1014, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1032, 1037, 1041, 1047], "tast": 1032, "tata": 1049, "tau": 1011, "tau_0": 536, "tavenard": 1044, "tax": 0, "taxonom": 372, "taylor": [414, 1040, 1042, 1043, 1046], "tb": 383, "tc": [168, 372, 390], "tcg": 178, "tch": [168, 372], "tcompl": 91, "tcpdump": 370, "tda": 1020, "teach": 375, "teacher": 102, "teal": [212, 221, 276], "team": [370, 378, 387, 389, 390, 1020, 1025, 1032], "teas": 186, "tech": [51, 372, 842], "technic": [178, 186, 212, 232, 322, 370, 372, 375, 389, 414, 652, 664, 685, 686, 899, 990, 997, 998, 1004], "technion": [664, 685, 686, 997], "techniqu": [11, 26, 51, 56, 102, 104, 122, 126, 130, 135, 144, 160, 167, 168, 182, 183, 185, 208, 219, 233, 235, 274, 286, 293, 321, 329, 343, 354, 364, 372, 387, 389, 401, 405, 407, 411, 412, 413, 414, 415, 416, 446, 447, 448, 449, 534, 554, 677, 689, 690, 693, 694, 726, 756, 993, 997, 998, 1000, 1001, 1004, 1007, 1009, 1013, 1015, 1017, 1021, 1025, 1045], "technolog": 372, "technologi": [168, 372, 407, 1020, 1025], "technometr": [372, 409, 468, 473, 1007], "tediou": [154, 263], "teen": 1011, "teevan": [841, 1003], "teh": [860, 1006], "tejesh95": 1036, "telecom": 1025, "telenczuk": [168, 1041, 1044, 1045, 1047], "tell": [170, 186, 187, 245, 269, 339, 344, 363, 370, 407, 415, 563, 579, 990, 995, 1008], "temp": [43, 187], "temp_fold": 966, "temperatur": [187, 415, 1008], "tempfil": [87, 291, 318, 408, 1004], "templat": [375, 379, 380, 389, 390, 557, 558, 563, 564, 565, 566, 1020], "templateclassifi": 377, "tempor": [52, 149, 197, 1020, 1021], "temporari": [87, 102, 104, 362, 467, 687, 781, 902, 1004, 1035, 1036, 1039, 1045, 1046], "temporarili": [407, 1037], "temporarydirectori": [291, 318], "tempt": 186, "temptat": [358, 375], "ten": [54, 57, 134, 140, 149, 168, 232, 260, 370, 372, 414, 520, 909, 1041], "tenavi": 1046, "tend": [43, 51, 64, 72, 74, 78, 85, 88, 90, 166, 168, 186, 187, 201, 211, 216, 229, 248, 254, 257, 266, 270, 282, 288, 307, 343, 352, 362, 364, 375, 377, 389, 405, 407, 409, 412, 414, 416, 436, 447, 653, 850, 881, 893, 948, 997, 998, 1004, 1017], "tendenc": [149, 236, 356, 997, 998, 1000, 1003, 1006], "tenenbaum": [688, 998], "tenenhau": 372, "tensor": [2, 191, 367, 403, 412, 538, 540, 547, 639, 640, 641, 1027, 1044, 1050], "tensorflow": [45, 387], "tensorsketch": 993, "tent": 381, "tenur": 1025, "teon": 1044, "terenc": [1044, 1045], "term": [2, 43, 53, 54, 62, 68, 91, 125, 137, 140, 143, 146, 175, 185, 197, 199, 200, 201, 211, 213, 215, 225, 228, 229, 248, 263, 267, 271, 289, 304, 321, 343, 346, 350, 352, 364, 375, 377, 387, 405, 407, 409, 411, 412, 414, 442, 446, 448, 451, 458, 461, 524, 535, 538, 540, 544, 547, 549, 588, 589, 590, 591, 604, 607, 608, 632, 633, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 672, 673, 674, 675, 676, 678, 680, 687, 695, 730, 738, 783, 784, 787, 861, 862, 879, 883, 886, 904, 905, 906, 907, 908, 909, 910, 990, 992, 993, 995, 996, 997, 998, 1001, 1002, 1003, 1005, 1006, 1011, 1015, 1016, 1040, 1046, 1047, 1048], "term1": 415, "term2": 415, "term3": 415, "termin": [363, 380, 381, 383, 393, 407, 421, 447, 460, 553, 554, 558, 559, 560, 563, 565, 666, 667, 668, 676, 678, 861, 862, 913, 915, 1007, 1017], "terminalipythonapp": 381, "terminalpdb": 383, "termination_condition_": 901, "terminologi": [389, 1040], "terraza": 1044, "terri": 1036, "terrycojon": 1036, "tesson": 407, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 102, 103, 115, 125, 134, 137, 139, 140, 141, 145, 146, 147, 148, 149, 159, 161, 162, 164, 167, 170, 171, 183, 185, 186, 187, 188, 189, 191, 197, 201, 205, 207, 208, 211, 212, 213, 215, 216, 218, 219, 226, 227, 229, 235, 239, 244, 245, 247, 256, 261, 262, 263, 264, 267, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 281, 283, 288, 292, 297, 298, 304, 306, 311, 314, 315, 316, 325, 332, 339, 346, 352, 356, 358, 362, 363, 369, 370, 372, 378, 379, 380, 381, 387, 388, 389, 392, 393, 400, 402, 403, 405, 406, 408, 409, 412, 414, 415, 416, 417, 424, 426, 427, 430, 433, 434, 435, 436, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 487, 488, 493, 497, 498, 502, 504, 524, 531, 537, 539, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 592, 594, 595, 596, 598, 599, 600, 602, 604, 605, 606, 608, 609, 610, 611, 627, 628, 630, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 712, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 851, 854, 855, 861, 862, 864, 889, 890, 892, 893, 894, 895, 899, 900, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 920, 921, 922, 923, 929, 940, 942, 943, 996, 997, 1000, 1001, 1004, 1005, 1009, 1011, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1027, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "test_": [52, 154, 411], "test_0": 43, "test_4": 43, "test_accuraci": [256, 270, 283], "test_auc": 827, "test_ax": 125, "test_balanced_accuraci": 283, "test_best_it": 145, "test_check_estim": 943, "test_color": 145, "test_common": [375, 383], "test_dataset": 369, "test_devi": 148, "test_enable_hist_gradient_boost": 379, "test_fn": 1001, "test_fold": [411, 813], "test_fract": 1032, "test_idx": [52, 389], "test_import": 188, "test_index": [256, 331, 411, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "test_indx": 411, "test_lin": 145, "test_logist": [375, 383], "test_ms": 325, "test_neg_mean_absolute_error": [43, 213], "test_neg_mean_squared_error": [213, 827], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 272, "test_positive_likelihood_ratio": 272, "test_prec_macro": 411, "test_precision_macro": 411, "test_r2": 827, "test_rec_macro": 411, "test_recall_macro": 411, "test_requiring_mpl_fixtur": 375, "test_result": 188, "test_scor": [143, 145, 147, 149, 219, 268, 271, 282, 286, 315, 346, 354, 388, 411, 806, 823, 827, 828, 831], "test_scores_mean": 282, "test_scores_nb": 271, "test_scores_svm": 271, "test_set": 405, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 103, 139, 144, 145, 147, 148, 149, 153, 185, 191, 197, 207, 208, 211, 218, 219, 226, 227, 263, 266, 267, 271, 276, 278, 282, 288, 297, 298, 304, 306, 307, 311, 313, 314, 320, 339, 346, 358, 380, 411, 698, 802, 817, 820, 821, 830, 832, 853, 991, 1003, 1004, 1032, 1033, 1038, 1039, 1044], "test_sklearn_compatible_estim": [318, 943], "test_sparsifi": 383, "test_stat": 47, "test_tim": [244, 350], "test_tp": 1001, "test_val": 376, "test_your_test_nam": 363, "tested_neg": 283, "tested_posit": 283, "testpypi": 379, "teunp": 1046, "texa": [51, 102], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 86, 90, 91, 93, 94, 95, 97, 102, 111, 112, 140, 144, 166, 189, 194, 206, 207, 238, 242, 249, 250, 254, 256, 261, 268, 269, 275, 276, 280, 294, 297, 299, 304, 311, 321, 327, 329, 345, 354, 362, 364, 367, 368, 369, 375, 380, 387, 389, 395, 405, 407, 408, 410, 411, 412, 414, 417, 446, 448, 463, 467, 486, 487, 488, 499, 503, 508, 521, 536, 544, 564, 588, 589, 590, 591, 615, 625, 652, 658, 666, 668, 674, 676, 697, 703, 705, 707, 713, 717, 729, 730, 737, 793, 795, 800, 814, 830, 839, 841, 843, 846, 851, 864, 865, 867, 868, 876, 900, 901, 902, 904, 916, 917, 918, 945, 990, 993, 997, 999, 1001, 1002, 1003, 1005, 1008, 1011, 1013, 1015, 1016, 1019, 1021, 1022, 1025, 1027, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "text1": 415, "text2": 415, "text2d": 235, "text3": 415, "text_": 697, "text_kw": [697, 1047], "text_preprocess": 463, "text_stat": 102, "text_stats_transform": 102, "textbook": [415, 590], "textcoord": [48, 191], "textrm": 1016, "texttt": 1001, "textual": [412, 421, 1017, 1041], "textur": [168, 372, 758, 759, 999], "tf": [2, 54, 57, 242, 350, 351, 352, 370, 412, 521, 544, 588, 589, 590, 591, 843, 851, 876, 990, 999, 1003, 1011, 1020], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 590, "tfidf": [54, 102, 332, 415, 591], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 332, 351, 352, 415, 488, 591, 1039, 1040, 1046, 1048, 1049, 1050], "tfidfvector": [2, 54, 57, 102, 270, 350, 370, 412, 415, 488, 588, 589, 590, 1032, 1034, 1040, 1041, 1042, 1045, 1046, 1050], "tfidfvectorizertfidfvector": 270, "tfifi": 1045, "tfrac": 417, "tgct": 178, "tgz": 45, "th": [134, 321, 357, 388, 407, 411, 414, 422, 440, 444, 445, 450, 452, 458, 462, 471, 550, 557, 558, 559, 560, 561, 562, 564, 565, 566, 593, 594, 632, 648, 649, 669, 671, 680, 696, 718, 780, 821, 885, 935, 991, 997, 1001, 1005, 1008, 1015, 1016, 1047], "th0rwa": [1042, 1043], "thakur": [1035, 1036], "thaler": 1038, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 81, 86, 88, 104, 107, 111, 113, 116, 118, 120, 123, 125, 127, 134, 136, 137, 139, 140, 141, 142, 143, 146, 149, 166, 168, 170, 176, 181, 186, 187, 188, 191, 193, 197, 198, 201, 204, 211, 213, 217, 227, 228, 229, 235, 238, 244, 245, 246, 248, 255, 263, 266, 267, 269, 270, 271, 272, 275, 278, 283, 286, 288, 289, 295, 296, 307, 309, 313, 314, 315, 316, 320, 322, 324, 326, 329, 343, 350, 351, 352, 358, 362, 363, 364, 369, 370, 371, 373, 374, 375, 377, 380, 381, 383, 389, 390, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 453, 456, 459, 462, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 493, 494, 496, 509, 514, 515, 523, 531, 534, 535, 536, 537, 538, 540, 541, 542, 544, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 630, 634, 640, 642, 643, 644, 646, 647, 652, 653, 655, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 682, 687, 692, 694, 696, 704, 705, 712, 720, 721, 722, 723, 724, 735, 736, 739, 764, 779, 780, 781, 783, 785, 795, 797, 798, 800, 803, 804, 810, 814, 819, 821, 822, 825, 826, 827, 828, 829, 832, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 858, 861, 862, 867, 877, 878, 879, 881, 882, 884, 887, 893, 894, 898, 901, 904, 905, 906, 909, 910, 912, 913, 914, 915, 916, 921, 936, 948, 950, 951, 957, 963, 969, 971, 974, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1020, 1021, 1024, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "thanh": 1050, "thank": [0, 43, 55, 62, 88, 116, 188, 191, 211, 278, 350, 351, 374, 383, 1020, 1025, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tharak": 1049, "thebabush": [1049, 1050], "thedevpanda": 1047, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 83, 90, 113, 122, 132, 135, 141, 143, 145, 147, 149, 150, 164, 167, 168, 170, 171, 175, 186, 187, 197, 198, 201, 207, 211, 212, 229, 232, 235, 238, 244, 245, 248, 262, 266, 269, 270, 272, 278, 283, 286, 289, 291, 305, 309, 314, 320, 322, 343, 350, 351, 356, 358, 362, 363, 364, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 383, 384, 387, 388, 389, 390, 398, 401, 404, 406, 407, 408, 409, 410, 412, 414, 416, 417, 419, 439, 441, 445, 452, 453, 466, 496, 508, 509, 533, 535, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 597, 610, 619, 629, 643, 646, 647, 652, 658, 659, 660, 661, 662, 670, 672, 676, 678, 681, 687, 762, 763, 765, 768, 774, 789, 800, 814, 833, 839, 840, 841, 842, 843, 861, 864, 866, 872, 883, 884, 906, 909, 912, 913, 914, 915, 919, 990, 991, 993, 995, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1025, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048], "theil": [2, 150, 183, 192, 214, 217, 309, 649, 657, 671, 678, 679, 1022], "theilsen": 217, "theilsenregressor": [2, 217, 228, 649, 671, 678, 997, 1036, 1044, 1046], "theirs": 350, "them": [16, 43, 44, 47, 68, 74, 75, 82, 86, 88, 89, 93, 98, 99, 102, 103, 116, 120, 122, 125, 135, 150, 163, 168, 170, 181, 182, 186, 187, 188, 191, 193, 197, 200, 207, 212, 213, 215, 229, 242, 245, 248, 249, 263, 267, 269, 270, 272, 278, 282, 286, 291, 309, 314, 316, 321, 332, 339, 352, 357, 362, 364, 370, 375, 376, 377, 378, 379, 383, 387, 389, 390, 392, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 417, 443, 446, 448, 449, 456, 463, 466, 493, 494, 508, 567, 568, 569, 570, 607, 608, 616, 620, 621, 624, 632, 639, 664, 692, 768, 771, 774, 778, 779, 780, 781, 789, 800, 814, 821, 829, 864, 868, 873, 874, 878, 882, 884, 885, 894, 895, 901, 912, 913, 942, 943, 957, 966, 990, 991, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1011, 1016, 1017, 1019, 1020, 1024, 1025, 1032, 1033, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "themat": 389, "theme": [370, 375, 393, 400, 1032], "themrmax": [1038, 1039], "themselv": [64, 186, 309, 371, 377, 383, 389, 398, 404, 407, 414, 415, 417, 445, 615, 792, 1017, 1042], "theodor": 1037, "theofilo": 1039, "theoptip": [1042, 1043], "theorem": [32, 170, 346, 1003], "theoret": [37, 72, 90, 170, 263, 407, 414, 553, 554, 639, 704, 726, 756, 904, 990, 997, 998, 1000, 1001, 1003, 1013, 1015, 1016, 1025], "theori": [8, 143, 244, 259, 346, 372, 407, 411, 414, 690, 694, 726, 756, 896, 897, 948, 990, 997, 998, 1000, 1001, 1002, 1016, 1017], "theotheo": 1042, "thereaft": [186, 193], "therebi": [43, 186, 411, 414, 993, 1042], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 85, 86, 103, 104, 107, 111, 116, 125, 129, 134, 137, 139, 146, 149, 152, 154, 167, 185, 188, 204, 208, 211, 215, 227, 228, 254, 259, 260, 263, 270, 272, 282, 283, 286, 288, 292, 306, 309, 314, 328, 339, 346, 347, 350, 351, 357, 362, 369, 373, 377, 380, 387, 398, 401, 403, 407, 408, 409, 411, 412, 414, 415, 436, 535, 541, 549, 551, 553, 554, 559, 560, 564, 565, 604, 606, 658, 659, 665, 668, 671, 676, 678, 679, 701, 712, 735, 757, 797, 864, 865, 877, 881, 885, 893, 920, 991, 995, 997, 998, 1001, 1003, 1004, 1005, 1006, 1009, 1011, 1016, 1017, 1021, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "therein": 668, "thereof": 389, "theriley106": 1040, "thesi": [0, 372, 407, 414], "theta": [171, 172, 174, 176, 178, 179, 246, 412, 417, 523, 536, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 692, 1003, 1017], "theta0": 171, "theta1": 171, "theta_": [842, 1003], "theta_c": [246, 523], "theta_d": 412, "theta_i": 1003, "theta_l": 417, "theta_opt": [610, 611], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 393, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 481, 482, 483, 484, 486, 488, 489, 493, 494, 496, 497, 498, 499, 501, 502, 503, 505, 508, 509, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 707, 709, 711, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 736, 737, 738, 739, 740, 741, 743, 748, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 768, 769, 774, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 921, 923, 924, 925, 926, 930, 931, 936, 937, 938, 940, 942, 943, 948, 950, 953, 956, 957, 958, 959, 960, 961, 963, 966, 967, 970, 971, 974, 975, 984, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "thibault": 1041, "thibaut": 1046, "thibsej": 1041, "thick": [93, 299, 1004], "thierno": 1042, "thierri": [0, 1025, 1038, 1039, 1046], "thij": [1044, 1047, 1048], "thin": [233, 620], "thing": [48, 70, 232, 264, 350, 363, 364, 370, 374, 375, 377, 387, 390, 407, 409, 415, 559, 560, 997, 1011, 1025, 1038], "think": [44, 72, 186, 187, 350, 351, 375, 383, 413, 1000, 1021, 1025], "thinner": 100, "third": [70, 142, 147, 163, 168, 178, 229, 238, 260, 286, 294, 311, 324, 363, 370, 374, 377, 387, 390, 401, 415, 534, 588, 589, 590, 591, 802, 803, 804, 809, 846, 847, 848, 850, 852, 882, 894, 990, 1012, 1032, 1043, 1048, 1049], "thirion": [0, 396, 1032, 1038, 1039, 1045], "thirteen": 372, "thirti": 1019, "thiruvenkadam": 1046, "this_centroid": 77, "this_cov": 113, "this_cv": 264, "this_di": 51, "this_dx": 51, "this_i": [61, 217], "this_max_it": 226, "this_p": 63, "this_prec": 113, "this_scor": 342, "this_sw": 61, "this_x": [61, 209, 217], "thoma": [0, 127, 363, 365, 390, 396, 900, 997, 1011, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "thomas9292": 1044, "thomaz": 1043, "thomo": 91, "thompson": [1035, 1047, 1048], "thorben": 1044, "thorough": 1025, "thoroughli": 1006, "thorsten": 1025, "those": [43, 46, 51, 55, 57, 88, 93, 103, 135, 146, 149, 166, 168, 185, 186, 187, 188, 189, 208, 211, 213, 215, 229, 236, 242, 245, 247, 248, 260, 262, 263, 269, 272, 275, 286, 305, 309, 314, 326, 336, 339, 350, 351, 352, 362, 363, 369, 375, 377, 379, 380, 381, 382, 387, 389, 390, 393, 404, 405, 406, 407, 411, 412, 414, 415, 417, 447, 449, 460, 463, 467, 494, 495, 496, 503, 557, 558, 564, 565, 569, 570, 581, 692, 697, 712, 718, 736, 800, 803, 804, 812, 814, 821, 846, 847, 848, 850, 852, 853, 854, 855, 856, 904, 905, 906, 909, 912, 913, 914, 915, 960, 990, 993, 997, 1000, 1001, 1003, 1004, 1005, 1008, 1011, 1017, 1019, 1020, 1025, 1032, 1035, 1038, 1039, 1040, 1045, 1046, 1047, 1048, 1049, 1050], "though": [88, 140, 168, 191, 193, 248, 275, 294, 311, 313, 351, 352, 358, 362, 369, 372, 375, 379, 388, 389, 407, 412, 413, 414, 415, 416, 699, 807, 809, 904, 990, 991, 993, 998, 1001, 1004, 1009, 1011, 1015, 1040], "thought": [231, 294, 389, 407, 445, 998, 1002], "thoui": [0, 397, 1032], "thousand": [77, 140, 149, 242, 244, 313, 351, 370, 407, 414, 861, 862, 909, 998, 1041, 1043], "thread": [289, 319, 322, 373, 375, 387, 389, 407, 414, 563, 836, 837, 966, 967, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049], "threadpoolctl": [41, 363, 373, 393, 400], "threadsaf": 1045, "three": [43, 46, 63, 70, 75, 76, 80, 88, 91, 109, 126, 134, 139, 141, 143, 144, 145, 155, 156, 157, 165, 168, 178, 186, 197, 204, 211, 213, 220, 222, 244, 245, 254, 257, 288, 315, 316, 319, 363, 368, 371, 372, 379, 393, 401, 404, 407, 411, 412, 413, 415, 450, 461, 498, 709, 950, 994, 996, 997, 998, 1001, 1004, 1011, 1015, 1016, 1019, 1032], "three_d_arrai": 921, "thresh": 1036, "threshold": [2, 50, 62, 77, 98, 118, 123, 129, 168, 183, 187, 189, 207, 239, 241, 261, 266, 267, 268, 273, 276, 288, 324, 325, 327, 355, 357, 389, 402, 407, 412, 414, 416, 440, 441, 444, 445, 468, 496, 500, 508, 509, 531, 537, 542, 548, 549, 550, 551, 561, 563, 588, 591, 593, 597, 602, 603, 644, 658, 667, 671, 676, 678, 692, 698, 700, 702, 703, 706, 707, 718, 720, 726, 727, 739, 740, 742, 756, 782, 784, 787, 788, 789, 794, 797, 798, 799, 800, 819, 822, 830, 839, 850, 851, 865, 867, 869, 871, 884, 887, 899, 900, 901, 902, 909, 916, 918, 974, 997, 1001, 1004, 1005, 1007, 1011, 1014, 1016, 1017, 1021, 1022, 1027, 1032, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050], "threshold_": [597, 1039], "threshold_lambda": 644, "threshold_sign": 357, "thriller": [415, 875], "thrive": [0, 375], "throat": [50, 302, 370, 498], "through": [0, 2, 46, 52, 70, 139, 168, 178, 186, 215, 231, 243, 264, 269, 272, 294, 313, 314, 337, 344, 352, 357, 372, 375, 377, 382, 384, 387, 389, 390, 393, 398, 406, 407, 410, 412, 414, 416, 417, 424, 430, 445, 463, 466, 471, 535, 541, 557, 558, 561, 564, 565, 566, 581, 593, 594, 597, 647, 651, 653, 655, 658, 659, 661, 663, 665, 668, 676, 677, 688, 691, 720, 806, 823, 880, 892, 896, 897, 912, 913, 914, 915, 955, 958, 990, 991, 998, 1001, 1003, 1004, 1005, 1007, 1009, 1011, 1015, 1016, 1017, 1025, 1032, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "throughout": [324, 358, 389, 627, 801, 861, 862, 1035, 1040], "throughput": [361, 1020, 1027, 1035], "throw": [2, 306, 384, 929, 1036, 1039, 1040, 1041, 1042, 1046], "thrown": [711, 1041, 1042], "thu": [43, 44, 61, 62, 63, 64, 75, 86, 88, 93, 109, 113, 123, 125, 137, 139, 140, 143, 149, 164, 170, 175, 176, 187, 197, 199, 201, 204, 211, 213, 229, 238, 244, 249, 256, 263, 267, 269, 274, 275, 276, 282, 283, 292, 316, 318, 321, 354, 358, 362, 363, 370, 377, 381, 387, 389, 398, 405, 406, 407, 411, 412, 414, 415, 417, 418, 436, 438, 462, 515, 527, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 603, 606, 610, 622, 627, 632, 633, 643, 645, 658, 677, 705, 718, 725, 746, 788, 795, 800, 802, 807, 809, 814, 821, 835, 838, 873, 904, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1021, 1025, 1032, 1034, 1038, 1040, 1041, 1042, 1044, 1048], "thuan": 1043, "thukarama": 1047, "thumb": [13, 140, 191, 362, 375, 376, 387, 407, 658, 659, 666, 667, 668, 676, 677, 678, 904, 1001], "thumbnail": 1032, "th\u00e9ophil": 1048, "ti": [102, 211, 256, 259, 267, 347, 362, 383, 405, 407, 599, 600, 635, 720, 726, 756, 797, 798, 906, 909, 912, 1000, 1001, 1016, 1033, 1035, 1036, 1040, 1042, 1046, 1047, 1048], "tiago": [1033, 1037], "tialo": [1049, 1050], "tian": [407, 441, 1037, 1038, 1039], "tianqi": 414, "tiao": [1037, 1038], "tib": [682, 683], "tibshirani": [137, 138, 148, 168, 199, 268, 372, 411, 414, 520, 559, 560, 628, 656, 721, 723, 724, 834, 851, 912, 913, 991, 995, 997, 1002, 1008, 1017], "tic": [168, 187, 248, 280, 1003], "tic_bwd": 168, "tic_fwd": 168, "ticconi": 1038, "tick": [47, 78, 93, 173, 249, 280, 375, 632, 828], "tick_bottom": 309, "tick_label": [147, 189, 318], "tick_labels_dict": [147, 189, 318], "tick_labels_parameter_nam": [147, 189, 318], "tick_left": 309, "tick_param": [46, 54, 157, 254, 269, 313, 331], "tick_right": 46, "ticker": [231, 233, 236, 289], "ticket": [323, 375], "tidelift": 0, "tie": [183, 334, 387, 414, 512, 832, 906, 909, 1002, 1016, 1017, 1022, 1033, 1048], "tieleman": [860, 1006], "tien": 1037, "tiernei": [1040, 1041, 1042], "tight": [75, 129, 136, 142, 161, 164, 200, 205, 206, 216, 220, 223, 228, 233, 236, 258, 289, 295, 296, 300, 301, 335, 339, 342, 344, 355, 582, 692, 1044], "tight_layout": [45, 47, 62, 64, 67, 75, 85, 88, 98, 105, 107, 116, 120, 121, 122, 130, 134, 136, 141, 142, 144, 147, 152, 154, 156, 172, 174, 179, 181, 185, 186, 188, 189, 193, 194, 197, 202, 209, 211, 219, 222, 226, 229, 231, 243, 248, 264, 265, 281, 288, 289, 291, 301, 310, 311, 312, 313, 314, 318, 322, 337, 351, 354, 355, 371], "tijanajovanov": 1044, "tikhonov": [177, 417, 672], "tild": [870, 1009, 1011], "tilen": 1042, "till": [407, 441, 788, 1001], "tim": [0, 396, 1032, 1037, 1038, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 387, 389, 390, 398, 401, 403, 404, 405, 407, 409, 410, 412, 414, 415, 418, 436, 440, 442, 443, 444, 445, 446, 449, 451, 454, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 471, 491, 496, 499, 501, 519, 523, 534, 536, 538, 540, 541, 547, 562, 567, 568, 569, 570, 590, 610, 619, 627, 628, 629, 630, 634, 639, 640, 643, 646, 650, 652, 654, 660, 662, 664, 666, 667, 672, 673, 674, 676, 677, 678, 685, 686, 690, 692, 694, 701, 742, 745, 746, 748, 790, 794, 797, 798, 800, 802, 803, 804, 805, 807, 809, 814, 815, 816, 819, 821, 825, 826, 827, 828, 829, 830, 832, 834, 839, 840, 841, 842, 843, 844, 845, 852, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 874, 877, 879, 883, 888, 896, 897, 901, 902, 906, 909, 910, 918, 942, 943, 950, 966, 990, 991, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1025, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "time_dens": 325, "time_spars": 325, "time_step": [197, 862], "timeit": [226, 257, 381], "timeout": [496, 966, 1046], "timer": [257, 381], "times_init": 257, "timescal": 243, "timeseri": 43, "timeseriessplit": [2, 43, 52, 149, 197, 264, 411, 1038, 1039, 1044], "timo": 1044, "timofei": 1047, "timotheemathieu": 1045, "timothi": [1037, 1045], "timsaur": 1042, "tinertia": 91, "ting": [563, 1007, 1040, 1041], "tingshan": 1045, "tini": [1034, 1047, 1050], "tinoco": 1049, "tinta": 315, "tip": [358, 361, 375, 378, 381, 402, 415, 534, 541, 645, 692, 997, 1023, 1024, 1026, 1027, 1035], "tiphain": 1043, "tirth": [1042, 1043], "titan": [103, 188, 252, 318, 322, 323, 1009], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 109, 110, 112, 113, 115, 116, 120, 121, 122, 123, 124, 126, 127, 128, 129, 135, 136, 137, 140, 142, 143, 146, 147, 149, 150, 153, 156, 157, 161, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 186, 193, 194, 196, 197, 199, 200, 201, 204, 205, 208, 210, 211, 213, 215, 216, 217, 219, 220, 225, 228, 229, 231, 232, 233, 238, 242, 243, 244, 246, 247, 248, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 272, 273, 274, 278, 279, 282, 284, 291, 292, 295, 296, 297, 298, 300, 301, 302, 309, 313, 314, 315, 316, 330, 333, 335, 336, 337, 338, 339, 342, 343, 347, 348, 350, 355, 356, 371, 374, 375, 379, 383, 408, 1001, 1024], "title_bow": 408, "titles_opt": 262, "titov": [1040, 1042, 1045, 1046], "titu": 1043, "tiwari": 1044, "tiziano": 1032, "tjoa": 1036, "tkammi": 1038, "tkdd": 563, "tliu68": 1045, "tm": [51, 1004], "tmp": 379, "tmpdir": [291, 318], "tn": [263, 326, 712, 718, 1001], "tn_c": 278, "tnr": 263, "tnwei": 1044, "to_british": 415, "to_fram": 107, "to_list": 189, "to_numpi": [175, 263], "to_onnx": 401, "to_replac": [43, 187], "toarrai": [46, 325, 332, 357, 408, 415, 566, 582, 588, 590, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 877, 894, 895, 949, 971, 972, 974, 982, 983, 991, 1004, 1011, 1049], "toastedcornflak": [1038, 1039], "toastedyeast": [1046, 1047], "tobia": [1040, 1045, 1047], "tobychees": [1039, 1040], "toc": [168, 248], "toc_bwd": 168, "toc_fwd": 168, "toccac": 1042, "tocsc": 198, "tocsr": 55, "toctre": [375, 393, 400], "tod": [407, 418, 443], "todai": 175, "todens": [975, 976, 977, 978, 979, 980, 981], "todo": [80, 242, 379, 383, 407, 1051], "toeplitz": 110, "togeth": [43, 51, 84, 93, 103, 142, 154, 170, 176, 186, 195, 232, 235, 248, 265, 315, 322, 342, 355, 358, 377, 387, 388, 389, 407, 414, 415, 416, 422, 450, 452, 567, 568, 594, 689, 715, 800, 814, 864, 865, 878, 997, 998, 1001, 1002, 1008, 1011, 1017, 1018, 1025, 1038, 1049], "toi": [48, 58, 71, 74, 75, 76, 77, 81, 82, 85, 86, 88, 89, 90, 100, 111, 116, 124, 137, 150, 155, 156, 183, 196, 202, 215, 225, 237, 248, 254, 295, 296, 305, 336, 345, 368, 381, 387, 407, 414, 415, 439, 440, 441, 443, 445, 447, 448, 449, 451, 457, 468, 512, 514, 522, 563, 639, 677, 726, 756, 798, 850, 857, 865, 884, 908, 998, 1000, 1001, 1007, 1011, 1022, 1027], "tok": [352, 415], "token": [2, 57, 352, 362, 370, 379, 415, 536, 588, 589, 590, 591, 1032, 1040, 1044, 1050], "token_featur": 415, "token_freq": 352, "token_pattern": [352, 415, 588, 589, 591], "tokoroten": 1037, "tokyo": [872, 1012], "tol": [46, 49, 55, 105, 120, 144, 149, 168, 181, 194, 203, 205, 218, 219, 225, 227, 238, 249, 255, 257, 307, 321, 346, 350, 377, 381, 414, 419, 442, 446, 448, 451, 458, 461, 470, 471, 477, 481, 482, 483, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 559, 560, 561, 562, 602, 627, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 691, 693, 695, 797, 798, 814, 853, 861, 862, 899, 900, 904, 905, 906, 907, 908, 909, 910, 986, 997, 1015, 1016, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "tola": 1042, "told": 415, "toledano": 1040, "toler": [80, 105, 149, 181, 203, 205, 227, 228, 343, 352, 370, 377, 384, 407, 419, 442, 446, 451, 458, 461, 470, 471, 477, 481, 482, 483, 531, 532, 533, 535, 536, 540, 541, 542, 543, 544, 545, 547, 548, 559, 560, 561, 562, 627, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 676, 678, 679, 681, 682, 683, 684, 688, 689, 690, 691, 693, 694, 695, 844, 845, 849, 853, 861, 862, 899, 900, 904, 905, 906, 907, 908, 909, 910, 986, 997, 1001, 1015, 1016, 1044, 1045, 1046, 1047], "toleranbc": 1041, "tolist": [43, 126, 145, 181, 268, 320, 370], "tom": [0, 396, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tom1092": 1045, "toma": 1036, "tomasz": 1045, "tomato": 212, "tomatti": 1047, "tomdlt": 1038, "tomiock": [1047, 1048], "tommaso": 1045, "tommi": [1039, 1040, 1041], "tomographi": [42, 55, 99, 183, 416, 652, 672, 997, 1022], "tomohiro": 1045, "tomorrow": 406, "tom\u00e1": [1045, 1046], "tongyu": 1049, "toni": [45, 370, 563, 884, 1007, 1045, 1046], "tonk": 1039, "too": [43, 46, 51, 52, 55, 64, 79, 83, 88, 90, 95, 102, 106, 113, 124, 146, 149, 181, 186, 188, 197, 212, 215, 232, 242, 248, 255, 262, 263, 267, 276, 282, 306, 315, 339, 350, 356, 362, 372, 375, 381, 383, 387, 389, 405, 407, 409, 411, 414, 415, 416, 419, 436, 448, 538, 679, 692, 707, 839, 840, 841, 842, 843, 869, 882, 884, 996, 998, 1000, 1001, 1003, 1004, 1008, 1033, 1036, 1039, 1040, 1041, 1042, 1044, 1050], "took": [0, 43, 77, 277], "tool": [21, 29, 41, 48, 50, 52, 144, 186, 245, 263, 267, 272, 358, 368, 369, 370, 373, 375, 377, 378, 380, 381, 382, 383, 388, 389, 390, 392, 393, 398, 401, 407, 408, 409, 486, 692, 701, 990, 996, 997, 1001, 1007, 1011, 1016, 1018, 1020, 1021, 1025, 1039, 1042, 1045, 1046, 1047], "toolbox": [387, 1020, 1025], "toolchain": 373, "toolkit": [362, 1020, 1025], "toolset": 1025, "tooth": 121, "tootoonian": 1045, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 84, 95, 97, 103, 122, 132, 139, 140, 142, 149, 154, 157, 186, 211, 213, 222, 226, 238, 248, 249, 254, 256, 257, 260, 266, 270, 278, 279, 294, 309, 311, 315, 319, 325, 328, 329, 339, 343, 350, 358, 375, 377, 381, 387, 404, 405, 407, 412, 413, 414, 486, 587, 588, 591, 599, 726, 756, 794, 916, 918, 990, 993, 997, 999, 1009, 1020, 1025, 1046], "top10": 370, "top5": 350, "top_featur": 54, "top_features_ind": 54, "top_indic": 350, "top_k_accuraci": 1001, "top_k_accuracy_scor": [2, 1001, 1044, 1046], "tophat": [294, 413, 844, 845, 849], "topic": [42, 45, 46, 47, 102, 183, 350, 351, 352, 370, 371, 411, 412, 415, 487, 497, 536, 538, 540, 547, 588, 591, 997, 1002, 1020, 1021, 1022, 1037, 1039], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [412, 536], "topic_word_prior_": 536, "topisan": 1042, "toplak": 1048, "topolog": [462, 1020], "topologi": [235, 236], "torch": [403, 1050], "torgo": 369, "toro": 315, "toronto": [534, 644, 860], "torr": [1041, 1050], "torrella": [1041, 1042, 1048], "tortois": 997, "tosequ": 1050, "toshihiro": [1038, 1039, 1045], "toshniw": 1044, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 363, 369, 370, 372, 381, 389, 404, 407, 413, 415, 418, 430, 443, 464, 481, 482, 483, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 510, 512, 514, 515, 519, 522, 523, 536, 544, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 583, 584, 590, 594, 596, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 676, 677, 678, 679, 697, 704, 705, 713, 729, 730, 731, 734, 738, 739, 757, 769, 783, 784, 787, 794, 795, 796, 800, 814, 825, 826, 827, 837, 838, 839, 840, 847, 849, 855, 862, 879, 883, 905, 907, 910, 912, 913, 914, 915, 948, 990, 997, 998, 1001, 1002, 1003, 1004, 1011, 1015, 1016, 1017, 1022, 1033, 1038, 1040, 1048, 1049], "total_cel": 149, "total_fit_tim": 47, "total_sampl": [331, 536], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 154, "totrmsabvgrd": 143, "tottim": 381, "tour": [0, 396, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tournament": 990, "toward": [0, 63, 64, 96, 113, 141, 146, 153, 170, 188, 193, 215, 216, 236, 248, 282, 346, 375, 389, 407, 447, 451, 461, 676, 678, 695, 878, 1000, 1015, 1017, 1019, 1021], "toyota": 51, "tp": [326, 407, 712, 718, 729, 730, 731, 782, 783, 784, 787, 916, 1001], "tp_c": 278, "tpng": 916, "tpot": 1020, "tpr": [50, 239, 248, 263, 266, 278, 279, 382, 702, 706, 789, 1001, 1029, 1032, 1048], "tpr_a": 278, "tpr_b": 278, "tpr_score": 263, "tprs_lower": 279, "tprs_upper": 279, "tr": [264, 372, 379, 407, 409, 468, 469, 470, 471, 472, 473, 474, 475], "trace": [383, 407, 420, 472, 474, 475, 478, 479, 480, 689, 693, 998, 1043], "traceback": [375, 380, 383, 387, 467, 711, 1024, 1049], "traceord": 140, "tracer0tong": 1038, "trach": 1032, "track": [132, 138, 145, 329, 375, 378, 379, 403, 534, 969, 1002, 1020, 1021, 1039, 1042], "tracker": [374, 378, 383, 387, 390, 393, 401, 1021], "tracking_select": 969, "tractabl": [43, 411, 541, 634, 1020, 1045], "trade": [37, 94, 109, 140, 149, 188, 204, 215, 268, 270, 271, 282, 339, 350, 389, 406, 407, 409, 553, 554, 559, 560, 634, 656, 692, 800, 803, 804, 814, 827, 998, 1005, 1013, 1015, 1016, 1021], "tradeoff": [88, 137, 183, 243, 251, 261, 276, 277, 278, 279, 350, 362, 375, 383, 413, 515, 564, 698, 702, 727, 789, 830, 865, 884, 904, 998, 1022, 1041, 1044], "tradit": [55, 88, 211, 226, 351, 364, 405, 414, 415, 632, 694, 997, 1000, 1011, 1020, 1025], "tradition": 1017, "traffic": 1025, "trail": [377, 984], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 97, 98, 102, 103, 107, 115, 116, 118, 120, 123, 124, 125, 126, 128, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 159, 165, 170, 171, 172, 175, 176, 177, 178, 179, 183, 185, 186, 187, 188, 189, 191, 197, 198, 199, 201, 203, 205, 207, 208, 211, 212, 213, 216, 218, 219, 220, 223, 225, 226, 229, 238, 241, 243, 247, 256, 258, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 288, 289, 292, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 309, 311, 313, 314, 318, 321, 325, 327, 328, 329, 332, 333, 335, 338, 345, 346, 352, 353, 356, 358, 362, 363, 364, 367, 370, 372, 377, 380, 387, 388, 389, 403, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 436, 439, 440, 442, 443, 446, 448, 450, 451, 452, 453, 458, 464, 468, 469, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 493, 496, 497, 498, 500, 504, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 688, 689, 691, 692, 696, 703, 741, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 869, 870, 873, 874, 877, 878, 882, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 974, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1025, 1027, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "train_0": 43, "train_4": 43, "train_accuraci": [256, 283], "train_auc": 827, "train_ax": 125, "train_balanced_accuraci": 283, "train_cover_std": 50, "train_dataset": [186, 369], "train_errors_with": 144, "train_errors_without": 144, "train_fract": 1032, "train_idx": [52, 186, 389], "train_import": 188, "train_index": [256, 331, 411, 801, 802, 805, 807, 808, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821], "train_indx": 411, "train_pr": 144, "train_prec_macro": 411, "train_r2": 827, "train_rec_macro": 411, "train_result": 188, "train_sampl": [64, 226, 227], "train_scor": [219, 315, 346, 354, 806, 823, 827, 828, 831, 996], "train_score_": [147, 414, 559, 560, 561, 562], "train_set": 405, "train_siz": [44, 46, 49, 134, 153, 171, 191, 227, 244, 248, 271, 282, 320, 323, 346, 802, 806, 817, 820, 828, 830, 996, 1032, 1033, 1038, 1039], "train_size_ab": 828, "train_size_idx": 346, "train_sizes_ab": 828, "train_test_s": 244, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 103, 107, 116, 125, 134, 139, 141, 144, 145, 146, 147, 148, 149, 150, 153, 164, 165, 185, 186, 188, 189, 191, 197, 207, 208, 211, 218, 219, 226, 227, 229, 239, 248, 251, 252, 262, 263, 266, 267, 272, 276, 278, 282, 288, 292, 297, 298, 304, 306, 307, 311, 313, 314, 316, 318, 319, 320, 325, 326, 332, 354, 357, 358, 380, 388, 403, 408, 411, 414, 436, 437, 558, 560, 567, 568, 697, 698, 700, 702, 799, 800, 822, 832, 835, 853, 861, 862, 864, 914, 915, 990, 991, 1001, 1003, 1004, 1009, 1011, 1016, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1045, 1049, 1050], "train_tim": [226, 244, 350, 351], "trainabl": 377, "traine": 1025, "training_data": 170, "training_data_": 1042, "training_idx": 178, "training_indic": 177, "training_noisy_target": 170, "training_sample_indic": 170, "training_tim": [144, 350], "training_time_early_stop": 144, "training_time_ful": 144, "trajectori": 138, "tran": 110, "trans_data": 233, "transact": [96, 263, 326, 372, 407, 409, 418, 420, 443, 447, 474, 534, 538, 540, 547, 563, 644, 664, 685, 686, 725, 726, 756, 769, 997, 1001], "transax": [79, 95, 235, 238, 256, 297, 311], "transcript": 375, "transcriptom": 692, "transduc": 329, "transduct": [389, 407, 899, 900, 1021], "transduction_": [328, 329, 330, 899, 900, 901], "transfer": [149, 398, 403, 997, 1021], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 80, 81, 84, 87, 90, 95, 101, 105, 106, 116, 122, 123, 125, 126, 128, 129, 133, 138, 140, 143, 153, 154, 165, 176, 182, 183, 186, 187, 188, 191, 204, 211, 212, 219, 225, 227, 229, 232, 235, 238, 240, 241, 243, 245, 246, 248, 252, 256, 265, 266, 267, 270, 278, 288, 289, 291, 297, 298, 299, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 326, 339, 342, 343, 350, 352, 356, 358, 369, 370, 371, 372, 375, 377, 380, 384, 389, 398, 401, 403, 405, 407, 409, 410, 411, 412, 414, 415, 416, 417, 423, 428, 431, 436, 440, 441, 442, 444, 446, 448, 451, 463, 464, 465, 466, 467, 481, 482, 483, 484, 487, 488, 496, 503, 508, 509, 514, 515, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 557, 559, 561, 564, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 636, 638, 639, 640, 641, 642, 653, 658, 663, 673, 676, 684, 688, 689, 690, 691, 692, 694, 701, 702, 713, 753, 754, 785, 800, 803, 804, 814, 830, 833, 839, 848, 853, 856, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 902, 904, 906, 909, 910, 923, 925, 937, 940, 942, 990, 991, 993, 995, 997, 998, 1001, 1002, 1005, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "transform_algorithm": [123, 129, 531, 537, 542, 1048], "transform_alpha": [123, 129, 531, 537, 542, 1045], "transform_dur": 289, "transform_func": 270, "transform_list": 863, "transform_max_it": [531, 537, 538, 542, 1042], "transform_method": 412, "transform_n_nonzero_coef": [123, 129, 531, 537, 542], "transform_n_nozero_coef": 129, "transform_output": [252, 263, 316, 467, 902, 1047, 1048], "transformed_grid": 152, "transformedtargetregressor": [2, 107, 186, 211, 387, 398, 408, 593, 594, 597, 1002, 1040, 1042, 1045, 1050], "transformedtargetregressortransformedtargetregressor": 186, "transformer_": [245, 464], "transformer_list": [106, 408, 863, 866, 991, 1043, 1044], "transformer_nam": [289, 463], "transformer_tag": [923, 937], "transformer_weight": [102, 463, 466, 863, 1037, 1044], "transformermixin": [2, 245, 289, 377, 389, 464, 1040, 1047, 1048, 1049], "transformers_": [463, 466, 1049, 1050], "transformertag": [2, 923, 937], "transfus": 239, "transit": [55, 346, 379, 401, 1043], "transitive_target": 55, "translat": [107, 377, 417, 527, 614, 873, 874, 890, 998, 1001, 1025], "transluc": 159, "transpar": [67, 311, 985, 1025], "transpos": [62, 269, 419, 538, 540, 547, 660, 661, 662, 663, 788, 948, 986, 993, 1001, 1013, 1032, 1046], "transposit": 948, "trapezoid": [2, 276, 706, 707, 1001], "travel": 0, "travers": [357, 1004, 1008, 1050], "travi": [1032, 1040], "treat": [43, 45, 103, 143, 154, 181, 186, 211, 278, 315, 320, 325, 331, 358, 375, 387, 389, 404, 414, 415, 441, 561, 562, 588, 589, 591, 607, 608, 632, 638, 645, 671, 674, 729, 730, 738, 754, 783, 784, 787, 788, 873, 874, 880, 881, 884, 885, 889, 892, 893, 895, 904, 905, 957, 991, 993, 997, 1001, 1002, 1008, 1011, 1015, 1017, 1036, 1044, 1048, 1049], "treatment": [112, 185, 369, 406, 412, 468, 473, 1017], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 88, 95, 124, 126, 128, 133, 136, 137, 138, 140, 143, 144, 145, 146, 147, 150, 151, 153, 154, 155, 157, 168, 178, 181, 187, 189, 219, 220, 232, 245, 247, 248, 249, 266, 273, 275, 286, 288, 289, 294, 302, 309, 310, 314, 319, 320, 322, 358, 362, 370, 372, 381, 388, 389, 392, 405, 406, 407, 413, 418, 436, 440, 441, 442, 443, 444, 445, 447, 449, 456, 462, 496, 500, 504, 514, 515, 519, 544, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 631, 632, 633, 634, 658, 688, 692, 702, 703, 711, 742, 748, 788, 790, 806, 821, 827, 828, 830, 839, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 865, 868, 877, 912, 913, 914, 915, 916, 917, 918, 943, 991, 998, 1001, 1002, 1007, 1008, 1020, 1021, 1022, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "tree_": [318, 354, 357, 849, 912, 913, 914, 915, 1049], "tree_copi": [844, 845], "tree_disp": 249, "tree_importance_sorted_idx": 189, "tree_optim": 286, "tree_preprocessor": [154, 211], "tree_stat": [844, 845], "treelit": 1020, "trein": 1035, "tremend": [315, 414], "trend": [151, 175, 187, 241, 305, 1025, 1039], "trent": [1025, 1038], "trevor": [168, 199, 323, 372, 628, 656, 721, 723, 724, 991, 997, 1013, 1036, 1037, 1040, 1041, 1042, 1044], "trevorstephen": [1036, 1038], "tri": [99, 128, 231, 282, 298, 343, 363, 377, 380, 387, 390, 405, 448, 450, 452, 631, 632, 633, 670, 692, 698, 700, 702, 814, 1006, 1034, 1040, 1044, 1050], "triag": [0, 375, 378, 390], "trial": [43, 274, 446, 448, 459, 671, 797, 798, 997, 1038], "triangl": [389, 412, 442, 446, 458, 699, 999, 1004], "triangular": [407, 462, 611, 998], "tribe": 370, "trick": [2, 170, 244, 299, 343, 352, 361, 364, 378, 387, 408, 582, 589, 643, 672, 993, 994, 1005, 1015, 1016, 1027, 1033, 1041, 1049], "tricki": [405, 998], "trickiest": 375, "trigg": 566, "trigger": [103, 104, 375, 379, 389, 401, 408, 861, 862, 864, 865, 930, 931, 948, 997, 1040, 1046, 1047], "triglycerid": [168, 372], "trim": [226, 407, 844, 845], "trimeta": 1043, "trinh": 1047, "tripl": 380, "triplet": 509, "tripramudya": 1048, "trishnendu": 1040, "tristan": 997, "triu": 51, "trivial": [48, 213, 263, 354, 375, 407, 818, 906, 909, 998, 1021, 1032], "troillard": [1048, 1049], "tropp": [535, 541], "troubl": [66, 415], "troubleshoot": 415, "troyanskaya": [628, 991], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 82, 83, 86, 87, 88, 90, 91, 93, 96, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 125, 126, 130, 132, 134, 138, 140, 143, 145, 146, 148, 149, 150, 151, 154, 155, 157, 159, 160, 164, 167, 170, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 197, 199, 200, 201, 203, 204, 205, 207, 208, 211, 213, 214, 215, 218, 219, 225, 226, 227, 229, 231, 234, 235, 238, 239, 242, 244, 245, 246, 247, 248, 251, 252, 254, 257, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 294, 295, 298, 302, 304, 305, 306, 307, 310, 314, 315, 316, 318, 320, 322, 323, 324, 325, 326, 329, 331, 332, 333, 342, 343, 345, 346, 347, 350, 351, 352, 354, 355, 357, 358, 362, 363, 368, 370, 371, 373, 375, 376, 377, 380, 381, 382, 384, 388, 389, 392, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 519, 522, 523, 524, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 711, 712, 713, 714, 715, 718, 719, 720, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 752, 754, 756, 761, 767, 769, 778, 782, 783, 784, 785, 786, 787, 788, 789, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 814, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 928, 929, 930, 931, 937, 942, 943, 948, 949, 961, 962, 963, 965, 966, 970, 971, 972, 973, 981, 986, 988, 989, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "true_": [199, 537, 636], "true_coef": [185, 197, 207, 282, 646, 647, 652, 660, 661, 662, 681, 682, 683], "true_cov": [468, 470, 471, 477], "true_den": 294, "true_fac": 247, "true_fun": 284, "true_h": 322, "true_k": 351, "true_label": [324, 328, 329], "true_nam": 45, "true_relev": [726, 756], "true_w": 322, "true_weight": 193, "trujillo": [1046, 1047], "truli": [272, 364, 712, 1001], "truncat": [2, 105, 152, 232, 384, 534, 535, 539, 540, 541, 544, 676, 678, 726, 756, 797, 853, 917, 948, 990, 1000, 1001, 1015, 1026, 1027, 1038, 1040], "truncate_mod": 76, "truncatedsvd": [2, 152, 232, 351, 412, 534, 535, 539, 540, 541, 692, 863, 866, 1034, 1039, 1043, 1044, 1046, 1050], "truong": 1038, "trust": [0, 51, 63, 103, 104, 112, 134, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 189, 195, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 390, 401, 405, 1046], "trustworthi": [2, 322, 1040, 1041, 1046, 1047, 1048, 1049], "truth": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 127, 150, 178, 197, 206, 211, 212, 248, 260, 272, 351, 389, 407, 703, 704, 705, 708, 712, 713, 714, 715, 717, 718, 721, 723, 724, 726, 728, 729, 730, 734, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 783, 784, 785, 786, 787, 790, 791, 795, 796, 1001, 1040, 1046], "truthi": [2, 961], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 86, 103, 104, 123, 134, 139, 140, 141, 142, 149, 150, 151, 154, 157, 165, 170, 175, 176, 182, 185, 186, 187, 188, 191, 193, 195, 201, 208, 239, 240, 241, 245, 249, 250, 251, 252, 255, 256, 259, 263, 267, 269, 270, 276, 281, 283, 286, 289, 302, 307, 315, 319, 320, 322, 323, 325, 330, 341, 346, 350, 351, 356, 357, 370, 373, 374, 375, 377, 380, 381, 383, 387, 389, 393, 395, 398, 401, 407, 410, 411, 414, 415, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 503, 567, 577, 589, 658, 673, 675, 689, 693, 799, 800, 803, 804, 812, 814, 822, 825, 826, 827, 829, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 904, 923, 929, 984, 990, 997, 998, 1007, 1016, 1017, 1021, 1024, 1025, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "tr\u00e9segni": [0, 1034], "ts_cv": [43, 52, 149], "tscv": [411, 821], "tseng": 407, "tsetogl": 1047, "tsilhouett": 91, "tslearn": 1020, "tsne": [2, 183, 231, 232, 233, 235, 236, 290, 291, 322, 389, 421, 431, 496, 688, 689, 690, 848, 852, 865, 974, 998, 1004, 1022, 1035, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "tsne_param": 289, "tsoumaka": [720, 734, 740, 1001], "tspeng": [1047, 1048], "tsuga": 1045, "tsujii": 1015, "tsukada": 1044, "tsuruoka": 1015, "tsutomu": 1043, "tt": [155, 264, 464], "ttang131": 1042, "ttime": 91, "tttthomasssss": 1036, "tube": [910, 1016], "tue": [43, 52, 149, 187, 1038], "tuft": 448, "tuhin": 1050, "tuk": 1050, "tulio": [1040, 1041], "tulken": 1042, "tulloch": [1035, 1036], "tumor": [168, 372, 406], "tune": [2, 43, 64, 79, 88, 103, 125, 134, 140, 149, 167, 168, 170, 181, 183, 187, 201, 215, 216, 228, 235, 239, 248, 261, 262, 272, 273, 274, 276, 286, 291, 310, 331, 339, 343, 346, 350, 358, 362, 363, 364, 388, 389, 402, 405, 407, 411, 414, 416, 417, 451, 461, 496, 551, 559, 560, 561, 594, 613, 614, 615, 617, 619, 620, 622, 623, 625, 643, 658, 659, 690, 694, 700, 702, 718, 742, 784, 787, 799, 800, 816, 822, 827, 830, 860, 865, 884, 902, 909, 995, 996, 997, 998, 1000, 1001, 1004, 1005, 1007, 1015, 1016, 1020, 1022, 1027, 1032, 1046, 1048, 1050], "tuned_classifi": 326, "tuned_model": [263, 283], "tuned_model_coef": 283, "tuned_param": 46, "tuned_paramet": [109, 159, 267], "tunedthresholdclassifiercv": [2, 263, 283, 406, 799, 1050], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 263, "tupl": [47, 82, 88, 129, 187, 229, 368, 369, 370, 389, 411, 419, 432, 450, 452, 463, 466, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 508, 510, 511, 512, 513, 514, 522, 533, 561, 562, 567, 568, 569, 570, 582, 583, 584, 587, 588, 589, 591, 627, 632, 633, 634, 711, 712, 719, 742, 781, 783, 797, 800, 814, 827, 844, 845, 863, 864, 874, 875, 879, 882, 890, 894, 906, 907, 908, 909, 910, 919, 931, 932, 934, 939, 940, 941, 942, 966, 967, 984, 989, 1008, 1038, 1039, 1043, 1044, 1045, 1050], "tur": 1050, "turn": [2, 30, 43, 68, 109, 181, 182, 186, 197, 226, 227, 243, 269, 293, 326, 352, 362, 363, 364, 370, 387, 389, 390, 407, 408, 410, 412, 415, 416, 417, 581, 582, 589, 607, 608, 833, 837, 906, 909, 933, 991, 995, 1003, 1006, 1011, 1025, 1037, 1039, 1040, 1045], "turquois": [124, 128, 129, 148, 217, 228, 234, 256, 257, 276], "tushar": 1050, "tutori": [112, 159, 160, 161, 201, 213, 229, 269, 375, 376, 381, 383, 401, 407, 451, 461, 691, 1016, 1027, 1035], "tuveri": 1047, "tuzova": 1040, "tv": 91, "tw": [191, 369, 486, 508, 509, 658, 1016], "tweak": [2, 113, 245, 411, 966, 1000, 1043], "tweedi": [2, 183, 192, 211, 463, 496, 552, 648, 669, 680, 706, 724, 745, 747, 749, 750, 752, 830, 865, 868, 869, 877, 884, 997, 1022, 1042, 1043, 1045], "tweedie_pow": 229, "tweedieregressor": [2, 43, 319, 322, 648, 669, 997, 1043, 1046, 1047], "tweet": 1025, "twelfth": 696, "twenti": [57, 242, 372, 404, 407], "twice": [64, 263, 281, 283, 350, 352, 377, 417, 619, 730, 732, 950, 1041, 1049], "twine": 379, "twinx": 331, "twister": 1043, "twitter": 379, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 88, 93, 97, 102, 103, 107, 111, 115, 116, 118, 120, 122, 123, 125, 126, 128, 133, 134, 135, 142, 143, 144, 146, 149, 150, 151, 152, 155, 165, 168, 170, 171, 172, 173, 176, 177, 181, 182, 183, 186, 187, 188, 193, 197, 199, 201, 202, 203, 204, 211, 212, 213, 219, 220, 223, 228, 229, 233, 235, 236, 238, 243, 245, 246, 248, 254, 255, 256, 258, 259, 260, 263, 264, 266, 270, 276, 286, 292, 294, 297, 298, 300, 302, 309, 311, 314, 318, 319, 321, 322, 326, 330, 335, 336, 339, 340, 341, 343, 347, 350, 351, 352, 355, 356, 358, 368, 369, 370, 371, 372, 373, 375, 377, 379, 381, 382, 383, 387, 389, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 440, 441, 442, 443, 444, 446, 449, 450, 451, 452, 456, 458, 463, 468, 469, 470, 471, 472, 473, 474, 475, 487, 489, 490, 492, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 507, 510, 514, 519, 522, 536, 538, 540, 544, 547, 549, 550, 553, 560, 570, 581, 584, 590, 591, 592, 595, 596, 598, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 620, 621, 624, 628, 631, 632, 639, 643, 645, 670, 671, 673, 692, 699, 703, 704, 705, 712, 715, 716, 719, 721, 722, 723, 724, 731, 732, 735, 736, 738, 741, 743, 754, 755, 757, 763, 764, 771, 774, 777, 778, 779, 780, 781, 785, 786, 794, 795, 796, 797, 833, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 861, 862, 868, 869, 876, 877, 878, 879, 898, 899, 900, 904, 905, 912, 914, 915, 963, 979, 980, 986, 990, 991, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "two_d_arrai": 921, "two_d_label": 924, "two_mean": 79, "two_point_correl": [844, 845], "twoclass_output": 136, "twosigmajab": 1040, "twx": 51, "tx": 410, "tx_k": [410, 995], "txn": 51, "txt": [350, 369, 493, 503], "ty": 410, "ty_k": 410, "tyagi": 1046, "tygert": [535, 541, 948], "tyler": [1039, 1045, 1046, 1047], "type": [2, 46, 52, 86, 87, 98, 101, 102, 112, 118, 126, 129, 142, 143, 145, 175, 182, 183, 185, 186, 187, 191, 197, 211, 213, 240, 245, 250, 252, 253, 255, 256, 259, 260, 263, 264, 270, 275, 276, 278, 279, 280, 282, 283, 286, 299, 315, 325, 343, 350, 352, 357, 358, 363, 368, 369, 370, 372, 375, 378, 379, 380, 381, 388, 393, 395, 401, 404, 408, 415, 431, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 496, 508, 509, 515, 567, 572, 581, 582, 588, 589, 591, 600, 604, 617, 627, 629, 630, 638, 656, 658, 672, 674, 679, 687, 689, 692, 693, 699, 701, 707, 714, 716, 729, 730, 733, 738, 783, 784, 787, 788, 797, 798, 800, 806, 814, 823, 828, 830, 831, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 864, 865, 866, 869, 871, 877, 878, 884, 885, 902, 906, 907, 908, 909, 910, 925, 926, 928, 930, 931, 934, 939, 940, 963, 964, 987, 991, 993, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1011, 1013, 1017, 1022, 1024, 1025, 1032, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "type_check": 379, "type_filt": 940, "type_of_target": [2, 389, 871, 885, 1002, 1046, 1047, 1049, 1050], "type_of_target_": 885, "typed_ndarrai": 375, "typeerror": [245, 321, 380, 711, 934, 957, 984, 1039, 1040, 1043, 1045, 1049], "typic": [25, 62, 64, 124, 132, 144, 191, 197, 211, 215, 229, 244, 271, 272, 276, 278, 279, 295, 296, 320, 339, 351, 362, 368, 369, 370, 373, 377, 378, 384, 388, 389, 401, 403, 405, 407, 408, 411, 412, 414, 415, 417, 442, 446, 448, 496, 541, 551, 555, 556, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 629, 638, 640, 643, 654, 655, 656, 671, 682, 683, 712, 846, 854, 871, 878, 882, 885, 947, 948, 953, 957, 960, 985, 990, 994, 997, 998, 1000, 1001, 1002, 1003, 1007, 1009, 1025, 1041, 1045, 1048, 1049], "typo": [375, 390, 398, 1032], "tzu": 1036, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 83, 85, 89, 120, 126, 127, 143, 144, 149, 170, 179, 185, 186, 187, 212, 215, 219, 229, 232, 235, 242, 245, 251, 252, 255, 256, 260, 263, 264, 269, 272, 276, 282, 283, 315, 343, 350, 357, 363, 370, 373, 375, 379, 381, 383, 387, 393, 398, 404, 407, 410, 412, 414, 415, 430, 462, 464, 481, 482, 483, 531, 537, 545, 546, 550, 552, 554, 556, 558, 560, 562, 565, 568, 570, 588, 589, 591, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 681, 684, 689, 693, 704, 720, 740, 755, 837, 838, 847, 855, 862, 884, 898, 905, 907, 910, 913, 915, 948, 993, 995, 1000, 1001, 1008, 1011, 1025, 1029, 1042], "u2uwz2": [168, 372], "u_": [404, 481, 482, 483], "u_1": [404, 993], "u_2": [404, 993], "u_i": [407, 481, 482, 483, 755], "u_init": 543, "u_k": [410, 412], "uai": 1013, "ubuntu": [362, 373, 381, 383], "uchida": 1042, "uci": [47, 168, 263, 314, 369, 372, 500, 502, 504, 510], "ucl": 1014, "ucla": 997, "udi": 1032, "udit": 1046, "ufmay": 1044, "ufunc": [186, 1049], "ugli": [220, 297, 300, 335], "ugo": 1046, "ugurcaliskan": 1036, "ugurthemast": [1035, 1036], "uhmann": 1045, "uieda": 1045, "uint": 1043, "uint32": [370, 497], "uint8": [86, 123, 369, 497, 506, 507, 1044], "uk": 1014, "ulloa": 1038, "ulrik": [407, 451, 461, 691], "ulterior": 52, "ultim": [88, 235, 376], "umar": [1040, 1041], "umass": [45, 57, 370], "umberto": 1044, "umbrella": 406, "umpi": 415, "un": [51, 375, 405, 415, 419, 533, 589, 795, 867, 876, 887, 891, 1041], "unabl": [51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 185, 186, 187, 188, 195, 197, 211, 239, 240, 241, 245, 249, 250, 251, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 323, 325, 330, 356, 357, 364, 884, 1011, 1041], "unadjust": [407, 1001, 1044], "unaffect": 1004, "unalt": 1001, "unambigu": [278, 1002, 1038], "unanim": 390, "unavail": [389, 658, 659, 961, 1039, 1045], "unbalanc": [2, 183, 272, 334, 337, 340, 411, 512, 631, 909, 935, 936, 990, 1015, 1022], "unbias": [109, 405, 409, 412, 436, 550, 656, 672, 674, 687, 997], "unbound": [72, 1000, 1046, 1050], "uncalibr": [61, 62, 63, 436], "uncent": 195, "uncertain": [269, 329, 374], "uncertainti": [62, 149, 170, 177, 193, 271, 405, 407, 567, 568, 643, 864, 991, 1013], "uncertainty_index": [328, 329], "unchang": [176, 186, 229, 276, 414, 431, 436, 441, 442, 443, 444, 445, 446, 448, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 692, 763, 799, 801, 802, 807, 809, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 851, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 989, 1004, 1040, 1046, 1048], "unclaim": 378, "unclear": [374, 375, 501], "unclust": 445, "uncommon": [409, 658, 904, 1016], "uncompress": [47, 508, 509], "unconstrain": [149, 151, 187, 319, 325, 370, 1015], "uncorrect": [269, 595, 598], "uncorrel": [2, 275, 371, 528, 534, 541, 1001], "uncorrupt": 44, "uncov": [130, 695], "undefin": [52, 272, 389, 712, 729, 738, 783, 969, 1001, 1040, 1044, 1048], "undefinedmetricwarn": [2, 307, 729, 730, 783, 784, 787, 1041], "under": [2, 43, 46, 50, 61, 62, 64, 76, 100, 109, 110, 127, 143, 146, 187, 200, 211, 238, 248, 269, 276, 278, 279, 310, 324, 369, 375, 377, 379, 381, 383, 389, 393, 401, 405, 407, 409, 411, 412, 415, 416, 445, 450, 452, 469, 470, 471, 472, 473, 474, 475, 491, 532, 539, 541, 543, 654, 655, 656, 702, 706, 707, 708, 715, 754, 788, 789, 797, 798, 849, 956, 997, 998, 999, 1001, 1004, 1011, 1015, 1016, 1017, 1020, 1021, 1032, 1034, 1035, 1037, 1040, 1044], "underdetermin": 197, "underestim": [52, 146, 187, 211, 229, 269, 375], "underfit": [43, 70, 146, 170, 183, 188, 212, 215, 261, 282, 304, 315, 346, 414, 657, 800, 803, 804, 814, 826, 827, 864, 879, 996, 997, 1022], "underflow": [1040, 1045], "undergo": 275, "undergrad": 1025, "underli": [64, 89, 111, 153, 168, 186, 189, 212, 214, 215, 245, 263, 274, 293, 294, 343, 356, 363, 375, 387, 389, 392, 398, 403, 405, 407, 409, 411, 412, 413, 414, 416, 417, 436, 450, 451, 452, 461, 463, 464, 470, 471, 477, 524, 555, 556, 564, 565, 567, 568, 569, 570, 593, 594, 597, 602, 658, 659, 665, 668, 673, 675, 680, 691, 695, 799, 800, 803, 804, 814, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 847, 849, 901, 904, 912, 913, 914, 915, 965, 989, 997, 998, 1002, 1007, 1014, 1016, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1050], "underrepres": 375, "underscor": [239, 352, 377, 389, 984, 1032, 1042, 1045], "underset": [412, 997, 1004, 1017], "understand": [43, 48, 52, 76, 134, 175, 183, 187, 245, 263, 264, 267, 283, 320, 321, 336, 343, 350, 353, 354, 358, 374, 375, 376, 381, 387, 392, 407, 414, 415, 504, 830, 861, 862, 912, 913, 914, 915, 918, 990, 991, 998, 1000, 1017, 1019, 1020, 1022, 1025, 1032, 1046], "understood": [270, 375, 407, 957], "undertak": 387, "undesir": [90, 171, 417, 822], "undistinguish": 411, "undistort": 123, "undo": [270, 874, 1036], "undocu": 1039, "unequ": [90, 1040], "uneth": 185, "uneven": [85, 264, 407, 411], "unevenli": [90, 211, 264], "unexpect": [90, 245, 358, 375, 380, 383, 393, 401, 535, 696, 1001, 1016, 1034, 1040, 1041, 1044, 1046, 1048, 1050], "unexpectedli": [389, 1040], "unfair": 358, "unfinish": [374, 375], "unfit": [2, 89, 408, 432, 463, 569, 570, 602, 611, 1040, 1042, 1049], "unfold": [125, 378, 998], "unfortun": [146, 185, 186, 229, 383, 387, 414, 508, 509], "unhandl": 1041, "unhelp": 375, "unicod": [352, 415, 486, 503, 582, 588, 589, 591, 965, 1032, 1040, 1044], "unicodedata": [588, 589, 591], "unicodedecodeerror": [415, 588, 589, 591], "unifi": [286, 376, 384, 387, 388, 414, 637, 1020, 1032], "unifom": 292, "uniform": [2, 58, 67, 72, 86, 145, 146, 150, 164, 171, 176, 179, 193, 194, 225, 236, 238, 241, 277, 292, 295, 296, 301, 304, 310, 312, 313, 316, 322, 324, 338, 377, 380, 401, 407, 437, 438, 551, 569, 570, 610, 611, 628, 639, 649, 650, 654, 668, 676, 677, 678, 699, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 804, 812, 814, 839, 840, 843, 846, 847, 854, 855, 869, 881, 883, 893, 935, 950, 990, 991, 1000, 1001, 1004, 1038, 1040, 1042, 1046, 1048], "uniform_averag": [430, 464, 481, 482, 483, 554, 556, 558, 560, 562, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 721, 723, 728, 745, 746, 748, 750, 751, 753, 785, 790, 791, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 1001, 1041], "uniform_labelings_scor": 72, "uniformli": [72, 140, 146, 163, 238, 254, 318, 377, 516, 517, 518, 551, 642, 804, 812, 814, 883, 990, 991, 1001, 1004, 1011, 1036, 1041], "unigram": [270, 370, 415, 588, 589, 591, 1039], "unilev": 51, "unimod": [238, 473], "unimport": [416, 1009], "uninform": [62, 64, 316, 371, 380, 415, 990, 997, 1040], "uniniti": 383, "uninstal": 373, "unintention": 1011, "unintuit": 90, "union": [102, 186, 408, 738, 754, 863, 1039], "union_not_memb": 186, "uniqu": [2, 43, 61, 66, 77, 81, 90, 91, 96, 100, 105, 141, 147, 148, 149, 186, 188, 197, 226, 229, 256, 278, 298, 315, 316, 324, 331, 350, 351, 352, 369, 377, 384, 389, 407, 408, 411, 414, 415, 439, 449, 453, 455, 463, 466, 496, 549, 550, 551, 553, 554, 557, 558, 559, 560, 561, 562, 564, 565, 566, 610, 633, 634, 635, 666, 668, 676, 697, 709, 711, 754, 782, 800, 802, 814, 827, 832, 833, 836, 842, 851, 854, 856, 861, 863, 875, 877, 878, 885, 888, 904, 906, 912, 913, 914, 915, 935, 948, 963, 964, 997, 1002, 1011, 1025, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "unique_label": [2, 82, 88, 351, 377, 384], "unit": [2, 63, 102, 111, 186, 191, 211, 229, 294, 306, 309, 326, 351, 370, 375, 377, 381, 383, 384, 412, 415, 419, 463, 488, 489, 519, 524, 532, 533, 534, 541, 542, 589, 590, 591, 607, 608, 611, 658, 659, 676, 685, 699, 770, 851, 860, 861, 862, 868, 874, 876, 880, 882, 884, 890, 891, 892, 894, 895, 904, 905, 997, 999, 1000, 1001, 1006, 1011, 1017, 1036, 1040, 1046, 1047], "unit_eig_vec": 254, "unit_vari": [882, 894, 1044], "unitari": 948, "uniti": 30, "univ": [689, 693, 998], "univ_select": 106, "univari": [2, 18, 48, 49, 71, 84, 104, 106, 162, 163, 165, 183, 196, 210, 226, 334, 367, 407, 408, 415, 444, 504, 525, 530, 592, 595, 596, 598, 599, 600, 602, 605, 606, 607, 608, 609, 627, 628, 629, 630, 645, 800, 805, 826, 830, 864, 865, 874, 879, 883, 884, 904, 909, 997, 1016, 1018, 1022, 1023, 1027, 1032, 1038], "univers": [0, 178, 186, 350, 370, 372, 378, 407, 412, 415, 590, 788, 839, 843, 899, 997, 999, 1001, 1003], "unix": 415, "unknown": [52, 89, 186, 245, 269, 328, 330, 364, 370, 389, 401, 404, 415, 871, 877, 878, 963, 1000, 1011, 1036, 1040, 1044, 1045], "unknown_typ": 401, "unknown_v": 154, "unknown_valu": [143, 154, 188, 248, 315, 878, 1011, 1044, 1046, 1047], "unlabel": [38, 45, 246, 320, 328, 329, 330, 332, 333, 389, 407, 899, 900, 901, 1000, 1044], "unlabeled_indic": 329, "unlabeled_set": 328, "unless": [185, 245, 255, 260, 375, 378, 387, 389, 401, 405, 407, 410, 418, 436, 443, 445, 447, 449, 451, 456, 457, 460, 463, 466, 471, 488, 496, 508, 509, 531, 535, 536, 537, 539, 542, 543, 545, 546, 547, 548, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 594, 602, 607, 608, 610, 611, 632, 634, 639, 646, 647, 651, 652, 653, 655, 657, 658, 659, 661, 663, 665, 666, 668, 676, 679, 688, 689, 690, 691, 692, 693, 694, 709, 714, 774, 778, 781, 800, 803, 804, 806, 814, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 846, 847, 850, 852, 854, 855, 857, 858, 861, 862, 863, 866, 885, 889, 890, 892, 893, 894, 895, 899, 900, 912, 913, 914, 915, 923, 926, 930, 931, 948, 997, 1000, 1002, 1032, 1034, 1038, 1040, 1043, 1044, 1049, 1050], "unlik": [88, 89, 140, 186, 187, 231, 233, 259, 309, 337, 375, 377, 381, 387, 389, 398, 401, 409, 411, 412, 415, 445, 449, 535, 650, 651, 654, 655, 656, 682, 683, 785, 821, 844, 845, 884, 895, 907, 997, 1000, 1001, 1008, 1016, 1032, 1038], "unlimit": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "unlucki": 358, "unmaintain": 1032, "unmarri": 186, "unmeaning": 1039, "unmix": [121, 419, 533], "unmixing_matrix": 533, "unmodifi": [377, 389], "unnecessari": [140, 254, 380, 427, 442, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 705, 1004, 1011, 1021, 1025, 1035, 1037, 1042, 1043, 1045, 1048], "unnecessarili": [235, 1039, 1042], "unnorm": [389, 536, 998, 1038, 1039], "unobserv": [149, 185, 186, 412], "unord": [407, 414, 1011], "unpack": 377, "unpen": [405, 648, 669, 680, 997], "unpickl": [2, 389, 576, 844, 845, 1038, 1044, 1048], "unpleas": 1034, "unpract": 1000, "unprefix": 1038, "unprocess": [449, 588, 589, 591], "unprotect": 966, "unprun": [557, 558, 564, 565, 912, 913, 914, 915], "unquot": 229, "unrealist": 370, "unreason": [229, 411], "unreg": 344, "unregular": [877, 900, 1041], "unrel": [315, 363, 375, 380, 383, 415, 515], "unreli": [263, 408], "unrepresent": 919, "unrestrict": 493, "unrol": 235, "unrot": 130, "unsaf": 534, "unsampl": 993, "unscal": [309, 314, 997, 1001, 1040, 1046], "unscaled_clf": 314, "unseen": [109, 144, 165, 201, 215, 219, 295, 343, 364, 367, 377, 388, 389, 407, 411, 850, 881, 893, 992, 1001, 1007, 1009, 1011, 1017, 1035, 1040, 1044], "unseen_featur": [415, 581], "unset": [363, 389, 1040], "unsetmetadatapassederror": 398, "unshad": 412, "unshifft": 677, "unshift": 908, "unsign": [86, 124, 370, 582, 965], "unsmooth": 413, "unsort": [1004, 1033, 1036, 1040], "unspecifi": [599, 600, 998], "unstabl": [74, 99, 186, 403, 407, 409, 410, 689, 693, 947, 948, 1017, 1036, 1037, 1039, 1044, 1046, 1048], "unstack": [229, 272], "unstructur": [53, 71, 74, 75, 76, 81, 183, 235, 306, 407, 440, 444, 462, 503, 530, 857, 1013, 1022, 1025, 1036], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 82, 104, 105, 116, 120, 139, 152, 238, 246, 295, 296, 338, 350, 351, 358, 367, 370, 377, 388, 389, 407, 410, 412, 413, 414, 415, 416, 431, 441, 444, 532, 534, 536, 537, 539, 542, 543, 549, 563, 566, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 634, 635, 638, 639, 640, 641, 642, 677, 800, 803, 804, 806, 814, 823, 828, 831, 846, 847, 850, 852, 853, 854, 855, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 896, 897, 901, 908, 998, 1001, 1007, 1014, 1023, 1027, 1032, 1035, 1045, 1049], "unsupport": [398, 401, 493, 1040, 1045], "unsur": 905, "untangl": 125, "untar": 47, "unterthin": [1035, 1036, 1037], "until": [88, 168, 219, 281, 320, 322, 380, 389, 390, 404, 407, 411, 416, 508, 509, 557, 558, 559, 560, 564, 565, 566, 593, 646, 647, 652, 653, 658, 659, 660, 661, 662, 663, 666, 667, 668, 671, 676, 677, 678, 694, 797, 798, 803, 804, 861, 862, 901, 904, 912, 913, 914, 915, 975, 990, 997, 998, 1006, 1014, 1017, 1035, 1039, 1040, 1046], "untransform": [343, 463, 466, 1012], "untru": 1001, "untrust": 401, "untun": [146, 326], "unus": [126, 187, 231, 233, 462, 579, 763, 771, 990, 998, 1032, 1040, 1042, 1043, 1045, 1047], "unusu": [64, 404, 1007, 1011, 1040], "unveil": 1038, "unvendor": 1040, "unwant": [212, 350], "unweight": [182, 224, 462, 647, 653, 678, 707, 713, 729, 730, 738, 783, 784, 787, 788, 839, 840, 841, 842, 843, 991], "unwieldi": 875, "uoa": 897, "up": [2, 47, 50, 72, 79, 80, 81, 85, 88, 90, 95, 102, 111, 112, 118, 132, 139, 149, 182, 186, 187, 193, 197, 205, 212, 227, 228, 256, 263, 271, 274, 289, 302, 307, 310, 315, 322, 326, 329, 336, 343, 346, 350, 352, 364, 369, 370, 375, 379, 381, 382, 383, 384, 387, 389, 390, 405, 407, 412, 414, 415, 442, 446, 447, 448, 449, 451, 455, 458, 459, 460, 508, 509, 536, 549, 550, 557, 558, 559, 560, 561, 562, 564, 565, 566, 610, 627, 632, 633, 639, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 681, 682, 683, 684, 692, 705, 769, 797, 798, 802, 803, 804, 806, 828, 878, 879, 882, 894, 912, 913, 914, 915, 918, 948, 951, 952, 990, 993, 997, 998, 1001, 1004, 1011, 1015, 1016, 1021, 1024, 1025, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "upadhyai": [1038, 1039, 1040, 1041], "upcast": [1042, 1046], "upcom": [175, 373], "updat": [47, 79, 95, 134, 140, 148, 243, 318, 352, 374, 375, 378, 383, 389, 401, 407, 412, 414, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 814, 818, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 975, 997, 1004, 1005, 1006, 1015, 1024, 1025, 1033, 1039, 1040, 1041, 1043, 1045, 1047, 1048, 1050, 1051], "update_environments_and_lock_fil": 375, "update_from": 296, "update_func": 296, "update_h": 547, "update_layout": [140, 270], "update_legend_marker_s": 296, "update_terminal_region": 1041, "upgrad": [318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 393, 1021, 1032, 1037, 1040], "upload": [369, 373, 379, 387, 671], "upload_d": 369, "upon": [229, 236, 245, 302, 370, 375, 387, 389, 401, 561, 562, 627, 630, 671, 789, 797, 798, 844, 845, 990, 997, 1017, 1046], "upper": [43, 46, 48, 61, 104, 107, 110, 111, 112, 122, 126, 136, 137, 138, 145, 146, 147, 148, 154, 156, 164, 174, 176, 179, 186, 206, 211, 217, 218, 221, 225, 228, 229, 242, 246, 247, 268, 269, 270, 283, 294, 295, 305, 314, 331, 338, 341, 343, 345, 407, 413, 462, 588, 589, 591, 595, 613, 614, 615, 617, 619, 620, 622, 623, 625, 632, 633, 635, 637, 650, 654, 677, 735, 788, 877, 878, 906, 907, 908, 934, 1000, 1001, 1004, 1011, 1015, 1016, 1017, 1040], "upperbound": 734, "uppercas": [389, 1045], "uppercase_initi": 415, "upperlimit": 704, "upright": 370, "upstream": [362, 375, 379, 383, 387, 1011, 1041], "upward": [449, 455], "ur": 1043, "urbanowicz": 1001, "urbanowicz2015": 1001, "urcrnrlat": [50, 302], "urcrnrlon": [50, 302], "uri": 55, "url": [51, 52, 55, 168, 369, 372, 377, 379, 491], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1050, "urvang": [1040, 1042], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 116, 118, 119, 122, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 215, 216, 217, 219, 220, 223, 226, 228, 229, 231, 232, 233, 234, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 349, 352, 354, 356, 361, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 384, 388, 389, 390, 392, 393, 394, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 493, 494, 496, 499, 503, 508, 509, 511, 514, 515, 516, 519, 520, 522, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 723, 724, 726, 727, 728, 729, 730, 732, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 748, 750, 751, 753, 755, 756, 757, 758, 759, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 926, 929, 930, 931, 933, 936, 938, 943, 945, 947, 948, 952, 953, 956, 957, 958, 960, 963, 967, 969, 971, 972, 974, 976, 977, 978, 984, 989, 990, 991, 993, 994, 996, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "usa": [268, 370, 901, 991, 998, 1013, 1014], "usabl": [149, 369, 375, 377, 389, 401, 415, 800, 1032, 1039, 1046, 1047], "usag": [41, 77, 86, 103, 106, 115, 124, 132, 165, 186, 187, 239, 243, 245, 262, 263, 298, 300, 306, 335, 352, 362, 370, 374, 375, 378, 382, 383, 385, 389, 390, 393, 401, 407, 411, 412, 417, 418, 439, 443, 445, 449, 453, 460, 463, 470, 488, 494, 496, 523, 534, 535, 541, 549, 561, 562, 591, 609, 640, 648, 658, 659, 660, 666, 667, 668, 669, 676, 677, 678, 679, 680, 690, 778, 781, 792, 793, 860, 861, 863, 904, 906, 909, 912, 913, 914, 915, 923, 948, 990, 991, 993, 1000, 1001, 1002, 1004, 1016, 1023, 1024, 1027, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "usd": 248, "use_encoded_valu": [143, 154, 188, 248, 315, 878, 1011, 1044], "use_group": 264, "use_idf": [412, 415, 590, 591], "usecas": [319, 322, 324, 407, 562], "useless": [54, 142, 272, 381, 416, 515, 528, 658, 712, 997, 1011, 1041], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 88, 101, 120, 140, 147, 179, 183, 186, 189, 199, 231, 245, 259, 266, 276, 278, 286, 289, 295, 296, 299, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 358, 362, 363, 369, 373, 374, 375, 377, 379, 381, 382, 383, 387, 388, 389, 393, 395, 398, 401, 405, 407, 408, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 424, 430, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 944, 948, 990, 991, 997, 998, 1000, 1001, 1002, 1004, 1011, 1015, 1020, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "user_guid": 43, "user_r": 408, "userguid": 1039, "usernam": 393, "userscript": 383, "userwarn": [79, 95, 239, 380, 712, 1011, 1038, 1040, 1045, 1050], "ushtanit": [1044, 1045], "using_kernels_tut": 161, "usp": 44, "usr": 373, "usual": [43, 52, 75, 109, 110, 112, 145, 146, 148, 154, 185, 187, 198, 211, 212, 262, 263, 266, 269, 278, 279, 283, 310, 321, 339, 358, 362, 363, 373, 375, 377, 379, 383, 387, 388, 389, 393, 398, 404, 407, 408, 411, 412, 414, 415, 416, 449, 455, 538, 540, 542, 547, 559, 560, 607, 608, 630, 640, 658, 659, 666, 667, 668, 676, 677, 678, 692, 726, 758, 806, 828, 832, 904, 921, 948, 990, 991, 993, 996, 997, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1011, 1015, 1016, 1017, 1047], "utc": 1001, "utf": [350, 352, 415, 486, 503, 582, 588, 589, 591], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 88, 89, 94, 132, 134, 147, 154, 189, 204, 211, 219, 227, 233, 241, 245, 247, 257, 275, 277, 289, 311, 318, 331, 339, 343, 350, 363, 369, 370, 375, 376, 377, 378, 387, 388, 389, 403, 406, 407, 408, 411, 412, 415, 436, 442, 443, 446, 448, 452, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 581, 582, 588, 590, 591, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 690, 799, 800, 801, 802, 807, 809, 818, 822, 824, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 851, 854, 855, 861, 862, 864, 867, 869, 870, 871, 876, 883, 884, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 996, 999, 1001, 1002, 1011, 1012, 1020, 1025, 1027, 1032, 1033, 1035, 1036, 1038, 1039], "utilis": 1038, "utkarsh": [1038, 1039, 1040, 1041], "utl": 416, "utstat": 644, "uttam": 1045, "uv": [120, 412], "uw": [168, 372, 1044], "uwha": [1045, 1046], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 88, 91, 102, 107, 108, 111, 113, 114, 115, 120, 122, 123, 127, 138, 140, 141, 146, 147, 148, 164, 170, 183, 184, 189, 192, 201, 202, 209, 210, 211, 212, 215, 216, 226, 235, 242, 255, 256, 259, 260, 261, 265, 286, 300, 316, 318, 336, 351, 358, 363, 367, 372, 375, 381, 383, 389, 403, 404, 405, 409, 410, 412, 415, 416, 430, 440, 444, 451, 461, 462, 463, 464, 469, 472, 473, 474, 475, 476, 481, 482, 483, 496, 512, 524, 530, 531, 537, 541, 545, 546, 550, 552, 554, 556, 558, 560, 562, 564, 565, 568, 570, 581, 589, 593, 594, 600, 606, 611, 630, 631, 634, 635, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 676, 678, 679, 688, 695, 699, 701, 704, 717, 736, 737, 739, 754, 755, 757, 788, 795, 800, 805, 812, 814, 826, 830, 832, 833, 834, 837, 838, 839, 847, 855, 857, 860, 862, 864, 865, 868, 871, 877, 878, 879, 884, 885, 888, 898, 904, 905, 906, 907, 909, 910, 913, 915, 919, 995, 996, 997, 998, 1001, 1002, 1003, 1006, 1009, 1011, 1015, 1016, 1018, 1022, 1027, 1032, 1035, 1036, 1037, 1040, 1042, 1043, 1046, 1047, 1050], "v0": [470, 471, 477, 512, 588, 589, 591, 800, 814, 863, 866, 1033, 1040, 1041, 1042], "v1": [263, 323, 369, 393, 797, 798, 1044, 1047, 1048, 1049, 1050], "v10": 263, "v11": 263, "v12": 263, "v13": 263, "v14": 263, "v15": 263, "v16": 263, "v17": 263, "v18": 263, "v19": 263, "v2": [263, 370, 497, 664, 685, 686, 997], "v20": 263, "v21": 263, "v22": 263, "v23": 263, "v24": 263, "v25": 263, "v26": 263, "v27": 263, "v28": 263, "v3": 263, "v4": 263, "v5": [263, 1040], "v6": 263, "v7": 263, "v8": 263, "v9": 263, "v_": [404, 415], "v_1": 404, "v_2": 404, "v_i": 1006, "v_ih_j": 1006, "v_init": 543, "v_j": [407, 755, 1006], "v_k": [410, 412, 531, 537, 545, 546], "v_measur": [736, 795], "v_measure_scor": [2, 57, 72, 73, 82, 91, 324, 351, 407, 717, 736, 737, 757, 1001, 1041], "v_new": 860, "va": [47, 144, 166, 280, 297, 299, 345], "vac": 286, "vacaliuc": [1040, 1041], "vacat": 370, "vachan": 1043, "vadim": [1040, 1044, 1045], "vaerenbergh": [1047, 1048], "vaggi": [1034, 1035], "vaillant": 1044, "val": [105, 223, 269, 950], "val_errors_with": 144, "val_errors_without": 144, "val_pr": 144, "val_scor": 145, "vale": 1042, "valencia": [1046, 1048], "valentin": [1035, 1037, 1047, 1048], "valero": 51, "valgrind": 378, "valid": [2, 47, 52, 53, 63, 64, 87, 88, 89, 90, 103, 104, 106, 107, 109, 113, 127, 132, 138, 140, 142, 143, 144, 145, 146, 149, 158, 162, 165, 166, 168, 178, 183, 186, 188, 192, 197, 198, 199, 200, 206, 208, 211, 213, 219, 229, 245, 247, 251, 256, 259, 261, 266, 269, 270, 271, 273, 275, 276, 277, 278, 281, 282, 283, 284, 286, 293, 307, 310, 315, 318, 320, 325, 331, 339, 346, 354, 356, 363, 370, 375, 378, 387, 388, 389, 401, 402, 405, 407, 408, 409, 412, 413, 414, 415, 416, 421, 423, 436, 441, 442, 444, 445, 446, 448, 449, 456, 462, 463, 467, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 493, 501, 502, 504, 515, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 575, 577, 582, 583, 589, 593, 594, 597, 602, 632, 634, 638, 639, 640, 641, 642, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 692, 699, 701, 702, 706, 713, 728, 762, 765, 774, 778, 779, 780, 785, 792, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 838, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 870, 876, 884, 896, 897, 899, 900, 902, 904, 906, 909, 911, 912, 913, 914, 915, 921, 923, 930, 931, 932, 933, 934, 942, 955, 957, 960, 984, 985, 986, 987, 988, 989, 991, 1000, 1001, 1002, 1004, 1005, 1009, 1011, 1013, 1015, 1016, 1017, 1021, 1022, 1025, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "valid_metr": [844, 845, 1004, 1048], "valid_scor": 996, "validate_data": 2, "validate_metadata": [245, 957], "validate_separ": 989, "validation_curv": [2, 324, 346, 398, 823, 996, 1039, 1040, 1041, 1044, 1048], "validation_fract": [144, 149, 219, 321, 414, 559, 560, 561, 562, 666, 667, 668, 676, 678, 861, 862, 1015, 1040, 1046], "validation_score_": [149, 561, 562], "validation_scores_": [861, 862, 1047], "validationcurvedisplai": [2, 282, 996, 1048], "validationerror": 1046, "vallei": 315, "vall\u00e9": 1039, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 68, 72, 75, 77, 79, 80, 86, 88, 93, 94, 95, 99, 103, 105, 107, 109, 111, 113, 120, 123, 126, 130, 132, 134, 136, 138, 139, 140, 141, 143, 146, 147, 150, 151, 153, 154, 163, 164, 166, 167, 170, 173, 174, 176, 178, 185, 186, 187, 188, 189, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 208, 209, 211, 212, 213, 215, 217, 226, 229, 230, 233, 234, 238, 239, 240, 241, 242, 243, 244, 248, 251, 252, 254, 260, 262, 263, 265, 267, 269, 270, 272, 274, 275, 276, 278, 280, 281, 282, 283, 289, 292, 301, 302, 304, 305, 307, 309, 310, 311, 312, 313, 314, 315, 316, 320, 326, 331, 339, 343, 344, 346, 350, 351, 352, 354, 356, 358, 362, 363, 364, 367, 368, 369, 370, 372, 376, 377, 378, 380, 381, 382, 384, 387, 388, 389, 392, 393, 398, 404, 405, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 489, 490, 493, 496, 497, 498, 501, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 769, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 811, 812, 814, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 925, 927, 928, 929, 930, 931, 934, 935, 936, 938, 940, 948, 950, 957, 960, 961, 962, 963, 964, 976, 977, 978, 990, 993, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1015, 1016, 1022, 1023, 1025, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "valuabl": [144, 263, 375, 991, 1025], "valuat": 414, "value_count": [43, 52, 187, 263, 283, 286], "value_kei": [387, 919], "value_typ": [417, 617], "valueerror": [2, 245, 246, 377, 381, 398, 467, 577, 603, 617, 635, 671, 714, 836, 854, 863, 869, 883, 929, 931, 933, 934, 985, 986, 987, 1011, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050], "values_format": [697, 1042], "vamsi": 1047, "van": [0, 369, 396, 409, 468, 473, 534, 627, 692, 696, 991, 998, 1001, 1007, 1025, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "vandana": 1043, "vander": 194, "vandermond": [212, 1011], "vanderpla": [0, 397, 1019, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "vang": 1045, "vanilla": [211, 403, 406, 407, 446, 448, 459, 629], "vanilla_model": 263, "vanilla_model_coef": 283, "vanrel": 1038, "vanschoren": [369, 1044], "vapnik": [593, 594], "var": [115, 116, 137, 168, 194, 269, 372, 376, 416, 641, 645, 906, 907, 908, 909, 910, 1001, 1040], "var_": [534, 842, 884, 1045], "var_smooth": [842, 1040], "varanasi": [1032, 1035], "vardhan": 1036, "varepsilon": [407, 1015, 1016], "vari": [46, 52, 64, 67, 70, 79, 80, 88, 95, 98, 107, 118, 140, 141, 142, 152, 161, 167, 172, 174, 183, 186, 187, 189, 200, 201, 203, 204, 206, 209, 218, 236, 243, 248, 259, 265, 269, 272, 283, 303, 309, 311, 312, 314, 324, 327, 333, 339, 342, 344, 358, 362, 364, 370, 389, 401, 440, 444, 445, 500, 508, 514, 515, 522, 559, 560, 564, 565, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 681, 684, 703, 763, 819, 823, 828, 830, 831, 861, 865, 869, 884, 901, 909, 912, 913, 974, 993, 996, 997, 1001, 1004, 1005, 1014, 1017, 1022, 1025, 1039, 1040, 1048], "variabl": [2, 43, 48, 50, 51, 52, 72, 102, 137, 141, 143, 146, 147, 149, 163, 168, 177, 178, 181, 182, 187, 188, 191, 197, 201, 211, 215, 216, 229, 233, 245, 248, 260, 263, 269, 272, 279, 286, 288, 314, 315, 316, 358, 362, 364, 370, 372, 373, 375, 377, 379, 380, 383, 389, 398, 403, 407, 408, 409, 410, 412, 414, 415, 416, 449, 481, 482, 483, 486, 499, 501, 508, 515, 532, 534, 536, 541, 544, 553, 559, 560, 604, 606, 607, 608, 640, 650, 651, 654, 655, 661, 682, 683, 695, 709, 747, 801, 802, 805, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 824, 825, 826, 827, 829, 832, 836, 837, 867, 878, 881, 885, 893, 905, 990, 991, 993, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1011, 1015, 1017, 1020, 1021, 1032, 1037, 1040, 1042, 1045, 1047], "varianc": [2, 37, 43, 44, 52, 64, 79, 88, 90, 95, 105, 109, 111, 115, 116, 120, 121, 122, 125, 126, 127, 128, 130, 133, 148, 149, 177, 183, 186, 192, 194, 196, 197, 201, 211, 213, 216, 229, 259, 263, 266, 269, 272, 278, 279, 283, 298, 304, 309, 314, 326, 351, 358, 367, 371, 384, 404, 405, 407, 409, 410, 411, 412, 413, 414, 419, 440, 444, 448, 462, 521, 524, 532, 533, 534, 541, 544, 549, 550, 555, 556, 558, 559, 560, 565, 603, 607, 608, 611, 625, 643, 644, 645, 652, 656, 657, 660, 662, 672, 673, 674, 675, 676, 687, 710, 728, 785, 797, 798, 842, 853, 868, 874, 880, 882, 884, 890, 892, 894, 895, 913, 915, 975, 976, 977, 981, 995, 996, 997, 999, 1004, 1005, 1006, 1009, 1013, 1015, 1016, 1017, 1018, 1022, 1023, 1027, 1032, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "variance_weight": [728, 785, 1001], "variances_": 603, "variancethreshold": [2, 416, 869, 991, 1035, 1042, 1045, 1048], "variant": [2, 64, 78, 120, 180, 182, 183, 269, 321, 322, 351, 352, 381, 407, 410, 412, 415, 417, 448, 459, 489, 493, 494, 512, 515, 543, 559, 560, 565, 615, 619, 622, 623, 627, 630, 638, 639, 641, 645, 672, 704, 801, 805, 807, 808, 809, 818, 826, 847, 865, 901, 991, 997, 998, 999, 1000, 1001, 1003, 1004, 1015, 1021, 1022, 1032, 1040], "variat": [2, 43, 46, 51, 72, 98, 118, 151, 168, 175, 176, 182, 183, 186, 216, 253, 255, 260, 266, 280, 288, 299, 319, 339, 372, 401, 411, 412, 442, 446, 458, 536, 643, 672, 674, 675, 797, 798, 818, 819, 821, 990, 1001, 1011, 1014, 1017, 1020, 1022, 1026, 1027, 1035, 1037, 1038], "variegatu": [50, 302, 370, 498], "variet": 315, "varieti": [25, 62, 181, 256, 315, 339, 383, 407, 409, 415, 643, 1004, 1017, 1020, 1025, 1034, 1047, 1048], "varimax": [130, 412, 532, 1044], "variou": [4, 41, 43, 51, 71, 72, 74, 88, 89, 91, 93, 94, 95, 112, 115, 123, 183, 186, 192, 219, 221, 230, 231, 232, 233, 242, 286, 289, 305, 313, 319, 328, 329, 350, 352, 357, 358, 362, 369, 370, 371, 372, 375, 377, 380, 388, 390, 405, 407, 409, 436, 440, 471, 502, 514, 515, 525, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 594, 602, 647, 651, 653, 655, 658, 661, 663, 665, 666, 668, 673, 675, 676, 691, 692, 699, 800, 803, 804, 806, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 864, 904, 905, 990, 991, 998, 1001, 1004, 1008, 1011, 1015, 1017, 1020, 1022, 1024, 1025, 1032, 1035, 1036, 1049], "varma": 1041, "varoquaux": [0, 390, 396, 1019, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "varun": [1038, 1039, 1040, 1046, 1047], "varunchaduvula": 1050, "vasani": 1043, "vasilei": [1025, 1039], "vasileva": 1046, "vasiloudi": 1037, "vassard": 1046, "vassilvitskii": [407, 446, 459], "vast": [263, 375], "vastli": 314, "vathsala": [1039, 1040, 1041, 1042], "vatsan": 1038, "vavrova": 1039, "vazelh": [1040, 1041, 1042], "vazirgianni": 407, "vb": 536, "vbgmm": [1032, 1036, 1038], "vc": 373, "vcvarsal": 373, "vd": 1050, "ve": [351, 375, 415, 1025, 1039], "veal": 57, "veb2009": 407, "veb2010": 407, "vec": [120, 415, 538, 540, 547], "veclib": [362, 387], "vect": [47, 102, 270, 332, 415], "vect__": 270, "vect__max_df": 270, "vect__min_df": 270, "vect__ngram_rang": 270, "vect__norm": 270, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 104, 120, 122, 123, 164, 170, 178, 195, 215, 216, 223, 227, 243, 244, 251, 267, 269, 270, 274, 295, 307, 309, 326, 333, 335, 336, 339, 340, 341, 342, 343, 344, 346, 348, 351, 362, 364, 370, 380, 381, 384, 387, 389, 404, 405, 407, 409, 410, 411, 412, 414, 417, 418, 419, 436, 442, 443, 444, 446, 448, 449, 450, 452, 463, 464, 466, 467, 481, 482, 483, 484, 486, 488, 497, 509, 512, 521, 524, 531, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 551, 552, 567, 568, 569, 570, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 631, 638, 640, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 691, 692, 693, 695, 699, 719, 735, 763, 768, 769, 770, 771, 773, 774, 775, 777, 778, 799, 800, 803, 804, 814, 822, 828, 831, 832, 833, 839, 840, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 869, 871, 876, 884, 888, 891, 902, 904, 905, 906, 907, 908, 909, 910, 911, 930, 945, 947, 948, 963, 969, 990, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1011, 1015, 1017, 1022, 1023, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1043, 1045, 1050], "vectori": [389, 1042], "vectorizer2": 588, "vectorizer_param": 332, "vectorizermixin": 1042, "vectorizing_tim": 47, "vectors_test": 370, "ved": 1049, "vedaldi": [638, 993], "veenhui": [1047, 1048, 1049, 1050], "veerkhar": 1047, "veerlosar": 1042, "veghit": 1048, "vehag": [211, 229], "vehbrand": [211, 229], "vehga": [211, 229], "vehicl": [211, 229], "vehpow": [211, 229], "vel": 372, "velkov": 1034, "veloc": 375, "vembu": 405, "vempati": 993, "vendor": [245, 1037, 1040, 1041], "venezuela": [50, 302, 370, 498], "venkat": [0, 397], "venkatachalam": [1042, 1043, 1044, 1045, 1046, 1049, 1050], "venkatesh": 1042, "venna": 696, "venthur": 1040, "venu": [0, 389], "venv": [373, 393], "vera": [1046, 1047], "verbos": [49, 77, 83, 87, 97, 102, 104, 106, 154, 270, 306, 307, 309, 321, 332, 350, 373, 379, 389, 439, 442, 446, 448, 451, 453, 458, 461, 463, 466, 470, 471, 477, 531, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 593, 594, 627, 632, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 692, 694, 765, 778, 797, 798, 800, 803, 804, 806, 814, 823, 825, 826, 827, 828, 829, 831, 833, 835, 838, 853, 860, 861, 862, 863, 864, 865, 866, 901, 904, 905, 906, 907, 908, 909, 910, 966, 1021, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1050], "verbose_feature_names_out": [143, 186, 187, 188, 252, 315, 321, 322, 323, 325, 408, 463, 466, 863, 1045, 1049, 1050], "verbose_interv": [797, 798], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 83, 85, 93, 95, 111, 112, 113, 115, 118, 123, 146, 152, 159, 175, 181, 186, 187, 188, 201, 211, 212, 213, 216, 219, 229, 235, 238, 244, 245, 248, 254, 263, 271, 272, 275, 276, 278, 279, 289, 306, 309, 321, 328, 331, 339, 343, 348, 350, 352, 358, 362, 370, 374, 375, 380, 381, 383, 387, 388, 389, 401, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 441, 446, 451, 461, 470, 471, 477, 500, 504, 510, 541, 557, 558, 561, 562, 564, 565, 567, 568, 589, 590, 622, 650, 651, 654, 655, 656, 664, 682, 683, 685, 691, 692, 695, 705, 743, 746, 792, 797, 800, 802, 808, 810, 814, 817, 820, 844, 845, 869, 873, 874, 875, 884, 896, 897, 906, 909, 912, 913, 914, 915, 923, 948, 990, 993, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1032, 1037, 1038, 1040, 1043, 1045, 1047, 1048, 1049], "verif": [370, 1001, 1025], "verifi": [86, 93, 132, 149, 186, 211, 375, 380, 401, 403, 491, 984, 1004], "verlag": 696, "vermeil": 1040, "veronda": 1033, "verrier": 1047, "versa": [186, 266, 350, 407, 417, 441, 607, 608, 833, 1036], "versatil": [417, 1016, 1025], "versicolor": [126, 278, 279, 504], "versicolour": [128, 372], "version": [2, 7, 43, 66, 80, 86, 88, 103, 120, 125, 134, 149, 172, 182, 187, 188, 191, 197, 209, 212, 219, 225, 227, 245, 248, 252, 288, 306, 314, 318, 319, 320, 321, 323, 324, 325, 326, 339, 350, 362, 370, 374, 376, 377, 378, 379, 381, 383, 384, 387, 389, 390, 393, 394, 398, 400, 401, 407, 408, 410, 412, 414, 415, 417, 418, 419, 425, 427, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 508, 509, 510, 512, 514, 522, 523, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 707, 708, 709, 711, 713, 714, 716, 718, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 739, 740, 741, 742, 743, 746, 753, 754, 757, 758, 759, 761, 766, 767, 769, 778, 782, 783, 784, 785, 787, 789, 790, 791, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 813, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 892, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 928, 930, 931, 942, 943, 947, 948, 956, 957, 958, 959, 960, 963, 966, 967, 970, 975, 981, 986, 987, 989, 990, 993, 995, 998, 1001, 1003, 1005, 1007, 1009, 1014, 1015, 1017, 1020, 1021, 1024, 1028, 1030], "versionchang": 375, "versionwarn": 379, "versu": [67, 122, 133, 142, 154, 161, 172, 183, 186, 192, 220, 226, 238, 243, 244, 246, 257, 261, 264, 286, 295, 297, 311, 327, 332, 335, 336, 338, 339, 343, 407, 411, 414, 417, 504, 534, 556, 610, 631, 639, 658, 659, 666, 668, 674, 675, 676, 677, 783, 800, 805, 826, 836, 865, 900, 901, 908, 909, 913, 990, 997, 1001, 1002, 1007, 1014, 1015, 1016, 1022, 1040], "vert": [147, 188, 189, 318, 1015], "vertex": [55, 63, 407, 452, 1045], "vertic": [45, 55, 93, 145, 189, 201, 242, 243, 273, 288, 309, 312, 344, 345, 389, 404, 407, 412, 515, 697, 781], "verticalalign": [51, 63, 74, 75], "vese": 1044, "vesteghem": 1042, "veto": 390, "vettigli": 1041, "vga": 57, "vh": 948, "vi": [45, 47, 370, 699, 1040, 1043], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 367, 372, 373, 376, 377, 379, 383, 387, 388, 389, 390, 393, 398, 404, 405, 407, 408, 410, 411, 412, 416, 417, 436, 501, 535, 539, 541, 543, 546, 559, 560, 567, 568, 597, 611, 616, 621, 624, 627, 638, 639, 640, 641, 656, 666, 668, 671, 673, 676, 687, 689, 692, 693, 709, 800, 814, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 842, 850, 861, 863, 864, 865, 884, 885, 990, 995, 997, 998, 1000, 1001, 1002, 1008, 1009, 1015, 1016, 1021, 1022, 1025, 1027, 1032, 1036, 1037, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "viacheslav": 1038, "viard": 1043, "vibrantabhi19": 1039, "vicdemand": 149, "vice": [186, 266, 350, 407, 417, 441, 607, 608, 833, 1036], "vicent": [1045, 1046, 1047], "vicpric": 149, "victoireloui": 1046, "victor": [407, 451, 461, 1039, 1042], "victoria": 149, "video": [323, 369, 378, 503, 1002, 1025, 1027], "vie": 1038, "viega": 1001, "view": [43, 77, 80, 109, 122, 149, 187, 250, 362, 364, 375, 407, 415, 536, 645, 657, 844, 845, 919, 997, 998], "view_init": [187, 231, 233, 235], "viewabl": 375, "vighnesh": [1037, 1038, 1040], "vignesh": 1048, "vigni": 1049, "vijai": [1025, 1035], "vijalapuram": 1040, "vijeth": [1048, 1049], "vijitbenjaronk": [1039, 1040], "vika": [1044, 1046], "vikram": [1038, 1047, 1048], "vikrant": 1046, "vila": [1042, 1044], "vilhelm": [1039, 1040], "villalba": [1037, 1040, 1044], "villanova": [1044, 1045], "villaz\u00f3n": 1044, "villu": 1038, "vil\u00e9m": 1045, "vinayak": [1036, 1037, 1038, 1040, 1041, 1047, 1048], "vincent": [0, 397, 1025, 1032, 1034, 1036, 1037, 1039, 1042, 1047, 1048, 1049], "vineet": 1050, "vineyard": 315, "vinh": [407, 704], "vinh10a": 407, "viniciu": [1044, 1045], "vinit": 1040, "vink": [1043, 1045], "vinod": 1040, "vin\u00edciu": 1040, "viola": [370, 1040], "violat": [62, 339, 383, 387, 389, 635, 934, 1008, 1015, 1017], "violet": [127, 1048], "violeta": 1044, "vipin": 407, "viraj": 1040, "virchan": 1050, "virgil": [0, 397, 1032, 1033, 1035], "virgilefritsch": 1032, "virginica": [126, 128, 278, 279, 372, 504, 1001], "viridi": [66, 73, 289, 697], "viridis_r": 270, "virshup": 1049, "virtanen": 1037, "virtual": [376, 393, 411, 1025], "virtualenv": [373, 375], "visag": 1025, "visconti": 1036, "vishaal": [1040, 1041], "vishal": 1047, "vishwakarma": 1046, "visibl": [52, 186, 187, 213, 348, 369, 375, 407, 860, 1006, 1037, 1047], "vision": [534, 758, 759, 993, 997, 999, 1017, 1020, 1025, 1033], "visit": [357, 375, 1008, 1024], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 80, 82, 85, 90, 93, 94, 111, 115, 119, 122, 124, 127, 129, 139, 140, 147, 149, 150, 152, 156, 157, 166, 178, 182, 183, 187, 189, 197, 203, 208, 211, 213, 229, 231, 232, 236, 237, 240, 243, 249, 250, 259, 261, 262, 265, 266, 270, 271, 274, 276, 278, 279, 294, 298, 299, 301, 303, 305, 309, 313, 314, 318, 320, 329, 343, 367, 371, 373, 381, 382, 404, 409, 411, 412, 413, 414, 437, 440, 444, 445, 453, 470, 471, 496, 502, 504, 507, 510, 514, 522, 532, 534, 541, 564, 566, 631, 633, 645, 658, 689, 692, 697, 698, 700, 701, 702, 718, 727, 782, 789, 801, 802, 805, 806, 817, 818, 819, 820, 821, 823, 830, 861, 865, 869, 873, 874, 876, 880, 881, 882, 884, 904, 906, 907, 909, 910, 918, 944, 996, 998, 999, 1004, 1005, 1007, 1008, 1011, 1017, 1020, 1022, 1027, 1035, 1042, 1043, 1044, 1046], "visualis": [120, 123, 130, 246, 544, 676, 678, 801, 802, 805, 817, 818, 819, 820, 821, 1004, 1021], "visualize_group": 264, "vitor": 1047, "vivek": [1039, 1040, 1041, 1049], "viz": [279, 382], "vjacheslav": 1036, "vlad": [0, 120, 396, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041], "vladimir": [535, 948, 997, 1042, 1046, 1049], "vlahava": [720, 740, 1001], "vlajic": [1043, 1044, 1050], "vlasio": [1025, 1039], "vlasovet": 1045, "vlb": 57, "vliet": 1044, "vline": [109, 122, 199, 201, 212, 269, 282, 310], "vlines_": 632, "vlo": 51, "vmax": [66, 84, 113, 120, 123, 130, 173, 176, 193, 197, 203, 227, 243, 258, 264, 306, 339], "vmin": [66, 75, 113, 120, 123, 130, 173, 176, 193, 197, 203, 227, 243, 258, 264, 306, 339], "vnherdeiro": 1042, "vo": [1038, 1046], "voc": 1001, "vocabulari": [118, 226, 350, 351, 387, 415, 588, 589, 590, 591, 1003, 1032, 1034, 1037, 1040, 1043, 1045], "vocabulary_": [352, 415, 581, 588, 591, 1032], "void": 376, "vol": [64, 178, 197, 263, 275, 372, 407, 473, 559, 560, 628, 635, 645, 664, 685, 686, 797, 829, 841, 991, 1003, 1004], "volgen": [404, 719], "voltag": 57, "volum": [0, 99, 110, 168, 175, 370, 372, 407, 409, 472, 534, 769, 997, 1016, 1025], "volume11": 407, "volume2": 676, "volume7": [666, 667], "volunt": 383, "voluntari": 350, "von": [407, 451, 461, 691, 1039, 1040], "voronoi": [80, 99, 407], "voss": 1040, "vote": [2, 14, 133, 135, 140, 153, 154, 155, 156, 183, 208, 288, 343, 389, 390, 501, 555, 556, 557, 560, 564, 565, 569, 570, 657, 832, 846, 847, 852, 854, 1002, 1004, 1022, 1023, 1027, 1032, 1035, 1037, 1042], "votingclassifi": [2, 63, 64, 133, 183, 220, 336, 355, 398, 414, 504, 564, 570, 631, 658, 842, 846, 909, 912, 990, 991, 1022, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1050], "votingregressor": [2, 157, 398, 414, 569, 991, 1041, 1042, 1043, 1046, 1049, 1050], "votingregressorifittedvotingregressor": 157, "voxel": [80, 99, 585], "vp": 1025, "vq": 91, "vqean3": [1040, 1041], "vredevoogd": [1034, 1035], "vrigazov": 1047, "vrishank": [1039, 1040], "vs_buildtool": 373, "vstack": [51, 63, 90, 98, 173, 174, 196, 254, 258, 289, 302, 344, 631, 1002, 1040], "vstolbunov": 1037, "vt": 550, "vufg": 1040, "vukolov": [1040, 1041], "vulner": 401, "vuw": 530, "vvz2010": 993, "vx": 72, "vya": [1040, 1041, 1042], "vyom": [1047, 1048], "vz2010": 993, "v\u00e1zquez": 1035, "v\u0103n": 1047, "w": [2, 45, 51, 53, 66, 70, 75, 77, 91, 97, 129, 168, 181, 204, 210, 215, 228, 245, 246, 254, 255, 256, 259, 260, 280, 307, 321, 322, 343, 344, 346, 352, 358, 363, 370, 372, 381, 401, 407, 408, 412, 414, 415, 419, 424, 430, 436, 464, 468, 471, 473, 481, 482, 483, 523, 538, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 588, 589, 591, 594, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 699, 725, 726, 756, 799, 800, 814, 822, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 851, 854, 855, 861, 862, 897, 899, 900, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 945, 950, 997, 1001, 1005, 1006, 1011, 1013, 1015, 1016, 1042, 1046, 1047, 1048, 1049], "w0": 118, "w1": [118, 414, 657], "w1992": 414, "w2": 414, "w3": 414, "w_": [412, 646, 647, 652, 653, 660, 661, 662, 663, 681, 684, 997, 1001, 1003, 1006], "w_0": 997, "w_1": [414, 997, 1005], "w_1x_1": 1005, "w_2": [414, 997, 1005], "w_2x_2": 1005, "w_3": 997, "w_4": 997, "w_5": 997, "w_i": [414, 992, 1001], "w_ij": 660, "w_init": [419, 533], "w_intercept": [904, 905], "w_j": [646, 652, 1001, 1015], "w_k": [407, 414, 997], "w_l": 997, "w_mx_m": 1005, "w_n": 414, "w_new": 412, "w_p": 997, "w_pad": [120, 142, 355], "w_x_1": [904, 905], "w_x_n": [904, 905], "wa": [0, 43, 47, 53, 64, 75, 102, 103, 111, 116, 118, 151, 154, 168, 179, 186, 191, 215, 235, 245, 248, 260, 262, 263, 265, 267, 269, 275, 276, 283, 286, 306, 314, 318, 319, 323, 330, 331, 350, 352, 357, 358, 362, 370, 372, 373, 375, 379, 380, 389, 393, 398, 401, 403, 404, 406, 407, 410, 411, 415, 419, 431, 439, 440, 441, 442, 444, 445, 446, 448, 449, 453, 456, 459, 463, 467, 468, 473, 481, 482, 483, 484, 515, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 658, 659, 664, 672, 674, 679, 685, 686, 688, 689, 692, 713, 729, 730, 778, 783, 784, 787, 797, 798, 800, 803, 804, 814, 827, 829, 841, 848, 851, 853, 856, 860, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 893, 896, 897, 901, 902, 928, 930, 931, 942, 943, 967, 988, 989, 990, 991, 1000, 1001, 1004, 1007, 1011, 1014, 1017, 1020, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "wadawson": 1036, "wadsworth": [912, 913, 1017], "waelbenamara": 1043, "wagner": 1046, "wai": [0, 2, 37, 43, 55, 64, 83, 93, 103, 106, 139, 145, 150, 152, 168, 177, 186, 188, 189, 212, 215, 216, 226, 229, 240, 241, 244, 245, 248, 249, 264, 269, 276, 278, 309, 310, 321, 323, 324, 358, 362, 363, 364, 369, 371, 373, 374, 377, 378, 379, 383, 384, 389, 390, 393, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 422, 442, 443, 450, 451, 452, 458, 459, 461, 462, 468, 496, 555, 556, 563, 572, 589, 599, 600, 611, 632, 666, 667, 676, 677, 678, 699, 704, 706, 717, 736, 737, 754, 755, 757, 763, 774, 778, 788, 795, 825, 833, 850, 871, 877, 882, 888, 914, 915, 971, 974, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1020, 1021, 1024, 1025, 1032, 1034, 1040, 1045, 1046, 1050], "waijean": 1045, "wainwright": [721, 723, 724], "waist": 372, "wait": [55, 373, 375, 379, 389, 666, 667, 668, 676, 678, 1044], "waithera": 1042, "wal": 51, "waldo": 323, "wale": 149, "walk": [407, 413, 1035], "walker": 1036, "wall": 407, "wallach": [1036, 1037], "walli": 1040, "wallygauz": 1040, "walsh": [1044, 1046], "walt": [1035, 1036, 1040], "walter": 1038, "walton": 323, "wan": 1040, "wang": [412, 536, 679, 689, 693, 726, 756, 997, 998, 1001, 1035, 1037, 1038, 1039, 1040, 1044, 1047, 1048, 1050], "wangz10": 1037, "want": [0, 30, 43, 51, 58, 61, 62, 63, 88, 97, 103, 168, 182, 186, 211, 212, 213, 245, 248, 260, 263, 269, 284, 286, 292, 306, 333, 336, 350, 358, 362, 363, 364, 373, 374, 375, 376, 377, 379, 380, 381, 387, 388, 389, 390, 393, 398, 401, 405, 406, 407, 408, 409, 414, 415, 416, 500, 503, 504, 510, 535, 549, 654, 655, 656, 658, 659, 666, 668, 674, 675, 676, 764, 799, 822, 850, 853, 869, 876, 897, 904, 990, 997, 1000, 1001, 1002, 1005, 1007, 1011, 1012, 1016, 1020, 1021, 1032, 1046, 1050], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 80, 85, 86, 87, 89, 95, 183, 189, 235, 397, 415, 440, 444, 462, 530, 857, 1022, 1032, 1035, 1037], "ward__n_clust": 87, "ward_tre": [2, 87, 440, 444, 1032, 1036], "wardagglom": 1037, "wardagglomer": 1035, "wardclust": 1035, "wareh": 734, "warm": [378, 389, 531, 537, 543, 545, 546, 610, 653, 659, 666, 667, 668, 676, 677, 678, 997, 1021, 1042, 1044, 1046], "warm_start": [138, 174, 205, 321, 377, 381, 389, 414, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 610, 646, 648, 649, 652, 658, 660, 662, 666, 667, 668, 669, 676, 677, 678, 680, 797, 798, 853, 861, 862, 1007, 1023, 1027, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1046, 1048], "warn": [2, 15, 79, 95, 104, 176, 211, 226, 245, 272, 289, 305, 306, 313, 362, 363, 375, 378, 379, 380, 389, 401, 415, 496, 550, 553, 554, 557, 558, 559, 560, 564, 565, 566, 571, 572, 573, 574, 575, 576, 578, 602, 636, 693, 712, 713, 716, 729, 730, 738, 783, 784, 787, 854, 868, 869, 877, 907, 908, 909, 910, 912, 913, 914, 915, 930, 931, 938, 948, 957, 970, 986, 987, 1001, 1011, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "warn_for": 783, "warn_on_dtyp": 1041, "warn_when_not_sort": 859, "warner": [51, 1047, 1048], "warshal": [688, 998], "warshaw": 1038, "warut": [1039, 1040], "wase": [1049, 1050], "wasn": [102, 245, 1041], "waspa": 538, "wast": [140, 381, 411, 412, 990], "watanab": [1049, 1050], "watch": [52, 363], "watchtheblur": 1044, "water": 50, "waterburi": [1040, 1041], "waterland": 1035, "waterponei": [1038, 1039], "watson": [315, 408], "wattai": 1047, "wav": 369, "wave": [206, 375, 1000], "waveform": 75, "wavelet": [53, 129, 412], "wavfil": 369, "waweru": 1049, "wa\u00ebl": 1050, "wb": [55, 401], "wchathura": 1047, "wclf": 341, "wconnel": 1043, "wdbc": [168, 372], "wderos": 1043, "wdevazelh": 1040, "wdisp": 341, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 86, 88, 89, 90, 91, 95, 97, 98, 99, 102, 103, 104, 105, 107, 109, 111, 112, 113, 116, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 156, 157, 159, 163, 164, 165, 167, 168, 170, 172, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 217, 219, 220, 223, 224, 225, 226, 227, 229, 231, 232, 235, 236, 238, 239, 241, 242, 243, 245, 246, 248, 249, 251, 252, 254, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 387, 388, 389, 390, 398, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 449, 468, 469, 470, 471, 472, 473, 474, 475, 501, 523, 531, 532, 534, 537, 545, 546, 549, 561, 562, 563, 569, 570, 582, 583, 589, 611, 617, 627, 632, 633, 638, 640, 651, 655, 658, 659, 666, 668, 673, 674, 675, 676, 677, 692, 718, 720, 726, 746, 756, 764, 781, 799, 806, 822, 823, 825, 846, 847, 848, 850, 852, 853, 854, 855, 856, 867, 876, 877, 878, 884, 889, 890, 892, 893, 894, 895, 897, 900, 904, 908, 923, 942, 943, 953, 964, 966, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1029, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050], "wea": 405, "weak": [115, 144, 147, 215, 229, 275, 411, 554, 559, 560, 630, 1004, 1025, 1048], "weak_learn": 134, "weak_learners_info": 134, "weak_learners_misclassification_error": 134, "weaker": [107, 561, 562], "weakest": [354, 1017], "weaklearn": 553, "weakli": 99, "weather": [43, 52, 175, 187, 406, 997, 1001], "web": [2, 168, 369, 370, 372, 375, 383, 401, 407, 415, 491, 521, 897, 948, 1001, 1011, 1028, 1032], "weber": 1039, "weblog": 407, "webpag": [55, 191, 375], "websit": [369, 370, 372, 375, 378, 390, 393, 1005, 1015, 1024, 1025, 1033, 1034, 1035], "wed": [43, 149, 187], "weed": 604, "week": [43, 52, 149, 325, 374, 375, 390, 496, 1025, 1046], "weekdai": [43, 187], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 149], "weezel": [1047, 1048], "wegelin": 410, "wehenkel": [414, 557, 558, 565, 566, 914, 915], "wei": [0, 397, 1015, 1032, 1033, 1036, 1037, 1038, 1039, 1041, 1045, 1048], "weibul": 313, "weidemann": 1046, "weigh": [411, 1039], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 87, 102, 130, 146, 155, 156, 164, 165, 174, 175, 182, 183, 186, 192, 197, 201, 203, 211, 215, 216, 218, 221, 222, 223, 225, 226, 227, 229, 245, 250, 254, 258, 263, 267, 272, 276, 278, 292, 301, 302, 303, 304, 305, 307, 314, 316, 318, 321, 325, 326, 328, 329, 334, 339, 341, 343, 344, 346, 347, 350, 351, 352, 357, 358, 371, 372, 384, 387, 389, 406, 407, 409, 410, 412, 413, 416, 418, 424, 430, 436, 439, 442, 443, 445, 446, 448, 452, 458, 459, 462, 463, 464, 466, 468, 473, 481, 482, 483, 496, 515, 524, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 586, 589, 590, 591, 593, 597, 602, 603, 610, 611, 628, 632, 633, 634, 635, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 689, 693, 697, 698, 700, 702, 703, 707, 708, 709, 712, 713, 716, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 736, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 758, 759, 769, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 822, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 866, 869, 883, 884, 885, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 935, 936, 950, 975, 981, 991, 992, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1011, 1014, 1015, 1016, 1017, 1021, 1022, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "weight_concentration_": 797, "weight_concentration_prior": [254, 260, 797, 1000], "weight_concentration_prior_": 797, "weight_concentration_prior_typ": [254, 260, 797, 1000, 1038], "weight_vector": [1032, 1042], "weighted_acc": 398, "weighted_mod": [2, 384], "weighted_n_node_sampl": 357, "weightedmetaregressor": 245, "weights_": [254, 797, 798, 1046], "weights_handl": 224, "weights_init": 798, "weijiadu": 1046, "weinberg": 415, "weinsberg": 1032, "weinstein": 1033, "weisberg": 997, "weiss": [0, 397, 407, 691, 1032], "weitzenfeld": 1025, "weka": 841, "welch": 1038, "welcom": [374, 375, 383, 390, 1021], "welind": 1032, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 86, 90, 91, 95, 102, 109, 116, 126, 134, 135, 137, 140, 144, 146, 152, 154, 168, 175, 177, 185, 186, 187, 188, 191, 197, 199, 204, 209, 211, 212, 213, 215, 219, 231, 232, 233, 236, 238, 242, 245, 248, 256, 263, 269, 276, 278, 280, 286, 289, 292, 294, 295, 296, 316, 319, 320, 321, 322, 323, 324, 325, 326, 343, 346, 350, 351, 352, 356, 358, 370, 372, 374, 375, 379, 381, 383, 384, 387, 388, 389, 390, 401, 405, 407, 409, 411, 412, 414, 416, 418, 421, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 458, 459, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 700, 721, 722, 723, 724, 785, 788, 792, 795, 797, 798, 799, 800, 803, 804, 814, 822, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 946, 947, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1014, 1015, 1017, 1018, 1020, 1021, 1025, 1032, 1033, 1036, 1038, 1039, 1040, 1043, 1050], "wellcom": 0, "wen": 1047, "wenbo": [1042, 1044], "wendi": 1042, "wendling": 1039, "weng": 1016, "wenhao": [1040, 1041], "wenhua": 1038, "wenjian": 1038, "wenliwyan": 1043, "went": [379, 1001], "were": [0, 43, 68, 102, 103, 106, 111, 112, 140, 143, 146, 149, 165, 168, 175, 182, 211, 212, 215, 239, 248, 276, 278, 280, 306, 307, 314, 319, 320, 322, 323, 324, 325, 326, 331, 343, 350, 352, 357, 358, 369, 370, 372, 375, 376, 377, 379, 383, 387, 389, 398, 404, 408, 414, 415, 463, 466, 467, 496, 561, 562, 602, 803, 804, 819, 828, 851, 901, 902, 990, 993, 1001, 1002, 1017, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "weren": [350, 878, 1041], "werman": 1044, "werneck": 1040, "werner": [1039, 1044], "werror": 383, "wersd\u00f6rfer": 1034, "weslei": [590, 730], "westermann": [0, 365, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "western": 415, "weston": [44, 412, 535, 593, 594, 900], "westov": 1040, "wetter": 187, "weyb": 1050, "wfc": 51, "wget": 383, "wh": [412, 538, 540, 547], "wh_i": 412, "what": [0, 2, 43, 48, 51, 52, 75, 85, 86, 116, 121, 125, 142, 185, 186, 201, 217, 219, 227, 240, 245, 252, 306, 350, 352, 354, 358, 363, 370, 373, 375, 376, 377, 379, 381, 383, 388, 389, 390, 392, 406, 407, 413, 414, 415, 503, 536, 588, 589, 591, 646, 652, 696, 889, 890, 892, 893, 894, 895, 912, 913, 914, 915, 1000, 1001, 1002, 1004, 1017, 1021, 1032, 1039, 1050], "whatnot": 350, "whats_new": [379, 383], "wheel": [373, 375, 379, 393, 395, 1042, 1044, 1046], "wheeler": [1043, 1044], "wheelhouse_upload": 379, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 89, 93, 100, 102, 103, 104, 109, 111, 112, 116, 120, 123, 124, 125, 127, 137, 140, 142, 143, 144, 146, 149, 150, 154, 155, 156, 165, 170, 181, 185, 186, 187, 188, 189, 193, 194, 197, 201, 203, 204, 205, 211, 213, 215, 216, 227, 238, 239, 240, 244, 245, 252, 255, 257, 265, 268, 269, 270, 271, 272, 276, 278, 279, 282, 283, 286, 289, 291, 292, 295, 296, 297, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 326, 330, 331, 333, 339, 342, 343, 346, 350, 351, 352, 354, 357, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 423, 430, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 515, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 578, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 712, 713, 716, 727, 728, 729, 730, 732, 734, 735, 738, 746, 748, 751, 754, 755, 757, 761, 763, 767, 768, 769, 771, 774, 778, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 795, 797, 798, 799, 800, 803, 804, 805, 806, 814, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 891, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 923, 925, 926, 929, 930, 931, 938, 942, 946, 947, 948, 949, 951, 952, 953, 958, 961, 963, 969, 989, 990, 991, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1021, 1024, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "whenev": [177, 185, 263, 358, 369, 383, 389, 393, 405, 481, 482, 483, 496, 628, 630, 992, 1000, 1021, 1042], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 86, 88, 90, 111, 116, 118, 120, 123, 129, 130, 134, 136, 138, 140, 143, 144, 146, 149, 151, 165, 166, 168, 170, 176, 179, 182, 186, 193, 197, 204, 212, 215, 220, 221, 222, 224, 228, 229, 231, 233, 234, 238, 239, 242, 245, 246, 248, 250, 260, 263, 265, 266, 269, 271, 275, 276, 278, 280, 281, 283, 286, 288, 307, 309, 311, 312, 313, 314, 315, 316, 318, 320, 321, 326, 329, 330, 337, 343, 346, 347, 348, 350, 354, 355, 358, 362, 363, 364, 369, 371, 372, 374, 375, 377, 379, 381, 382, 383, 387, 388, 389, 390, 393, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 430, 436, 443, 446, 447, 451, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 486, 496, 526, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 582, 583, 584, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 613, 615, 619, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 688, 691, 692, 693, 696, 707, 711, 712, 716, 725, 729, 730, 731, 739, 741, 755, 763, 768, 769, 770, 773, 781, 782, 783, 784, 787, 788, 792, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 847, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 874, 877, 879, 880, 883, 884, 890, 892, 898, 899, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 921, 939, 940, 941, 942, 948, 953, 957, 960, 985, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1015, 1016, 1017, 1021, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "wherea": [52, 70, 86, 100, 111, 150, 225, 248, 270, 271, 272, 278, 292, 314, 343, 346, 347, 364, 390, 411, 414, 443, 445, 565, 658, 659, 802, 818, 832, 993, 1000, 1002, 1004, 1011, 1017, 1045, 1050], "wherein": 389, "whether": [2, 47, 49, 52, 103, 132, 150, 173, 178, 186, 187, 211, 215, 229, 232, 239, 245, 263, 267, 309, 357, 358, 363, 370, 373, 374, 375, 377, 379, 380, 381, 389, 398, 406, 407, 408, 409, 411, 412, 414, 416, 419, 439, 441, 450, 452, 453, 458, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 490, 492, 496, 497, 503, 508, 509, 514, 522, 527, 531, 532, 536, 537, 538, 539, 540, 542, 545, 546, 548, 552, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 581, 588, 589, 590, 591, 597, 602, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 631, 632, 633, 635, 636, 637, 638, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 690, 694, 695, 697, 698, 700, 702, 704, 711, 712, 742, 761, 767, 774, 778, 782, 789, 799, 800, 803, 804, 805, 806, 814, 818, 819, 822, 823, 824, 827, 828, 830, 833, 835, 838, 839, 840, 841, 843, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 861, 862, 868, 885, 891, 904, 905, 906, 907, 908, 909, 910, 916, 918, 920, 921, 922, 923, 924, 928, 930, 931, 932, 934, 942, 943, 947, 948, 956, 957, 973, 984, 988, 989, 990, 991, 996, 997, 1001, 1006, 1007, 1013, 1015, 1016, 1025, 1039, 1040, 1041, 1049], "whi": [186, 188], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 80, 82, 86, 88, 89, 90, 91, 98, 100, 102, 103, 104, 107, 109, 111, 112, 116, 118, 122, 124, 125, 126, 130, 134, 137, 138, 139, 140, 143, 145, 146, 149, 150, 152, 153, 154, 155, 156, 157, 159, 163, 165, 167, 168, 170, 171, 175, 176, 177, 181, 182, 185, 186, 187, 189, 191, 193, 194, 197, 201, 204, 205, 211, 212, 213, 215, 217, 219, 225, 227, 228, 229, 231, 232, 233, 235, 238, 239, 242, 243, 244, 245, 246, 248, 249, 254, 255, 259, 260, 262, 263, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 286, 288, 289, 294, 295, 296, 305, 309, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 339, 343, 346, 348, 350, 351, 352, 354, 356, 357, 358, 362, 363, 364, 367, 369, 370, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 393, 395, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 461, 462, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 486, 523, 531, 532, 533, 534, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 579, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 611, 612, 613, 614, 615, 617, 619, 622, 627, 628, 629, 630, 632, 633, 634, 640, 642, 643, 644, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 680, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 709, 716, 717, 719, 720, 723, 725, 726, 734, 735, 736, 737, 742, 743, 756, 758, 778, 779, 780, 781, 782, 783, 789, 797, 798, 799, 800, 803, 804, 805, 806, 808, 810, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 861, 864, 868, 871, 875, 877, 878, 879, 882, 883, 884, 885, 886, 888, 896, 897, 899, 900, 901, 904, 906, 909, 910, 912, 913, 914, 915, 916, 920, 922, 925, 926, 930, 931, 937, 940, 942, 943, 947, 948, 950, 953, 956, 957, 958, 960, 969, 972, 975, 981, 984, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "whichev": [407, 414, 445, 544, 561, 562, 633, 650, 654, 656, 664, 682, 683, 697], "whidou": 1045, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 88, 95, 99, 102, 105, 107, 118, 124, 125, 134, 137, 140, 141, 144, 149, 151, 154, 168, 171, 176, 178, 179, 181, 185, 186, 187, 188, 191, 193, 195, 197, 200, 201, 204, 206, 211, 213, 215, 227, 238, 241, 242, 245, 246, 255, 256, 260, 262, 263, 264, 268, 269, 270, 272, 276, 277, 278, 279, 280, 282, 291, 309, 310, 311, 314, 315, 316, 318, 321, 324, 325, 336, 339, 350, 352, 357, 358, 363, 367, 368, 369, 370, 371, 374, 375, 377, 379, 380, 381, 383, 384, 387, 389, 390, 401, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 443, 463, 466, 467, 482, 484, 496, 521, 532, 552, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 575, 582, 588, 589, 590, 591, 594, 597, 602, 606, 634, 643, 646, 647, 649, 656, 657, 658, 659, 676, 677, 678, 679, 708, 730, 754, 774, 778, 788, 794, 797, 800, 801, 802, 805, 806, 807, 808, 809, 810, 814, 815, 816, 818, 823, 825, 826, 827, 828, 829, 831, 839, 850, 852, 854, 855, 856, 863, 864, 865, 866, 867, 880, 892, 897, 902, 904, 905, 912, 913, 914, 915, 926, 952, 990, 991, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1011, 1013, 1016, 1017, 1020, 1021, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "whilst": [138, 233], "whisker": 49, "white": [2, 91, 93, 120, 175, 186, 225, 231, 295, 307, 311, 333, 338, 412, 415, 625, 1017, 1032, 1035, 1038, 1042, 1046], "whitekernel": [2, 170, 175, 176, 417, 611, 612, 614, 1043], "whiten": [45, 120, 121, 122, 293, 412, 419, 533, 534, 541, 882, 884, 1011, 1036, 1038, 1046, 1047, 1050], "whiten_solv": [419, 533, 1047, 1050], "whitening_": 533, "whitespac": 415, "whl": 379, "who": [0, 102, 186, 363, 370, 375, 382, 390, 393, 846, 847, 848, 850, 852, 854, 855, 856, 1020, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "whole": [49, 83, 106, 149, 157, 182, 212, 248, 266, 273, 301, 339, 343, 354, 362, 375, 387, 388, 408, 410, 414, 417, 448, 482, 538, 555, 556, 557, 558, 563, 564, 565, 566, 570, 685, 686, 800, 803, 804, 814, 828, 839, 840, 841, 842, 843, 990, 1001, 1011, 1040, 1042], "whose": [2, 88, 110, 111, 112, 168, 175, 211, 239, 337, 370, 383, 384, 389, 405, 407, 409, 414, 416, 417, 420, 436, 437, 438, 447, 460, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 515, 534, 538, 540, 541, 544, 547, 549, 572, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 640, 671, 695, 718, 800, 807, 814, 829, 850, 869, 896, 897, 947, 979, 980, 995, 1002, 1006, 1007, 1008, 1016, 1035, 1040, 1041, 1043, 1046], "why": [64, 72, 85, 120, 134, 140, 149, 186, 188, 191, 201, 263, 266, 269, 286, 350, 351, 375, 383, 389, 407, 409, 412, 418, 443, 446, 450, 1001, 1003, 1016, 1035], "wick": 1044, "wide": [64, 93, 94, 126, 137, 242, 310, 387, 407, 412, 415, 990, 997, 1020, 1025, 1032, 1034, 1048], "widehat": 173, "wider": [52, 213, 415, 917, 997], "widetild": 1017, "width": [47, 49, 52, 86, 111, 122, 123, 126, 128, 129, 130, 137, 142, 143, 146, 156, 164, 172, 178, 252, 254, 268, 292, 309, 311, 312, 315, 320, 323, 336, 372, 408, 437, 438, 451, 463, 493, 494, 506, 521, 586, 869, 917, 1011, 1015, 1017, 1040], "wiesel": [409, 420, 474], "wignal": [1035, 1036, 1042, 1043], "wijewardena": [0, 1035, 1036, 1037], "wiki": [55, 61, 381, 383, 595, 636, 668, 671, 695, 705, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 997, 1001, 1017], "wikic": 993, "wikipedia": [37, 42, 61, 183, 383, 407, 595, 607, 608, 636, 656, 668, 671, 682, 683, 695, 704, 705, 707, 709, 712, 716, 718, 726, 729, 730, 731, 734, 735, 738, 743, 756, 783, 785, 786, 788, 789, 792, 793, 846, 847, 852, 853, 854, 855, 882, 898, 912, 913, 948, 993, 997, 1001, 1004, 1013, 1017, 1022, 1032, 1039], "wikipedia_principal_eigenvector": [55, 1022], "wikipediadet2017": 1001, "wikipediamcc2021": 1001, "wil": 1044, "wild": [2, 45, 368, 493, 494, 508, 509, 1027, 1032], "wilderness_area": 248, "wildli": [294, 1000], "wilei": [372, 991], "wilhelm": [1036, 1038, 1042], "wilk": 405, "wilksch": 1047, "willamett": 315, "willard": 1044, "willdarnel": 1042, "willduan": 1039, "william": [168, 370, 372, 417, 610, 611, 614, 619, 622, 639, 993, 1001, 1005, 1039, 1040, 1041, 1042, 1047, 1048], "williamson": 1042, "willing": [185, 266, 406], "willocx": 1042, "willpeppo": 1044, "wilson": [111, 372, 1032, 1035], "wiman": 1032, "wimld": 1046, "win": [52, 263], "winata": [1042, 1044], "wind": [187, 1002], "windber": 1043, "windiana42": 1048, "window": [57, 332, 370, 375, 377, 378, 383, 415, 1032, 1035, 1039, 1043, 1045, 1046, 1050], "windowsapp": 393, "windowserror": 1048, "windspe": [43, 187], "wine": [2, 48, 251, 314, 315, 368, 510, 1027], "wine_review": 315, "wineri": 315, "winn": 1001, "winter": [43, 52], "winterman": 1033, "wip": [383, 393], "wipf": [645, 997], "wire": [381, 534, 541], "wiryadi": [1044, 1050], "wisc": [168, 372, 899], "wisconsin": [2, 168, 189, 368, 500, 1009, 1027, 1037], "wise": [2, 46, 63, 178, 212, 238, 279, 309, 351, 362, 389, 405, 407, 411, 412, 416, 457, 531, 534, 537, 541, 545, 546, 549, 550, 553, 555, 556, 559, 560, 592, 595, 596, 598, 599, 600, 606, 640, 652, 700, 754, 832, 851, 881, 894, 895, 898, 973, 975, 976, 977, 978, 981, 993, 995, 997, 1001, 1002, 1015, 1021, 1032, 1037, 1040, 1041, 1042], "wish": [369, 375, 377, 382, 384, 393, 407, 948, 1039], "wishart": 797, "wissen": 449, "with_cent": [882, 894], "with_error": 701, "with_mean": [380, 884, 895, 1011, 1040, 1045], "with_scal": [882, 894], "with_std": [884, 895, 1011, 1040], "withheld": 411, "within": [2, 41, 43, 58, 93, 139, 141, 144, 149, 153, 165, 167, 168, 212, 213, 223, 229, 245, 249, 267, 268, 272, 309, 310, 320, 337, 340, 343, 346, 352, 358, 362, 370, 375, 379, 384, 387, 389, 390, 398, 403, 404, 405, 407, 408, 411, 413, 414, 418, 443, 447, 460, 462, 463, 465, 468, 473, 515, 549, 567, 568, 569, 570, 593, 594, 632, 692, 696, 699, 710, 725, 781, 797, 798, 805, 806, 818, 819, 828, 829, 844, 845, 846, 847, 852, 854, 855, 856, 863, 864, 865, 877, 885, 889, 890, 892, 893, 894, 895, 906, 907, 908, 909, 910, 912, 913, 914, 915, 990, 995, 997, 998, 1004, 1007, 1011, 1014, 1016, 1017, 1021, 1025, 1034, 1035, 1039, 1040, 1045, 1046, 1048, 1049, 1050], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 81, 85, 88, 89, 95, 100, 107, 125, 140, 144, 145, 148, 149, 151, 154, 160, 164, 168, 177, 183, 185, 186, 187, 197, 201, 219, 238, 242, 245, 246, 248, 249, 251, 262, 263, 270, 274, 276, 286, 289, 290, 291, 292, 298, 299, 300, 301, 309, 310, 314, 316, 318, 343, 346, 351, 364, 370, 371, 373, 375, 376, 377, 379, 380, 381, 384, 387, 388, 389, 398, 401, 407, 408, 412, 414, 415, 416, 417, 432, 438, 440, 445, 457, 468, 473, 491, 496, 504, 515, 532, 534, 555, 556, 563, 579, 580, 611, 627, 631, 634, 639, 659, 692, 700, 781, 803, 804, 805, 812, 814, 829, 830, 846, 853, 857, 863, 864, 867, 870, 873, 874, 876, 880, 881, 882, 884, 889, 904, 926, 969, 990, 991, 993, 995, 997, 998, 1001, 1004, 1007, 1011, 1015, 1016, 1017, 1020, 1021, 1022, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "withstrok": 75, "witten": 411, "wittenau": 1037, "wk": 705, "wl": 373, "wminkowski": [1044, 1046], "wmt": 51, "wnl": 415, "wo": 415, "wojdyla": [1047, 1048], "wolberg": [168, 372], "wolf": [2, 49, 65, 70, 108, 109, 112, 113, 183, 298, 472, 474, 478, 479, 512, 549, 995, 1022, 1039], "wolframalpha": 1042, "wolodzko": 1045, "wolosonovich": 1040, "wolpert": [414, 567, 568], "wolsza": 1050, "wompner": 1040, "won": [154, 306, 351, 379, 383, 407, 467, 496, 627, 628, 630, 687, 704, 717, 736, 737, 755, 757, 795, 1000, 1011, 1037, 1038, 1043], "wonder": [350, 373], "wonpil": 997, "wood": 1041, "woolam": 1032, "word": [47, 54, 57, 102, 170, 200, 242, 246, 339, 351, 352, 362, 370, 371, 375, 377, 380, 389, 404, 406, 407, 409, 410, 411, 412, 452, 511, 523, 534, 536, 541, 588, 589, 591, 696, 833, 843, 901, 995, 999, 1003, 1006, 1011, 1014, 1015, 1025, 1032, 1040], "word_col": 57, "word_scor": 57, "word_token": 415, "wordnetlemmat": 415, "work": [0, 3, 43, 48, 52, 55, 68, 79, 85, 100, 109, 137, 143, 157, 168, 176, 177, 185, 186, 187, 201, 215, 228, 245, 267, 286, 295, 296, 315, 319, 321, 322, 324, 341, 343, 351, 352, 358, 363, 364, 369, 370, 373, 375, 376, 377, 378, 379, 380, 381, 383, 388, 389, 390, 401, 403, 404, 405, 407, 408, 409, 412, 414, 415, 416, 419, 420, 421, 422, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 459, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 504, 508, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 695, 708, 774, 778, 779, 780, 781, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 948, 952, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1007, 1008, 1011, 1014, 1015, 1020, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "workabl": 380, "workaround": [315, 375, 800, 814], "workclass": [325, 496], "worker": [363, 389, 415, 966, 967, 1047], "workflow": [375, 378, 379, 388, 411, 1024, 1027], "working_memori": [362, 363, 467, 781, 902, 1040], "workingdai": [43, 187], "workload": 1020, "workshop": [0, 407, 415, 839, 1003, 1019], "workstat": 383, "world": [0, 88, 102, 106, 186, 215, 235, 248, 263, 350, 362, 368, 372, 407, 412, 415, 965, 991, 1001, 1003, 1019, 1021, 1025, 1027, 1032], "worldwid": 1025, "wornbb": 1043, "worri": [87, 998], "wors": [43, 116, 134, 171, 187, 217, 269, 277, 288, 314, 358, 405, 407, 417, 430, 464, 481, 482, 483, 552, 554, 556, 558, 560, 562, 565, 568, 570, 610, 611, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 669, 670, 672, 673, 678, 679, 680, 705, 721, 722, 723, 724, 728, 785, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 1001, 1011, 1041], "worse_prob": 269, "worsen": 144, "worst": [168, 211, 315, 372, 407, 443, 446, 708, 729, 730, 783, 784, 787, 792, 793, 829, 1001, 1025, 1032, 1045], "worth": [88, 142, 187, 211, 375, 383, 1025], "worthwhil": [104, 389], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 86, 88, 91, 102, 109, 111, 112, 116, 118, 125, 134, 146, 168, 170, 175, 176, 186, 187, 188, 189, 191, 197, 202, 204, 211, 212, 213, 226, 229, 238, 245, 248, 256, 263, 265, 269, 270, 275, 277, 279, 283, 286, 289, 295, 301, 306, 309, 310, 314, 315, 321, 324, 331, 339, 343, 346, 347, 350, 352, 357, 358, 362, 370, 371, 375, 376, 377, 381, 383, 384, 387, 388, 389, 390, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 430, 445, 464, 467, 481, 482, 483, 488, 527, 532, 534, 536, 541, 544, 552, 554, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 583, 584, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 700, 702, 708, 712, 713, 720, 756, 778, 782, 785, 789, 800, 802, 814, 829, 837, 838, 847, 855, 862, 889, 890, 892, 893, 894, 895, 896, 897, 902, 904, 905, 907, 910, 912, 913, 914, 915, 957, 960, 990, 991, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1016, 1020, 1021, 1025, 1029, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "wp": [415, 657, 671], "wpd": 350, "wprd": 415, "wrap": [120, 139, 146, 289, 326, 369, 377, 389, 401, 431, 508, 657, 658, 659, 676, 830, 888, 991, 1001, 1004, 1016, 1020, 1032, 1037, 1040, 1042, 1043, 1045, 1047], "wraparound": 376, "wrapper": [2, 64, 289, 381, 384, 411, 417, 544, 620, 668, 671, 742, 904, 997, 1017, 1020, 1036, 1044], "wrath": 408, "write": [47, 55, 147, 182, 189, 245, 318, 350, 362, 363, 369, 373, 374, 375, 379, 380, 381, 383, 384, 387, 389, 401, 403, 408, 412, 415, 1012, 1021, 1033, 1045, 1049], "writeabl": [930, 931, 1050], "writer": 350, "written": [41, 44, 46, 65, 84, 86, 123, 166, 183, 218, 262, 293, 321, 328, 329, 363, 372, 375, 376, 377, 381, 383, 387, 389, 408, 413, 486, 502, 508, 697, 713, 830, 909, 916, 995, 997, 1001, 1005, 1006, 1015, 1022, 1041], "wrong": [93, 211, 263, 295, 350, 358, 372, 375, 377, 415, 504, 726, 756, 793, 1001, 1007, 1016, 1035, 1037, 1039, 1040, 1041, 1042, 1045, 1049, 1050], "wrongli": [211, 339, 1050], "wrote": [154, 370], "ws2001": 993, "wspace": [53, 54, 74, 79, 95, 111, 120, 136, 211, 229, 238, 254, 256, 257, 260, 294, 302, 329, 336], "wstate": 1045, "wtv": 381, "wtw": 381, "wu": [1016, 1036, 1044], "wurp": [1046, 1047], "wuthrich": [211, 229], "ww": 412, "www": [45, 103, 191, 211, 227, 229, 283, 288, 306, 369, 370, 375, 383, 407, 411, 441, 448, 486, 508, 509, 531, 534, 537, 541, 644, 658, 664, 671, 685, 686, 853, 860, 912, 913, 997, 1014], "www4": [168, 372], "wyseguy7": 1038, "w\u00fcthrich": 405, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 231, 232, 233, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 288, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 368, 369, 370, 371, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 398, 401, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 493, 494, 495, 498, 500, 501, 502, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 710, 711, 725, 732, 735, 742, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 925, 926, 927, 928, 929, 930, 931, 934, 945, 947, 948, 949, 950, 960, 961, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1021, 1029, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "x0": [51, 220, 234, 252, 309, 336, 389, 428, 463, 567, 568, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "x00": 415, "x006": 1033, "x00a": 415, "x00b": 415, "x00c": 415, "x00d": 415, "x00e": 415, "x00f": 415, "x00g": 415, "x00h": 415, "x00i": 415, "x00l": 415, "x00n": 415, "x00o": 415, "x00r": 415, "x00t": 415, "x00u": 415, "x00z": 415, "x0_cat": [322, 1011], "x0_infrequent_sklearn": [322, 1011], "x0_label": 309, "x0_rabbit": [322, 1011], "x0_str_femal": 877, "x0_str_male": 877, "x0l": 1036, "x1": [51, 115, 136, 145, 173, 223, 234, 309, 336, 377, 389, 428, 463, 509, 567, 568, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 627, 628, 629, 630, 699, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "x110": 1047, "x1_int_1": 877, "x1_int_2": 877, "x1_int_3": 877, "x1_label": 309, "x2": [115, 136, 145, 173, 223, 252, 377, 408, 588, 629, 699], "x27": [63, 103, 104, 139, 154, 157, 165, 186, 187, 188, 239, 240, 249, 250, 252, 259, 263, 267, 269, 270, 276, 281, 283, 307, 315, 319, 320, 322, 330], "x2_tr": 629, "x3": [145, 252, 408], "x64": 373, "x8": 86, "x86": 373, "x86_64": [378, 393], "x9ft": 415, "x_": [163, 171, 260, 269, 318, 377, 407, 410, 412, 627, 635, 764, 859, 899, 900, 997, 1003, 1008, 1038], "x_0": [212, 657], "x_1": [120, 163, 173, 212, 410, 412, 414, 417, 613, 625, 657, 877, 904, 905, 997, 1003, 1005, 1011, 1015], "x_1d": 322, "x_1x_2": 1011, "x_1x_2x_3": 1011, "x_1x_3": 1011, "x_2": [163, 173, 412, 414, 415, 417, 613, 625, 997, 1005, 1011], "x_20": 332, "x_2d": 339, "x_2x_3": 1011, "x_3": [163, 1011], "x_6": 877, "x_7": 877, "x_a": 313, "x_adult": 325, "x_aniso": [79, 90, 95], "x_axi": [122, 219, 273], "x_b": 313, "x_bimod": 313, "x_bin": 310, "x_bound": [417, 617], "x_c": [481, 482, 484, 1008], "x_calib": 436, "x_california": 182, "x_cardiotocographi": 248, "x_center": 195, "x_check": 931, "x_chisq": 313, "x_cluster": 856, "x_convert": 930, "x_copi": 1043, "x_cu": 403, "x_d": [417, 614], "x_dens": [325, 544], "x_df": 151, "x_diabet": 182, "x_different_covari": 70, "x_digit": [105, 160, 305, 408], "x_dist_graph": 848, "x_embed": [298, 299, 692, 696, 853, 1004], "x_error": 217, "x_errors_larg": 217, "x_featur": [106, 640, 641, 642, 993], "x_filter": 90, "x_fit": 688, "x_fit_": [535, 643], "x_forestcov": 248, "x_full": [181, 182, 309], "x_full_train": 139, "x_gaussian": 313, "x_hashed_lsa": 351, "x_hat": [531, 537, 545, 546], "x_hetero": 127, "x_homo": 127, "x_i": [52, 111, 138, 163, 186, 212, 321, 346, 407, 412, 413, 414, 417, 614, 615, 619, 622, 623, 625, 839, 840, 843, 992, 993, 997, 1003, 1004, 1005, 1011, 1015, 1016, 1017], "x_idx_sort": 1044, "x_imput": 630, "x_indic": 164, "x_inform": 316, "x_inlier": 296, "x_inv": [588, 591], "x_ipca": 124, "x_iri": 274, "x_isotropic_covari": 70, "x_j": [407, 417, 614, 615, 619, 622, 623, 625, 992, 993, 997, 1004, 1016, 1017], "x_k": [410, 412, 995, 1004], "x_label": 182, "x_leav": [557, 558, 559, 560, 564, 565, 566, 912, 913, 914, 915], "x_left_lower_corn": [50, 302, 370, 498], "x_legend": 47, "x_list": 312, "x_loadings_": [481, 482, 483], "x_lognorm": [313, 1011], "x_lsa": 351, "x_m": 1005, "x_max": [67, 85, 91, 136, 142, 152, 161, 172, 243, 304, 311, 333, 343, 344], "x_max_": 635, "x_mean": 419, "x_mean_": 1044, "x_min": [67, 85, 91, 136, 142, 146, 152, 161, 172, 201, 243, 304, 311, 333, 343, 344], "x_min_": 635, "x_miss": [149, 181, 182], "x_miss_california": 182, "x_miss_diabet": 182, "x_n": [120, 412, 904, 905, 1003, 1005, 1015], "x_near_unique_categori": 316, "x_new": [89, 408, 412, 416, 431, 441, 442, 444, 446, 448, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 549, 567, 569, 570, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 628, 630, 635, 638, 639, 640, 641, 642, 688, 689, 690, 691, 692, 853, 860, 867, 868, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 896, 897, 1013], "x_new_again": 1013, "x_new_invers": 1013, "x_norm_squar": [763, 1037, 1049], "x_normal": 1011, "x_np": 403, "x_offset": 195, "x_offset_": [644, 645, 1044], "x_origin": [534, 539, 541, 543, 544, 630, 896, 897], "x_out": [323, 868, 877, 878], "x_outlier": [196, 225, 295, 296, 338], "x_p": [407, 445, 997], "x_pca": 124, "x_plot": [193, 212, 217, 244, 272, 294, 314], "x_plot_ext": 212, "x_plot_scal": 314, "x_po": 288, "x_q": 407, "x_r": [128, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "x_r2": 128, "x_rand": 275, "x_random": 201, "x_reconstruct": [322, 481, 482, 483, 583], "x_reconstructed_kernel_pca": [44, 125], "x_reconstructed_pca": [44, 125], "x_red": 85, "x_reduc": [84, 126, 152, 444], "x_restor": 84, "x_right": 70, "x_rope": 269, "x_rotations_": [410, 481, 482, 483], "x_scale": [195, 874, 890, 1011], "x_scale_": [644, 645, 1044], "x_scaler": 49, "x_score": [296, 481, 482, 483, 484], "x_scores_": [483, 1044], "x_select": 358, "x_shared_covari": 70, "x_shuffl": 316, "x_size": 112, "x_sp": 198, "x_spars": [325, 534, 971, 974], "x_sparse_embed": 566, "x_squared_norm": [257, 459], "x_src": 294, "x_std": [874, 890, 1011], "x_std_": 1044, "x_t": [463, 627, 863], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 175, 178, 185, 186, 187, 188, 189, 191, 194, 197, 202, 207, 208, 209, 217, 218, 219, 225, 226, 227, 229, 239, 241, 247, 251, 252, 256, 262, 263, 266, 267, 272, 276, 278, 282, 284, 288, 292, 295, 297, 298, 301, 304, 306, 307, 311, 313, 314, 316, 318, 319, 320, 325, 326, 331, 332, 338, 350, 354, 356, 357, 358, 362, 369, 377, 380, 388, 401, 408, 411, 414, 437, 469, 470, 471, 472, 473, 474, 475, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 878, 914, 915, 991, 1001, 1003, 1004, 1005, 1007, 1011, 1015, 1016, 1017, 1029, 1032], "x_test_df": 252, "x_test_kernel_pca": 125, "x_test_maxab": 1011, "x_test_minmax": 1011, "x_test_miss": 149, "x_test_no_cf_encod": 316, "x_test_noisi": 44, "x_test_np": 252, "x_test_pca": [45, 125], "x_test_r": 115, "x_test_scal": 252, "x_test_sel": 189, "x_test_select": 358, "x_test_text": 47, "x_test_tran": 1011, "x_test_transform": [358, 411], "x_text": 47, "x_tfidf": 351, "x_thresholds_": [241, 635, 1044], "x_torch": 403, "x_tr": [867, 873, 876, 877, 878, 882, 884, 887, 889, 890, 894, 895], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 194, 197, 207, 208, 209, 212, 218, 219, 225, 226, 227, 229, 239, 247, 251, 252, 256, 258, 262, 263, 266, 267, 272, 276, 278, 282, 288, 292, 295, 297, 298, 301, 304, 306, 307, 311, 313, 314, 316, 318, 319, 320, 325, 326, 331, 332, 338, 350, 354, 357, 358, 362, 369, 377, 380, 388, 408, 411, 414, 436, 437, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 878, 914, 915, 991, 1001, 1003, 1004, 1005, 1007, 1009, 1011, 1015, 1016, 1029], "x_train_": 611, "x_train_ensembl": 139, "x_train_linear": 139, "x_train_maxab": 1011, "x_train_minmax": 1011, "x_train_miss": 149, "x_train_no_cf_encod": 316, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 186, "x_train_r": 115, "x_train_sel": 189, "x_train_select": 358, "x_train_std_transform": 314, "x_train_text": 47, "x_train_tran": 1011, "x_train_transform": [314, 358, 411], "x_train_valid": 63, "x_tran": [313, 324, 403, 441, 463, 880, 885, 892, 925, 1011], "x_trans_bc": 313, "x_trans_qt": 313, "x_trans_yj": 313, "x_transform": [124, 152, 245, 484, 531, 532, 533, 534, 535, 537, 539, 543, 566, 638, 639, 688, 689, 690, 691], "x_transformed_fit_": 535, "x_true": 234, "x_uniform": 313, "x_val": [144, 1009], "x_valid": 63, "x_valu": 331, "x_vari": 90, "x_weibul": 313, "x_weights_": [410, 481, 482, 483, 484], "x_wrong": 70, "xa": 581, "xanchor": 270, "xarg": 1032, "xavier": [861, 862, 1040, 1041, 1042, 1044, 1045, 1050], "xaxi": [126, 140, 231, 233, 236, 289, 294, 350], "xaxis2": 140, "xb": [115, 883], "xbar_": 549, "xbc": 415, "xc3": 415, "xcjason": 1042, "xcode": 373, "xd": 526, "xdang": 679, "xerox": 51, "xerr": [181, 182, 351], "xethan": 1044, "xfail": [383, 923], "xfc": 415, "xfcche": 415, "xfea": 415, "xff": 415, "xgamma": 685, "xgboost": [149, 151, 414, 1020], "xgrid": [50, 302], "xhan": 1041, "xhy": 1039, "xi": [2, 79, 98, 372, 407, 410, 415, 449, 455, 509, 1015, 1043], "xi_i": 1015, "xi_k": 410, "xiang": 1050, "xiangyin": 1045, "xiao": [0, 386, 396, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050], "xiaojin": 899, "xiaoyu": 1044, "xiaoyuchai": 1045, "xin": [679, 997, 1040], "xinfan": [1032, 1033, 1036], "xing": [1040, 1041], "xinv": 869, "xinyu": 407, "xinyuliu12": 1041, "xiong": [1040, 1041, 1046], "xj": 405, "xk": [98, 550], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 143, 145, 146, 147, 148, 149, 153, 157, 159, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 186, 193, 196, 197, 199, 200, 201, 202, 204, 205, 206, 208, 211, 213, 214, 216, 218, 220, 221, 225, 229, 242, 244, 246, 248, 264, 268, 269, 273, 274, 278, 279, 282, 284, 291, 292, 295, 296, 315, 316, 336, 338, 339, 342, 350, 355, 356, 631], "xlim": [51, 63, 79, 91, 95, 105, 109, 110, 111, 122, 136, 137, 138, 153, 159, 171, 172, 186, 193, 202, 204, 210, 217, 220, 225, 238, 246, 255, 260, 264, 278, 284, 295, 296, 338, 343, 344, 347, 356], "xm": [51, 234], "xmax": [50, 109, 202, 204, 220, 221, 302], "xmin": [50, 109, 202, 204, 220, 221, 302], "xn": 509, "xom": 51, "xor": [169, 171, 172, 173, 183, 221, 222, 224, 258, 312, 344, 348, 610, 614, 622, 997, 1017, 1022, 1039], "xp": [410, 879], "xpreprocessor": 373, "xrang": 1038, "xred": [444, 1048], "xrot": 53, "xrx": 51, "xs_sp": 198, "xsat": 1042, "xscale": [171, 176, 244], "xt": [157, 289, 389, 444, 538, 540, 627, 629, 800, 803, 804, 814, 848, 856, 864, 869, 874, 881, 893, 928, 1048, 1050], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 143, 145, 149, 172, 173, 174, 178, 202, 224, 238, 246, 255, 256, 257, 260, 268, 269, 284, 293, 302, 307, 315, 328, 339, 342, 344, 697], "xtick_period": 187, "xtick_start": 187, "xticklabel": [43, 49, 143, 149, 187, 315], "xticks_label": 145, "xticks_po": 145, "xticks_rot": [45, 697], "xtrain": 302, "xu": [407, 410, 418, 443, 1015, 1045, 1046, 1049, 1050], "xue": [0, 1036, 1037, 1038, 1040, 1041, 1044], "xuefeng": [1049, 1050], "xueqin": [679, 997], "xun": [1042, 1044], "xuniu": 1047, "xval": 182, "xw": [210, 321, 646, 647, 649, 652, 653, 654, 655, 656, 660, 661, 662, 663, 672, 681, 682, 683, 684, 997], "xx": [77, 91, 111, 142, 146, 152, 161, 172, 173, 174, 187, 204, 218, 221, 222, 223, 224, 225, 236, 238, 246, 258, 295, 304, 311, 312, 333, 338, 339, 343, 344, 347, 348], "xx0": [136, 631], "xx1": [136, 631], "xx_coarser": 142, "xxx": 389, "xy": [48, 63, 82, 276, 302, 344, 393, 646, 647, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 664, 681, 682, 683, 684, 686], "xycoord": [48, 63], "xyguo": [1038, 1040], "xytext": [48, 63, 191], "xyz": 374, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 85, 87, 89, 90, 93, 94, 95, 98, 99, 103, 104, 106, 107, 112, 115, 116, 118, 122, 124, 125, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 231, 232, 233, 236, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 254, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 288, 289, 291, 292, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 373, 375, 377, 379, 380, 382, 383, 384, 388, 389, 398, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 484, 486, 498, 500, 502, 505, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 706, 711, 726, 732, 735, 741, 742, 756, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 788, 789, 792, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 923, 924, 930, 935, 936, 960, 962, 963, 964, 971, 974, 987, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1015, 1016, 1017, 1021, 1027, 1029, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "y0": [51, 234], "y1": [51, 136, 234, 509, 716, 1002, 1003], "y1_label": 46, "y2": [136, 716, 1002], "y2_label": 46, "y3": 1002, "y_": [241, 255, 259, 260, 301, 377, 410, 412, 637, 648, 669, 680, 729, 730, 738, 764, 783, 784, 787, 997, 1001, 1038], "y_1": [135, 356, 410, 1001, 1005, 1015], "y_2": [135, 356, 1005], "y_20": 332, "y_2d": 339, "y_3": 356, "y_30": 333, "y_50": 333, "y_adult": 325, "y_all": [666, 668, 676, 832, 833, 861], "y_ard": 193, "y_ard_std": 193, "y_axi": [122, 219], "y_bia": 137, "y_brr": 193, "y_brr_std": 193, "y_c": [481, 482, 484], "y_calib": 436, "y_california": 182, "y_coclust": 57, "y_convert": 930, "y_cov": 611, "y_cu": 403, "y_decis": [325, 835], "y_dens": 1002, "y_diabet": 182, "y_different_covari": 70, "y_digit": [105, 160, 305, 408], "y_error": [137, 217], "y_errors_larg": 217, "y_filter": 90, "y_full": [181, 182, 309], "y_full_train": 139, "y_grid_pr": 152, "y_hat": 464, "y_high": 146, "y_i": [138, 321, 346, 405, 414, 992, 993, 997, 1001, 1005, 1015, 1016, 1017], "y_indic": 875, "y_iri": 274, "y_isotropic_covari": 70, "y_j": [993, 1001, 1003, 1011, 1016], "y_k": [410, 1011], "y_kmean": 57, "y_kr": 244, "y_l": 1001, "y_label": 229, "y_left_lower_corn": [50, 302, 370, 498], "y_limit": 143, "y_loadings_": [481, 482, 483], "y_loc": 350, "y_log_prob": 835, "y_log_proba": 864, "y_low": 146, "y_lower": [93, 146], "y_mask": 332, "y_max": [67, 91, 136, 142, 152, 161, 172, 229, 243, 304, 311, 333, 343, 344, 635, 637], "y_mean": [175, 176, 179, 611, 644, 645], "y_mean_": 1044, "y_med": 146, "y_min": [67, 91, 136, 142, 152, 161, 172, 243, 304, 311, 333, 343, 344, 635, 637], "y_miss": [181, 182], "y_miss_california": 182, "y_miss_diabet": 182, "y_multirf": 153, "y_n": [1001, 1005, 1015], "y_new": 89, "y_nois": 137, "y_noisi": 210, "y_norm_squar": 763, "y_normal": 213, "y_np": 403, "y_numer": [930, 989], "y_observ": 326, "y_onehot_test": 278, "y_org": 935, "y_outlier": 196, "y_pareto": 213, "y_plot": [193, 212, 217, 272], "y_plot_ext": 212, "y_po": 352, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 90, 95, 102, 107, 134, 146, 147, 149, 154, 165, 186, 208, 211, 213, 218, 221, 226, 228, 229, 238, 239, 248, 263, 265, 267, 272, 296, 300, 307, 314, 326, 331, 332, 358, 375, 382, 389, 414, 430, 438, 464, 481, 482, 483, 549, 552, 554, 556, 557, 558, 560, 562, 564, 565, 567, 568, 570, 611, 631, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 697, 698, 700, 701, 702, 703, 708, 712, 713, 718, 721, 722, 723, 724, 728, 729, 730, 734, 736, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 783, 784, 785, 787, 788, 790, 791, 796, 800, 803, 804, 814, 825, 835, 837, 838, 847, 855, 862, 864, 904, 905, 906, 907, 908, 909, 910, 913, 915, 1001, 1003, 1038, 1039, 1041, 1043, 1047, 1048, 1049], "y_pred_ard": 197, "y_pred_bin": 211, "y_pred_chain": 288, "y_pred_empti": [729, 730], "y_pred_enet": 197, "y_pred_ensembl": 288, "y_pred_lasso": 197, "y_pred_lr": 213, "y_pred_nnl": 207, "y_pred_ol": 207, "y_pred_outli": [225, 295, 338], "y_pred_outliers_sgd": 225, "y_pred_ovr": 288, "y_pred_product": 229, "y_pred_qr": 213, "y_pred_ridg": 107, "y_pred_ridge_with_trans_target": 107, "y_pred_scal": 314, "y_pred_seg": 211, "y_pred_test": [225, 295, 338], "y_pred_test_sgd": 225, "y_pred_tot": 229, "y_pred_train": [225, 338], "y_pred_train_sgd": 225, "y_pred_with_": 185, "y_pred_without_": 185, "y_predict": [137, 377, 1032], "y_prob": [62, 64, 173, 437, 438, 709, 835, 861, 1001, 1046, 1050], "y_proba": [145, 148, 314, 389, 709, 864, 1050], "y_proba_sc": 314, "y_rand": 333, "y_reconstruct": [481, 482, 483], "y_rf": 153, "y_right": 70, "y_rotations_": [410, 481, 482, 483], "y_sampl": [179, 611], "y_scaler": 49, "y_score": [239, 276, 278, 389, 481, 482, 483, 707, 720, 726, 727, 739, 740, 756, 782, 788, 789, 794, 800, 803, 804, 814, 864, 1001, 1038, 1046, 1048, 1050], "y_scores_": [483, 1044], "y_shared_covari": 70, "y_spars": 1002, "y_std": [176, 179, 552, 611, 644, 645, 1045], "y_std_": 1044, "y_svr": 244, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 178, 185, 186, 187, 188, 189, 191, 197, 207, 208, 211, 217, 218, 219, 226, 227, 229, 239, 247, 251, 252, 256, 262, 263, 266, 267, 272, 276, 278, 282, 288, 292, 297, 298, 304, 306, 307, 311, 314, 316, 318, 319, 320, 325, 326, 331, 332, 350, 354, 357, 358, 369, 380, 388, 408, 411, 414, 437, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 914, 915, 1001, 1003, 1004, 1011, 1016, 1029, 1032], "y_test_pr": 256, "y_test_predict": 247, "y_test_r": 115, "y_test_tru": 331, "y_thresholds_": [241, 635, 1044], "y_torch": 403, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 194, 197, 207, 208, 209, 212, 218, 219, 226, 227, 239, 247, 251, 252, 256, 262, 263, 266, 267, 272, 276, 278, 282, 288, 292, 297, 298, 304, 306, 307, 311, 314, 316, 318, 319, 320, 325, 326, 328, 329, 331, 332, 333, 350, 354, 357, 358, 362, 369, 377, 380, 388, 408, 411, 414, 436, 437, 509, 558, 559, 560, 567, 568, 697, 698, 700, 702, 799, 822, 830, 832, 835, 853, 861, 862, 864, 914, 915, 991, 1001, 1003, 1004, 1009, 1011, 1016, 1029], "y_train_": 611, "y_train_ensembl": 139, "y_train_linear": 139, "y_train_noisi": 177, "y_train_pr": 256, "y_train_r": 115, "y_train_valid": 63, "y_tran": 107, "y_transform": 484, "y_true": [43, 52, 57, 68, 92, 107, 134, 154, 173, 211, 221, 229, 248, 257, 263, 331, 375, 430, 437, 438, 464, 481, 482, 483, 552, 554, 556, 557, 558, 560, 562, 564, 565, 568, 570, 611, 635, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 678, 679, 697, 698, 700, 701, 702, 703, 707, 708, 709, 712, 713, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 782, 783, 784, 785, 787, 788, 789, 790, 791, 794, 796, 799, 837, 838, 847, 855, 862, 905, 907, 910, 913, 915, 1001, 1033, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1049], "y_true_bin": 211, "y_true_categor": [709, 1001], "y_true_empti": 729, "y_true_mean": 213, "y_true_seg": 211, "y_type_": 871, "y_uniqu": 61, "y_upper": [93, 146], "y_val": [144, 1009], "y_valid": 63, "y_var": 137, "y_vari": 90, "y_weights_": [410, 481, 482, 483, 484], "y_wrong": 70, "yacin": 1040, "yadav": 1046, "yagi": 1044, "yahoo": 51, "yair": [407, 691], "yakov": 1044, "yalburgi": [1039, 1040], "yaman": 1047, "yamanishi": 370, "yamin": 1032, "yaml": [379, 383], "yan": [1036, 1044], "yanchor": 270, "yang": [370, 407, 412, 534, 639, 1038, 1039, 1042, 1044, 1045, 1046, 1048, 1049], "yangarbit": 1039, "yanhong": 1047, "yanlend": 1038, "yann": [1032, 1034], "yanni": 407, "yannick": [1032, 1034], "yao": [0, 372, 386, 396, 1038, 1039, 1040, 1041, 1048, 1049, 1050], "yap": 1039, "yar": 1046, "yareyaredesuyo": 1050, "yaroslav": [0, 396, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1048, 1049, 1050], "yarowski": [320, 901, 1014], "yashika": 1044, "yasmeen": 1045, "yat2016": 407, "yate": [590, 730], "yates2011": 590, "yau": [1035, 1036, 1037, 1038, 1039], "yaxi": [46, 49, 93, 126, 140, 231, 233, 236, 254, 289, 294, 350], "ye": [350, 383, 389, 401, 658, 659, 871, 888, 997], "year": [0, 43, 157, 168, 175, 185, 186, 187, 211, 212, 229, 326, 372, 374, 379, 387, 411, 415, 802, 807, 809, 883, 997, 1001, 1021, 1025], "yearli": [43, 390], "yearremodadd": 154, "yeast": [288, 835], "yee": [1039, 1040], "yegelwel": 1044, "yeh": 1045, "yelit": 1038, "yellow": [70, 118, 339, 356, 1002], "yellowbrick": 1020, "yellowgreen": [212, 214, 221, 356], "yen": [1038, 1039], "yenchen": [0, 1038], "yenchenlin": 1038, "yenugula": 1050, "yeo": [309, 313, 880, 892, 1011, 1040, 1046, 1048], "yep": 378, "yerr": [105, 110, 112, 141, 143, 167, 291, 315, 331], "yesy": 395, "yesyesclassificationclassificationnumb": 395, "yesyesdo": 395, "yesyesfew": 395, "yesyesllel": 395, "yesyespredict": 395, "yesyessgdclassifiersgd": 395, "yesyessgdregressorsgd": 395, "yesyestextdatatext": 395, "yet": [48, 90, 197, 229, 259, 270, 352, 364, 370, 374, 379, 387, 392, 393, 398, 411, 412, 414, 415, 417, 447, 451, 460, 461, 553, 554, 577, 778, 984, 990, 997, 1001, 1007, 1015, 1021, 1041, 1049], "yeung": 1038, "ygrid": [50, 302], "yhoo": 51, "yi": [509, 1003, 1036, 1040, 1041, 1044], "yichuan": [1038, 1039], "yield": [47, 48, 62, 88, 109, 110, 111, 112, 146, 197, 207, 211, 226, 229, 274, 288, 304, 309, 336, 341, 350, 351, 358, 362, 364, 369, 380, 389, 404, 407, 409, 411, 412, 414, 415, 416, 436, 448, 467, 471, 508, 509, 537, 538, 539, 541, 546, 553, 554, 559, 560, 561, 562, 567, 568, 594, 602, 647, 651, 652, 653, 655, 661, 663, 665, 673, 675, 686, 726, 781, 788, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 835, 838, 896, 897, 942, 949, 951, 952, 958, 993, 995, 997, 998, 1001, 1016, 1017, 1037, 1038, 1040, 1043, 1045], "yifan": 1005, "yime": 1040, "ying": [407, 451, 461, 1046], "yinglr": 1042, "yisheng": 1049, "yiyangq": 1046, "yj": [115, 313], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 145, 146, 147, 148, 149, 153, 157, 159, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 186, 193, 196, 197, 199, 200, 201, 202, 204, 205, 206, 208, 211, 213, 214, 216, 218, 220, 221, 229, 242, 244, 246, 264, 268, 269, 272, 273, 274, 278, 279, 282, 284, 292, 316, 336, 339, 342, 350, 355, 356, 631], "ylim": [51, 61, 63, 69, 72, 79, 91, 95, 109, 110, 111, 122, 136, 137, 143, 146, 153, 156, 171, 172, 186, 201, 202, 204, 205, 206, 217, 220, 221, 225, 238, 246, 255, 260, 264, 268, 272, 278, 284, 295, 296, 338, 343, 344, 347, 350, 356], "ylorbr_r": 111, "ym": [51, 234], "ymax": [47, 49, 50, 109, 201, 204, 205, 212, 220, 269, 302], "ymazari": 1040, "ymean": 194, "ymin": [50, 109, 201, 204, 205, 212, 220, 269, 302], "yml": 383, "yn": [509, 1002, 1003], "yoav": 1038, "yoch": 1045, "yogendrasingh": 1047, "yojana": 1047, "yokasr": 1042, "yoni": 1035, "yoon": 1043, "yoram": [286, 735], "york": [268, 788, 797, 991, 1001, 1013], "yoshihiro": 1042, "yoshiki": [1035, 1038], "yoshizawa": 1040, "yoshua": [861, 862, 1014], "yosshi999": 1046, "yosuk": [1044, 1045], "yotam": 1048, "you": [0, 30, 54, 58, 61, 103, 126, 142, 145, 147, 165, 168, 182, 187, 189, 199, 212, 215, 240, 245, 252, 257, 264, 269, 270, 276, 295, 318, 319, 322, 324, 325, 329, 332, 343, 350, 356, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 388, 389, 393, 394, 395, 398, 401, 403, 405, 406, 407, 408, 409, 411, 414, 415, 416, 418, 419, 424, 436, 442, 443, 445, 446, 448, 453, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 483, 500, 503, 504, 509, 510, 532, 533, 534, 536, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 581, 582, 588, 589, 590, 591, 607, 608, 610, 611, 627, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 690, 699, 700, 785, 798, 799, 801, 802, 803, 804, 805, 807, 809, 815, 816, 818, 819, 820, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 863, 864, 867, 868, 869, 870, 871, 876, 877, 878, 883, 884, 889, 890, 892, 893, 894, 895, 897, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 923, 948, 966, 990, 991, 996, 997, 1001, 1002, 1005, 1007, 1008, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1024, 1025, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "youden": 1001, "younger": 229, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 373, 374, 375, 376, 378, 379, 381, 383, 384, 387, 388, 389, 393, 394, 395, 401, 403, 406, 407, 408, 409, 414, 415, 418, 419, 443, 445, 503, 533, 561, 562, 602, 634, 646, 687, 711, 800, 803, 804, 806, 814, 823, 827, 829, 923, 942, 998, 1005, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "yourlogin": 375, "yourself": [103, 374, 375, 376, 380, 383, 1005], "ypred": 1039, "yrsold": 154, "yscale": [171, 176, 211, 244, 350], "ystd": 194, "yt": 875, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 147, 164, 172, 173, 174, 178, 202, 224, 238, 246, 255, 256, 257, 260, 264, 284, 293, 302, 307, 328, 339, 344, 350], "yticklabel": [264, 350], "ytrain": 302, "ytrue": 1039, "yu": [197, 407, 451, 461, 658, 997, 1005, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "yuan": [1046, 1047, 1048, 1049, 1050], "yuchen": [1048, 1049], "yucheng": 1037, "yue": [1044, 1050], "yufeng": 1040, "yuichi": 1039, "yuki": 1046, "yule": [449, 456, 778, 779, 780], "yulia": 1042, "yum": 373, "yun": [1047, 1048], "yung": [1035, 1038], "yunqian": 997, "yurchak": [0, 396, 415, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "yuri": [1035, 1037], "yusuf": [1047, 1048], "yusuk": 1045, "yusukenagasaka": 1045, "yutaro": 1044, "yuusuk": 1049, "yuval": [404, 450], "yv": 410, "yve": 1045, "yy": [77, 91, 111, 142, 152, 161, 172, 174, 187, 204, 218, 222, 223, 224, 225, 236, 238, 246, 295, 304, 311, 312, 333, 338, 339, 343, 344, 347, 348], "yy_": 218, "yy_coars": 142, "yy_down": 344, "yy_up": 344, "yzhenman": 1045, "z": [50, 91, 142, 161, 172, 174, 187, 221, 223, 224, 231, 233, 238, 243, 258, 295, 302, 304, 311, 314, 333, 339, 344, 348, 372, 379, 404, 412, 414, 553, 554, 585, 639, 664, 671, 685, 686, 689, 693, 699, 724, 785, 884, 997, 998, 1005, 1006, 1047], "z_": 412, "z_1": 997, "z_2": 997, "z_3": 997, "z_4": 997, "z_5": 997, "z_i": [138, 1005], "z_l": 1005, "z_points_coars": 142, "zablit": 1047, "zac": 1037, "zacchari": 1044, "zach": [1040, 1041, 1046], "zachariah": 1040, "zadrozni": [64, 405, 436, 676], "zaffalon": 269, "zahlii": 1045, "zain": [0, 396, 1046, 1047, 1048, 1049], "zalkow": 1037, "zambelli": 1035, "zamrii": 1042, "zanouda": 1039, "zaxi": [126, 231], "zayd": 1041, "zaytsev": 1035, "zdzieblo": 1049, "zebra": 712, "zedan": 1048, "zeel": 1046, "zeeshan": [1047, 1048], "zempleni": 1046, "zen": 935, "zenin": 1038, "zentrum": 1001, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 85, 87, 110, 112, 113, 120, 123, 125, 136, 137, 145, 147, 148, 153, 165, 168, 182, 193, 197, 198, 200, 203, 205, 206, 210, 211, 212, 215, 216, 217, 221, 226, 229, 242, 245, 246, 248, 254, 258, 260, 266, 269, 274, 278, 279, 282, 294, 309, 319, 320, 343, 346, 351, 352, 354, 357, 362, 363, 370, 377, 381, 389, 405, 407, 409, 412, 414, 415, 416, 417, 420, 445, 451, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 486, 497, 508, 509, 523, 526, 527, 531, 532, 535, 537, 538, 539, 540, 542, 543, 547, 548, 552, 557, 558, 559, 560, 561, 562, 564, 565, 566, 581, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 611, 636, 639, 643, 644, 645, 650, 658, 659, 664, 665, 666, 667, 668, 671, 676, 677, 678, 685, 686, 703, 709, 712, 713, 715, 716, 725, 729, 730, 734, 738, 740, 746, 783, 784, 785, 787, 796, 797, 815, 816, 819, 820, 833, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 867, 874, 876, 877, 879, 880, 881, 883, 884, 890, 891, 892, 893, 897, 904, 912, 913, 914, 915, 946, 975, 986, 991, 997, 999, 1000, 1003, 1004, 1005, 1011, 1012, 1013, 1015, 1016, 1017, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "zero_bas": [486, 508, 509], "zero_class": 246, "zero_divis": [307, 713, 716, 729, 730, 738, 783, 784, 787, 1001, 1042, 1044, 1048], "zero_impute_scor": 182, "zero_on": [375, 1033], "zero_one_loss": [2, 375, 403, 703, 734, 1001, 1033, 1034, 1035, 1049, 1050], "zero_one_scor": 1033, "zerodivisionerror": [1039, 1042, 1048], "zeros_lik": [82, 213, 278], "zeta": 1016, "zeta_i": 1016, "zev": [1038, 1039, 1040, 1041], "zeyusun": 1045, "zha": [689, 693, 998], "zhai_pro": 1037, "zhan": 1047, "zhang": [407, 441, 664, 679, 685, 686, 689, 693, 758, 759, 997, 998, 999, 1003, 1015, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1048, 1049, 1050], "zhang02c": 676, "zhang96": [407, 441], "zhao": [1042, 1044, 1045, 1046, 1047], "zhaowei": 1044, "zhaoweiwang": 1045, "zhauniarovich": 1037, "zhdanovich": 1040, "zhechev": 1047, "zhehao": [1045, 1046, 1047, 1048, 1050], "zhenfish": 1046, "zheng": [1038, 1039, 1044], "zhenq": 1040, "zhi": [563, 1007], "zhiqe": 1040, "zhou": [563, 639, 900, 1007, 1040, 1048, 1049], "zht2007": 199, "zhu": [134, 414, 519, 553, 658, 899], "zhuyi": [1040, 1041], "zhuzhunashvili": [407, 461], "ziad": 1050, "zibulevski": [664, 685, 686], "zichen": 1037, "zielinska": 1043, "zihna": 1045, "ziji": [1040, 1041], "zijlstra": 1035, "zike": 1038, "zimek": 445, "zimmer": [1036, 1046], "zinkov": [1032, 1033, 1034, 1036, 1037], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 373, 414, 828, 1011, 1028], "zisserman": [638, 993, 1001], "zito": [1032, 1045], "ziv": 1038, "zivori": 1038, "zj": [1040, 1041], "zlabel": 126, "zoj613": 1044, "zolisa": 1044, "zoom": [43, 139, 309, 395], "zoom_in_percentile_rang": 309, "zorder": [51, 91, 122, 151, 161, 171, 179, 202, 209, 232, 234, 241, 244, 254, 319, 325, 344], "zou": [134, 199, 414, 519, 553, 656, 997, 1015], "zou_et_al_criterion_resc": 199, "zoubin": 899, "zoubir": 112, "zouhar": 1045, "zsh": 363, "zuckerberg": 0, "zwinck": 1034, "zxcvbniu": 1039, "zz": 111, "zzrh2009": 414, "z\u00e9": 1040, "\u00e4yr\u00e4m\u00f6": 997, "\u00f3scar": [1036, 1037, 1038, 1039], "\u00f6zer": 1045, "\u0142ukasz": 1047, "\u015fahin": 1046, "\u0161t\u011bp\u00e1n": 1050, "\u675c\u4e16\u6a4b": [0, 397], "\u8d75\u4e30": 1046}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal Component Analysis (PCA) on Iris Dataset", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Ordinary Least Squares Example", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [188, 314, 316, 378, 387, 414, 1001], "0": [182, 318, 319, 320, 321, 1017, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "1": [187, 321, 322, 323, 324, 325, 326, 387, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "10": [100, 1032], "11": 1032, "12": 1032, "13": 1033, "14": 1034, "15": 1035, "16": 1036, "17": 1037, "18": 1038, "19": 1039, "1d": [294, 356], "2": [323, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "20": [102, 350, 370, 1040], "2018": 1021, "20newgroup": 226, "21": 1041, "22": [318, 1042], "23": [319, 1043], "24": [320, 1044], "2d": [51, 85, 122, 128, 187], "3": [63, 324, 1040, 1041, 1046, 1048], "3d": 187, "4": [325, 1032, 1040, 1049], "5": [326, 1017, 1032, 1050], "6": [1032, 1051], "7": 1032, "8": 1032, "9": 1032, "99": 370, "A": [52, 58, 59, 81, 91, 96, 211, 321, 374, 381, 411], "And": [235, 390], "In": 276, "NOT": 380, "One": [204, 225, 278, 321, 338, 411, 1007, 1015], "The": [0, 116, 185, 186, 211, 236, 242, 263, 267, 276, 283, 286, 370, 379, 383, 411, 415, 1000, 1001, 1013], "Will": 387, "With": 249, "__sklearn_is_fitted__": 132, "_safe_index": 926, "abil": 176, "ablat": 248, "about": [0, 186, 387], "absolut": 1001, "access": 408, "accuraci": [188, 243, 350, 354, 1001], "accuracy_scor": 703, "across": 358, "action": 375, "activ": [0, 329], "ad": 407, "adaboost": [134, 135, 136, 414], "adaboostclassifi": [134, 553], "adaboostregressor": 554, "add": [325, 387], "add_dummy_featur": 886, "addit": [414, 993], "additive_chi2_kernel": 758, "additivechi2sampl": 638, "address": 263, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 704, "adjusted_rand_scor": 705, "advanc": 249, "advantag": 407, "affin": [51, 73, 407, 999], "affinity_propag": 453, "affinitypropag": 439, "agglom": [74, 75, 85], "agglomer": [84, 87, 1018], "agglomerativeclust": 440, "aggress": [990, 997], "aic": [201, 997], "algebra": [362, 384], "algorithm": [57, 58, 59, 73, 79, 82, 88, 96, 97, 98, 231, 238, 381, 387, 995, 997, 1002, 1004, 1005, 1009, 1017], "alias": 383, "align": 998, "all": [269, 278, 322, 393, 1047, 1048, 1049], "all_displai": 939, "all_estim": 940, "all_funct": 941, "alloc": [54, 412], "alpha": [159, 354], "alpin": 393, "alreadi": 55, "altern": 990, "am": [143, 248], "amount": 281, "an": [81, 92, 132, 182, 195, 201, 299, 318, 322, 383, 387, 415, 990, 1007], "anaconda": 393, "analysi": [43, 64, 69, 70, 93, 120, 126, 127, 130, 134, 146, 187, 197, 254, 271, 272, 279, 297, 298, 299, 350, 410, 412, 995, 1004, 1018], "analyz": [52, 990], "angl": [201, 997], "ani": 387, "anomali": 238, "anova": [165, 342], "api": [2, 41, 132, 251, 252, 318, 321, 323, 363, 377, 382, 389, 398, 403, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1049, 1050], "appli": 159, "applic": 415, "approach": [109, 201, 269], "approxim": [183, 190, 191, 243, 289, 320, 409, 993], "ar": [100, 263, 321, 387], "arch": 393, "architectur": 1021, "ard": [197, 997], "ardregress": 644, "arff": 369, "argument": [321, 377, 1043, 1045], "arm64": 383, "arrai": [41, 323, 326, 357, 384, 403, 1049, 1050], "artifact": 401, "artwork": 0, "as_float_arrai": 928, "ask": 387, "assert": 377, "assert_all_finit": 929, "assign": 407, "assumpt": 90, "atom": [49, 362], "attent": 387, "attribut": [377, 389, 403, 990], "auc": [318, 706], "author": [379, 1032], "autom": 375, "automat": [197, 388, 997], "auxiliari": 41, "avail": [322, 1028, 1029], "available_if": 961, "averag": [276, 278, 407, 414, 1001], "average_precision_scor": 707, "avoid": [358, 408], "aweb": 1025, "ax": 382, "b": 115, "backend": 383, "backward": 375, "bag": [137, 145, 350, 414, 415, 990], "baggingclassifi": 555, "baggingregressor": 556, "balanc": [268, 1001], "balanced_accuracy_scor": 708, "ball": 1004, "balltre": [844, 1004], "base": [4, 41, 42, 43, 115, 141, 168, 183, 197, 244, 318, 319, 321, 323, 324, 325, 375, 407, 411, 414, 416, 997, 1009, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "baseestim": [377, 421], "baselin": [191, 211], "basi": [44, 179, 417, 993, 997], "basic": [177, 229, 388, 409, 417], "batch": [407, 412], "bay": [61, 62, 1003], "bayesian": [25, 193, 194, 254, 269, 997, 1000], "bayesiangaussianmixtur": 797, "bayesianridg": 645, "befor": 182, "behavior": 264, "behind": 0, "being": 186, "benchmark": [46, 49, 91, 350], "bernoulli": [1003, 1006], "bernoullinb": 839, "bernoullirbm": 860, "best": [259, 376, 387], "bestofmedia": 1025, "beta": 412, "betawork": 1025, "between": [97, 280, 997], "bia": 137, "bic": [201, 259, 997], "biclust": [27, 56, 57, 58, 183, 371, 404], "biclustermixin": 422, "bigger": 364, "bike": [43, 52, 187], "bin": 1011, "binar": [867, 887, 1011, 1012], "binari": [276, 288, 326, 997, 1001], "birch": [77, 407, 441], "birchbox": 1025, "bisect": [78, 407], "bisectingkmean": [322, 442], "blind": 121, "bnp": 1025, "boil": 380, "boltzmann": [307, 1006], "bonu": 159, "book": 1025, "boost": [43, 140, 143, 144, 145, 146, 147, 148, 149, 187, 211, 318, 319, 321, 323, 324, 414], "bouldin": 407, "bound": 242, "boundari": [150, 155, 204, 292, 333, 343], "branch": 383, "break": 347, "breast": [189, 372], "brier": 1001, "brier_score_loss": 709, "brute": [990, 1004], "bug": [374, 375, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "build": [175, 182, 373, 375, 383, 408, 1050], "bulk": [49, 362], "bunch": [387, 919], "busi": 263, "c": 381, "c4": 1017, "c5": 1017, "cach": [104, 291, 408], "calcul": [144, 156], "calibr": [5, 60, 61, 62, 63, 64, 146, 183, 211, 405, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "calibratedclassifiercv": 436, "calibration_curv": 438, "calibrationdisplai": 437, "california": 370, "calinski": 407, "calinski_harabasz_scor": 710, "call": [358, 374], "callgrind": 381, "can": [159, 387], "cancer": [189, 372], "candid": [281, 990], "canon": [115, 410], "card": 263, "cardif": 1025, "cardiotocographi": 248, "cart": 1017, "case": [346, 997, 1001], "categor": [143, 315, 320, 325, 387, 414, 1003, 1011], "categori": [43, 322, 324, 1011], "categoricalnb": 840, "caus": 393, "causal": [185, 186], "cautiou": 186, "cca": [115, 481], "center": [120, 1011], "central": 55, "centroid": [300, 1004], "chain": [105, 250, 288, 388, 408], "chanc": 72, "chang": [245, 375, 390, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "changelog": [1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "characterist": [278, 279, 1001], "check": [186, 271, 318, 383, 403, 1040, 1041, 1042], "check_arrai": 931, "check_consistent_length": 932, "check_cv": 824, "check_estim": 942, "check_increas": 636, "check_is_fit": [377, 984], "check_memori": 985, "check_random_st": 933, "check_scalar": 934, "check_scor": 711, "check_symmetr": 986, "check_x_i": 930, "checker": 41, "checklist": 375, "chi": [993, 999], "chi2": 604, "chi2_kernel": 759, "choic": 412, "choos": [46, 395], "ci": [375, 383], "circl": 99, "cite": 0, "claim": [211, 229], "class": [41, 63, 72, 134, 136, 156, 220, 225, 272, 276, 278, 321, 338, 341, 389, 406, 411, 414, 415, 1001, 1004, 1007, 1015, 1016, 1032, 1033], "class_likelihood_ratio": 712, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 102, 160, 171, 172, 173, 174, 178, 183, 227, 246, 272, 275, 276, 279, 288, 292, 300, 307, 318, 327, 332, 343, 350, 371, 417, 997, 1001, 1002, 1004, 1005, 1015, 1016, 1017], "classifi": [25, 41, 61, 62, 64, 67, 132, 157, 204, 250, 266, 283, 288, 292, 318, 326, 333, 336, 339, 350, 357, 405, 414, 995, 1004], "classification_report": 713, "classifierchain": [835, 1002], "classifiermixin": 424, "classifiertag": 920, "classnameprefixfeaturesoutmixin": 423, "clear": 1042, "clear_data_hom": 485, "clone": [377, 432], "close": [374, 383], "cloud": 122, "cloudpickl": 401, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 81, 82, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 120, 183, 322, 324, 351, 371, 404, 407, 412, 1001, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "cluster_optics_dbscan": 454, "cluster_optics_xi": 455, "clustermixin": 425, "co": [57, 59, 404], "co2": 175, "code": [0, 46, 120, 129, 375, 377, 380, 381, 383, 412, 1036, 1037, 1038, 1039, 1040], "coeffici": [168, 186, 193, 215, 216, 282, 407, 1001], "cohen": 1001, "cohen_kappa_scor": 716, "coin": [80, 81], "column": [102, 103, 250], "column_or_1d": 987, "columntransform": [326, 408, 463], "com": 1025, "combin": [154, 239], "comment": 380, "commit": 375, "committe": 390, "common": [186, 358, 389, 403, 415, 1001], "commun": [0, 375], "compact": 240, "compar": [63, 77, 79, 95, 109, 115, 140, 153, 164, 191, 193, 198, 213, 218, 238, 244, 269, 277, 297, 305, 309, 315, 387], "comparison": [64, 67, 70, 78, 97, 111, 128, 143, 144, 163, 170, 231, 232, 244, 269, 280, 282, 286, 352, 997], "compat": [41, 318, 375, 377, 403], "compil": [373, 381], "complement": 1003, "complementnb": 841, "complet": [247, 407], "completeness_scor": 717, "complex": [46, 240, 250, 268, 271, 330, 354, 362, 997, 1004, 1005, 1015, 1016, 1017], "compon": [116, 120, 126, 297, 298, 299, 412, 1004, 1018], "compos": [7, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "composit": [101, 183, 408, 990], "compoundkernel": 612, "compress": [53, 86, 362], "comput": [41, 55, 73, 81, 82, 96, 97, 100, 109, 140, 205, 216, 361, 362, 408, 411, 1008, 1022], "computation": 364, "compute_class_weight": 935, "compute_optics_graph": 456, "compute_sample_weight": 936, "concaten": 106, "concentr": 254, "concept": [389, 997], "conclud": [43, 235], "conclus": [46, 52, 170, 197, 201, 208, 286, 292, 316, 343], "conda": 373, "condit": [187, 320, 1008], "confid": 146, "config_context": 467, "configur": [362, 363], "confus": [262, 407, 1001], "confusion_matrix": 718, "confusionmatrixdisplai": [239, 697], "connect": [407, 415], "consensu": 997, "consensus_scor": 719, "consider": 263, "constant": [211, 263, 991], "constantkernel": 613, "constraint": [149, 151, 323, 325, 407, 414], "construct": 244, "consum": 245, "content": 387, "conting": 407, "contingency_matrix": 714, "continu": [310, 375], "contribut": [375, 387], "contributor": [0, 374, 375, 390, 1036, 1037, 1038, 1039, 1040], "control": [358, 414, 1005], "convent": 376, "converg": 134, "convergencewarn": 571, "convex": 221, "cookbook": 179, "coordin": 201, "core": [0, 47, 364, 374, 381, 387, 390, 1003], "corpu": 415, "correl": [186, 189, 410, 1001, 1009], "cosin": 999, "cosine_dist": 760, "cosine_similar": 761, "cost": [263, 354, 1017], "countvector": 588, "covari": [8, 70, 108, 109, 111, 112, 113, 183, 256, 409, 995, 1040, 1044, 1045, 1046, 1048, 1049], "coverag": [375, 383, 1001], "coverage_error": 720, "covertyp": [248, 370], "craft": 380, "crash": 387, "creat": [102, 127, 134, 215, 239, 276, 316, 342, 343, 356, 387], "credit": 263, "criteria": [199, 387, 997, 1017], "criterion": [201, 320, 990, 1015], "cross": [43, 114, 115, 159, 167, 183, 201, 263, 264, 265, 267, 268, 272, 274, 279, 316, 342, 358, 406, 410, 411, 990, 997], "cross_decomposit": [9, 1042, 1044, 1046, 1048, 1050], "cross_val_predict": 825, "cross_val_scor": [273, 826], "cross_valid": [411, 827], "cubic": 194, "cumul": 1001, "curat": 374, "curv": [62, 64, 194, 244, 251, 260, 266, 271, 276, 278, 405, 996], "custom": [132, 267, 326, 335, 415, 1011, 1016], "cut": [263, 283], "cv": [264, 358], "cv_results_": 990, "cython": [376, 381, 383], "d": [411, 1004], "d2_absolute_error_scor": 721, "d2_log_loss_scor": 722, "d2_pinball_scor": 723, "d2_tweedie_scor": 724, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 81, 82, 83, 88, 90, 91, 96, 97, 99, 100, 102, 107, 109, 111, 113, 115, 116, 121, 122, 125, 127, 135, 141, 144, 147, 149, 150, 154, 164, 167, 168, 176, 178, 182, 185, 188, 189, 191, 194, 198, 205, 206, 208, 215, 239, 244, 251, 259, 264, 266, 270, 275, 276, 278, 279, 282, 292, 296, 301, 307, 309, 313, 314, 315, 325, 328, 339, 342, 345, 346, 351, 352, 358, 362, 364, 380, 387, 389, 407, 408, 411, 416, 1011, 1015, 1025], "dataconversionwarn": 572, "datadimensionalitywarn": 573, "datafram": [318, 325, 387, 1049], "dataiku": 1025, "datarobot": 1025, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 91, 95, 102, 115, 117, 118, 120, 126, 128, 134, 140, 142, 143, 154, 159, 170, 172, 174, 175, 177, 179, 183, 185, 186, 187, 193, 196, 197, 201, 204, 211, 213, 220, 229, 231, 232, 238, 243, 248, 249, 263, 267, 275, 276, 283, 286, 288, 316, 332, 333, 336, 343, 350, 355, 356, 367, 368, 369, 370, 371, 372, 380, 387, 417, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "davi": 407, "davies_bouldin_scor": 725, "dbscan": [82, 407, 418, 443], "dbscan_clust": 88, "dcg_score": 726, "deal": [41, 387], "debian": 393, "debug": 383, "debugg": 381, "decis": [134, 135, 142, 150, 155, 183, 204, 243, 263, 283, 292, 324, 326, 333, 343, 353, 354, 355, 356, 357, 387, 390, 406, 1017], "decisionboundarydisplai": 631, "decisiontre": 135, "decisiontreeclassifi": 912, "decisiontreeregressor": [320, 913], "decod": 415, "decompos": 412, "decomposit": [11, 114, 115, 119, 120, 137, 183, 371, 410, 412, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "decreas": [141, 188], "deep": 387, "default": [245, 296, 375], "default_tag": 937, "defin": [72, 81, 91, 100, 231, 264, 266, 267, 352, 1001], "definit": [229, 282, 307, 1008, 1042], "deflat": 115, "delai": 967, "demand": [43, 52], "demo": [58, 59, 73, 81, 82, 88, 91, 96, 98], "demonstr": [90, 273, 312, 328], "dendrogram": 76, "denois": [44, 123], "dens": 198, "densiti": [258, 293, 294, 302, 324, 413, 945, 1016], "densitymixin": 426, "depend": [187, 245, 249, 373, 1008, 1032, 1045, 1046], "deploi": 387, "deploy": 393, "deprec": [1, 245, 375, 938, 1042], "descent": [201, 219, 225, 997, 1015], "descript": 185, "design": 175, "det": [266, 1001], "det_curv": 727, "detail": [993, 1015, 1016], "detcurvedisplai": 698, "detect": [48, 238, 248, 266, 295, 296, 1001, 1007, 1016], "determin": [112, 197, 409, 997, 1001], "develop": [131, 132, 183, 245, 373, 376, 377, 378, 382, 383, 384, 990, 1027, 1048], "devianc": [147, 1001], "devic": 403, "diabet": [159, 249, 283, 372], "diagnost": 372, "dict": 415, "dict_learn": 545, "dict_learning_onlin": 546, "dictionari": [83, 120, 123, 129, 412], "dictionarylearn": 531, "dictvector": [352, 581], "did": 387, "diff": 383, "differ": [75, 79, 95, 109, 179, 187, 309, 312, 315, 336, 343, 377, 387, 398, 407, 997], "digit": [68, 85, 91, 160, 232, 307, 328, 329, 372], "dimension": [104, 231, 234, 250, 298, 314, 351, 995, 998, 1004, 1018], "direct": 228, "dirichlet": [54, 412, 1000], "discount": 1001, "discov": 41, "discret": [150, 178, 310, 311, 1011], "discrimin": [69, 70, 995], "discriminant_analysi": [12, 1040, 1041, 1044, 1046, 1047, 1048], "discuss": 374, "disk": 55, "dispatch": 385, "displai": [123, 216, 239, 240, 250, 323, 324, 325, 383, 1029, 1048], "distanc": [27, 111, 326], "distance_metr": 762, "distancemetr": 699, "distort": 123, "distribut": [50, 229, 231, 302, 313, 370, 393, 998, 1011], "diverg": 412, "divid": 322, "do": [380, 387], "document": [0, 47, 57, 183, 320, 321, 349, 350, 351, 375, 1020, 1021, 1024, 1028, 1032, 1035, 1036, 1039, 1040], "doe": 387, "domain": 1020, "donat": 0, "dot": [179, 417], "dotproduct": 614, "down": 380, "download": [55, 154, 182, 369], "drawback": 407, "drop": 143, "dtype": 325, "dummi": [13, 1001, 1040, 1041, 1042, 1045, 1046, 1050], "dummyclassifi": 551, "dummyregressor": 552, "dump_svmlight_fil": 486, "dure": 358, "d\u00b2": 1001, "each": [276, 281, 350], "earli": [144, 149, 219], "earlier": 1032, "eas": 376, "effect": [107, 149, 185, 236, 282, 309, 314, 331, 354], "effici": [323, 325, 384], "efficiencywarn": 574, "eigenfac": [45, 120], "eigenmap": 998, "eigenvector": 55, "elast": [195, 200, 997], "elasticnet": [197, 319, 646], "elasticnetcv": 647, "element": 389, "elimin": [166, 167, 416, 990], "ellipsoid": [70, 255], "ellipt": 1007, "ellipticenvelop": 468, "embed": [51, 85, 231, 232, 242, 299, 414, 998], "emeritu": 0, "empir": [94, 112, 242, 409], "empirical_covari": 476, "empiricalcovari": 469, "enable_halving_search_cv": 579, "enable_iterative_imput": 580, "encod": [86, 143, 315, 316, 324, 1011, 1012], "enet_path": 681, "enforc": [1043, 1045], "engin": [43, 52, 188, 1020, 1025], "enhanc": [323, 390, 1020, 1035, 1036, 1037, 1038, 1039], "enrich": 325, "ensembl": [14, 133, 139, 142, 183, 414, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "enthought": 393, "entir": 387, "entri": 1014, "envelop": 1007, "environ": [363, 383, 401], "equival": 269, "error": [134, 138, 144, 146, 159, 193, 215, 266, 282, 383, 393, 997, 1001], "establish": [97, 191], "estim": [41, 101, 108, 109, 110, 111, 112, 113, 131, 132, 137, 143, 145, 153, 176, 182, 183, 193, 214, 217, 240, 245, 247, 248, 258, 277, 286, 293, 294, 302, 318, 319, 320, 323, 325, 358, 377, 387, 388, 389, 395, 403, 408, 409, 411, 413, 414, 990, 991, 995, 997, 1001, 1016, 1020, 1033, 1040, 1041, 1042], "estimate_bandwidth": 457, "estimator_html_repr": 944, "euclidean_dist": 763, "evalu": [52, 72, 91, 94, 112, 208, 211, 248, 263, 270, 273, 282, 307, 315, 351, 388, 402, 404, 407, 411, 414, 990, 996, 1001], "evernot": 1025, "exact": 412, "exampl": [42, 45, 48, 86, 92, 107, 117, 132, 150, 177, 183, 208, 215, 344, 347, 364, 380, 398, 403, 406, 415, 417, 421, 424, 427, 430, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 487, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 510, 511, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 584, 587, 588, 589, 590, 591, 593, 594, 597, 599, 600, 602, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 727, 729, 732, 734, 735, 737, 738, 741, 742, 745, 746, 748, 749, 750, 752, 753, 755, 757, 761, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 861, 862, 863, 864, 865, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 893, 897, 898, 900, 901, 902, 904, 907, 908, 909, 910, 911, 912, 913, 918, 919, 933, 943, 945, 952, 957, 958, 959, 960, 961, 974, 984, 1032], "except": [15, 384, 1044, 1048], "execut": [358, 387], "exercis": [158, 159, 160, 161, 183], "exhaust": 990, "exist": 375, "exp": [179, 417], "expans": 193, "expect": [187, 320, 1008], "experi": [0, 72, 374], "experiment": [16, 323, 379, 403, 1048], "explain": 1001, "explained_variance_scor": 728, "explicit": 243, "explor": 43, "exponenti": 616, "export": [40, 387], "export_graphviz": 916, "export_text": 917, "expsinesquar": 615, "extend": 997, "extens": [381, 393], "extern": [369, 1019, 1032, 1041], "extract": [54, 106, 123, 229, 270, 351, 362, 364, 415], "extract_patches_2d": 584, "extrapol": 175, "extratreeclassifi": 914, "extratreeregressor": 915, "extratreesclassifi": 557, "extratreesregressor": 558, "extrem": [380, 414], "f": [163, 1001], "f1": 276, "f1_score": 729, "f_classif": 605, "f_regress": 606, "fa": [120, 127], "face": [45, 83, 120, 247, 370, 1025], "factor": [54, 120, 127, 130, 295, 296, 412, 1007], "factoranalysi": 532, "fail": 380, "failur": [185, 990], "fast_logdet": 946, "faster": [323, 414], "fastica": [120, 121, 122, 419, 533], "fbeta_scor": 730, "featur": [43, 52, 84, 87, 106, 125, 126, 139, 141, 143, 147, 149, 151, 152, 162, 164, 166, 167, 168, 183, 188, 189, 191, 193, 206, 229, 243, 249, 270, 307, 310, 311, 314, 315, 318, 320, 321, 342, 350, 351, 362, 364, 375, 379, 398, 408, 414, 415, 416, 991, 1009, 1011, 1018, 1035, 1036, 1037, 1038, 1039], "feature_extract": [17, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "feature_select": [18, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "featureagglomer": [407, 444], "featurehash": [352, 582], "featureunion": [408, 863], "fedora": 393, "fetch_20newsgroup": 487, "fetch_20newsgroups_vector": 488, "fetch_california_h": 489, "fetch_covtyp": 490, "fetch_fil": 491, "fetch_kddcup99": 492, "fetch_lfw_pair": 493, "fetch_lfw_peopl": 494, "fetch_olivetti_fac": 495, "fetch_openml": [323, 496], "fetch_rcv1": 497, "fetch_species_distribut": 498, "file": [55, 375, 383, 393, 415], "final": [90, 170], "find": 1004, "first": [48, 72], "fit": [29, 58, 63, 90, 121, 127, 141, 146, 147, 175, 193, 194, 195, 206, 213, 217, 276, 288, 296, 301, 316, 345, 356, 358, 377, 388, 398, 403, 414, 1003, 1007], "fitfailedwarn": 575, "fix": [72, 1032, 1035, 1036, 1037, 1038, 1039, 1045], "fixedthresholdclassifi": [326, 799], "flag": 383, "flexibl": [321, 991], "float64": 403, "fold": [383, 411], "footprint": 86, "forc": [990, 1004], "forecast": [52, 175], "forest": [138, 140, 141, 153, 188, 189, 248, 251, 325, 370, 414, 1007], "forg": 373, "format": [369, 380, 387, 1002], "formul": [404, 414, 995, 1004, 1015, 1016, 1017], "four": 99, "fowlk": 407, "fowlkes_mallows_scor": 731, "framework": 1020, "free": 177, "freebsd": 373, "freez": 387, "french": 211, "frequenc": 229, "frequent": 387, "frequentist": 269, "frobeniu": 412, "from": [17, 51, 123, 168, 188, 315, 318, 363, 369, 373, 387, 415, 1001, 1042], "fruit": 374, "fulli": 185, "function": [41, 49, 70, 179, 202, 215, 216, 221, 232, 264, 283, 320, 342, 352, 384, 411, 414, 417, 993, 997, 1001, 1016, 1049], "functiontransform": 868, "fund": 0, "futur": 387, "futurewarn": 1042, "gain": [263, 1001], "galleri": [421, 424, 427, 430, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 487, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 510, 511, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 582, 584, 587, 588, 589, 590, 591, 593, 594, 597, 599, 600, 602, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 622, 623, 625, 627, 628, 630, 631, 632, 633, 634, 635, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 717, 718, 719, 727, 729, 732, 734, 735, 737, 738, 741, 742, 745, 746, 748, 749, 750, 752, 753, 755, 757, 761, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 861, 862, 863, 864, 865, 868, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 893, 897, 898, 900, 901, 902, 904, 907, 908, 909, 910, 911, 912, 913, 918, 919, 933, 943, 945, 952, 957, 958, 959, 960, 961, 974, 984], "gamma": [229, 324, 1001], "gammaregressor": 648, "gaussian": [61, 62, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 253, 254, 255, 258, 259, 260, 309, 417, 1000, 1003, 1011, 1013], "gaussian_process": [19, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "gaussianmixtur": 798, "gaussiannb": 842, "gaussianprocessclassifi": 610, "gaussianprocessregressor": 611, "gaussianrandomproject": 896, "gdb": 381, "gen_batch": 951, "gen_even_slic": 952, "gener": [10, 25, 52, 58, 61, 70, 73, 81, 82, 88, 90, 96, 97, 99, 100, 109, 111, 113, 118, 121, 122, 123, 141, 150, 164, 167, 170, 176, 177, 179, 183, 192, 193, 194, 197, 204, 206, 211, 213, 244, 259, 266, 282, 296, 301, 307, 319, 328, 345, 346, 358, 371, 375, 389, 412, 414, 997, 1011, 1021], "genericunivariateselect": 592, "german": 263, "get": [358, 383, 387, 388], "get_config": 626, "get_data_hom": 499, "get_feature_names_out": 322, "get_param": 377, "get_routing_for_object": 959, "get_scor": 732, "get_scorer_nam": 733, "get_tag": 953, "git": 375, "github": 375, "gitter": 1024, "glm": 25, "glossari": 389, "gmm": [256, 257], "goal": 1021, "good": [375, 380], "govern": [0, 390], "gpc": [171, 172, 173, 174, 417], "gperftool": 381, "gpr": [175, 176, 417], "gprof": 381, "gpu": 387, "gradient": [43, 140, 143, 144, 145, 146, 147, 148, 149, 187, 211, 219, 225, 318, 319, 321, 323, 324, 414, 997, 1015], "gradientboostingclassifi": [414, 559], "gradientboostingregressor": [414, 560], "gram": 195, "graph": [41, 51, 318, 384, 387, 407, 415], "graphic": [387, 1006], "graphical_lasso": 477, "graphicallasso": 470, "graphicallassocv": 471, "greek": 80, "grid": [250, 267, 269, 277, 280, 990], "grid_to_graph": 585, "gridsearchcv": [104, 159, 273, 800], "ground": [72, 193], "group": [322, 324, 411, 1025], "groupkfold": 801, "groupshufflesplit": 802, "grow": 72, "guid": [378, 1027], "guidelin": [375, 377], "halv": [280, 281, 320, 990], "halvinggridsearchcv": 803, "halvingrandomsearchcv": 804, "ham": 1001, "hamming_loss": 734, "hand": 68, "handl": [41, 189, 991], "handwritten": [91, 232, 372], "harabasz": 407, "hard": 414, "has_fit_paramet": 988, "hash": [152, 384, 415], "hashingvector": [351, 589], "haversine_dist": 764, "hdbscan": [88, 324, 407, 445], "help": [374, 387], "helper": [49, 179, 232, 384], "here": 357, "hessian": 998, "heterogen": [102, 408], "hierarch": [76, 81, 95, 100, 324, 407], "hierarchi": 407, "higher": 363, "highlight": [183, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 1032, 1035, 1036, 1039, 1040], "hing": 1001, "hinge_loss": 735, "histgradientboost": [320, 325], "histgradientboostingclassifi": [414, 561], "histgradientboostingregressor": [322, 562], "histogram": [140, 149, 319, 321, 323, 413, 414], "histori": [0, 1030], "hmm": 387, "hoc": 283, "hole": 235, "home": 269, "homebrew": 373, "homogen": 407, "homogeneity_completeness_v_measur": 736, "homogeneity_scor": 737, "hot": 143, "hour": 52, "hourli": 185, "hous": [143, 248, 370], "how": [159, 358, 375, 381, 387], "howaboutw": 1025, "html": [240, 377], "huber": 997, "huberregressor": [196, 649], "hug": 1025, "hyper": [29, 146, 267, 320, 990], "hyperparamet": [88, 175, 176, 270, 277, 286, 617], "hyperplan": [204, 223, 340, 341], "i": [326, 357, 380, 387, 411, 1025], "ic": [187, 1008], "ica": [121, 412], "id3": 1017, "idf": 415, "illustr": [104, 174, 179, 299, 417], "imag": [17, 44, 81, 83, 86, 99, 123, 369, 387, 415], "img_to_graph": 586, "impact": [43, 94, 282, 1047, 1048, 1049, 1050], "implement": [132, 198, 387, 1001, 1004, 1015, 1016], "import": [141, 147, 168, 188, 189, 243, 286, 314, 318, 406, 414, 1009], "improv": [319, 320, 321, 322, 323, 325, 326, 374, 375, 1035, 1036], "impur": [141, 188, 354, 1009], "imput": [20, 180, 181, 182, 183, 318, 326, 991, 1011, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "includ": 387, "inclus": 387, "incom": 185, "inconsist": 358, "inconsistentversionwarn": 576, "incr_mean_variance_axi": 975, "increment": [124, 364, 412], "incrementalpca": 534, "independ": [120, 412], "index": [407, 955], "indic": 264, "individu": [157, 187, 320, 1008], "induct": 89, "infer": 185, "influenc": [46, 49, 362], "infonea": 1025, "inform": [163, 182, 199, 201, 379, 407, 990, 997], "infrastructur": 0, "infrequ": [322, 324, 1011], "init": 377, "initi": [92, 94, 257], "inplace_column_scal": 976, "inplace_csr_column_scal": 977, "inplace_csr_row_normalize_l1": 982, "inplace_csr_row_normalize_l2": 983, "inplace_row_scal": 978, "inplace_swap_column": 979, "inplace_swap_row": 980, "input": [41, 362, 377, 403, 407, 1011], "inputtag": 921, "inria": 1025, "inspect": [21, 183, 184, 392, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "instal": [373, 393], "instanc": [358, 364], "instanti": 377, "instead": 263, "instruct": 373, "insur": 229, "integr": 375, "intel": 393, "interact": [43, 187, 323, 414], "interfac": [27, 398], "intern": [316, 406], "internet": 51, "interoper": 1020, "interpol": 212, "interpret": [175, 186, 215, 248, 288, 412, 414], "interv": 146, "introduc": 252, "introduct": 998, "introductori": 177, "invari": [88, 272], "invers": [113, 409, 1013], "io": 401, "iri": [126, 128, 142, 172, 220, 333, 336, 355, 372, 417], "is_classifi": 433, "is_cluster": 434, "is_multilabel": 962, "is_regressor": 435, "iso": [173, 276], "isol": 1007, "isolationforest": [150, 563], "isomap": [231, 232, 688, 998], "isoton": [22, 241, 405, 992, 1040, 1041, 1042, 1044, 1046, 1047], "isotonic_regress": 637, "isotonicregress": 635, "issu": [374, 375, 383], "iter": [182, 281, 411], "iterativeimput": [181, 627, 991], "j": 1025, "jaccard": 1001, "jaccard_scor": 738, "job": 387, "joblib": [363, 381, 401], "johnson": [242, 1013], "johnson_lindenstrauss_min_dim": 898, "joint": 206, "k": [78, 90, 91, 92, 94, 97, 100, 115, 292, 314, 351, 407, 411, 1001, 1004, 1011], "k_mean": 458, "kappa": 1001, "kbinsdiscret": [310, 312, 869], "kcachegrind": 381, "kddcup": 370, "kddcup99": 248, "kdtree": [845, 1004], "keep": 991, "kei": 401, "kernel": [19, 43, 44, 125, 170, 175, 176, 178, 179, 183, 190, 191, 243, 244, 293, 294, 302, 320, 335, 338, 343, 345, 412, 413, 417, 618, 993, 994, 999, 1011, 1016], "kernel_approxim": [23, 1042, 1044, 1045, 1046, 1047, 1048], "kernel_metr": 765, "kernel_ridg": [24, 1049], "kernelcenter": 870, "kerneldens": 849, "kernelpca": [125, 535], "kernelridg": 643, "keyword": [321, 1043, 1045], "kfold": 805, "kmean": [93, 97, 319, 446], "kmeans_plusplu": 459, "kneighbors_graph": 857, "kneighborsclassifi": 846, "kneighborsregressor": 847, "kneighborstransform": 848, "knn": [182, 318], "knnimput": 628, "knowledg": 376, "known": [1040, 1041], "kpca": 412, "l": 194, "l1": [53, 197, 203, 205, 227, 346, 416], "l1_min_c": 911, "l2": [215, 346], "label": [41, 72, 276, 328, 329, 330, 370, 371, 407, 411, 414, 1001, 1012, 1014], "label_binar": 888, "label_ranking_average_precision_scor": 739, "label_ranking_loss": 740, "labelbinar": [871, 1012], "labelencod": 872, "labelpropag": 899, "labelspread": 900, "lag": 52, "laplacian": 999, "laplacian_kernel": 766, "lar": [200, 650, 997], "larg": 415, "lars_path": 682, "lars_path_gram": 683, "larscv": 651, "lasso": [53, 197, 198, 199, 200, 201, 206, 319, 652, 997], "lasso_path": 684, "lassocv": 653, "lassolar": 654, "lassolars": 656, "lassolarscv": 655, "latenc": [49, 362], "latent": [54, 115, 412], "latentdirichletalloc": 536, "latest": 393, "layer": [187, 304, 1005], "lda": [70, 128, 412, 995], "leakag": 358, "learn": [0, 41, 44, 51, 83, 120, 123, 169, 183, 185, 186, 187, 191, 230, 231, 232, 233, 244, 245, 263, 264, 271, 299, 305, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 361, 362, 364, 371, 373, 375, 376, 377, 379, 380, 387, 390, 393, 412, 414, 996, 998, 1006, 1014, 1020, 1021, 1023, 1025, 1026, 1028], "learner": [134, 414], "learning_curv": 828, "learningcurvedisplai": 806, "least": [116, 146, 201, 207, 208, 209, 997], "leav": [354, 411, 997], "leaveonegroupout": 807, "leaveoneout": 808, "leavepgroupsout": 809, "leavepout": 810, "ledoit": [69, 110, 409], "ledoit_wolf": 478, "ledoit_wolf_shrinkag": 479, "ledoitwolf": [109, 472], "lemma": 1013, "length": [150, 393], "lesson": [185, 186], "level": [175, 176, 363, 407, 414], "liabil": 211, "librari": [362, 363], "libsvm": 369, "likelihood": [109, 193, 194, 272, 1001, 1006], "limit": [143, 170, 362, 393, 401, 415], "lindenstrauss": [242, 1013], "line": [159, 173], "linear": [25, 43, 62, 69, 70, 146, 170, 183, 186, 192, 193, 208, 211, 214, 217, 231, 232, 243, 319, 338, 343, 345, 362, 384, 387, 995, 997, 998, 999, 1011], "linear_kernel": 767, "linear_model": [25, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "lineardiscriminantanalysi": [323, 549], "linearregress": [213, 657], "linearsvc": [337, 904], "linearsvr": 905, "link": [362, 1001], "linkag": [95, 407], "linnerrud": 372, "linux": [373, 387, 393], "list": [72, 379, 1024], "loa": 175, "load": [44, 46, 55, 83, 91, 126, 140, 143, 147, 159, 168, 188, 205, 208, 229, 232, 239, 243, 251, 270, 278, 279, 288, 292, 314, 315, 339, 342, 350, 351, 352, 368, 369, 380, 387, 415], "load_breast_canc": 500, "load_diabet": 501, "load_digit": 502, "load_fil": 503, "load_iri": 504, "load_linnerud": 505, "load_sample_imag": [506, 507], "load_svmlight_fil": [508, 509], "load_win": 510, "loader": 10, "local": [231, 232, 295, 296, 998, 1007], "locally_linear_embed": 693, "locallylinearembed": 689, "localoutlierfactor": 850, "lock": [375, 383], "lof": [295, 296], "log": [193, 194, 1001], "log_loss": 741, "logarithm": 1001, "logist": [105, 202, 203, 204, 205, 226, 227, 997], "logisticregress": [288, 658], "logisticregressioncv": 659, "loo": 411, "look": [52, 244, 345], "loss": [149, 211, 221, 319, 322, 324, 414, 1001, 1049], "lot": 387, "love": 1025, "low": [407, 414, 416], "lower": 363, "lpo": 411, "lsa": 351, "mac": 393, "machin": [169, 183, 185, 186, 187, 307, 334, 383, 1006, 1016], "machinali": 1025, "maco": 373, "macport": 393, "macro": 278, "mahalanobi": 111, "mail": 1024, "main": [47, 211], "maintain": [0, 375, 379, 401], "major": [414, 1040, 1041], "make": [154, 157, 182, 375, 390], "make_biclust": 511, "make_blob": [380, 512], "make_checkerboard": 513, "make_circl": 514, "make_classif": [380, 515], "make_column_selector": 465, "make_column_transform": 466, "make_friedman1": 516, "make_friedman2": 517, "make_friedman3": 518, "make_gaussian_quantil": 519, "make_hastie_10_2": 520, "make_low_rank_matrix": 521, "make_moon": 522, "make_multilabel_classif": 523, "make_pipelin": 865, "make_regress": [380, 524], "make_s_curv": 525, "make_scor": 742, "make_sparse_coded_sign": 526, "make_sparse_spd_matrix": 527, "make_sparse_uncorrel": 528, "make_spd_matrix": 529, "make_swiss_rol": 530, "make_union": 866, "mallow": 407, "manag": [363, 393], "manhattan_dist": 768, "mani": [264, 323, 363, 387, 1049, 1050], "manifold": [26, 183, 230, 231, 232, 233, 371, 998, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "manual": [263, 406], "map": [243, 313, 1011], "mar": 1025, "margin": [193, 194, 223, 340, 344], "mark": 991, "markdown": 380, "marker": 375, "market": 51, "match": [210, 997], "matern": 619, "mathemat": [41, 404, 414, 993, 995, 1004, 1008, 1015, 1016, 1017], "matric": [41, 384, 1011], "matrix": [54, 55, 178, 195, 262, 407, 412, 1001], "matter": 186, "matthew": 1001, "matthews_corrcoef": 743, "mat\u00e9rn": [179, 417], "max": [109, 1001], "max_error": 744, "maxabs_scal": 889, "maxabsscal": [309, 873], "maximum": [223, 340, 1006], "md": [690, 998], "mdi": 188, "mean": [78, 90, 91, 92, 94, 96, 97, 141, 182, 188, 215, 351, 407, 1001, 1011], "mean_absolute_error": 745, "mean_absolute_percentage_error": 746, "mean_gamma_devi": 747, "mean_pinball_loss": 748, "mean_poisson_devi": 749, "mean_shift": 460, "mean_squared_error": 750, "mean_squared_log_error": 751, "mean_tweedie_devi": 752, "mean_variance_axi": 981, "meanshift": [96, 447], "measur": [154, 272, 407, 1001], "media": 1024, "median": [997, 1001], "median_absolute_error": 753, "member": 374, "memori": [86, 325, 362, 381, 383], "merg": 379, "meson": [383, 1050], "messag": [269, 375], "meta": [41, 153, 245, 286, 320, 403, 414], "metadata": [41, 245, 324, 325, 350, 389, 398, 1049, 1050], "metadatarequest": 956, "metadatarout": 957, "metaestimatormixin": 427, "method": [95, 106, 115, 133, 170, 183, 231, 233, 257, 285, 287, 389, 401, 407, 993, 1007, 1008], "methodmap": 958, "metric": [27, 72, 75, 146, 263, 273, 403, 407, 411, 990, 999, 1001, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "micro": [276, 278], "min_cluster_s": 88, "min_po": 927, "min_sampl": 88, "mincovdet": 473, "mini": [407, 412], "minibatchdictionarylearn": 537, "minibatchkmean": [77, 97, 120, 448], "minibatchnmf": [322, 538], "minibatchsparsepca": [120, 412, 539], "minim": [380, 1017, 1045, 1046], "minimum": [112, 409], "minmax_scal": 890, "minmaxscal": [309, 874], "misc": 1032, "miscellan": [25, 183, 237, 1040, 1041, 1042, 1043, 1044, 1045, 1048], "mislead": 1009, "miss": [149, 180, 181, 182, 183, 318, 324, 325, 414, 991, 1011, 1017], "missingind": 629, "mix": 103, "mixin": 377, "mixtur": [28, 183, 253, 254, 255, 258, 259, 260, 1000, 1040, 1041, 1045, 1046, 1048, 1050], "mlp": 306, "mlpclassifi": [305, 861], "mlpregressor": 862, "mnist": [227, 306], "mode": [115, 362], "model": [25, 27, 29, 43, 46, 50, 52, 90, 107, 115, 121, 127, 140, 141, 143, 144, 147, 150, 167, 168, 170, 175, 183, 186, 187, 188, 191, 192, 193, 197, 199, 201, 206, 208, 211, 214, 229, 239, 244, 248, 249, 253, 255, 259, 260, 261, 263, 268, 269, 271, 276, 282, 288, 296, 301, 307, 314, 319, 321, 325, 343, 345, 350, 356, 362, 377, 387, 388, 390, 401, 402, 411, 990, 996, 997, 1000, 1001, 1003, 1005, 1006, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "model_select": [29, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "modifi": 998, "modul": [1032, 1040, 1041, 1047, 1048, 1049, 1050], "mona": 175, "monitor": 375, "monoton": [149, 151, 325, 414], "more": [321, 387, 1005], "morgan": 1025, "most": 328, "motor": 211, "mp": 403, "much": 159, "multi": [25, 88, 134, 153, 187, 206, 220, 234, 247, 273, 276, 304, 356, 381, 997, 998, 1001, 1005, 1016, 1017], "multiclass": [30, 41, 183, 226, 278, 285, 286, 318, 384, 405, 1001, 1002, 1041, 1044, 1045, 1046], "multicollinear": 189, "multidimension": 231, "multilabel": [27, 118, 246, 288, 371, 384, 1001, 1002], "multilabel_confusion_matrix": 754, "multilabelbinar": [875, 1012], "multinomi": [204, 227, 997, 1003], "multinomialnb": 843, "multioutput": [31, 183, 287, 1002, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050], "multioutputclassifi": [836, 1002], "multioutputregressor": [837, 1002], "multipl": [106, 250, 273, 358, 382, 411, 990, 991, 1001, 1040, 1041], "multitaskelasticnet": 660, "multitaskelasticnetcv": 661, "multitasklasso": 662, "multitasklassocv": 663, "multivari": [115, 991], "murmurhash3_32": 965, "mutual": [163, 407], "mutual_info_classif": 607, "mutual_info_regress": 608, "mutual_info_scor": 755, "my": 387, "n_featur": 49, "n_job": 387, "naiv": [43, 52, 61, 62, 1003], "naive_bay": [32, 1040, 1042, 1043, 1044, 1045, 1047, 1048], "name": [151, 321, 387, 408], "nan": 991, "nan_euclidean_dist": 769, "nativ": [143, 315, 318, 320, 325, 387], "ndcg_score": 756, "nearest": [100, 183, 289, 290, 291, 292, 297, 300, 301, 318, 991, 1004], "nearestcentroid": 851, "nearestneighbor": 852, "necessari": 380, "need": 387, "neg": [54, 120, 168, 207, 412, 997], "neighbor": [33, 100, 183, 231, 289, 290, 291, 292, 297, 301, 314, 318, 991, 998, 1004, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "neighborhood": [297, 298, 299, 1004], "neighborhoodcomponentsanalysi": 853, "nest": [274, 408], "net": [195, 200, 997], "netbsd": 393, "network": [183, 187, 303, 1005, 1006], "neural": [183, 187, 303, 1005, 1006], "neural_network": [34, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "new": [318, 320, 321, 323, 324, 375, 387, 1019, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "newsgroup": [102, 350, 370], "next": [52, 388], "nightli": 373, "nmf": [120, 322, 412, 540], "nnmf": 412, "nois": [176, 177, 194], "noisi": [123, 177, 215], "non": [43, 54, 120, 146, 207, 211, 215, 231, 274, 326, 338, 345, 412, 997, 1011], "non_negative_factor": 547, "none": 358, "norm": 412, "normal": [69, 191, 211, 309, 313, 876, 891, 1001, 1011], "normalized_mutual_info_scor": 757, "note": [364, 403, 406, 411], "notfittederror": 577, "novelti": [295, 1007, 1016], "now": [318, 321, 1042], "number": [72, 93, 143, 149, 167, 281, 362, 377, 991], "numer": [186, 326, 363, 377], "numpi": [363, 380], "nusvc": 906, "nusvr": 907, "nystroem": [639, 993], "oa": [69, 109, 110, 420, 474], "object": [41, 239, 264, 377, 387, 990, 1001, 1029], "observ": 185, "obtain": [387, 411], "off": [263, 283, 997], "okcupid": 1025, "older": 1032, "olivetti": 370, "omp": 997, "one": [116, 143, 249, 997, 1001], "oneclasssvm": 908, "onehotencod": [322, 877], "onetoonefeaturemixin": 428, "onevsoneclassifi": [832, 1002], "onevsrestclassifi": [288, 833, 1002], "onli": [228, 1043, 1045], "onlin": [83, 218, 321, 322, 1015], "onnx": 401, "oob": 138, "openml": [44, 315, 318, 369], "openmp": [363, 376], "oper": [41, 278, 279, 374, 384, 417, 1001], "optic": [98, 372, 407, 449], "optim": [29, 41, 381, 990], "optimis": 176, "option": [377, 406], "oracl": 409, "ordin": 143, "ordinalencod": [324, 878], "ordinari": [208, 209, 997], "org": [369, 379, 1025], "origin": [86, 125, 275, 299, 309], "orthogon": [210, 997], "orthogonal_mp": 685, "orthogonal_mp_gram": 686, "orthogonalmatchingpursuit": 664, "orthogonalmatchingpursuitcv": 665, "osx": [387, 393], "other": [315, 369, 387, 414, 1020, 1032], "otto": 1025, "our": [91, 264, 267, 283, 375], "out": [47, 145, 364, 383, 411, 990, 997, 1003], "outdat": 383, "outlier": [25, 48, 196, 228, 238, 248, 295, 296, 309, 997, 1007, 1011], "outliermixin": 429, "outlin": 1009, "output": [153, 247, 309, 323, 325, 356, 1017], "outputcodeclassifi": [834, 1002], "over": 250, "overfit": 284, "overhead": 362, "oversubscript": 363, "overview": [286, 382, 401, 407, 1007], "ovo": 278, "ovr": 278, "own": [377, 387, 1001], "p": [411, 1025], "packag": [243, 1020, 1044], "pair": [126, 407], "pair_confusion_matrix": 715, "paired_cosine_dist": 770, "paired_dist": 771, "paired_euclidean_dist": 772, "paired_manhattan_dist": 773, "pairwis": [27, 43, 269, 326, 999], "pairwise_dist": 778, "pairwise_distances_argmin": 779, "pairwise_distances_argmin_min": 780, "pairwise_distances_chunk": 781, "pairwise_kernel": 774, "pairwisekernel": 620, "panda": [323, 380], "parallel": [41, 363, 381, 407, 414, 966, 990], "parallel_backend": 968, "paramet": [29, 41, 46, 109, 146, 267, 282, 320, 339, 346, 375, 377, 388, 389, 408, 414, 990, 997, 1001, 1016], "parametergrid": 811, "parametersampl": 812, "parametr": 1006, "parametrize_with_check": 943, "pariba": 1025, "paristech": 1025, "pariti": 97, "parser": [323, 369], "part": [83, 416], "parti": [211, 245, 393], "partial": [116, 185, 187, 249, 1008], "partial_depend": 633, "partialdependencedisplai": 632, "partit": 191, "passiv": 997, "passiveaggressiveclassifi": 666, "passiveaggressiveregressor": 667, "past": 0, "patch": [123, 415], "patchextractor": 583, "path": [150, 200, 205, 216, 357, 393], "pattern": 130, "pca": [44, 91, 105, 120, 121, 124, 125, 126, 127, 128, 314, 325, 326, 412, 541, 1018], "pdp": 187, "peerindex": 1025, "penalti": [203, 222, 346], "peopl": [0, 387, 1032, 1033, 1034, 1035], "per": 351, "percentag": 1001, "percentil": 342, "perceptron": [187, 304, 668, 997, 1005], "perform": [72, 78, 272, 314, 320, 322, 326, 328, 351, 362, 375, 376, 407, 411], "period": [43, 212], "permiss": 387, "permut": [141, 188, 189, 275, 318, 411, 1009], "permutation_import": 634, "permutation_test_scor": 829, "perplex": 236, "persist": 401, "phimeca": 1025, "pickl": 401, "pictur": 80, "pinbal": 1001, "pipelin": [35, 101, 102, 104, 105, 154, 165, 183, 186, 240, 245, 250, 270, 315, 342, 377, 387, 388, 408, 416, 864, 1018, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "pitfal": [186, 358], "pl": 115, "plai": 342, "plan": 387, "plant": 372, "platform": [373, 383, 393], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 81, 82, 83, 90, 96, 97, 99, 100, 109, 113, 115, 118, 121, 122, 126, 135, 140, 142, 147, 150, 154, 155, 156, 157, 159, 167, 182, 187, 193, 194, 197, 205, 206, 208, 215, 216, 220, 232, 239, 243, 248, 249, 251, 259, 265, 266, 271, 273, 276, 278, 288, 296, 307, 315, 318, 320, 321, 328, 336, 337, 342, 343, 350, 355, 356, 382, 996, 1008, 1029], "plot_tre": 918, "pls1": 115, "pls2": 115, "plscanon": [410, 482], "plsregress": [410, 483], "plssvd": [410, 484], "point": [122, 263, 283, 299, 401], "poisson": [211, 229, 319, 320, 1001], "poissonregressor": 669, "polar": [52, 325], "polici": 375, "polynomi": [43, 191, 193, 194, 212, 343, 993, 997, 999, 1011], "polynomial_kernel": 775, "polynomialcountsketch": [320, 640], "polynomialfeatur": 879, "posit": [120, 321], "possibl": [90, 380], "post": [29, 263, 272, 283, 354, 406], "post1": 1042, "posterior": 179, "power": [116, 211], "power_transform": 892, "powertransform": [309, 880], "pr": 374, "practic": [269, 358, 376, 380, 998, 1005, 1015, 1016, 1017], "pre": [272, 358, 388], "precis": [276, 1001], "precision_recall_curv": 782, "precision_recall_fscore_support": 783, "precision_scor": 784, "precisionrecalldisplai": [239, 700], "precomput": [129, 195, 318, 412], "predefin": [411, 1001], "predefinedsplit": 813, "predict": [43, 49, 52, 61, 116, 135, 146, 157, 171, 185, 194, 211, 244, 263, 265, 276, 328, 356, 362, 387, 388, 406, 411, 417, 1001, 1012], "predictionerrordisplai": 701, "predictor": 154, "premium": 229, "prepar": [120, 135, 144, 149, 191, 208, 231, 278, 279, 314, 339], "preprocess": [36, 147, 154, 183, 186, 187, 248, 250, 308, 352, 358, 387, 1011, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "preprocessor": 187, "preserv": 383, "preval": 272, "princip": [55, 116, 126, 412, 1018], "prior": [53, 179, 254], "privat": 1049, "probabilist": [127, 171, 412, 417], "probabl": [61, 62, 63, 66, 156, 173, 405, 414, 1016], "problem": [186, 263, 412, 1016, 1017], "process": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 358, 390, 417, 1000], "process_rout": 960, "processor": 388, "product": [179, 229, 383, 387, 401, 417, 621], "profil": 381, "project": [0, 116, 125, 128, 242, 377, 387, 1013, 1018, 1020], "pronounc": 387, "propag": [51, 73, 328, 329, 330, 407, 1014], "proper": [52, 175], "properti": 389, "propos": 390, "provid": 380, "prune": [318, 354, 1017], "public": 1042, "publica": 1025, "pull": [375, 379, 383, 387], "pure": 229, "purpos": [215, 352, 1021], "pursuit": [210, 997], "pypi": 387, "pytest": 383, "python": [243, 363, 381, 1019, 1020], "pytorch": 403, "qda": [70, 995], "quadrat": [70, 179, 417, 995], "quadraticdiscriminantanalysi": 550, "qualit": [43, 52], "qualiti": [351, 1001], "quantifi": [351, 1001], "quantil": [52, 146, 149, 213, 321, 322, 997], "quantile_transform": 893, "quantileregressor": [213, 670], "quantiletransform": [309, 881], "quantiz": 86, "question": [387, 1024], "r2_score": 785, "r_regress": 609, "radial": [179, 417, 993], "radius_neighbors_graph": 858, "radiusneighborsclassifi": 854, "radiusneighborsregressor": 855, "radiusneighborstransform": 856, "rand": 407, "rand_scor": 786, "random": [41, 55, 120, 138, 140, 152, 153, 188, 189, 242, 251, 275, 277, 325, 356, 358, 377, 384, 411, 412, 414, 990, 997, 1013, 1018], "random_project": [37, 1046], "random_st": 387, "randomforestclassifi": 564, "randomforestregressor": 565, "randomized_range_find": 947, "randomized_svd": 948, "randomizedsearchcv": 814, "randomli": 118, "randomst": 358, "randomtreesembed": 566, "rang": 1011, "rangespan": 1025, "rank": [27, 211, 1001], "ransac": [214, 997], "ransacregressor": 671, "rate": 414, "ratio": [272, 1001], "ration": [179, 417], "rationalquadrat": 623, "rbf": [243, 338, 339, 343, 417, 622, 999, 1016], "rbf_kernel": 776, "rbfsampler": 641, "rcv1": 370, "reachabl": 407, "read": 375, "real": [42, 48, 107, 183, 370], "recal": [276, 1001], "recall_scor": 787, "receiv": [278, 279, 1001], "recent": 1, "recogn": 68, "recognit": [45, 370, 372], "recommend": [358, 1020], "reconstruct": [44, 53, 123], "reconstruct_from_patches_2d": 587, "recov": 193, "recurs": [166, 167, 416], "redirect": 55, "reduc": [91, 362], "reduct": [104, 231, 235, 250, 298, 314, 351, 995, 1004, 1018], "refer": [2, 50, 62, 64, 112, 123, 137, 191, 197, 286, 302, 379, 417, 991], "refit": [263, 267], "regard": [263, 406], "region": [80, 269], "register_parallel_backend": 970, "regress": [25, 27, 43, 52, 105, 107, 115, 116, 135, 146, 147, 157, 170, 175, 176, 177, 178, 193, 194, 201, 203, 204, 205, 208, 209, 211, 213, 226, 228, 229, 241, 244, 301, 345, 356, 371, 408, 417, 992, 994, 997, 1001, 1002, 1004, 1005, 1015, 1016, 1017], "regressor": [25, 49, 135, 146, 193, 215, 316, 318, 321, 414], "regressorchain": [838, 1002], "regressormixin": 430, "regressortag": 922, "regular": [78, 109, 148, 186, 205, 215, 216, 282, 304, 346, 997, 1005], "reinforc": 387, "relat": [43, 47, 1009, 1020, 1039], "releas": [183, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 379, 393, 1030], "relev": [111, 197, 997], "remark": [43, 90, 235, 242], "remot": 383, "remov": [387, 416, 1011, 1032], "repeat": [358, 408, 411], "repeatedkfold": 815, "repeatedstratifiedkfold": 816, "replac": 182, "repli": 383, "replic": 401, "report": [375, 380, 1001], "repositori": 369, "represent": [126, 187, 240, 319, 362, 377, 415], "reproduc": [358, 380], "request": [375, 379, 383, 387], "resampl": 971, "rescal": 314, "reshap": 362, "resourc": [281, 363, 375, 1019, 1024], "respect": 272, "respons": [115, 390], "rest": [204, 278], "restart": 381, "restrict": [307, 1006], "result": [46, 47, 58, 64, 73, 81, 82, 83, 90, 91, 96, 97, 100, 109, 111, 113, 121, 122, 135, 140, 154, 157, 182, 191, 197, 208, 216, 244, 248, 273, 288, 296, 315, 345, 351, 356, 358, 990], "retriev": [51, 318], "return": 403, "reuter": 47, "review": [374, 375, 383], "rfe": 593, "rfecv": 594, "rich": [240, 319], "ridg": [170, 194, 196, 209, 215, 216, 244, 316, 672, 994, 997], "ridge_regress": 687, "ridgeclassifi": 674, "ridgeclassifiercv": 675, "ridgecv": 673, "right": 395, "roadmap": 1021, "robust": [25, 88, 111, 112, 193, 214, 217, 358, 409, 990, 997], "robust_scal": 894, "robustscal": [309, 882], "roc": [251, 266, 278, 279, 318, 1001], "roc_auc_scor": 788, "roc_curv": 789, "roccurvedisplai": [239, 702], "role": 390, "roll": [235, 377], "root_mean_squared_error": 790, "root_mean_squared_log_error": 791, "rotat": 130, "rout": [41, 245, 324, 325, 389, 398, 1049, 1050], "routin": [47, 363, 384], "rule": 1001, "run": [46, 91, 273], "runtim": [325, 373], "r\u00b2": 1001, "sa": 248, "safe_mask": 972, "safe_sparse_dot": 949, "safe_sqr": 973, "sampl": [10, 41, 58, 73, 88, 96, 109, 121, 122, 164, 195, 224, 244, 270, 282, 301, 319, 345, 348, 369, 384, 389, 414, 997], "sample_without_replac": 969, "saniti": 383, "save": 387, "scalabl": [191, 271, 319], "scale": [88, 186, 231, 234, 314, 346, 364, 895, 998, 1007, 1011, 1018], "scaler": 309, "scatter": 115, "scenario": 997, "scientif": 1019, "scikit": [0, 41, 245, 264, 318, 319, 320, 321, 322, 323, 324, 325, 326, 361, 362, 373, 376, 377, 379, 380, 387, 390, 393, 1020, 1021, 1025, 1028], "scipi": [363, 1049], "score": [55, 115, 140, 159, 167, 182, 193, 259, 268, 275, 276, 342, 398, 407, 411, 996, 1001, 1016], "script": 380, "search": [250, 267, 269, 277, 280, 286, 388, 990], "second": [48, 72], "secur": [401, 1050], "segment": [80, 99], "select": [25, 27, 87, 93, 104, 127, 159, 162, 164, 167, 168, 183, 199, 201, 206, 259, 261, 342, 387, 398, 402, 411, 416, 990, 997, 1038], "selectfdr": 595, "selectfpr": 596, "selectfrommodel": [416, 597], "selectfw": 598, "selectkbest": 599, "selectormixin": 601, "selectpercentil": 600, "self": [320, 331, 1014], "selftrainingclassifi": 901, "semant": 412, "semi": [183, 327, 328, 332, 333, 1014], "semi_supervis": [38, 1042, 1043, 1044, 1048], "sen": [228, 997], "sens": 53, "sensit": 263, "separ": [121, 223, 340, 341], "sequenc": [178, 387], "sequenti": [168, 416], "sequentialfeatureselector": [320, 602], "seri": [52, 206, 411], "serv": 401, "set": [48, 107, 109, 154, 182, 215, 263, 276, 326, 339, 354, 387, 406, 411, 997], "set_config": 902, "set_output": [252, 323, 325, 377], "set_param": 377, "sever": [229, 233], "sgd": [220, 221, 222, 223, 224, 997, 1015], "sgdclassifi": 676, "sgdoneclasssvm": 677, "sgdregressor": 678, "shape": 236, "share": [43, 52, 187], "shift": [96, 407], "should": 387, "show": [159, 278], "show_vers": 903, "shrinkag": [109, 409, 414, 995], "shrunk": 409, "shrunk_covari": 480, "shrunkcovari": 475, "shrunken": 1004, "shuffl": [411, 974], "shufflesplit": 817, "sigmoid": [343, 405, 999], "sigmoid_kernel": 777, "signal": [197, 412], "signific": 275, "silhouett": [93, 407], "silhouette_sampl": 792, "silhouette_scor": 793, "similar": [178, 999, 1001], "simpl": [132, 170, 245, 294, 381], "simpleimput": [326, 630], "simul": 185, "sine": [179, 260, 417], "singl": [137, 154, 229, 239, 371, 407, 991], "single_source_shortest_path_length": 954, "singular": [55, 412], "sinusoid": 194, "size": 414, "sketch": 993, "skew": 993, "skewedchi2sampl": 642, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "sklearn_assume_finit": 363, "sklearn_build_enable_debug_symbol": 363, "sklearn_enable_debug_cython_direct": 363, "sklearn_pairwise_dist_chunk_s": 363, "sklearn_run_float32_test": 363, "sklearn_se": 363, "sklearn_skip_network_test": 363, "sklearn_tests_global_random_se": 363, "sklearn_warnings_as_error": 363, "sklearn_working_memori": 363, "skop": 401, "slep": 390, "smacof": 694, "small": 380, "sne": [236, 998], "so": 387, "social": 1024, "soft": 414, "solido": 1025, "solut": 90, "solver": [218, 412, 997], "some": 342, "someth": 380, "sometim": 387, "sort_graph_by_row_valu": 859, "sourc": [102, 121, 373], "space": [51, 125, 408, 990, 998], "spars": [41, 113, 120, 129, 186, 197, 198, 226, 318, 325, 350, 351, 384, 409, 412, 416, 1011, 1013, 1015, 1049], "sparse_encod": 548, "sparsecod": 542, "sparsefunc": 1041, "sparsepca": [412, 543], "sparserandomproject": 897, "sparsiti": [203, 415], "spawn": 363, "speci": [50, 302, 370], "special": 352, "specif": [278, 373, 377, 990, 1020, 1021], "specifi": [151, 387, 990], "spectral": [57, 58, 59, 99, 231, 404, 407, 998], "spectral_clust": 461, "spectral_embed": 695, "spectralbiclust": [58, 450], "spectralclust": 451, "spectralcoclust": 452, "spectralembed": 691, "speed": [49, 381], "sphere": 233, "sphinx": 375, "spline": [43, 212, 321, 1011], "splinetransform": 883, "split": [143, 320, 358, 411], "splitter": [29, 358], "sponsor": 0, "spotifi": 1025, "sprint": 0, "squar": [116, 146, 179, 207, 208, 209, 215, 417, 993, 997, 999, 1001], "stabil": 319, "stabl": 321, "stack": [154, 318, 414], "stackingclassifi": 567, "stackingregressor": 568, "stall": 375, "standard": [383, 1011], "standardscal": [309, 884], "start": 388, "statement": 1021, "statist": [269, 1020], "statlog": 263, "statu": 398, "std": [159, 193], "step": [43, 250, 379, 388, 408], "stochast": [219, 225, 231, 305, 997, 998, 1006, 1015], "stock": 51, "stop": [144, 149, 219, 415, 1015], "strategi": [86, 267, 286, 305, 312, 324, 326, 364, 407, 1001], "stratif": 411, "stratifi": 411, "stratifiedgroupkfold": [411, 818], "stratifiedkfold": 819, "stratifiedshufflesplit": 820, "stream": 364, "string": 387, "strip": 350, "strong": 196, "strongli": 1009, "structur": [51, 74, 81, 100, 178, 330, 357], "studi": 248, "submit": 375, "subpackag": 1021, "subsampl": 414, "subscript": 326, "subtleti": 358, "success": [280, 281, 320, 990], "sum": 624, "summar": 401, "summari": [62, 144, 201, 351, 352, 401, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "supervis": [183, 327, 328, 332, 333, 1005, 1014, 1023], "support": [0, 62, 143, 149, 183, 206, 315, 318, 319, 320, 321, 323, 324, 325, 334, 337, 345, 387, 393, 398, 403, 405, 414, 1016, 1017, 1024, 1049, 1050], "surfac": [142, 243, 355], "svc": [251, 343, 346, 909, 1016], "svd": [55, 120, 412], "svm": [39, 45, 161, 164, 165, 191, 225, 243, 321, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 347, 348, 997, 1007, 1015, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "svmlight": 369, "svr": [244, 345, 910, 1016], "swiss": 235, "switch": 363, "symmetr": 115, "synthet": [61, 107, 193, 197, 266, 316, 380], "system": 373, "t": [231, 236, 998], "tabl": 387, "tag": [373, 375, 377, 923], "take": 269, "takeawai": 211, "talk": 1019, "tangent": 998, "target": [41, 107, 177, 229, 315, 316, 356, 387, 389, 408, 1002, 1011, 1012], "targetencod": [324, 885], "targettag": 924, "task": [25, 206, 356, 997, 1020], "team": [0, 374], "technic": 390, "techniqu": 232, "templat": 377, "tensor": 993, "term": [351, 389, 415], "test": [44, 109, 163, 272, 275, 282, 350, 354, 373, 375, 377, 383, 384, 411], "text": [17, 47, 183, 240, 270, 332, 349, 350, 351, 352, 370, 415], "tf": 415, "tfidftransform": 590, "tfidfvector": [351, 352, 591], "than": 387, "theil": [228, 997], "theilsenregressor": 679, "them": [123, 374], "theoret": 242, "thi": [215, 1021], "third": [211, 245, 393], "thread": 363, "threshold": [263, 283, 326, 331, 406], "throughput": [49, 362], "tie": 347, "time": [43, 52, 140, 206, 243, 244, 350, 411, 1022], "timeseriessplit": 821, "tip": [362, 376, 383, 990, 998, 1005, 1015, 1016, 1017], "togeth": [249, 278], "toi": [79, 95, 238, 372], "toler": 168, "tomographi": 53, "too": 363, "tool": [384, 387, 403], "top": [351, 1001], "top_k_accuracy_scor": 794, "topic": 54, "total": [152, 354, 414], "tough": 374, "track": [383, 408], "tracker": [375, 1024], "trade": 997, "tradeoff": [266, 1001], "train": [134, 135, 144, 147, 150, 157, 167, 204, 215, 239, 244, 248, 249, 251, 259, 282, 286, 307, 315, 316, 320, 331, 339, 343, 350, 354, 355, 357, 401, 411, 1004, 1014], "train_test_split": 830, "transform": [102, 103, 104, 107, 115, 139, 152, 250, 320, 321, 322, 367, 387, 388, 408, 1004, 1011, 1012, 1013], "transformedtargetregressor": 464, "transformermixin": 431, "transformertag": 925, "translat": 1020, "tree": [40, 134, 135, 139, 141, 142, 149, 152, 183, 188, 211, 318, 323, 324, 325, 353, 354, 355, 356, 357, 387, 414, 416, 1004, 1009, 1017, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "triag": 374, "trick": [362, 381, 383, 415], "trigonometr": 43, "troubleshoot": 393, "true": [193, 194], "truncat": 412, "truncatedsvd": 544, "trust": 159, "trustworthi": 696, "truth": [72, 193], "tsne": [289, 692], "tune": [29, 146, 263, 267, 270, 283, 320, 326, 406, 990], "tunedthresholdclassifiercv": [326, 822], "tutori": [158, 183, 1019], "tweedi": [229, 1001], "tweedieregressor": [229, 680], "two": [99, 136, 198, 249, 269], "type": [103, 254, 376, 377, 387, 389, 403, 407], "type_of_target": 963, "typic": 374, "t\u00e9l\u00e9com": 1025, "u": 0, "ubuntu": 393, "uci": 286, "unbalanc": [341, 1016], "uncertain": 328, "uncertainti": 52, "unclaim": 375, "undefinedmetricwarn": 578, "under": [178, 387, 1027, 1048], "underfit": 284, "understand": 357, "unfold": 383, "uniform": [309, 1011], "unique_label": 964, "univari": [87, 115, 164, 342, 416, 991], "univers": 377, "unlabel": 1014, "unless": 380, "unstructur": 100, "unsupervis": [1004, 1006, 1018, 1026], "unweight": 398, "up": 1007, "updat": [379, 1042], "us": [44, 45, 51, 55, 120, 121, 123, 151, 152, 154, 168, 175, 214, 225, 227, 269, 273, 278, 288, 310, 345, 350, 351, 357, 358, 364, 376, 380, 381, 383, 387, 411, 412, 415, 416, 995, 997, 998, 1001, 1005, 1015, 1016, 1017, 1025, 1042], "usabl": 387, "usag": [381, 387, 398, 403, 405, 408, 414, 415, 997], "user": [1024, 1027], "util": [41, 368, 380, 384, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "v": [87, 100, 109, 110, 112, 116, 125, 167, 187, 188, 196, 204, 229, 272, 278, 284, 354, 407, 414, 991], "v_measure_scor": 795, "valgrind": [381, 383], "valid": [29, 41, 43, 159, 167, 201, 242, 263, 264, 265, 267, 268, 272, 274, 279, 342, 358, 362, 377, 384, 406, 411, 990, 996, 997], "validate_data": 989, "validation_curv": 831, "validationcurvedisplai": [324, 823], "valu": [149, 168, 180, 181, 182, 183, 236, 245, 318, 324, 325, 357, 375, 403, 412, 414, 991, 1001, 1009, 1011, 1017], "vanilla": [263, 283], "vari": [72, 304, 331, 407], "variabl": [25, 115, 185, 186, 363, 387], "varianc": [137, 209, 416, 1001, 1011], "variancethreshold": 603, "variant": 181, "variat": [254, 1000], "variou": [49, 85, 218, 236, 387], "vector": [55, 62, 86, 183, 334, 337, 345, 350, 352, 415, 1016], "version": [322, 369, 373, 375, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "versu": [137, 225, 274, 333, 362], "via": [44, 52, 86, 199, 201, 229, 414, 993], "video": [375, 1019], "visual": [5, 29, 51, 91, 130, 144, 204, 239, 244, 251, 264, 306, 319, 339, 407, 408, 1001, 1029], "vote": [157, 414], "votingclassifi": [155, 156, 569], "votingregressor": 570, "wage": [185, 186], "wai": [187, 375, 387], "ward": [81, 100, 407], "ward_tre": 462, "warm": 381, "warm_start": 1005, "warn": 384, "we": 100, "weak": [134, 414], "websit": [379, 1042], "weight": [41, 134, 193, 195, 224, 306, 319, 348, 398, 414, 415], "weighted_mod": 950, "what": [357, 387], "when": 263, "which": 997, "whitekernel": 625, "who": 1025, "why": [387, 414], "wikipedia": 55, "wild": 370, "window": [373, 393], "wine": 372, "winpython": 393, "wisconsin": 372, "within": 104, "without": [74, 297, 350], "wolf": [69, 110, 409], "word": [350, 415], "work": [41, 183, 349, 362, 374, 387], "workflow": [374, 401], "world": [42, 107, 183, 370], "wrap": 288, "written": 68, "wrong": [186, 387], "x": 228, "x86_64": 383, "xor": [174, 343, 417], "y": [228, 387, 1012, 1014], "yeast": 286, "yep": 381, "yhat": 1025, "you": [159, 387], "your": [377, 380, 1001], "zero": 1001, "zero_one_loss": 796, "zopa": 1025}})