Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.1", "Version 1.4.0"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 423, 425, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 476, 477, 478, 480, 482, 483, 486, 489, 490, 491, 492, 494, 495, 496, 498, 501, 502, 508, 509, 510, 511, 512, 513, 514, 516, 517, 519, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 699, 700, 702, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 728, 729, 730, 731, 732, 733, 734, 735, 740, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 760, 761, 766, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 912, 913, 918, 919, 921, 923, 924, 929, 931, 936, 937, 938, 939, 940, 941, 943, 946, 947, 948, 950, 951, 954, 955, 964, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "wa": [0, 4, 8, 13, 16, 34, 40, 70, 71, 80, 86, 92, 129, 132, 149, 161, 170, 176, 179, 204, 225, 252, 255, 257, 259, 261, 267, 268, 299, 308, 313, 314, 318, 324, 325, 347, 349, 356, 358, 362, 371, 373, 374, 376, 380, 381, 389, 392, 393, 396, 398, 399, 402, 405, 406, 410, 414, 433, 434, 438, 439, 443, 447, 450, 453, 462, 467, 508, 516, 528, 529, 531, 533, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 581, 583, 584, 595, 620, 623, 634, 643, 644, 647, 648, 649, 651, 657, 658, 678, 679, 706, 721, 722, 760, 775, 776, 779, 787, 788, 789, 792, 793, 803, 815, 817, 829, 839, 865, 866, 885, 889, 895, 896, 898, 923, 924, 947, 968, 969, 970, 979, 980, 983, 986, 990, 993, 996, 1000, 1006, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "start": [0, 4, 7, 10, 12, 20, 26, 53, 58, 64, 67, 74, 86, 98, 111, 117, 123, 125, 146, 149, 157, 159, 171, 176, 180, 181, 189, 200, 201, 202, 208, 218, 221, 225, 234, 236, 249, 261, 269, 281, 317, 319, 323, 347, 356, 358, 362, 363, 364, 365, 369, 376, 377, 378, 380, 381, 382, 387, 389, 392, 399, 402, 406, 407, 411, 412, 433, 435, 443, 447, 449, 531, 603, 610, 625, 638, 646, 652, 659, 661, 669, 670, 671, 683, 687, 773, 774, 781, 787, 788, 789, 792, 793, 803, 834, 835, 836, 838, 840, 848, 934, 964, 969, 976, 979, 984, 985, 994, 1001, 1004, 1006, 1014, 1015, 1025, 1027, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "2007": [0, 38, 188, 371, 402, 411, 433, 445, 447, 453, 455, 559, 649, 684, 710, 726, 729, 750, 751, 785, 972, 976, 978, 980], "googl": [0, 17, 387, 402, 435, 999, 1011, 1022], "summer": [0, 4, 48, 1022], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 370, 374, 375, 377, 379, 380, 385, 387, 389, 390, 392, 393, 396, 398, 401, 402, 409, 410, 435, 436, 440, 442, 452, 489, 519, 523, 524, 530, 531, 535, 536, 538, 539, 541, 559, 565, 574, 575, 578, 579, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 658, 675, 676, 678, 679, 820, 821, 822, 859, 866, 948, 977, 981, 990, 992, 994, 995, 1000, 1001, 1003, 1004, 1007, 1015, 1022, 1024, 1025], "david": [0, 2, 37, 57, 81, 118, 179, 184, 202, 262, 264, 308, 347, 348, 349, 371, 402, 409, 412, 455, 525, 529, 560, 561, 615, 616, 621, 717, 787, 889, 970, 976, 984, 993, 1004, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cournapeau": [0, 2, 1022, 1025], "later": [0, 11, 34, 53, 112, 117, 126, 152, 171, 176, 179, 294, 349, 358, 382, 387, 388, 392, 396, 838, 861, 862, 870, 872, 990, 1010, 1015, 1025, 1028, 1030, 1034], "year": [0, 4, 135, 149, 157, 169, 170, 171, 200, 201, 218, 373, 375, 380, 387, 406, 410, 412, 791, 796, 798, 871, 976, 980, 1001, 1004, 1013], "matthieu": [0, 2, 1022, 1026, 1037], "brucher": [0, 2, 1022], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 67, 78, 115, 122, 135, 149, 158, 159, 169, 170, 171, 189, 204, 217, 236, 246, 248, 259, 287, 288, 309, 314, 316, 317, 319, 336, 348, 349, 358, 363, 364, 365, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 384, 388, 389, 390, 392, 398, 399, 400, 402, 403, 404, 407, 409, 410, 411, 414, 415, 416, 417, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 453, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 501, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 688, 701, 734, 766, 770, 771, 772, 773, 780, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 880, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 929, 933, 948, 969, 970, 972, 974, 975, 976, 977, 979, 980, 982, 983, 986, 987, 990, 993, 994, 1000, 1001, 1004, 1006, 1007, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "part": [0, 31, 36, 61, 68, 71, 82, 115, 118, 121, 125, 130, 138, 139, 140, 141, 146, 157, 167, 179, 236, 249, 256, 258, 275, 297, 305, 308, 310, 349, 364, 371, 373, 376, 378, 382, 384, 388, 389, 392, 398, 400, 402, 406, 407, 409, 410, 412, 439, 442, 486, 487, 488, 514, 524, 530, 535, 567, 577, 578, 579, 606, 618, 783, 857, 875, 877, 878, 879, 880, 881, 882, 883, 969, 970, 972, 977, 981, 999, 1000, 1001, 1002, 1004, 1008, 1015, 1017, 1022, 1030, 1031, 1033, 1035, 1037], "hi": [0, 403, 980, 1015], "thesi": [0, 373, 402, 409], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 95, 97, 100, 103, 104, 109, 111, 112, 115, 117, 118, 119, 120, 121, 122, 125, 127, 128, 129, 130, 132, 135, 145, 146, 148, 149, 152, 156, 157, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 184, 188, 189, 191, 195, 200, 201, 202, 203, 204, 205, 208, 217, 218, 229, 230, 231, 232, 234, 235, 236, 237, 240, 241, 242, 243, 249, 251, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 270, 271, 273, 275, 276, 279, 281, 287, 288, 290, 300, 303, 304, 305, 306, 308, 309, 310, 313, 314, 315, 317, 318, 324, 326, 334, 342, 347, 348, 349, 352, 356, 358, 362, 363, 364, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 430, 433, 434, 435, 436, 437, 440, 441, 442, 445, 455, 456, 457, 462, 465, 468, 486, 489, 496, 501, 502, 504, 516, 527, 529, 531, 533, 534, 535, 537, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 584, 595, 599, 602, 603, 604, 623, 625, 626, 627, 629, 636, 637, 638, 640, 641, 642, 644, 646, 648, 651, 652, 654, 656, 658, 659, 661, 662, 667, 668, 669, 672, 673, 677, 678, 679, 689, 692, 696, 705, 711, 713, 718, 720, 721, 726, 727, 730, 732, 734, 746, 748, 749, 773, 775, 777, 780, 784, 786, 787, 788, 789, 792, 793, 795, 803, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 834, 835, 836, 838, 839, 840, 842, 843, 844, 849, 857, 859, 865, 866, 870, 871, 873, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 892, 893, 894, 897, 900, 902, 907, 911, 913, 929, 969, 970, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 995, 996, 1001, 1003, 1004, 1006, 1013, 1014, 1015, 1019, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "2010": [0, 47, 67, 79, 171, 266, 267, 399, 402, 404, 406, 407, 415, 468, 529, 697, 701, 712, 713, 732, 817, 849, 850, 972, 976, 980, 984, 994, 999, 1022], "fabian": [0, 2, 187, 205, 222, 293, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031], "pedregosa": [0, 2, 187, 205, 222, 293, 1022, 1023, 1024, 1025, 1026, 1028], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 101, 189, 190, 222, 234, 248, 999, 1001, 1004, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 102, 183, 189, 190, 197, 198, 222, 224, 232, 234, 248, 305, 338, 339, 390, 999, 1004, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 185, 187, 188, 189, 191, 193, 194, 229, 232, 267, 274, 293, 390, 1004, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 185, 187, 188, 189, 191, 193, 194, 229, 232, 267, 274, 293, 390, 1004, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "vincent": [0, 2, 47, 67, 155, 159, 1004, 1022, 1024, 1026, 1027, 1029, 1032, 1037, 1038], "michel": [0, 2, 47, 67, 1022, 1024, 1025, 1027, 1029, 1036, 1037], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 118, 158, 179, 184, 185, 187, 191, 193, 194, 205, 222, 223, 229, 232, 262, 264, 267, 274, 293, 308, 342, 347, 348, 349, 651, 998, 1022], "took": [0, 42, 269], "leadership": 0, "made": [0, 70, 81, 89, 100, 112, 118, 135, 159, 170, 171, 200, 218, 252, 265, 309, 314, 334, 353, 362, 371, 373, 376, 380, 389, 390, 402, 409, 410, 414, 436, 439, 440, 442, 452, 489, 496, 581, 582, 584, 623, 624, 649, 658, 678, 679, 727, 775, 789, 792, 793, 803, 807, 808, 809, 829, 832, 833, 981, 986, 996, 1000, 1004, 1012, 1014, 1022, 1023, 1024, 1025, 1026, 1029, 1031, 1032, 1035, 1036], "first": [0, 4, 5, 7, 8, 11, 17, 20, 25, 26, 30, 31, 32, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 104, 112, 113, 117, 119, 120, 121, 122, 124, 126, 129, 132, 133, 134, 135, 145, 146, 149, 152, 153, 154, 157, 158, 159, 160, 165, 169, 170, 171, 173, 176, 179, 181, 183, 189, 196, 197, 198, 201, 202, 208, 209, 214, 222, 225, 233, 234, 236, 237, 238, 240, 242, 243, 248, 252, 256, 261, 263, 264, 268, 270, 272, 273, 279, 281, 283, 284, 286, 290, 291, 292, 297, 299, 303, 305, 308, 309, 310, 314, 315, 323, 326, 330, 331, 334, 336, 347, 348, 349, 352, 353, 356, 358, 363, 364, 370, 371, 373, 374, 375, 378, 380, 381, 382, 384, 387, 389, 399, 400, 402, 405, 406, 407, 409, 410, 411, 412, 414, 436, 439, 440, 443, 452, 453, 457, 465, 476, 480, 481, 483, 484, 485, 487, 490, 493, 495, 497, 501, 502, 503, 521, 526, 527, 531, 534, 546, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 575, 577, 581, 582, 583, 584, 586, 603, 604, 610, 614, 617, 624, 625, 626, 627, 639, 645, 652, 659, 661, 667, 669, 681, 688, 691, 692, 693, 695, 705, 709, 728, 755, 756, 774, 784, 787, 788, 792, 793, 794, 795, 796, 801, 803, 810, 811, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 837, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 857, 865, 869, 870, 871, 874, 881, 882, 894, 897, 900, 901, 902, 903, 905, 907, 912, 913, 914, 931, 933, 947, 951, 954, 966, 969, 970, 974, 975, 976, 977, 979, 980, 981, 982, 983, 987, 990, 991, 994, 995, 996, 1004, 1006, 1012, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "public": [0, 79, 370, 376, 378, 380, 381, 387, 388, 389, 390, 406, 409, 461, 657, 664, 678, 679, 685, 890, 976, 984, 1022, 1027, 1028, 1033, 1034, 1035, 1038], "releas": [0, 34, 236, 320, 363, 365, 374, 376, 377, 379, 384, 387, 389, 410, 436, 439, 440, 457, 460, 483, 484, 489, 494, 495, 497, 505, 508, 514, 517, 531, 554, 555, 557, 558, 560, 592, 595, 621, 623, 625, 627, 633, 639, 641, 645, 651, 662, 673, 681, 694, 695, 710, 740, 780, 785, 789, 792, 793, 795, 803, 811, 814, 818, 834, 836, 853, 857, 862, 865, 866, 867, 871, 872, 873, 889, 890, 892, 897, 900, 901, 924, 948, 996, 998, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "februari": [0, 404, 466, 980, 1023, 1027], "1st": [0, 4, 60, 90, 160, 201, 308, 870, 871], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 55, 66, 70, 71, 72, 96, 122, 138, 146, 149, 152, 157, 170, 171, 176, 182, 200, 202, 204, 217, 230, 234, 235, 236, 248, 251, 257, 261, 263, 264, 270, 271, 281, 283, 309, 316, 317, 327, 331, 334, 342, 347, 348, 349, 358, 363, 371, 374, 376, 377, 378, 380, 381, 384, 387, 388, 389, 392, 393, 400, 402, 403, 404, 405, 406, 407, 409, 410, 412, 419, 430, 434, 438, 439, 440, 442, 443, 446, 449, 462, 471, 489, 519, 529, 530, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 560, 562, 581, 582, 584, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 625, 626, 631, 637, 638, 643, 644, 647, 648, 649, 651, 652, 657, 658, 659, 661, 667, 668, 669, 672, 700, 702, 727, 733, 760, 781, 792, 793, 795, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 839, 842, 849, 850, 857, 865, 882, 883, 887, 888, 892, 894, 895, 896, 897, 898, 900, 902, 926, 929, 969, 972, 973, 974, 976, 977, 981, 982, 983, 984, 986, 988, 990, 994, 995, 996, 1004, 1006, 1015, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 57, 61, 74, 91, 115, 123, 130, 132, 135, 146, 149, 152, 157, 158, 167, 170, 176, 184, 189, 200, 204, 220, 221, 227, 233, 248, 256, 261, 266, 283, 298, 303, 316, 347, 348, 362, 370, 371, 373, 376, 378, 381, 387, 389, 399, 401, 402, 403, 406, 408, 409, 410, 412, 440, 442, 457, 480, 492, 501, 502, 531, 548, 549, 552, 553, 556, 557, 558, 563, 581, 582, 584, 603, 638, 639, 645, 681, 682, 683, 684, 685, 686, 787, 788, 789, 792, 793, 803, 820, 821, 827, 828, 829, 830, 831, 851, 852, 859, 876, 900, 901, 902, 903, 915, 969, 972, 977, 980, 981, 983, 988, 990, 994, 996, 997, 999, 1000, 1003, 1004, 1006, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1035, 1038], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 102, 112, 119, 121, 122, 123, 125, 145, 146, 149, 152, 153, 157, 158, 159, 165, 169, 170, 171, 172, 173, 176, 179, 184, 200, 201, 202, 204, 218, 225, 229, 231, 236, 237, 239, 240, 247, 248, 249, 251, 255, 261, 262, 264, 267, 268, 275, 281, 283, 287, 288, 303, 308, 309, 310, 313, 315, 316, 323, 324, 325, 331, 337, 339, 347, 348, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 485, 487, 488, 489, 501, 502, 507, 516, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 680, 681, 682, 683, 684, 685, 692, 697, 698, 705, 708, 713, 718, 723, 728, 734, 748, 749, 750, 751, 774, 777, 778, 782, 785, 787, 788, 789, 792, 793, 794, 795, 800, 803, 807, 811, 813, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 914, 916, 918, 929, 955, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "appear": [0, 8, 46, 48, 115, 170, 256, 258, 259, 287, 288, 297, 299, 304, 323, 347, 348, 349, 371, 374, 376, 381, 389, 404, 407, 481, 482, 548, 560, 561, 572, 603, 620, 621, 623, 690, 693, 695, 705, 709, 711, 774, 781, 790, 807, 827, 828, 829, 830, 831, 894, 897, 931, 976, 982, 986, 1022, 1030, 1034, 1035], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 105, 112, 115, 125, 129, 144, 157, 164, 169, 170, 171, 172, 179, 181, 184, 188, 189, 198, 200, 201, 215, 218, 230, 236, 237, 239, 252, 261, 270, 271, 303, 309, 310, 313, 314, 316, 317, 318, 331, 342, 347, 348, 349, 352, 356, 358, 362, 363, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 423, 426, 434, 436, 438, 439, 440, 441, 442, 446, 454, 456, 457, 458, 461, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 508, 527, 531, 533, 534, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 563, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 624, 626, 627, 639, 645, 651, 652, 663, 664, 673, 685, 687, 692, 698, 702, 706, 711, 808, 829, 834, 835, 836, 838, 840, 842, 843, 844, 851, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 881, 890, 892, 893, 900, 901, 902, 903, 907, 908, 928, 948, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1006, 1015, 1019, 1022, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 78, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 229, 233, 234, 235, 236, 237, 239, 241, 243, 246, 247, 248, 250, 251, 252, 256, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 325, 326, 327, 330, 331, 333, 334, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 353, 354, 356, 358, 363, 364, 370, 371, 373, 374, 376, 377, 378, 381, 382, 387, 388, 389, 392, 394, 395, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 427, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 486, 487, 489, 490, 495, 497, 498, 499, 500, 503, 505, 508, 509, 510, 511, 512, 514, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 574, 575, 576, 577, 580, 581, 583, 584, 586, 587, 595, 596, 600, 601, 603, 604, 605, 610, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 685, 686, 687, 692, 693, 695, 696, 697, 698, 700, 702, 706, 709, 710, 714, 715, 716, 718, 720, 721, 722, 723, 726, 727, 728, 729, 733, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 748, 749, 760, 761, 767, 773, 774, 775, 776, 777, 778, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 880, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 918, 927, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 940, 943, 944, 946, 947, 948, 954, 969, 970, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 986, 987, 990, 991, 993, 995, 996, 998, 999, 1000, 1006, 1007, 1010, 1011, 1013, 1014, 1018, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1034, 1035, 1037, 1039], "month": [0, 4, 157, 171, 309, 371, 376, 380, 390, 1022], "cycl": [0, 4, 42, 44, 50, 62, 95, 185, 247, 252, 268, 270, 316, 317, 376, 380, 393, 401, 407, 572, 573, 620, 792, 793, 908, 969, 970, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "thrive": [0, 376], "intern": [0, 26, 71, 82, 100, 118, 126, 138, 149, 153, 164, 167, 200, 281, 283, 302, 311, 324, 349, 358, 363, 371, 373, 378, 382, 385, 387, 389, 393, 396, 399, 402, 406, 407, 409, 410, 412, 413, 430, 432, 437, 458, 461, 504, 527, 528, 539, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 586, 587, 603, 604, 631, 633, 636, 639, 645, 661, 665, 669, 671, 689, 701, 723, 726, 750, 751, 775, 818, 832, 833, 848, 849, 850, 852, 853, 857, 871, 873, 887, 888, 890, 892, 893, 894, 897, 900, 901, 902, 903, 948, 976, 977, 978, 980, 983, 986, 990, 992, 995, 996, 1004, 1022, 1025, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 109, 117, 121, 123, 125, 129, 134, 148, 152, 157, 158, 159, 165, 169, 170, 171, 172, 176, 193, 197, 200, 201, 202, 206, 217, 218, 221, 229, 233, 235, 236, 240, 243, 246, 247, 249, 251, 252, 256, 259, 260, 261, 264, 265, 267, 272, 273, 279, 287, 288, 289, 291, 299, 303, 304, 306, 308, 313, 314, 315, 316, 317, 319, 322, 325, 334, 339, 341, 347, 353, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 384, 385, 387, 388, 389, 390, 392, 393, 396, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 454, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 486, 487, 490, 491, 501, 502, 509, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 612, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 680, 681, 682, 683, 684, 685, 688, 704, 706, 713, 733, 755, 766, 770, 771, 772, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 803, 807, 810, 811, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 852, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 911, 912, 913, 931, 949, 965, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 992, 993, 994, 995, 996, 1001, 1004, 1006, 1010, 1013, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "been": [0, 4, 9, 16, 26, 44, 53, 60, 81, 100, 109, 112, 149, 152, 157, 159, 170, 225, 229, 231, 236, 237, 259, 261, 267, 313, 314, 315, 316, 317, 319, 324, 347, 358, 363, 370, 371, 373, 374, 375, 376, 378, 380, 382, 384, 385, 387, 388, 389, 390, 393, 396, 399, 400, 402, 404, 406, 407, 409, 412, 427, 430, 462, 464, 465, 467, 471, 480, 516, 527, 529, 542, 543, 560, 561, 574, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 626, 627, 651, 652, 659, 661, 666, 668, 669, 670, 671, 713, 770, 771, 772, 783, 789, 792, 793, 795, 803, 811, 816, 817, 841, 889, 892, 970, 972, 973, 975, 976, 977, 980, 981, 983, 986, 990, 992, 994, 995, 1001, 1004, 1006, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "lead": [0, 7, 25, 31, 37, 52, 55, 61, 72, 118, 122, 125, 148, 149, 170, 171, 172, 179, 184, 189, 191, 200, 204, 234, 236, 261, 262, 264, 268, 286, 287, 299, 303, 305, 308, 309, 315, 334, 348, 352, 358, 362, 363, 370, 375, 384, 385, 388, 389, 396, 399, 400, 402, 404, 406, 407, 408, 409, 411, 445, 455, 458, 461, 489, 508, 520, 528, 531, 532, 533, 536, 540, 544, 550, 551, 552, 553, 556, 557, 558, 559, 599, 623, 639, 640, 643, 645, 646, 647, 653, 654, 655, 656, 672, 684, 688, 738, 787, 792, 793, 820, 832, 833, 837, 856, 863, 873, 884, 885, 890, 892, 900, 901, 902, 903, 969, 974, 976, 977, 979, 980, 981, 983, 984, 986, 988, 990, 993, 994, 996, 1004, 1006, 1025, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 100, 103, 104, 105, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 171, 172, 173, 176, 179, 181, 182, 183, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 201, 202, 203, 204, 206, 208, 209, 217, 218, 220, 224, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 251, 252, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 279, 281, 283, 286, 287, 288, 289, 290, 291, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 324, 325, 331, 332, 334, 338, 339, 340, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 424, 425, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 744, 745, 746, 747, 748, 749, 750, 751, 754, 756, 757, 758, 759, 762, 763, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 915, 916, 917, 918, 919, 923, 924, 925, 926, 927, 928, 929, 931, 932, 936, 937, 940, 943, 945, 946, 947, 948, 949, 950, 951, 954, 964, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "decis": [0, 4, 16, 25, 27, 31, 34, 56, 58, 60, 110, 111, 114, 115, 117, 130, 136, 149, 156, 170, 182, 183, 192, 209, 210, 213, 214, 229, 230, 232, 240, 264, 284, 289, 292, 297, 303, 304, 305, 308, 321, 328, 330, 331, 332, 333, 334, 335, 336, 340, 343, 344, 347, 357, 362, 365, 372, 373, 376, 389, 400, 402, 409, 430, 462, 493, 497, 512, 529, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 586, 587, 624, 625, 626, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 691, 693, 695, 696, 700, 713, 718, 719, 727, 731, 732, 734, 748, 774, 780, 781, 784, 789, 792, 793, 803, 818, 820, 821, 823, 834, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 974, 980, 981, 982, 983, 984, 986, 987, 988, 993, 994, 995, 998, 1000, 1001, 1002, 1004, 1013, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1035, 1036, 1038], "make": [0, 4, 7, 8, 11, 14, 17, 20, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 112, 118, 122, 125, 130, 146, 149, 152, 157, 160, 169, 170, 171, 172, 179, 184, 186, 189, 192, 193, 194, 196, 200, 201, 202, 204, 206, 218, 222, 231, 233, 235, 236, 237, 246, 248, 251, 252, 256, 261, 263, 264, 270, 271, 272, 290, 299, 303, 304, 309, 317, 319, 334, 344, 347, 348, 349, 358, 362, 363, 364, 365, 370, 371, 374, 375, 377, 378, 379, 381, 382, 384, 387, 389, 392, 396, 399, 400, 402, 403, 404, 406, 407, 409, 410, 411, 412, 414, 433, 434, 435, 436, 438, 440, 442, 444, 445, 446, 451, 452, 453, 455, 481, 496, 507, 508, 515, 516, 520, 525, 527, 534, 544, 545, 548, 549, 576, 577, 600, 601, 624, 642, 648, 649, 664, 684, 688, 722, 729, 734, 760, 761, 773, 787, 788, 789, 791, 794, 800, 804, 805, 806, 808, 809, 814, 815, 822, 823, 826, 859, 868, 871, 872, 876, 880, 882, 883, 884, 885, 898, 906, 912, 913, 923, 929, 935, 941, 966, 969, 970, 972, 974, 976, 977, 979, 980, 981, 982, 983, 985, 986, 987, 988, 990, 993, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1004, 1006, 1011, 1013, 1015, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "process": [0, 4, 5, 19, 26, 30, 31, 45, 46, 47, 48, 50, 66, 70, 72, 74, 79, 81, 96, 97, 99, 112, 122, 129, 138, 139, 140, 141, 162, 169, 179, 202, 204, 236, 237, 246, 247, 252, 261, 263, 264, 273, 303, 315, 319, 323, 348, 349, 352, 362, 363, 364, 365, 371, 375, 376, 378, 380, 382, 385, 387, 388, 389, 396, 402, 403, 404, 406, 407, 408, 409, 410, 411, 415, 441, 442, 468, 489, 497, 516, 527, 528, 529, 530, 531, 554, 555, 556, 581, 582, 584, 603, 604, 606, 607, 608, 610, 611, 612, 615, 616, 618, 620, 625, 626, 632, 636, 657, 665, 678, 679, 696, 715, 733, 773, 787, 789, 792, 793, 803, 813, 814, 815, 824, 825, 841, 855, 859, 861, 862, 863, 872, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 946, 948, 969, 972, 976, 980, 983, 990, 992, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1014, 1015, 1017, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 55, 68, 82, 106, 128, 151, 162, 167, 221, 225, 231, 236, 252, 256, 267, 286, 308, 314, 317, 321, 328, 334, 351, 353, 357, 362, 371, 373, 376, 378, 381, 387, 389, 390, 392, 399, 402, 404, 405, 406, 407, 409, 410, 411, 412, 434, 435, 438, 439, 443, 444, 445, 446, 447, 450, 455, 456, 465, 489, 496, 497, 501, 504, 506, 507, 514, 523, 528, 534, 537, 556, 603, 604, 605, 609, 610, 611, 682, 689, 702, 706, 818, 840, 845, 872, 884, 885, 888, 900, 901, 902, 903, 906, 928, 929, 951, 954, 977, 979, 980, 983, 985, 986, 990, 993, 996, 1000, 1001, 1009, 1014, 1015, 1022, 1023, 1025, 1026, 1028, 1032], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 339, 340, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 928, 929, 931, 934, 935, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 961, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "laid": [0, 169, 376], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 55, 70, 71, 103, 110, 116, 118, 119, 126, 136, 141, 167, 169, 172, 184, 200, 202, 204, 208, 218, 246, 248, 259, 261, 264, 269, 273, 279, 308, 309, 316, 325, 327, 330, 331, 334, 347, 361, 371, 373, 374, 376, 378, 379, 380, 382, 387, 389, 402, 405, 407, 409, 412, 418, 428, 429, 435, 436, 438, 439, 440, 442, 465, 475, 476, 477, 478, 492, 508, 509, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 581, 582, 584, 597, 600, 601, 627, 632, 633, 634, 635, 644, 648, 659, 661, 666, 668, 669, 681, 682, 685, 694, 719, 733, 734, 789, 791, 792, 793, 794, 796, 797, 798, 799, 803, 818, 827, 828, 829, 830, 831, 836, 841, 844, 848, 849, 850, 858, 862, 869, 881, 884, 885, 907, 942, 944, 949, 970, 974, 975, 979, 980, 981, 983, 988, 990, 1001, 1002, 1003, 1004, 1010, 1013, 1015, 1017, 1022, 1024, 1026, 1028, 1030, 1031, 1034, 1035, 1038], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 57, 71, 73, 89, 90, 92, 95, 129, 181, 183, 197, 198, 215, 233, 236, 237, 262, 299, 326, 339, 349, 350, 362, 363, 364, 365, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 387, 389, 390, 392, 393, 396, 399, 401, 402, 407, 410, 413, 437, 440, 441, 442, 443, 446, 450, 457, 481, 482, 492, 494, 504, 514, 516, 529, 537, 557, 581, 582, 583, 584, 587, 597, 624, 632, 636, 651, 652, 659, 661, 666, 667, 668, 669, 689, 690, 692, 696, 698, 704, 710, 729, 750, 751, 761, 770, 771, 772, 783, 785, 789, 792, 793, 795, 803, 811, 814, 816, 819, 822, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 853, 864, 892, 897, 908, 911, 913, 926, 946, 969, 976, 978, 980, 981, 982, 983, 984, 988, 994, 997, 998, 999, 1004, 1008, 1013, 1015, 1023, 1024, 1028], "peopl": [0, 6, 70, 170, 238, 264, 347, 348, 363, 364, 371, 373, 375, 376, 380, 390, 408, 486, 487, 634, 829, 1000, 1011], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 92, 95, 97, 100, 103, 106, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 145, 146, 148, 149, 152, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 209, 211, 218, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 247, 248, 249, 251, 255, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 281, 283, 286, 287, 291, 294, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 322, 324, 325, 326, 327, 332, 334, 336, 338, 342, 343, 347, 348, 349, 352, 356, 358, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 481, 482, 486, 488, 489, 491, 493, 494, 495, 496, 497, 501, 502, 503, 505, 508, 509, 510, 511, 512, 513, 516, 517, 519, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 702, 705, 706, 708, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 732, 733, 735, 737, 738, 740, 742, 743, 745, 746, 748, 749, 753, 754, 755, 757, 759, 760, 761, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 801, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 916, 917, 918, 921, 923, 928, 929, 930, 933, 934, 936, 940, 943, 944, 946, 948, 951, 954, 955, 959, 960, 961, 964, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "current": [0, 8, 46, 112, 157, 170, 218, 303, 313, 363, 364, 371, 374, 376, 377, 378, 381, 385, 387, 389, 390, 398, 399, 401, 402, 406, 409, 410, 411, 412, 433, 439, 443, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 525, 528, 534, 546, 547, 550, 551, 552, 553, 555, 557, 558, 559, 569, 584, 586, 603, 610, 619, 620, 639, 651, 660, 664, 668, 669, 670, 671, 780, 787, 788, 837, 841, 849, 850, 868, 880, 890, 900, 901, 902, 903, 906, 947, 955, 969, 974, 976, 980, 983, 984, 990, 1001, 1013, 1030, 1034, 1036, 1037, 1038], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 20, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 109, 111, 112, 114, 118, 119, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 141, 144, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 167, 170, 171, 173, 176, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 198, 200, 202, 204, 206, 207, 209, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 229, 230, 233, 235, 236, 237, 239, 246, 248, 249, 251, 256, 261, 262, 263, 264, 265, 268, 272, 274, 275, 281, 284, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 300, 302, 303, 306, 309, 311, 313, 315, 316, 317, 318, 319, 323, 324, 331, 332, 333, 334, 335, 338, 339, 340, 341, 344, 347, 348, 349, 353, 354, 355, 356, 358, 362, 363, 364, 365, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 389, 390, 391, 392, 393, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 412, 414, 416, 423, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 482, 489, 491, 493, 497, 503, 504, 512, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 565, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 680, 681, 682, 683, 684, 685, 686, 693, 694, 695, 701, 704, 709, 713, 727, 733, 734, 750, 751, 771, 772, 787, 788, 789, 791, 792, 793, 798, 803, 807, 808, 814, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 910, 912, 913, 916, 929, 931, 938, 940, 964, 968, 969, 971, 972, 974, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 990, 992, 993, 994, 995, 996, 1000, 1001, 1004, 1006, 1010, 1011, 1013, 1014, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "mainten": [0, 376, 384, 387, 392, 395, 976, 1001, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "j\u00e9r\u00e9mie": [0, 1, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "du": [0, 1, 2, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "boisberrang": [0, 1, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "jori": [0, 1, 1029, 1030, 1031, 1034, 1035], "van": [0, 1, 370, 404, 462, 467, 527, 620, 685, 689, 970, 977, 980, 986, 1004, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038], "den": [0, 1, 1023, 1024, 1029, 1030, 1031, 1034, 1035], "bossch": [0, 1, 1029, 1030, 1031, 1035], "lo\u00efc": [0, 1, 1030, 1033, 1035, 1036, 1037], "est\u00e8v": [0, 1, 1030, 1033, 1035, 1036, 1037], "thoma": [0, 1, 103, 229, 303, 363, 366, 390, 888, 976, 990, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 111, 112, 115, 116, 127, 153, 165, 171, 212, 224, 238, 246, 260, 261, 266, 272, 285, 291, 294, 307, 318, 356, 363, 370, 371, 373, 380, 382, 387, 399, 400, 402, 404, 406, 407, 409, 410, 412, 413, 430, 433, 437, 439, 446, 447, 462, 467, 491, 506, 509, 510, 511, 513, 521, 524, 527, 529, 530, 531, 533, 534, 540, 552, 553, 586, 587, 625, 626, 630, 637, 638, 641, 642, 659, 660, 662, 673, 681, 682, 683, 685, 686, 687, 689, 698, 701, 703, 707, 709, 711, 714, 715, 716, 718, 747, 748, 750, 751, 766, 770, 780, 781, 782, 783, 821, 822, 829, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 863, 872, 900, 901, 969, 970, 974, 976, 977, 978, 980, 981, 982, 983, 984, 986, 987, 988, 990, 992, 994, 995, 996, 998, 1015, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "fan": [0, 1, 363, 390, 995, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "olivi": [0, 1, 14, 17, 37, 48, 61, 189, 200, 218, 222, 262, 264, 347, 348, 349, 390, 888, 993, 999, 1001, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "grisel": [0, 1, 14, 17, 37, 48, 61, 189, 200, 218, 222, 262, 264, 347, 348, 349, 390, 999, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "yaroslav": [0, 1, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1038], "halchenko": [0, 1, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1038], "tim": [0, 1, 117, 131, 1022, 1027, 1028, 1031, 1032, 1033, 1035, 1037, 1038], "head": [0, 1, 26, 71, 117, 131, 157, 170, 188, 189, 218, 243, 251, 309, 313, 318, 376, 384, 407, 1004, 1027, 1028, 1037, 1038], "nicola": [0, 1, 149, 307, 651, 976, 993, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hug": [0, 1, 149, 307, 998, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "adrin": [0, 1, 65, 343, 390, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "jalali": [0, 1, 65, 343, 390, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "julien": [0, 1, 651, 976, 1004, 1022, 1025, 1029, 1030, 1034, 1035, 1036, 1037, 1038], "jerphanion": [0, 1, 1034, 1035, 1036, 1037, 1038], "guillaum": [0, 1, 5, 7, 72, 75, 100, 132, 152, 157, 158, 159, 161, 188, 189, 202, 222, 303, 1004, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 132, 152, 157, 158, 159, 161, 188, 189, 202, 222, 303, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "christian": [0, 1, 19, 200, 201, 202, 218, 347, 348, 371, 1004, 1015, 1022, 1023, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "lorentzen": [0, 1, 200, 201, 202, 218, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "jan": [0, 1, 24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 201, 235, 871, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1034, 1038], "hendrik": [0, 1, 24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235, 1022, 1025, 1026, 1027, 1028], "metzen": [0, 1, 24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235, 1022, 1025, 1026, 1027, 1028], "andrea": [0, 1, 31, 74, 100, 116, 191, 234, 304, 305, 324, 342, 343, 390, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "mueller": [0, 1, 74, 100, 116, 191, 234, 324, 342, 343, 1004, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "vlad": [0, 1, 95, 237, 300, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "nicula": [0, 1, 95, 237, 300, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "joel": [0, 1, 72, 390, 410, 528, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "nothman": [0, 1, 72, 390, 410, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "hanmin": [0, 1, 304, 1029, 1030, 1031, 1032, 1033], "qin": [0, 1, 304, 373, 410, 1029, 1030, 1031, 1032, 1033], "omar": [0, 1, 1032, 1037, 1038, 1039], "salman": [0, 1, 1037, 1038, 1039], "bertrand": [0, 1, 1022, 1028, 1029, 1034, 1035], "thirion": [0, 1, 1022, 1028, 1029, 1035], "tom": [0, 1, 192, 208, 281, 283, 305, 306, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "dupr\u00e9": [0, 1, 305, 306, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "la": [0, 1, 192, 208, 281, 283, 305, 306, 309, 373, 1004, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "tour": [0, 1, 192, 208, 281, 283, 305, 306, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "nell": [0, 1, 39, 224, 232, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1034], "roman": [0, 1, 200, 218, 620, 906, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "yurchak": [0, 1, 200, 218, 410, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "meekail": [0, 1, 1036, 1037, 1038, 1039], "zain": [0, 1, 1036, 1037, 1038, 1039], "pleas": [0, 12, 17, 26, 71, 72, 111, 117, 119, 120, 126, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 204, 230, 231, 232, 234, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 281, 291, 300, 309, 313, 314, 315, 316, 317, 318, 319, 324, 356, 363, 370, 371, 374, 376, 377, 378, 380, 384, 387, 388, 389, 392, 396, 398, 401, 402, 409, 410, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 489, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 881, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 980, 984, 990, 994, 995, 1000, 1001, 1003, 1006, 1013, 1015, 1022, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "do": [0, 4, 10, 25, 42, 55, 61, 67, 74, 90, 99, 101, 102, 105, 116, 119, 121, 123, 125, 126, 132, 139, 146, 157, 164, 170, 171, 172, 197, 200, 204, 218, 221, 223, 236, 237, 252, 256, 259, 262, 264, 279, 281, 283, 287, 316, 327, 331, 334, 339, 342, 347, 348, 349, 356, 358, 362, 363, 364, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 389, 390, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 443, 454, 496, 529, 531, 535, 537, 545, 548, 574, 575, 581, 582, 584, 625, 626, 638, 639, 645, 648, 649, 652, 659, 661, 669, 729, 755, 770, 774, 806, 809, 824, 825, 829, 856, 857, 859, 866, 870, 872, 877, 878, 880, 881, 882, 883, 900, 901, 902, 903, 911, 954, 969, 972, 974, 976, 977, 980, 981, 983, 984, 988, 990, 995, 996, 1000, 1001, 1004, 1006, 1013, 1014, 1015, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "email": [0, 347, 376, 387, 410, 827, 982, 1004], "directli": [0, 6, 19, 27, 45, 46, 56, 71, 117, 149, 160, 184, 188, 200, 206, 218, 230, 266, 300, 303, 317, 349, 358, 362, 374, 376, 377, 378, 380, 382, 388, 389, 390, 398, 399, 400, 402, 403, 404, 405, 406, 410, 412, 435, 445, 455, 457, 462, 467, 520, 560, 561, 562, 563, 590, 604, 613, 625, 636, 639, 640, 645, 646, 653, 654, 655, 656, 657, 670, 674, 677, 683, 766, 770, 773, 782, 783, 789, 792, 793, 803, 837, 851, 852, 853, 859, 869, 871, 874, 881, 948, 969, 976, 978, 983, 985, 987, 990, 995, 996, 1001, 1007, 1010, 1011, 1022, 1030, 1031, 1033, 1034, 1035, 1038], "ask": [0, 164, 165, 261, 365, 375, 376, 380, 381, 384, 389, 390, 411, 834, 835, 836, 838, 840, 842, 843, 844, 998, 1003, 1038], "assist": [0, 376, 387, 990, 1004], "report": [0, 4, 8, 32, 70, 75, 146, 160, 188, 259, 269, 313, 322, 358, 371, 375, 377, 378, 379, 382, 384, 387, 389, 392, 396, 402, 406, 604, 642, 651, 657, 678, 679, 693, 706, 721, 722, 730, 775, 776, 779, 821, 830, 849, 850, 887, 905, 923, 976, 983, 1000, 1001, 1003, 1023, 1026, 1029, 1030, 1032, 1033, 1035, 1037, 1038], "issu": [0, 4, 25, 79, 86, 200, 218, 266, 310, 363, 365, 370, 379, 380, 381, 384, 385, 387, 389, 390, 391, 392, 393, 396, 398, 402, 404, 405, 410, 412, 442, 445, 455, 466, 475, 476, 477, 527, 532, 536, 566, 578, 579, 581, 582, 584, 604, 620, 684, 688, 761, 863, 868, 880, 919, 969, 970, 977, 983, 988, 990, 995, 1000, 1001, 1003, 1014, 1015, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037], "instead": [0, 4, 5, 6, 20, 34, 48, 53, 55, 56, 57, 71, 100, 115, 120, 129, 146, 149, 152, 200, 202, 215, 218, 225, 252, 257, 258, 262, 263, 279, 286, 303, 313, 314, 315, 316, 317, 334, 336, 347, 349, 358, 362, 363, 370, 371, 374, 375, 376, 377, 378, 380, 381, 384, 385, 387, 388, 389, 396, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 413, 425, 430, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 449, 452, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 502, 503, 526, 527, 528, 530, 531, 532, 533, 534, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 587, 600, 601, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 623, 625, 628, 631, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 683, 687, 700, 738, 766, 770, 771, 772, 775, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 801, 803, 807, 808, 809, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 853, 854, 855, 857, 858, 859, 864, 865, 870, 871, 872, 882, 883, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 918, 924, 929, 948, 955, 969, 970, 972, 976, 977, 979, 980, 981, 984, 985, 990, 994, 995, 996, 1000, 1003, 1011, 1013, 1015, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "see": [0, 4, 5, 7, 20, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 102, 106, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 126, 129, 132, 138, 145, 146, 147, 149, 152, 157, 158, 159, 164, 167, 170, 171, 173, 176, 179, 180, 181, 184, 191, 201, 202, 203, 204, 206, 217, 218, 221, 223, 231, 233, 236, 240, 241, 243, 247, 248, 249, 255, 256, 258, 260, 261, 262, 263, 264, 268, 270, 271, 272, 275, 276, 281, 287, 288, 290, 294, 303, 309, 310, 313, 314, 315, 316, 317, 318, 319, 324, 334, 347, 348, 349, 352, 353, 354, 355, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 387, 388, 389, 392, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 426, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 481, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 603, 604, 607, 612, 615, 616, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 699, 701, 704, 706, 735, 755, 766, 770, 771, 772, 773, 780, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 928, 929, 949, 951, 954, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1001, 1004, 1006, 1008, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "what": [0, 4, 9, 12, 40, 45, 52, 53, 86, 96, 100, 121, 169, 170, 189, 206, 208, 216, 231, 236, 243, 299, 347, 349, 352, 358, 363, 371, 376, 377, 378, 380, 382, 384, 388, 389, 390, 391, 393, 402, 408, 409, 410, 496, 529, 581, 582, 584, 639, 645, 689, 877, 878, 880, 881, 882, 883, 900, 901, 902, 903, 979, 980, 981, 983, 996, 1001, 1003, 1006, 1022, 1029], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 103, 104, 105, 115, 118, 122, 123, 124, 125, 126, 132, 135, 149, 152, 153, 158, 164, 170, 179, 184, 188, 189, 196, 214, 215, 216, 221, 224, 229, 234, 235, 239, 248, 252, 255, 259, 260, 261, 262, 265, 268, 269, 272, 273, 275, 279, 285, 290, 304, 309, 315, 316, 334, 337, 342, 347, 348, 349, 355, 362, 363, 365, 370, 373, 375, 376, 379, 382, 388, 389, 392, 393, 399, 400, 402, 406, 407, 409, 410, 411, 412, 425, 436, 439, 440, 442, 444, 445, 446, 452, 455, 458, 465, 475, 476, 477, 531, 538, 539, 545, 547, 549, 550, 551, 552, 553, 555, 557, 558, 559, 561, 563, 586, 587, 590, 595, 603, 604, 628, 630, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 681, 682, 683, 686, 687, 696, 701, 712, 713, 714, 715, 716, 720, 721, 731, 732, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 775, 776, 777, 779, 782, 783, 784, 786, 787, 788, 789, 792, 793, 803, 815, 817, 820, 825, 826, 835, 843, 849, 850, 893, 895, 898, 900, 901, 902, 903, 969, 974, 975, 976, 977, 980, 983, 984, 986, 994, 996, 1000, 1001, 1004, 1006, 1011, 1015, 1022, 1025, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "wai": [0, 4, 17, 27, 50, 60, 71, 74, 117, 124, 128, 130, 149, 159, 170, 172, 173, 201, 204, 205, 215, 231, 232, 235, 236, 240, 256, 261, 268, 270, 303, 304, 316, 318, 319, 358, 362, 363, 364, 370, 372, 374, 375, 378, 379, 384, 385, 389, 390, 392, 393, 396, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 417, 436, 437, 444, 445, 446, 452, 453, 455, 456, 462, 489, 548, 549, 556, 565, 582, 592, 593, 604, 625, 659, 660, 669, 670, 671, 692, 697, 699, 710, 728, 729, 746, 747, 749, 755, 766, 770, 780, 785, 813, 821, 838, 859, 865, 870, 876, 902, 903, 951, 954, 969, 970, 974, 975, 976, 977, 978, 979, 980, 981, 983, 985, 986, 987, 988, 990, 992, 994, 995, 996, 1000, 1001, 1003, 1004, 1006, 1014, 1015, 1022, 1024, 1030, 1035, 1036], "question": [0, 138, 169, 261, 342, 365, 375, 376, 381, 384, 406, 409, 821, 894, 897, 976, 979, 980, 986, 998, 1004], "faq": [0, 384, 406, 685, 977, 990], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 101, 105, 112, 113, 116, 120, 121, 122, 123, 125, 126, 130, 132, 146, 157, 159, 167, 170, 171, 172, 173, 176, 181, 189, 190, 196, 201, 202, 203, 204, 207, 208, 214, 218, 225, 226, 231, 234, 236, 238, 239, 240, 242, 252, 256, 257, 259, 261, 262, 263, 268, 270, 271, 273, 274, 275, 281, 283, 285, 287, 288, 299, 308, 310, 314, 315, 316, 319, 331, 332, 334, 337, 342, 347, 348, 352, 356, 362, 363, 364, 365, 371, 374, 375, 377, 378, 379, 381, 384, 388, 389, 390, 393, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 416, 426, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 615, 616, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 697, 713, 749, 782, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 970, 974, 975, 976, 977, 979, 980, 986, 987, 988, 990, 992, 993, 995, 996, 999, 1001, 1003, 1004, 1006, 1008, 1010, 1015, 1017, 1022, 1024, 1027, 1033, 1036, 1037, 1038], "you": [0, 14, 16, 20, 24, 71, 120, 121, 124, 126, 146, 149, 165, 171, 188, 201, 202, 204, 231, 236, 243, 249, 256, 261, 262, 268, 276, 287, 313, 314, 317, 319, 323, 326, 347, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 392, 393, 396, 398, 400, 401, 402, 403, 404, 406, 409, 410, 411, 413, 414, 419, 430, 436, 437, 439, 440, 442, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 489, 493, 496, 497, 502, 503, 525, 526, 527, 529, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 572, 573, 574, 575, 581, 582, 583, 584, 587, 600, 601, 603, 604, 620, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 683, 692, 693, 777, 788, 789, 790, 791, 792, 793, 794, 796, 798, 803, 804, 805, 806, 807, 808, 809, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 842, 843, 849, 850, 851, 852, 855, 856, 857, 858, 859, 864, 865, 866, 871, 872, 877, 878, 880, 881, 882, 883, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 929, 946, 948, 969, 970, 975, 976, 980, 981, 984, 986, 987, 990, 991, 994, 995, 996, 999, 1000, 1003, 1004, 1006, 1007, 1010, 1013, 1015, 1022, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 20, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 96, 98, 99, 100, 101, 103, 105, 106, 109, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 144, 145, 146, 148, 149, 152, 157, 158, 159, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 184, 185, 188, 189, 191, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 208, 216, 217, 218, 221, 222, 223, 229, 230, 231, 232, 233, 235, 236, 240, 243, 246, 247, 248, 249, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 268, 270, 272, 273, 275, 276, 279, 281, 283, 285, 286, 287, 288, 290, 298, 299, 300, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 323, 324, 326, 327, 331, 332, 334, 337, 342, 347, 348, 349, 354, 355, 356, 358, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 425, 427, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 465, 475, 476, 477, 480, 489, 492, 496, 501, 502, 505, 514, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 572, 573, 574, 575, 576, 577, 581, 582, 584, 585, 587, 590, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 625, 627, 628, 631, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 680, 682, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 697, 700, 702, 704, 705, 711, 713, 714, 715, 716, 718, 719, 721, 722, 724, 725, 729, 730, 731, 732, 734, 735, 738, 744, 747, 748, 749, 750, 751, 755, 771, 772, 774, 775, 776, 777, 779, 780, 781, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 865, 866, 867, 870, 871, 872, 877, 884, 885, 890, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 908, 910, 912, 916, 918, 923, 928, 929, 935, 940, 943, 946, 948, 950, 951, 954, 961, 964, 965, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "contribut": [0, 13, 20, 126, 157, 184, 204, 270, 308, 365, 373, 374, 378, 379, 380, 384, 389, 390, 392, 407, 408, 409, 412, 440, 442, 546, 547, 552, 553, 718, 721, 748, 974, 980, 983, 988, 995, 998, 1000, 1001, 1004, 1013, 1022, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "activ": [0, 167, 208, 246, 252, 262, 321, 328, 349, 370, 371, 374, 376, 377, 382, 384, 387, 389, 390, 392, 403, 489, 495, 519, 625, 628, 630, 643, 644, 646, 647, 648, 656, 657, 658, 675, 676, 677, 678, 679, 706, 711, 787, 848, 849, 850, 888, 946, 976, 977, 978, 979, 983, 984, 985, 993], "who": [0, 70, 363, 365, 371, 376, 383, 390, 392, 834, 835, 836, 838, 840, 842, 843, 844, 998, 1000, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "also": [0, 4, 7, 11, 17, 19, 20, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 103, 105, 112, 115, 118, 120, 122, 124, 125, 126, 130, 132, 145, 146, 147, 149, 152, 154, 157, 165, 170, 171, 172, 173, 176, 180, 181, 183, 189, 192, 193, 196, 200, 201, 202, 204, 205, 209, 217, 218, 221, 232, 234, 236, 240, 252, 259, 261, 262, 263, 264, 267, 268, 270, 271, 272, 281, 284, 289, 292, 294, 297, 303, 304, 305, 307, 308, 313, 314, 315, 316, 327, 330, 331, 332, 334, 336, 347, 348, 349, 352, 353, 356, 358, 362, 363, 364, 369, 370, 371, 373, 374, 375, 376, 378, 379, 382, 384, 385, 387, 388, 389, 390, 392, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 430, 431, 432, 434, 435, 438, 439, 440, 441, 443, 445, 455, 456, 458, 460, 475, 477, 485, 489, 491, 496, 501, 525, 526, 528, 529, 534, 539, 542, 544, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 600, 601, 602, 603, 604, 615, 625, 626, 628, 636, 637, 638, 639, 640, 643, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 665, 669, 671, 674, 677, 680, 684, 687, 688, 692, 703, 706, 715, 721, 722, 730, 735, 755, 771, 772, 775, 776, 779, 787, 788, 789, 792, 793, 803, 806, 809, 814, 815, 816, 817, 818, 819, 821, 831, 834, 835, 836, 838, 839, 840, 842, 843, 844, 848, 849, 850, 852, 854, 855, 860, 861, 865, 869, 872, 877, 881, 894, 897, 900, 901, 902, 903, 912, 931, 944, 948, 969, 970, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 993, 994, 995, 996, 1000, 1001, 1003, 1004, 1006, 1011, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "help": [0, 4, 9, 11, 16, 55, 70, 74, 100, 106, 171, 184, 218, 221, 262, 264, 300, 331, 334, 348, 349, 358, 362, 363, 374, 377, 378, 379, 380, 381, 382, 384, 385, 389, 390, 391, 396, 402, 403, 406, 410, 412, 426, 529, 570, 620, 643, 647, 658, 678, 679, 685, 707, 828, 900, 901, 902, 903, 970, 974, 975, 977, 979, 980, 982, 984, 990, 991, 996, 999, 1000, 1001, 1003, 1004, 1015, 1028, 1029, 1030, 1033, 1036], "triag": [0, 365, 376, 379, 390], "pr": [0, 134, 363, 376, 379, 384, 410, 733, 980, 1032, 1034], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 146, 147, 149, 153, 154, 155, 156, 157, 160, 164, 165, 169, 170, 171, 172, 173, 176, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 252, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 362, 363, 365, 368, 369, 371, 373, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 396, 399, 400, 402, 406, 408, 410, 411, 412, 414, 418, 423, 425, 430, 433, 436, 439, 440, 442, 445, 447, 451, 452, 453, 455, 457, 458, 460, 462, 465, 467, 475, 476, 477, 481, 484, 485, 488, 489, 490, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 531, 533, 534, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 607, 608, 611, 612, 613, 615, 616, 620, 621, 622, 623, 625, 626, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 678, 679, 682, 683, 684, 685, 686, 687, 688, 694, 697, 699, 710, 714, 715, 716, 729, 735, 749, 770, 773, 777, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 822, 823, 824, 825, 826, 832, 833, 835, 837, 838, 840, 841, 842, 843, 844, 848, 849, 850, 852, 855, 856, 857, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 892, 893, 894, 895, 897, 898, 901, 903, 904, 905, 906, 923, 924, 928, 929, 932, 933, 945, 949, 951, 954, 969, 970, 972, 974, 975, 977, 979, 980, 981, 983, 985, 986, 987, 988, 992, 993, 995, 996, 998, 1000, 1002, 1003, 1004, 1006, 1009, 1013, 1014, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038], "arturo": [0, 37, 57, 118, 179, 184, 262, 264, 308, 347, 348, 349, 366, 1036, 1037, 1038], "amor": [0, 37, 57, 118, 179, 184, 262, 264, 308, 347, 348, 349, 366, 1036, 1037, 1038], "juan": [0, 366, 1022, 1033, 1034, 1035, 1036, 1037], "carlo": [0, 234, 366, 409, 412, 604, 634, 635, 972, 985, 1022, 1033, 1034, 1035, 1036, 1037, 1038], "alfaro": [0, 366, 1033, 1034, 1035, 1036, 1037], "jim\u00e9nez": [0, 366, 1030, 1033, 1034, 1035, 1036, 1037], "luci": [0, 267, 366, 1033, 1034, 1035, 1036, 1037, 1038], "liu": [0, 267, 366, 556, 718, 748, 980, 986, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038], "maxwel": [0, 366, 1032, 1035, 1036, 1037, 1038], "martin": [0, 366, 714, 715, 716, 976, 980, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "loyola": [0, 366, 1035, 1036], "sylvain": [0, 366, 1026, 1031, 1032, 1033, 1034, 1035, 1036], "mari\u00e9": [0, 366, 1031, 1032, 1033, 1034, 1035, 1036], "norbert": [0, 366, 1024, 1034, 1035, 1036], "prein": [0, 366, 1034, 1035, 1036], "reshama": [0, 360, 366, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "shaikh": [0, 360, 366, 1030, 1031, 1033, 1034, 1035, 1036, 1037], "albert": [0, 229, 366, 1029, 1030, 1031, 1034, 1035], "maren": [0, 366, 1033, 1034, 1035, 1036, 1037, 1038], "westermann": [0, 366, 1033, 1034, 1035, 1036, 1037, 1038], "around": [0, 4, 26, 37, 52, 85, 112, 115, 125, 158, 171, 176, 236, 264, 300, 322, 324, 325, 334, 337, 347, 348, 349, 358, 371, 373, 376, 382, 387, 393, 402, 406, 407, 410, 412, 464, 465, 508, 537, 613, 633, 642, 697, 787, 795, 811, 838, 840, 842, 843, 844, 872, 976, 977, 979, 980, 986, 990, 994, 1000, 1001, 1004, 1013, 1015, 1026, 1027], "lauren": [0, 359, 685, 689, 977, 1034, 1037], "burk": [0, 359, 1037], "francoisgoupil": [0, 359, 1036], "longer": [0, 4, 53, 115, 171, 185, 299, 316, 376, 378, 402, 406, 409, 410, 412, 442, 529, 556, 975, 979, 980, 982, 985, 995, 1004, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "mathieu": [0, 2, 24, 48, 100, 191, 201, 222, 237, 262, 347, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1035], "blondel": [0, 2, 24, 48, 100, 191, 201, 222, 237, 262, 347, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1035], "lar": [0, 2, 14, 98, 149, 167, 178, 189, 219, 347, 348, 349, 373, 464, 465, 471, 494, 524, 530, 532, 535, 536, 538, 539, 541, 644, 645, 646, 647, 648, 649, 656, 657, 658, 671, 675, 676, 677, 678, 679, 1002, 1013, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1035], "buitinck": [0, 2, 14, 347, 348, 349, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "noel": [0, 2, 111, 112, 113, 114, 1022, 1023, 1024, 1025, 1026, 1034], "daw": [0, 2, 111, 112, 113, 114, 1022, 1023, 1024, 1025, 1026], "dubourg": [0, 2, 155, 159, 1004, 1022, 1026], "edouard": [0, 2, 1022], "duchesnai": [0, 2, 1022], "alexand": [0, 2, 402, 407, 528, 858, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1036], "fabisch": [0, 2, 1024, 1025, 1026, 1028], "virgil": [0, 2, 9, 1022, 1023, 1025], "fritsch": [0, 2, 9, 1022, 1023, 1025], "satrajit": [0, 2, 1022, 1023], "ghosh": [0, 2, 402, 1022, 1023], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1022, 1025, 1030, 1031, 1032, 1033, 1036], "gorgolewski": [0, 2, 1022, 1025], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 183, 196, 197, 198, 223, 339, 342, 1022, 1023, 1024, 1025], "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 183, 196, 197, 198, 223, 339, 342, 1022, 1023, 1024, 1025], "brian": [0, 2, 46, 701, 980, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1035, 1036], "holt": [0, 2, 1022], "arnaud": [0, 2, 1023, 1024, 1025, 1026, 1027, 1028], "joli": [0, 2, 1023, 1024, 1025, 1026, 1027, 1028], "thoui": [0, 2, 1022], "rai": [0, 2, 948, 980, 1022, 1032, 1034, 1035], "jone": [0, 2, 371, 1022], "kyle": [0, 2, 99, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034], "kastner": [0, 2, 99, 1024, 1025, 1026, 1033, 1034], "manoj": [0, 2, 42, 149, 182, 1025, 1026, 1027, 1028, 1029], "kumar": [0, 2, 42, 149, 182, 371, 402, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "robert": [0, 2, 48, 72, 149, 188, 373, 407, 521, 528, 621, 649, 714, 715, 716, 727, 858, 970, 976, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1037], "layton": [0, 2, 48, 1022, 1023, 1024, 1025, 1027], "wei": [0, 2, 994, 1022, 1023, 1026, 1027, 1028, 1029, 1031, 1035, 1038], "li": [0, 2, 325, 371, 632, 635, 689, 718, 748, 885, 969, 972, 980, 983, 990, 992, 995, 1022, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "paolo": [0, 2, 1022, 1026, 1032], "losi": [0, 2, 1022], "gill": [0, 2, 115, 116, 1022, 1023, 1024, 1025, 1026, 1027, 1028], "loupp": [0, 2, 115, 116, 409, 548, 549, 1022, 1023, 1024, 1025, 1026, 1027, 1028], "chiara": [0, 2, 367, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "marmo": [0, 2, 367, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "jarrod": [0, 2, 1031, 1038], "millman": [0, 2, 1031, 1038], "passo": [0, 2, 1022, 1023], "peter": [0, 2, 11, 16, 63, 111, 124, 126, 127, 262, 347, 348, 402, 441, 443, 450, 642, 782, 783, 976, 980, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1038], "prettenhof": [0, 2, 11, 16, 111, 124, 126, 127, 262, 347, 348, 1022, 1023, 1024, 1025, 1026, 1027], "venkat": [0, 2], "raghav": [0, 2, 123, 265, 303, 1026, 1027, 1028, 1029, 1030, 1034], "rajagopalan": [0, 2, 1030, 1034], "jacob": [0, 2, 1027, 1028, 1029], "schreiber": [0, 2, 1027, 1028, 1029], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1022, 1023], "jake": [0, 2, 11, 159, 201, 221, 249, 286, 294, 999, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1036], "vanderpla": [0, 2, 11, 159, 201, 221, 249, 286, 294, 999, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "ward": [0, 2, 36, 39, 44, 52, 54, 56, 62, 68, 167, 173, 410, 434, 438, 456, 523, 845, 1022, 1025, 1027], "farlei": [0, 2, 1022], "ron": [0, 2, 248, 1022], "weiss": [0, 2, 248, 402, 684, 1022], "respons": [0, 149, 171, 196, 200, 203, 236, 271, 347, 373, 382, 389, 401, 402, 403, 409, 412, 439, 457, 475, 476, 477, 624, 625, 626, 667, 668, 691, 693, 695, 787, 788, 981, 987, 998, 1006], "If": [0, 4, 11, 16, 27, 32, 42, 49, 55, 71, 82, 98, 109, 120, 125, 132, 161, 165, 170, 181, 200, 215, 217, 236, 261, 268, 276, 286, 294, 303, 308, 309, 334, 342, 343, 347, 348, 349, 356, 358, 362, 363, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 392, 393, 396, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 507, 508, 512, 515, 516, 517, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 704, 705, 706, 707, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 728, 730, 733, 734, 737, 738, 740, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 755, 756, 758, 759, 760, 761, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 801, 803, 806, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 915, 916, 917, 918, 921, 927, 929, 931, 933, 939, 943, 946, 948, 949, 951, 954, 955, 961, 964, 965, 966, 967, 969, 970, 972, 974, 975, 976, 977, 978, 980, 983, 984, 986, 987, 990, 992, 994, 995, 996, 997, 1000, 1001, 1003, 1006, 1007, 1013, 1014, 1015, 1022, 1025, 1026, 1027, 1028, 1031, 1032, 1034, 1035, 1036, 1038], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 138, 139, 140, 141, 145, 146, 148, 152, 153, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 193, 196, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 212, 215, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 322, 323, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 345, 346, 349, 350, 352, 354, 355, 356, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 385, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 408, 412, 413, 414, 415, 418, 420, 421, 423, 424, 432, 449, 450, 452, 454, 456, 464, 471, 473, 474, 478, 486, 496, 501, 502, 509, 524, 538, 539, 540, 541, 548, 565, 567, 568, 570, 571, 576, 578, 579, 585, 588, 589, 591, 594, 596, 602, 609, 613, 614, 617, 622, 629, 631, 635, 643, 644, 647, 653, 654, 656, 660, 668, 676, 678, 679, 680, 687, 688, 689, 692, 704, 707, 708, 709, 714, 715, 716, 718, 720, 722, 724, 727, 728, 731, 735, 738, 743, 748, 750, 751, 755, 756, 758, 759, 760, 761, 763, 766, 767, 768, 769, 772, 773, 775, 784, 796, 797, 798, 799, 800, 801, 802, 812, 820, 822, 824, 826, 828, 832, 833, 842, 843, 844, 846, 854, 855, 858, 860, 863, 874, 875, 877, 879, 880, 882, 883, 884, 887, 891, 893, 902, 903, 904, 905, 908, 911, 912, 913, 918, 919, 928, 929, 936, 943, 947, 948, 949, 951, 952, 956, 957, 958, 962, 963, 969, 970, 972, 973, 975, 978, 979, 981, 982, 983, 985, 986, 987, 988, 990, 991, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "scientif": [0, 32, 138, 139, 140, 141, 234, 365, 370, 374, 387, 392, 402, 445, 455, 494, 1004, 1007], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 103, 104, 106, 111, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 134, 135, 138, 144, 145, 146, 148, 149, 152, 154, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 183, 184, 186, 188, 189, 191, 193, 195, 197, 200, 201, 202, 203, 204, 206, 208, 209, 212, 213, 214, 215, 216, 218, 221, 222, 225, 226, 229, 230, 232, 233, 234, 236, 237, 240, 242, 243, 246, 247, 248, 249, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 279, 281, 283, 284, 286, 289, 290, 291, 292, 294, 297, 298, 299, 300, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 327, 330, 331, 332, 334, 335, 336, 337, 339, 342, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 443, 462, 463, 464, 465, 466, 467, 468, 469, 494, 516, 524, 525, 527, 530, 542, 554, 555, 556, 562, 563, 575, 576, 582, 604, 610, 620, 625, 626, 631, 633, 644, 648, 651, 652, 659, 661, 666, 667, 668, 669, 670, 685, 704, 711, 713, 718, 738, 748, 756, 773, 795, 811, 813, 834, 835, 836, 838, 840, 841, 842, 843, 844, 855, 864, 865, 866, 872, 877, 878, 880, 881, 882, 883, 885, 888, 892, 896, 944, 946, 969, 970, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "would": [0, 4, 6, 9, 26, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 101, 112, 125, 149, 152, 157, 158, 170, 171, 172, 173, 176, 184, 190, 200, 201, 202, 215, 218, 229, 236, 248, 257, 261, 262, 267, 269, 271, 281, 287, 299, 303, 304, 308, 309, 316, 319, 325, 334, 343, 347, 349, 358, 362, 371, 372, 376, 377, 378, 382, 384, 385, 387, 388, 389, 390, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 425, 439, 458, 461, 475, 476, 477, 482, 525, 527, 529, 534, 537, 545, 547, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 563, 576, 577, 580, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 668, 669, 671, 672, 693, 695, 701, 705, 706, 713, 748, 774, 777, 781, 789, 791, 803, 817, 825, 826, 835, 843, 850, 877, 878, 880, 881, 882, 883, 884, 885, 890, 892, 893, 895, 898, 900, 901, 902, 903, 940, 969, 970, 973, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 990, 995, 1000, 1001, 1004, 1006, 1011, 1013, 1015, 1019, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "appreci": [0, 376], "citat": [0, 370, 373, 387], "paper": [0, 149, 176, 261, 373, 382, 387, 402, 404, 435, 442, 471, 497, 527, 534, 556, 634, 651, 659, 660, 664, 669, 672, 685, 780, 829, 838, 841, 884, 885, 976, 980, 983, 986, 995, 1015, 1022, 1029, 1030], "machin": [0, 4, 6, 8, 9, 27, 63, 118, 145, 146, 149, 152, 157, 168, 172, 174, 212, 242, 261, 264, 267, 296, 301, 303, 308, 310, 315, 318, 330, 335, 342, 347, 349, 362, 363, 365, 369, 370, 371, 373, 374, 376, 379, 382, 383, 387, 388, 389, 391, 396, 400, 402, 406, 407, 409, 410, 412, 430, 432, 441, 464, 465, 471, 495, 497, 503, 509, 510, 511, 523, 525, 527, 534, 537, 548, 549, 550, 551, 552, 553, 557, 558, 559, 586, 587, 603, 604, 607, 612, 615, 627, 631, 632, 634, 636, 637, 638, 643, 644, 647, 648, 649, 650, 651, 652, 669, 675, 676, 685, 701, 706, 717, 727, 733, 735, 777, 780, 787, 817, 818, 832, 833, 838, 841, 848, 849, 850, 852, 870, 872, 878, 892, 893, 894, 895, 897, 898, 902, 903, 948, 969, 970, 972, 973, 976, 977, 978, 980, 981, 983, 986, 987, 988, 990, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1011, 1015, 1016, 1017, 1019, 1022, 1024, 1034, 1035, 1036, 1037], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 362, 364, 370, 374, 376, 377, 378, 379, 380, 381, 384, 385, 387, 389, 392, 403, 410, 489, 501, 502, 574, 692, 800, 866, 948, 980, 990, 996, 998, 1001, 1003, 1004, 1006, 1007, 1009, 1015, 1017, 1022, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "et": [0, 11, 78, 79, 111, 112, 127, 188, 294, 373, 399, 402, 404, 407, 409, 410, 411, 444, 491, 512, 513, 521, 528, 534, 537, 556, 675, 676, 712, 713, 827, 829, 849, 850, 885, 928, 929, 976, 977, 980, 986, 990, 992, 995, 996, 1030, 1038], "al": [0, 11, 78, 79, 111, 112, 127, 188, 294, 373, 399, 402, 404, 407, 409, 410, 411, 444, 491, 512, 513, 521, 528, 534, 537, 556, 675, 676, 712, 713, 827, 829, 849, 850, 885, 928, 929, 976, 977, 980, 986, 990, 992, 995, 996, 1030, 1035, 1038], "jmlr": [0, 402, 659, 660, 669, 697, 976, 995], "12": [0, 4, 6, 8, 15, 20, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 121, 122, 126, 149, 155, 156, 157, 165, 170, 171, 173, 174, 180, 184, 186, 200, 208, 218, 221, 224, 225, 227, 229, 230, 232, 240, 243, 248, 249, 260, 261, 263, 264, 267, 273, 307, 308, 309, 318, 342, 347, 349, 373, 374, 381, 388, 390, 392, 394, 395, 402, 406, 410, 436, 440, 442, 475, 476, 477, 478, 525, 527, 534, 563, 657, 662, 664, 678, 679, 682, 685, 686, 787, 788, 790, 807, 810, 823, 844, 860, 969, 970, 976, 978, 981, 990, 994, 995, 998, 1006, 1011, 1020, 1023, 1025, 1029, 1030, 1032, 1033], "pp": [0, 63, 149, 260, 373, 402, 404, 410, 413, 414, 437, 441, 445, 455, 504, 526, 527, 534, 583, 628, 636, 657, 678, 679, 713, 718, 722, 732, 748, 761, 775, 827, 829, 831, 848, 868, 880, 973, 980, 982, 983, 993], "2825": 0, "2830": 0, "2011": [0, 47, 171, 222, 382, 407, 410, 528, 531, 533, 534, 540, 583, 620, 631, 651, 722, 970, 984, 994, 999, 1022], "bibtex": 0, "entri": [0, 16, 71, 75, 132, 165, 170, 171, 257, 313, 348, 358, 380, 382, 384, 388, 389, 399, 400, 402, 407, 409, 412, 456, 465, 524, 525, 530, 538, 539, 554, 555, 581, 584, 587, 604, 613, 625, 631, 633, 640, 644, 646, 648, 649, 652, 654, 656, 657, 658, 666, 668, 675, 676, 678, 679, 692, 697, 700, 702, 705, 708, 709, 711, 718, 721, 722, 723, 726, 727, 730, 735, 748, 750, 751, 775, 777, 780, 781, 782, 783, 802, 816, 832, 833, 840, 841, 842, 843, 844, 863, 869, 881, 966, 969, 970, 976, 980, 983, 990, 995, 1001, 1006, 1029, 1032, 1033, 1035], "articl": [0, 17, 70, 347, 371, 375, 376, 384, 406, 415, 468, 698, 976, 980, 1015, 1035], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 91, 95, 96, 97, 98, 99, 103, 104, 105, 113, 114, 115, 118, 120, 121, 122, 125, 126, 128, 131, 134, 135, 141, 144, 145, 147, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 170, 179, 180, 182, 184, 185, 187, 188, 189, 192, 193, 199, 200, 202, 204, 205, 206, 208, 209, 214, 217, 218, 221, 222, 223, 229, 233, 234, 235, 237, 238, 246, 247, 248, 249, 250, 251, 252, 255, 256, 260, 261, 262, 264, 265, 266, 270, 271, 275, 283, 284, 287, 288, 289, 290, 292, 293, 294, 303, 307, 308, 309, 310, 324, 327, 330, 331, 332, 333, 334, 337, 343, 344, 347, 353, 354, 355, 375, 376, 380, 384, 403, 980, 1003, 1011], "p": [0, 11, 13, 24, 26, 27, 41, 61, 80, 81, 85, 92, 103, 124, 145, 149, 155, 176, 212, 217, 218, 221, 223, 233, 249, 261, 267, 268, 294, 370, 371, 373, 374, 381, 384, 399, 400, 402, 404, 405, 407, 409, 411, 412, 413, 415, 435, 437, 439, 440, 443, 450, 462, 464, 467, 468, 471, 491, 521, 527, 531, 533, 534, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 554, 557, 558, 559, 583, 585, 586, 587, 588, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 608, 609, 620, 633, 636, 681, 683, 685, 687, 692, 698, 708, 716, 733, 744, 778, 780, 791, 797, 798, 799, 802, 817, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 848, 852, 853, 868, 880, 886, 902, 903, 904, 973, 974, 976, 977, 978, 980, 982, 983, 984, 985, 986, 987, 990, 994, 995, 998, 1010, 1013, 1022, 1023, 1025, 1028, 1030, 1037, 1038, 1039], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 20, 26, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 112, 115, 118, 119, 120, 122, 125, 132, 133, 140, 143, 145, 148, 149, 150, 152, 158, 159, 161, 167, 169, 170, 171, 172, 176, 184, 186, 189, 200, 201, 202, 204, 210, 218, 222, 233, 235, 236, 239, 243, 251, 259, 261, 262, 263, 264, 267, 268, 270, 271, 273, 281, 297, 298, 299, 305, 308, 309, 313, 315, 317, 319, 322, 323, 342, 347, 348, 349, 358, 371, 376, 377, 378, 380, 382, 387, 400, 403, 407, 409, 410, 411, 412, 480, 501, 502, 524, 525, 530, 531, 559, 574, 575, 576, 585, 588, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 610, 620, 625, 628, 651, 706, 715, 718, 721, 722, 748, 775, 776, 779, 780, 790, 791, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810, 816, 849, 850, 854, 863, 866, 867, 871, 872, 907, 912, 913, 972, 975, 984, 987, 988, 990, 994, 1024, 1030, 1031, 1032, 1034, 1036], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 55, 65, 70, 73, 82, 86, 103, 112, 115, 116, 124, 125, 132, 139, 152, 153, 154, 155, 157, 159, 160, 161, 165, 169, 182, 185, 200, 201, 202, 204, 218, 222, 226, 235, 236, 246, 261, 265, 266, 272, 279, 287, 303, 308, 325, 341, 349, 358, 362, 368, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 387, 389, 393, 396, 400, 401, 402, 404, 406, 407, 409, 410, 411, 412, 414, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 496, 521, 524, 526, 527, 530, 531, 534, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 586, 587, 590, 597, 603, 604, 610, 615, 616, 623, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 679, 683, 685, 690, 713, 720, 730, 732, 755, 777, 789, 790, 791, 792, 793, 795, 796, 798, 803, 807, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 841, 842, 843, 844, 848, 849, 850, 852, 855, 857, 858, 859, 862, 864, 865, 868, 870, 871, 872, 875, 877, 878, 879, 880, 881, 882, 883, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 928, 929, 940, 948, 969, 970, 974, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 990, 994, 995, 996, 1001, 1003, 1004, 1015, 1022, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 60, 68, 75, 78, 81, 86, 92, 96, 97, 98, 103, 113, 114, 119, 120, 122, 131, 135, 138, 139, 140, 141, 146, 147, 148, 152, 155, 157, 159, 160, 161, 167, 170, 171, 184, 188, 201, 204, 210, 214, 215, 218, 222, 236, 261, 262, 264, 268, 275, 297, 303, 305, 308, 313, 315, 318, 323, 325, 327, 334, 339, 347, 348, 349, 354, 356, 358, 362, 364, 365, 370, 371, 373, 374, 376, 378, 379, 381, 384, 387, 388, 389, 390, 391, 393, 397, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 425, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 483, 484, 485, 487, 490, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 507, 513, 515, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 600, 601, 603, 604, 610, 613, 620, 621, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 697, 698, 703, 704, 705, 709, 710, 712, 714, 715, 716, 717, 718, 723, 728, 729, 732, 735, 736, 739, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 756, 758, 759, 766, 767, 768, 769, 770, 773, 780, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 927, 928, 929, 939, 940, 965, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 994, 995, 996, 999, 1000, 1001, 1006, 1007, 1013, 1014, 1015, 1017, 1022, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 55, 58, 68, 70, 75, 77, 80, 83, 84, 85, 87, 95, 97, 98, 101, 116, 118, 125, 167, 168, 173, 174, 178, 189, 200, 204, 215, 219, 233, 247, 248, 251, 252, 254, 257, 276, 277, 313, 331, 348, 358, 363, 368, 373, 374, 376, 382, 384, 389, 399, 400, 401, 404, 405, 407, 410, 425, 434, 438, 445, 455, 456, 457, 458, 463, 466, 467, 468, 469, 470, 475, 476, 477, 489, 505, 517, 523, 524, 530, 534, 538, 539, 543, 545, 547, 549, 551, 553, 555, 557, 558, 561, 563, 574, 582, 586, 587, 593, 599, 604, 623, 624, 627, 628, 632, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 669, 671, 672, 681, 688, 692, 694, 697, 710, 728, 729, 731, 746, 747, 749, 780, 785, 789, 794, 801, 803, 814, 818, 820, 821, 822, 825, 826, 827, 835, 843, 845, 848, 850, 852, 853, 856, 859, 865, 866, 867, 872, 876, 886, 892, 893, 894, 895, 897, 898, 901, 903, 907, 974, 975, 976, 977, 980, 981, 982, 985, 988, 994, 995, 997, 1017, 1022, 1025, 1026, 1027, 1030, 1032, 1033, 1036, 1037], "b": [0, 8, 9, 10, 24, 26, 59, 65, 80, 101, 103, 114, 115, 121, 125, 126, 135, 138, 139, 153, 154, 155, 160, 165, 182, 184, 185, 200, 201, 206, 218, 237, 239, 260, 264, 266, 271, 275, 279, 316, 325, 358, 371, 373, 376, 380, 381, 382, 399, 400, 402, 405, 406, 407, 410, 430, 475, 493, 534, 539, 559, 581, 582, 583, 584, 600, 601, 603, 604, 621, 639, 640, 641, 642, 651, 662, 665, 667, 669, 673, 680, 681, 698, 712, 722, 723, 782, 783, 800, 801, 839, 865, 866, 867, 868, 871, 872, 880, 907, 929, 930, 943, 970, 972, 976, 977, 978, 980, 983, 985, 990, 994, 995, 1010, 1022, 1030, 1033, 1035, 1036, 1037], "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 129, 149, 160, 188, 193, 198, 200, 215, 235, 246, 261, 263, 270, 303, 304, 308, 314, 317, 326, 352, 362, 371, 373, 376, 392, 402, 404, 407, 409, 413, 415, 437, 440, 441, 443, 466, 468, 527, 597, 620, 659, 660, 685, 820, 848, 863, 904, 948, 949, 972, 974, 976, 977, 980, 981, 983, 984, 994, 995, 996, 1022, 1025, 1028, 1030, 1031, 1034, 1035, 1037, 1039], "m": [0, 8, 9, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 112, 135, 157, 182, 200, 218, 261, 265, 294, 326, 330, 341, 347, 362, 363, 370, 371, 373, 374, 380, 382, 389, 392, 399, 400, 402, 404, 407, 409, 411, 413, 437, 438, 439, 443, 450, 466, 467, 493, 506, 521, 525, 527, 529, 534, 632, 638, 642, 657, 664, 678, 679, 682, 686, 701, 709, 718, 733, 748, 750, 751, 787, 788, 838, 863, 929, 959, 960, 970, 972, 974, 976, 977, 978, 980, 981, 982, 983, 984, 988, 990, 994, 996, 1004, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 103, 106, 112, 115, 116, 121, 125, 126, 127, 135, 145, 153, 154, 155, 159, 160, 161, 164, 165, 170, 182, 184, 185, 189, 200, 207, 210, 218, 226, 232, 235, 246, 249, 252, 260, 261, 264, 266, 267, 268, 271, 274, 276, 279, 283, 288, 292, 294, 309, 317, 336, 349, 358, 371, 373, 377, 380, 387, 389, 399, 400, 402, 404, 405, 406, 407, 409, 410, 419, 425, 430, 439, 444, 446, 458, 462, 467, 471, 475, 476, 477, 491, 497, 506, 513, 527, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 581, 582, 583, 584, 599, 602, 603, 604, 620, 628, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 678, 679, 685, 689, 709, 714, 715, 716, 720, 722, 773, 777, 780, 789, 803, 806, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 841, 842, 843, 849, 850, 863, 868, 880, 887, 888, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 905, 946, 970, 972, 974, 976, 977, 980, 981, 982, 983, 984, 987, 988, 990, 994, 995, 996, 1000, 1015, 1022, 1026, 1029, 1032, 1033, 1034, 1035, 1037], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 103, 105, 123, 152, 160, 200, 208, 214, 216, 218, 226, 230, 232, 233, 234, 235, 249, 260, 261, 269, 279, 287, 288, 294, 299, 322, 323, 326, 333, 334, 339, 349, 370, 371, 373, 378, 382, 387, 400, 402, 404, 405, 407, 409, 410, 412, 413, 437, 439, 440, 445, 453, 456, 481, 486, 496, 519, 527, 529, 550, 551, 558, 559, 574, 575, 583, 607, 608, 612, 615, 616, 637, 638, 641, 662, 663, 664, 673, 681, 682, 685, 686, 690, 692, 698, 701, 714, 715, 716, 718, 748, 756, 760, 770, 773, 780, 801, 827, 829, 831, 832, 833, 848, 859, 863, 865, 866, 868, 880, 885, 902, 903, 907, 972, 974, 976, 977, 978, 979, 980, 982, 988, 990, 992, 995, 996, 1003, 1011, 1012, 1013, 1025, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038], "perrot": [0, 1022], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 98, 100, 101, 112, 115, 122, 124, 125, 128, 138, 145, 148, 149, 160, 169, 170, 171, 176, 180, 184, 189, 190, 200, 201, 202, 204, 218, 221, 222, 235, 236, 257, 261, 262, 264, 266, 267, 275, 276, 287, 294, 305, 308, 313, 315, 342, 349, 354, 355, 356, 358, 362, 363, 364, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 387, 388, 389, 392, 393, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 430, 432, 434, 436, 437, 438, 440, 442, 443, 447, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 489, 491, 493, 494, 495, 496, 517, 526, 527, 528, 529, 531, 533, 534, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 574, 575, 581, 582, 583, 584, 586, 587, 590, 596, 597, 599, 600, 601, 602, 603, 604, 610, 615, 616, 623, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 680, 681, 683, 685, 687, 690, 692, 694, 697, 698, 701, 702, 720, 721, 722, 723, 730, 733, 734, 747, 755, 759, 777, 780, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 802, 803, 807, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 848, 849, 850, 852, 855, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 907, 923, 928, 929, 931, 934, 935, 940, 948, 955, 966, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 990, 991, 994, 995, 996, 1001, 1003, 1004, 1013, 1014, 1015, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "journal": [0, 81, 171, 261, 267, 370, 371, 373, 400, 402, 404, 409, 445, 455, 466, 527, 534, 620, 628, 638, 682, 685, 686, 698, 708, 723, 726, 727, 750, 751, 778, 817, 822, 868, 880, 969, 970, 974, 976, 977, 978, 981, 987, 992, 994, 995], "research": [0, 149, 169, 261, 267, 371, 373, 387, 402, 494, 506, 628, 638, 685, 727, 817, 822, 969, 977, 981, 983, 995, 1000, 1001, 1004], "volum": [0, 66, 79, 149, 157, 371, 373, 402, 404, 412, 466, 527, 761, 976, 995, 1004], "page": [0, 12, 17, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 170, 171, 172, 181, 221, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 362, 371, 373, 376, 378, 380, 382, 384, 390, 401, 402, 404, 466, 509, 510, 511, 621, 637, 822, 887, 929, 970, 980, 981, 1006, 1015, 1020, 1022, 1026, 1027], "want": [0, 4, 12, 20, 24, 25, 26, 55, 64, 71, 149, 165, 170, 200, 201, 202, 236, 252, 261, 275, 299, 327, 331, 347, 358, 362, 363, 364, 374, 375, 377, 378, 380, 381, 382, 387, 388, 389, 390, 392, 393, 396, 400, 401, 402, 403, 404, 409, 410, 411, 493, 496, 497, 503, 528, 542, 647, 648, 649, 651, 652, 659, 661, 667, 668, 669, 756, 838, 841, 857, 864, 885, 892, 969, 976, 979, 980, 981, 984, 986, 990, 991, 995, 1000, 1001, 1006, 1014, 1022, 1036], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 55, 65, 66, 78, 80, 82, 86, 91, 92, 100, 109, 112, 118, 121, 125, 138, 149, 152, 157, 159, 170, 171, 173, 176, 179, 189, 213, 217, 218, 223, 229, 236, 238, 241, 243, 246, 251, 252, 260, 264, 266, 268, 270, 281, 283, 287, 288, 305, 316, 325, 331, 344, 347, 348, 352, 356, 358, 363, 364, 369, 370, 371, 372, 376, 377, 378, 380, 381, 384, 387, 388, 389, 390, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 418, 433, 434, 435, 437, 438, 439, 443, 447, 449, 453, 456, 457, 458, 460, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 490, 496, 516, 524, 526, 527, 530, 531, 533, 534, 535, 537, 543, 548, 549, 550, 551, 552, 553, 557, 558, 559, 576, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 637, 638, 664, 665, 667, 678, 679, 680, 681, 685, 689, 692, 701, 717, 721, 722, 728, 729, 733, 770, 773, 775, 787, 788, 789, 813, 820, 821, 834, 835, 836, 838, 839, 840, 842, 843, 844, 851, 852, 856, 861, 864, 865, 867, 884, 885, 888, 892, 893, 900, 902, 912, 913, 918, 924, 948, 950, 969, 975, 976, 977, 979, 980, 981, 982, 983, 986, 987, 988, 993, 994, 995, 996, 1000, 1004, 1006, 1008, 1010, 1013, 1014, 1015, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "api": [0, 12, 50, 108, 167, 228, 230, 236, 240, 244, 281, 348, 349, 364, 365, 369, 370, 376, 377, 379, 380, 385, 386, 387, 388, 390, 392, 396, 407, 409, 410, 416, 419, 420, 421, 424, 426, 431, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 489, 497, 501, 503, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 556, 557, 559, 560, 561, 562, 563, 572, 573, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 651, 670, 681, 682, 683, 684, 685, 695, 787, 788, 792, 793, 795, 811, 818, 836, 838, 840, 841, 844, 848, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 896, 897, 946, 948, 964, 969, 978, 979, 980, 983, 990, 994, 1000, 1001, 1004, 1006, 1010, 1012, 1017, 1019, 1020, 1021, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "design": [0, 13, 20, 80, 112, 132, 155, 169, 170, 181, 251, 303, 309, 356, 364, 370, 376, 381, 387, 388, 389, 390, 391, 402, 409, 411, 412, 508, 521, 625, 626, 641, 658, 662, 669, 673, 678, 789, 807, 808, 827, 829, 970, 976, 977, 980, 981, 990, 1000, 1001, 1004, 1008, 1024, 1031], "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 111, 122, 149, 156, 158, 160, 170, 176, 180, 184, 189, 204, 206, 226, 236, 264, 266, 268, 269, 297, 308, 323, 334, 347, 348, 349, 358, 362, 363, 364, 368, 370, 371, 372, 373, 375, 376, 378, 380, 381, 384, 387, 389, 390, 393, 396, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 425, 432, 433, 434, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 452, 455, 458, 462, 465, 475, 476, 477, 480, 481, 482, 489, 501, 502, 508, 527, 528, 531, 533, 537, 540, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 567, 574, 587, 590, 595, 603, 604, 610, 613, 627, 628, 630, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 669, 670, 671, 672, 674, 677, 679, 681, 682, 684, 685, 686, 688, 690, 698, 705, 708, 709, 711, 712, 714, 715, 716, 718, 730, 748, 755, 777, 778, 789, 791, 792, 793, 794, 803, 804, 805, 806, 808, 809, 813, 817, 820, 825, 826, 827, 828, 829, 831, 834, 835, 836, 838, 840, 842, 843, 844, 850, 851, 852, 855, 857, 867, 869, 870, 871, 872, 873, 875, 881, 884, 885, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 910, 932, 933, 948, 969, 970, 972, 974, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 1001, 1006, 1012, 1013, 1022, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "consid": [0, 4, 12, 13, 20, 25, 39, 55, 66, 71, 81, 95, 99, 122, 123, 125, 144, 148, 149, 165, 171, 200, 202, 236, 261, 264, 268, 272, 281, 287, 288, 303, 315, 331, 339, 342, 347, 358, 362, 363, 364, 368, 375, 376, 378, 382, 384, 387, 389, 398, 402, 407, 408, 409, 410, 411, 412, 413, 414, 431, 437, 439, 443, 450, 467, 501, 502, 514, 526, 542, 543, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 578, 579, 581, 582, 584, 586, 600, 601, 613, 625, 626, 639, 645, 651, 652, 653, 655, 664, 672, 681, 682, 683, 685, 686, 687, 689, 693, 695, 698, 700, 702, 708, 718, 722, 726, 748, 778, 780, 784, 834, 835, 836, 838, 840, 842, 843, 844, 847, 849, 850, 855, 865, 866, 873, 887, 888, 897, 898, 900, 901, 902, 903, 964, 969, 975, 976, 977, 978, 980, 981, 983, 986, 987, 988, 990, 994, 995, 996, 1001, 1006, 1013, 1025, 1026, 1030, 1034, 1035, 1037, 1038], "softwar": [0, 149, 362, 373, 376, 384, 387, 389, 410, 620, 628, 651, 970, 1004], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 310, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 364, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 425, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 497, 499, 500, 501, 502, 503, 505, 508, 512, 514, 516, 517, 519, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 680, 681, 682, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 708, 710, 711, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 755, 756, 760, 761, 763, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 919, 920, 921, 922, 923, 924, 927, 929, 931, 932, 933, 934, 939, 941, 942, 943, 944, 945, 947, 948, 949, 951, 954, 968, 969, 970, 972, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1004, 1007, 1009, 1010, 1011, 1012, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "2013": [0, 176, 373, 402, 406, 407, 529, 718, 748, 972, 980, 999, 1023, 1024], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 66, 67, 81, 115, 149, 172, 192, 195, 204, 209, 210, 266, 267, 268, 298, 307, 342, 373, 374, 382, 384, 399, 400, 402, 406, 407, 409, 412, 467, 509, 510, 511, 531, 533, 540, 548, 549, 550, 551, 558, 559, 583, 600, 601, 603, 604, 608, 612, 615, 616, 627, 641, 642, 651, 662, 665, 667, 673, 680, 682, 685, 686, 698, 708, 717, 718, 723, 748, 778, 829, 863, 900, 901, 902, 903, 969, 974, 976, 977, 980, 982, 983, 984, 988, 992, 994, 996, 1014, 1025, 1030, 1034, 1035, 1036, 1037], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 402, 410, 827, 982, 999], "languag": [0, 349, 381, 396, 407, 410, 994, 1000, 1001, 1004, 1007], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 104, 106, 107, 109, 112, 114, 115, 117, 118, 121, 122, 123, 124, 125, 129, 130, 131, 133, 135, 138, 139, 140, 141, 146, 151, 152, 153, 154, 156, 159, 161, 162, 164, 167, 170, 171, 178, 179, 182, 183, 184, 185, 189, 190, 192, 195, 196, 198, 199, 200, 201, 202, 203, 206, 208, 209, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 232, 233, 234, 236, 238, 240, 243, 246, 247, 248, 249, 250, 252, 255, 259, 261, 263, 264, 265, 266, 269, 275, 279, 281, 284, 285, 287, 289, 290, 291, 292, 294, 298, 299, 302, 304, 305, 306, 310, 311, 313, 315, 317, 318, 319, 323, 324, 326, 327, 330, 331, 333, 338, 339, 342, 347, 353, 354, 355, 356, 361, 363, 365, 368, 369, 370, 372, 373, 376, 378, 379, 382, 383, 384, 385, 388, 392, 393, 396, 398, 399, 400, 401, 404, 407, 408, 409, 410, 413, 414, 415, 417, 419, 420, 421, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 513, 514, 515, 516, 517, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 608, 610, 611, 615, 616, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 703, 704, 706, 710, 711, 713, 717, 719, 720, 721, 722, 723, 726, 728, 729, 730, 732, 733, 734, 746, 747, 749, 753, 755, 756, 761, 775, 776, 777, 779, 780, 781, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 916, 917, 918, 928, 929, 943, 946, 951, 952, 954, 955, 956, 957, 958, 961, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1010, 1011, 1013, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "mine": [0, 261, 348, 371, 402, 413, 437, 504, 556, 713, 726, 732, 775, 976, 980, 986, 992], "108": [0, 8, 1023], "122": [0, 114, 157, 165, 171, 234, 382, 981], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 115, 117, 118, 119, 120, 125, 126, 128, 130, 140, 141, 149, 152, 158, 165, 169, 171, 172, 173, 184, 195, 201, 202, 204, 214, 221, 222, 223, 229, 233, 246, 252, 259, 263, 267, 268, 276, 287, 288, 297, 299, 305, 307, 308, 309, 310, 319, 325, 331, 333, 334, 347, 348, 354, 355, 362, 371, 373, 376, 381, 384, 385, 387, 388, 399, 400, 401, 402, 406, 408, 409, 410, 411, 412, 437, 440, 442, 443, 445, 462, 475, 476, 477, 546, 547, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 637, 663, 664, 672, 682, 685, 686, 718, 723, 734, 738, 748, 781, 782, 797, 799, 832, 833, 837, 866, 867, 871, 873, 894, 896, 897, 900, 901, 902, 903, 949, 969, 974, 975, 976, 977, 979, 980, 983, 984, 986, 988, 990, 992, 995, 996, 997, 1000, 1001, 1006, 1007, 1009, 1015, 1022, 1023, 1025, 1026, 1030, 1033, 1034, 1035, 1036, 1037], "qualiti": [0, 6, 20, 24, 37, 46, 48, 49, 58, 98, 121, 170, 206, 255, 259, 268, 269, 270, 376, 384, 387, 389, 396, 397, 401, 402, 404, 407, 445, 455, 462, 467, 550, 551, 552, 553, 557, 558, 735, 803, 884, 885, 900, 901, 902, 903, 929, 975, 977, 985, 992, 996, 1000, 1001, 1004, 1010, 1011, 1017], "png": [0, 32, 904], "svg": 0, "logo": [0, 406, 796], "avail": [0, 5, 11, 12, 13, 41, 56, 57, 98, 120, 123, 124, 149, 152, 157, 161, 169, 170, 171, 189, 200, 208, 218, 222, 236, 239, 258, 259, 264, 265, 268, 286, 287, 288, 294, 308, 313, 314, 315, 316, 318, 319, 325, 327, 358, 362, 370, 371, 373, 374, 375, 376, 377, 381, 385, 388, 389, 392, 396, 399, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 440, 443, 444, 445, 446, 462, 463, 464, 465, 466, 467, 468, 469, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 501, 528, 542, 548, 549, 550, 551, 552, 553, 557, 558, 581, 584, 586, 587, 603, 604, 625, 626, 650, 658, 663, 665, 666, 667, 669, 682, 689, 692, 724, 725, 789, 792, 793, 803, 814, 815, 820, 821, 823, 824, 825, 826, 838, 849, 850, 852, 859, 868, 871, 876, 880, 885, 936, 941, 948, 970, 974, 977, 979, 980, 981, 982, 983, 986, 990, 993, 994, 995, 999, 1000, 1001, 1004, 1006, 1010, 1015, 1017, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1038], "doc": [0, 4, 8, 19, 347, 349, 363, 374, 376, 380, 381, 384, 389, 392, 395, 396, 410, 581, 582, 584, 770, 773, 782, 783, 815, 1015, 1022, 1026, 1036], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 370, 373, 375, 376, 377, 379, 380, 382, 384, 385, 387, 388, 392, 396, 399, 403, 407, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 977, 990, 996, 1000, 1004, 1014, 1015, 1032, 1036], "directori": [0, 8, 283, 370, 374, 376, 378, 382, 384, 389, 392, 403, 434, 438, 443, 479, 492, 852, 853, 1036], "driven": [0, 1004], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 103, 115, 117, 118, 122, 125, 126, 132, 146, 149, 152, 157, 158, 171, 172, 181, 189, 200, 204, 222, 225, 226, 229, 235, 236, 261, 268, 275, 279, 281, 286, 298, 303, 315, 342, 347, 348, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 378, 382, 384, 387, 389, 393, 396, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 433, 436, 440, 442, 444, 447, 452, 489, 501, 525, 544, 560, 574, 575, 576, 582, 599, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 623, 625, 626, 631, 636, 648, 649, 665, 680, 685, 688, 693, 755, 757, 789, 792, 793, 803, 815, 819, 820, 831, 849, 850, 855, 864, 865, 870, 894, 895, 897, 908, 949, 969, 970, 973, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 990, 994, 995, 996, 1006, 1010, 1013, 1031, 1032, 1034, 1035, 1038], "institut": [0, 373, 983], "privat": [0, 380, 389, 390, 908, 1004, 1022, 1030, 1032, 1033, 1035, 1036], "grant": [0, 376], "assur": [0, 389, 787, 788, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "sustain": 0, "like": [0, 4, 12, 19, 52, 55, 58, 60, 70, 89, 92, 98, 103, 105, 109, 112, 114, 119, 125, 128, 152, 158, 170, 180, 200, 252, 261, 264, 265, 268, 269, 275, 290, 300, 303, 308, 309, 313, 325, 334, 347, 348, 358, 362, 364, 368, 370, 371, 374, 375, 376, 378, 380, 383, 384, 385, 387, 388, 389, 396, 398, 400, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 508, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 572, 574, 575, 576, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 917, 918, 926, 931, 934, 943, 944, 948, 951, 952, 953, 965, 967, 969, 972, 974, 975, 976, 977, 980, 982, 983, 984, 986, 987, 990, 995, 996, 1000, 1001, 1003, 1004, 1006, 1013, 1015, 1019, 1022, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038], "thank": [0, 4, 17, 25, 55, 86, 172, 176, 200, 270, 347, 348, 375, 384, 1004, 1022, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "funder": 0, "member": [0, 347, 348, 371, 376, 379, 390, 402, 417, 435, 439, 441, 444, 446, 485, 548, 549, 556, 574, 651, 652, 659, 661, 669, 670, 671, 697, 698, 708, 710, 723, 728, 729, 749, 778, 785, 789, 892, 976, 983, 1006, 1022, 1034, 1037], "consortium": [0, 1004], "foundat": [0, 132, 376, 400, 983], "face": [0, 3, 15, 36, 53, 68, 94, 98, 107, 120, 167, 228, 244, 369, 376, 380, 402, 407, 409, 411, 442, 465, 486, 487, 488, 514, 525, 526, 530, 532, 533, 534, 536, 551, 577, 650, 666, 690, 706, 803, 818, 835, 872, 897, 915, 983, 996, 997, 998, 1009, 1014, 1017, 1022, 1030], "2022": [0, 363, 409, 698, 990, 1036, 1037], "microsoft": [0, 12, 374, 377, 392], "m\u00fcller": [0, 31, 304, 305, 390, 407, 528, 858, 984, 990, 994, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036], "2020": [0, 371, 1032, 1033, 1034, 1035], "quansight": 0, "lab": [0, 371, 461, 529, 890, 1004, 1033], "2021": [0, 374, 376, 392, 664, 1034, 1035], "columbia": 0, "univers": [0, 160, 347, 371, 373, 379, 402, 407, 410, 583, 780, 827, 831, 887, 976, 978, 980, 982], "2016": [0, 226, 370, 402, 969, 1027, 1028], "sydnei": 0, "2017": [0, 261, 370, 400, 402, 413, 437, 980, 1028, 1029], "receiv": [0, 19, 138, 167, 236, 254, 258, 277, 349, 358, 376, 378, 384, 389, 406, 409, 497, 651, 695, 699, 701, 719, 774, 780, 781, 808, 818, 820, 821, 859, 897, 981, 984, 985, 994, 1032, 1033], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 106, 112, 113, 118, 121, 123, 124, 125, 127, 132, 145, 165, 170, 176, 186, 200, 208, 218, 262, 264, 281, 300, 308, 319, 337, 348, 358, 363, 374, 379, 381, 382, 384, 385, 387, 389, 390, 396, 401, 407, 409, 411, 442, 443, 524, 525, 527, 530, 531, 532, 534, 535, 536, 539, 547, 550, 551, 552, 553, 554, 555, 557, 558, 603, 604, 636, 645, 657, 659, 660, 661, 665, 666, 667, 668, 669, 671, 678, 680, 685, 721, 722, 776, 779, 780, 841, 849, 850, 866, 868, 880, 900, 901, 903, 929, 974, 976, 977, 980, 983, 984, 994, 995, 996, 999, 1000, 1001, 1004, 1013, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 67, 106, 129, 134, 169, 170, 184, 185, 195, 200, 201, 202, 204, 218, 224, 233, 239, 258, 261, 264, 268, 270, 271, 303, 314, 315, 319, 347, 356, 362, 371, 375, 376, 378, 383, 385, 389, 390, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 414, 431, 432, 435, 439, 440, 442, 457, 460, 487, 491, 493, 497, 501, 502, 503, 518, 520, 522, 523, 524, 526, 528, 529, 530, 535, 538, 539, 541, 542, 543, 550, 554, 555, 556, 557, 585, 586, 587, 588, 589, 591, 592, 593, 599, 603, 604, 613, 625, 636, 639, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 662, 665, 666, 667, 668, 670, 673, 674, 675, 676, 677, 680, 683, 691, 693, 695, 700, 702, 705, 706, 708, 711, 713, 716, 719, 721, 722, 723, 727, 728, 730, 731, 732, 733, 734, 735, 736, 744, 746, 750, 758, 774, 775, 776, 779, 780, 781, 787, 788, 792, 793, 815, 832, 833, 838, 855, 856, 859, 865, 868, 871, 876, 880, 884, 885, 887, 888, 892, 893, 896, 897, 898, 900, 902, 909, 927, 929, 945, 947, 971, 972, 976, 978, 980, 981, 983, 984, 985, 987, 990, 995, 1011, 1013, 1015, 1023, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "It": [0, 4, 7, 8, 9, 16, 20, 25, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 105, 112, 115, 117, 118, 121, 125, 132, 149, 157, 158, 159, 164, 165, 170, 171, 172, 180, 184, 188, 189, 197, 200, 204, 214, 217, 218, 221, 222, 229, 234, 236, 256, 257, 259, 261, 262, 264, 267, 268, 281, 284, 287, 288, 289, 291, 292, 294, 303, 307, 308, 310, 313, 319, 330, 334, 342, 347, 348, 349, 356, 358, 362, 363, 364, 369, 371, 373, 374, 376, 378, 380, 381, 382, 384, 385, 387, 388, 389, 392, 393, 396, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 427, 430, 431, 434, 435, 436, 437, 438, 440, 441, 442, 445, 452, 455, 460, 461, 462, 467, 471, 478, 480, 489, 501, 508, 517, 526, 528, 529, 531, 533, 534, 542, 543, 546, 547, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 582, 589, 595, 599, 600, 601, 604, 607, 608, 612, 613, 615, 616, 620, 623, 624, 625, 626, 634, 635, 636, 639, 640, 643, 645, 646, 647, 648, 651, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 667, 669, 670, 671, 674, 675, 676, 677, 680, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 697, 701, 702, 703, 709, 715, 726, 734, 735, 739, 750, 751, 754, 757, 773, 775, 789, 791, 792, 793, 795, 801, 802, 803, 811, 813, 816, 819, 828, 829, 834, 835, 836, 838, 841, 842, 843, 844, 848, 849, 850, 854, 855, 856, 860, 861, 862, 866, 869, 871, 881, 884, 885, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 916, 929, 938, 948, 951, 954, 956, 957, 958, 959, 960, 961, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 993, 994, 995, 996, 1000, 1004, 1006, 1012, 1013, 1014, 1015, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 55, 60, 81, 95, 114, 119, 120, 130, 132, 152, 158, 170, 171, 179, 186, 188, 189, 192, 201, 204, 209, 222, 226, 230, 231, 236, 251, 261, 262, 263, 267, 291, 294, 299, 303, 307, 313, 314, 316, 318, 332, 339, 347, 348, 352, 353, 358, 362, 364, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 387, 388, 389, 391, 392, 393, 396, 398, 399, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 423, 430, 433, 435, 436, 437, 439, 440, 442, 443, 445, 452, 453, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 486, 487, 489, 491, 494, 525, 526, 527, 528, 531, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 586, 587, 594, 598, 603, 604, 620, 625, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 683, 687, 692, 704, 727, 733, 756, 766, 770, 780, 782, 784, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 803, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 849, 850, 852, 855, 857, 858, 859, 862, 863, 864, 867, 869, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 918, 923, 939, 956, 957, 958, 969, 970, 972, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1006, 1010, 1013, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "2012": [0, 81, 400, 409, 548, 549, 556, 632, 735, 969, 973, 980, 999, 1022], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 362, 363, 364, 369, 371, 374, 376, 381, 384, 387, 389, 390, 392, 398, 401, 402, 404, 406, 407, 410, 434, 438, 440, 442, 452, 481, 482, 485, 489, 490, 493, 494, 495, 496, 497, 498, 500, 503, 528, 530, 534, 552, 553, 560, 561, 625, 641, 643, 647, 662, 673, 714, 715, 720, 737, 738, 740, 742, 743, 745, 777, 787, 788, 800, 829, 918, 969, 976, 979, 982, 983, 987, 990, 993, 1001, 1013, 1022, 1026, 1028, 1030, 1032, 1033, 1035, 1036, 1039], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 389, 390, 392, 393, 398, 399, 400, 401, 402, 404, 405, 407, 409, 410, 412, 413, 430, 434, 436, 437, 438, 439, 440, 443, 445, 448, 450, 451, 452, 454, 455, 456, 457, 458, 460, 461, 465, 489, 492, 494, 512, 516, 527, 529, 531, 533, 540, 555, 560, 561, 562, 563, 583, 603, 612, 620, 621, 622, 623, 627, 632, 633, 636, 639, 643, 645, 647, 653, 655, 657, 659, 660, 666, 669, 670, 671, 678, 679, 683, 685, 687, 694, 784, 787, 788, 789, 791, 792, 793, 794, 796, 798, 803, 804, 805, 808, 810, 813, 814, 815, 816, 817, 820, 822, 827, 828, 829, 830, 831, 832, 833, 840, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 856, 857, 859, 862, 865, 866, 867, 871, 876, 884, 885, 889, 890, 894, 897, 898, 906, 931, 946, 969, 970, 972, 973, 976, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 990, 992, 993, 994, 995, 996, 1000, 1004, 1006, 1011, 1013, 1014, 1015, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "host": [0, 118, 319, 347, 371, 376, 380, 384, 385, 885, 948, 1015, 1038], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 72, 86, 97, 98, 100, 103, 115, 117, 118, 121, 122, 126, 128, 134, 144, 164, 165, 167, 169, 170, 171, 172, 176, 179, 193, 200, 204, 218, 221, 222, 223, 225, 229, 230, 231, 233, 235, 236, 240, 248, 251, 256, 258, 261, 262, 263, 270, 271, 286, 287, 288, 302, 303, 307, 308, 310, 311, 313, 314, 316, 322, 334, 341, 344, 347, 348, 352, 356, 358, 362, 368, 369, 371, 372, 373, 376, 378, 380, 381, 382, 384, 385, 388, 389, 390, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 430, 436, 437, 439, 440, 441, 442, 443, 445, 450, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481, 489, 490, 496, 526, 527, 528, 531, 534, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 587, 590, 595, 603, 604, 605, 606, 613, 620, 621, 623, 628, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 683, 685, 689, 692, 697, 711, 755, 766, 770, 777, 782, 789, 790, 791, 792, 793, 794, 795, 796, 798, 803, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 847, 849, 850, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 871, 872, 873, 880, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 923, 969, 970, 972, 973, 974, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1006, 1010, 1013, 1014, 1017, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1038], "event": [0, 4, 16, 200, 218, 264, 400, 402, 581, 582, 629, 827, 917, 976, 981, 982, 1000, 1004, 1028], "pari": [0, 373, 403, 459, 756, 860, 991, 1036], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 102, 105, 123, 124, 125, 126, 149, 165, 171, 181, 192, 194, 200, 201, 211, 212, 224, 225, 229, 230, 246, 249, 250, 256, 262, 272, 286, 289, 291, 298, 303, 305, 306, 317, 324, 332, 334, 335, 336, 341, 348, 349, 371, 372, 373, 381, 401, 402, 404, 405, 407, 408, 409, 415, 433, 435, 436, 439, 440, 441, 442, 445, 447, 452, 453, 454, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 494, 505, 517, 527, 528, 534, 537, 543, 599, 602, 603, 604, 625, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 683, 687, 787, 857, 858, 861, 870, 872, 882, 883, 892, 893, 974, 976, 977, 979, 987, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036], "scienc": [0, 38, 80, 149, 160, 370, 373, 387, 402, 433, 447, 531, 533, 540, 681, 682, 686, 839, 970, 972, 976, 977, 980, 983, 992, 1001, 1004, 1009, 1030], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 91, 95, 98, 100, 101, 105, 117, 118, 125, 128, 132, 135, 148, 149, 152, 159, 160, 164, 169, 170, 171, 172, 173, 176, 179, 180, 184, 189, 190, 192, 193, 194, 196, 200, 202, 209, 210, 215, 218, 223, 229, 236, 237, 248, 251, 257, 258, 259, 261, 262, 264, 265, 268, 269, 270, 271, 279, 281, 286, 300, 304, 305, 308, 309, 313, 315, 316, 317, 325, 333, 334, 343, 347, 348, 349, 352, 356, 358, 362, 363, 364, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 396, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 434, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 449, 450, 453, 455, 457, 462, 467, 480, 481, 483, 484, 485, 486, 487, 488, 489, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 507, 527, 532, 533, 536, 540, 544, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 574, 576, 577, 581, 582, 583, 584, 603, 604, 608, 609, 613, 620, 623, 625, 626, 627, 628, 636, 640, 641, 642, 643, 647, 650, 651, 652, 654, 659, 661, 662, 664, 666, 667, 668, 669, 671, 673, 681, 685, 688, 692, 696, 702, 713, 726, 742, 743, 746, 755, 763, 766, 770, 771, 772, 773, 775, 780, 782, 783, 786, 787, 788, 789, 792, 793, 795, 796, 797, 799, 801, 803, 807, 808, 811, 813, 815, 816, 818, 819, 820, 821, 822, 824, 825, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 848, 852, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 871, 872, 873, 876, 878, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 908, 918, 921, 931, 951, 969, 970, 972, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 994, 995, 996, 997, 999, 1000, 1004, 1006, 1010, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "2014": [0, 52, 370, 407, 409, 412, 523, 600, 601, 615, 616, 651, 685, 849, 850, 928, 929, 977, 984, 1004, 1025], "2015": [0, 171, 370, 412, 701, 714, 715, 716, 849, 850, 980, 987, 1004, 1026, 1027], "50": [0, 4, 7, 10, 14, 16, 19, 24, 32, 33, 38, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 105, 112, 115, 118, 125, 130, 131, 149, 153, 155, 156, 157, 158, 169, 170, 171, 180, 184, 195, 200, 203, 207, 208, 212, 214, 216, 218, 221, 225, 226, 232, 233, 235, 243, 256, 261, 263, 264, 274, 281, 300, 303, 307, 315, 317, 323, 325, 327, 332, 341, 342, 348, 371, 373, 376, 381, 406, 409, 410, 411, 414, 435, 466, 493, 497, 516, 526, 532, 537, 546, 547, 562, 586, 587, 608, 610, 651, 652, 659, 661, 663, 669, 670, 671, 685, 706, 789, 803, 821, 841, 892, 901, 975, 976, 980, 981, 983, 986, 990, 1022], "2018": [0, 200, 218, 410, 443, 969, 980, 998, 1004, 1029, 1030], "nyu": [0, 123, 182, 841], "moor": [0, 727, 980, 1004], "environ": [0, 12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 362, 371, 373, 374, 376, 382, 384, 387, 392, 396, 398, 403, 492, 1001, 1004, 1029, 1030], "student": [0, 97, 261, 977, 1001, 1004], "t\u00e9l\u00e9com": [0, 998], "paristech": [0, 24, 25, 42, 229, 998], "rv": [0, 123, 265, 303, 793, 801, 803, 969, 1022, 1023, 1026, 1027, 1028, 1029, 1030], "thierri": [0, 246, 248, 1004, 1028, 1029, 1036], "guillemot": [0, 246, 248, 1028, 1029], "labex": 0, "digicosm": 0, "goix": [0, 1026, 1028, 1029, 1030, 1031], "mathurin": [0, 1033, 1035, 1036], "massia": [0, 1033, 1035, 1036], "2019": [0, 171, 374, 402, 445, 455, 685, 977, 987, 990, 1030, 1031, 1032], "dure": [0, 4, 5, 12, 50, 55, 58, 72, 75, 86, 100, 116, 122, 129, 146, 152, 157, 170, 171, 173, 189, 201, 208, 259, 263, 281, 315, 316, 362, 364, 374, 376, 378, 381, 389, 390, 402, 403, 407, 409, 410, 412, 413, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 452, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 606, 607, 608, 610, 612, 613, 615, 616, 618, 620, 621, 622, 623, 625, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 693, 781, 787, 788, 789, 792, 793, 803, 813, 814, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 880, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 970, 972, 976, 977, 983, 990, 992, 996, 1010, 1015, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "phd": [0, 402, 409, 1001, 1004], "chan": [0, 830, 872], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 58, 60, 64, 68, 81, 126, 133, 134, 135, 153, 158, 167, 170, 180, 193, 215, 221, 222, 226, 245, 247, 248, 253, 261, 281, 315, 324, 334, 348, 358, 363, 371, 376, 378, 384, 385, 387, 389, 402, 407, 409, 411, 412, 414, 435, 436, 440, 441, 442, 443, 444, 445, 446, 452, 453, 454, 455, 471, 505, 508, 524, 525, 526, 530, 531, 533, 536, 538, 539, 540, 541, 546, 547, 552, 553, 586, 600, 601, 603, 604, 612, 613, 620, 633, 638, 639, 640, 641, 645, 646, 651, 653, 654, 655, 656, 659, 660, 661, 662, 664, 669, 670, 671, 673, 674, 677, 683, 684, 685, 687, 688, 787, 788, 822, 841, 848, 849, 850, 888, 915, 928, 929, 949, 954, 955, 972, 976, 977, 984, 985, 986, 994, 996, 1000, 1012, 1014, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "were": [0, 4, 32, 70, 71, 74, 80, 81, 118, 122, 125, 146, 149, 157, 165, 200, 201, 204, 230, 270, 272, 299, 300, 308, 314, 315, 317, 318, 319, 325, 347, 349, 356, 358, 370, 371, 373, 376, 377, 380, 387, 389, 393, 399, 403, 409, 410, 457, 460, 461, 489, 554, 555, 581, 584, 595, 792, 793, 808, 816, 889, 890, 926, 969, 980, 981, 996, 1003, 1014, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "through": [0, 7, 117, 122, 149, 160, 170, 204, 221, 234, 236, 256, 261, 264, 286, 307, 308, 332, 339, 349, 356, 373, 374, 376, 378, 383, 385, 389, 390, 392, 393, 402, 405, 407, 409, 411, 412, 439, 457, 460, 465, 528, 550, 551, 554, 557, 558, 559, 574, 586, 587, 590, 640, 644, 646, 648, 651, 652, 654, 656, 658, 661, 669, 670, 681, 684, 713, 795, 811, 868, 880, 884, 885, 900, 901, 902, 903, 935, 938, 969, 970, 977, 980, 982, 983, 984, 986, 988, 990, 994, 995, 996, 1004, 1006, 1013, 1015, 1022, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1039], "program": [0, 50, 149, 348, 358, 363, 364, 373, 374, 376, 382, 387, 501, 628, 663, 882, 883, 976, 995, 996, 1000, 1001, 1022, 1024], "immanuel": [0, 1022, 1023, 1027], "bayer": [0, 1022, 1023, 1027], "kemal": [0, 20, 21, 1024, 1025], "eren": [0, 20, 21, 1024, 1025], "tr\u00e9segni": [0, 1024], "hamzeh": [0, 1025, 1026], "alsalhi": [0, 1025, 1026], "issam": [0, 297, 1028], "laradji": [0, 297, 1028], "maheshakya": [0, 1025, 1026, 1027], "wijewardena": [0, 1025, 1026, 1027], "xue": [0, 1026, 1027, 1028, 1030, 1031, 1034], "nelson": [0, 1028, 1029, 1034], "yenchen": [0, 1028], "lin": [0, 527, 651, 995, 1027, 1028, 1029, 1030], "neurodebian": 0, "debian": [0, 362, 374, 382], "packag": [0, 46, 53, 164, 169, 170, 236, 251, 281, 363, 369, 370, 373, 374, 376, 377, 378, 380, 382, 385, 387, 389, 392, 404, 409, 410, 445, 471, 639, 640, 970, 976, 979, 983, 990, 996, 1004, 1009, 1022, 1028, 1030, 1031, 1032], "dr": [0, 149, 373, 402, 1036], "jame": [0, 373, 406, 822, 981, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1038], "haxbi": 0, "dartmouth": 0, "colleg": [0, 169], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 90, 95, 113, 114, 125, 128, 129, 132, 133, 145, 152, 154, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 172, 173, 176, 179, 181, 183, 184, 188, 189, 190, 194, 195, 200, 201, 204, 208, 209, 214, 217, 218, 221, 223, 229, 233, 236, 239, 247, 248, 249, 255, 256, 261, 262, 263, 264, 267, 269, 284, 287, 292, 298, 299, 303, 308, 314, 315, 316, 317, 318, 319, 330, 331, 333, 334, 342, 344, 347, 348, 349, 356, 358, 362, 363, 364, 369, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 392, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 425, 430, 436, 437, 440, 442, 444, 446, 452, 456, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 489, 492, 501, 502, 508, 516, 517, 526, 527, 529, 531, 534, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 574, 575, 581, 583, 584, 587, 599, 602, 603, 604, 625, 626, 628, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 682, 683, 685, 686, 690, 691, 693, 694, 695, 700, 701, 708, 713, 718, 719, 730, 731, 732, 738, 746, 748, 749, 755, 774, 776, 779, 780, 781, 784, 787, 789, 790, 791, 792, 793, 796, 798, 803, 807, 808, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 913, 948, 969, 970, 972, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 990, 993, 994, 995, 996, 999, 1000, 1001, 1003, 1004, 1006, 1011, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "particip": [0, 375, 376, 390, 1004], "could": [0, 4, 9, 13, 27, 37, 42, 53, 71, 72, 95, 98, 113, 114, 122, 125, 146, 152, 157, 165, 169, 170, 171, 200, 201, 204, 209, 218, 225, 234, 235, 236, 255, 261, 284, 289, 292, 316, 330, 331, 347, 352, 364, 376, 382, 384, 389, 392, 396, 400, 406, 409, 410, 414, 467, 526, 531, 600, 601, 622, 664, 791, 796, 798, 969, 970, 976, 977, 987, 988, 990, 995, 1001, 1014, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "attend": 0, "psf": [0, 376], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 55, 71, 78, 95, 115, 118, 129, 152, 170, 171, 172, 200, 217, 218, 234, 236, 261, 262, 263, 264, 266, 267, 268, 270, 271, 279, 313, 334, 342, 347, 348, 358, 362, 363, 364, 369, 370, 371, 374, 376, 377, 378, 379, 380, 382, 384, 387, 388, 389, 392, 396, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 412, 414, 416, 425, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 455, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 489, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 702, 714, 715, 716, 720, 748, 770, 775, 777, 780, 787, 788, 789, 791, 792, 793, 795, 801, 802, 803, 807, 808, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 910, 912, 913, 916, 921, 948, 951, 954, 969, 972, 975, 976, 977, 979, 980, 981, 982, 983, 988, 990, 995, 996, 1001, 1004, 1006, 1013, 1014, 1015, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038], "tinyclu": 0, "french": [0, 218, 309], "associ": [0, 11, 24, 25, 80, 112, 152, 169, 170, 204, 249, 309, 322, 324, 347, 384, 402, 404, 406, 407, 409, 410, 439, 442, 462, 463, 464, 465, 466, 467, 468, 469, 486, 487, 488, 517, 550, 554, 557, 598, 599, 623, 638, 651, 652, 659, 661, 667, 668, 669, 682, 688, 692, 723, 731, 815, 835, 843, 857, 869, 881, 889, 898, 900, 902, 918, 979, 980, 983, 990, 993, 1004, 1014, 1022, 1034, 1038], "fond": [0, 1004], "de": [0, 12, 24, 25, 26, 27, 74, 116, 132, 152, 153, 155, 156, 157, 158, 159, 161, 191, 234, 235, 309, 324, 342, 373, 628, 681, 756, 976, 977, 1001, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 55, 62, 66, 72, 112, 120, 125, 132, 146, 149, 157, 164, 171, 172, 189, 200, 201, 202, 218, 222, 234, 255, 258, 261, 262, 264, 270, 334, 342, 348, 356, 362, 371, 373, 376, 381, 382, 384, 387, 390, 402, 404, 407, 410, 412, 486, 487, 493, 497, 503, 639, 640, 892, 970, 976, 977, 980, 985, 986, 987, 1001, 1004, 1011, 1013, 1014, 1022], "our": [0, 4, 5, 7, 11, 12, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 111, 112, 113, 119, 122, 125, 126, 144, 149, 152, 157, 159, 169, 170, 171, 172, 173, 200, 204, 218, 223, 225, 236, 255, 261, 264, 267, 268, 299, 303, 309, 314, 316, 327, 331, 337, 338, 339, 342, 347, 348, 349, 358, 363, 375, 380, 381, 384, 387, 388, 389, 390, 393, 402, 406, 409, 410, 413, 437, 443, 556, 637, 685, 701, 713, 718, 730, 748, 834, 835, 836, 838, 840, 842, 843, 844, 969, 970, 976, 977, 980, 986, 990, 993, 994, 995, 1001, 1004, 1006, 1013, 1014, 1015, 1029, 1030, 1032, 1033, 1036, 1037, 1039], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 368, 373, 374, 377, 378, 380, 384, 387, 388, 389, 390, 392, 393, 396, 399, 400, 402, 403, 405, 406, 407, 411, 412, 430, 494, 528, 532, 534, 536, 539, 552, 553, 604, 609, 614, 617, 631, 632, 633, 634, 649, 659, 661, 666, 669, 680, 682, 685, 686, 702, 789, 812, 820, 821, 822, 824, 830, 838, 849, 852, 853, 872, 969, 974, 976, 977, 979, 980, 981, 987, 988, 994, 995, 1001, 1004, 1006, 1017, 1022, 1026, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 109, 117, 118, 120, 121, 125, 134, 135, 149, 157, 158, 160, 167, 169, 170, 171, 179, 184, 186, 192, 193, 194, 200, 201, 202, 203, 204, 209, 211, 215, 217, 218, 221, 222, 229, 235, 236, 240, 243, 247, 249, 251, 259, 262, 263, 264, 265, 267, 268, 269, 271, 273, 279, 281, 286, 299, 303, 304, 308, 313, 314, 315, 316, 318, 319, 322, 324, 325, 326, 331, 334, 339, 343, 347, 348, 349, 353, 356, 358, 362, 363, 364, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 387, 388, 389, 390, 393, 398, 399, 400, 401, 402, 403, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 424, 425, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 501, 502, 508, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 576, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 698, 702, 706, 707, 708, 709, 710, 711, 713, 714, 715, 718, 720, 721, 722, 724, 725, 727, 728, 729, 730, 737, 738, 740, 742, 743, 745, 748, 753, 761, 766, 770, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 799, 801, 803, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 913, 914, 918, 920, 921, 922, 923, 934, 943, 948, 955, 964, 969, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 985, 987, 990, 993, 994, 995, 996, 1000, 1001, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "handl": [0, 4, 71, 118, 122, 128, 132, 176, 184, 235, 236, 263, 268, 270, 281, 288, 309, 313, 347, 349, 362, 368, 370, 374, 376, 377, 378, 385, 387, 389, 393, 409, 410, 489, 537, 570, 574, 575, 578, 579, 581, 582, 584, 603, 628, 639, 640, 645, 651, 652, 653, 654, 655, 661, 668, 669, 671, 674, 713, 780, 856, 865, 866, 892, 897, 904, 930, 937, 940, 977, 980, 981, 982, 983, 986, 988, 995, 996, 1000, 1001, 1004, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 111, 114, 122, 129, 130, 132, 145, 146, 148, 156, 158, 165, 167, 170, 171, 172, 178, 179, 184, 186, 193, 194, 199, 201, 202, 206, 215, 216, 218, 219, 224, 225, 230, 231, 232, 233, 235, 246, 248, 252, 254, 255, 261, 270, 277, 281, 285, 300, 303, 305, 307, 308, 314, 315, 316, 317, 319, 326, 329, 331, 336, 337, 342, 343, 345, 347, 348, 349, 356, 358, 362, 363, 368, 371, 372, 376, 377, 378, 381, 382, 384, 385, 387, 389, 390, 400, 401, 402, 403, 406, 408, 409, 410, 411, 412, 414, 430, 434, 438, 439, 443, 445, 449, 455, 456, 457, 458, 460, 461, 481, 489, 490, 496, 497, 501, 519, 525, 528, 529, 531, 533, 537, 540, 542, 544, 545, 546, 550, 551, 552, 553, 554, 555, 557, 558, 559, 565, 581, 582, 584, 585, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 628, 631, 636, 643, 645, 650, 651, 652, 653, 657, 658, 659, 661, 662, 665, 669, 670, 671, 678, 679, 680, 681, 682, 683, 684, 685, 687, 691, 692, 695, 699, 700, 705, 708, 710, 712, 713, 718, 719, 720, 727, 729, 731, 732, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 774, 777, 780, 781, 784, 787, 788, 789, 790, 794, 796, 797, 798, 799, 801, 807, 814, 818, 821, 840, 842, 843, 844, 847, 852, 853, 855, 856, 857, 860, 864, 865, 866, 867, 868, 869, 871, 872, 879, 880, 881, 882, 883, 885, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 913, 927, 929, 933, 935, 943, 969, 970, 971, 972, 973, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 991, 992, 993, 994, 995, 996, 1001, 1013, 1014, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "profit": 0, "organ": [0, 11, 70, 80, 347, 370, 375, 376, 390, 840, 1000], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 92, 97, 99, 100, 101, 106, 112, 115, 116, 117, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 138, 144, 146, 148, 149, 152, 153, 157, 158, 159, 164, 165, 169, 170, 171, 173, 176, 179, 180, 184, 189, 193, 200, 201, 202, 204, 206, 208, 214, 216, 217, 218, 221, 222, 223, 225, 229, 230, 233, 234, 235, 236, 237, 239, 240, 246, 247, 251, 252, 255, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 279, 281, 286, 287, 288, 298, 303, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 322, 324, 325, 326, 334, 344, 347, 348, 349, 352, 356, 358, 362, 363, 364, 368, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 455, 456, 457, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 480, 516, 524, 525, 526, 527, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 572, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 610, 612, 615, 620, 621, 622, 623, 625, 626, 627, 633, 635, 636, 637, 640, 641, 642, 645, 647, 648, 649, 651, 652, 654, 659, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 702, 709, 710, 712, 713, 715, 717, 718, 726, 727, 728, 729, 735, 738, 748, 750, 770, 771, 772, 773, 774, 775, 781, 787, 788, 789, 792, 793, 794, 795, 797, 799, 803, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 849, 852, 856, 859, 863, 865, 866, 867, 870, 871, 872, 873, 874, 876, 884, 885, 887, 888, 889, 892, 894, 897, 898, 900, 901, 902, 903, 904, 908, 921, 924, 928, 929, 931, 936, 937, 940, 948, 949, 952, 955, 961, 964, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996, 999, 1000, 1001, 1004, 1006, 1008, 1010, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "manag": [0, 86, 243, 361, 370, 374, 377, 378, 380, 384, 387, 389, 390, 409, 443, 461, 619, 890, 948, 974, 996, 1000, 1001, 1004, 1015, 1017, 1035, 1038], "board": 0, "scipi": [0, 6, 13, 17, 19, 34, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 101, 103, 124, 152, 170, 173, 186, 190, 202, 247, 251, 252, 258, 261, 269, 273, 281, 286, 291, 300, 314, 315, 322, 323, 362, 370, 371, 374, 376, 378, 382, 385, 387, 388, 389, 392, 395, 402, 407, 410, 443, 444, 445, 446, 450, 455, 456, 489, 496, 501, 525, 527, 528, 534, 537, 574, 575, 578, 579, 581, 582, 603, 604, 641, 642, 646, 650, 651, 652, 656, 659, 661, 662, 663, 665, 667, 669, 670, 671, 673, 677, 680, 684, 685, 688, 752, 755, 770, 771, 772, 773, 782, 783, 793, 801, 803, 818, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 855, 864, 870, 871, 872, 875, 879, 882, 883, 892, 894, 895, 897, 898, 931, 951, 954, 969, 970, 976, 978, 981, 983, 984, 990, 994, 995, 999, 1001, 1009, 1011, 1014, 1015, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "mission": [0, 348, 1004], "foster": [0, 1030], "comput": [0, 4, 6, 7, 11, 13, 20, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 105, 111, 115, 119, 120, 124, 125, 126, 127, 148, 149, 152, 157, 159, 160, 164, 170, 171, 172, 173, 176, 180, 181, 184, 185, 186, 187, 188, 189, 200, 202, 204, 208, 214, 217, 218, 222, 225, 230, 232, 233, 235, 239, 240, 242, 257, 259, 261, 262, 263, 264, 268, 270, 272, 281, 283, 285, 287, 288, 290, 291, 294, 303, 313, 317, 318, 323, 325, 334, 342, 347, 348, 349, 356, 363, 364, 365, 370, 371, 373, 376, 381, 382, 383, 385, 387, 388, 389, 391, 392, 396, 397, 399, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 450, 452, 454, 455, 456, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 509, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 575, 578, 579, 582, 583, 584, 586, 587, 596, 597, 598, 599, 602, 603, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 721, 722, 723, 726, 728, 730, 731, 732, 734, 735, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 857, 858, 861, 862, 867, 868, 869, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 926, 927, 928, 929, 945, 946, 953, 955, 961, 969, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 992, 993, 994, 995, 996, 1000, 1001, 1004, 1010, 1011, 1014, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "particular": [0, 4, 11, 13, 37, 39, 40, 60, 71, 78, 92, 100, 104, 122, 125, 128, 156, 164, 170, 171, 200, 202, 208, 234, 239, 258, 262, 264, 270, 281, 290, 294, 303, 313, 314, 317, 348, 349, 358, 362, 370, 371, 374, 375, 376, 378, 380, 381, 382, 384, 385, 388, 389, 392, 402, 406, 407, 409, 410, 411, 412, 439, 462, 466, 489, 537, 556, 602, 646, 651, 656, 665, 667, 677, 680, 705, 720, 777, 824, 839, 911, 913, 970, 972, 974, 976, 980, 983, 984, 985, 986, 988, 990, 1001, 1004, 1014, 1022, 1025, 1029, 1030, 1031, 1033, 1035, 1036, 1037], "As": [0, 4, 7, 20, 25, 27, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 112, 113, 119, 122, 124, 126, 131, 144, 152, 157, 165, 170, 172, 176, 179, 182, 184, 189, 191, 200, 204, 208, 218, 226, 236, 249, 256, 258, 259, 261, 262, 264, 274, 279, 286, 304, 316, 325, 334, 348, 349, 352, 354, 355, 358, 362, 363, 371, 374, 375, 376, 378, 380, 381, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 439, 486, 547, 555, 559, 612, 625, 648, 649, 665, 667, 680, 727, 750, 756, 834, 835, 836, 838, 840, 871, 969, 974, 976, 977, 979, 980, 981, 983, 987, 990, 994, 995, 996, 1000, 1001, 1004, 1006, 1010, 1013, 1014, 1015, 1022, 1028, 1033, 1038], "fiscal": 0, "home": [0, 12, 27, 34, 53, 55, 114, 132, 156, 158, 160, 161, 169, 170, 179, 192, 209, 247, 251, 306, 313, 318, 326, 339, 353, 371, 374, 384, 392, 401, 479, 492, 672, 1004], "ensur": [0, 20, 41, 57, 82, 92, 112, 118, 119, 173, 200, 222, 256, 264, 299, 356, 358, 362, 363, 376, 378, 380, 381, 382, 390, 392, 393, 400, 402, 403, 406, 414, 462, 526, 527, 534, 604, 620, 689, 698, 774, 781, 813, 885, 912, 913, 929, 935, 946, 976, 977, 980, 990, 996, 1010, 1024, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "monei": [0, 218, 1004], "when": [0, 4, 9, 10, 11, 20, 24, 25, 26, 27, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 103, 115, 118, 121, 122, 123, 125, 128, 132, 133, 134, 146, 152, 164, 169, 170, 171, 172, 173, 179, 180, 184, 189, 191, 193, 197, 200, 202, 204, 205, 216, 229, 230, 231, 235, 236, 243, 247, 249, 257, 260, 261, 262, 263, 264, 268, 270, 271, 281, 283, 287, 288, 289, 303, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 324, 325, 327, 334, 337, 338, 342, 347, 348, 349, 352, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 392, 393, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 418, 425, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 482, 483, 484, 485, 489, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 508, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 571, 574, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 694, 695, 697, 698, 700, 701, 705, 706, 709, 719, 720, 721, 722, 724, 726, 727, 730, 734, 738, 740, 743, 746, 747, 749, 753, 755, 759, 760, 761, 763, 766, 770, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 788, 789, 792, 793, 794, 795, 803, 807, 808, 811, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 878, 879, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 911, 912, 913, 919, 923, 927, 928, 929, 930, 932, 933, 938, 941, 948, 949, 969, 970, 972, 974, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996, 1001, 1004, 1006, 1012, 1013, 1014, 1015, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 109, 118, 122, 124, 125, 126, 132, 149, 152, 157, 164, 165, 170, 188, 202, 217, 218, 222, 229, 232, 234, 236, 240, 246, 247, 251, 252, 259, 261, 263, 264, 266, 281, 283, 308, 313, 325, 334, 342, 347, 348, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 418, 430, 434, 438, 442, 458, 496, 534, 544, 565, 575, 576, 581, 582, 583, 584, 620, 628, 631, 632, 633, 635, 642, 659, 661, 664, 669, 672, 685, 713, 714, 715, 716, 773, 777, 787, 788, 789, 792, 793, 803, 804, 805, 813, 821, 824, 832, 833, 849, 852, 855, 859, 864, 865, 869, 887, 894, 897, 969, 970, 972, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 993, 994, 995, 996, 1001, 1004, 1012, 1013, 1014, 1015, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "keep": [0, 6, 42, 75, 98, 100, 118, 148, 164, 169, 170, 171, 172, 173, 184, 200, 201, 202, 208, 218, 251, 256, 259, 307, 308, 316, 323, 334, 347, 348, 352, 358, 362, 363, 368, 376, 380, 388, 389, 400, 402, 403, 404, 405, 406, 407, 425, 443, 458, 475, 476, 477, 478, 486, 487, 527, 533, 534, 537, 540, 547, 549, 551, 553, 555, 558, 561, 563, 588, 591, 593, 596, 604, 627, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 669, 670, 671, 672, 701, 807, 825, 826, 835, 843, 849, 850, 888, 893, 895, 898, 901, 903, 976, 981, 985, 988, 990, 1001, 1004, 1006, 1011, 1013, 1015, 1017, 1022, 1027, 1030, 1031, 1035, 1036, 1038], "while": [0, 4, 7, 8, 10, 12, 17, 20, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 112, 115, 118, 119, 129, 132, 149, 153, 158, 160, 161, 164, 169, 170, 171, 172, 176, 179, 181, 184, 189, 194, 200, 202, 204, 216, 229, 232, 233, 236, 237, 247, 248, 252, 255, 256, 260, 261, 262, 264, 268, 269, 270, 271, 272, 274, 283, 303, 304, 305, 308, 309, 310, 313, 316, 319, 331, 334, 347, 349, 356, 358, 363, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 382, 384, 385, 387, 389, 390, 396, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 437, 457, 460, 461, 476, 478, 489, 514, 525, 545, 550, 551, 552, 553, 557, 558, 559, 560, 561, 562, 563, 568, 575, 581, 582, 583, 584, 587, 590, 595, 599, 627, 636, 639, 640, 642, 649, 650, 651, 652, 669, 670, 671, 672, 701, 721, 722, 730, 746, 766, 770, 775, 776, 779, 780, 784, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 811, 813, 814, 815, 816, 817, 819, 827, 838, 840, 842, 843, 844, 851, 852, 853, 854, 855, 868, 880, 885, 890, 892, 893, 900, 901, 902, 903, 908, 933, 969, 970, 973, 974, 976, 977, 979, 980, 981, 982, 983, 986, 987, 990, 992, 995, 996, 1000, 1001, 1006, 1012, 1013, 1015, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 70, 200, 218, 308, 384, 387, 389, 407, 409, 410, 514, 771, 772, 995, 1000, 1004, 1030, 1031, 1032, 1038], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 371, 376, 378, 381, 385, 390, 392, 403, 407, 409, 411, 436, 554, 555, 578, 579, 713, 932, 933, 990, 996, 1000, 1001, 1006, 1015, 1033], "toward": [0, 26, 27, 63, 82, 119, 125, 131, 152, 172, 179, 204, 205, 226, 376, 389, 402, 441, 445, 455, 669, 671, 688, 866, 979, 994, 996, 999, 1001], "cover": [0, 52, 176, 200, 218, 358, 368, 371, 376, 388, 628, 713, 784, 980, 981, 999], "travel": 0, "expens": [0, 56, 118, 132, 152, 169, 171, 230, 258, 270, 334, 347, 348, 349, 364, 382, 389, 402, 403, 406, 409, 410, 442, 461, 501, 789, 792, 793, 803, 815, 890, 892, 977, 979, 990, 995, 1000, 1004, 1015, 1026], "well": [0, 4, 9, 12, 20, 24, 25, 27, 39, 48, 53, 57, 58, 62, 70, 78, 86, 112, 113, 115, 118, 123, 125, 130, 132, 149, 157, 159, 169, 170, 171, 172, 176, 184, 188, 198, 200, 201, 202, 204, 208, 221, 222, 223, 226, 229, 233, 236, 239, 248, 261, 268, 270, 272, 276, 281, 286, 287, 288, 310, 314, 315, 316, 317, 318, 319, 342, 347, 348, 349, 358, 371, 373, 375, 376, 380, 382, 384, 385, 387, 388, 389, 390, 400, 402, 404, 406, 407, 409, 412, 413, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 452, 453, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 693, 714, 715, 716, 777, 780, 782, 785, 787, 788, 789, 792, 793, 803, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 927, 928, 948, 969, 970, 972, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 990, 993, 994, 996, 997, 1000, 1001, 1004, 1014, 1015, 1022, 1023, 1026, 1028, 1029, 1030, 1033], "budget": [0, 122, 827, 828, 829, 830, 831, 969], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 392, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 423, 424, 425, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 484, 486, 488, 489, 490, 493, 494, 495, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 755, 756, 758, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 918, 923, 926, 927, 929, 931, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 954, 955, 961, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1024], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 20, 26, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 115, 116, 118, 121, 125, 126, 129, 149, 152, 159, 164, 169, 170, 171, 172, 176, 188, 189, 193, 200, 201, 202, 204, 208, 214, 216, 218, 221, 222, 223, 225, 229, 230, 232, 234, 235, 236, 237, 247, 256, 257, 261, 264, 267, 268, 269, 279, 281, 283, 287, 288, 298, 303, 304, 307, 313, 314, 315, 316, 317, 318, 319, 323, 325, 327, 334, 347, 356, 362, 363, 370, 373, 374, 376, 377, 378, 380, 382, 383, 387, 388, 389, 392, 393, 397, 400, 401, 402, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 425, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 480, 483, 489, 491, 497, 502, 508, 512, 520, 523, 526, 527, 531, 532, 533, 534, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 578, 579, 581, 582, 583, 584, 586, 587, 590, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 625, 626, 628, 629, 631, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 692, 693, 696, 700, 701, 706, 708, 713, 714, 715, 716, 720, 721, 722, 724, 726, 730, 733, 734, 738, 746, 747, 750, 755, 756, 760, 762, 766, 770, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 908, 918, 919, 928, 929, 943, 948, 955, 969, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 990, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1006, 1013, 1014, 1015, 1017, 1020, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "regard": [0, 5, 7, 11, 53, 55, 71, 100, 140, 152, 157, 171, 172, 189, 197, 202, 223, 235, 263, 270, 271, 342, 348, 372, 376, 377, 381, 387, 389, 396, 401, 402, 407, 409, 410, 412, 436, 440, 445, 452, 455, 494, 607, 612, 649, 651, 694, 735, 788, 795, 811, 816, 834, 835, 973, 976, 980, 982, 983, 985, 987, 994, 995, 996, 1008, 1015, 1029, 1032], "might": [0, 4, 5, 31, 42, 44, 60, 62, 70, 121, 130, 146, 158, 165, 170, 171, 172, 176, 200, 218, 229, 261, 263, 298, 315, 344, 358, 362, 363, 370, 374, 376, 377, 378, 380, 381, 382, 384, 387, 389, 390, 392, 396, 400, 403, 406, 407, 408, 409, 410, 412, 427, 436, 481, 489, 494, 496, 501, 508, 516, 529, 548, 549, 550, 557, 572, 573, 575, 603, 604, 620, 643, 647, 648, 649, 651, 652, 669, 671, 685, 749, 784, 792, 793, 816, 841, 857, 872, 885, 904, 906, 908, 912, 913, 929, 949, 969, 970, 972, 974, 976, 977, 979, 980, 982, 983, 987, 988, 990, 995, 996, 1015, 1023, 1025, 1030, 1031, 1033, 1036, 1037, 1038], "pai": [0, 218, 376], "dn": [0, 983], "continu": [0, 17, 19, 42, 122, 123, 152, 167, 171, 201, 208, 218, 222, 225, 242, 247, 251, 252, 299, 302, 308, 309, 311, 315, 316, 356, 371, 374, 378, 379, 380, 381, 384, 387, 389, 390, 392, 402, 407, 409, 461, 485, 585, 588, 589, 592, 593, 600, 601, 602, 625, 639, 640, 645, 646, 650, 653, 654, 655, 656, 718, 734, 748, 801, 803, 855, 857, 859, 861, 862, 871, 872, 873, 889, 890, 901, 943, 969, 976, 977, 980, 981, 983, 984, 990, 996, 1001, 1003, 1004, 1006, 1013, 1019, 1022, 1024, 1025, 1030, 1035, 1036, 1037], "integr": [0, 42, 71, 146, 160, 189, 299, 315, 374, 378, 379, 380, 382, 384, 389, 392, 407, 412, 439, 708, 747, 778, 955, 979, 987, 1004, 1009, 1023, 1025, 1026, 1034, 1035], "servic": [0, 4, 230, 376, 380, 1004, 1030], "azur": [0, 376], "cirru": [0, 376], "cl": [0, 8, 12, 16, 383, 389, 902], "circlecl": 0, "free": [0, 5, 55, 157, 158, 165, 199, 251, 303, 370, 375, 376, 377, 384, 387, 392, 410, 412, 445, 602, 664, 848, 898, 969, 972, 976, 980, 1001, 1030], "cpu": [0, 61, 262, 281, 318, 362, 363, 374, 382, 389, 392, 410, 489, 625, 640, 644, 646, 648, 651, 652, 654, 656, 658, 659, 661, 669, 672, 789, 803, 813, 814, 815, 836, 844, 885, 948, 980, 1006, 1010, 1015, 1027, 1036, 1037], "server": [0, 149, 362, 373, 374, 489, 1030], "anaconda": [0, 363, 374, 380], "inc": [0, 70, 260, 970, 992, 1004], "storag": [0, 349, 389, 651, 652, 659, 661, 669, 670, 671, 892, 983, 995, 1025, 1030], "thei": [0, 4, 26, 27, 37, 50, 57, 82, 97, 109, 113, 119, 120, 122, 124, 126, 128, 145, 148, 149, 152, 153, 157, 170, 171, 184, 186, 189, 195, 200, 201, 218, 222, 225, 229, 235, 236, 255, 258, 261, 262, 264, 270, 281, 283, 298, 303, 308, 315, 317, 347, 348, 354, 355, 358, 362, 363, 364, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 384, 385, 387, 388, 389, 390, 399, 401, 402, 403, 404, 405, 407, 409, 411, 412, 414, 433, 435, 439, 440, 446, 447, 452, 460, 489, 501, 502, 526, 528, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 581, 584, 603, 612, 622, 636, 639, 640, 645, 651, 652, 653, 654, 655, 663, 665, 669, 671, 674, 680, 754, 755, 757, 760, 766, 781, 789, 803, 821, 827, 828, 829, 830, 831, 849, 852, 854, 860, 871, 872, 894, 897, 900, 901, 902, 903, 907, 969, 970, 972, 974, 976, 979, 980, 981, 982, 983, 985, 986, 987, 988, 990, 991, 992, 994, 995, 996, 1004, 1006, 1010, 1012, 1013, 1015, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "stage": [0, 7, 26, 72, 112, 117, 123, 126, 374, 380, 389, 398, 402, 409, 441, 546, 547, 552, 553, 554, 555, 581, 582, 584, 595, 977, 990, 999, 1030, 1034], "nightli": [0, 363, 379, 380], "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 112, 121, 123, 129, 135, 146, 148, 163, 164, 166, 167, 170, 208, 266, 269, 281, 299, 300, 304, 309, 310, 349, 358, 362, 363, 364, 372, 378, 379, 380, 381, 382, 389, 392, 395, 401, 402, 403, 406, 409, 410, 435, 483, 494, 496, 517, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 578, 579, 581, 582, 584, 620, 621, 623, 684, 706, 707, 790, 794, 798, 807, 812, 814, 853, 870, 872, 900, 901, 902, 903, 905, 925, 969, 970, 977, 980, 984, 986, 990, 995, 996, 1000, 1001, 1004, 1007, 1009, 1013, 1014, 1022, 1025, 1027, 1028, 1029, 1031, 1034], "applic": [3, 5, 19, 49, 55, 80, 167, 176, 200, 217, 223, 255, 264, 303, 362, 364, 371, 373, 376, 378, 382, 384, 385, 387, 389, 400, 402, 406, 407, 408, 409, 412, 414, 437, 439, 445, 489, 491, 525, 526, 527, 546, 547, 622, 681, 682, 683, 687, 705, 721, 722, 730, 775, 776, 779, 818, 969, 976, 977, 978, 979, 980, 984, 986, 992, 996, 1000, 1001, 1004, 1013, 1015, 1022, 1023, 1028, 1030, 1033], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 55, 57, 66, 95, 112, 115, 118, 120, 125, 126, 152, 167, 172, 176, 179, 184, 186, 189, 193, 194, 200, 202, 204, 217, 218, 223, 229, 230, 237, 242, 259, 261, 266, 270, 271, 275, 281, 286, 293, 307, 316, 331, 334, 342, 343, 347, 348, 358, 362, 371, 372, 373, 374, 375, 377, 378, 381, 382, 385, 387, 389, 400, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 437, 440, 442, 443, 445, 450, 455, 458, 471, 496, 501, 502, 508, 509, 510, 511, 516, 517, 521, 524, 526, 530, 532, 535, 536, 537, 538, 539, 540, 541, 544, 545, 550, 554, 557, 560, 564, 566, 582, 603, 624, 636, 641, 643, 645, 647, 648, 649, 650, 651, 652, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 678, 679, 680, 681, 682, 684, 686, 688, 701, 709, 721, 722, 727, 731, 776, 779, 780, 787, 788, 790, 791, 792, 793, 794, 796, 797, 798, 799, 804, 805, 806, 807, 808, 809, 812, 820, 821, 822, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 858, 859, 865, 873, 876, 882, 883, 892, 893, 900, 902, 918, 929, 970, 971, 975, 976, 977, 979, 980, 981, 982, 983, 984, 988, 990, 994, 997, 1001, 1002, 1004, 1007, 1008, 1009, 1015, 1016, 1017, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "medium": [3, 167, 235, 276, 310, 334, 402, 407, 412, 636, 866, 973, 976], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 103, 105, 115, 124, 125, 128, 129, 145, 152, 154, 155, 158, 159, 167, 169, 171, 172, 179, 180, 181, 182, 186, 190, 195, 198, 201, 202, 203, 206, 213, 214, 221, 226, 229, 232, 233, 234, 235, 236, 238, 239, 248, 255, 257, 259, 261, 263, 264, 266, 267, 268, 287, 288, 289, 297, 300, 304, 305, 306, 307, 310, 314, 317, 319, 323, 327, 330, 332, 333, 334, 344, 347, 348, 349, 352, 362, 363, 364, 371, 372, 376, 381, 385, 387, 388, 389, 392, 393, 399, 400, 401, 404, 406, 407, 410, 412, 413, 437, 438, 439, 441, 442, 443, 450, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 486, 487, 488, 508, 520, 527, 529, 531, 533, 540, 550, 551, 552, 553, 554, 555, 557, 558, 576, 580, 581, 584, 587, 625, 626, 636, 650, 659, 660, 672, 676, 685, 688, 698, 712, 730, 732, 735, 773, 783, 791, 794, 795, 799, 806, 809, 810, 813, 816, 818, 827, 828, 829, 831, 834, 835, 836, 837, 838, 840, 842, 843, 844, 849, 850, 867, 869, 881, 886, 890, 894, 895, 896, 897, 898, 900, 901, 902, 903, 906, 928, 932, 933, 943, 944, 946, 949, 955, 970, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 987, 990, 992, 994, 995, 996, 1004, 1009, 1011, 1013, 1014, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1037, 1038], "interact": [3, 90, 126, 167, 200, 226, 231, 262, 314, 375, 377, 378, 380, 382, 387, 389, 390, 403, 552, 553, 554, 555, 625, 626, 867, 871, 969, 972, 976, 977, 978, 985, 987, 990, 999, 1001, 1024, 1029, 1036, 1037], "user": [3, 25, 55, 69, 95, 118, 161, 167, 170, 188, 221, 236, 251, 258, 268, 270, 281, 287, 288, 291, 309, 313, 314, 315, 316, 317, 318, 319, 358, 362, 363, 365, 370, 374, 375, 376, 378, 380, 382, 383, 384, 387, 388, 389, 392, 393, 396, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 413, 414, 415, 416, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 925, 929, 969, 970, 976, 977, 979, 980, 981, 983, 990, 994, 998, 1000, 1001, 1004, 1008, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039], "interfac": [3, 111, 112, 167, 369, 370, 377, 378, 385, 387, 389, 406, 412, 413, 434, 438, 443, 489, 692, 789, 792, 793, 803, 852, 853, 878, 965, 969, 983, 995, 1000, 1001, 1004, 1022, 1024, 1027, 1028, 1030, 1031, 1036], "compress": [3, 11, 15, 48, 167, 303, 371, 402, 407, 410, 645, 665, 685, 822, 951, 954, 976, 990, 1014, 1022, 1031], "sens": [3, 4, 15, 25, 55, 158, 167, 170, 176, 233, 236, 303, 309, 323, 334, 347, 358, 362, 376, 377, 389, 402, 404, 406, 455, 462, 463, 464, 465, 466, 467, 468, 469, 645, 648, 649, 665, 790, 800, 889, 974, 976, 983, 984, 986, 990, 993], "tomographi": [3, 15, 167, 645, 665, 976], "reconstruct": [3, 15, 20, 95, 96, 100, 167, 199, 224, 225, 317, 407, 410, 475, 476, 477, 524, 526, 528, 530, 531, 532, 533, 535, 536, 541, 576, 580, 645, 665, 681, 682, 686, 884, 885, 976, 977, 1036], "l1": [3, 7, 15, 30, 40, 82, 85, 167, 178, 185, 189, 211, 215, 219, 231, 262, 281, 316, 385, 387, 401, 402, 404, 407, 434, 438, 443, 450, 457, 462, 463, 464, 465, 466, 467, 468, 469, 471, 489, 495, 497, 524, 530, 531, 532, 533, 535, 536, 540, 541, 551, 558, 582, 583, 584, 590, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 661, 663, 665, 669, 670, 671, 672, 674, 681, 727, 754, 760, 765, 770, 771, 772, 777, 803, 810, 818, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 864, 872, 879, 892, 893, 899, 901, 903, 915, 962, 976, 978, 980, 983, 990, 994, 995, 996, 1013, 1027, 1029, 1035, 1038], "prior": [3, 15, 46, 47, 57, 67, 151, 152, 162, 167, 172, 179, 181, 184, 245, 247, 251, 252, 253, 261, 376, 378, 380, 389, 392, 402, 405, 407, 409, 412, 458, 516, 529, 541, 542, 543, 544, 552, 578, 579, 604, 606, 607, 608, 612, 615, 616, 623, 637, 638, 639, 640, 644, 645, 647, 648, 649, 653, 654, 655, 665, 671, 674, 709, 787, 827, 828, 829, 830, 831, 852, 853, 867, 894, 897, 947, 969, 972, 974, 976, 979, 980, 982, 988, 996, 997, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1038], "lasso": [3, 15, 105, 132, 138, 167, 170, 178, 219, 316, 362, 387, 404, 405, 407, 409, 410, 411, 464, 465, 471, 494, 517, 524, 530, 532, 535, 536, 538, 539, 541, 590, 639, 640, 642, 643, 644, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 671, 674, 675, 676, 677, 678, 679, 714, 715, 716, 813, 814, 815, 853, 872, 969, 980, 994, 1002, 1010, 1013, 1017, 1022, 1026, 1027, 1028, 1030, 1031, 1033, 1035, 1036], "recognit": [3, 9, 15, 167, 300, 308, 369, 381, 407, 409, 411, 487, 495, 525, 527, 534, 690, 701, 706, 733, 761, 780, 781, 787, 803, 818, 872, 897, 972, 976, 980, 981, 985, 995, 997, 1006, 1009, 1017, 1022], "eigenfac": [3, 15, 167, 371, 407, 487, 534, 690, 706, 803, 818, 872, 897, 997, 1009, 1022], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 70, 72, 74, 133, 137, 139, 142, 143, 147, 150, 167, 178, 193, 219, 229, 235, 237, 241, 242, 255, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271, 272, 276, 305, 313, 315, 321, 325, 328, 329, 332, 341, 342, 345, 347, 362, 365, 371, 378, 382, 389, 396, 403, 406, 407, 409, 411, 430, 487, 497, 505, 508, 534, 548, 549, 556, 560, 561, 570, 586, 587, 592, 593, 598, 624, 632, 636, 661, 669, 670, 671, 682, 690, 691, 693, 695, 706, 727, 734, 789, 803, 809, 814, 815, 818, 820, 821, 838, 852, 853, 865, 872, 888, 889, 968, 969, 972, 975, 977, 978, 980, 981, 985, 993, 995, 997, 1002, 1006, 1009, 1010, 1011, 1015, 1017, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029], "imag": [3, 6, 13, 15, 20, 32, 36, 46, 48, 51, 54, 58, 68, 70, 89, 94, 95, 107, 120, 147, 149, 156, 167, 191, 222, 231, 234, 238, 259, 290, 299, 300, 314, 322, 323, 347, 348, 368, 369, 371, 373, 376, 381, 384, 387, 389, 392, 395, 402, 407, 434, 438, 445, 455, 486, 487, 488, 489, 495, 496, 499, 500, 527, 528, 530, 534, 600, 601, 684, 690, 730, 818, 862, 976, 980, 981, 983, 985, 992, 996, 1000, 1004, 1006, 1011, 1012, 1014, 1015, 1017, 1022, 1025, 1030, 1031, 1035, 1037, 1038], "denois": [3, 15, 94, 107, 167, 407, 489, 528, 530, 534, 577, 580, 818, 862], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 74, 94, 105, 107, 133, 139, 141, 147, 151, 153, 154, 155, 156, 159, 162, 164, 177, 201, 214, 228, 229, 237, 241, 244, 255, 259, 261, 263, 266, 267, 271, 276, 282, 295, 316, 324, 327, 329, 331, 334, 335, 336, 339, 340, 343, 345, 358, 362, 365, 368, 378, 387, 389, 400, 402, 403, 406, 409, 410, 425, 433, 441, 445, 454, 455, 458, 475, 476, 477, 484, 489, 491, 495, 497, 507, 526, 527, 528, 534, 537, 547, 549, 551, 553, 555, 558, 561, 563, 586, 587, 603, 604, 624, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 669, 670, 671, 672, 681, 683, 684, 685, 688, 727, 750, 751, 753, 758, 759, 766, 767, 768, 769, 789, 795, 800, 803, 818, 820, 825, 826, 832, 833, 835, 837, 843, 850, 852, 853, 858, 862, 864, 865, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 901, 903, 969, 975, 976, 977, 980, 981, 983, 986, 993, 994, 1002, 1006, 1010, 1011, 1016, 1017, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "pca": [3, 6, 15, 69, 72, 74, 76, 86, 90, 94, 97, 106, 107, 167, 222, 224, 234, 237, 241, 260, 281, 285, 290, 316, 358, 368, 378, 389, 398, 401, 402, 403, 408, 418, 466, 469, 489, 495, 497, 507, 525, 526, 527, 528, 532, 533, 536, 537, 542, 636, 651, 681, 683, 685, 789, 814, 818, 841, 848, 851, 852, 854, 862, 870, 872, 972, 974, 977, 983, 990, 994, 996, 1011, 1016, 1017, 1022, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1039], "libsvm": [3, 15, 167, 176, 332, 369, 382, 480, 501, 556, 892, 893, 894, 895, 896, 897, 898, 995, 1017, 1022, 1024, 1030, 1033, 1036], "gui": [3, 15, 167, 480, 896, 897, 1013, 1022, 1023, 1033], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 76, 78, 82, 86, 94, 95, 107, 110, 112, 115, 117, 121, 123, 124, 125, 127, 129, 131, 132, 135, 136, 138, 139, 141, 143, 145, 150, 155, 156, 158, 159, 160, 161, 165, 168, 169, 173, 174, 180, 182, 186, 190, 191, 193, 195, 196, 197, 201, 202, 204, 206, 208, 212, 213, 215, 216, 217, 219, 229, 232, 237, 246, 248, 249, 250, 253, 255, 256, 257, 259, 262, 264, 266, 267, 269, 270, 274, 275, 277, 279, 281, 283, 285, 287, 290, 294, 304, 307, 309, 310, 313, 315, 317, 318, 319, 322, 323, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 344, 348, 349, 353, 354, 355, 358, 365, 368, 370, 371, 379, 382, 389, 391, 398, 399, 400, 402, 403, 405, 407, 408, 409, 410, 411, 412, 421, 425, 427, 430, 435, 442, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 482, 483, 489, 491, 493, 494, 495, 496, 502, 515, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 581, 582, 584, 586, 587, 590, 595, 599, 602, 603, 604, 608, 620, 625, 626, 627, 628, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 694, 699, 704, 714, 715, 716, 726, 727, 733, 734, 742, 745, 777, 780, 781, 782, 787, 788, 789, 792, 793, 794, 795, 803, 804, 805, 806, 810, 811, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 837, 838, 839, 841, 843, 848, 849, 850, 852, 853, 855, 857, 859, 864, 865, 867, 868, 869, 871, 872, 873, 877, 878, 880, 881, 882, 883, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 907, 970, 972, 973, 974, 977, 978, 981, 983, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1004, 1007, 1009, 1011, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027], "complex": [3, 9, 14, 15, 16, 152, 157, 164, 167, 204, 214, 217, 228, 235, 236, 244, 254, 270, 277, 304, 313, 316, 317, 321, 328, 334, 349, 351, 357, 372, 376, 381, 387, 403, 407, 409, 412, 413, 433, 437, 440, 441, 443, 460, 482, 493, 494, 495, 507, 527, 534, 544, 550, 551, 552, 553, 555, 557, 558, 597, 623, 631, 649, 651, 669, 670, 726, 742, 789, 818, 820, 848, 852, 853, 857, 865, 872, 888, 892, 895, 898, 900, 901, 902, 903, 969, 970, 972, 973, 975, 979, 981, 986, 990, 993, 1001, 1002, 1004, 1017, 1023, 1025, 1031, 1032, 1035], "influenc": [3, 9, 15, 80, 81, 112, 167, 170, 182, 246, 269, 303, 310, 334, 342, 358, 364, 404, 407, 409, 425, 433, 447, 458, 475, 476, 477, 482, 494, 547, 549, 551, 553, 555, 558, 561, 563, 604, 621, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 669, 671, 672, 726, 742, 818, 825, 826, 834, 835, 842, 843, 850, 869, 870, 881, 893, 895, 898, 901, 903, 912, 969, 974, 975, 983, 986, 990, 994, 995, 1004, 1025, 1030, 1031], "core": [3, 15, 49, 55, 65, 71, 112, 118, 120, 121, 167, 170, 171, 318, 361, 363, 365, 374, 376, 379, 384, 389, 392, 402, 407, 409, 413, 437, 439, 442, 443, 448, 450, 492, 531, 582, 587, 651, 652, 659, 661, 669, 827, 828, 829, 830, 831, 836, 844, 976, 983, 986, 995, 998, 1001, 1002, 1004, 1013, 1015, 1017, 1024, 1026, 1027, 1029, 1032, 1036, 1037, 1038], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 71, 72, 73, 88, 93, 98, 111, 112, 114, 116, 118, 119, 120, 121, 123, 126, 130, 137, 142, 145, 146, 147, 148, 149, 151, 162, 170, 171, 176, 178, 192, 193, 200, 208, 219, 228, 230, 234, 239, 242, 244, 249, 254, 258, 259, 260, 261, 262, 270, 276, 277, 282, 283, 289, 291, 294, 295, 296, 301, 305, 322, 328, 330, 334, 337, 340, 342, 343, 346, 348, 349, 350, 358, 362, 364, 365, 369, 370, 371, 373, 378, 381, 385, 388, 389, 397, 400, 402, 403, 406, 407, 410, 411, 419, 430, 462, 468, 475, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 503, 505, 507, 508, 512, 513, 515, 516, 534, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 597, 598, 599, 602, 603, 604, 606, 607, 615, 624, 625, 626, 636, 651, 652, 659, 661, 667, 668, 669, 690, 696, 698, 701, 705, 706, 708, 709, 711, 718, 719, 721, 722, 726, 730, 733, 734, 735, 746, 748, 750, 751, 774, 775, 776, 778, 779, 780, 781, 784, 786, 789, 790, 792, 793, 794, 795, 803, 807, 808, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 834, 839, 841, 842, 848, 849, 850, 852, 856, 859, 864, 865, 866, 872, 873, 876, 878, 887, 888, 889, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 915, 918, 926, 969, 970, 972, 973, 974, 977, 978, 982, 985, 987, 988, 990, 991, 993, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1011, 1012, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 57, 60, 62, 64, 70, 80, 81, 118, 123, 180, 194, 195, 229, 233, 240, 241, 246, 248, 254, 267, 268, 272, 277, 286, 289, 291, 297, 305, 316, 321, 323, 328, 341, 350, 352, 362, 364, 365, 368, 369, 370, 376, 381, 387, 389, 400, 402, 403, 405, 406, 407, 409, 412, 440, 442, 461, 480, 481, 482, 492, 496, 501, 514, 529, 537, 557, 608, 618, 645, 651, 659, 661, 667, 669, 690, 696, 698, 700, 706, 710, 721, 729, 783, 785, 789, 803, 818, 827, 829, 831, 834, 839, 852, 853, 855, 856, 864, 888, 889, 890, 892, 904, 905, 906, 926, 969, 972, 976, 978, 980, 981, 982, 984, 987, 990, 992, 994, 995, 999, 1001, 1004, 1007, 1017, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "outlier": [3, 15, 44, 80, 81, 125, 128, 167, 178, 202, 203, 204, 206, 219, 228, 244, 282, 295, 302, 311, 344, 371, 389, 402, 404, 409, 424, 439, 462, 463, 466, 467, 468, 469, 483, 484, 485, 489, 503, 505, 515, 517, 556, 632, 642, 663, 664, 665, 669, 670, 671, 672, 685, 695, 838, 842, 853, 859, 861, 862, 864, 868, 869, 870, 872, 878, 881, 895, 896, 898, 980, 994, 995, 1000, 1002, 1016, 1017, 1022, 1027, 1028, 1030], "detect": [3, 8, 10, 15, 20, 63, 65, 80, 82, 119, 128, 167, 181, 204, 228, 244, 254, 261, 264, 277, 282, 295, 309, 333, 371, 374, 376, 380, 387, 389, 400, 401, 402, 404, 406, 410, 424, 439, 442, 462, 463, 466, 467, 468, 469, 481, 482, 484, 485, 489, 503, 505, 508, 515, 530, 531, 532, 539, 556, 557, 581, 584, 589, 632, 670, 691, 695, 719, 781, 818, 838, 842, 853, 859, 872, 892, 896, 972, 976, 1000, 1001, 1002, 1004, 1010, 1015, 1016, 1017, 1022, 1025, 1028, 1029, 1030, 1032, 1034, 1035, 1037, 1038], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 20, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 100, 107, 109, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 134, 138, 145, 146, 149, 152, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 179, 184, 185, 188, 189, 191, 193, 195, 196, 199, 200, 201, 202, 205, 208, 213, 214, 218, 221, 222, 223, 229, 230, 231, 232, 234, 235, 236, 243, 246, 248, 250, 251, 255, 256, 259, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 275, 279, 283, 287, 288, 289, 290, 291, 294, 298, 299, 300, 303, 305, 306, 307, 308, 309, 310, 313, 315, 316, 322, 323, 326, 327, 331, 333, 336, 342, 347, 348, 349, 354, 355, 358, 362, 363, 364, 368, 369, 371, 373, 374, 376, 378, 380, 381, 383, 384, 388, 389, 390, 392, 393, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 419, 426, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 481, 482, 486, 488, 489, 490, 492, 495, 496, 497, 501, 502, 503, 508, 516, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 691, 692, 693, 694, 695, 696, 706, 707, 712, 714, 715, 718, 719, 720, 721, 722, 723, 726, 730, 732, 733, 737, 738, 740, 742, 743, 745, 748, 771, 772, 774, 775, 776, 777, 779, 781, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 912, 913, 923, 924, 929, 933, 948, 949, 950, 951, 954, 955, 961, 964, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1007, 1009, 1010, 1011, 1014, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 58, 62, 70, 71, 72, 73, 75, 85, 106, 109, 110, 111, 112, 114, 115, 116, 118, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 146, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 170, 171, 172, 176, 179, 182, 183, 184, 192, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 214, 215, 217, 218, 229, 230, 232, 234, 236, 238, 247, 248, 249, 250, 251, 252, 254, 255, 259, 261, 263, 264, 267, 270, 271, 275, 277, 279, 284, 287, 288, 289, 292, 293, 300, 303, 304, 308, 309, 313, 314, 315, 316, 317, 319, 323, 325, 326, 327, 330, 331, 333, 334, 340, 341, 342, 343, 347, 348, 353, 354, 355, 356, 358, 361, 363, 365, 368, 371, 373, 376, 378, 383, 385, 389, 391, 393, 396, 397, 398, 400, 401, 402, 403, 407, 409, 410, 411, 419, 425, 430, 431, 432, 433, 435, 436, 437, 440, 441, 442, 458, 462, 475, 476, 477, 480, 494, 501, 517, 527, 534, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 575, 586, 587, 595, 599, 603, 604, 606, 607, 608, 609, 615, 618, 620, 621, 623, 624, 625, 626, 627, 628, 630, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 707, 708, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 726, 727, 730, 733, 734, 735, 738, 740, 742, 744, 748, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 788, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 838, 839, 842, 843, 849, 850, 852, 859, 872, 873, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 954, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 982, 983, 984, 986, 987, 988, 990, 993, 994, 995, 996, 999, 1000, 1001, 1003, 1004, 1007, 1009, 1010, 1011, 1015, 1017, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "latenc": [3, 7, 15, 123, 167, 361, 517, 558, 665, 671, 818, 872, 898, 945, 954, 1000, 1017, 1025], "speci": [3, 15, 167, 282, 295, 347, 371, 408, 491, 699, 781, 837, 896, 907, 980, 986, 1022], "distribut": [3, 4, 8, 9, 10, 15, 20, 27, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 92, 112, 114, 125, 128, 144, 149, 152, 161, 167, 169, 170, 176, 179, 200, 202, 204, 223, 225, 229, 233, 246, 251, 252, 257, 261, 267, 269, 282, 286, 295, 302, 303, 305, 308, 311, 319, 322, 323, 339, 342, 347, 362, 363, 371, 372, 373, 374, 376, 377, 380, 381, 382, 389, 396, 400, 401, 402, 404, 406, 407, 408, 412, 414, 440, 442, 462, 463, 464, 465, 466, 467, 468, 469, 481, 491, 496, 508, 509, 510, 511, 512, 516, 525, 526, 529, 543, 544, 545, 556, 604, 618, 633, 635, 637, 638, 641, 651, 652, 662, 672, 673, 681, 682, 683, 685, 699, 701, 716, 744, 781, 787, 788, 793, 794, 801, 803, 807, 808, 818, 828, 831, 837, 841, 848, 855, 868, 869, 870, 871, 872, 880, 881, 882, 887, 888, 896, 907, 931, 948, 969, 974, 976, 978, 979, 980, 982, 983, 985, 986, 992, 993, 998, 1000, 1001, 1006, 1010, 1014, 1016, 1017, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "relat": [3, 7, 12, 15, 17, 44, 62, 96, 98, 100, 167, 168, 170, 195, 204, 236, 239, 254, 268, 318, 347, 356, 365, 371, 372, 375, 379, 380, 381, 383, 384, 385, 387, 389, 390, 391, 393, 396, 401, 402, 403, 404, 405, 406, 407, 409, 412, 443, 457, 462, 489, 542, 543, 555, 556, 632, 666, 670, 685, 694, 715, 735, 810, 815, 850, 851, 853, 856, 857, 862, 865, 866, 867, 868, 871, 880, 896, 969, 974, 980, 981, 983, 984, 987, 990, 995, 996, 997, 998, 1001, 1017, 1022, 1026, 1027, 1028, 1030, 1031, 1034, 1035, 1038], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 20, 25, 26, 27, 30, 33, 36, 42, 58, 60, 63, 68, 69, 70, 71, 72, 76, 80, 81, 86, 89, 90, 91, 92, 95, 97, 99, 103, 104, 106, 110, 111, 118, 121, 127, 131, 132, 133, 135, 136, 144, 146, 150, 152, 153, 154, 157, 158, 160, 164, 165, 168, 169, 170, 171, 174, 178, 183, 184, 186, 187, 189, 196, 200, 201, 202, 204, 205, 209, 215, 216, 217, 219, 228, 231, 233, 236, 242, 243, 244, 254, 258, 261, 267, 268, 270, 271, 275, 277, 279, 284, 289, 290, 292, 296, 299, 301, 302, 303, 306, 310, 311, 312, 314, 317, 318, 319, 329, 330, 331, 334, 342, 345, 346, 349, 350, 353, 355, 356, 358, 365, 368, 369, 370, 371, 372, 373, 374, 378, 379, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 396, 400, 402, 404, 405, 406, 407, 408, 412, 413, 414, 415, 418, 423, 425, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 572, 573, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 611, 612, 613, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 683, 684, 685, 690, 694, 695, 696, 706, 714, 715, 716, 733, 750, 751, 755, 756, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 773, 777, 780, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 912, 913, 926, 945, 955, 956, 957, 961, 969, 972, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1011, 1012, 1013, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "engin": [3, 15, 40, 117, 157, 167, 362, 370, 373, 402, 408, 410, 412, 457, 489, 555, 632, 666, 694, 810, 815, 850, 851, 853, 856, 857, 862, 865, 866, 867, 871, 970, 980, 990, 998, 1028], "topic": [3, 7, 8, 15, 70, 149, 167, 347, 348, 349, 371, 372, 406, 407, 410, 481, 490, 529, 531, 533, 540, 581, 584, 976, 981, 1000, 1001, 1015, 1027, 1029], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 55, 69, 70, 71, 76, 85, 95, 149, 167, 215, 254, 277, 300, 347, 349, 358, 365, 368, 371, 373, 378, 382, 385, 387, 402, 403, 406, 407, 443, 445, 448, 449, 455, 457, 481, 482, 486, 487, 496, 497, 524, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 576, 577, 581, 582, 584, 586, 587, 590, 592, 624, 711, 780, 789, 803, 829, 851, 852, 897, 929, 944, 969, 977, 981, 985, 990, 994, 1000, 1004, 1007, 1011, 1012, 1017, 1022, 1023, 1031, 1034], "neg": [3, 4, 15, 16, 24, 60, 75, 78, 86, 118, 124, 125, 129, 167, 170, 178, 200, 218, 219, 250, 251, 258, 261, 264, 268, 270, 271, 281, 303, 307, 317, 347, 382, 389, 390, 402, 406, 409, 410, 411, 413, 414, 425, 433, 437, 445, 458, 462, 475, 476, 477, 481, 524, 526, 528, 529, 530, 531, 533, 535, 537, 540, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 581, 584, 585, 588, 589, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 670, 671, 672, 673, 680, 691, 692, 697, 698, 705, 706, 708, 711, 712, 714, 715, 716, 719, 721, 722, 723, 727, 730, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 774, 775, 776, 777, 779, 783, 787, 788, 795, 811, 813, 818, 825, 826, 835, 838, 843, 850, 859, 868, 870, 871, 876, 880, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 927, 929, 948, 978, 980, 981, 983, 984, 985, 986, 994, 995, 1015, 1016, 1017, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 106, 159, 167, 173, 178, 186, 201, 205, 219, 230, 233, 234, 251, 254, 268, 277, 299, 317, 322, 323, 347, 348, 349, 356, 362, 365, 371, 372, 373, 376, 378, 382, 385, 387, 388, 389, 399, 403, 404, 405, 410, 411, 412, 413, 414, 424, 425, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 447, 450, 452, 453, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 485, 489, 490, 493, 494, 495, 496, 497, 498, 501, 502, 503, 512, 514, 516, 517, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 578, 579, 581, 582, 583, 584, 586, 587, 596, 597, 598, 599, 600, 601, 602, 604, 613, 622, 623, 624, 626, 628, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 705, 706, 707, 708, 709, 711, 721, 722, 723, 726, 730, 731, 732, 733, 746, 747, 750, 751, 752, 753, 755, 756, 758, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 779, 780, 782, 783, 786, 787, 788, 789, 792, 793, 803, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 861, 863, 864, 865, 867, 869, 870, 871, 872, 874, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 908, 910, 911, 912, 913, 918, 927, 928, 929, 930, 933, 934, 935, 943, 944, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 966, 970, 972, 974, 976, 977, 981, 982, 983, 984, 990, 991, 992, 993, 994, 996, 997, 1014, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "factor": [3, 15, 26, 31, 44, 46, 53, 55, 62, 94, 100, 105, 107, 130, 167, 170, 226, 229, 239, 272, 273, 281, 282, 295, 297, 298, 303, 305, 315, 317, 362, 363, 376, 382, 385, 389, 399, 401, 402, 409, 410, 412, 433, 435, 447, 462, 464, 465, 466, 467, 469, 471, 481, 497, 507, 508, 520, 525, 528, 529, 531, 533, 534, 537, 538, 539, 540, 542, 543, 554, 555, 556, 581, 584, 590, 606, 642, 643, 644, 647, 648, 649, 675, 676, 685, 712, 775, 789, 792, 793, 814, 838, 872, 886, 888, 896, 928, 929, 969, 976, 977, 983, 990, 993, 997, 1000, 1016, 1017, 1022, 1023, 1025, 1026, 1028, 1036, 1038], "latent": [3, 15, 17, 106, 167, 300, 348, 405, 410, 412, 481, 525, 529, 531, 532, 533, 536, 537, 581, 584, 848, 979, 1000, 1015, 1016, 1017, 1024, 1027], "dirichlet": [3, 15, 167, 246, 247, 252, 256, 410, 481, 529, 531, 533, 581, 584, 787, 1000, 1016, 1017, 1022, 1027, 1028], "alloc": [3, 15, 25, 61, 167, 273, 315, 372, 376, 377, 402, 410, 436, 440, 452, 481, 529, 531, 533, 577, 581, 584, 639, 645, 653, 655, 792, 793, 795, 811, 816, 819, 969, 990, 1000, 1016, 1017, 1026, 1027, 1032, 1033], "visual": [3, 4, 9, 15, 16, 20, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 80, 91, 94, 97, 99, 105, 107, 118, 126, 128, 130, 134, 135, 160, 165, 167, 171, 173, 184, 191, 200, 202, 218, 226, 228, 231, 234, 240, 241, 244, 251, 254, 255, 257, 258, 262, 271, 277, 286, 290, 291, 296, 298, 301, 303, 307, 308, 313, 315, 323, 365, 368, 372, 374, 382, 383, 399, 404, 406, 407, 408, 409, 431, 434, 438, 439, 447, 465, 489, 495, 497, 500, 503, 507, 515, 525, 527, 534, 557, 559, 564, 624, 626, 651, 682, 685, 690, 691, 693, 694, 695, 711, 719, 774, 781, 790, 791, 794, 795, 806, 807, 808, 809, 810, 811, 818, 849, 853, 872, 897, 906, 925, 975, 977, 978, 983, 984, 986, 987, 990, 996, 1000, 1006, 1017, 1025, 1032, 1033, 1034, 1036], "stock": [3, 15, 167, 402, 404, 447, 465, 682, 1009], "market": [3, 15, 167, 402, 404, 447, 465, 682, 1004, 1009], "wikipedia": [3, 15, 24, 167, 384, 401, 402, 588, 600, 601, 629, 649, 661, 664, 675, 676, 688, 697, 698, 700, 702, 705, 709, 711, 718, 721, 722, 723, 726, 727, 730, 735, 748, 775, 777, 778, 780, 781, 782, 783, 834, 835, 840, 841, 842, 843, 870, 886, 900, 901, 972, 976, 980, 983, 992, 996, 1015, 1022, 1029], "princip": [3, 15, 84, 87, 94, 97, 99, 100, 102, 104, 107, 130, 167, 221, 234, 237, 290, 308, 315, 368, 402, 405, 414, 477, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 543, 650, 681, 682, 683, 685, 686, 818, 841, 853, 872, 928, 929, 977, 983, 1016, 1017, 1022], "eigenvector": [3, 15, 46, 86, 90, 167, 246, 402, 445, 455, 527, 528, 534, 543, 681, 682, 684, 688, 977, 1022, 1026, 1036], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 374, 376, 378, 380, 387, 389, 390, 392, 399, 402, 403, 405, 409, 443, 449, 461, 481, 482, 501, 502, 530, 539, 550, 551, 552, 553, 557, 558, 559, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 654, 655, 656, 674, 675, 676, 677, 789, 792, 793, 803, 810, 813, 850, 852, 890, 900, 901, 902, 903, 933, 934, 964, 969, 976, 977, 979, 980, 990, 992, 994, 1000, 1004, 1012, 1015, 1027, 1029, 1032, 1035, 1036], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 369, 371, 373, 374, 380, 381, 384, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 503, 996, 1011, 1013, 1015, 1017, 1026, 1027, 1030, 1034, 1035, 1036], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 362, 363, 365, 373, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 392, 395, 396, 401, 413, 414, 418, 432, 449, 454, 464, 478, 500, 501, 524, 540, 548, 565, 566, 570, 576, 585, 588, 589, 591, 594, 596, 605, 609, 613, 614, 617, 622, 631, 635, 643, 644, 647, 653, 654, 656, 660, 668, 692, 701, 708, 714, 715, 716, 718, 720, 722, 723, 727, 731, 735, 736, 738, 739, 743, 746, 748, 755, 756, 760, 761, 763, 765, 773, 775, 784, 796, 797, 798, 799, 800, 801, 802, 820, 822, 824, 826, 828, 832, 833, 842, 843, 844, 846, 854, 855, 858, 860, 863, 874, 877, 879, 880, 882, 883, 884, 887, 893, 902, 903, 904, 905, 918, 927, 929, 931, 932, 934, 942, 943, 944, 948, 951, 968, 970, 978, 1001, 1002, 1004, 1007, 1010, 1011, 1015, 1017, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1037, 1038], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 374, 376, 377, 378, 380, 381, 382, 383, 384, 387, 389, 390, 392, 398, 402, 404, 406, 409, 412, 413, 414, 430, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 455, 457, 460, 461, 464, 465, 524, 525, 526, 527, 528, 530, 532, 534, 535, 536, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 575, 585, 587, 588, 589, 591, 592, 593, 595, 603, 604, 627, 633, 639, 640, 642, 644, 645, 646, 648, 649, 653, 654, 655, 656, 675, 676, 681, 682, 683, 684, 685, 686, 687, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 824, 825, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 849, 850, 851, 854, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 923, 924, 948, 951, 954, 969, 979, 981, 984, 993, 995, 996, 1000, 1001, 1004, 1006, 1013, 1015, 1022, 1025, 1027, 1029, 1030, 1031, 1032, 1036, 1037, 1038], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 374, 375, 376, 377, 379, 380, 382, 384, 385, 387, 388, 389, 392, 396, 398, 401, 402, 403, 404, 409, 410, 413, 414, 437, 439, 496, 526, 554, 555, 595, 627, 639, 680, 789, 792, 793, 795, 803, 811, 815, 817, 923, 977, 984, 990, 993, 994, 995, 996, 997, 999, 1000, 1003, 1004, 1008, 1015, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 376, 384, 990], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 377, 382, 403, 461, 890, 996, 999, 1000, 1001, 1033, 1036], "introduc": [4, 78, 80, 81, 100, 148, 167, 172, 179, 184, 204, 228, 233, 236, 244, 268, 318, 319, 349, 369, 372, 374, 376, 378, 380, 381, 384, 387, 389, 392, 393, 400, 402, 404, 406, 407, 409, 410, 426, 434, 435, 436, 438, 440, 442, 452, 457, 461, 475, 476, 477, 478, 489, 497, 508, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 548, 549, 559, 560, 561, 562, 563, 574, 575, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 651, 657, 678, 679, 681, 682, 685, 818, 836, 841, 844, 848, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 886, 890, 974, 976, 979, 982, 983, 986, 990, 992, 994, 995, 1006, 1013, 1022, 1023, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 20, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 57, 58, 64, 65, 66, 67, 68, 70, 71, 72, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 104, 105, 111, 112, 115, 117, 118, 121, 122, 125, 127, 132, 133, 134, 135, 138, 141, 144, 149, 151, 152, 153, 154, 157, 158, 159, 162, 164, 165, 167, 169, 170, 172, 176, 179, 180, 186, 187, 188, 189, 191, 197, 200, 201, 202, 204, 205, 206, 207, 208, 218, 221, 222, 223, 226, 229, 231, 234, 235, 236, 239, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 275, 276, 281, 287, 288, 290, 297, 298, 302, 307, 308, 311, 313, 329, 333, 334, 338, 342, 343, 345, 347, 348, 349, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 379, 381, 383, 385, 388, 389, 392, 396, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 427, 430, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 451, 452, 455, 457, 468, 471, 483, 486, 487, 489, 496, 497, 501, 502, 505, 507, 515, 530, 531, 532, 533, 539, 540, 542, 543, 548, 549, 556, 581, 582, 583, 584, 587, 604, 606, 607, 608, 612, 615, 616, 620, 624, 625, 626, 627, 631, 636, 637, 640, 642, 644, 646, 648, 651, 654, 659, 660, 661, 665, 667, 669, 670, 671, 673, 683, 685, 687, 691, 693, 694, 697, 698, 699, 700, 702, 708, 710, 711, 719, 720, 721, 722, 723, 726, 729, 735, 749, 750, 751, 760, 770, 774, 775, 776, 778, 779, 781, 782, 783, 785, 788, 789, 791, 792, 793, 794, 795, 798, 803, 804, 805, 806, 807, 808, 809, 811, 813, 815, 816, 819, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 845, 848, 852, 857, 861, 862, 864, 868, 869, 870, 872, 877, 878, 879, 880, 881, 882, 883, 892, 894, 897, 900, 901, 902, 903, 944, 969, 970, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1006, 1008, 1009, 1010, 1014, 1015, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "strategi": [4, 52, 54, 58, 61, 71, 122, 127, 132, 148, 164, 165, 167, 172, 184, 189, 200, 208, 218, 231, 241, 254, 262, 264, 266, 270, 271, 277, 296, 301, 302, 309, 310, 311, 313, 314, 317, 349, 361, 378, 382, 388, 389, 406, 409, 410, 411, 414, 430, 431, 432, 445, 455, 465, 495, 497, 505, 507, 515, 526, 531, 544, 545, 554, 555, 560, 561, 564, 581, 582, 584, 585, 587, 595, 620, 621, 623, 627, 638, 640, 644, 646, 648, 654, 656, 658, 666, 668, 684, 688, 697, 706, 747, 749, 785, 789, 792, 793, 795, 803, 806, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 849, 857, 862, 873, 887, 892, 894, 897, 900, 901, 902, 903, 951, 969, 970, 979, 981, 982, 983, 984, 986, 988, 990, 994, 995, 996, 1000, 1010, 1015, 1017, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "leverag": [4, 8, 37, 49, 86, 218, 347, 348, 362, 363, 374, 406, 409, 867, 969, 976, 1006, 1025, 1037], "task": [4, 7, 98, 111, 119, 120, 126, 147, 148, 160, 167, 178, 200, 216, 219, 221, 258, 349, 362, 364, 371, 373, 374, 375, 376, 380, 381, 382, 385, 387, 388, 389, 407, 409, 410, 411, 412, 441, 454, 486, 498, 508, 585, 588, 589, 591, 592, 593, 597, 598, 599, 602, 625, 626, 639, 640, 645, 646, 653, 654, 655, 656, 667, 674, 677, 719, 721, 722, 746, 774, 776, 779, 781, 790, 794, 807, 812, 946, 947, 977, 980, 981, 982, 983, 991, 993, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1006, 1013, 1014, 1015, 1017, 1022, 1027, 1031, 1037], "highli": [4, 9, 72, 80, 81, 97, 106, 128, 184, 195, 205, 261, 264, 270, 298, 348, 362, 363, 376, 378, 382, 400, 402, 406, 409, 410, 445, 455, 489, 556, 664, 685, 801, 803, 848, 976, 980, 983, 984, 986, 994, 995, 999, 1000], "depend": [4, 5, 7, 37, 53, 75, 99, 118, 122, 125, 126, 129, 132, 144, 148, 158, 164, 167, 168, 170, 174, 176, 180, 184, 218, 222, 228, 229, 235, 244, 251, 261, 262, 266, 267, 268, 281, 298, 303, 308, 315, 318, 331, 342, 348, 349, 358, 362, 363, 364, 369, 376, 378, 379, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 398, 401, 402, 404, 406, 407, 409, 410, 411, 412, 413, 431, 432, 433, 437, 439, 440, 442, 443, 445, 447, 450, 452, 453, 455, 457, 462, 477, 482, 483, 484, 486, 489, 493, 494, 495, 497, 498, 503, 527, 528, 534, 537, 544, 552, 553, 555, 581, 582, 583, 584, 595, 597, 600, 601, 604, 620, 625, 626, 631, 633, 641, 651, 652, 662, 664, 666, 669, 670, 671, 673, 680, 683, 684, 687, 688, 721, 733, 770, 773, 782, 783, 787, 788, 808, 817, 834, 835, 836, 838, 840, 841, 842, 843, 844, 850, 851, 853, 865, 866, 869, 872, 886, 893, 894, 897, 901, 910, 969, 970, 972, 973, 974, 976, 977, 979, 980, 982, 983, 984, 985, 988, 992, 994, 995, 996, 1006, 1013, 1015, 1017, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1037, 1038], "busi": [4, 200, 261, 384, 387, 780, 976, 980, 1004], "dai": [4, 12, 157, 171, 201, 363, 373, 376, 871, 1004, 1028, 1029, 1036, 1037], "week": [4, 375, 376, 390, 1004, 1036], "yearli": 4, "season": [4, 157, 171, 201, 375, 412], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 58, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 98, 105, 109, 111, 112, 118, 120, 122, 124, 126, 127, 131, 132, 138, 148, 149, 153, 164, 165, 167, 170, 171, 172, 173, 176, 184, 189, 200, 202, 204, 206, 207, 208, 217, 218, 222, 223, 225, 229, 234, 237, 239, 248, 251, 254, 256, 257, 258, 259, 261, 262, 263, 266, 267, 269, 270, 272, 274, 276, 277, 279, 281, 294, 300, 303, 305, 307, 309, 310, 313, 319, 321, 328, 334, 337, 340, 347, 349, 358, 361, 363, 364, 371, 373, 378, 379, 380, 382, 384, 385, 387, 388, 389, 391, 393, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 420, 424, 433, 435, 436, 437, 439, 440, 441, 443, 445, 447, 448, 452, 454, 461, 462, 475, 476, 477, 478, 487, 495, 505, 508, 524, 525, 526, 528, 530, 532, 535, 536, 537, 538, 539, 541, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 576, 581, 582, 583, 584, 594, 595, 596, 603, 604, 620, 623, 624, 631, 633, 638, 644, 647, 648, 649, 651, 657, 658, 659, 660, 661, 663, 666, 668, 669, 670, 671, 675, 676, 678, 680, 682, 683, 686, 687, 690, 696, 697, 698, 700, 701, 705, 706, 718, 721, 722, 730, 732, 734, 747, 748, 749, 770, 775, 776, 778, 779, 780, 784, 785, 786, 787, 788, 789, 792, 793, 800, 801, 803, 807, 813, 814, 815, 817, 818, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 839, 841, 847, 848, 849, 850, 852, 853, 855, 858, 859, 861, 862, 864, 865, 866, 868, 869, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 887, 888, 890, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 913, 953, 964, 969, 970, 972, 974, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 996, 1000, 1001, 1004, 1006, 1007, 1010, 1013, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 362, 363, 364, 365, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 387, 388, 389, 391, 392, 393, 396, 398, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 106, 117, 122, 145, 149, 157, 161, 172, 176, 179, 181, 188, 189, 191, 200, 201, 206, 216, 218, 222, 230, 231, 240, 243, 258, 268, 270, 275, 289, 290, 297, 298, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 326, 334, 337, 348, 364, 365, 368, 370, 373, 376, 381, 388, 389, 399, 402, 403, 406, 409, 410, 411, 457, 458, 459, 460, 482, 560, 574, 575, 581, 582, 584, 623, 651, 652, 665, 667, 669, 671, 680, 821, 852, 853, 892, 893, 894, 895, 897, 898, 970, 976, 981, 984, 991, 994, 995, 997, 1000, 1003, 1004, 1006, 1011, 1012, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "splinetransform": [4, 201, 316, 867, 990, 1035, 1037, 1038], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 56, 58, 71, 72, 91, 92, 100, 104, 109, 110, 111, 118, 120, 128, 133, 136, 149, 152, 153, 156, 160, 161, 164, 167, 170, 171, 176, 178, 190, 191, 192, 208, 212, 215, 216, 219, 222, 229, 236, 237, 239, 246, 247, 248, 254, 255, 256, 261, 263, 267, 271, 272, 277, 279, 281, 284, 286, 289, 290, 291, 292, 308, 313, 317, 319, 322, 324, 325, 329, 330, 334, 335, 343, 345, 347, 348, 349, 364, 365, 368, 370, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 385, 387, 388, 392, 398, 400, 402, 403, 405, 407, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 454, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 493, 495, 496, 497, 501, 502, 503, 505, 507, 508, 512, 515, 516, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 713, 719, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 746, 747, 749, 774, 775, 776, 778, 779, 780, 781, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 917, 918, 919, 920, 921, 923, 924, 936, 937, 938, 941, 946, 948, 950, 951, 964, 969, 970, 971, 972, 974, 975, 976, 977, 981, 982, 984, 987, 988, 990, 991, 993, 996, 1001, 1002, 1004, 1006, 1010, 1013, 1015, 1017, 1019, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "extrapol": [4, 152, 179, 201, 232, 264, 871, 980, 990, 996, 1035, 1037], "option": [4, 30, 46, 52, 103, 118, 126, 158, 165, 181, 184, 201, 264, 270, 314, 347, 352, 358, 364, 370, 371, 372, 374, 376, 377, 379, 381, 382, 384, 385, 387, 389, 390, 392, 396, 402, 403, 405, 406, 407, 409, 410, 413, 426, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 452, 454, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 489, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 621, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 680, 681, 682, 683, 685, 687, 688, 704, 706, 710, 721, 722, 727, 728, 729, 749, 750, 751, 756, 758, 759, 763, 766, 767, 768, 769, 770, 773, 775, 776, 779, 782, 783, 785, 789, 790, 791, 792, 793, 795, 796, 798, 803, 807, 811, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 884, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 919, 966, 969, 970, 976, 979, 980, 983, 990, 993, 995, 996, 1001, 1003, 1013, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 71, 72, 89, 95, 106, 111, 117, 119, 121, 128, 129, 132, 133, 135, 146, 147, 157, 170, 171, 176, 181, 196, 197, 200, 208, 216, 231, 232, 236, 238, 239, 240, 241, 243, 251, 257, 259, 261, 266, 268, 273, 279, 281, 285, 290, 298, 299, 300, 314, 315, 317, 318, 324, 325, 326, 353, 356, 362, 365, 368, 371, 373, 379, 382, 388, 396, 401, 405, 406, 407, 409, 475, 476, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 525, 527, 536, 832, 833, 929, 990, 1001, 1007, 1009, 1011, 1017, 1022, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "openml": [4, 71, 132, 157, 170, 200, 208, 216, 218, 230, 279, 299, 369, 392, 489, 1017, 1030, 1032, 1035], "repositori": [4, 8, 176, 319, 369, 371, 373, 374, 376, 378, 380, 384, 390, 392, 497, 1000, 1003, 1017], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 396, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 481, 488, 489, 493, 495, 496, 497, 499, 500, 501, 503, 505, 508, 514, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 572, 573, 574, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 681, 682, 683, 684, 685, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 708, 710, 711, 714, 715, 716, 718, 719, 720, 721, 722, 723, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 755, 756, 760, 761, 763, 765, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 880, 881, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 919, 924, 927, 929, 931, 932, 933, 934, 941, 942, 943, 944, 948, 951, 954, 968, 969, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 992, 993, 994, 995, 996, 1001, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "fetch_openml": [4, 5, 71, 75, 122, 132, 157, 170, 171, 172, 200, 208, 216, 218, 230, 239, 243, 279, 281, 299, 309, 313, 317, 370, 380, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "bike_shar": 4, "bike_sharing_demand": [4, 171], "version": [4, 46, 53, 55, 71, 95, 100, 112, 154, 165, 171, 172, 176, 179, 184, 198, 201, 202, 208, 214, 216, 236, 239, 243, 279, 299, 306, 308, 313, 314, 315, 316, 318, 319, 334, 347, 362, 365, 371, 375, 376, 377, 378, 379, 382, 384, 385, 387, 389, 390, 392, 395, 396, 401, 402, 405, 407, 409, 410, 412, 413, 414, 420, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 493, 494, 495, 497, 498, 501, 502, 503, 505, 507, 515, 516, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 697, 700, 701, 706, 707, 711, 714, 715, 716, 717, 719, 720, 721, 722, 723, 726, 731, 732, 733, 735, 738, 745, 746, 748, 749, 750, 751, 753, 758, 759, 760, 761, 770, 774, 775, 776, 777, 779, 781, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 802, 803, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 878, 880, 881, 882, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 910, 912, 913, 923, 924, 926, 928, 929, 936, 937, 938, 939, 940, 943, 946, 947, 948, 950, 955, 961, 966, 967, 969, 972, 974, 977, 980, 982, 984, 986, 988, 993, 994, 996, 998, 1000, 1001, 1003, 1014, 1018, 1020], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 138, 141, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 363, 364, 370, 371, 373, 374, 376, 378, 380, 381, 382, 383, 385, 387, 388, 389, 392, 393, 394, 395, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 425, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 455, 456, 457, 458, 461, 462, 464, 465, 466, 467, 468, 471, 475, 476, 477, 478, 486, 489, 493, 494, 497, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 574, 575, 577, 578, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 596, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 698, 699, 700, 701, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 722, 723, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 755, 756, 760, 761, 763, 765, 768, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 876, 880, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 907, 912, 913, 918, 926, 927, 928, 929, 931, 932, 933, 934, 941, 942, 943, 944, 945, 946, 948, 951, 953, 954, 967, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 998, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1038], "as_fram": [4, 5, 71, 75, 118, 122, 132, 157, 170, 171, 172, 188, 189, 200, 208, 216, 218, 239, 243, 281, 299, 308, 309, 313, 315, 317, 318, 370, 371, 482, 483, 484, 485, 489, 493, 494, 495, 497, 498, 503, 1032, 1033, 1034, 1035, 1038], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 106, 109, 111, 112, 116, 118, 122, 123, 124, 125, 127, 128, 129, 132, 133, 135, 138, 139, 140, 145, 148, 152, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 176, 184, 185, 187, 188, 189, 191, 193, 195, 196, 197, 200, 202, 203, 204, 207, 208, 214, 215, 216, 218, 221, 224, 225, 229, 230, 233, 235, 236, 237, 238, 239, 242, 243, 246, 249, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 286, 287, 290, 294, 297, 298, 299, 300, 304, 308, 309, 310, 313, 315, 317, 318, 319, 323, 325, 326, 327, 337, 341, 342, 343, 347, 348, 349, 352, 353, 356, 358, 362, 363, 369, 371, 372, 376, 377, 378, 381, 382, 383, 385, 388, 389, 391, 393, 396, 398, 399, 400, 402, 403, 404, 406, 407, 409, 410, 411, 412, 414, 415, 416, 419, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 512, 515, 516, 517, 519, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 705, 706, 707, 708, 711, 713, 716, 718, 719, 720, 721, 722, 723, 726, 727, 730, 731, 732, 733, 734, 735, 742, 743, 744, 746, 748, 753, 759, 760, 761, 770, 774, 775, 776, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 801, 803, 807, 808, 812, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 923, 929, 930, 941, 942, 945, 946, 950, 951, 953, 961, 966, 968, 969, 970, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 992, 993, 994, 995, 996, 1000, 1006, 1010, 1011, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "parser": [4, 5, 8, 71, 75, 122, 132, 157, 170, 171, 172, 200, 208, 216, 218, 230, 239, 243, 279, 281, 299, 309, 313, 317, 489, 1037, 1038], "panda": [4, 5, 12, 25, 70, 71, 72, 73, 75, 112, 118, 119, 122, 125, 129, 132, 157, 164, 169, 170, 171, 172, 179, 184, 189, 200, 204, 208, 216, 218, 230, 239, 240, 243, 251, 259, 261, 262, 264, 272, 273, 279, 281, 299, 308, 309, 310, 313, 316, 317, 342, 347, 348, 370, 371, 374, 375, 376, 378, 379, 389, 392, 395, 403, 426, 435, 436, 438, 440, 442, 457, 459, 461, 475, 476, 477, 478, 482, 483, 484, 485, 489, 493, 494, 495, 497, 498, 503, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 575, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 625, 626, 628, 631, 632, 633, 634, 635, 681, 682, 685, 789, 792, 793, 803, 818, 836, 841, 844, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 890, 908, 969, 970, 990, 1000, 1001, 1015, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "df": [4, 25, 27, 132, 169, 171, 179, 184, 200, 218, 251, 261, 307, 309, 348, 381, 410, 583, 584, 969, 970, 1039], "frame": [4, 16, 71, 157, 170, 171, 200, 309, 371, 376, 387, 390, 482, 483, 484, 485, 489, 493, 494, 495, 497, 498, 503, 1000, 1011, 1034], "To": [4, 8, 16, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 90, 100, 112, 122, 125, 126, 134, 138, 149, 157, 158, 161, 164, 165, 169, 170, 176, 181, 184, 188, 200, 201, 202, 204, 208, 218, 233, 234, 236, 241, 243, 251, 256, 258, 259, 261, 263, 264, 266, 268, 279, 299, 303, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 344, 348, 352, 358, 362, 363, 369, 370, 374, 376, 377, 378, 380, 381, 382, 384, 387, 389, 390, 393, 396, 398, 399, 402, 403, 404, 405, 406, 407, 409, 410, 439, 441, 442, 443, 454, 457, 460, 485, 489, 495, 496, 500, 501, 524, 530, 531, 532, 534, 536, 537, 538, 539, 550, 551, 552, 553, 557, 558, 562, 590, 620, 625, 639, 640, 645, 646, 649, 651, 652, 653, 654, 655, 656, 677, 693, 705, 720, 755, 777, 783, 792, 793, 814, 821, 863, 882, 883, 892, 893, 900, 901, 902, 903, 919, 929, 948, 967, 969, 970, 975, 976, 977, 978, 980, 981, 982, 983, 986, 987, 990, 994, 995, 996, 1003, 1004, 1006, 1010, 1012, 1013, 1015, 1022, 1025, 1027, 1028, 1029, 1031, 1033], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 56, 96, 100, 125, 134, 146, 149, 152, 157, 158, 164, 170, 171, 172, 173, 193, 202, 215, 218, 221, 237, 259, 262, 263, 265, 269, 272, 279, 281, 286, 294, 304, 313, 323, 326, 331, 334, 336, 339, 344, 347, 349, 352, 363, 365, 369, 370, 371, 374, 376, 377, 378, 381, 382, 383, 384, 389, 392, 396, 398, 400, 402, 403, 404, 406, 407, 409, 410, 411, 412, 416, 417, 418, 423, 425, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 455, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 688, 692, 714, 715, 716, 718, 724, 725, 734, 748, 755, 756, 761, 777, 780, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 920, 921, 922, 928, 929, 939, 969, 975, 976, 977, 979, 980, 990, 993, 994, 995, 996, 1001, 1003, 1010, 1013, 1014, 1015, 1019, 1022, 1025, 1028, 1030, 1033, 1035, 1036], "quick": [4, 100, 242, 376, 378, 382, 392, 599, 818, 980, 981, 990, 1004, 1013, 1019], "understand": [4, 9, 90, 112, 157, 167, 171, 236, 256, 259, 315, 316, 331, 347, 351, 357, 358, 375, 376, 377, 382, 387, 391, 402, 409, 410, 497, 818, 849, 850, 900, 901, 902, 903, 906, 969, 970, 977, 979, 996, 999, 1000, 1004, 1022, 1036], "pattern": [4, 16, 20, 63, 82, 94, 107, 152, 164, 167, 171, 184, 204, 236, 316, 347, 348, 349, 358, 373, 376, 378, 390, 399, 402, 403, 407, 409, 410, 441, 457, 459, 497, 525, 527, 534, 548, 549, 631, 701, 717, 733, 761, 780, 781, 787, 872, 972, 974, 976, 980, 981, 987, 995, 997, 1001, 1004, 1034], "let": [4, 5, 53, 55, 64, 71, 75, 95, 100, 111, 119, 122, 125, 126, 129, 152, 158, 159, 165, 170, 171, 172, 181, 189, 200, 202, 218, 221, 225, 236, 243, 256, 261, 264, 268, 347, 349, 356, 358, 371, 376, 378, 382, 387, 399, 402, 406, 409, 410, 493, 497, 503, 527, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 674, 677, 858, 865, 866, 976, 977, 978, 979, 980, 987, 988, 990, 995, 996, 1004, 1013, 1015, 1032], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 56, 95, 103, 122, 123, 152, 161, 169, 170, 171, 197, 201, 204, 208, 218, 222, 225, 233, 236, 242, 243, 247, 248, 252, 256, 261, 264, 268, 307, 309, 347, 356, 363, 365, 371, 376, 380, 382, 384, 387, 392, 399, 402, 405, 407, 409, 410, 425, 456, 458, 475, 476, 477, 524, 530, 538, 539, 543, 545, 547, 549, 551, 553, 555, 558, 561, 563, 581, 582, 584, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 674, 677, 682, 686, 697, 713, 732, 747, 825, 826, 835, 843, 850, 872, 886, 893, 895, 898, 901, 903, 929, 974, 979, 980, 987, 990, 998, 1004, 1015, 1019, 1032], "look": [4, 5, 53, 55, 95, 98, 100, 125, 126, 152, 157, 158, 165, 170, 171, 202, 221, 225, 229, 236, 252, 256, 261, 263, 299, 347, 348, 358, 363, 364, 370, 371, 374, 376, 378, 380, 382, 384, 387, 388, 402, 405, 407, 408, 409, 410, 441, 481, 482, 550, 551, 552, 553, 557, 558, 595, 596, 624, 652, 685, 872, 900, 901, 902, 903, 976, 977, 990, 994, 995, 997, 1015, 1022, 1030, 1032], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 60, 62, 115, 116, 121, 125, 128, 133, 134, 135, 149, 157, 171, 181, 189, 200, 207, 218, 239, 264, 266, 269, 271, 279, 303, 313, 319, 326, 347, 358, 362, 371, 373, 378, 399, 400, 404, 406, 410, 412, 413, 414, 430, 431, 434, 437, 438, 439, 440, 442, 483, 486, 487, 516, 524, 525, 526, 530, 531, 533, 534, 540, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 580, 625, 626, 641, 651, 652, 659, 660, 662, 665, 667, 669, 670, 671, 673, 680, 693, 696, 697, 699, 700, 701, 706, 713, 714, 715, 717, 718, 720, 721, 722, 726, 727, 728, 730, 731, 732, 735, 737, 738, 740, 742, 743, 745, 748, 756, 773, 774, 775, 776, 777, 779, 780, 785, 786, 787, 788, 816, 838, 858, 873, 966, 970, 975, 976, 981, 984, 986, 987, 994, 995, 996, 1013, 1015, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "per": [4, 10, 20, 48, 53, 64, 91, 117, 118, 122, 157, 159, 170, 171, 200, 215, 218, 243, 247, 257, 268, 270, 303, 309, 315, 342, 347, 349, 362, 371, 372, 376, 381, 382, 385, 387, 389, 400, 402, 406, 407, 408, 409, 410, 412, 439, 441, 443, 450, 454, 457, 461, 480, 493, 495, 496, 497, 501, 503, 505, 508, 516, 525, 527, 528, 529, 532, 534, 536, 542, 543, 554, 555, 562, 576, 581, 584, 603, 604, 625, 626, 634, 635, 651, 652, 659, 661, 664, 666, 667, 668, 669, 671, 685, 689, 706, 709, 713, 733, 746, 750, 751, 773, 775, 787, 788, 813, 820, 821, 822, 824, 825, 828, 830, 848, 851, 857, 859, 861, 862, 865, 866, 872, 873, 890, 892, 893, 894, 895, 896, 897, 898, 917, 918, 929, 955, 969, 972, 976, 979, 980, 981, 984, 987, 994, 995, 996, 1000, 1001, 1013, 1015, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1038], "hour": [4, 170, 171, 376, 382, 977, 999], "sundai": 4, "weekend": 4, "clearli": [4, 60, 98, 171, 234, 375, 376, 387, 389, 407, 409, 981, 987], "distinguish": [4, 20, 40, 80, 92, 100, 202, 258, 371, 378, 389, 390, 412, 969, 980, 983, 986], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 75, 86, 98, 118, 125, 158, 170, 171, 172, 189, 200, 201, 208, 218, 225, 226, 235, 247, 267, 303, 305, 307, 308, 327, 347, 348, 349, 358, 364, 371, 375, 376, 377, 378, 380, 381, 384, 387, 389, 400, 401, 402, 403, 404, 406, 407, 409, 410, 412, 434, 436, 438, 439, 440, 441, 442, 452, 454, 525, 528, 550, 551, 552, 553, 557, 558, 575, 582, 587, 620, 621, 623, 632, 651, 652, 688, 693, 698, 705, 735, 753, 759, 766, 770, 773, 778, 780, 815, 852, 853, 884, 885, 900, 901, 902, 903, 929, 949, 969, 970, 972, 974, 976, 979, 980, 983, 985, 986, 988, 990, 992, 994, 995, 996, 1004, 1015, 1029, 1030, 1031, 1034, 1036], "leisur": 4, "spread": [4, 40, 223, 262, 303, 322, 323, 324, 327, 362, 376, 402, 445, 455, 508, 869, 881, 889, 980], "peak": [4, 27, 171, 400, 406, 1036], "middl": [4, 24, 60, 100, 184, 343, 373, 987, 990], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 370, 379, 383, 392, 395, 431, 495, 624, 625, 690, 691, 693, 694, 695, 795, 811, 906, 975, 1000, 1009, 1011, 1012, 1013, 1019, 1031, 1034, 1035, 1036, 1037], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 376, 383, 431, 495, 624, 625, 690, 691, 693, 694, 695, 795, 811, 1011, 1012, 1013, 1019, 1036], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 383, 431, 495, 624, 625, 690, 691, 693, 694, 695, 795, 811, 906, 987, 1011, 1012, 1013, 1019], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 102, 106, 111, 112, 117, 118, 119, 122, 125, 126, 129, 130, 132, 134, 155, 161, 164, 171, 173, 176, 180, 188, 191, 194, 195, 197, 198, 200, 201, 204, 208, 213, 215, 218, 221, 222, 223, 224, 225, 226, 230, 232, 239, 240, 251, 256, 257, 258, 261, 262, 263, 264, 267, 270, 271, 272, 279, 281, 283, 285, 286, 294, 298, 299, 303, 304, 305, 307, 308, 309, 313, 317, 318, 331, 341, 342, 343, 344, 347, 348, 349, 352, 383, 1011], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 73, 75, 80, 82, 86, 90, 92, 95, 101, 102, 106, 111, 112, 114, 117, 119, 122, 129, 130, 132, 133, 134, 155, 156, 161, 164, 169, 170, 171, 172, 173, 176, 179, 180, 183, 184, 189, 191, 192, 195, 197, 198, 200, 201, 202, 204, 205, 208, 209, 211, 213, 215, 218, 221, 222, 223, 224, 225, 226, 230, 235, 239, 240, 242, 246, 248, 251, 256, 257, 258, 261, 263, 264, 265, 267, 268, 270, 271, 272, 273, 275, 279, 281, 283, 284, 285, 286, 289, 291, 292, 297, 298, 299, 303, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 330, 331, 332, 335, 336, 341, 342, 343, 344, 347, 348, 349, 352, 353, 378, 379, 407, 412, 431, 527, 534, 543, 624, 625, 690, 691, 693, 694, 695, 711, 795, 811, 906, 980, 983, 987, 1019, 1032, 1038], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 98, 100, 105, 106, 112, 114, 115, 117, 118, 119, 121, 122, 126, 129, 130, 132, 133, 134, 144, 154, 156, 161, 164, 165, 170, 171, 173, 176, 180, 183, 191, 192, 194, 195, 198, 199, 200, 201, 202, 204, 208, 213, 216, 218, 221, 222, 225, 226, 229, 230, 232, 234, 235, 237, 238, 239, 240, 246, 247, 248, 249, 251, 252, 256, 257, 258, 261, 263, 264, 266, 267, 268, 270, 271, 272, 274, 275, 279, 281, 283, 284, 285, 286, 289, 290, 292, 293, 294, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 313, 317, 318, 325, 327, 331, 332, 334, 341, 342, 343, 344, 347, 348, 349, 352, 353, 383, 1011], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 112, 114, 115, 122, 123, 124, 125, 126, 130, 132, 133, 144, 154, 156, 160, 161, 164, 165, 170, 171, 173, 176, 179, 180, 183, 184, 190, 194, 197, 198, 199, 200, 201, 202, 204, 206, 208, 211, 214, 216, 218, 221, 222, 223, 225, 226, 229, 230, 232, 234, 237, 238, 239, 240, 246, 248, 249, 252, 256, 257, 258, 263, 264, 265, 268, 270, 271, 275, 279, 281, 283, 297, 298, 300, 303, 304, 305, 306, 307, 308, 309, 317, 318, 322, 324, 332, 334, 338, 339, 341, 342, 343, 344, 347, 348, 349, 906, 1011], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 70, 71, 72, 73, 74, 81, 82, 85, 86, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 113, 115, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 138, 139, 145, 149, 152, 155, 157, 158, 160, 161, 164, 165, 170, 171, 172, 176, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 204, 206, 207, 208, 210, 213, 214, 218, 221, 229, 233, 234, 235, 236, 237, 238, 239, 241, 243, 246, 247, 248, 249, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 268, 269, 270, 272, 273, 275, 279, 281, 283, 285, 286, 287, 288, 291, 297, 299, 300, 303, 304, 306, 307, 309, 313, 314, 316, 318, 319, 322, 323, 324, 325, 326, 331, 333, 337, 338, 339, 342, 343, 344, 347, 348, 356, 358, 363, 370, 371, 373, 374, 376, 381, 382, 385, 387, 388, 389, 392, 393, 394, 395, 400, 402, 403, 404, 406, 407, 409, 410, 411, 412, 414, 420, 424, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 452, 453, 455, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 489, 497, 505, 506, 509, 510, 511, 521, 525, 526, 527, 528, 530, 531, 532, 533, 537, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 563, 570, 574, 575, 582, 583, 584, 586, 587, 596, 600, 601, 607, 610, 612, 615, 620, 621, 622, 623, 626, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 670, 672, 673, 677, 680, 682, 683, 685, 686, 691, 692, 695, 699, 700, 708, 709, 718, 719, 726, 735, 736, 738, 739, 740, 741, 743, 744, 748, 760, 761, 773, 774, 780, 781, 784, 786, 787, 788, 789, 790, 791, 794, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 816, 818, 821, 822, 823, 826, 827, 828, 829, 831, 840, 849, 850, 851, 852, 857, 858, 859, 864, 865, 866, 867, 868, 870, 873, 876, 880, 886, 892, 893, 895, 896, 898, 900, 901, 902, 903, 918, 926, 928, 929, 931, 933, 934, 944, 948, 951, 969, 970, 973, 974, 975, 976, 978, 980, 981, 982, 983, 990, 991, 994, 995, 998, 1003, 1006, 1010, 1011, 1012, 1013, 1015, 1018, 1020, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1035, 1036, 1037], "average_week_demand": 4, "groupbi": [4, 73, 171, 208, 218], "weekdai": [4, 171], "count": [4, 14, 25, 27, 41, 49, 53, 70, 71, 92, 133, 134, 170, 171, 200, 202, 233, 243, 270, 281, 314, 315, 348, 349, 371, 373, 380, 385, 389, 390, 400, 401, 402, 407, 409, 410, 439, 442, 482, 529, 537, 574, 581, 582, 583, 584, 587, 597, 610, 633, 690, 698, 708, 711, 721, 722, 730, 746, 775, 776, 778, 779, 827, 831, 832, 833, 841, 844, 855, 904, 906, 931, 945, 969, 972, 976, 980, 982, 983, 990, 996, 1004, 1015, 1022, 1025, 1027, 1030, 1031, 1033, 1034], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 55, 68, 71, 79, 80, 81, 82, 86, 92, 95, 98, 99, 100, 102, 103, 112, 114, 115, 118, 121, 122, 125, 126, 132, 133, 134, 139, 148, 149, 152, 157, 159, 161, 164, 167, 170, 171, 180, 182, 189, 191, 193, 196, 200, 202, 206, 207, 209, 215, 216, 217, 218, 224, 226, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 246, 247, 248, 249, 251, 252, 257, 258, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 279, 281, 292, 303, 306, 308, 309, 310, 313, 316, 319, 325, 334, 337, 342, 344, 346, 347, 349, 350, 358, 362, 368, 370, 371, 373, 376, 377, 378, 380, 381, 382, 384, 385, 387, 388, 389, 393, 399, 400, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 425, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 454, 455, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 481, 494, 495, 497, 499, 505, 512, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 576, 581, 582, 583, 584, 587, 590, 595, 599, 600, 601, 602, 603, 604, 606, 615, 620, 621, 623, 625, 626, 627, 628, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677, 681, 682, 683, 684, 685, 686, 687, 688, 697, 698, 700, 702, 705, 706, 709, 710, 716, 718, 721, 722, 723, 728, 729, 730, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 749, 766, 770, 771, 773, 775, 776, 777, 779, 780, 782, 783, 785, 787, 788, 789, 792, 793, 795, 803, 807, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 838, 839, 840, 842, 843, 845, 846, 848, 849, 850, 851, 853, 854, 856, 857, 861, 862, 864, 868, 870, 872, 873, 878, 880, 881, 883, 885, 887, 888, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 908, 912, 913, 915, 954, 955, 961, 965, 969, 970, 971, 974, 976, 977, 979, 982, 983, 984, 985, 987, 988, 993, 994, 995, 996, 1000, 1004, 1010, 1013, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 75, 79, 80, 81, 86, 88, 90, 93, 95, 98, 103, 104, 105, 106, 110, 112, 114, 115, 116, 117, 119, 124, 125, 127, 129, 130, 131, 136, 139, 141, 144, 145, 147, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 172, 173, 174, 176, 178, 182, 183, 185, 187, 188, 189, 190, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 210, 212, 213, 214, 215, 217, 218, 219, 223, 224, 225, 226, 228, 229, 232, 233, 235, 237, 238, 243, 244, 246, 247, 248, 250, 252, 254, 255, 256, 261, 262, 264, 266, 267, 271, 272, 273, 275, 277, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 310, 314, 317, 318, 319, 323, 324, 327, 329, 330, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 354, 355, 356, 357, 365, 376, 379, 385, 387, 391, 392, 397, 400, 402, 404, 406, 408, 409, 431, 434, 439, 443, 449, 457, 464, 489, 494, 495, 497, 505, 508, 512, 516, 546, 550, 553, 555, 557, 558, 562, 563, 603, 615, 624, 625, 626, 650, 651, 665, 669, 690, 691, 693, 694, 695, 696, 711, 719, 774, 776, 779, 780, 781, 795, 806, 811, 813, 814, 815, 816, 819, 830, 834, 850, 853, 865, 866, 869, 872, 892, 897, 900, 901, 906, 973, 974, 976, 977, 979, 980, 983, 984, 986, 994, 995, 996, 1000, 1001, 1010, 1011, 1013, 1017, 1023, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "_": [4, 5, 7, 8, 11, 12, 14, 20, 25, 26, 27, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 92, 95, 100, 101, 103, 105, 115, 116, 117, 144, 152, 157, 158, 159, 169, 170, 171, 176, 179, 183, 184, 185, 187, 188, 189, 192, 197, 198, 200, 202, 204, 213, 217, 222, 225, 230, 235, 243, 256, 261, 263, 264, 265, 267, 268, 270, 284, 289, 292, 300, 305, 308, 309, 310, 314, 317, 318, 319, 323, 324, 342, 347, 349, 353, 378, 382, 389, 407, 409, 410, 439, 525, 526, 527, 528, 529, 531, 532, 533, 536, 540, 559, 590, 645, 646, 656, 677, 681, 682, 683, 684, 689, 691, 693, 756, 789, 795, 803, 811, 836, 844, 865, 866, 970, 976, 977, 980, 982, 983, 984, 987, 988, 990, 995, 996, 1013, 1029], "hourli": [4, 170], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 122, 123, 124, 154, 155, 156, 160, 183, 190, 196, 213, 229, 237, 247, 248, 249, 252, 260, 261, 275, 285, 294, 300, 309, 322, 334, 337, 338, 339, 340, 690, 1011], "24": [4, 5, 66, 167, 171, 184, 281, 309, 311, 312, 313, 320, 322, 323, 380, 392, 402, 409, 410, 430, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 453, 455, 457, 462, 463, 464, 465, 466, 467, 468, 469, 482, 483, 484, 485, 489, 497, 508, 509, 510, 511, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 574, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 606, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 691, 692, 693, 695, 701, 707, 719, 738, 745, 787, 788, 789, 792, 793, 803, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 853, 855, 856, 857, 858, 861, 862, 864, 866, 867, 868, 869, 870, 872, 882, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 923, 924, 955, 961, 969, 987, 990, 998, 1018, 1020, 1022, 1030, 1031, 1032, 1033, 1035], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 20, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 65, 78, 79, 81, 82, 112, 114, 115, 116, 119, 125, 131, 144, 148, 153, 170, 171, 176, 184, 189, 190, 194, 198, 200, 201, 204, 207, 208, 216, 218, 222, 224, 232, 233, 238, 246, 248, 251, 252, 256, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 279, 285, 291, 294, 300, 303, 308, 309, 313, 317, 318, 323, 334, 347, 348, 353, 356, 363, 370, 371, 373, 376, 378, 382, 385, 389, 396, 402, 406, 409, 412, 433, 454, 462, 464, 465, 466, 467, 468, 469, 471, 474, 484, 487, 488, 507, 520, 534, 546, 547, 552, 553, 556, 581, 582, 584, 622, 625, 631, 633, 641, 642, 662, 664, 669, 673, 685, 705, 723, 738, 780, 818, 824, 838, 840, 842, 843, 848, 862, 869, 870, 871, 877, 878, 881, 882, 885, 886, 928, 929, 948, 969, 976, 980, 984, 994, 1001, 1004, 1009, 1010, 1011, 1013, 1027, 1028, 1029, 1030, 1032, 1035, 1039], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 85, 98, 111, 112, 115, 121, 125, 127, 128, 132, 133, 149, 161, 169, 170, 171, 173, 176, 181, 182, 199, 200, 201, 202, 207, 214, 218, 221, 229, 234, 235, 241, 243, 246, 247, 250, 251, 256, 261, 265, 267, 268, 272, 274, 279, 281, 283, 286, 287, 289, 299, 300, 303, 307, 313, 316, 317, 318, 322, 323, 325, 326, 331, 333, 338, 342, 343, 348, 349, 358, 371, 373, 374, 380, 381, 382, 392, 394, 395, 400, 406, 407, 409, 410, 411, 412, 432, 437, 441, 443, 444, 445, 446, 455, 464, 465, 484, 525, 526, 527, 528, 529, 531, 537, 554, 555, 581, 584, 593, 620, 621, 623, 640, 642, 651, 654, 685, 692, 700, 714, 715, 716, 718, 720, 736, 737, 738, 742, 743, 745, 777, 784, 787, 790, 791, 796, 799, 806, 807, 810, 815, 818, 822, 832, 833, 841, 850, 851, 864, 865, 887, 888, 929, 932, 933, 944, 969, 970, 975, 976, 978, 980, 981, 983, 984, 986, 990, 994, 995, 998, 1006, 1010, 1013, 1018, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1035], "xticklabel": [4, 10, 122, 171, 309], "sun": [4, 171, 1030, 1035, 1036], "mon": [4, 171], "tue": [4, 171, 1028], "wed": [4, 171], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 115, 117, 118, 120, 122, 145, 152, 157, 158, 171, 184, 188, 189, 200, 202, 218, 229, 235, 240, 248, 259, 261, 266, 267, 268, 310, 313, 316, 352, 358, 362, 363, 371, 378, 382, 387, 389, 400, 402, 406, 407, 409, 410, 412, 413, 430, 432, 456, 508, 520, 546, 547, 548, 549, 550, 551, 556, 557, 558, 596, 599, 603, 615, 620, 625, 626, 636, 638, 651, 670, 698, 711, 717, 780, 785, 791, 796, 798, 810, 823, 826, 861, 892, 971, 972, 973, 974, 975, 976, 977, 980, 981, 986, 987, 988, 990, 992, 993, 994, 995, 1001, 1003, 1004, 1022, 1024, 1028, 1030, 1031, 1032, 1034, 1038], "fri": [4, 171, 371], "sat": [4, 171, 410], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 113, 114, 116, 122, 123, 124, 125, 126, 127, 131, 135, 138, 139, 144, 145, 148, 152, 153, 154, 155, 157, 158, 159, 170, 179, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 200, 202, 203, 205, 207, 209, 210, 214, 218, 233, 235, 237, 256, 260, 261, 265, 266, 270, 271, 274, 275, 283, 284, 287, 288, 309, 310, 331, 333, 334, 337, 347, 353, 354, 355, 624], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 113, 114, 116, 123, 124, 125, 126, 127, 131, 135, 138, 139, 144, 145, 148, 152, 153, 154, 155, 157, 158, 159, 170, 179, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 200, 202, 203, 205, 207, 209, 210, 218, 233, 235, 237, 256, 260, 261, 264, 265, 266, 270, 271, 274, 275, 284, 310, 331, 334, 337, 347, 353, 354, 355, 624], "number": [4, 5, 7, 8, 10, 12, 13, 19, 20, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 103, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 132, 134, 145, 146, 149, 160, 161, 165, 167, 170, 171, 176, 184, 189, 199, 200, 201, 202, 207, 208, 214, 215, 216, 217, 218, 221, 229, 233, 237, 240, 246, 247, 249, 251, 252, 255, 256, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 281, 283, 287, 288, 303, 305, 306, 309, 313, 314, 315, 316, 317, 318, 319, 326, 334, 338, 339, 342, 348, 349, 352, 356, 358, 363, 364, 368, 370, 371, 372, 373, 374, 376, 379, 380, 382, 383, 384, 385, 387, 388, 389, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 425, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 574, 575, 576, 577, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 698, 700, 705, 706, 707, 709, 711, 713, 716, 720, 721, 722, 723, 726, 727, 730, 732, 744, 747, 766, 770, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 912, 913, 916, 928, 929, 932, 933, 948, 949, 951, 954, 955, 972, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 994, 995, 996, 997, 1000, 1001, 1003, 1006, 1013, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "rental": [4, 171, 987], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 69, 74, 76, 86, 90, 99, 102, 104, 111, 113, 120, 121, 122, 125, 126, 129, 131, 132, 133, 135, 141, 144, 147, 149, 152, 154, 157, 158, 165, 167, 169, 170, 171, 172, 173, 179, 183, 184, 193, 196, 200, 202, 204, 205, 208, 209, 222, 230, 232, 233, 234, 235, 238, 239, 240, 248, 255, 259, 262, 264, 266, 267, 270, 271, 281, 284, 289, 292, 293, 298, 302, 303, 311, 314, 315, 317, 319, 322, 323, 326, 327, 330, 331, 334, 338, 340, 341, 347, 348, 353, 354, 355, 356, 358, 362, 364, 365, 368, 369, 370, 371, 372, 373, 378, 380, 381, 384, 385, 388, 391, 402, 406, 409, 412, 426, 430, 431, 432, 435, 438, 457, 458, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 501, 503, 513, 517, 524, 525, 527, 529, 530, 532, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 566, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 680, 690, 691, 693, 694, 695, 700, 701, 702, 705, 706, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 727, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 774, 775, 776, 777, 779, 780, 781, 784, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 839, 841, 842, 843, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 881, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 912, 942, 943, 944, 971, 972, 973, 976, 977, 980, 984, 987, 988, 994, 995, 996, 1001, 1003, 1004, 1006, 1011, 1013, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "absolut": [4, 75, 99, 122, 149, 170, 200, 202, 206, 218, 378, 402, 404, 406, 407, 409, 410, 411, 412, 413, 437, 443, 449, 450, 524, 530, 535, 538, 539, 541, 542, 543, 551, 553, 554, 555, 558, 581, 583, 584, 586, 590, 595, 612, 620, 625, 639, 642, 643, 645, 647, 649, 664, 665, 667, 669, 671, 675, 676, 697, 710, 714, 728, 729, 737, 738, 740, 745, 747, 749, 760, 785, 791, 795, 806, 809, 816, 818, 830, 832, 833, 837, 856, 861, 864, 877, 901, 903, 966, 976, 977, 990, 994, 996, 1013, 1014, 1023, 1028, 1033, 1034, 1035, 1036], "basi": [4, 6, 13, 100, 152, 157, 159, 201, 299, 316, 334, 368, 374, 377, 402, 407, 409, 445, 527, 615, 625, 632, 684, 871, 978, 990, 995, 1002, 1010, 1011, 1014, 1017, 1030, 1032, 1035], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 58, 62, 67, 72, 77, 82, 83, 90, 95, 98, 106, 112, 114, 121, 130, 138, 140, 141, 144, 145, 149, 154, 156, 157, 165, 167, 170, 182, 187, 188, 189, 193, 195, 202, 203, 206, 214, 216, 218, 224, 233, 237, 259, 260, 261, 272, 274, 279, 281, 283, 287, 288, 294, 297, 299, 303, 305, 306, 308, 316, 325, 327, 333, 340, 343, 362, 402, 404, 407, 462, 463, 464, 465, 466, 467, 468, 469, 470, 505, 529, 548, 549, 550, 551, 552, 553, 556, 557, 558, 599, 620, 624, 625, 641, 642, 662, 665, 667, 673, 684, 685, 689, 692, 697, 698, 733, 749, 782, 783, 789, 849, 850, 861, 862, 864, 871, 878, 879, 900, 901, 902, 903, 948, 976, 978, 983, 990, 994, 995, 1013, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "977": [4, 406], "rescal": [4, 46, 47, 55, 100, 181, 188, 224, 303, 344, 404, 414, 462, 463, 464, 465, 466, 467, 468, 469, 526, 531, 639, 642, 645, 864, 870, 894, 895, 896, 897, 898, 980, 990, 1014, 1026, 1027], "variabl": [4, 9, 11, 12, 16, 37, 70, 115, 119, 122, 125, 126, 140, 141, 144, 149, 159, 160, 164, 165, 171, 172, 176, 184, 189, 200, 204, 205, 218, 223, 252, 261, 264, 271, 308, 309, 310, 358, 362, 364, 371, 373, 374, 376, 378, 380, 381, 384, 389, 402, 403, 404, 405, 407, 409, 410, 411, 443, 475, 476, 477, 480, 492, 494, 501, 508, 525, 527, 529, 534, 537, 546, 552, 553, 597, 599, 600, 601, 633, 643, 644, 647, 648, 654, 675, 676, 688, 702, 739, 790, 791, 794, 796, 797, 798, 799, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 817, 820, 824, 825, 855, 866, 869, 873, 881, 893, 969, 970, 972, 976, 979, 980, 981, 982, 983, 985, 987, 988, 990, 994, 996, 1000, 1001, 1003, 1006, 1007, 1009, 1011, 1022, 1027, 1030, 1032, 1035, 1037], "rel": [4, 6, 8, 17, 20, 27, 55, 61, 100, 119, 157, 176, 180, 200, 218, 249, 287, 288, 304, 314, 317, 334, 347, 348, 371, 375, 378, 384, 389, 400, 402, 406, 409, 410, 412, 433, 436, 440, 442, 452, 514, 517, 524, 527, 530, 534, 550, 551, 552, 553, 557, 558, 559, 597, 642, 651, 652, 664, 665, 667, 683, 687, 721, 739, 789, 792, 793, 795, 803, 811, 816, 819, 832, 833, 837, 849, 850, 861, 862, 872, 888, 892, 893, 894, 897, 899, 900, 901, 902, 903, 976, 977, 980, 982, 983, 984, 986, 1003, 1011], "so": [4, 9, 12, 16, 17, 42, 48, 55, 56, 61, 65, 81, 118, 121, 124, 131, 152, 157, 170, 172, 176, 180, 200, 201, 229, 236, 261, 281, 287, 288, 291, 298, 299, 304, 309, 310, 314, 325, 334, 342, 347, 349, 356, 358, 362, 363, 364, 370, 371, 375, 376, 378, 380, 381, 382, 384, 385, 389, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 489, 501, 502, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 688, 698, 701, 709, 718, 733, 748, 780, 787, 788, 789, 792, 793, 795, 796, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 882, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 929, 946, 955, 969, 970, 972, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 990, 992, 993, 994, 995, 1001, 1004, 1013, 1014, 1015, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038], "error": [4, 5, 7, 13, 17, 27, 75, 78, 79, 81, 99, 105, 110, 111, 115, 118, 119, 122, 126, 136, 149, 152, 164, 167, 170, 184, 189, 196, 200, 202, 206, 207, 214, 218, 232, 235, 236, 252, 254, 257, 261, 262, 266, 275, 277, 287, 288, 317, 333, 342, 347, 348, 373, 374, 376, 378, 379, 380, 381, 385, 387, 389, 393, 396, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 430, 436, 437, 440, 442, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 489, 496, 508, 517, 524, 526, 527, 530, 531, 535, 536, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 568, 574, 575, 581, 583, 584, 585, 587, 588, 589, 591, 592, 593, 599, 603, 604, 622, 625, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 681, 682, 683, 685, 686, 689, 691, 694, 695, 702, 705, 713, 714, 715, 719, 732, 735, 736, 737, 738, 739, 740, 742, 743, 745, 748, 756, 770, 774, 780, 781, 789, 790, 791, 792, 793, 795, 796, 798, 803, 807, 811, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 840, 842, 843, 844, 847, 849, 850, 852, 853, 855, 857, 858, 859, 864, 865, 866, 871, 872, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 910, 911, 912, 913, 916, 943, 964, 967, 969, 970, 971, 973, 974, 975, 977, 981, 984, 988, 990, 994, 995, 996, 1002, 1013, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "easili": [4, 9, 31, 146, 173, 203, 216, 234, 236, 240, 243, 261, 263, 270, 286, 305, 376, 378, 389, 390, 403, 409, 410, 412, 442, 974, 976, 977, 990, 994, 995, 996, 1007, 1010, 1015, 1028], "interpret": [4, 27, 149, 159, 167, 168, 169, 171, 174, 200, 201, 216, 218, 255, 261, 263, 264, 300, 304, 307, 315, 347, 349, 362, 374, 376, 377, 382, 384, 385, 389, 391, 400, 402, 403, 408, 410, 445, 457, 458, 460, 489, 534, 565, 604, 632, 636, 646, 665, 666, 684, 685, 688, 694, 721, 745, 750, 751, 775, 782, 783, 795, 804, 815, 816, 818, 821, 853, 865, 872, 948, 974, 976, 980, 981, 987, 990, 996, 1000, 1006, 1014, 1022, 1023, 1027, 1030, 1035, 1036, 1037], "fraction": [4, 25, 27, 123, 125, 200, 208, 218, 342, 348, 400, 406, 409, 431, 432, 442, 443, 449, 450, 508, 520, 550, 551, 552, 553, 557, 558, 559, 583, 586, 595, 659, 660, 661, 664, 669, 670, 671, 696, 714, 715, 716, 726, 784, 786, 791, 795, 816, 817, 831, 859, 894, 895, 896, 900, 901, 902, 903, 946, 976, 980, 983, 987, 988, 990, 995, 996, 1001, 1023, 1024, 1025, 1036], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 97, 112, 117, 118, 121, 123, 153, 159, 167, 178, 188, 219, 271, 283, 287, 288, 294, 303, 329, 345, 348, 352, 354, 355, 362, 381, 382, 388, 389, 399, 400, 402, 404, 405, 407, 409, 410, 412, 413, 414, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 447, 450, 452, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 491, 502, 504, 505, 506, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 576, 577, 590, 603, 620, 624, 625, 628, 630, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 667, 669, 670, 671, 672, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 709, 736, 773, 787, 789, 792, 793, 795, 803, 810, 816, 841, 848, 849, 850, 856, 857, 861, 862, 864, 867, 868, 869, 871, 880, 881, 886, 887, 888, 889, 892, 893, 897, 900, 901, 902, 903, 904, 906, 909, 916, 969, 975, 976, 977, 979, 980, 982, 983, 984, 986, 990, 994, 995, 996, 1014, 1029, 1030, 1032, 1033, 1036, 1037], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 176, 178, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 224, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 347, 348, 352, 353, 354, 355, 356, 362, 364, 365, 368, 371, 373, 376, 379, 381, 382, 385, 387, 389, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 418, 420, 424, 425, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 494, 502, 503, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 568, 570, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 687, 690, 691, 693, 694, 695, 704, 715, 727, 742, 780, 787, 788, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 921, 940, 948, 964, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 987, 988, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 56, 57, 58, 61, 65, 68, 69, 76, 79, 80, 84, 87, 95, 98, 100, 104, 105, 106, 109, 112, 117, 119, 120, 126, 132, 144, 149, 164, 176, 187, 189, 201, 208, 217, 220, 222, 227, 229, 235, 236, 243, 245, 253, 263, 268, 270, 281, 287, 288, 290, 303, 307, 310, 313, 315, 316, 347, 348, 349, 356, 358, 362, 363, 364, 365, 368, 373, 374, 376, 377, 378, 382, 383, 385, 387, 388, 391, 393, 396, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 497, 505, 507, 515, 518, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 703, 704, 723, 724, 727, 728, 733, 734, 755, 760, 761, 766, 770, 775, 780, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 880, 881, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 907, 915, 929, 936, 938, 939, 940, 941, 946, 949, 964, 965, 968, 969, 970, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 990, 992, 993, 994, 995, 996, 997, 1000, 1004, 1006, 1010, 1012, 1013, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "minim": [4, 12, 57, 66, 78, 79, 125, 152, 160, 179, 196, 198, 200, 202, 204, 208, 218, 221, 232, 233, 246, 251, 262, 270, 271, 303, 313, 316, 331, 342, 352, 365, 375, 376, 379, 384, 387, 389, 400, 402, 404, 407, 409, 433, 434, 438, 439, 443, 456, 531, 533, 540, 550, 551, 552, 553, 557, 558, 602, 603, 604, 634, 639, 642, 650, 651, 660, 664, 665, 667, 671, 672, 680, 685, 687, 688, 740, 772, 839, 841, 850, 868, 880, 886, 900, 901, 902, 903, 971, 976, 977, 980, 983, 984, 990, 992, 993, 994, 995, 1000, 1002, 1013, 1014, 1017, 1026, 1031, 1032], "squar": [4, 5, 61, 71, 79, 80, 81, 84, 87, 96, 106, 115, 126, 128, 149, 152, 157, 167, 170, 178, 179, 181, 184, 189, 196, 200, 202, 205, 210, 217, 218, 219, 232, 233, 235, 249, 270, 271, 275, 307, 315, 316, 318, 331, 347, 368, 373, 376, 382, 385, 389, 402, 404, 405, 407, 408, 409, 413, 414, 425, 433, 435, 436, 437, 439, 440, 442, 443, 450, 452, 453, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 494, 524, 530, 532, 534, 536, 540, 542, 545, 547, 549, 551, 552, 553, 555, 558, 561, 563, 583, 584, 585, 588, 589, 591, 592, 593, 597, 598, 599, 602, 604, 608, 615, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 675, 676, 678, 679, 680, 681, 683, 685, 687, 689, 702, 714, 715, 716, 742, 743, 750, 751, 755, 761, 762, 777, 818, 825, 826, 834, 835, 838, 840, 842, 843, 850, 853, 872, 892, 893, 895, 897, 898, 899, 901, 903, 927, 953, 966, 971, 973, 974, 983, 984, 988, 994, 996, 1002, 1013, 1014, 1017, 1022, 1025, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 58, 61, 63, 71, 72, 74, 83, 85, 86, 95, 96, 97, 103, 105, 110, 111, 112, 117, 118, 119, 121, 123, 125, 129, 132, 133, 134, 135, 136, 138, 139, 147, 148, 149, 151, 152, 157, 159, 162, 163, 164, 166, 169, 170, 178, 181, 184, 188, 189, 195, 200, 202, 204, 205, 207, 208, 217, 218, 219, 228, 229, 230, 235, 241, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 277, 281, 282, 288, 295, 303, 305, 316, 317, 319, 337, 342, 348, 349, 353, 362, 363, 364, 365, 368, 374, 376, 379, 380, 383, 384, 385, 386, 392, 393, 396, 397, 400, 402, 405, 407, 410, 411, 413, 414, 415, 416, 417, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 454, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 488, 489, 491, 494, 495, 517, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 568, 569, 570, 572, 573, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 680, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 700, 701, 704, 705, 706, 709, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 774, 775, 776, 777, 779, 780, 781, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 801, 803, 807, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 878, 880, 881, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 911, 912, 913, 915, 917, 918, 921, 923, 924, 925, 936, 938, 940, 948, 964, 968, 975, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1004, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "condit": [4, 12, 25, 27, 82, 120, 125, 167, 168, 170, 174, 189, 202, 205, 218, 236, 264, 316, 356, 382, 387, 391, 399, 400, 402, 404, 407, 409, 411, 444, 457, 464, 465, 466, 471, 489, 506, 516, 517, 529, 532, 533, 534, 536, 538, 540, 542, 543, 555, 620, 625, 626, 636, 643, 644, 645, 647, 648, 649, 663, 665, 666, 667, 668, 675, 676, 680, 690, 705, 710, 711, 728, 729, 785, 827, 828, 829, 830, 831, 850, 853, 856, 865, 866, 869, 873, 929, 974, 976, 977, 978, 980, 982, 983, 985, 990, 996, 1000, 1013, 1017, 1023, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1036, 1037, 1038], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 135, 139, 140, 141, 145, 149, 152, 153, 154, 157, 158, 159, 161, 163, 164, 166, 167, 169, 170, 171, 172, 176, 178, 179, 180, 183, 184, 188, 195, 200, 201, 202, 204, 205, 207, 208, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 236, 237, 243, 246, 247, 251, 252, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 276, 279, 281, 284, 287, 288, 289, 292, 294, 303, 308, 309, 310, 314, 315, 316, 318, 319, 323, 327, 330, 331, 333, 334, 336, 337, 347, 348, 349, 352, 355, 356, 358, 362, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 603, 604, 605, 612, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 702, 704, 705, 711, 713, 714, 719, 721, 722, 726, 727, 729, 734, 735, 737, 738, 740, 742, 743, 745, 748, 750, 751, 755, 756, 758, 759, 760, 761, 762, 765, 767, 768, 769, 770, 773, 774, 775, 776, 779, 780, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 915, 916, 919, 923, 924, 925, 927, 928, 929, 931, 933, 937, 938, 939, 940, 941, 943, 944, 945, 948, 950, 951, 954, 955, 961, 964, 966, 967, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1004, 1007, 1009, 1010, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "median": [4, 37, 71, 75, 80, 81, 125, 164, 165, 170, 202, 206, 217, 231, 303, 314, 316, 317, 371, 404, 409, 411, 433, 447, 451, 454, 467, 545, 547, 551, 558, 590, 620, 623, 628, 663, 664, 672, 714, 745, 839, 870, 882, 901, 903, 970, 990, 996, 1025, 1026], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 58, 60, 61, 96, 115, 116, 125, 128, 135, 149, 152, 157, 167, 169, 170, 171, 176, 189, 194, 199, 200, 204, 206, 218, 254, 259, 261, 267, 268, 274, 277, 308, 347, 348, 362, 371, 373, 378, 382, 389, 399, 401, 404, 406, 407, 408, 409, 410, 442, 445, 455, 491, 508, 531, 533, 540, 544, 550, 551, 552, 553, 556, 557, 558, 597, 600, 601, 604, 620, 624, 651, 683, 685, 691, 695, 697, 698, 700, 702, 705, 706, 709, 710, 713, 717, 718, 719, 721, 723, 728, 729, 731, 732, 735, 739, 747, 748, 749, 774, 775, 776, 778, 779, 781, 782, 785, 813, 815, 818, 838, 869, 881, 900, 901, 902, 903, 970, 976, 978, 983, 985, 986, 988, 994, 996, 1010, 1013, 1022, 1025, 1027, 1028, 1030, 1032], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 70, 71, 85, 100, 111, 112, 115, 117, 118, 119, 120, 123, 124, 125, 126, 127, 138, 141, 143, 145, 148, 150, 152, 153, 167, 169, 170, 171, 172, 173, 176, 184, 189, 195, 196, 200, 201, 202, 204, 207, 208, 215, 216, 218, 225, 230, 235, 236, 238, 248, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 268, 269, 271, 272, 273, 277, 279, 289, 290, 297, 299, 305, 308, 309, 310, 326, 334, 342, 349, 358, 362, 363, 370, 371, 373, 379, 380, 381, 382, 387, 388, 389, 391, 392, 395, 397, 398, 400, 403, 404, 407, 409, 410, 411, 412, 419, 421, 425, 428, 429, 430, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481, 482, 486, 490, 491, 495, 497, 517, 524, 530, 532, 536, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 585, 587, 588, 589, 591, 592, 593, 595, 597, 598, 599, 601, 602, 603, 604, 620, 621, 623, 628, 629, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 705, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 839, 842, 843, 849, 850, 852, 877, 878, 880, 881, 882, 883, 887, 888, 890, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 921, 923, 924, 975, 976, 979, 980, 983, 984, 988, 990, 994, 995, 996, 1000, 1001, 1003, 1004, 1007, 1010, 1011, 1017, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "discuss": [4, 53, 58, 149, 170, 189, 221, 226, 264, 347, 358, 364, 371, 373, 376, 381, 382, 384, 387, 389, 390, 402, 404, 408, 409, 412, 491, 675, 676, 834, 835, 840, 842, 843, 970, 974, 976, 977, 980, 983, 990, 997, 1001, 1025], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 60, 62, 66, 78, 101, 102, 121, 132, 138, 139, 149, 170, 173, 193, 237, 239, 256, 266, 273, 352, 358, 362, 363, 364, 365, 378, 381, 384, 389, 402, 404, 406, 409, 410, 412, 413, 436, 437, 440, 442, 452, 516, 525, 531, 552, 553, 575, 595, 651, 652, 665, 667, 672, 680, 681, 682, 686, 718, 748, 789, 792, 793, 803, 859, 892, 893, 900, 901, 902, 903, 970, 971, 975, 976, 977, 978, 979, 983, 990, 993, 994, 995, 1007, 1009, 1013, 1014, 1024, 1025, 1029, 1031, 1033], "focu": [4, 9, 27, 95, 112, 152, 252, 291, 362, 381, 400, 409, 546, 547, 552, 554, 555, 671, 977, 983, 990, 1000, 1001], "intuit": [4, 31, 44, 52, 62, 100, 112, 115, 122, 144, 152, 170, 171, 201, 202, 223, 229, 262, 286, 305, 308, 331, 334, 348, 376, 389, 400, 402, 404, 406, 408, 774, 775, 776, 779, 863, 972, 976, 977, 980, 981, 987, 990, 991, 995, 1004, 1013, 1015, 1022], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 103, 111, 112, 114, 115, 117, 118, 119, 121, 122, 125, 149, 152, 158, 161, 164, 170, 171, 172, 176, 179, 184, 186, 189, 200, 202, 206, 216, 217, 218, 225, 229, 235, 236, 237, 247, 258, 259, 261, 262, 263, 264, 267, 270, 279, 281, 287, 288, 300, 303, 307, 308, 309, 310, 315, 317, 319, 323, 347, 348, 349, 358, 362, 363, 364, 370, 371, 372, 375, 376, 378, 381, 382, 384, 389, 390, 396, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 447, 450, 453, 456, 457, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 486, 487, 489, 502, 507, 508, 516, 524, 527, 528, 529, 530, 531, 533, 534, 535, 537, 540, 541, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 574, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 620, 621, 623, 627, 633, 635, 636, 637, 638, 639, 640, 645, 646, 648, 651, 652, 653, 654, 655, 656, 659, 660, 661, 664, 665, 667, 669, 670, 671, 672, 675, 680, 685, 687, 689, 697, 698, 705, 713, 714, 715, 716, 727, 728, 731, 756, 771, 772, 773, 775, 777, 785, 787, 788, 789, 792, 793, 799, 803, 808, 810, 813, 814, 815, 816, 817, 820, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 849, 850, 855, 865, 866, 867, 869, 870, 872, 875, 881, 882, 886, 889, 892, 893, 894, 897, 898, 900, 901, 902, 903, 904, 918, 929, 931, 932, 943, 949, 951, 954, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 994, 995, 996, 1000, 1001, 1006, 1010, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "root": [4, 16, 80, 149, 181, 356, 373, 376, 384, 402, 435, 494, 534, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 632, 743, 900, 901, 902, 903, 904, 906, 986, 996, 1024, 1030, 1031, 1032, 1033, 1036, 1037], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 58, 60, 64, 68, 70, 75, 82, 111, 112, 117, 124, 126, 127, 132, 146, 149, 153, 164, 167, 169, 170, 172, 184, 189, 195, 196, 200, 202, 204, 206, 218, 224, 230, 233, 234, 239, 242, 254, 255, 257, 258, 259, 261, 262, 264, 268, 270, 271, 277, 279, 281, 283, 291, 294, 300, 303, 308, 313, 314, 316, 317, 318, 319, 322, 323, 325, 326, 347, 348, 358, 362, 365, 368, 371, 376, 378, 387, 388, 389, 391, 393, 397, 400, 407, 408, 409, 412, 413, 419, 430, 434, 437, 438, 439, 443, 450, 462, 513, 528, 542, 543, 544, 546, 548, 550, 551, 552, 554, 555, 557, 558, 560, 562, 571, 595, 603, 613, 621, 624, 627, 631, 632, 633, 634, 635, 636, 651, 652, 656, 659, 661, 667, 668, 669, 681, 683, 685, 687, 689, 789, 792, 793, 795, 803, 811, 813, 814, 815, 817, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 858, 864, 887, 888, 892, 894, 897, 900, 902, 970, 972, 975, 981, 986, 988, 1000, 1001, 1010, 1011, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "studi": [4, 60, 125, 200, 218, 264, 267, 268, 347, 371, 373, 406, 411, 689, 701, 750, 751, 817, 978, 980, 994, 1006], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 73, 74, 75, 81, 85, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 218, 221, 222, 223, 226, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 352, 353, 354, 355, 356, 358, 368, 369, 370, 371, 374, 376, 378, 381, 383, 385, 388, 389, 393, 396, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 424, 425, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 491, 493, 495, 498, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 699, 704, 718, 727, 733, 734, 748, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 780, 781, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 912, 917, 918, 940, 942, 943, 944, 948, 951, 954, 967, 969, 970, 971, 972, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 987, 990, 994, 995, 996, 1001, 1006, 1010, 1011, 1013, 1017, 1019, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "hist": [4, 25, 27, 53, 75, 114, 118, 200, 202, 233, 267, 286, 303, 307, 309, 317, 409], "bin": [4, 24, 25, 27, 53, 75, 114, 118, 200, 233, 267, 286, 303, 304, 305, 306, 307, 309, 310, 374, 384, 392, 400, 408, 409, 431, 432, 441, 454, 554, 555, 855, 857, 871, 931, 1014, 1030, 1031, 1032, 1036], "30": [4, 8, 10, 14, 19, 34, 39, 40, 54, 60, 71, 73, 78, 98, 101, 103, 112, 121, 125, 131, 138, 149, 152, 153, 156, 158, 171, 176, 179, 194, 198, 200, 218, 221, 222, 226, 234, 238, 250, 261, 262, 266, 275, 277, 281, 290, 291, 307, 308, 309, 318, 319, 322, 323, 327, 332, 335, 337, 340, 362, 371, 373, 381, 382, 406, 410, 413, 437, 443, 450, 493, 528, 531, 532, 534, 536, 563, 585, 588, 589, 591, 641, 685, 727, 775, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 873, 888, 901, 969, 974, 980, 981, 983, 988, 1011, 1022, 1023, 1029, 1030, 1031], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 73, 95, 99, 111, 121, 125, 126, 158, 159, 160, 170, 176, 179, 200, 203, 204, 208, 215, 218, 232, 233, 235, 236, 243, 256, 285, 286, 299, 304, 305, 306, 307, 313, 316, 318, 334, 340, 343, 349, 370, 373, 376, 379, 381, 385, 386, 387, 388, 389, 399, 400, 403, 406, 407, 408, 409, 410, 411, 412, 414, 420, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 438, 441, 442, 443, 447, 450, 451, 454, 457, 458, 460, 461, 462, 464, 465, 475, 476, 477, 482, 496, 502, 509, 510, 511, 513, 517, 521, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 613, 615, 620, 621, 622, 623, 624, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 689, 690, 691, 692, 693, 694, 695, 714, 715, 716, 720, 737, 738, 740, 742, 743, 745, 746, 753, 759, 760, 763, 764, 766, 770, 771, 772, 773, 777, 787, 788, 789, 792, 793, 795, 803, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 909, 910, 911, 912, 913, 914, 918, 923, 928, 939, 940, 944, 953, 955, 961, 966, 967, 970, 972, 974, 976, 977, 978, 979, 980, 982, 983, 984, 985, 987, 988, 992, 993, 994, 995, 996, 1000, 1001, 1004, 1006, 1010, 1011, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "annot": [4, 9, 26, 134, 176, 222, 265, 268, 347, 376, 377, 378, 402, 709, 906, 980, 996, 1031], "log": [4, 20, 25, 26, 27, 78, 95, 112, 125, 132, 145, 149, 153, 154, 156, 157, 158, 161, 185, 188, 189, 193, 200, 205, 210, 218, 233, 235, 250, 291, 308, 347, 371, 373, 374, 376, 380, 384, 385, 389, 399, 400, 402, 403, 404, 407, 409, 410, 412, 441, 444, 453, 458, 463, 464, 465, 466, 467, 468, 469, 525, 529, 534, 542, 543, 544, 546, 548, 550, 552, 555, 557, 583, 584, 586, 587, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 635, 638, 641, 651, 652, 662, 664, 669, 673, 733, 743, 747, 787, 788, 789, 792, 793, 803, 827, 828, 829, 830, 831, 832, 833, 837, 848, 849, 856, 857, 886, 889, 894, 897, 899, 900, 902, 927, 969, 972, 974, 976, 977, 982, 983, 985, 988, 990, 994, 996, 1000, 1001, 1013, 1024, 1025, 1026, 1031, 1032, 1033, 1036], "describ": [4, 56, 132, 149, 170, 218, 234, 261, 270, 358, 362, 363, 369, 371, 373, 375, 376, 378, 381, 384, 389, 390, 399, 402, 404, 405, 406, 407, 409, 410, 455, 462, 466, 467, 484, 486, 488, 489, 490, 493, 494, 495, 496, 497, 498, 503, 509, 510, 511, 521, 600, 601, 638, 652, 707, 787, 788, 827, 829, 867, 929, 969, 972, 975, 976, 979, 980, 982, 986, 994, 995, 996, 1003, 1006, 1012, 1013, 1030, 1032], "weather": [4, 157, 171, 412, 976, 980], "includ": [4, 32, 55, 80, 118, 122, 124, 169, 170, 172, 184, 200, 204, 218, 236, 262, 281, 298, 303, 316, 317, 319, 334, 339, 347, 349, 358, 362, 363, 370, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 389, 390, 392, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 437, 439, 443, 449, 459, 462, 463, 464, 465, 466, 467, 468, 469, 482, 483, 484, 489, 493, 494, 495, 497, 498, 503, 527, 534, 550, 557, 567, 625, 631, 639, 640, 645, 653, 654, 655, 658, 674, 681, 682, 690, 706, 721, 722, 727, 729, 730, 763, 775, 776, 779, 785, 789, 791, 792, 793, 802, 803, 806, 809, 815, 818, 840, 842, 843, 844, 865, 866, 867, 871, 889, 900, 902, 904, 906, 912, 913, 916, 918, 921, 969, 976, 979, 980, 981, 983, 984, 990, 994, 995, 996, 1000, 1001, 1003, 1004, 1013, 1015, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "both": [4, 5, 7, 9, 10, 14, 16, 20, 25, 26, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 103, 109, 111, 115, 118, 119, 122, 131, 132, 135, 144, 145, 149, 152, 159, 161, 169, 170, 171, 172, 179, 184, 186, 188, 189, 200, 201, 202, 204, 205, 206, 208, 218, 225, 235, 236, 237, 246, 247, 248, 249, 250, 251, 261, 262, 263, 264, 268, 270, 272, 276, 281, 293, 303, 307, 308, 313, 315, 319, 324, 325, 331, 336, 342, 347, 348, 349, 356, 358, 362, 363, 364, 369, 370, 371, 372, 374, 376, 378, 382, 383, 385, 387, 388, 389, 390, 392, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 412, 415, 430, 439, 440, 445, 452, 455, 461, 468, 475, 476, 477, 478, 481, 482, 489, 490, 493, 495, 498, 500, 501, 502, 527, 531, 533, 540, 544, 548, 549, 550, 556, 557, 558, 559, 560, 570, 581, 582, 584, 590, 600, 601, 620, 625, 626, 636, 650, 651, 652, 665, 667, 669, 671, 680, 692, 697, 705, 709, 723, 728, 749, 753, 759, 766, 770, 775, 780, 781, 785, 792, 793, 795, 811, 821, 849, 850, 864, 866, 868, 880, 885, 890, 892, 893, 900, 902, 916, 930, 943, 955, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 993, 994, 995, 996, 1000, 1001, 1003, 1004, 1010, 1013, 1014, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "numer": [4, 19, 66, 71, 75, 120, 122, 132, 149, 157, 160, 171, 172, 189, 200, 218, 241, 243, 291, 309, 316, 349, 370, 371, 373, 379, 381, 382, 387, 388, 389, 402, 404, 409, 410, 411, 412, 414, 415, 433, 436, 440, 452, 464, 465, 468, 471, 482, 483, 484, 489, 493, 494, 495, 497, 498, 503, 524, 526, 528, 533, 540, 560, 574, 583, 604, 610, 613, 620, 623, 625, 626, 639, 645, 647, 665, 680, 683, 687, 707, 780, 784, 789, 792, 793, 795, 803, 811, 814, 815, 816, 819, 827, 828, 829, 830, 831, 849, 850, 855, 860, 865, 866, 873, 904, 905, 906, 912, 913, 928, 929, 969, 970, 976, 977, 981, 988, 990, 991, 996, 1003, 1004, 1006, 1015, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "categor": [4, 71, 110, 117, 132, 136, 167, 170, 171, 172, 200, 218, 241, 243, 310, 316, 318, 319, 364, 368, 370, 371, 378, 381, 389, 403, 410, 459, 460, 482, 483, 489, 498, 554, 555, 574, 575, 600, 601, 625, 626, 641, 651, 652, 662, 673, 702, 815, 827, 828, 829, 830, 831, 853, 855, 859, 860, 863, 865, 866, 873, 887, 888, 970, 976, 987, 988, 996, 1000, 1001, 1002, 1003, 1004, 1015, 1017, 1022, 1023, 1026, 1027, 1030, 1032, 1034, 1037, 1038], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 102, 118, 119, 120, 143, 145, 146, 148, 149, 150, 152, 157, 167, 170, 171, 173, 176, 178, 179, 180, 184, 201, 204, 215, 217, 218, 219, 236, 240, 248, 249, 251, 256, 258, 261, 262, 263, 266, 268, 270, 287, 288, 291, 310, 316, 337, 342, 347, 348, 349, 353, 356, 358, 362, 365, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 384, 387, 388, 389, 390, 396, 399, 406, 407, 409, 410, 411, 412, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 455, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 485, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 503, 508, 517, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 600, 601, 602, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 688, 690, 694, 697, 698, 708, 718, 722, 735, 747, 748, 749, 778, 780, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 937, 970, 972, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 994, 996, 1001, 1004, 1012, 1013, 1014, 1015, 1022, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "alreadi": [4, 6, 10, 16, 55, 58, 100, 112, 132, 149, 170, 230, 237, 242, 262, 268, 281, 316, 319, 376, 377, 381, 387, 389, 400, 404, 406, 408, 409, 414, 430, 492, 516, 526, 560, 561, 627, 639, 642, 657, 658, 659, 660, 661, 667, 669, 670, 671, 678, 679, 760, 827, 847, 855, 861, 862, 864, 869, 875, 877, 878, 879, 881, 882, 883, 889, 892, 893, 915, 939, 969, 986, 990, 991, 1001, 1006, 1011, 1015, 1019, 1023, 1027, 1030, 1034, 1035, 1036, 1037], "expand": [4, 16, 49, 65, 231, 309, 314, 358, 368, 409, 437, 443, 492, 550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 980, 1023, 1030, 1031, 1038], "complementari": [4, 410], "column": [4, 20, 21, 60, 69, 72, 75, 76, 90, 119, 121, 122, 125, 129, 132, 149, 157, 164, 167, 169, 170, 171, 172, 189, 200, 201, 204, 208, 218, 238, 240, 251, 261, 262, 272, 273, 299, 308, 310, 315, 316, 317, 318, 347, 348, 349, 362, 370, 371, 373, 376, 378, 382, 385, 387, 388, 389, 399, 402, 403, 405, 407, 409, 410, 411, 414, 417, 444, 446, 457, 459, 460, 464, 465, 471, 480, 481, 482, 483, 484, 485, 487, 489, 493, 494, 495, 497, 498, 501, 502, 503, 504, 506, 508, 519, 524, 527, 530, 535, 537, 541, 548, 550, 551, 557, 558, 559, 560, 574, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 603, 620, 623, 625, 626, 627, 639, 641, 645, 651, 653, 655, 657, 658, 662, 673, 678, 679, 690, 706, 711, 712, 721, 722, 730, 746, 755, 760, 761, 762, 765, 775, 776, 779, 780, 789, 792, 793, 803, 813, 818, 823, 826, 827, 828, 829, 830, 831, 832, 833, 852, 856, 857, 858, 859, 865, 866, 867, 871, 872, 873, 874, 876, 892, 894, 897, 900, 902, 908, 912, 913, 918, 929, 943, 956, 957, 959, 967, 969, 970, 976, 978, 980, 981, 988, 990, 995, 1001, 1022, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 221, 222, 223, 226, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 369, 370, 371, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 393, 396, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 423, 424, 425, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 480, 486, 487, 488, 491, 493, 494, 495, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 699, 703, 704, 717, 727, 734, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 780, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 916, 928, 929, 931, 940, 941, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 969, 970, 971, 972, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 990, 992, 993, 994, 995, 996, 1001, 1006, 1010, 1011, 1013, 1014, 1015, 1019, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039], "drop": [4, 5, 71, 75, 86, 157, 169, 170, 171, 173, 200, 204, 218, 243, 271, 309, 315, 318, 348, 380, 384, 403, 407, 409, 457, 460, 560, 561, 562, 563, 688, 693, 695, 774, 781, 851, 865, 871, 970, 976, 980, 988, 990, 1000, 1022, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 105, 114, 115, 119, 121, 128, 131, 135, 141, 145, 156, 157, 161, 164, 169, 170, 181, 185, 187, 189, 192, 193, 194, 200, 205, 209, 212, 214, 215, 217, 218, 222, 223, 226, 229, 233, 234, 238, 239, 246, 248, 250, 251, 257, 258, 262, 263, 268, 270, 271, 279, 281, 286, 287, 288, 291, 292, 293, 300, 303, 307, 310, 323, 325, 327, 330, 333, 334, 337, 338, 339, 340, 341, 342, 344, 347, 348, 353, 354, 355, 356, 378, 385, 389, 400, 402, 410, 414, 431, 438, 457, 460, 524, 526, 529, 530, 532, 534, 536, 543, 578, 605, 624, 625, 678, 679, 694, 755, 771, 772, 773, 774, 795, 811, 820, 861, 862, 869, 870, 872, 875, 877, 878, 879, 881, 882, 883, 906, 908, 912, 913, 931, 955, 961, 970, 980, 987, 990, 995, 1012, 1014, 1030, 1032, 1034], "holidai": [4, 171], "workingdai": [4, 171], "temp": [4, 171], "feel_temp": [4, 171], "humid": [4, 171, 987], "windspe": [4, 171], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 362, 363, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 385, 387, 388, 389, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 425, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 755, 756, 758, 759, 760, 761, 763, 765, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 912, 913, 918, 923, 924, 926, 928, 929, 931, 932, 933, 934, 941, 942, 943, 945, 946, 948, 949, 950, 951, 954, 955, 961, 969, 970, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "spring": [4, 171], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 73, 79, 81, 92, 99, 101, 104, 105, 111, 112, 118, 119, 122, 125, 126, 135, 138, 152, 157, 158, 159, 160, 170, 171, 172, 173, 179, 180, 184, 186, 200, 201, 205, 206, 208, 216, 218, 221, 224, 236, 237, 239, 243, 246, 258, 259, 261, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 281, 285, 291, 294, 298, 299, 303, 304, 309, 310, 313, 315, 316, 317, 318, 324, 334, 336, 342, 343, 347, 348, 370, 376, 377, 378, 381, 389, 393, 400, 402, 403, 404, 406, 407, 409, 410, 411, 412, 414, 415, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 508, 516, 517, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 628, 630, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 687, 688, 690, 691, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 707, 708, 711, 718, 719, 720, 721, 722, 723, 730, 734, 735, 742, 743, 746, 748, 753, 755, 759, 760, 761, 766, 770, 774, 775, 776, 777, 779, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 803, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 923, 930, 941, 942, 945, 946, 950, 951, 954, 961, 966, 967, 969, 970, 976, 980, 983, 990, 994, 995, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "6": [4, 6, 8, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 78, 79, 80, 82, 90, 95, 97, 105, 113, 125, 126, 129, 131, 138, 144, 149, 152, 155, 157, 159, 160, 164, 165, 170, 171, 176, 179, 180, 181, 184, 189, 193, 198, 200, 201, 202, 204, 214, 216, 218, 221, 222, 223, 225, 229, 232, 233, 237, 240, 241, 246, 247, 248, 249, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 266, 270, 271, 272, 273, 276, 279, 283, 286, 294, 297, 299, 300, 303, 305, 307, 308, 310, 313, 316, 317, 318, 319, 322, 323, 325, 326, 327, 334, 335, 337, 339, 342, 344, 347, 348, 349, 355, 358, 370, 371, 373, 374, 376, 381, 382, 388, 392, 394, 395, 400, 402, 403, 406, 407, 409, 410, 411, 439, 441, 442, 443, 444, 445, 446, 455, 475, 476, 477, 478, 498, 517, 523, 531, 533, 534, 540, 556, 562, 563, 586, 587, 604, 607, 608, 618, 620, 621, 623, 637, 638, 663, 682, 686, 692, 714, 720, 730, 737, 738, 742, 743, 745, 761, 777, 780, 787, 788, 790, 791, 796, 798, 799, 801, 806, 807, 810, 816, 818, 827, 828, 829, 831, 832, 833, 840, 842, 843, 844, 859, 860, 862, 865, 867, 870, 871, 876, 907, 929, 932, 934, 943, 969, 970, 974, 976, 977, 980, 990, 991, 994, 995, 996, 998, 1006, 1010, 1011, 1013, 1018, 1020, 1023, 1024, 1025, 1030, 1035, 1039], "clear": [4, 16, 55, 60, 72, 170, 171, 308, 371, 375, 376, 378, 387, 388, 389, 400, 403, 408, 906, 907, 969, 974, 1033, 1034, 1035], "9": [4, 5, 7, 9, 12, 13, 24, 26, 27, 30, 31, 32, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 95, 98, 111, 121, 122, 123, 124, 125, 130, 132, 138, 140, 141, 149, 155, 159, 165, 169, 170, 171, 181, 182, 191, 200, 213, 214, 217, 218, 221, 224, 233, 234, 235, 239, 243, 246, 247, 248, 249, 251, 255, 264, 268, 270, 279, 283, 285, 286, 289, 290, 291, 297, 298, 300, 303, 305, 306, 307, 309, 310, 318, 319, 322, 323, 325, 326, 327, 334, 338, 344, 349, 358, 373, 374, 382, 388, 392, 394, 395, 400, 403, 404, 406, 409, 410, 432, 436, 443, 450, 475, 476, 477, 478, 483, 513, 520, 527, 531, 532, 533, 540, 553, 560, 563, 576, 584, 600, 601, 620, 623, 627, 632, 640, 651, 654, 685, 692, 702, 715, 718, 733, 740, 761, 770, 771, 772, 787, 790, 792, 793, 807, 810, 816, 818, 821, 829, 830, 834, 835, 840, 843, 849, 850, 858, 864, 867, 929, 933, 969, 975, 976, 980, 984, 990, 994, 995, 998, 1006, 1010, 1015, 1018, 1020, 1023, 1024, 1025, 1027, 1036, 1038], "84": [4, 6, 70, 146, 191, 218, 300, 305, 322, 358, 373, 409, 410, 780, 803, 980, 990, 1011], "14": [4, 11, 38, 49, 60, 62, 63, 66, 74, 81, 98, 100, 144, 171, 184, 189, 191, 218, 223, 226, 229, 234, 260, 266, 267, 275, 279, 281, 295, 300, 306, 307, 318, 341, 344, 363, 371, 373, 374, 388, 392, 394, 395, 402, 406, 491, 503, 546, 547, 578, 579, 628, 636, 685, 803, 807, 858, 973, 976, 980, 990, 995, 998, 1006, 1020, 1022, 1023, 1025, 1026, 1030, 1035], "395": 4, "81": [4, 50, 243, 322, 323, 402, 692, 780, 789, 803, 980, 981, 983, 990], "0000": [4, 318], "02": [4, 12, 28, 35, 44, 50, 52, 58, 62, 64, 68, 76, 82, 83, 85, 95, 98, 114, 121, 136, 149, 154, 159, 162, 169, 170, 174, 181, 218, 229, 233, 237, 244, 256, 262, 268, 277, 280, 286, 297, 300, 301, 303, 305, 311, 327, 330, 345, 348, 353, 370, 373, 381, 406, 434, 438, 590, 651, 669, 789, 803, 871, 887, 901, 976], "13": [4, 6, 10, 11, 35, 44, 74, 100, 105, 121, 123, 124, 126, 164, 170, 176, 186, 209, 255, 262, 265, 267, 300, 303, 307, 315, 320, 334, 347, 350, 371, 373, 376, 382, 388, 406, 414, 503, 506, 525, 526, 544, 545, 575, 628, 632, 726, 807, 836, 851, 858, 884, 885, 976, 980, 981, 986, 987, 990, 995, 998, 1006, 1020, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1034], "635": [4, 609], "80": [4, 6, 11, 16, 27, 67, 81, 101, 132, 141, 146, 171, 179, 237, 300, 305, 309, 322, 337, 338, 339, 347, 354, 358, 371, 373, 376, 400, 406, 411, 437, 503, 534, 706, 789, 803, 873, 886, 905, 969, 975, 976, 980, 987, 993, 996, 1015], "75": [4, 6, 7, 10, 33, 44, 55, 82, 115, 146, 159, 160, 165, 170, 176, 179, 182, 191, 207, 218, 243, 248, 249, 261, 270, 274, 286, 303, 316, 344, 347, 358, 442, 544, 651, 699, 705, 726, 731, 737, 745, 748, 784, 789, 870, 882, 889, 905, 980, 982, 990, 996, 999, 1011, 1024], "17374": 4, "19": [4, 9, 157, 162, 170, 204, 223, 226, 251, 307, 308, 323, 345, 373, 380, 389, 402, 403, 410, 413, 437, 485, 509, 510, 511, 529, 533, 534, 540, 542, 543, 550, 551, 552, 553, 557, 558, 559, 575, 582, 641, 651, 652, 659, 660, 661, 664, 665, 667, 669, 671, 680, 700, 773, 777, 789, 803, 815, 820, 821, 823, 824, 838, 839, 858, 869, 890, 894, 897, 900, 901, 902, 903, 969, 980, 990, 998, 1018, 1020, 1022, 1023, 1024, 1025, 1027, 1030], "misti": [4, 171], "10": [4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 97, 98, 99, 100, 101, 105, 106, 111, 112, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 133, 135, 139, 141, 142, 146, 149, 153, 154, 156, 158, 159, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 184, 190, 191, 193, 194, 198, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 216, 217, 218, 222, 223, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 272, 275, 277, 279, 286, 297, 298, 299, 300, 303, 304, 306, 307, 308, 313, 314, 315, 316, 317, 319, 322, 323, 324, 326, 332, 334, 336, 337, 338, 339, 341, 342, 344, 347, 348, 349, 358, 362, 370, 371, 372, 373, 374, 376, 378, 381, 382, 387, 388, 389, 392, 393, 394, 395, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 431, 436, 440, 442, 444, 445, 446, 452, 453, 455, 468, 485, 486, 493, 494, 495, 497, 503, 504, 505, 506, 509, 513, 514, 517, 521, 524, 528, 529, 530, 531, 532, 534, 535, 537, 539, 541, 545, 548, 549, 550, 551, 554, 555, 557, 558, 559, 560, 561, 563, 575, 576, 586, 587, 592, 593, 604, 610, 612, 620, 623, 625, 627, 628, 633, 635, 636, 637, 642, 652, 657, 658, 659, 660, 662, 663, 665, 666, 668, 669, 670, 671, 678, 679, 684, 685, 692, 698, 708, 718, 734, 748, 761, 787, 788, 789, 790, 791, 792, 793, 800, 803, 804, 805, 806, 807, 809, 810, 811, 816, 818, 820, 821, 827, 828, 829, 831, 832, 833, 839, 848, 849, 850, 852, 858, 862, 865, 866, 869, 881, 889, 895, 898, 900, 901, 905, 929, 933, 944, 948, 950, 966, 969, 970, 975, 976, 977, 978, 980, 981, 983, 984, 986, 987, 990, 994, 995, 998, 1006, 1010, 1011, 1013, 1014, 1015, 1019, 1020, 1023, 1024, 1025, 1030, 1032, 1033, 1034, 1036, 1037], "66": [4, 92, 225, 309, 373, 402, 525, 625, 705, 775, 776, 785, 871, 980, 992], "880": [4, 189, 219], "60": [4, 6, 16, 59, 73, 82, 200, 212, 218, 221, 222, 243, 249, 269, 274, 300, 323, 337, 347, 370, 402, 406, 443, 450, 706, 789, 980, 990, 1011, 1022, 1025], "11": [4, 8, 9, 14, 15, 19, 74, 81, 97, 149, 155, 170, 171, 184, 200, 201, 202, 205, 223, 233, 258, 266, 267, 273, 277, 285, 287, 307, 315, 318, 319, 333, 337, 370, 373, 374, 382, 388, 402, 405, 406, 409, 443, 450, 475, 476, 477, 478, 494, 510, 511, 605, 643, 649, 663, 708, 714, 715, 716, 770, 771, 772, 790, 793, 807, 810, 817, 844, 901, 944, 976, 978, 990, 994, 995, 998, 1006, 1013, 1015, 1020, 1024, 1028, 1030, 1031, 1033, 1036, 1037], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 101, 103, 105, 114, 118, 121, 122, 125, 128, 132, 133, 135, 141, 144, 145, 146, 149, 158, 169, 171, 172, 182, 189, 190, 192, 196, 197, 199, 200, 201, 204, 209, 212, 213, 214, 215, 217, 224, 233, 239, 248, 250, 251, 261, 262, 264, 265, 267, 272, 273, 275, 281, 285, 286, 287, 288, 289, 292, 300, 307, 308, 309, 314, 315, 316, 317, 319, 322, 323, 326, 331, 333, 337, 339, 344, 348, 349, 354, 355, 369, 373, 376, 378, 380, 381, 382, 392, 402, 409, 410, 434, 439, 440, 442, 457, 458, 462, 464, 465, 471, 481, 482, 483, 484, 485, 487, 489, 490, 493, 495, 497, 498, 505, 508, 509, 516, 524, 529, 530, 535, 538, 539, 541, 545, 548, 549, 552, 553, 554, 555, 556, 562, 563, 575, 582, 585, 587, 590, 592, 622, 623, 638, 642, 651, 659, 660, 661, 669, 671, 689, 697, 701, 706, 709, 717, 718, 731, 748, 749, 759, 782, 783, 787, 788, 789, 803, 814, 815, 816, 819, 821, 824, 825, 826, 829, 830, 837, 838, 849, 850, 851, 852, 854, 856, 857, 865, 866, 867, 868, 873, 887, 888, 890, 891, 896, 904, 910, 912, 913, 969, 976, 980, 983, 986, 987, 990, 993, 998, 1003, 1004, 1007, 1013, 1017, 1018, 1020, 1022, 1028, 1031, 1034, 1036, 1037], "17376": 4, "21": [4, 11, 42, 149, 170, 189, 201, 208, 218, 219, 251, 281, 300, 305, 307, 319, 326, 373, 374, 378, 380, 392, 399, 409, 410, 434, 438, 467, 525, 554, 555, 556, 562, 563, 581, 582, 584, 620, 662, 680, 746, 789, 791, 803, 815, 858, 865, 867, 873, 890, 906, 976, 981, 990, 998, 1018, 1020, 1022, 1023, 1025, 1029, 1030, 1032], "17377": 4, "22": [4, 42, 167, 170, 171, 217, 239, 244, 251, 300, 303, 307, 312, 320, 323, 349, 376, 380, 381, 392, 399, 430, 441, 465, 481, 482, 488, 489, 497, 508, 517, 524, 530, 535, 538, 539, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 587, 620, 621, 625, 627, 638, 640, 644, 646, 648, 651, 652, 654, 656, 658, 662, 681, 685, 695, 697, 706, 749, 761, 770, 775, 776, 780, 789, 790, 794, 803, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 836, 838, 840, 842, 843, 844, 849, 850, 851, 853, 856, 872, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 923, 924, 980, 990, 998, 1018, 1020, 1022, 1025, 1030, 1033, 1035], "56": [4, 55, 98, 209, 218, 233, 382, 706, 727, 980, 990, 1018, 1022], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 33, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 81, 85, 90, 91, 92, 95, 96, 99, 100, 104, 106, 112, 115, 117, 118, 122, 124, 125, 127, 130, 133, 134, 138, 148, 149, 153, 155, 157, 158, 160, 161, 165, 169, 170, 171, 173, 176, 179, 180, 185, 186, 191, 194, 200, 201, 204, 208, 210, 216, 218, 221, 222, 223, 225, 226, 230, 234, 235, 237, 239, 241, 242, 243, 246, 247, 248, 250, 251, 252, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 271, 272, 279, 283, 285, 289, 293, 297, 299, 300, 303, 305, 306, 307, 308, 309, 313, 318, 322, 323, 324, 326, 327, 331, 334, 338, 339, 341, 343, 347, 348, 349, 355, 358, 363, 370, 371, 373, 374, 376, 381, 382, 392, 400, 402, 406, 407, 409, 410, 411, 412, 432, 436, 437, 440, 442, 443, 445, 455, 462, 463, 464, 465, 466, 467, 468, 469, 476, 477, 478, 480, 483, 495, 496, 507, 524, 527, 531, 533, 536, 538, 540, 542, 543, 548, 549, 558, 563, 575, 581, 582, 583, 584, 621, 622, 641, 651, 663, 669, 682, 685, 686, 687, 688, 692, 695, 699, 700, 702, 708, 714, 719, 720, 721, 733, 737, 738, 742, 743, 745, 774, 775, 777, 780, 781, 785, 787, 790, 791, 796, 799, 806, 807, 810, 811, 818, 821, 830, 832, 833, 839, 849, 850, 851, 857, 864, 871, 873, 894, 897, 927, 929, 933, 969, 970, 976, 977, 978, 980, 983, 988, 990, 994, 998, 1004, 1006, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1023, 1024, 1025, 1029, 1030, 1035, 1036, 1038], "9981": 4, "17378": 4, "23": [4, 19, 26, 34, 50, 92, 98, 149, 167, 226, 243, 251, 300, 307, 312, 315, 316, 320, 323, 347, 373, 374, 376, 382, 392, 394, 395, 409, 415, 425, 433, 440, 445, 447, 455, 458, 460, 461, 468, 475, 476, 477, 483, 485, 493, 494, 495, 497, 498, 503, 505, 507, 515, 517, 531, 532, 533, 536, 540, 547, 549, 551, 553, 554, 555, 558, 561, 562, 563, 600, 601, 604, 620, 623, 625, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 668, 671, 672, 673, 710, 722, 770, 818, 824, 825, 826, 835, 843, 850, 853, 865, 872, 880, 881, 890, 893, 895, 898, 901, 903, 910, 912, 913, 923, 924, 929, 980, 998, 1018, 1020, 1022, 1023, 1029, 1030, 1031, 1034], "65": [4, 8, 33, 171, 200, 223, 270, 309, 402, 432, 495, 590, 692, 733, 782, 783, 987, 1011, 1022, 1023, 1024], "17379": [4, 1034], "row": [4, 19, 20, 21, 25, 27, 44, 60, 75, 90, 92, 118, 121, 130, 133, 164, 200, 201, 202, 230, 233, 239, 240, 305, 356, 362, 371, 378, 385, 388, 389, 399, 402, 405, 410, 417, 435, 436, 440, 442, 443, 444, 446, 449, 450, 452, 457, 461, 481, 483, 484, 485, 486, 487, 488, 493, 494, 495, 497, 498, 503, 504, 506, 527, 535, 541, 544, 583, 584, 613, 625, 636, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 685, 689, 690, 703, 711, 712, 717, 750, 751, 755, 758, 760, 761, 762, 763, 765, 766, 768, 770, 771, 772, 773, 787, 788, 821, 827, 828, 829, 830, 831, 837, 840, 841, 842, 843, 844, 847, 858, 862, 864, 867, 879, 882, 883, 886, 890, 908, 912, 913, 929, 951, 954, 958, 960, 962, 963, 967, 969, 970, 974, 976, 978, 980, 981, 983, 990, 991, 994, 995, 1001, 1029, 1030, 1031, 1032, 1037], "onli": [4, 7, 11, 13, 14, 20, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 106, 112, 114, 119, 120, 121, 122, 124, 131, 132, 144, 145, 146, 149, 152, 154, 157, 159, 161, 165, 167, 169, 170, 171, 176, 178, 183, 184, 189, 196, 200, 201, 203, 206, 208, 209, 218, 219, 221, 222, 229, 231, 233, 235, 236, 240, 243, 246, 247, 248, 251, 252, 257, 259, 261, 263, 264, 267, 268, 269, 270, 272, 273, 281, 284, 287, 289, 292, 294, 299, 303, 304, 308, 309, 315, 316, 322, 323, 325, 330, 331, 334, 339, 342, 343, 347, 348, 349, 352, 353, 356, 358, 362, 363, 364, 369, 370, 371, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 392, 393, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 482, 483, 484, 485, 487, 489, 490, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 509, 512, 516, 517, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 700, 702, 706, 718, 721, 722, 726, 728, 729, 730, 733, 734, 735, 748, 750, 752, 766, 770, 771, 772, 773, 775, 776, 779, 780, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 803, 807, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 910, 912, 913, 916, 918, 921, 929, 931, 934, 936, 941, 946, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 991, 992, 994, 995, 996, 1000, 1001, 1004, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039], "present": [4, 5, 43, 49, 92, 95, 103, 117, 118, 125, 128, 148, 149, 158, 161, 179, 182, 184, 189, 200, 229, 232, 236, 251, 259, 264, 267, 270, 271, 281, 303, 306, 308, 348, 373, 374, 378, 381, 387, 389, 393, 402, 404, 407, 409, 410, 420, 421, 424, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 482, 483, 484, 485, 489, 493, 494, 495, 496, 497, 498, 503, 524, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 542, 543, 556, 559, 562, 563, 574, 575, 576, 581, 582, 584, 610, 620, 621, 622, 623, 643, 647, 670, 681, 682, 683, 684, 705, 721, 722, 730, 734, 761, 775, 776, 779, 787, 788, 789, 792, 793, 801, 803, 816, 834, 835, 836, 838, 840, 842, 843, 844, 851, 856, 864, 865, 866, 867, 868, 870, 884, 885, 896, 904, 906, 907, 929, 964, 979, 980, 981, 982, 987, 990, 999, 1001, 1025, 1030, 1032, 1033, 1034, 1036, 1037], "date": [4, 70, 149, 157, 171, 371, 373, 376, 380, 390, 403, 1001], "datetim": [4, 17, 157, 171], "http": [4, 6, 7, 8, 12, 17, 24, 71, 126, 132, 149, 161, 165, 176, 200, 208, 216, 218, 226, 230, 239, 279, 281, 299, 370, 371, 373, 374, 376, 380, 381, 382, 384, 387, 389, 392, 402, 406, 411, 435, 442, 445, 455, 480, 485, 489, 493, 495, 501, 502, 503, 523, 524, 527, 529, 530, 534, 588, 629, 634, 637, 642, 651, 657, 659, 660, 661, 664, 669, 672, 675, 676, 678, 679, 684, 685, 688, 698, 714, 715, 716, 750, 751, 761, 827, 829, 830, 831, 834, 835, 840, 841, 842, 843, 848, 870, 885, 886, 887, 900, 901, 976, 978, 980, 983, 993, 996, 1003, 1004, 1011, 1027, 1032], "pydata": [4, 999, 1004], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 161, 170, 171, 172, 176, 181, 191, 192, 200, 208, 216, 218, 222, 230, 231, 232, 234, 236, 240, 241, 242, 243, 251, 259, 261, 262, 264, 268, 273, 279, 299, 300, 309, 314, 315, 317, 318, 322, 323, 324, 327, 347, 348, 349, 356, 363, 369, 374, 376, 379, 382, 384, 390, 392, 406, 588, 629, 661, 664, 669, 688, 698, 761, 834, 835, 840, 841, 842, 843, 870, 886, 900, 901, 976, 980, 996, 998, 1017, 1030, 1034], "stabl": [4, 161, 170, 194, 198, 202, 281, 314, 348, 374, 376, 380, 382, 385, 389, 392, 406, 410, 414, 464, 465, 471, 526, 648, 665, 667, 680, 685, 716, 744, 928, 929, 976, 982, 983, 990, 1001, 1018, 1022, 1023, 1028, 1033, 1035], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 161, 170, 171, 172, 176, 181, 230, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 371, 373, 376, 377, 380, 384, 403, 406, 410, 480, 501, 502, 651, 827, 831, 925, 978, 1000, 1001, 1033, 1034, 1035, 1036, 1037], "compon": [4, 5, 17, 44, 58, 62, 70, 73, 84, 85, 87, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 130, 157, 167, 169, 184, 221, 233, 234, 237, 246, 247, 250, 251, 252, 260, 262, 282, 295, 300, 308, 315, 362, 368, 371, 376, 378, 382, 385, 387, 401, 402, 403, 405, 410, 412, 414, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 495, 497, 508, 514, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 688, 721, 722, 730, 775, 776, 779, 787, 788, 789, 792, 793, 803, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 928, 929, 972, 977, 990, 992, 995, 1000, 1001, 1002, 1004, 1009, 1015, 1016, 1017, 1022, 1024, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "now": [4, 5, 7, 17, 20, 53, 57, 71, 86, 100, 111, 112, 113, 117, 119, 121, 122, 125, 126, 132, 135, 149, 152, 157, 158, 159, 165, 169, 170, 171, 172, 176, 179, 181, 186, 188, 189, 201, 202, 204, 225, 234, 236, 257, 261, 264, 272, 273, 308, 314, 315, 317, 318, 319, 324, 334, 342, 347, 348, 349, 358, 362, 364, 371, 376, 377, 378, 382, 387, 388, 389, 399, 402, 406, 407, 409, 410, 414, 486, 501, 502, 505, 529, 542, 572, 573, 575, 620, 623, 642, 646, 651, 656, 677, 718, 748, 787, 788, 792, 793, 824, 839, 852, 955, 969, 970, 976, 980, 986, 989, 990, 995, 996, 999, 1001, 1006, 1013, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "introspect": [4, 6, 71, 382, 552, 553, 581, 582, 584, 990, 1011], "value_count": [4, 171], "11413": 4, "4544": 4, "rain": [4, 171, 976], "1419": 4, "heavy_rain": [4, 171], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 34, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 102, 115, 116, 117, 118, 122, 123, 125, 132, 170, 171, 172, 189, 198, 200, 202, 204, 206, 207, 215, 217, 218, 221, 222, 229, 235, 236, 238, 239, 243, 248, 256, 258, 259, 262, 264, 265, 268, 270, 271, 281, 289, 290, 297, 298, 305, 307, 309, 317, 318, 326, 339, 347, 348, 349, 363, 364, 370, 371, 374, 376, 378, 380, 381, 383, 384, 389, 392, 396, 399, 402, 403, 406, 409, 410, 412, 416, 418, 423, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 569, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 690, 691, 692, 693, 695, 701, 702, 706, 724, 725, 771, 772, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 801, 803, 807, 811, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 911, 912, 913, 916, 920, 921, 922, 924, 936, 937, 938, 940, 943, 950, 964, 968, 969, 974, 976, 980, 981, 987, 988, 990, 996, 1001, 1010, 1011, 1013, 1015, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 124, 126, 127, 128, 153, 154, 155, 165, 170, 171, 202, 218, 239, 243, 246, 259, 265, 269, 288, 294, 309, 316, 317, 319, 323, 356, 370, 371, 376, 378, 387, 389, 398, 403, 406, 417, 420, 435, 436, 440, 441, 442, 443, 444, 446, 457, 459, 460, 462, 465, 467, 481, 482, 483, 484, 489, 490, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 507, 515, 535, 550, 551, 552, 553, 556, 557, 558, 559, 574, 575, 578, 579, 581, 582, 584, 586, 587, 595, 599, 620, 621, 622, 623, 625, 626, 633, 634, 637, 638, 639, 645, 649, 650, 653, 654, 655, 656, 657, 658, 664, 666, 668, 690, 692, 698, 707, 708, 723, 730, 733, 747, 778, 795, 813, 815, 816, 828, 832, 833, 835, 843, 857, 863, 865, 866, 872, 873, 886, 894, 895, 896, 897, 898, 900, 901, 902, 903, 909, 910, 912, 913, 945, 955, 956, 957, 958, 961, 967, 970, 990, 993, 995, 1006, 1023, 1025, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "int64": [4, 13, 54, 71, 170, 171, 309, 356, 389, 410, 420, 435, 441, 443, 581, 633, 707, 708, 828, 1030, 1033, 1035, 1037, 1038], "cannot": [4, 40, 56, 75, 82, 95, 100, 120, 170, 171, 184, 200, 218, 236, 303, 334, 364, 375, 377, 382, 389, 390, 402, 403, 404, 406, 407, 409, 410, 412, 458, 514, 531, 532, 533, 536, 540, 603, 606, 607, 608, 610, 612, 613, 615, 616, 618, 644, 648, 675, 685, 704, 710, 770, 792, 793, 839, 840, 842, 843, 844, 852, 853, 862, 863, 874, 910, 912, 913, 969, 970, 974, 976, 977, 981, 986, 990, 995, 996, 1001, 1004, 1010, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 56, 58, 64, 70, 71, 75, 85, 86, 90, 95, 98, 100, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 132, 133, 134, 138, 146, 152, 153, 154, 157, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 176, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 200, 201, 202, 207, 208, 209, 212, 214, 215, 218, 229, 232, 234, 238, 239, 248, 250, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 281, 284, 287, 288, 289, 290, 292, 294, 297, 298, 299, 303, 305, 307, 308, 313, 316, 321, 322, 323, 326, 327, 328, 330, 333, 341, 342, 349, 351, 354, 355, 357, 358, 362, 363, 364, 368, 373, 378, 381, 387, 388, 389, 396, 398, 400, 402, 403, 404, 405, 407, 409, 410, 411, 412, 414, 430, 433, 434, 436, 437, 440, 442, 444, 445, 446, 447, 452, 458, 462, 463, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 481, 482, 486, 490, 491, 493, 497, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 680, 681, 682, 684, 685, 689, 696, 733, 780, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 852, 857, 858, 861, 862, 865, 866, 870, 871, 872, 873, 877, 878, 880, 881, 882, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 954, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 990, 994, 995, 996, 1000, 1001, 1002, 1004, 1007, 1010, 1011, 1017, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 56, 67, 68, 70, 75, 81, 82, 94, 100, 105, 107, 109, 111, 112, 115, 116, 117, 118, 120, 121, 127, 129, 130, 131, 132, 138, 139, 140, 141, 146, 149, 152, 155, 157, 161, 164, 165, 168, 172, 174, 175, 177, 186, 188, 189, 204, 214, 218, 225, 227, 228, 229, 234, 237, 242, 254, 258, 260, 261, 264, 266, 267, 269, 275, 277, 281, 285, 286, 287, 288, 289, 294, 296, 299, 300, 301, 303, 304, 308, 310, 312, 320, 321, 325, 327, 328, 333, 340, 342, 347, 348, 349, 352, 353, 354, 355, 358, 363, 365, 368, 369, 370, 371, 373, 375, 379, 382, 383, 384, 385, 388, 389, 391, 393, 396, 397, 398, 399, 400, 402, 403, 404, 406, 408, 410, 411, 412, 416, 417, 419, 420, 421, 424, 425, 426, 430, 431, 432, 435, 436, 439, 440, 442, 443, 450, 452, 457, 458, 460, 461, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 501, 502, 503, 505, 507, 508, 509, 510, 511, 513, 514, 515, 517, 518, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 564, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 592, 595, 596, 603, 604, 607, 612, 615, 619, 621, 623, 625, 627, 631, 633, 634, 636, 637, 638, 639, 641, 645, 650, 651, 661, 662, 669, 670, 671, 673, 681, 682, 683, 684, 685, 689, 693, 694, 695, 701, 706, 710, 711, 714, 715, 716, 718, 727, 733, 735, 740, 748, 770, 771, 772, 777, 780, 785, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 830, 831, 834, 836, 841, 848, 849, 850, 851, 853, 855, 857, 859, 862, 864, 865, 866, 867, 870, 871, 872, 873, 876, 884, 885, 887, 888, 889, 890, 892, 893, 894, 897, 900, 901, 902, 903, 915, 923, 924, 946, 947, 948, 969, 970, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 994, 995, 996, 997, 999, 1003, 1008, 1010, 1011, 1017, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "simplifi": [4, 71, 188, 334, 375, 377, 381, 402, 405, 508, 555, 851, 852, 980, 982, 990], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 111, 117, 119, 120, 128, 129, 130, 132, 135, 146, 157, 170, 172, 176, 181, 184, 221, 222, 223, 230, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 291, 300, 309, 315, 317, 318, 324, 348, 349, 356, 358, 368, 370, 378, 389, 396, 402, 403, 407, 408, 409, 456, 524, 528, 530, 533, 535, 541, 559, 581, 583, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 623, 636, 639, 645, 651, 652, 653, 655, 659, 661, 669, 670, 671, 761, 787, 788, 795, 811, 848, 861, 865, 866, 870, 872, 885, 892, 904, 906, 909, 925, 946, 972, 977, 979, 981, 983, 984, 985, 987, 990, 995, 1001, 1006, 1007, 1009, 1013, 1015, 1022, 1023, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "collaps": [4, 171, 303, 334, 387], "those": [4, 7, 12, 17, 19, 55, 60, 71, 113, 125, 149, 161, 169, 171, 172, 173, 200, 202, 204, 218, 226, 233, 236, 238, 239, 252, 255, 261, 264, 267, 298, 303, 308, 331, 334, 347, 348, 349, 362, 363, 370, 376, 378, 380, 381, 382, 383, 387, 389, 390, 392, 399, 400, 402, 406, 407, 409, 410, 412, 441, 443, 454, 457, 461, 487, 488, 489, 496, 550, 551, 557, 558, 562, 563, 574, 685, 690, 705, 711, 728, 789, 792, 793, 801, 803, 810, 834, 835, 836, 838, 840, 841, 842, 843, 844, 894, 897, 900, 901, 902, 903, 940, 969, 972, 976, 979, 980, 982, 983, 984, 987, 990, 996, 999, 1000, 1004, 1006, 1015, 1022, 1025, 1028, 1029, 1030, 1035, 1036, 1037, 1038], "replac": [4, 25, 80, 99, 112, 152, 159, 164, 171, 186, 201, 239, 264, 281, 305, 310, 315, 336, 374, 376, 378, 380, 382, 385, 389, 396, 403, 406, 409, 410, 434, 438, 496, 508, 548, 549, 556, 575, 581, 582, 583, 584, 600, 601, 620, 623, 627, 632, 634, 720, 777, 795, 801, 803, 811, 851, 852, 855, 875, 888, 895, 949, 951, 954, 969, 970, 976, 980, 990, 995, 996, 1000, 1001, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1038], "to_replac": [4, 171], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 20, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 106, 109, 112, 114, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 144, 145, 148, 152, 155, 156, 158, 160, 166, 169, 170, 171, 172, 173, 176, 179, 180, 182, 184, 186, 188, 189, 190, 191, 193, 198, 200, 201, 202, 204, 206, 215, 218, 220, 224, 227, 229, 230, 231, 232, 233, 234, 235, 239, 242, 243, 246, 252, 255, 257, 259, 261, 262, 264, 266, 267, 268, 270, 272, 273, 274, 276, 281, 294, 297, 298, 300, 303, 304, 305, 306, 307, 308, 309, 310, 315, 325, 326, 334, 339, 342, 347, 348, 349, 352, 356, 358, 362, 363, 364, 365, 368, 369, 370, 371, 373, 377, 378, 379, 381, 382, 383, 385, 387, 388, 389, 391, 392, 393, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 483, 484, 486, 489, 490, 491, 494, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 761, 763, 766, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 800, 801, 803, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 909, 910, 911, 912, 913, 916, 917, 918, 919, 921, 929, 931, 940, 941, 942, 943, 944, 948, 956, 957, 958, 969, 972, 973, 974, 975, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 991, 993, 994, 995, 1002, 1004, 1006, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "inplac": [4, 171, 218, 273, 447, 475, 476, 477, 478, 847, 855, 858, 861, 862, 864, 868, 869, 870, 872, 875, 877, 878, 879, 880, 881, 882, 883, 953, 956, 957, 958, 962, 963, 1031], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 86, 92, 100, 112, 115, 117, 119, 122, 125, 146, 152, 158, 167, 168, 172, 174, 186, 191, 200, 201, 202, 204, 208, 218, 233, 236, 240, 247, 248, 251, 252, 268, 281, 308, 347, 348, 358, 362, 363, 376, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 393, 398, 400, 402, 403, 404, 406, 409, 410, 411, 425, 457, 458, 460, 461, 462, 475, 476, 477, 489, 516, 525, 529, 531, 534, 545, 547, 548, 549, 551, 553, 555, 556, 558, 560, 561, 563, 565, 578, 579, 581, 582, 584, 588, 590, 599, 604, 620, 625, 626, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 668, 671, 672, 688, 697, 698, 709, 727, 780, 784, 825, 826, 827, 828, 829, 830, 831, 835, 838, 843, 850, 853, 858, 865, 866, 869, 872, 873, 882, 883, 890, 892, 893, 894, 895, 896, 897, 898, 901, 903, 943, 969, 976, 980, 982, 986, 990, 994, 995, 996, 1003, 1011, 1014, 1015, 1017, 1022, 1023, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "balanc": [4, 6, 53, 66, 112, 167, 204, 205, 254, 264, 277, 303, 364, 387, 389, 400, 406, 407, 409, 495, 508, 527, 533, 534, 540, 550, 554, 557, 633, 651, 652, 659, 661, 667, 668, 669, 696, 701, 721, 735, 774, 779, 789, 790, 807, 852, 892, 894, 897, 900, 902, 917, 918, 969, 995, 996, 1011, 1022, 1024, 1027, 1028, 1031, 1032, 1036], "fall": [4, 125, 159, 260, 261, 376, 378, 401, 402, 410, 427, 439, 440, 501, 502, 719, 720, 784, 869, 881, 979, 980, 990, 1006, 1014, 1031], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 20, 24, 47, 55, 64, 65, 72, 78, 89, 105, 120, 121, 122, 126, 141, 157, 169, 170, 173, 176, 189, 193, 196, 200, 201, 206, 214, 218, 223, 233, 236, 243, 248, 256, 259, 261, 268, 279, 300, 303, 308, 309, 310, 315, 316, 342, 347, 349, 358, 362, 363, 371, 376, 378, 381, 382, 385, 389, 392, 393, 396, 402, 403, 404, 406, 407, 408, 409, 410, 412, 414, 433, 436, 439, 440, 442, 443, 448, 449, 450, 452, 457, 481, 482, 483, 488, 490, 508, 527, 528, 532, 533, 534, 536, 540, 544, 546, 548, 549, 550, 552, 556, 557, 560, 574, 581, 584, 586, 587, 590, 599, 600, 601, 603, 615, 620, 624, 633, 651, 652, 658, 669, 678, 679, 681, 682, 686, 690, 692, 693, 695, 697, 705, 706, 711, 718, 721, 722, 730, 732, 733, 746, 748, 770, 774, 775, 776, 779, 780, 781, 784, 789, 790, 792, 793, 794, 796, 800, 803, 807, 808, 813, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 842, 849, 852, 863, 865, 866, 867, 871, 872, 873, 876, 877, 878, 880, 881, 882, 883, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 918, 929, 944, 949, 970, 976, 977, 980, 981, 983, 984, 990, 993, 994, 995, 996, 1001, 1010, 1012, 1013, 1015, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "sensit": [4, 44, 55, 80, 81, 115, 125, 171, 202, 203, 204, 229, 303, 334, 363, 364, 390, 404, 409, 445, 455, 685, 705, 706, 780, 975, 976, 977, 979, 980, 984, 986, 994, 995, 1006, 1014, 1026], "splitter": [4, 319, 389, 393, 406, 430, 465, 560, 561, 587, 595, 640, 644, 646, 648, 652, 654, 656, 658, 666, 668, 789, 791, 792, 793, 794, 795, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 823, 826, 900, 901, 902, 903, 996, 1001, 1028, 1029, 1030, 1031, 1038, 1039], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 55, 68, 71, 72, 98, 111, 112, 119, 120, 122, 123, 125, 145, 155, 167, 173, 176, 180, 189, 202, 207, 218, 228, 244, 254, 255, 258, 259, 261, 264, 266, 267, 268, 270, 272, 273, 275, 277, 279, 290, 294, 308, 310, 315, 319, 334, 347, 358, 365, 369, 371, 378, 382, 389, 391, 401, 403, 410, 411, 412, 440, 442, 481, 484, 485, 486, 489, 502, 513, 529, 544, 554, 555, 556, 560, 561, 584, 587, 595, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 624, 625, 626, 627, 640, 646, 652, 666, 668, 690, 692, 694, 695, 696, 697, 698, 704, 706, 707, 708, 710, 711, 718, 719, 728, 729, 734, 746, 747, 748, 749, 778, 785, 787, 788, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 823, 829, 832, 833, 838, 850, 852, 859, 877, 878, 880, 881, 882, 883, 894, 897, 900, 915, 923, 954, 972, 976, 978, 982, 983, 986, 987, 988, 991, 994, 996, 1000, 1004, 1006, 1007, 1010, 1011, 1013, 1016, 1017, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "forecast": [4, 261, 400, 980, 1000], "realist": [4, 8, 263, 270, 271, 331, 980], "gap": [4, 347, 371, 406, 464, 465, 471, 581, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 810, 900, 901, 902, 903, 976, 977, 1030, 1034, 1036], "between": [4, 5, 8, 9, 11, 12, 20, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 98, 100, 104, 111, 112, 115, 118, 122, 125, 144, 152, 157, 158, 160, 167, 169, 170, 171, 172, 179, 184, 186, 191, 195, 196, 200, 201, 202, 204, 205, 208, 218, 221, 229, 234, 236, 239, 254, 257, 260, 261, 262, 263, 264, 266, 267, 268, 270, 277, 283, 287, 288, 290, 291, 303, 308, 310, 316, 325, 334, 342, 347, 348, 349, 356, 358, 362, 363, 371, 376, 378, 385, 387, 388, 389, 390, 393, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 423, 433, 434, 437, 438, 439, 443, 445, 446, 447, 449, 450, 451, 456, 462, 463, 464, 465, 466, 467, 468, 469, 484, 486, 487, 488, 489, 490, 491, 495, 507, 508, 514, 517, 520, 527, 529, 530, 531, 532, 533, 534, 539, 540, 542, 546, 547, 552, 553, 555, 556, 557, 558, 577, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 613, 620, 625, 626, 627, 632, 635, 638, 639, 640, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 669, 671, 672, 674, 677, 681, 683, 685, 687, 688, 689, 692, 694, 696, 697, 698, 700, 702, 703, 707, 708, 709, 710, 712, 716, 717, 718, 721, 722, 723, 726, 728, 729, 735, 744, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 778, 779, 782, 783, 785, 786, 787, 788, 789, 791, 792, 798, 806, 807, 809, 817, 818, 820, 822, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 856, 859, 860, 862, 863, 865, 866, 869, 870, 871, 873, 878, 881, 882, 886, 897, 900, 901, 902, 903, 905, 926, 938, 949, 969, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 994, 995, 996, 997, 1001, 1013, 1014, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "side": [4, 16, 27, 59, 125, 193, 204, 218, 223, 232, 303, 347, 358, 371, 387, 400, 403, 406, 407, 410, 508, 976, 977, 980, 982, 995, 1031], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 70, 100, 111, 112, 117, 118, 119, 121, 124, 125, 126, 127, 128, 138, 145, 169, 170, 184, 195, 196, 200, 203, 208, 218, 230, 236, 247, 248, 255, 256, 259, 261, 266, 268, 271, 290, 297, 299, 304, 305, 310, 317, 319, 325, 334, 347, 349, 356, 371, 376, 383, 388, 389, 392, 393, 400, 402, 407, 409, 410, 430, 435, 436, 465, 466, 472, 473, 490, 524, 530, 532, 535, 539, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 581, 582, 584, 587, 595, 640, 644, 646, 648, 654, 656, 658, 666, 668, 688, 697, 698, 710, 723, 729, 749, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 826, 832, 833, 849, 850, 873, 877, 878, 880, 881, 882, 883, 900, 901, 902, 903, 951, 969, 976, 977, 983, 986, 987, 988, 990, 994, 996, 1001, 1006, 1010, 1011, 1013, 1014, 1015, 1017, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "limit": [4, 8, 17, 37, 42, 57, 66, 82, 112, 119, 120, 126, 132, 164, 170, 171, 172, 179, 200, 201, 217, 233, 268, 305, 309, 316, 349, 358, 363, 377, 378, 381, 387, 389, 390, 400, 402, 405, 407, 411, 439, 456, 461, 552, 553, 554, 555, 625, 643, 651, 652, 672, 675, 676, 681, 770, 810, 840, 842, 843, 844, 865, 866, 890, 894, 895, 896, 897, 898, 948, 969, 976, 977, 979, 980, 987, 988, 990, 1001, 1006, 1017, 1030, 1032, 1035, 1036], "cv": [4, 12, 24, 25, 26, 54, 71, 72, 73, 74, 78, 103, 118, 122, 124, 138, 139, 148, 164, 165, 170, 189, 199, 202, 257, 259, 260, 261, 262, 263, 264, 266, 267, 271, 275, 309, 318, 334, 342, 388, 389, 393, 400, 406, 409, 430, 465, 560, 561, 587, 595, 640, 644, 646, 648, 652, 654, 656, 658, 666, 668, 789, 791, 792, 793, 794, 795, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 823, 826, 873, 900, 901, 969, 972, 975, 976, 980, 990, 1001, 1010, 1011, 1015, 1024, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1038], "fold": [4, 67, 74, 78, 118, 121, 124, 138, 148, 170, 189, 248, 256, 257, 259, 261, 262, 264, 271, 310, 325, 342, 358, 371, 376, 379, 380, 388, 389, 393, 402, 411, 430, 465, 486, 529, 560, 561, 587, 595, 640, 644, 646, 648, 652, 654, 656, 658, 666, 668, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 823, 826, 873, 894, 897, 969, 976, 980, 990, 995, 1010, 1022, 1024, 1026, 1027, 1028, 1030, 1031, 1033, 1034], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 68, 72, 75, 85, 105, 115, 117, 119, 124, 125, 129, 134, 140, 144, 158, 176, 186, 192, 203, 223, 232, 233, 235, 246, 250, 259, 261, 267, 270, 272, 286, 288, 304, 307, 314, 315, 317, 319, 335, 336, 343, 347, 348, 381, 382, 388, 400, 410, 430, 466, 472, 473, 524, 525, 530, 535, 536, 538, 539, 541, 546, 557, 625, 639, 640, 644, 645, 646, 648, 653, 654, 655, 656, 659, 660, 661, 665, 669, 670, 671, 680, 685, 691, 694, 756, 869, 881, 887, 892, 893, 969, 973, 995, 1010, 1013, 1029, 1031], "datapoint": [4, 42, 52, 56, 156, 159, 183, 234, 235, 256, 261, 279, 340, 412, 439, 495, 550, 551, 552, 553, 557, 558, 559, 604, 900, 901, 902, 903, 973], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 109, 112, 115, 118, 122, 125, 149, 164, 170, 176, 179, 180, 184, 200, 202, 218, 229, 234, 235, 236, 261, 264, 267, 268, 270, 281, 304, 305, 310, 324, 334, 342, 348, 358, 362, 363, 364, 371, 374, 375, 376, 378, 380, 381, 383, 384, 385, 388, 389, 392, 393, 396, 400, 402, 404, 406, 407, 409, 410, 411, 412, 413, 414, 416, 430, 433, 435, 436, 437, 438, 440, 442, 443, 445, 447, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 489, 496, 501, 502, 509, 514, 516, 517, 520, 525, 526, 527, 529, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 578, 579, 581, 582, 583, 584, 586, 587, 590, 595, 600, 601, 603, 604, 613, 620, 621, 622, 624, 625, 626, 628, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 702, 719, 720, 758, 763, 766, 770, 771, 772, 773, 774, 777, 780, 781, 782, 789, 790, 791, 792, 793, 796, 797, 798, 799, 803, 806, 807, 808, 809, 814, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 849, 850, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 871, 872, 873, 875, 879, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 912, 916, 918, 921, 929, 941, 946, 949, 951, 954, 955, 956, 957, 958, 959, 960, 961, 969, 970, 974, 975, 976, 977, 980, 981, 983, 985, 986, 987, 990, 993, 994, 995, 996, 1001, 1003, 1004, 1011, 1015, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "enough": [4, 37, 44, 62, 118, 121, 152, 164, 171, 172, 189, 200, 234, 237, 307, 347, 349, 358, 374, 376, 380, 390, 400, 401, 402, 404, 406, 409, 560, 561, 582, 789, 792, 793, 795, 803, 816, 929, 969, 974, 977, 979, 986, 990, 995, 1000, 1004, 1028, 1038], "quantifi": [4, 37, 49, 78, 157, 218, 268, 378, 389, 397, 401, 566, 855, 975, 988, 990, 1017], "repres": [4, 8, 10, 12, 14, 20, 26, 32, 44, 48, 49, 50, 53, 91, 95, 97, 104, 105, 119, 120, 128, 170, 179, 187, 192, 202, 204, 205, 209, 223, 225, 234, 239, 249, 255, 258, 261, 264, 268, 286, 305, 347, 349, 356, 364, 368, 371, 373, 378, 387, 388, 389, 390, 396, 400, 402, 406, 407, 408, 409, 410, 411, 431, 435, 439, 445, 456, 463, 464, 465, 466, 467, 468, 469, 481, 483, 484, 485, 487, 489, 491, 493, 494, 495, 497, 498, 503, 527, 529, 531, 533, 534, 540, 548, 556, 574, 581, 584, 622, 625, 627, 633, 669, 671, 690, 692, 694, 722, 735, 781, 789, 791, 802, 803, 806, 809, 815, 817, 818, 821, 822, 828, 834, 835, 836, 838, 839, 840, 842, 843, 844, 849, 850, 859, 865, 866, 889, 912, 913, 933, 970, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 990, 991, 993, 994, 996, 1006, 1011, 1012, 1014, 1028, 1030, 1033, 1034, 1037], "bit": [4, 48, 53, 78, 98, 198, 202, 303, 334, 348, 358, 362, 371, 374, 409, 410, 575, 582, 651, 822, 912, 913, 977, 981, 999, 1008, 1015, 1022, 1025, 1028, 1030, 1031, 1034, 1035, 1036], "less": [4, 5, 8, 52, 53, 60, 92, 95, 98, 106, 112, 119, 125, 126, 152, 159, 170, 182, 184, 200, 202, 204, 235, 247, 249, 261, 262, 270, 272, 275, 304, 307, 308, 309, 315, 317, 347, 348, 358, 362, 364, 371, 376, 378, 387, 389, 402, 406, 407, 409, 410, 414, 432, 434, 436, 438, 441, 443, 445, 450, 453, 455, 456, 475, 476, 477, 489, 508, 524, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 583, 589, 612, 620, 627, 640, 654, 669, 671, 685, 694, 714, 715, 716, 717, 728, 744, 756, 771, 772, 777, 785, 787, 788, 791, 792, 793, 799, 816, 827, 828, 829, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 855, 867, 869, 870, 872, 875, 881, 882, 892, 893, 900, 901, 902, 903, 918, 932, 969, 970, 972, 973, 974, 977, 979, 980, 983, 985, 990, 994, 995, 996, 1000, 1013, 1015, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1032, 1036, 1037], "half": [4, 24, 98, 234, 238, 259, 261, 273, 371, 372, 407, 456, 515, 555, 586, 590, 595, 762, 851, 859, 980, 983, 996], "contigu": [4, 21, 378, 387, 399, 406, 410, 436, 440, 442, 452, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 773, 808, 832, 833, 892, 894, 895, 896, 897, 898, 995, 1025, 1032, 1036], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 103, 111, 112, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 132, 138, 139, 145, 146, 148, 152, 164, 165, 167, 169, 170, 172, 173, 176, 184, 195, 200, 202, 207, 208, 215, 216, 218, 230, 235, 241, 242, 243, 248, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 283, 285, 289, 290, 297, 299, 300, 305, 307, 308, 309, 310, 313, 314, 315, 318, 325, 326, 334, 337, 342, 352, 356, 358, 365, 376, 378, 381, 388, 389, 393, 403, 406, 409, 430, 431, 551, 553, 560, 561, 572, 652, 690, 691, 693, 695, 734, 820, 823, 841, 849, 850, 852, 900, 901, 902, 903, 948, 969, 970, 975, 980, 982, 983, 988, 990, 995, 1001, 1010, 1011, 1015, 1019, 1026, 1028, 1029], "timeseriessplit": [4, 184, 256, 406, 1028, 1029, 1034], "ts_cv": 4, "n_split": [4, 118, 124, 164, 165, 170, 248, 256, 261, 263, 266, 271, 325, 334, 342, 358, 406, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810, 815, 1010, 1028, 1030], "5": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 111, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 138, 141, 144, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 203, 206, 208, 211, 212, 213, 214, 215, 216, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 237, 238, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 272, 274, 275, 276, 279, 281, 283, 285, 286, 287, 288, 290, 291, 293, 294, 297, 298, 299, 300, 303, 305, 306, 307, 308, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 371, 373, 374, 376, 378, 381, 382, 387, 388, 389, 392, 394, 395, 400, 402, 403, 406, 407, 409, 410, 411, 412, 413, 414, 430, 431, 432, 433, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 455, 457, 459, 462, 465, 471, 475, 476, 477, 478, 483, 486, 487, 497, 509, 510, 514, 516, 517, 519, 521, 524, 526, 527, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 545, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 575, 585, 586, 587, 590, 595, 603, 606, 607, 608, 609, 612, 613, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 631, 634, 636, 637, 638, 639, 640, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 665, 669, 670, 671, 673, 674, 677, 681, 682, 684, 685, 688, 689, 692, 696, 698, 700, 702, 705, 706, 714, 715, 716, 718, 719, 720, 722, 727, 730, 731, 733, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 761, 773, 774, 776, 777, 779, 780, 781, 784, 786, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 849, 850, 851, 852, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 880, 881, 886, 892, 893, 894, 895, 896, 897, 898, 900, 902, 918, 927, 928, 929, 931, 933, 934, 943, 944, 948, 951, 969, 970, 972, 975, 976, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 992, 994, 995, 998, 1002, 1006, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1023, 1024, 1025, 1027, 1029, 1030, 1032, 1036, 1037, 1038], "48": [4, 45, 46, 102, 157, 243, 309, 373, 382, 402, 503, 590, 692, 738, 816, 827, 969, 982, 990, 1018], "max_train_s": [4, 406, 810, 1029], "10000": [4, 11, 30, 43, 63, 72, 73, 126, 138, 186, 193, 200, 208, 216, 233, 235, 274, 315, 331, 358, 364, 409, 410, 554, 555, 637, 672, 869, 898, 992, 1011, 1015], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 71, 111, 117, 123, 124, 126, 127, 131, 169, 176, 184, 195, 200, 207, 208, 215, 216, 258, 259, 263, 268, 270, 274, 279, 289, 290, 297, 299, 300, 305, 307, 308, 315, 334, 342, 358, 381, 406, 691, 791, 806, 809, 810, 818, 820, 841, 970, 982, 983, 1010, 1011, 1022, 1023, 1028, 1029, 1034], "manual": [4, 46, 55, 170, 171, 173, 201, 211, 263, 281, 325, 332, 347, 349, 362, 363, 371, 376, 380, 381, 388, 392, 402, 406, 407, 408, 430, 442, 560, 842, 865, 871, 969, 974, 975, 976, 979, 980, 983, 990, 1001, 1006, 1007, 1015, 1030, 1032, 1038], "inspect": [4, 31, 56, 61, 114, 119, 126, 128, 129, 133, 146, 152, 157, 158, 170, 171, 172, 173, 183, 192, 209, 240, 261, 264, 273, 284, 289, 292, 308, 313, 314, 315, 316, 318, 330, 331, 332, 335, 336, 347, 353, 363, 365, 378, 389, 402, 403, 409, 410, 457, 546, 547, 550, 551, 552, 553, 557, 558, 559, 821, 852, 853, 900, 901, 902, 903, 968, 980, 981, 984, 987, 988, 995, 1000, 1015, 1017, 1025], "variou": [4, 12, 36, 37, 55, 58, 60, 61, 68, 81, 85, 98, 167, 170, 178, 210, 219, 220, 221, 222, 227, 233, 307, 314, 347, 349, 356, 358, 362, 370, 371, 372, 373, 376, 378, 381, 388, 390, 400, 401, 402, 404, 430, 434, 465, 495, 507, 508, 518, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 587, 595, 640, 644, 646, 648, 651, 654, 656, 658, 659, 661, 666, 668, 669, 684, 685, 692, 789, 792, 793, 795, 803, 811, 812, 813, 814, 815, 816, 817, 818, 819, 852, 892, 893, 969, 970, 977, 980, 983, 987, 990, 994, 996, 1000, 1004, 1014, 1015, 1022, 1025, 1026], "check": [4, 5, 8, 17, 46, 53, 56, 99, 109, 118, 132, 152, 167, 169, 171, 172, 186, 188, 189, 200, 222, 236, 247, 254, 270, 277, 316, 324, 342, 356, 362, 363, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 387, 389, 392, 393, 396, 403, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 495, 501, 502, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 681, 682, 683, 684, 685, 686, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 913, 914, 923, 924, 935, 941, 942, 964, 965, 966, 968, 975, 976, 977, 980, 995, 996, 1001, 1004, 1017, 1022, 1023, 1025, 1029, 1033, 1034, 1035, 1036, 1037, 1039], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 20, 25, 32, 40, 44, 49, 62, 70, 105, 106, 116, 118, 124, 132, 139, 173, 204, 240, 256, 259, 261, 262, 264, 265, 270, 274, 290, 305, 309, 313, 314, 315, 316, 317, 318, 319, 326, 337, 348, 349, 364, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 400, 401, 402, 403, 406, 408, 409, 410, 425, 427, 430, 443, 449, 450, 457, 458, 459, 464, 465, 471, 475, 476, 477, 481, 482, 483, 484, 485, 489, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 516, 525, 543, 544, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 584, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 625, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 674, 677, 679, 685, 689, 690, 692, 703, 705, 706, 709, 711, 717, 725, 738, 746, 770, 773, 775, 780, 784, 787, 788, 789, 792, 793, 795, 800, 801, 803, 811, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 856, 860, 863, 865, 866, 871, 873, 889, 893, 895, 898, 900, 901, 902, 903, 906, 908, 912, 913, 914, 918, 920, 921, 922, 924, 932, 933, 935, 946, 951, 954, 964, 969, 970, 976, 980, 982, 983, 984, 987, 988, 991, 996, 998, 1000, 1001, 1004, 1006, 1010, 1012, 1015, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "train_0": 4, "test_0": 4, "iloc": [4, 132, 170, 171, 218, 261], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 101, 103, 105, 116, 125, 132, 136, 145, 146, 153, 164, 170, 180, 190, 204, 226, 229, 248, 261, 294, 297, 300, 303, 305, 318, 322, 323, 347, 350, 355, 358, 362, 382, 406, 409, 410, 437, 470, 494, 497, 563, 590, 671, 726, 786, 806, 818, 844, 862, 867, 869, 870, 873, 881, 882, 884, 885, 976, 980, 981, 983, 990, 1011, 1022, 1024, 1030, 1033], "760": 4, "68": [4, 161, 191, 300, 322, 402, 528, 534, 583, 1022], "27": [4, 6, 19, 31, 47, 54, 263, 277, 322, 323, 343, 373, 402, 410, 412, 517, 706, 780, 781, 873, 893, 980, 990, 1014, 1022, 1024], "9993": [4, 646, 648, 1030], "12380": 4, "32": [4, 5, 19, 51, 169, 172, 238, 269, 313, 317, 323, 370, 374, 381, 389, 399, 409, 410, 438, 557, 558, 575, 582, 627, 669, 871, 873, 912, 913, 945, 988, 990, 1014, 1022, 1025, 1028, 1030, 1031, 1034, 1035, 1036], "000": [4, 5, 15, 16, 17, 21, 25, 27, 37, 42, 74, 109, 153, 172, 176, 233, 259, 261, 263, 281, 295, 308, 316, 325, 328, 347, 348, 358, 371, 382, 409, 410, 483, 554, 555, 637, 670, 994, 1015, 1033], "77": [4, 6, 8, 44, 149, 176, 270, 323, 370, 373, 527, 700], "0028": 4, "12381": 4, "72": [4, 6, 7, 118, 155, 381, 816], "9995": 4, "12382": 4, "240": [4, 44, 144, 150, 988, 1022], "82": [4, 30, 53, 58, 92, 146, 203, 292, 300, 322, 780, 789, 803, 980, 983, 1011, 1022], "9980": [4, 1030], "12383": 4, "13374": 4, "34": [4, 15, 92, 125, 149, 152, 286, 300, 322, 323, 373, 406, 412, 513, 563, 590, 642, 660, 709, 756, 1011, 1022], "44": [4, 85, 107, 157, 170, 171, 184, 285, 412, 773, 873, 893, 896, 980, 987, 1022], "40": [4, 14, 54, 66, 78, 90, 95, 101, 128, 134, 152, 184, 191, 192, 194, 217, 223, 225, 237, 250, 262, 287, 293, 299, 305, 322, 323, 332, 333, 335, 337, 339, 341, 356, 363, 371, 406, 439, 488, 510, 511, 832, 833, 837, 849, 850, 969, 981, 990, 1022, 1023], "150": [4, 6, 90, 92, 116, 125, 138, 222, 226, 229, 274, 373, 406, 411, 497, 595, 813, 814, 815, 980, 1010, 1011, 1012], "53": [4, 53, 179, 402, 409, 528, 534, 782, 783], "15": [4, 6, 7, 8, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 55, 61, 62, 66, 68, 73, 74, 80, 82, 92, 105, 111, 116, 118, 121, 122, 125, 136, 144, 146, 148, 149, 152, 156, 164, 169, 170, 171, 189, 197, 202, 214, 218, 223, 226, 229, 233, 244, 248, 249, 256, 264, 266, 269, 272, 273, 275, 284, 285, 289, 297, 298, 303, 305, 307, 319, 323, 326, 332, 334, 337, 341, 344, 353, 370, 371, 376, 388, 406, 409, 410, 433, 447, 483, 490, 524, 530, 548, 549, 591, 637, 645, 654, 656, 661, 669, 671, 685, 733, 807, 821, 844, 873, 969, 975, 976, 977, 980, 983, 984, 990, 995, 998, 1006, 1011, 1018, 1020, 1024, 1034, 1036, 1037], "0013": 4, "13375": 4, "39": [4, 149, 174, 239, 243, 371, 373, 374, 380, 402, 410, 488, 901], "49": [4, 92, 149, 204, 353, 370, 371, 373, 381, 402, 443, 450, 706, 718, 748, 756, 787, 789, 873, 980, 990, 1025], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 149, 158, 170, 218, 337, 373, 382, 409, 410, 548, 549, 563, 727, 980, 1015, 1022], "08": [4, 15, 35, 44, 50, 98, 136, 170, 171, 184, 253, 277, 300, 373, 524, 536, 538, 556, 634, 651, 789, 849, 850, 871, 986], "910": 4, "42": [4, 5, 6, 20, 24, 25, 26, 27, 31, 46, 56, 72, 76, 78, 92, 97, 103, 112, 119, 120, 122, 125, 126, 128, 132, 145, 146, 149, 150, 165, 170, 172, 173, 176, 179, 189, 192, 194, 195, 202, 206, 207, 208, 214, 215, 217, 222, 229, 235, 236, 239, 242, 260, 262, 265, 281, 287, 288, 289, 297, 304, 305, 306, 308, 310, 311, 313, 315, 317, 325, 332, 334, 347, 348, 358, 363, 378, 381, 382, 389, 393, 402, 406, 409, 410, 413, 430, 437, 481, 485, 517, 524, 530, 537, 550, 551, 558, 559, 560, 561, 563, 670, 787, 791, 816, 818, 832, 833, 837, 841, 844, 884, 885, 887, 888, 889, 902, 903, 983, 990, 1011, 1015, 1018, 1019, 1022], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 55, 71, 92, 114, 134, 170, 171, 179, 188, 229, 308, 322, 323, 537, 641, 642, 649, 695, 699, 700, 719, 733, 748, 774, 781, 825, 969, 976, 980, 986, 987, 990, 1011, 1015, 1022, 1024], "26": [4, 46, 50, 54, 80, 97, 157, 170, 238, 274, 323, 382, 563, 641, 721, 775, 868, 880, 929, 980, 990, 1022, 1025, 1026, 1034], "47": [4, 46, 85, 150, 161, 192, 196, 371, 486, 487, 528, 534], "16": [4, 5, 8, 10, 15, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 144, 166, 171, 193, 199, 200, 201, 215, 218, 221, 222, 223, 227, 234, 238, 263, 264, 265, 285, 300, 301, 303, 307, 313, 328, 348, 354, 371, 373, 374, 382, 388, 392, 394, 395, 406, 407, 410, 435, 464, 465, 471, 490, 495, 527, 528, 563, 582, 588, 589, 600, 601, 632, 643, 644, 647, 648, 649, 650, 675, 676, 802, 807, 818, 867, 893, 901, 969, 976, 980, 990, 995, 998, 1006, 1015, 1018, 1020, 1022, 1023, 1027, 1028, 1030, 1031], "9979": 4, "2331": 4, "31": [4, 70, 79, 218, 269, 286, 316, 322, 323, 399, 410, 493, 554, 555, 590, 642, 664, 672, 945, 981, 1022], "060": [4, 349, 743], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 176, 218, 300, 305, 323, 486, 487, 646, 648, 657, 658, 789, 795, 816, 980, 1001, 1011], "275": [4, 15, 323, 1025], "2334": 4, "96": [4, 8, 32, 48, 62, 159, 229, 259, 300, 305, 308, 309, 322, 323, 373, 406, 969, 975, 980, 990, 1022], "515": 4, "64": [4, 8, 32, 48, 53, 58, 89, 95, 157, 170, 222, 233, 234, 238, 259, 270, 285, 290, 362, 363, 373, 374, 382, 407, 488, 495, 592, 593, 639, 651, 681, 682, 683, 684, 893, 983, 1012, 1018, 1022, 1024, 1030, 1031, 1034, 1035, 1036], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1031], "12329": 4, "46": [4, 53, 200, 358, 382, 586, 587, 709, 896, 901, 990, 1018], "12330": [4, 1030], "52": [4, 76, 118, 136, 157, 200, 626, 787, 1022], "last": [4, 20, 44, 58, 89, 123, 125, 170, 179, 200, 201, 208, 213, 229, 252, 264, 272, 273, 308, 315, 317, 325, 352, 362, 371, 374, 378, 380, 381, 384, 389, 392, 402, 403, 410, 414, 431, 435, 440, 452, 457, 461, 508, 526, 552, 553, 554, 555, 576, 577, 580, 586, 587, 590, 603, 675, 676, 678, 679, 690, 691, 693, 694, 695, 700, 774, 787, 788, 792, 793, 808, 832, 833, 837, 852, 853, 857, 865, 871, 907, 932, 955, 969, 975, 976, 977, 979, 981, 984, 994, 1001, 1006, 1013, 1022, 1029, 1030, 1031, 1036, 1038], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 97, 121, 199, 237, 274, 300, 305, 322, 323, 409, 656, 780, 975, 980, 981, 990, 1015, 1022], "665": 4, "16380": 4, "71": [4, 149, 204, 218, 326, 373, 503, 722, 980, 1013, 1018, 1024], "16381": 4, "76": [4, 8, 176, 200, 300, 323, 347, 358, 373, 382, 773, 852, 1013], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 60, 62, 74, 92, 103, 125, 161, 170, 176, 177, 200, 211, 219, 226, 229, 234, 261, 307, 309, 323, 347, 348, 349, 374, 376, 382, 392, 394, 395, 403, 406, 407, 410, 440, 452, 485, 493, 494, 495, 497, 498, 503, 528, 529, 531, 533, 534, 550, 551, 552, 553, 556, 557, 558, 559, 562, 564, 565, 566, 567, 568, 570, 571, 582, 587, 592, 593, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 639, 642, 651, 652, 664, 707, 711, 723, 726, 727, 733, 735, 787, 788, 810, 825, 848, 849, 850, 856, 862, 870, 871, 882, 892, 893, 900, 901, 902, 903, 904, 928, 929, 969, 978, 980, 990, 998, 1018, 1020, 1022, 1023, 1026, 1027, 1029, 1030, 1032, 1033], "940": 4, "6331": 4, "28": [4, 66, 98, 107, 125, 149, 170, 216, 262, 270, 299, 322, 323, 373, 382, 402, 406, 443, 450, 990, 1011, 1022, 1025, 1028], "790": [4, 70, 357], "89": [4, 32, 157, 191, 300, 322, 323, 975, 980, 990, 1015, 1022, 1025, 1033], "6332": 4, "6333": 4, "88": [4, 6, 8, 32, 191, 204, 260, 300, 322, 323, 352, 371, 373, 376, 404, 466, 852, 1011, 1022], "820": [4, 832, 833], "79": [4, 6, 30, 32, 80, 81, 98, 149, 176, 300, 323, 373, 381, 404, 467, 517, 590, 830, 1022, 1024], "6334": 4, "6335": 4, "70": [4, 6, 11, 66, 71, 73, 112, 171, 246, 261, 323, 371, 373, 406, 486, 487, 706, 718, 748, 789, 803, 969, 990, 1011, 1018], "33": [4, 80, 136, 200, 226, 318, 323, 371, 373, 374, 380, 381, 382, 392, 394, 395, 402, 410, 525, 641, 705, 706, 721, 722, 730, 735, 775, 776, 779, 795, 816, 818, 820, 903, 976, 980, 990, 1011, 1022, 1030], "335": [4, 233], "74": [4, 216, 322, 323, 373, 583, 789, 803, 871], "16326": [4, 1034], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 157, 201, 371, 380, 384], "tree": [4, 7, 26, 27, 31, 41, 44, 55, 62, 110, 111, 114, 115, 116, 118, 122, 123, 124, 125, 126, 128, 132, 133, 136, 149, 160, 164, 171, 173, 222, 236, 238, 240, 265, 281, 286, 294, 303, 304, 308, 315, 357, 358, 362, 365, 371, 373, 382, 388, 389, 391, 400, 402, 408, 413, 430, 434, 435, 436, 437, 438, 439, 441, 443, 450, 456, 488, 493, 497, 507, 508, 512, 537, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 624, 625, 626, 627, 651, 681, 685, 695, 696, 780, 795, 816, 818, 827, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 853, 856, 865, 924, 970, 977, 980, 981, 986, 987, 1000, 1001, 1002, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "often": [4, 19, 24, 25, 33, 70, 74, 118, 130, 156, 164, 170, 171, 201, 218, 222, 248, 263, 266, 303, 308, 334, 344, 347, 348, 349, 362, 363, 370, 371, 373, 376, 378, 381, 384, 387, 388, 389, 391, 396, 400, 402, 403, 404, 406, 407, 409, 410, 412, 414, 461, 514, 517, 526, 529, 625, 639, 640, 645, 646, 653, 654, 655, 656, 665, 667, 680, 720, 862, 870, 878, 890, 969, 970, 972, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 987, 990, 993, 994, 996, 1006, 1008, 1013, 1014, 1015, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "flexibl": [4, 25, 122, 164, 200, 304, 331, 349, 378, 383, 406, 412, 667, 892, 893, 969, 974, 976, 980, 984, 990, 1000, 1001, 1004, 1031, 1035], "effici": [4, 5, 12, 13, 42, 46, 53, 55, 95, 118, 130, 176, 189, 193, 202, 208, 286, 347, 362, 368, 370, 376, 378, 379, 381, 382, 387, 389, 396, 399, 401, 402, 407, 408, 409, 412, 414, 435, 436, 439, 440, 442, 443, 445, 447, 450, 452, 454, 455, 489, 526, 527, 528, 531, 533, 534, 537, 556, 559, 567, 581, 584, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 625, 626, 627, 631, 633, 648, 651, 652, 657, 659, 661, 666, 668, 669, 670, 671, 672, 678, 679, 681, 718, 748, 755, 771, 772, 787, 788, 789, 803, 821, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 857, 869, 881, 885, 892, 901, 903, 929, 948, 969, 972, 974, 976, 977, 979, 980, 981, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 1000, 1004, 1006, 1010, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "heteorogen": 4, "tabular": [4, 171, 378, 409, 988], "mix": [4, 62, 69, 76, 96, 97, 167, 200, 303, 370, 378, 387, 389, 403, 407, 414, 457, 459, 460, 489, 526, 531, 533, 540, 593, 597, 623, 639, 640, 645, 651, 652, 653, 654, 655, 656, 661, 669, 671, 674, 789, 803, 818, 852, 865, 866, 872, 873, 944, 951, 954, 976, 985, 1014, 1034, 1036, 1037], "long": [4, 11, 12, 44, 62, 125, 157, 165, 170, 172, 200, 236, 237, 264, 294, 303, 314, 347, 348, 358, 363, 376, 384, 387, 389, 390, 396, 401, 402, 412, 446, 491, 531, 669, 670, 671, 792, 793, 827, 828, 829, 830, 831, 849, 850, 860, 980, 986, 990, 991, 993, 994, 999, 1003, 1024, 1028, 1034, 1036], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 104, 105, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 128, 133, 134, 135, 146, 148, 149, 152, 157, 158, 159, 161, 164, 167, 170, 171, 176, 178, 184, 186, 188, 189, 200, 202, 204, 208, 214, 216, 217, 218, 219, 221, 229, 233, 234, 237, 239, 246, 247, 249, 250, 251, 252, 254, 256, 261, 263, 264, 265, 267, 269, 273, 275, 277, 279, 281, 284, 285, 286, 287, 288, 290, 291, 292, 303, 305, 306, 307, 308, 310, 313, 315, 316, 318, 322, 324, 325, 326, 327, 329, 330, 332, 334, 336, 342, 345, 347, 348, 353, 356, 362, 365, 369, 371, 372, 375, 376, 378, 379, 387, 388, 393, 399, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 419, 421, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 449, 450, 451, 454, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 603, 604, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 680, 681, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 752, 753, 755, 756, 760, 761, 762, 763, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 912, 913, 917, 918, 929, 933, 949, 951, 954, 955, 958, 961, 969, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1003, 1006, 1012, 1013, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 115, 117, 118, 125, 128, 130, 145, 157, 158, 172, 179, 180, 189, 191, 200, 202, 204, 205, 206, 218, 234, 258, 264, 267, 270, 283, 290, 299, 303, 305, 316, 317, 334, 339, 348, 349, 362, 371, 376, 382, 385, 387, 388, 389, 392, 396, 401, 404, 406, 407, 408, 409, 411, 412, 413, 415, 435, 437, 439, 440, 443, 444, 445, 446, 451, 455, 466, 468, 492, 507, 527, 529, 531, 533, 537, 540, 542, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 575, 581, 582, 584, 627, 634, 636, 643, 647, 650, 651, 652, 657, 664, 665, 667, 670, 672, 678, 680, 682, 684, 685, 686, 688, 738, 771, 772, 789, 797, 799, 803, 807, 817, 827, 828, 829, 830, 831, 832, 833, 838, 849, 850, 857, 861, 862, 870, 872, 884, 885, 892, 893, 897, 898, 900, 901, 902, 903, 928, 929, 969, 972, 974, 976, 977, 979, 982, 983, 984, 988, 990, 993, 994, 995, 996, 1000, 1001, 1004, 1011, 1013, 1014, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "here": [4, 8, 9, 12, 13, 17, 24, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 102, 103, 104, 106, 112, 115, 118, 122, 126, 132, 146, 149, 152, 160, 161, 170, 171, 172, 176, 179, 184, 189, 193, 200, 204, 206, 215, 216, 218, 221, 223, 229, 234, 236, 240, 247, 248, 249, 255, 258, 259, 261, 263, 264, 266, 270, 271, 273, 281, 283, 290, 298, 299, 300, 305, 308, 315, 317, 322, 324, 334, 342, 344, 349, 352, 358, 362, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 388, 393, 396, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 413, 415, 430, 433, 434, 435, 436, 437, 438, 440, 442, 445, 457, 465, 468, 529, 531, 532, 536, 537, 560, 561, 562, 563, 574, 575, 577, 581, 584, 587, 595, 621, 623, 640, 644, 646, 648, 654, 656, 658, 666, 668, 682, 684, 688, 692, 705, 718, 738, 748, 784, 789, 792, 793, 795, 803, 811, 812, 813, 814, 815, 816, 817, 819, 828, 832, 833, 856, 864, 867, 870, 884, 885, 895, 946, 969, 972, 976, 977, 978, 979, 980, 983, 986, 990, 992, 993, 994, 995, 1000, 1001, 1003, 1004, 1006, 1007, 1013, 1022, 1030, 1035], "ordin": [4, 53, 71, 132, 306, 309, 310, 315, 318, 370, 389, 409, 489, 560, 702, 857, 860, 865, 866, 873, 976, 977, 990, 1001, 1030, 1036], "encod": [4, 8, 11, 48, 55, 71, 95, 117, 132, 167, 170, 171, 172, 199, 200, 270, 302, 304, 305, 306, 311, 315, 317, 318, 334, 347, 349, 368, 370, 372, 378, 381, 387, 389, 403, 406, 407, 409, 410, 412, 457, 480, 489, 496, 519, 524, 530, 532, 533, 535, 537, 538, 539, 541, 544, 555, 559, 560, 562, 574, 581, 582, 584, 623, 641, 651, 652, 662, 665, 673, 727, 791, 796, 798, 815, 818, 852, 853, 855, 857, 859, 860, 863, 865, 866, 873, 876, 890, 969, 970, 976, 977, 980, 982, 983, 985, 994, 1000, 1001, 1017, 1023, 1024, 1030, 1034, 1036, 1037, 1038], "know": [4, 53, 66, 122, 146, 149, 152, 161, 170, 218, 236, 237, 261, 279, 317, 322, 342, 348, 362, 376, 387, 393, 396, 402, 405, 406, 407, 410, 493, 497, 503, 639, 645, 651, 652, 718, 748, 789, 803, 877, 878, 880, 881, 882, 883, 900, 901, 902, 903, 969, 979, 980, 981, 983, 992, 1028, 1029, 1032, 1034], "treat": [4, 6, 71, 122, 132, 164, 170, 200, 270, 309, 315, 325, 358, 376, 387, 389, 399, 409, 410, 435, 554, 555, 581, 582, 584, 600, 601, 625, 631, 638, 664, 667, 746, 780, 861, 862, 868, 869, 872, 873, 877, 880, 881, 883, 970, 972, 976, 980, 981, 987, 990, 994, 996, 1011, 1026, 1034, 1038], "dedic": [4, 259, 344, 374, 380, 382, 387, 390, 398, 402, 577, 665, 667, 680, 969, 1000, 1006, 1030], "rule": [4, 118, 176, 353, 356, 358, 362, 373, 376, 377, 378, 387, 389, 390, 397, 400, 401, 402, 406, 407, 409, 411, 529, 542, 543, 544, 545, 546, 554, 555, 562, 563, 595, 627, 638, 651, 652, 659, 661, 669, 670, 671, 699, 700, 789, 792, 793, 795, 803, 811, 815, 817, 841, 892, 905, 969, 974, 982, 983, 994, 996, 1001, 1006, 1013, 1017, 1024, 1027, 1034], "pass": [4, 7, 8, 20, 21, 38, 118, 122, 129, 146, 181, 184, 201, 230, 232, 233, 236, 240, 242, 251, 259, 262, 310, 313, 316, 339, 349, 358, 362, 363, 364, 371, 376, 377, 378, 381, 382, 383, 384, 385, 387, 389, 393, 396, 398, 402, 403, 406, 407, 409, 410, 412, 413, 414, 420, 424, 430, 431, 433, 435, 436, 437, 439, 440, 441, 442, 443, 445, 447, 450, 452, 453, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481, 484, 485, 488, 489, 490, 496, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 574, 575, 581, 582, 583, 584, 586, 587, 590, 600, 601, 603, 604, 610, 613, 619, 624, 625, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 724, 725, 734, 755, 766, 770, 771, 772, 773, 780, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 801, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 869, 871, 872, 873, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 913, 919, 923, 924, 928, 929, 931, 933, 935, 940, 941, 948, 950, 951, 954, 969, 970, 976, 978, 980, 981, 982, 983, 984, 987, 990, 993, 994, 995, 1001, 1004, 1006, 1010, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "explicitli": [4, 46, 53, 119, 152, 159, 164, 165, 201, 232, 236, 306, 313, 349, 358, 363, 370, 372, 376, 377, 378, 380, 387, 389, 393, 398, 406, 410, 412, 528, 542, 543, 572, 573, 590, 620, 641, 651, 652, 662, 673, 702, 719, 774, 780, 781, 792, 793, 823, 826, 832, 833, 858, 882, 883, 948, 969, 970, 972, 974, 976, 977, 980, 982, 983, 990, 1004, 1015, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036], "logic": [4, 109, 363, 377, 378, 383, 398, 409, 996, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "integ": [4, 17, 48, 53, 71, 170, 200, 218, 314, 315, 358, 362, 370, 371, 373, 378, 381, 385, 388, 389, 402, 403, 406, 407, 409, 410, 427, 430, 455, 457, 460, 465, 480, 489, 491, 494, 495, 496, 498, 501, 502, 505, 507, 508, 512, 515, 543, 552, 553, 554, 555, 556, 560, 561, 565, 575, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 625, 626, 637, 644, 648, 652, 658, 666, 668, 669, 692, 707, 727, 789, 791, 792, 793, 794, 796, 798, 803, 804, 805, 806, 808, 809, 812, 815, 823, 826, 828, 831, 832, 833, 857, 865, 866, 871, 872, 873, 876, 886, 888, 900, 901, 902, 903, 908, 943, 944, 945, 949, 970, 976, 981, 983, 990, 993, 995, 996, 1006, 1013, 1015, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1039], "lexicograph": [4, 389, 560, 780, 784, 834, 842], "ad": [4, 13, 20, 75, 103, 105, 111, 112, 118, 123, 145, 152, 158, 159, 179, 184, 202, 204, 225, 235, 236, 261, 262, 263, 303, 314, 315, 316, 317, 318, 319, 326, 348, 375, 376, 380, 382, 387, 389, 390, 407, 409, 410, 411, 412, 434, 435, 436, 438, 440, 442, 445, 452, 455, 457, 507, 515, 525, 528, 531, 533, 540, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 575, 582, 583, 584, 586, 595, 600, 601, 604, 606, 620, 622, 634, 635, 641, 643, 647, 651, 652, 662, 669, 671, 673, 688, 706, 707, 721, 722, 767, 769, 775, 776, 779, 781, 787, 788, 789, 803, 813, 820, 830, 849, 850, 851, 865, 871, 874, 889, 892, 893, 900, 901, 902, 903, 919, 969, 973, 975, 976, 977, 981, 983, 984, 986, 1001, 1004, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "benefit": [4, 56, 74, 75, 112, 170, 214, 225, 232, 234, 283, 317, 362, 376, 385, 389, 400, 402, 441, 454, 461, 501, 560, 561, 651, 652, 659, 661, 669, 670, 671, 890, 892, 969, 975, 983, 988, 990, 1001, 1004, 1022, 1025, 1026, 1027, 1034, 1035, 1036, 1037], "prevent": [4, 55, 125, 146, 169, 201, 204, 303, 309, 310, 334, 347, 352, 358, 376, 378, 380, 387, 388, 402, 407, 410, 435, 442, 481, 482, 583, 584, 604, 720, 777, 849, 850, 877, 878, 880, 881, 882, 883, 980, 982, 985, 986, 990, 996, 1013, 1024, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 55, 57, 67, 129, 144, 149, 157, 158, 159, 169, 170, 171, 172, 189, 200, 204, 218, 229, 232, 233, 236, 247, 251, 252, 261, 262, 264, 267, 270, 294, 303, 304, 307, 313, 315, 316, 318, 334, 349, 358, 362, 363, 364, 370, 371, 373, 374, 376, 378, 380, 381, 382, 384, 388, 389, 390, 392, 393, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 427, 433, 439, 441, 442, 443, 445, 447, 449, 450, 454, 457, 460, 481, 482, 501, 502, 516, 527, 530, 532, 539, 544, 550, 551, 552, 553, 557, 558, 559, 560, 561, 562, 563, 572, 573, 575, 581, 582, 584, 586, 596, 603, 604, 613, 620, 625, 626, 638, 641, 651, 652, 659, 661, 662, 669, 670, 671, 672, 673, 685, 689, 692, 693, 697, 709, 710, 712, 716, 728, 729, 744, 747, 749, 766, 770, 771, 772, 773, 782, 783, 785, 789, 792, 793, 801, 802, 821, 824, 832, 833, 838, 842, 851, 852, 856, 857, 861, 863, 865, 866, 873, 882, 883, 886, 889, 892, 900, 901, 902, 903, 904, 906, 908, 912, 913, 950, 964, 969, 970, 972, 975, 976, 977, 980, 981, 982, 983, 986, 987, 988, 990, 992, 993, 994, 995, 996, 1000, 1006, 1008, 1012, 1013, 1015, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "unknown": [4, 16, 56, 170, 236, 261, 322, 324, 364, 371, 389, 396, 399, 410, 859, 865, 866, 943, 979, 990, 1006, 1026, 1030, 1034, 1035], "sake": [4, 125, 165, 170, 200, 308, 347, 349, 384, 387, 663], "simplic": [4, 13, 31, 184, 347, 349, 389, 408, 983, 984, 985, 995], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 71, 72, 98, 111, 112, 117, 118, 119, 120, 121, 128, 129, 132, 135, 146, 152, 157, 165, 169, 170, 171, 172, 176, 179, 181, 189, 230, 231, 232, 236, 240, 241, 242, 243, 247, 248, 251, 259, 261, 262, 268, 273, 281, 294, 300, 309, 314, 315, 317, 318, 324, 336, 347, 348, 356, 371, 374, 375, 376, 378, 381, 382, 384, 387, 389, 393, 396, 402, 405, 406, 409, 410, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 496, 560, 570, 582, 651, 666, 668, 682, 686, 789, 792, 793, 801, 803, 813, 814, 815, 817, 870, 872, 892, 969, 976, 977, 986, 995, 996, 1001, 1003, 1004, 1006, 1008, 1011, 1013, 1014, 1015, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 53, 55, 59, 95, 118, 145, 152, 164, 171, 179, 180, 189, 200, 201, 218, 231, 233, 241, 243, 249, 256, 264, 270, 279, 281, 303, 306, 307, 310, 313, 314, 318, 343, 347, 348, 349, 352, 358, 362, 363, 370, 371, 374, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 392, 393, 396, 400, 402, 403, 406, 407, 409, 410, 411, 413, 414, 415, 416, 418, 419, 423, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 726, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 916, 918, 919, 921, 923, 928, 929, 930, 931, 932, 933, 934, 943, 945, 946, 948, 949, 950, 951, 953, 954, 955, 961, 964, 966, 967, 969, 970, 972, 974, 976, 979, 980, 981, 983, 984, 986, 987, 990, 992, 994, 995, 996, 1006, 1010, 1013, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "hyper": [4, 71, 118, 255, 261, 266, 300, 334, 358, 378, 387, 388, 389, 397, 406, 409, 411, 461, 637, 638, 793, 801, 803, 848, 890, 975, 976, 980, 983, 994, 995, 1006, 1017, 1022, 1036], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 109, 112, 114, 116, 118, 121, 126, 127, 138, 139, 146, 149, 152, 156, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 192, 200, 202, 204, 205, 208, 209, 217, 218, 225, 226, 229, 231, 234, 235, 236, 239, 246, 247, 248, 249, 251, 252, 255, 260, 261, 262, 265, 266, 269, 272, 273, 274, 276, 281, 283, 287, 288, 294, 297, 298, 300, 303, 304, 305, 313, 314, 316, 317, 318, 319, 326, 329, 331, 336, 339, 343, 344, 345, 347, 348, 349, 352, 353, 354, 355, 358, 362, 363, 364, 365, 368, 369, 371, 379, 381, 382, 383, 384, 385, 387, 393, 397, 400, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 979, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 996, 1000, 1001, 1007, 1009, 1011, 1012, 1013, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "compos": [4, 5, 25, 69, 70, 71, 75, 86, 114, 122, 132, 167, 170, 171, 172, 200, 202, 218, 231, 241, 243, 309, 314, 316, 317, 318, 365, 388, 402, 403, 406, 412, 508, 605, 979, 1022], "columntransform": [4, 70, 71, 132, 170, 171, 172, 200, 218, 231, 241, 243, 309, 314, 316, 317, 318, 368, 370, 387, 388, 459, 460, 622, 857, 969, 970, 1001, 1017, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ensembl": [4, 7, 10, 26, 27, 31, 56, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 164, 165, 171, 172, 173, 200, 222, 229, 238, 239, 241, 242, 258, 273, 279, 305, 309, 313, 314, 315, 316, 318, 319, 347, 358, 362, 365, 380, 381, 388, 389, 400, 402, 406, 411, 430, 497, 508, 625, 626, 628, 651, 695, 792, 793, 818, 822, 853, 856, 865, 896, 900, 902, 903, 969, 980, 981, 986, 987, 996, 1000, 1001, 1002, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "histgradientboostingregressor": [4, 7, 118, 122, 125, 126, 129, 132, 164, 171, 200, 309, 313, 314, 315, 316, 318, 319, 380, 409, 553, 558, 625, 626, 628, 970, 987, 1000, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cross_valid": [4, 122, 132, 170, 202, 257, 264, 309, 376, 388, 393, 568, 813, 814, 980, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038], "pipelin": [4, 31, 54, 58, 71, 74, 76, 86, 117, 122, 143, 145, 149, 150, 164, 165, 171, 172, 176, 179, 188, 189, 200, 201, 206, 214, 218, 222, 228, 229, 230, 234, 240, 243, 244, 254, 258, 260, 268, 275, 277, 281, 283, 289, 290, 297, 300, 305, 308, 310, 313, 314, 315, 316, 317, 318, 319, 326, 347, 348, 358, 362, 365, 368, 370, 371, 376, 379, 389, 393, 406, 410, 412, 416, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 495, 508, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 598, 600, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 706, 787, 788, 789, 790, 791, 792, 793, 796, 798, 803, 807, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 970, 976, 983, 984, 989, 990, 994, 995, 1000, 1001, 1002, 1004, 1007, 1009, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "make_pipelin": [4, 31, 58, 86, 117, 122, 132, 145, 146, 149, 164, 165, 170, 171, 176, 179, 188, 189, 200, 201, 206, 214, 218, 222, 229, 230, 231, 240, 241, 243, 258, 268, 281, 290, 297, 305, 308, 309, 310, 313, 314, 315, 316, 317, 318, 348, 358, 388, 393, 403, 406, 560, 669, 671, 844, 852, 877, 878, 880, 881, 882, 883, 892, 893, 894, 895, 897, 898, 970, 983, 990, 994, 995, 1025, 1032, 1035], "ordinalencod": [4, 122, 132, 171, 172, 200, 309, 318, 370, 389, 409, 574, 828, 860, 865, 873, 970, 982, 990, 1030, 1031, 1034, 1035, 1036, 1037, 1038], "categorical_column": [4, 122, 170, 172, 460], "ordinal_encod": [4, 122], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 74, 76, 86, 89, 97, 98, 100, 102, 104, 105, 110, 122, 132, 136, 146, 158, 165, 167, 170, 171, 172, 176, 192, 200, 201, 208, 214, 216, 218, 222, 225, 229, 231, 234, 236, 237, 243, 248, 258, 259, 262, 270, 281, 283, 289, 290, 291, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 318, 334, 337, 347, 349, 358, 365, 370, 371, 372, 373, 376, 378, 381, 385, 389, 393, 398, 400, 401, 402, 404, 407, 409, 410, 411, 412, 418, 423, 426, 430, 434, 435, 436, 438, 440, 442, 445, 457, 458, 459, 460, 461, 475, 476, 477, 478, 481, 482, 489, 496, 501, 502, 507, 508, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 550, 552, 554, 557, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 629, 631, 632, 633, 634, 635, 646, 651, 656, 666, 669, 677, 681, 682, 683, 684, 685, 687, 694, 695, 706, 745, 746, 777, 789, 792, 793, 803, 818, 821, 827, 836, 841, 844, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 892, 894, 897, 898, 921, 923, 969, 970, 972, 974, 976, 977, 980, 981, 984, 994, 995, 997, 1000, 1001, 1002, 1006, 1011, 1012, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "remaind": [4, 122, 170, 189, 200, 202, 218, 318, 342, 352, 403, 457, 460, 1022, 1029, 1030, 1031, 1034, 1035, 1038], "passthrough": [4, 72, 122, 170, 171, 200, 218, 309, 318, 403, 457, 460, 560, 561, 851, 852, 990, 1031, 1033, 1036, 1037], "short": [4, 5, 122, 128, 191, 259, 299, 347, 376, 384, 406, 410, 414, 976, 977, 983, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "easier": [4, 44, 62, 66, 82, 122, 179, 185, 231, 258, 259, 303, 334, 347, 358, 371, 376, 378, 381, 384, 387, 392, 404, 406, 461, 508, 890, 923, 975, 980, 987, 996, 1001, 1004, 1015, 1031, 1036], "specifi": [4, 20, 55, 95, 122, 123, 153, 156, 158, 159, 160, 189, 201, 208, 246, 269, 362, 363, 370, 374, 376, 378, 385, 388, 389, 393, 396, 402, 403, 406, 407, 409, 411, 412, 414, 416, 430, 434, 438, 443, 445, 456, 457, 460, 462, 463, 465, 466, 467, 468, 469, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 508, 524, 526, 530, 531, 533, 534, 539, 540, 545, 550, 552, 553, 554, 555, 557, 560, 561, 576, 577, 586, 587, 590, 595, 603, 604, 613, 624, 625, 626, 631, 636, 639, 640, 641, 644, 645, 646, 648, 649, 651, 652, 653, 654, 655, 656, 658, 661, 662, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 680, 684, 691, 693, 695, 702, 704, 721, 722, 730, 746, 763, 771, 772, 775, 776, 779, 789, 791, 792, 793, 795, 796, 798, 802, 803, 806, 811, 812, 813, 814, 815, 816, 817, 819, 823, 826, 827, 828, 830, 831, 832, 833, 837, 865, 866, 867, 870, 871, 873, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 924, 931, 964, 970, 976, 977, 979, 980, 983, 987, 988, 990, 993, 994, 995, 1010, 1014, 1022, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "next": [4, 7, 25, 60, 80, 121, 122, 126, 135, 159, 169, 173, 193, 197, 200, 230, 238, 242, 243, 248, 256, 267, 279, 308, 309, 310, 315, 323, 347, 352, 356, 358, 365, 374, 376, 378, 380, 399, 402, 403, 406, 409, 501, 502, 603, 627, 685, 691, 693, 695, 773, 787, 788, 818, 946, 969, 973, 979, 980, 990, 1004, 1019, 1022, 1035, 1036], "verbose_feature_names_out": [4, 122, 170, 171, 172, 243, 309, 316, 317, 318, 403, 457, 460, 1035], "categorical_featur": [4, 71, 122, 171, 309, 315, 316, 317, 318, 381, 409, 554, 555, 625, 626, 987, 1030, 1034, 1037], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 138, 145, 146, 148, 152, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 181, 182, 186, 192, 199, 200, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 234, 237, 238, 239, 240, 242, 243, 246, 248, 249, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 279, 281, 285, 289, 290, 291, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 325, 332, 334, 335, 336, 342, 343, 347, 348, 352, 356, 358, 378, 381, 385, 388, 389, 398, 402, 403, 406, 407, 409, 410, 414, 427, 430, 431, 433, 436, 440, 442, 444, 445, 446, 447, 451, 452, 453, 455, 462, 467, 481, 484, 485, 488, 490, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 576, 577, 586, 587, 600, 601, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 625, 626, 627, 628, 631, 632, 633, 634, 635, 639, 640, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 667, 669, 670, 671, 672, 680, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 727, 780, 783, 787, 788, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 811, 816, 817, 818, 820, 822, 823, 824, 825, 826, 837, 841, 848, 849, 850, 852, 857, 869, 873, 881, 884, 885, 892, 893, 894, 897, 900, 901, 902, 903, 905, 906, 928, 929, 949, 951, 954, 969, 970, 972, 975, 980, 981, 982, 983, 984, 987, 988, 990, 995, 996, 1006, 1010, 1011, 1015, 1019, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "set_output": [4, 122, 167, 171, 228, 244, 308, 309, 379, 426, 435, 436, 438, 440, 442, 457, 461, 475, 476, 477, 478, 489, 497, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 575, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 651, 681, 682, 685, 818, 836, 841, 844, 848, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 890, 1037, 1038], "across": [4, 55, 61, 67, 85, 118, 138, 170, 189, 194, 222, 256, 258, 261, 281, 303, 308, 377, 378, 385, 389, 396, 401, 402, 406, 410, 414, 430, 433, 443, 445, 447, 450, 453, 455, 462, 465, 467, 481, 484, 485, 488, 490, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 560, 561, 581, 584, 587, 595, 600, 601, 603, 604, 625, 626, 627, 632, 633, 634, 635, 639, 640, 643, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 669, 671, 672, 678, 679, 682, 683, 684, 685, 686, 687, 688, 697, 698, 710, 723, 749, 780, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 837, 841, 848, 849, 850, 857, 861, 862, 869, 870, 872, 873, 881, 884, 885, 887, 888, 892, 893, 894, 897, 900, 901, 928, 929, 948, 951, 954, 969, 976, 978, 980, 990, 994, 996, 1001, 1004, 1015, 1022, 1025, 1028, 1029, 1030, 1031, 1032], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 101, 103, 105, 109, 112, 115, 117, 122, 123, 124, 125, 132, 155, 158, 160, 161, 165, 180, 188, 189, 192, 197, 200, 201, 208, 209, 210, 218, 221, 222, 236, 237, 239, 246, 247, 248, 249, 251, 252, 256, 259, 260, 261, 262, 264, 269, 272, 275, 281, 286, 288, 291, 294, 298, 300, 303, 305, 308, 309, 313, 326, 330, 334, 344, 347, 348, 349, 362, 371, 376, 378, 382, 383, 387, 403, 406, 410, 414, 501, 526, 590, 603, 604, 773, 865, 919, 924, 941, 980, 987, 995, 1011], "cv_result": [4, 71, 118, 259, 260, 262, 264, 393, 803, 815, 980], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 103, 109, 111, 112, 114, 121, 122, 124, 125, 128, 131, 132, 139, 140, 145, 146, 149, 164, 167, 169, 170, 171, 172, 173, 176, 184, 191, 192, 195, 200, 202, 206, 208, 216, 218, 229, 234, 235, 236, 239, 243, 250, 254, 259, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 277, 279, 288, 289, 290, 297, 298, 299, 300, 305, 308, 309, 310, 313, 314, 315, 316, 322, 323, 325, 326, 334, 342, 347, 348, 352, 358, 371, 376, 378, 381, 388, 389, 396, 397, 399, 400, 401, 403, 405, 407, 409, 411, 419, 421, 425, 430, 436, 440, 442, 445, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 495, 497, 525, 529, 534, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 585, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 602, 603, 604, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 734, 747, 748, 749, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 792, 793, 795, 803, 808, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 838, 839, 841, 842, 843, 848, 849, 850, 852, 872, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 931, 969, 972, 976, 978, 983, 986, 988, 990, 994, 1001, 1009, 1011, 1013, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "neg_mean_absolute_error": [4, 132, 202, 980], "neg_root_mean_squared_error": [4, 309, 980], "mae": [4, 132, 200, 202, 551, 558, 737, 901, 903, 980, 996, 1029, 1030, 1034, 1035], "test_neg_mean_absolute_error": [4, 202], "rmse": [4, 81, 309, 742, 1033], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 103, 104, 106, 112, 115, 118, 119, 120, 121, 122, 124, 126, 138, 140, 145, 146, 148, 149, 152, 153, 155, 157, 161, 169, 171, 172, 173, 176, 184, 185, 186, 187, 191, 192, 195, 196, 200, 202, 203, 204, 207, 208, 215, 216, 218, 222, 223, 226, 231, 233, 235, 236, 239, 243, 249, 255, 259, 260, 261, 262, 264, 266, 269, 270, 274, 281, 285, 292, 294, 298, 299, 300, 305, 308, 310, 313, 314, 315, 317, 319, 322, 323, 326, 334, 347, 348, 349, 352, 356, 358, 362, 370, 371, 374, 377, 378, 384, 389, 393, 396, 403, 406, 409, 410, 412, 457, 460, 461, 465, 471, 495, 505, 534, 537, 542, 543, 552, 553, 554, 555, 557, 558, 562, 563, 570, 576, 577, 581, 582, 584, 605, 610, 623, 639, 640, 642, 643, 645, 646, 647, 649, 653, 654, 655, 656, 659, 660, 669, 670, 677, 706, 710, 729, 785, 787, 788, 790, 791, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810, 814, 815, 816, 821, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 849, 850, 851, 852, 853, 854, 862, 868, 872, 880, 890, 891, 892, 893, 894, 897, 905, 916, 941, 948, 970, 980, 981, 982, 983, 988, 996, 1006, 1010, 1011, 1013, 1014, 1015, 1022, 1024, 1030, 1031, 1033, 1037], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 112, 119, 120, 145, 149, 152, 153, 154, 156, 161, 169, 171, 172, 180, 184, 186, 192, 200, 202, 206, 215, 216, 218, 222, 233, 235, 259, 261, 262, 264, 267, 269, 272, 281, 297, 326, 347, 348, 349, 988, 1011], "std": [4, 11, 12, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 119, 121, 122, 132, 139, 161, 164, 165, 170, 180, 185, 209, 233, 259, 260, 261, 263, 264, 266, 269, 271, 275, 309, 325, 337, 348, 358, 389, 402, 406, 409, 508, 599, 602, 872, 883, 990, 1014, 1030, 1034], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 103, 105, 106, 112, 114, 115, 119, 123, 134, 144, 149, 152, 156, 161, 171, 180, 184, 196, 200, 201, 204, 215, 217, 218, 221, 232, 233, 234, 237, 246, 248, 249, 259, 261, 264, 266, 267, 268, 270, 271, 281, 286, 300, 305, 307, 308, 315, 318, 323, 342, 356, 362, 370, 373, 374, 376, 380, 382, 385, 389, 392, 393, 399, 400, 402, 405, 406, 407, 408, 409, 410, 412, 413, 437, 438, 440, 441, 443, 462, 464, 467, 471, 482, 508, 509, 510, 511, 516, 521, 531, 533, 534, 540, 550, 551, 552, 553, 556, 557, 558, 559, 581, 582, 583, 584, 600, 601, 607, 620, 642, 664, 672, 685, 689, 692, 699, 700, 747, 794, 797, 799, 804, 805, 808, 828, 832, 833, 837, 857, 884, 886, 900, 901, 902, 903, 927, 932, 933, 955, 959, 960, 969, 972, 974, 976, 977, 980, 981, 982, 983, 984, 986, 987, 990, 992, 994, 995, 996, 1006, 1013, 1015, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "044": [4, 56, 68, 259, 743, 980], "003": 4, "068": [4, 261], "005": [4, 119, 261, 265, 269, 286, 303, 348, 382], "quit": [4, 53, 57, 86, 115, 138, 149, 170, 171, 198, 218, 269, 316, 347, 362, 381, 388, 402, 410, 975, 977, 982, 1004, 1030], "good": [4, 9, 20, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 105, 118, 121, 124, 125, 153, 157, 164, 170, 184, 189, 200, 201, 206, 215, 226, 229, 233, 236, 239, 247, 249, 255, 261, 267, 276, 300, 308, 309, 315, 322, 327, 334, 347, 348, 358, 362, 363, 364, 375, 377, 378, 379, 380, 382, 387, 389, 396, 399, 400, 402, 404, 406, 407, 409, 410, 411, 412, 430, 432, 437, 527, 552, 554, 555, 583, 623, 633, 640, 641, 649, 651, 652, 654, 662, 673, 683, 687, 715, 723, 734, 756, 817, 886, 929, 969, 975, 976, 977, 980, 981, 983, 984, 985, 987, 988, 990, 994, 995, 996, 1001, 1004, 1006, 1010, 1013, 1015, 1028], "trial": [4, 266, 440, 442, 453, 664, 787, 788, 976, 1028], "without": [4, 5, 13, 24, 36, 42, 55, 56, 67, 68, 75, 100, 118, 124, 127, 129, 132, 145, 149, 159, 167, 169, 170, 171, 184, 189, 208, 229, 233, 236, 237, 240, 242, 255, 262, 266, 268, 282, 295, 303, 304, 308, 310, 313, 342, 348, 364, 371, 372, 374, 376, 377, 378, 380, 381, 382, 385, 387, 388, 389, 393, 396, 402, 403, 407, 409, 410, 411, 412, 427, 432, 434, 439, 451, 462, 467, 489, 497, 508, 525, 527, 548, 549, 556, 572, 573, 604, 620, 624, 627, 632, 652, 685, 693, 773, 792, 793, 794, 801, 803, 817, 818, 834, 841, 845, 851, 852, 855, 858, 861, 862, 864, 868, 869, 870, 872, 877, 892, 908, 949, 969, 970, 974, 976, 977, 980, 983, 986, 990, 994, 995, 996, 1000, 1001, 1006, 1007, 1015, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "tune": [4, 44, 55, 71, 100, 112, 118, 148, 152, 164, 171, 189, 204, 205, 217, 225, 255, 266, 283, 304, 334, 347, 358, 362, 363, 364, 388, 389, 397, 401, 402, 406, 409, 411, 412, 445, 455, 552, 553, 587, 606, 607, 608, 610, 612, 613, 615, 616, 618, 636, 652, 683, 687, 848, 974, 975, 976, 977, 979, 980, 983, 984, 986, 994, 1007, 1017, 1022, 1036, 1038], "just": [4, 31, 70, 86, 95, 118, 122, 149, 190, 197, 222, 234, 261, 268, 272, 281, 297, 334, 347, 348, 358, 371, 375, 376, 377, 378, 380, 381, 384, 387, 388, 389, 399, 402, 403, 406, 409, 411, 412, 414, 461, 526, 528, 535, 539, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 572, 577, 603, 604, 639, 645, 650, 651, 653, 655, 659, 660, 661, 669, 670, 671, 795, 811, 841, 849, 850, 969, 976, 979, 980, 981, 984, 988, 990, 994, 1001, 1013, 1022, 1026, 1028, 1030, 1034], "had": [4, 9, 47, 125, 157, 236, 303, 309, 316, 358, 376, 377, 410, 413, 437, 970, 980, 1004, 1006, 1022, 1023, 1029, 1030, 1031, 1032, 1033, 1037], "explicit": [4, 167, 171, 176, 228, 236, 244, 362, 363, 364, 375, 377, 387, 389, 390, 403, 410, 416, 465, 492, 494, 495, 534, 544, 545, 631, 632, 634, 669, 789, 790, 797, 836, 844, 852, 892, 897, 944, 948, 972, 974, 976, 980, 990, 996, 1000, 1022, 1026, 1031, 1032, 1035], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 111, 113, 128, 144, 149, 152, 164, 165, 170, 171, 172, 176, 179, 184, 195, 201, 202, 204, 218, 233, 236, 240, 259, 261, 262, 264, 270, 283, 303, 308, 310, 316, 326, 334, 349, 356, 362, 364, 371, 374, 376, 377, 378, 379, 380, 384, 387, 389, 390, 391, 396, 400, 401, 402, 403, 406, 407, 409, 410, 412, 437, 440, 442, 443, 450, 457, 460, 486, 487, 501, 539, 560, 561, 562, 563, 600, 601, 609, 613, 614, 617, 625, 632, 657, 685, 760, 763, 766, 770, 771, 772, 773, 781, 789, 803, 810, 817, 852, 856, 866, 870, 872, 873, 882, 883, 889, 900, 901, 946, 969, 970, 976, 979, 980, 981, 983, 984, 985, 990, 995, 996, 999, 1000, 1003, 1004, 1006, 1013, 1014, 1015, 1022, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "But": [4, 9, 53, 169, 201, 202, 261, 281, 303, 376, 387, 402, 405, 408, 409, 455, 738, 900, 901, 969, 980, 995, 1001], "much": [4, 6, 7, 9, 19, 25, 39, 40, 55, 80, 82, 92, 98, 105, 117, 125, 126, 132, 133, 134, 152, 164, 165, 170, 171, 172, 173, 176, 197, 198, 202, 233, 236, 261, 263, 264, 267, 272, 299, 304, 308, 309, 310, 315, 316, 318, 334, 339, 347, 348, 358, 362, 364, 371, 376, 377, 378, 381, 384, 387, 388, 392, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 440, 441, 489, 527, 528, 529, 531, 552, 553, 554, 555, 651, 652, 659, 661, 669, 670, 671, 685, 771, 772, 792, 793, 807, 867, 885, 892, 969, 972, 975, 976, 977, 979, 980, 981, 983, 984, 986, 988, 992, 993, 995, 996, 1001, 1004, 1010, 1011, 1013, 1014, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "monoton": [4, 25, 110, 136, 167, 171, 218, 232, 314, 400, 550, 551, 554, 555, 557, 558, 625, 628, 629, 687, 699, 868, 880, 894, 897, 900, 901, 902, 903, 977, 981, 990, 995, 1029, 1033, 1037, 1039], "relationship": [4, 20, 112, 113, 158, 169, 170, 179, 184, 200, 202, 203, 268, 304, 310, 389, 402, 404, 406, 412, 455, 629, 707, 977, 980, 982, 983, 987, 988, 1013, 1027], "case": [4, 7, 8, 25, 27, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 103, 115, 117, 118, 125, 126, 132, 146, 148, 149, 152, 159, 170, 171, 184, 186, 189, 191, 200, 201, 202, 204, 205, 208, 214, 216, 217, 218, 229, 233, 234, 235, 236, 240, 251, 255, 258, 260, 261, 262, 264, 267, 268, 270, 281, 288, 299, 303, 305, 308, 310, 313, 316, 347, 348, 349, 356, 358, 362, 363, 364, 370, 371, 374, 376, 377, 378, 380, 381, 382, 383, 385, 387, 388, 389, 390, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 430, 433, 436, 437, 439, 440, 444, 446, 456, 457, 460, 467, 489, 501, 502, 508, 532, 534, 535, 536, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 575, 581, 584, 586, 587, 590, 595, 599, 602, 603, 604, 618, 620, 621, 623, 625, 640, 641, 646, 649, 650, 651, 652, 654, 656, 659, 661, 662, 665, 667, 668, 669, 673, 675, 676, 677, 678, 679, 680, 692, 696, 701, 702, 705, 711, 713, 714, 715, 718, 720, 721, 726, 727, 730, 734, 735, 737, 738, 740, 742, 745, 746, 748, 755, 770, 773, 775, 777, 780, 781, 784, 786, 788, 789, 792, 793, 795, 803, 807, 811, 812, 813, 814, 815, 816, 817, 819, 821, 829, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 852, 859, 861, 862, 865, 866, 867, 870, 871, 872, 873, 876, 882, 883, 884, 885, 892, 894, 897, 900, 901, 907, 908, 918, 929, 930, 948, 969, 970, 972, 974, 975, 977, 978, 979, 981, 982, 983, 984, 986, 987, 990, 994, 995, 996, 1000, 1001, 1003, 1004, 1006, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "usual": [4, 40, 78, 79, 81, 124, 125, 127, 132, 169, 171, 186, 200, 201, 255, 258, 261, 270, 271, 304, 316, 334, 358, 362, 363, 374, 376, 378, 384, 387, 388, 389, 393, 399, 402, 403, 406, 407, 409, 410, 411, 443, 449, 531, 533, 535, 540, 552, 553, 600, 601, 623, 633, 651, 652, 659, 661, 669, 670, 671, 685, 718, 750, 795, 816, 820, 892, 929, 969, 970, 972, 975, 976, 977, 979, 980, 981, 984, 985, 986, 987, 990, 994, 995, 996, 1006, 1012, 1013, 1037], "hot": [4, 71, 117, 120, 132, 170, 200, 270, 304, 305, 309, 315, 334, 389, 409, 410, 544, 559, 574, 641, 651, 652, 662, 673, 855, 857, 859, 860, 863, 865, 866, 873, 976, 990, 1030, 1036, 1037], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 115, 117, 118, 120, 125, 126, 128, 130, 145, 146, 149, 152, 154, 159, 164, 165, 170, 171, 184, 188, 189, 200, 201, 204, 205, 208, 217, 218, 221, 223, 226, 229, 230, 232, 233, 234, 236, 243, 251, 258, 261, 262, 268, 276, 279, 281, 291, 297, 299, 300, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 325, 327, 334, 336, 342, 347, 348, 349, 352, 353, 356, 358, 362, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 393, 396, 398, 399, 400, 401, 402, 403, 406, 407, 409, 410, 411, 412, 413, 418, 425, 430, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 465, 467, 475, 476, 477, 478, 482, 489, 491, 496, 507, 508, 516, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 574, 576, 577, 578, 579, 581, 582, 584, 585, 586, 587, 590, 595, 600, 601, 602, 603, 604, 607, 612, 615, 616, 620, 621, 622, 623, 624, 625, 626, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 680, 681, 682, 685, 686, 688, 694, 697, 699, 700, 721, 722, 730, 733, 734, 755, 761, 770, 775, 776, 779, 780, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 803, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 852, 858, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 918, 943, 964, 969, 970, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 994, 995, 996, 999, 1003, 1004, 1006, 1013, 1014, 1015, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 118, 122, 128, 135, 149, 155, 157, 160, 165, 200, 218, 235, 267, 270, 299, 308, 313, 316, 342, 348, 358, 362, 369, 371, 373, 376, 378, 382, 383, 384, 385, 388, 389, 390, 400, 402, 404, 408, 409, 410, 412, 420, 421, 424, 425, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 483, 490, 524, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 584, 604, 620, 621, 622, 623, 628, 631, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 670, 671, 672, 680, 681, 682, 683, 684, 693, 727, 787, 788, 796, 820, 821, 822, 824, 825, 826, 827, 835, 836, 838, 840, 843, 844, 850, 855, 856, 857, 859, 863, 864, 867, 868, 870, 871, 873, 884, 885, 888, 892, 893, 895, 896, 898, 901, 903, 912, 914, 935, 951, 954, 969, 972, 973, 974, 976, 977, 979, 980, 981, 983, 984, 990, 993, 995, 996, 999, 1001, 1004, 1006, 1013, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 101, 129, 149, 152, 153, 154, 157, 158, 159, 161, 167, 171, 176, 180, 181, 188, 200, 202, 204, 214, 215, 216, 218, 220, 223, 227, 229, 235, 251, 258, 261, 262, 263, 268, 298, 299, 300, 302, 303, 311, 314, 317, 319, 327, 329, 331, 334, 345, 358, 361, 362, 368, 369, 370, 373, 376, 381, 385, 387, 388, 389, 401, 402, 403, 407, 409, 411, 412, 439, 440, 443, 444, 450, 457, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 494, 503, 507, 508, 517, 527, 531, 533, 534, 540, 542, 543, 554, 555, 575, 583, 584, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 624, 625, 634, 637, 638, 639, 640, 642, 645, 651, 652, 653, 654, 655, 665, 667, 669, 670, 671, 674, 680, 681, 682, 683, 685, 687, 692, 696, 709, 733, 739, 749, 751, 761, 767, 769, 795, 803, 806, 818, 819, 820, 832, 833, 834, 849, 850, 853, 856, 861, 862, 864, 867, 869, 870, 872, 877, 878, 879, 881, 882, 884, 885, 892, 893, 894, 895, 896, 897, 898, 956, 957, 958, 969, 972, 973, 976, 980, 981, 982, 983, 984, 988, 994, 995, 1001, 1004, 1006, 1013, 1014, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "same": [4, 7, 8, 16, 20, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 103, 105, 113, 115, 119, 122, 123, 125, 126, 130, 149, 152, 170, 171, 173, 186, 188, 189, 194, 200, 201, 202, 208, 218, 236, 239, 240, 251, 256, 257, 258, 259, 261, 262, 264, 266, 267, 269, 274, 281, 286, 299, 303, 304, 306, 308, 309, 313, 315, 325, 334, 342, 347, 348, 349, 356, 358, 362, 363, 364, 370, 371, 373, 375, 376, 378, 380, 382, 385, 387, 388, 389, 390, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 423, 427, 431, 432, 439, 443, 449, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 486, 488, 489, 491, 497, 501, 502, 524, 525, 528, 529, 530, 531, 532, 533, 536, 540, 542, 544, 545, 546, 547, 550, 552, 553, 554, 555, 557, 558, 560, 561, 582, 583, 595, 596, 599, 603, 604, 606, 615, 620, 621, 622, 625, 626, 639, 642, 645, 646, 648, 651, 652, 656, 659, 660, 661, 665, 666, 667, 668, 669, 670, 671, 677, 680, 692, 697, 698, 705, 706, 708, 710, 718, 723, 724, 728, 747, 748, 749, 770, 771, 772, 778, 780, 782, 784, 785, 787, 788, 789, 790, 792, 793, 795, 797, 798, 803, 807, 808, 811, 813, 814, 815, 816, 817, 818, 819, 834, 835, 836, 840, 842, 843, 844, 855, 856, 857, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 881, 892, 893, 900, 902, 914, 918, 929, 946, 951, 954, 955, 965, 969, 970, 972, 974, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 994, 995, 996, 1000, 1001, 1010, 1015, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "minmaxscal": [4, 5, 72, 145, 176, 222, 298, 315, 364, 403, 457, 878, 970, 990, 1024, 1027, 1030, 1032, 1033, 1034, 1038], "although": [4, 9, 25, 119, 132, 169, 197, 218, 229, 248, 279, 358, 364, 378, 389, 402, 403, 407, 410, 489, 806, 809, 863, 979, 981, 982, 983, 986, 996, 1006, 1013, 1014, 1015, 1022, 1030, 1037], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 55, 57, 70, 72, 73, 86, 106, 112, 117, 118, 121, 127, 132, 149, 158, 170, 171, 184, 197, 200, 206, 218, 221, 222, 223, 226, 229, 232, 233, 234, 236, 237, 248, 249, 256, 261, 263, 264, 268, 270, 271, 279, 281, 294, 303, 305, 307, 309, 310, 316, 317, 325, 326, 332, 334, 342, 344, 347, 348, 349, 362, 370, 374, 376, 377, 378, 380, 384, 388, 389, 393, 396, 400, 401, 402, 403, 406, 407, 409, 410, 411, 412, 427, 433, 435, 439, 440, 442, 443, 447, 449, 460, 466, 472, 480, 492, 496, 501, 520, 528, 530, 531, 532, 534, 537, 539, 542, 543, 550, 551, 552, 553, 554, 555, 557, 558, 574, 575, 576, 581, 582, 584, 586, 587, 590, 595, 599, 603, 625, 631, 642, 643, 644, 647, 648, 649, 652, 664, 675, 676, 691, 693, 695, 700, 720, 721, 722, 726, 728, 730, 735, 738, 770, 775, 776, 779, 780, 784, 789, 792, 793, 803, 849, 853, 854, 855, 857, 859, 861, 864, 865, 866, 869, 872, 873, 881, 884, 885, 889, 892, 893, 900, 901, 902, 903, 907, 912, 916, 929, 932, 933, 946, 948, 964, 969, 970, 972, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 988, 990, 994, 995, 996, 1015, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 102, 106, 115, 116, 117, 119, 122, 125, 126, 128, 130, 131, 141, 148, 149, 152, 154, 156, 160, 164, 170, 171, 172, 173, 180, 185, 186, 189, 190, 195, 201, 202, 204, 208, 214, 215, 218, 221, 222, 225, 229, 232, 234, 240, 246, 251, 252, 255, 256, 259, 261, 262, 264, 267, 268, 269, 270, 272, 273, 276, 281, 283, 287, 297, 298, 299, 303, 304, 305, 308, 313, 315, 317, 318, 319, 322, 325, 327, 334, 338, 339, 342, 347, 349, 354, 355, 362, 363, 364, 370, 371, 373, 376, 378, 380, 381, 382, 384, 387, 388, 389, 390, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 427, 433, 434, 436, 438, 439, 440, 443, 444, 445, 446, 447, 448, 450, 452, 455, 457, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 482, 501, 502, 504, 506, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 572, 573, 574, 575, 577, 581, 582, 584, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 623, 624, 625, 627, 629, 633, 636, 645, 646, 651, 657, 658, 659, 660, 669, 670, 671, 679, 682, 683, 684, 685, 686, 687, 688, 701, 703, 705, 710, 717, 718, 720, 721, 722, 723, 724, 728, 729, 730, 746, 748, 749, 756, 763, 766, 770, 771, 772, 773, 775, 776, 777, 779, 783, 784, 787, 788, 789, 791, 792, 793, 794, 799, 803, 804, 805, 806, 808, 809, 813, 819, 820, 821, 823, 824, 825, 826, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 856, 857, 865, 866, 869, 870, 873, 881, 885, 889, 892, 894, 897, 900, 901, 902, 903, 904, 905, 912, 913, 928, 929, 931, 935, 945, 951, 954, 970, 972, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 992, 994, 995, 996, 1000, 1001, 1003, 1006, 1010, 1011, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 71, 82, 86, 112, 117, 120, 125, 149, 153, 156, 159, 170, 171, 173, 180, 186, 193, 200, 204, 206, 208, 218, 235, 236, 247, 258, 261, 262, 267, 279, 281, 298, 299, 300, 303, 307, 308, 309, 310, 324, 334, 342, 347, 348, 349, 352, 358, 362, 363, 371, 374, 378, 381, 384, 387, 388, 389, 393, 396, 399, 400, 402, 406, 407, 408, 409, 410, 412, 415, 425, 440, 441, 454, 458, 468, 475, 476, 477, 527, 529, 545, 547, 549, 551, 553, 555, 558, 561, 563, 581, 584, 600, 601, 604, 625, 626, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 666, 669, 670, 671, 672, 673, 682, 692, 702, 705, 706, 714, 715, 716, 738, 755, 777, 780, 784, 789, 803, 816, 820, 825, 826, 835, 838, 840, 842, 843, 844, 850, 861, 862, 870, 872, 873, 877, 878, 880, 881, 882, 883, 893, 895, 898, 901, 903, 944, 970, 972, 973, 974, 975, 976, 977, 978, 980, 981, 983, 985, 987, 990, 995, 996, 1004, 1014, 1028, 1029, 1031, 1032, 1033, 1034, 1036, 1038], "compar": [4, 5, 19, 20, 24, 25, 27, 36, 37, 43, 49, 54, 55, 57, 58, 64, 68, 72, 81, 84, 86, 87, 98, 103, 105, 110, 112, 113, 115, 121, 122, 125, 130, 132, 136, 149, 156, 164, 165, 167, 170, 172, 173, 178, 182, 184, 188, 189, 195, 197, 200, 203, 204, 206, 208, 210, 217, 218, 219, 221, 222, 225, 228, 231, 234, 240, 242, 244, 248, 249, 254, 256, 258, 266, 268, 270, 272, 277, 282, 286, 290, 291, 295, 296, 301, 302, 304, 308, 311, 315, 347, 348, 349, 356, 358, 364, 371, 373, 376, 378, 399, 400, 402, 404, 405, 406, 407, 409, 411, 412, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 451, 456, 457, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 483, 489, 495, 497, 505, 507, 515, 517, 521, 524, 530, 544, 545, 554, 555, 556, 557, 558, 564, 624, 632, 637, 638, 646, 648, 650, 651, 656, 659, 661, 669, 670, 677, 688, 698, 705, 708, 723, 730, 735, 778, 788, 789, 794, 803, 815, 818, 825, 834, 838, 841, 845, 849, 852, 853, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 872, 873, 878, 881, 894, 896, 897, 969, 972, 973, 974, 976, 977, 979, 980, 981, 982, 983, 984, 986, 990, 991, 994, 995, 996, 999, 1000, 1013, 1014, 1022, 1024, 1029, 1030, 1035], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 141, 144, 145, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 353, 354, 355, 356, 358, 362, 369, 370, 371, 374, 376, 377, 378, 379, 380, 382, 384, 385, 387, 388, 389, 392, 393, 395, 396, 398, 399, 402, 403, 406, 407, 408, 409, 410, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 453, 455, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 478, 483, 486, 487, 489, 496, 499, 501, 502, 524, 527, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 562, 563, 574, 575, 581, 582, 584, 620, 621, 622, 623, 624, 625, 626, 636, 639, 640, 642, 645, 646, 650, 651, 652, 653, 654, 655, 656, 659, 661, 663, 665, 669, 670, 671, 677, 681, 684, 685, 686, 688, 692, 695, 696, 699, 700, 702, 705, 707, 718, 719, 721, 722, 726, 727, 730, 731, 746, 748, 765, 771, 773, 774, 775, 776, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 818, 820, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 855, 856, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 892, 894, 895, 897, 898, 900, 915, 927, 929, 933, 934, 935, 942, 943, 949, 951, 954, 967, 969, 970, 975, 976, 978, 980, 981, 983, 986, 990, 992, 995, 996, 999, 1001, 1003, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1022, 1025, 1026, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 103, 105, 106, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 141, 144, 145, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 247, 248, 249, 250, 251, 252, 255, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 285, 286, 287, 288, 290, 291, 292, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 353, 354, 355, 356, 358, 362, 370, 371, 376, 378, 381, 382, 385, 387, 389, 393, 399, 402, 403, 406, 407, 408, 409, 410, 412, 415, 417, 420, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 453, 455, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 478, 489, 490, 501, 502, 513, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 550, 551, 552, 553, 554, 556, 557, 558, 559, 562, 563, 574, 575, 578, 579, 581, 582, 586, 587, 590, 599, 602, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 634, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 661, 663, 664, 665, 667, 668, 669, 670, 671, 674, 675, 676, 677, 684, 685, 688, 692, 695, 696, 699, 700, 702, 705, 706, 707, 708, 718, 719, 721, 722, 726, 727, 730, 731, 733, 746, 748, 755, 761, 765, 770, 773, 774, 775, 776, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 818, 819, 820, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 842, 843, 844, 848, 849, 856, 857, 859, 865, 866, 867, 868, 869, 871, 872, 873, 880, 881, 884, 885, 887, 888, 889, 892, 894, 895, 897, 898, 900, 901, 902, 903, 910, 912, 913, 915, 917, 918, 927, 929, 934, 942, 943, 945, 949, 951, 954, 956, 957, 958, 969, 970, 975, 976, 978, 980, 981, 983, 984, 986, 990, 991, 992, 994, 995, 996, 1006, 1010, 1011, 1013, 1014, 1015, 1023, 1025, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 71, 73, 75, 86, 117, 132, 134, 135, 138, 140, 148, 149, 152, 164, 167, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 229, 230, 231, 232, 236, 238, 241, 243, 257, 264, 269, 270, 274, 275, 279, 300, 304, 305, 308, 310, 313, 314, 315, 316, 317, 319, 326, 347, 358, 362, 364, 365, 375, 376, 378, 382, 384, 385, 388, 389, 393, 403, 409, 431, 458, 530, 532, 535, 536, 538, 539, 541, 560, 561, 562, 563, 590, 624, 625, 627, 628, 631, 633, 634, 635, 636, 693, 694, 780, 803, 811, 813, 814, 815, 823, 824, 825, 826, 850, 867, 871, 892, 893, 896, 899, 924, 972, 976, 980, 981, 986, 988, 990, 994, 1010, 1011, 1013, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "ridgecv": [4, 75, 132, 149, 170, 238, 389, 409, 561, 636, 665, 668, 976, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "onehotencod": [4, 71, 117, 122, 132, 170, 171, 200, 218, 231, 241, 243, 309, 314, 316, 319, 370, 389, 403, 409, 459, 460, 559, 574, 575, 855, 859, 860, 863, 866, 873, 970, 990, 1023, 1026, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "one_hot_encod": [4, 122], "handle_unknown": [4, 71, 117, 122, 132, 171, 172, 231, 241, 243, 309, 314, 317, 865, 866, 990, 1026, 1030, 1034, 1035], "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 112, 114, 117, 122, 129, 132, 171, 188, 192, 200, 209, 215, 231, 236, 241, 243, 252, 298, 299, 308, 309, 314, 317, 339, 348, 353, 376, 378, 380, 382, 389, 392, 402, 403, 409, 410, 420, 421, 424, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 453, 454, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481, 496, 501, 502, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 572, 574, 575, 576, 581, 582, 583, 584, 587, 595, 596, 603, 604, 620, 621, 622, 623, 625, 626, 628, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 700, 706, 707, 718, 721, 722, 730, 747, 748, 755, 761, 766, 770, 775, 776, 779, 780, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 849, 850, 851, 852, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 884, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 926, 955, 976, 977, 980, 982, 986, 990, 995, 1011, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "sparse_output": [4, 122, 243, 309, 317, 559, 859, 863, 865, 871, 876, 990, 1037, 1038, 1039], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 102, 104, 105, 112, 114, 115, 121, 125, 128, 129, 131, 132, 133, 149, 152, 155, 157, 158, 159, 160, 161, 164, 165, 170, 179, 180, 181, 182, 184, 185, 186, 188, 189, 194, 195, 197, 198, 200, 201, 202, 204, 205, 209, 212, 213, 218, 221, 222, 225, 234, 235, 242, 246, 261, 262, 263, 264, 265, 268, 269, 271, 273, 274, 279, 281, 284, 286, 289, 291, 297, 299, 303, 304, 305, 306, 308, 310, 314, 316, 317, 324, 326, 331, 332, 335, 336, 339, 343, 344, 347, 362, 371, 378, 382, 387, 404, 405, 407, 409, 411, 412, 414, 439, 464, 465, 471, 520, 524, 526, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 553, 588, 589, 591, 604, 606, 608, 609, 616, 624, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 680, 715, 740, 827, 828, 829, 831, 849, 850, 888, 900, 901, 902, 903, 969, 976, 980, 982, 984, 988, 993, 994, 995, 996, 1010, 1013, 1015, 1019, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1034, 1035, 1036, 1037, 1038], "logspac": [4, 12, 73, 78, 103, 138, 139, 149, 153, 158, 170, 193, 204, 205, 233, 235, 250, 262, 274, 276, 285, 297, 305, 308, 334, 342, 811, 975, 976, 1010, 1011, 1013], "naive_linear_pipelin": 4, "142": [4, 58, 140, 142, 409], "014": [4, 382], "184": [4, 200, 300, 382, 1013], "020": [4, 988], "three": [4, 7, 26, 40, 41, 46, 55, 58, 78, 90, 91, 112, 117, 119, 122, 124, 133, 134, 135, 146, 149, 160, 170, 184, 192, 197, 200, 202, 209, 211, 235, 236, 246, 249, 309, 310, 314, 338, 363, 369, 373, 380, 392, 399, 402, 406, 407, 408, 410, 444, 455, 491, 702, 931, 973, 975, 976, 977, 980, 983, 990, 994, 995, 999, 1006, 1014, 1022], "higher": [4, 57, 80, 98, 103, 112, 115, 117, 118, 125, 128, 152, 154, 159, 160, 170, 171, 172, 176, 200, 201, 204, 218, 225, 226, 252, 255, 259, 261, 264, 275, 286, 308, 334, 347, 348, 349, 358, 362, 371, 374, 378, 399, 402, 404, 409, 411, 412, 413, 437, 441, 442, 464, 471, 502, 525, 532, 536, 541, 546, 547, 550, 551, 552, 553, 554, 555, 557, 558, 559, 566, 581, 584, 600, 601, 612, 620, 624, 628, 630, 639, 640, 645, 646, 653, 654, 655, 656, 669, 671, 672, 697, 716, 720, 744, 777, 787, 789, 792, 793, 795, 803, 810, 811, 816, 819, 838, 841, 867, 884, 885, 886, 894, 895, 896, 897, 898, 905, 972, 976, 977, 979, 980, 983, 987, 990, 994, 995, 1013, 1015, 1023, 1028, 1030, 1037], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 56, 58, 74, 75, 95, 97, 98, 105, 130, 145, 146, 149, 152, 154, 156, 157, 164, 165, 171, 176, 188, 189, 204, 221, 222, 223, 225, 226, 233, 234, 235, 252, 258, 264, 289, 300, 304, 308, 319, 323, 340, 347, 349, 358, 371, 373, 375, 376, 378, 380, 381, 387, 389, 396, 399, 402, 403, 406, 407, 409, 410, 412, 413, 414, 415, 427, 430, 434, 436, 437, 438, 439, 440, 442, 443, 452, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 486, 487, 488, 494, 512, 524, 526, 527, 528, 530, 531, 532, 533, 534, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 569, 574, 575, 577, 581, 583, 584, 587, 600, 601, 603, 604, 607, 623, 625, 628, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 685, 689, 694, 720, 755, 761, 789, 790, 791, 792, 793, 796, 798, 803, 807, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 838, 839, 842, 843, 849, 850, 852, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 868, 869, 870, 871, 872, 881, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 910, 912, 913, 917, 918, 939, 951, 954, 973, 974, 976, 977, 979, 980, 983, 986, 991, 992, 993, 994, 997, 1000, 1004, 1006, 1015, 1025, 1026, 1028, 1030, 1032, 1034, 1036, 1038], "mere": [4, 261, 389, 819, 994], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 58, 75, 90, 95, 98, 112, 114, 121, 124, 125, 130, 141, 149, 154, 156, 157, 158, 165, 170, 182, 188, 189, 195, 202, 203, 206, 214, 222, 233, 234, 237, 279, 287, 288, 294, 297, 299, 303, 305, 306, 308, 327, 333, 340, 343, 385, 402, 405, 407, 475, 476, 477, 478, 505, 527, 528, 531, 533, 534, 542, 543, 556, 620, 624, 625, 647, 648, 649, 650, 675, 676, 697, 733, 749, 772, 792, 793, 841, 849, 850, 862, 871, 878, 929, 945, 976, 980, 983, 990, 1028, 1031, 1033, 1034, 1037], "properli": [4, 25, 55, 129, 157, 256, 313, 364, 374, 376, 380, 384, 392, 408, 892, 893, 894, 895, 896, 897, 898, 969, 1025, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "automat": [4, 8, 12, 46, 63, 65, 71, 103, 138, 148, 179, 203, 246, 247, 259, 262, 303, 310, 314, 318, 326, 336, 363, 365, 371, 374, 376, 378, 380, 384, 389, 392, 398, 402, 403, 404, 407, 409, 410, 411, 426, 443, 445, 449, 455, 457, 458, 460, 489, 492, 508, 531, 533, 534, 540, 542, 544, 550, 554, 557, 576, 581, 584, 587, 595, 636, 638, 639, 640, 645, 646, 651, 652, 653, 654, 655, 656, 659, 660, 661, 665, 667, 668, 669, 671, 674, 677, 680, 681, 684, 688, 791, 806, 809, 818, 828, 849, 850, 853, 854, 856, 865, 866, 873, 884, 885, 892, 893, 894, 897, 900, 902, 906, 918, 951, 954, 969, 971, 974, 979, 984, 990, 994, 996, 1000, 1001, 1010, 1022, 1025, 1026, 1027, 1033, 1036, 1037, 1038, 1039], "term": [4, 13, 14, 25, 32, 58, 100, 115, 118, 122, 125, 157, 169, 184, 188, 189, 200, 202, 204, 214, 217, 218, 259, 263, 281, 297, 316, 342, 347, 349, 364, 365, 376, 378, 380, 387, 396, 400, 401, 402, 404, 406, 407, 409, 412, 436, 440, 442, 445, 452, 455, 517, 528, 531, 533, 537, 540, 542, 581, 582, 583, 584, 597, 600, 601, 625, 626, 633, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 665, 666, 667, 668, 669, 671, 673, 680, 688, 849, 850, 867, 871, 874, 892, 893, 894, 895, 896, 897, 898, 969, 971, 974, 975, 976, 977, 980, 981, 982, 984, 985, 990, 994, 995, 1006, 1015, 1030, 1036, 1037, 1038], "raw": [4, 12, 14, 37, 81, 97, 132, 157, 170, 176, 300, 310, 324, 349, 362, 371, 384, 389, 400, 401, 402, 404, 407, 410, 462, 467, 494, 495, 496, 552, 553, 554, 556, 575, 581, 582, 583, 584, 627, 670, 683, 687, 698, 778, 838, 896, 977, 980, 984, 986, 987, 990, 993, 1012, 1014, 1023, 1027, 1030, 1033], "recogn": [4, 29, 35, 86, 120, 167, 201, 316, 382, 393, 402, 410, 495, 690, 706, 818, 897, 980, 1006, 1039], "increas": [4, 7, 14, 26, 37, 43, 55, 57, 58, 61, 75, 98, 112, 113, 115, 118, 121, 129, 145, 149, 152, 156, 157, 158, 161, 170, 171, 176, 180, 182, 191, 200, 201, 202, 204, 218, 226, 233, 247, 248, 261, 262, 263, 268, 274, 297, 304, 305, 308, 315, 323, 334, 342, 348, 349, 352, 362, 363, 364, 375, 384, 385, 400, 402, 404, 407, 409, 410, 413, 433, 437, 439, 445, 456, 464, 465, 471, 525, 529, 546, 547, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 581, 584, 620, 628, 629, 630, 638, 643, 644, 647, 648, 649, 651, 652, 659, 661, 669, 670, 671, 675, 676, 678, 679, 685, 699, 700, 705, 774, 781, 792, 793, 821, 840, 842, 843, 844, 847, 849, 850, 866, 892, 893, 900, 901, 902, 903, 929, 969, 971, 975, 976, 977, 979, 980, 983, 990, 994, 995, 996, 1004, 1022, 1024, 1027, 1031, 1033, 1034, 1037], "strong": [4, 167, 169, 170, 178, 193, 197, 204, 206, 219, 235, 310, 401, 407, 409, 412, 517, 642, 665, 973, 974, 976, 977, 979, 987, 995, 1013], "similar": [4, 5, 7, 12, 17, 20, 25, 26, 37, 49, 51, 57, 60, 75, 86, 95, 99, 112, 125, 148, 152, 159, 169, 170, 171, 172, 184, 200, 202, 214, 221, 223, 224, 225, 229, 235, 236, 252, 258, 261, 264, 267, 268, 269, 279, 281, 303, 316, 333, 342, 348, 349, 358, 362, 368, 370, 372, 374, 375, 376, 378, 381, 382, 385, 387, 389, 396, 399, 400, 402, 405, 406, 407, 409, 410, 411, 412, 413, 433, 434, 436, 437, 438, 443, 445, 447, 448, 496, 501, 502, 529, 575, 582, 583, 584, 603, 670, 685, 688, 696, 698, 708, 712, 717, 720, 721, 723, 726, 730, 732, 747, 752, 753, 778, 782, 783, 786, 787, 788, 814, 819, 864, 885, 888, 892, 893, 894, 895, 913, 969, 972, 973, 975, 976, 977, 979, 981, 983, 984, 986, 987, 990, 992, 993, 994, 995, 996, 1000, 1001, 1006, 1014, 1017, 1022, 1026, 1027, 1028, 1030, 1034, 1035], "magnitud": [4, 105, 114, 153, 165, 170, 217, 266, 303, 308, 316, 362, 371, 382, 402, 409, 412, 606, 645, 697, 872, 976, 980, 984, 990, 994, 996, 1024, 1031], "discret": [4, 46, 105, 110, 112, 136, 151, 162, 167, 171, 200, 218, 302, 306, 311, 364, 368, 371, 372, 380, 388, 389, 402, 407, 409, 410, 412, 431, 432, 441, 445, 453, 454, 455, 485, 507, 508, 513, 515, 546, 552, 564, 581, 582, 585, 588, 589, 592, 593, 600, 601, 603, 604, 605, 609, 610, 611, 650, 651, 734, 786, 789, 800, 818, 827, 828, 831, 853, 857, 865, 866, 869, 872, 881, 892, 897, 900, 901, 943, 969, 976, 977, 978, 980, 981, 983, 996, 1000, 1006, 1017, 1024, 1027, 1035, 1036, 1037], "manner": [4, 75, 95, 146, 171, 176, 248, 317, 318, 363, 376, 382, 402, 407, 409, 410, 702, 832, 833, 969, 980, 996, 1025, 1032], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 58, 63, 67, 119, 120, 126, 127, 170, 172, 184, 215, 218, 248, 270, 290, 309, 310, 319, 325, 347, 348, 349, 370, 378, 385, 389, 402, 403, 406, 409, 410, 433, 443, 447, 449, 457, 460, 489, 542, 543, 544, 546, 547, 550, 551, 552, 553, 554, 555, 557, 558, 559, 603, 626, 627, 628, 659, 661, 669, 690, 702, 746, 774, 789, 791, 803, 815, 820, 821, 824, 830, 839, 844, 849, 863, 865, 866, 873, 876, 892, 894, 900, 901, 902, 903, 917, 929, 943, 944, 976, 981, 990, 1004, 1013, 1030, 1033, 1034, 1036, 1037, 1038], "decid": [4, 11, 57, 60, 71, 252, 258, 261, 268, 371, 376, 390, 410, 412, 443, 450, 552, 553, 604, 628, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 664, 674, 677, 787, 834, 835, 836, 838, 840, 842, 843, 844, 855, 979, 986, 1004, 1035, 1038], "therebi": [4, 170, 406, 409, 972, 1032], "assumpt": [4, 9, 25, 27, 36, 68, 78, 79, 98, 157, 167, 169, 200, 229, 303, 382, 387, 388, 391, 400, 401, 402, 404, 406, 407, 410, 412, 440, 444, 446, 481, 496, 505, 525, 527, 534, 643, 647, 788, 789, 792, 793, 803, 829, 884, 885, 974, 976, 980, 981, 982, 983, 985, 986, 987, 990, 993, 996, 1029, 1035], "impli": [4, 152, 347, 348, 349, 407, 409, 412, 467, 566, 575, 603, 604, 615, 727, 916, 976, 977, 1015, 1033], "give": [4, 12, 13, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 124, 152, 157, 161, 164, 170, 171, 189, 191, 197, 200, 201, 202, 229, 252, 258, 263, 270, 283, 287, 290, 300, 316, 317, 326, 362, 364, 371, 373, 375, 376, 378, 382, 384, 387, 388, 389, 390, 396, 399, 400, 401, 402, 403, 404, 407, 409, 410, 414, 427, 439, 440, 442, 444, 452, 465, 489, 492, 496, 526, 531, 542, 543, 544, 545, 550, 551, 557, 558, 559, 586, 587, 590, 600, 601, 631, 640, 654, 658, 669, 713, 722, 728, 731, 784, 789, 792, 793, 803, 813, 814, 815, 817, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 869, 870, 872, 873, 881, 976, 980, 983, 984, 985, 987, 988, 990, 994, 995, 996, 1000, 1004, 1006, 1008, 1013, 1014, 1015, 1022, 1026, 1029, 1030, 1032, 1033, 1034, 1036, 1038], "lot": [4, 82, 170, 204, 371, 376, 377, 378, 384, 407, 409, 792, 793, 884, 885, 969, 992, 994, 995, 1000, 1001, 1004, 1014, 1015, 1022, 1027, 1029, 1030, 1031, 1032, 1034], "addit": [4, 5, 7, 12, 13, 14, 66, 71, 82, 95, 98, 112, 116, 118, 119, 122, 123, 148, 157, 158, 159, 165, 170, 171, 179, 184, 189, 201, 202, 204, 225, 240, 263, 270, 275, 279, 303, 314, 315, 324, 349, 354, 358, 362, 363, 368, 369, 370, 371, 372, 374, 375, 376, 378, 381, 382, 384, 387, 388, 390, 392, 396, 401, 402, 404, 406, 407, 410, 411, 412, 413, 426, 434, 435, 437, 438, 439, 443, 450, 462, 467, 489, 496, 525, 527, 529, 530, 532, 534, 535, 536, 542, 546, 547, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 605, 612, 621, 623, 624, 628, 631, 632, 633, 634, 635, 636, 637, 638, 663, 680, 681, 685, 691, 692, 695, 734, 750, 751, 780, 782, 787, 788, 795, 811, 821, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 874, 884, 885, 892, 893, 923, 929, 969, 974, 976, 980, 981, 983, 984, 987, 990, 992, 993, 994, 995, 996, 1000, 1006, 1017, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 117, 121, 141, 149, 151, 156, 157, 159, 162, 167, 170, 171, 211, 212, 213, 214, 215, 218, 229, 233, 234, 250, 261, 264, 270, 271, 287, 294, 332, 333, 335, 336, 338, 340, 348, 356, 362, 371, 373, 374, 376, 382, 389, 391, 392, 393, 400, 407, 410, 416, 447, 461, 486, 487, 496, 514, 524, 529, 530, 540, 554, 555, 560, 561, 604, 615, 618, 659, 660, 661, 669, 670, 671, 680, 683, 685, 687, 693, 695, 709, 715, 720, 777, 813, 814, 815, 817, 820, 821, 848, 849, 850, 890, 905, 969, 976, 980, 981, 983, 988, 994, 996, 1000, 1001, 1015, 1025, 1033, 1036, 1037, 1038], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 186, 188, 219], "011": [4, 269, 281, 347, 348, 350, 382], "131": [4, 13, 56, 382, 980, 1023], "rate": [4, 111, 112, 116, 122, 144, 171, 200, 207, 218, 233, 239, 258, 261, 268, 270, 271, 298, 299, 300, 364, 376, 402, 403, 407, 411, 439, 459, 529, 546, 547, 552, 553, 554, 555, 585, 588, 589, 591, 592, 593, 599, 637, 638, 661, 669, 670, 671, 685, 691, 695, 719, 774, 781, 848, 849, 850, 886, 969, 976, 977, 980, 983, 984, 994, 996, 1004, 1026, 1030, 1031], "better": [4, 5, 9, 19, 20, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 115, 118, 124, 125, 132, 144, 156, 157, 158, 160, 164, 172, 180, 184, 186, 189, 200, 201, 202, 208, 215, 217, 218, 225, 234, 235, 236, 251, 255, 261, 263, 264, 267, 270, 271, 300, 307, 308, 317, 318, 334, 347, 348, 349, 352, 358, 362, 371, 375, 376, 377, 378, 380, 381, 382, 384, 389, 391, 396, 400, 402, 404, 406, 407, 408, 409, 410, 412, 442, 443, 531, 533, 540, 552, 553, 554, 555, 600, 601, 623, 664, 670, 685, 702, 717, 726, 731, 734, 755, 788, 817, 827, 828, 829, 830, 831, 832, 833, 838, 849, 850, 869, 870, 873, 881, 884, 885, 892, 893, 969, 970, 972, 973, 974, 976, 977, 979, 980, 982, 983, 984, 988, 990, 993, 994, 996, 1001, 1003, 1004, 1008, 1010, 1015, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "confirm": [4, 86, 115, 122, 125, 172, 200, 202, 264, 267, 270, 308, 349, 380, 969, 990, 1030], "progress": [4, 7, 8, 95, 135, 149, 165, 193, 286, 317, 373, 376, 380, 381, 390, 392, 398, 402, 552, 553, 685, 821, 823, 826, 841, 849, 850, 1004, 1013, 1015, 1022, 1024, 1031, 1036], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 101, 125, 130, 138, 157, 164, 170, 171, 172, 189, 200, 201, 202, 205, 208, 218, 225, 229, 235, 236, 246, 263, 264, 267, 268, 270, 271, 276, 281, 299, 303, 316, 322, 325, 334, 344, 347, 349, 358, 362, 371, 375, 376, 378, 381, 382, 384, 387, 388, 389, 396, 400, 402, 404, 406, 407, 408, 409, 410, 411, 412, 435, 440, 445, 455, 464, 465, 471, 493, 497, 503, 550, 551, 554, 555, 557, 558, 560, 561, 582, 583, 615, 643, 644, 647, 648, 649, 657, 675, 676, 678, 684, 685, 688, 698, 735, 738, 782, 787, 789, 797, 799, 803, 806, 809, 832, 833, 857, 861, 862, 863, 872, 884, 885, 894, 897, 900, 901, 902, 903, 929, 969, 972, 973, 975, 976, 977, 978, 979, 980, 983, 984, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1013, 1014, 1022, 1027, 1028, 1030, 1033, 1035, 1037, 1038], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 103, 111, 112, 114, 116, 117, 118, 125, 131, 132, 146, 149, 152, 158, 165, 172, 173, 200, 206, 214, 229, 260, 263, 268, 285, 287, 309, 314, 317, 323, 326, 333, 358, 363, 364, 370, 371, 373, 374, 375, 378, 379, 380, 382, 384, 385, 388, 389, 390, 392, 400, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 420, 424, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 493, 494, 495, 497, 498, 501, 502, 503, 505, 516, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 697, 701, 706, 707, 711, 714, 715, 716, 717, 719, 720, 721, 722, 723, 726, 731, 732, 733, 735, 738, 745, 746, 749, 753, 758, 759, 761, 770, 774, 775, 776, 777, 779, 780, 781, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 802, 803, 807, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 878, 880, 881, 882, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 910, 912, 913, 915, 923, 924, 928, 929, 936, 937, 938, 939, 940, 943, 946, 948, 950, 955, 961, 967, 969, 970, 972, 976, 980, 981, 983, 984, 985, 986, 990, 992, 993, 994, 995, 1001, 1004, 1006, 1007, 1010, 1013, 1015, 1020, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 371, 376, 977, 999], "1440": 4, "caus": [4, 25, 27, 125, 153, 170, 198, 200, 204, 205, 218, 310, 349, 358, 374, 381, 400, 402, 407, 408, 410, 412, 436, 440, 442, 452, 502, 525, 575, 582, 603, 604, 827, 828, 829, 831, 856, 865, 867, 870, 871, 912, 913, 969, 970, 976, 980, 988, 990, 993, 1001, 1006, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "signific": [4, 55, 118, 125, 145, 167, 204, 218, 254, 261, 277, 279, 281, 347, 358, 370, 371, 387, 402, 405, 406, 409, 497, 525, 527, 542, 543, 620, 651, 652, 659, 661, 669, 670, 671, 808, 817, 892, 894, 895, 896, 897, 898, 979, 980, 983, 1022, 1024, 1025, 1026, 1030], "overfit": [4, 117, 125, 167, 171, 172, 179, 204, 229, 248, 254, 256, 262, 266, 276, 277, 297, 304, 305, 307, 308, 309, 310, 334, 352, 354, 355, 371, 389, 400, 406, 409, 430, 481, 482, 560, 561, 650, 789, 792, 793, 803, 814, 815, 849, 850, 852, 867, 871, 975, 984, 986, 988, 990, 996, 1004, 1013, 1025], "avoid": [4, 7, 12, 44, 57, 62, 72, 117, 118, 170, 171, 202, 204, 209, 218, 224, 236, 256, 262, 266, 284, 289, 291, 292, 307, 308, 330, 331, 348, 363, 374, 376, 377, 378, 380, 381, 382, 389, 390, 392, 396, 400, 402, 404, 406, 409, 410, 413, 433, 435, 437, 445, 455, 461, 486, 487, 488, 492, 501, 502, 527, 532, 536, 539, 578, 579, 627, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 682, 684, 686, 688, 705, 782, 789, 790, 794, 800, 803, 813, 814, 815, 852, 855, 861, 862, 864, 869, 870, 871, 872, 875, 877, 878, 879, 881, 882, 883, 885, 890, 929, 974, 977, 979, 980, 983, 984, 986, 988, 990, 995, 996, 1001, 1015, 1017, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kbinsdiscret": [4, 53, 167, 200, 218, 302, 305, 310, 311, 318, 505, 650, 855, 871, 901, 990, 1030, 1034, 1035, 1036, 1038], "re": [4, 8, 13, 26, 56, 70, 71, 112, 122, 155, 169, 218, 236, 247, 251, 264, 266, 270, 314, 347, 349, 363, 376, 377, 380, 384, 388, 390, 393, 400, 406, 410, 462, 463, 464, 465, 466, 467, 468, 469, 548, 549, 554, 555, 556, 639, 645, 653, 655, 791, 806, 809, 900, 901, 902, 903, 976, 981, 983, 990, 995, 1001, 1004, 1015, 1022, 1026, 1027, 1029, 1031], "fine": [4, 37, 121, 149, 204, 216, 252, 259, 354, 355, 373, 380, 389, 410, 439, 929, 948, 983, 986, 1001, 1032], "grain": [4, 31, 37, 234, 252, 305, 382, 410, 439, 948, 1001], "still": [4, 32, 44, 53, 55, 57, 62, 82, 99, 120, 122, 125, 132, 152, 158, 169, 170, 172, 179, 184, 200, 202, 218, 234, 264, 270, 303, 315, 316, 319, 347, 348, 358, 364, 370, 375, 376, 378, 380, 381, 382, 384, 387, 389, 402, 406, 409, 410, 413, 433, 437, 447, 467, 489, 620, 625, 628, 630, 710, 748, 770, 773, 782, 783, 792, 793, 806, 809, 870, 872, 892, 910, 969, 970, 974, 976, 979, 983, 986, 988, 995, 996, 999, 1001, 1004, 1022, 1024, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "express": [4, 7, 12, 112, 118, 152, 157, 170, 261, 262, 309, 315, 331, 349, 370, 371, 376, 377, 382, 402, 407, 410, 443, 449, 450, 581, 582, 584, 709, 789, 795, 803, 811, 813, 814, 815, 816, 819, 839, 976, 980, 984, 990, 991, 996, 1030], "advantag": [4, 5, 39, 55, 57, 95, 100, 200, 201, 229, 247, 262, 317, 358, 389, 400, 406, 407, 410, 412, 434, 438, 453, 527, 582, 642, 667, 668, 755, 820, 821, 822, 852, 853, 892, 893, 894, 895, 896, 897, 898, 969, 972, 975, 976, 977, 980, 981, 983, 984, 990, 994, 995, 996, 1025], "final": [4, 26, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 111, 112, 113, 115, 117, 122, 123, 126, 132, 135, 146, 157, 165, 169, 171, 176, 179, 184, 188, 189, 197, 200, 202, 217, 218, 222, 229, 243, 250, 259, 267, 281, 309, 310, 313, 314, 334, 362, 364, 374, 376, 377, 380, 388, 389, 399, 400, 402, 403, 406, 409, 410, 430, 435, 440, 441, 445, 452, 455, 457, 529, 548, 549, 560, 561, 563, 620, 640, 646, 652, 672, 683, 687, 712, 789, 820, 821, 852, 853, 889, 892, 969, 970, 976, 977, 980, 983, 986, 987, 990, 993, 1004, 1013, 1027, 1030, 1031, 1032, 1033, 1035], "observ": [4, 5, 7, 9, 11, 13, 16, 20, 24, 27, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 103, 111, 112, 115, 116, 118, 119, 125, 128, 131, 140, 141, 149, 152, 155, 157, 158, 159, 161, 170, 171, 172, 179, 180, 195, 196, 198, 200, 201, 202, 204, 214, 218, 225, 226, 232, 233, 257, 261, 263, 264, 268, 281, 287, 294, 308, 319, 325, 333, 334, 339, 342, 347, 348, 349, 354, 355, 371, 373, 389, 392, 400, 402, 403, 404, 405, 406, 407, 408, 411, 412, 434, 436, 438, 439, 440, 442, 452, 453, 462, 463, 464, 465, 466, 467, 468, 469, 517, 525, 544, 545, 556, 603, 604, 639, 645, 650, 694, 709, 711, 750, 810, 830, 838, 871, 873, 976, 979, 980, 984, 985, 986, 987, 990, 993, 994, 995, 996, 1003, 1007, 1009, 1010, 1012, 1023, 1035, 1036, 1037, 1038], "complet": [4, 37, 38, 39, 44, 49, 52, 58, 62, 86, 130, 144, 146, 149, 167, 172, 173, 206, 228, 229, 236, 244, 259, 308, 310, 313, 348, 358, 371, 376, 380, 381, 384, 387, 403, 406, 407, 409, 410, 434, 438, 442, 445, 455, 456, 457, 460, 488, 529, 530, 531, 532, 537, 539, 551, 562, 563, 574, 580, 581, 582, 584, 620, 621, 622, 623, 638, 642, 650, 664, 666, 697, 698, 708, 709, 710, 723, 728, 729, 749, 778, 785, 820, 823, 826, 835, 851, 852, 853, 854, 915, 965, 969, 974, 976, 980, 981, 983, 995, 996, 1006, 1015, 1022, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "induct": [4, 36, 68, 125, 167, 389, 402, 409, 416, 434, 505, 557, 620, 624, 887, 888, 941, 964, 976, 993, 1024], "bia": [4, 27, 78, 110, 119, 120, 125, 136, 167, 170, 172, 179, 180, 182, 266, 297, 342, 358, 371, 378, 389, 400, 404, 408, 409, 412, 517, 549, 552, 553, 600, 601, 607, 635, 641, 642, 651, 652, 662, 663, 673, 849, 850, 865, 867, 871, 877, 878, 880, 881, 882, 883, 901, 975, 976, 979, 980, 984, 985, 988, 994, 1013], "preserv": [4, 48, 100, 225, 233, 256, 378, 379, 401, 406, 407, 410, 574, 581, 582, 584, 639, 645, 689, 766, 770, 807, 808, 809, 876, 912, 913, 970, 976, 977, 990, 992, 1010, 1022, 1025, 1026, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "smooth": [4, 46, 47, 54, 149, 157, 193, 201, 216, 309, 334, 373, 390, 402, 408, 412, 441, 442, 530, 531, 532, 539, 550, 551, 552, 553, 557, 558, 559, 583, 584, 612, 615, 669, 827, 828, 829, 831, 869, 873, 881, 900, 901, 902, 903, 976, 982, 990, 994, 995, 996, 1015], "local": [4, 20, 39, 57, 61, 95, 98, 118, 129, 149, 157, 158, 167, 171, 201, 220, 223, 225, 227, 229, 239, 282, 295, 354, 355, 363, 373, 374, 376, 380, 382, 384, 392, 402, 407, 409, 410, 412, 440, 445, 455, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 495, 531, 533, 537, 540, 542, 552, 553, 556, 559, 603, 604, 681, 682, 683, 684, 685, 686, 688, 689, 750, 751, 835, 838, 841, 843, 853, 862, 885, 888, 896, 946, 948, 978, 979, 983, 984, 996, 1014, 1016, 1017, 1026, 1030, 1034, 1037], "attempt": [4, 54, 171, 196, 206, 256, 347, 362, 375, 389, 402, 414, 439, 443, 450, 461, 624, 681, 682, 686, 807, 834, 835, 836, 838, 840, 842, 843, 844, 870, 872, 890, 912, 913, 976, 977, 983, 996, 1006, 1029, 1034], "each": [4, 7, 8, 10, 11, 12, 14, 17, 20, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 91, 92, 95, 96, 100, 103, 104, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 130, 131, 132, 133, 134, 135, 145, 147, 149, 154, 156, 161, 164, 165, 169, 170, 171, 173, 176, 179, 186, 187, 189, 194, 198, 200, 201, 202, 204, 205, 208, 215, 218, 222, 229, 230, 233, 234, 235, 236, 237, 240, 241, 243, 246, 249, 251, 255, 256, 257, 259, 261, 262, 264, 266, 267, 270, 271, 279, 281, 284, 286, 290, 292, 294, 297, 298, 300, 303, 304, 305, 306, 308, 309, 310, 313, 315, 316, 317, 319, 322, 323, 324, 327, 334, 340, 342, 348, 349, 352, 353, 356, 358, 362, 363, 364, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 387, 388, 389, 393, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 419, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 512, 515, 516, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 700, 701, 703, 706, 712, 717, 720, 721, 722, 730, 731, 737, 738, 740, 742, 743, 745, 746, 750, 751, 754, 755, 756, 757, 758, 760, 761, 762, 763, 765, 766, 768, 770, 771, 772, 773, 775, 776, 777, 779, 780, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 881, 882, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 918, 923, 924, 929, 931, 932, 936, 948, 956, 957, 958, 961, 970, 972, 974, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 1004, 1006, 1010, 1012, 1013, 1014, 1015, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "sine": [4, 152, 157, 158, 167, 194, 206, 245, 253, 354, 372, 608, 787, 788, 979, 996], "cosin": [4, 40, 275, 281, 286, 368, 371, 389, 402, 407, 408, 434, 438, 443, 450, 528, 583, 584, 613, 689, 752, 753, 754, 757, 762, 763, 766, 770, 771, 772, 832, 833, 837, 864, 983, 996, 1017, 1032], "match": [4, 20, 37, 45, 95, 98, 102, 118, 167, 176, 178, 200, 219, 223, 232, 349, 371, 374, 378, 380, 402, 407, 409, 410, 423, 442, 457, 459, 501, 502, 508, 519, 524, 530, 535, 541, 544, 560, 561, 565, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 651, 657, 658, 678, 679, 692, 696, 697, 698, 706, 708, 712, 726, 770, 771, 772, 778, 832, 833, 837, 841, 855, 856, 857, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 892, 899, 905, 916, 948, 977, 979, 980, 982, 983, 1002, 1006, 1015, 1017, 1022, 1028, 1029, 1030, 1032, 1034, 1035, 1038], "togeth": [4, 12, 51, 60, 71, 121, 132, 152, 158, 170, 181, 222, 225, 257, 309, 317, 337, 353, 358, 378, 380, 387, 388, 389, 396, 402, 409, 410, 417, 444, 446, 560, 561, 682, 708, 789, 803, 852, 853, 866, 976, 977, 981, 987, 990, 996, 997, 1004, 1007, 1009, 1028], "equival": [4, 14, 55, 57, 122, 128, 148, 152, 157, 170, 184, 218, 251, 270, 281, 308, 349, 358, 362, 374, 382, 385, 388, 389, 402, 403, 404, 405, 406, 407, 409, 411, 412, 434, 436, 437, 438, 439, 440, 442, 443, 450, 462, 467, 502, 527, 534, 551, 554, 555, 556, 558, 581, 584, 606, 609, 612, 614, 617, 639, 640, 641, 645, 647, 651, 652, 659, 660, 661, 662, 665, 669, 670, 673, 676, 680, 681, 686, 701, 702, 715, 726, 733, 739, 740, 741, 753, 762, 771, 772, 787, 788, 792, 793, 797, 799, 823, 826, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 849, 855, 861, 862, 864, 867, 868, 869, 870, 872, 880, 882, 883, 916, 927, 966, 969, 974, 976, 977, 978, 980, 986, 990, 994, 995, 996, 1030, 1031, 1032, 1033, 1035, 1036], "importantli": [4, 13, 96, 171, 176, 303, 402], "jump": [4, 201, 303, 373, 376, 410, 871], "functiontransform": [4, 70, 117, 200, 218, 326, 458, 990, 1027, 1028, 1030, 1035, 1036, 1037], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 101, 103, 105, 109, 112, 115, 117, 124, 125, 128, 132, 149, 155, 158, 160, 165, 179, 180, 188, 189, 192, 200, 201, 208, 209, 210, 218, 236, 239, 242, 243, 249, 251, 256, 257, 258, 259, 260, 261, 262, 264, 265, 268, 275, 281, 286, 291, 294, 300, 303, 305, 308, 313, 330, 334, 347, 349, 352, 356, 362, 369, 370, 371, 376, 377, 378, 382, 383, 385, 387, 389, 400, 401, 402, 403, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 939, 940, 941, 942, 943, 944, 946, 947, 949, 950, 951, 952, 953, 954, 955, 961, 964, 965, 966, 967, 968, 970, 980, 983, 987, 988, 995, 996, 1001, 1006, 1011, 1013, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "lambda": [4, 7, 8, 10, 19, 56, 73, 124, 139, 180, 218, 261, 262, 307, 326, 398, 402, 407, 409, 410, 637, 638, 639, 640, 856, 868, 976, 990, 1010, 1030, 1036], "sin": [4, 13, 19, 39, 96, 113, 124, 125, 129, 131, 144, 152, 158, 159, 161, 179, 180, 184, 194, 201, 206, 223, 235, 252, 293, 304, 314, 341, 354, 355, 412, 509, 608, 692, 756, 1014], "pi": [4, 13, 34, 39, 40, 96, 105, 129, 131, 144, 152, 180, 184, 188, 194, 201, 223, 246, 247, 248, 251, 252, 275, 294, 314, 355, 392, 408, 412, 509, 510, 511, 608, 635, 974, 975, 976, 982, 1014], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 129, 131, 157, 167, 170, 201, 223, 261, 275, 317, 355, 380, 408, 410, 442, 444, 446, 481, 504, 584, 692, 712, 756, 785, 975, 990, 1004, 1016, 1017], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 69, 76, 86, 98, 100, 112, 125, 127, 129, 148, 152, 153, 157, 159, 167, 168, 170, 171, 173, 174, 184, 200, 201, 202, 204, 205, 206, 220, 225, 227, 243, 247, 251, 261, 262, 263, 266, 269, 270, 300, 302, 304, 311, 314, 321, 328, 334, 339, 342, 343, 344, 347, 348, 349, 358, 363, 374, 376, 378, 381, 387, 389, 400, 402, 403, 407, 408, 409, 410, 412, 413, 430, 436, 437, 439, 440, 442, 443, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 483, 489, 493, 507, 517, 518, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 587, 599, 602, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 683, 684, 685, 694, 696, 745, 777, 787, 789, 790, 791, 792, 793, 794, 796, 798, 800, 803, 807, 808, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 838, 839, 842, 843, 849, 850, 852, 855, 856, 857, 858, 859, 861, 862, 864, 868, 869, 870, 871, 872, 873, 878, 881, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 912, 913, 929, 946, 954, 969, 974, 976, 977, 979, 980, 981, 987, 990, 993, 995, 996, 1011, 1013, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "expans": [4, 164, 315, 443, 867, 1031], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 119, 125, 130, 152, 157, 159, 171, 190, 202, 217, 297, 305, 342, 358, 362, 369, 379, 390, 402, 404, 411, 651, 652, 892, 893, 899, 974, 1013, 1028], "beyond": [4, 27, 201, 202, 362, 364, 375, 376, 387, 400, 409, 897, 977, 981, 990, 995, 1001, 1030], "pd": [4, 12, 25, 71, 72, 73, 112, 118, 119, 125, 129, 157, 164, 169, 170, 171, 172, 179, 184, 189, 200, 204, 208, 218, 239, 240, 243, 251, 259, 261, 262, 264, 272, 273, 308, 309, 310, 316, 317, 342, 347, 348, 381, 389, 403, 457, 459, 620, 621, 622, 623, 625, 770, 910, 912, 913, 969, 970, 987, 990, 1033, 1035, 1036, 1037], "hour_df": 4, "datafram": [4, 25, 70, 71, 72, 73, 112, 118, 122, 125, 129, 157, 164, 169, 170, 171, 172, 179, 184, 189, 204, 208, 218, 240, 243, 251, 259, 261, 262, 264, 272, 273, 308, 309, 310, 316, 317, 318, 342, 347, 348, 370, 371, 376, 378, 381, 389, 403, 426, 435, 436, 438, 440, 442, 457, 459, 460, 461, 475, 476, 477, 478, 482, 483, 484, 485, 489, 493, 494, 495, 497, 498, 503, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 575, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 681, 682, 685, 789, 792, 793, 803, 818, 836, 841, 844, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 890, 908, 935, 951, 954, 969, 970, 1001, 1015, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "arang": [4, 11, 13, 16, 40, 58, 60, 65, 73, 79, 80, 103, 106, 111, 121, 122, 123, 124, 126, 127, 130, 134, 145, 152, 154, 159, 160, 164, 165, 173, 184, 200, 203, 205, 209, 224, 232, 234, 256, 261, 264, 269, 272, 279, 281, 294, 297, 305, 316, 322, 323, 325, 327, 334, 341, 347, 349, 354, 355, 356, 358, 387, 399, 406, 410, 458, 537, 818, 867, 871, 975, 976, 984, 990, 994, 1011], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 105, 115, 120, 121, 130, 141, 147, 152, 154, 155, 156, 157, 158, 159, 161, 179, 191, 197, 213, 214, 216, 217, 222, 224, 226, 229, 234, 238, 250, 259, 285, 287, 294, 297, 299, 300, 304, 305, 306, 310, 313, 316, 317, 319, 327, 333, 334, 338, 339, 340, 343, 344, 387, 399, 407, 409, 410, 438, 458, 577, 624, 818, 867, 871, 976, 990, 996, 1011, 1014, 1027], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 106, 130, 176, 191, 216, 218, 221, 222, 223, 224, 225, 226, 232, 233, 236, 237, 239, 243, 281, 285, 298, 303, 304, 308, 309, 310, 313, 316, 318, 319, 334, 347, 348, 349, 358, 368, 371, 378, 381, 382, 389, 398, 403, 407, 410, 411, 418, 426, 435, 436, 438, 440, 442, 457, 459, 461, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 681, 682, 683, 684, 685, 836, 841, 844, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 890, 970, 972, 976, 981, 983, 990, 991, 992, 1006, 1011, 1014, 1015, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1036, 1038, 1039], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 61, 62, 68, 94, 107, 130, 167, 194, 201, 206, 221, 223, 226, 229, 232, 233, 331, 334, 370, 372, 376, 378, 385, 389, 402, 403, 407, 410, 412, 434, 445, 455, 457, 460, 481, 483, 484, 485, 486, 487, 493, 494, 495, 497, 503, 507, 526, 534, 542, 577, 579, 628, 636, 650, 665, 684, 730, 771, 813, 817, 821, 859, 908, 912, 913, 928, 943, 966, 967, 974, 976, 977, 980, 987, 991, 996, 1006, 1012, 1022, 1026, 1029, 1030, 1031, 1034, 1036], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 90, 91, 92, 97, 99, 100, 101, 102, 104, 113, 114, 118, 121, 128, 130, 131, 133, 141, 144, 152, 153, 154, 156, 158, 159, 160, 161, 169, 170, 176, 180, 183, 190, 192, 196, 197, 198, 201, 202, 203, 209, 212, 213, 214, 217, 221, 222, 223, 224, 225, 226, 229, 234, 235, 237, 246, 247, 248, 249, 250, 251, 252, 256, 262, 264, 275, 281, 287, 288, 289, 290, 291, 292, 293, 297, 303, 305, 306, 308, 317, 324, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 347, 353, 354, 355, 404, 624, 694, 948, 974, 976, 1013], "color": [4, 7, 8, 9, 10, 11, 12, 16, 20, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 91, 92, 95, 96, 97, 99, 102, 103, 104, 105, 111, 112, 113, 118, 121, 122, 123, 124, 127, 128, 129, 130, 132, 134, 138, 141, 152, 154, 155, 156, 157, 158, 159, 160, 161, 165, 167, 170, 172, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 217, 218, 222, 223, 224, 226, 229, 233, 234, 235, 237, 240, 246, 247, 248, 249, 250, 251, 252, 256, 260, 262, 264, 265, 266, 267, 268, 270, 271, 272, 274, 279, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 303, 304, 305, 307, 308, 309, 314, 324, 325, 327, 332, 333, 334, 335, 336, 338, 340, 341, 343, 353, 354, 370, 371, 373, 384, 402, 409, 410, 440, 486, 487, 499, 576, 577, 771, 954, 994, 996, 1027, 1032, 1034], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 116, 124, 127, 130, 139, 152, 167, 176, 200, 221, 223, 228, 236, 244, 262, 265, 270, 284, 289, 292, 294, 302, 303, 311, 326, 334, 340, 348, 349, 370, 377, 387, 389, 393, 400, 401, 402, 403, 406, 407, 409, 410, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 489, 491, 495, 502, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 754, 757, 787, 788, 789, 792, 793, 800, 801, 803, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 880, 881, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 934, 938, 969, 972, 977, 980, 982, 992, 995, 996, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 104, 106, 117, 121, 125, 130, 146, 149, 152, 158, 176, 184, 201, 221, 222, 223, 225, 233, 234, 235, 239, 240, 247, 252, 269, 272, 273, 281, 290, 291, 305, 315, 347, 348, 349, 356, 358, 362, 368, 371, 372, 373, 376, 383, 387, 388, 389, 399, 401, 402, 405, 407, 408, 409, 410, 412, 436, 440, 441, 442, 445, 455, 457, 458, 459, 460, 475, 476, 477, 491, 525, 527, 528, 531, 532, 533, 534, 536, 537, 542, 566, 575, 581, 582, 584, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 625, 626, 631, 633, 634, 635, 636, 681, 682, 683, 685, 686, 687, 689, 692, 789, 792, 793, 795, 803, 811, 822, 832, 833, 840, 841, 842, 843, 852, 857, 858, 864, 869, 884, 885, 886, 905, 933, 972, 973, 974, 975, 976, 978, 980, 981, 983, 984, 985, 986, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1006, 1013, 1015, 1016, 1017, 1022, 1023, 1025, 1030, 1031, 1032, 1036, 1037, 1038], "akin": [4, 201, 389], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 109, 115, 122, 125, 131, 149, 179, 184, 200, 201, 218, 238, 261, 262, 265, 275, 293, 341, 347, 354, 355, 376, 380, 384, 385, 389, 406, 409, 410, 412, 527, 534, 548, 559, 574, 603, 610, 690, 705, 711, 721, 722, 730, 746, 775, 776, 779, 781, 789, 815, 827, 828, 829, 830, 831, 832, 833, 840, 842, 843, 844, 847, 857, 863, 865, 866, 869, 871, 873, 881, 894, 897, 929, 934, 976, 983, 986, 990, 1004, 1015, 1022, 1026, 1032, 1033, 1034, 1036, 1037], "analog": [4, 19, 127, 382, 409, 980, 981, 995, 1031], "clock": 4, "25th": [4, 870], "back": [4, 100, 241, 363, 376, 378, 390, 396, 403, 410, 427, 436, 439, 440, 452, 475, 476, 477, 501, 502, 526, 527, 528, 531, 533, 534, 537, 574, 623, 651, 652, 659, 661, 669, 670, 671, 720, 857, 859, 860, 861, 865, 866, 867, 869, 870, 872, 884, 885, 892, 976, 980, 984, 1001, 1006, 1015, 1025, 1030, 1032, 1033, 1036], "natur": [4, 31, 118, 125, 159, 170, 171, 176, 184, 200, 201, 217, 218, 225, 246, 252, 270, 347, 376, 378, 389, 407, 409, 410, 413, 437, 443, 450, 544, 583, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 685, 697, 733, 747, 749, 834, 835, 836, 838, 840, 842, 843, 844, 871, 927, 976, 977, 979, 980, 983, 985, 990, 994, 1000, 1003, 1022, 1030], "sp": [4, 170, 970, 1014], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 102, 112, 114, 115, 121, 122, 128, 130, 131, 133, 134, 139, 141, 147, 149, 153, 154, 155, 156, 160, 176, 183, 185, 190, 191, 192, 193, 195, 197, 198, 207, 209, 211, 212, 213, 214, 216, 217, 221, 222, 223, 225, 226, 234, 235, 237, 241, 247, 249, 250, 251, 252, 255, 256, 258, 259, 260, 261, 264, 266, 270, 272, 281, 284, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 300, 303, 304, 305, 308, 313, 314, 315, 316, 317, 318, 319, 324, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 347, 353, 354, 355, 362, 363, 370, 371, 373, 374, 376, 377, 378, 379, 381, 384, 385, 387, 392, 393, 399, 400, 402, 403, 404, 405, 406, 407, 409, 411, 415, 430, 435, 436, 439, 440, 442, 452, 461, 468, 516, 521, 527, 531, 533, 534, 540, 542, 543, 583, 600, 601, 603, 624, 632, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 666, 672, 678, 679, 681, 682, 685, 686, 701, 707, 708, 711, 723, 727, 733, 734, 750, 751, 789, 803, 811, 817, 827, 828, 829, 830, 831, 832, 833, 839, 841, 848, 863, 865, 866, 867, 871, 887, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 907, 912, 913, 943, 969, 972, 973, 975, 976, 977, 978, 980, 982, 983, 985, 987, 990, 992, 994, 995, 996, 1000, 1004, 1006, 1010, 1011, 1013, 1014, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1038], "colorbar": [4, 11, 30, 40, 95, 106, 120, 128, 147, 153, 155, 156, 158, 171, 221, 233, 250, 272, 303, 334, 690, 1034], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 80, 98, 316, 527, 969, 980, 990], "166": [4, 300, 382, 980, 1022], "simpl": [4, 16, 27, 55, 71, 75, 78, 85, 86, 95, 118, 123, 159, 167, 171, 184, 201, 217, 242, 262, 282, 295, 317, 330, 347, 349, 353, 358, 374, 376, 378, 379, 380, 381, 383, 387, 388, 389, 390, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 416, 423, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 455, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 507, 515, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 778, 780, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 936, 972, 974, 975, 976, 977, 979, 980, 983, 990, 992, 994, 996, 1001, 1004, 1006, 1015, 1019, 1022], "wors": [4, 86, 112, 153, 171, 206, 261, 269, 308, 358, 400, 402, 412, 425, 458, 475, 476, 477, 545, 547, 549, 551, 553, 555, 558, 561, 563, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 671, 672, 673, 698, 714, 715, 716, 720, 777, 825, 826, 835, 843, 850, 893, 895, 898, 901, 903, 980, 990, 1031], "further": [4, 25, 42, 71, 78, 86, 95, 115, 121, 123, 148, 152, 157, 170, 172, 179, 184, 221, 226, 236, 258, 261, 262, 268, 318, 334, 348, 356, 362, 376, 387, 389, 401, 402, 404, 407, 409, 410, 412, 445, 455, 508, 525, 528, 575, 607, 615, 621, 651, 652, 659, 661, 669, 670, 671, 684, 688, 729, 766, 770, 773, 782, 783, 828, 834, 835, 842, 843, 870, 872, 892, 894, 897, 929, 979, 980, 982, 983, 984, 986, 990, 994, 995, 1013, 1015, 1031, 1035], "analyz": [4, 7, 17, 184, 263, 270, 318, 347, 349, 381, 382, 402, 410, 496, 581, 582, 584, 780, 977, 980, 987, 988, 996, 1015, 1022, 1031], "reason": [4, 8, 12, 42, 53, 70, 125, 149, 170, 171, 176, 200, 201, 208, 218, 229, 233, 234, 236, 239, 258, 261, 262, 267, 281, 304, 308, 348, 349, 358, 362, 363, 364, 371, 375, 376, 378, 380, 384, 387, 388, 389, 390, 402, 403, 404, 407, 409, 410, 412, 501, 525, 567, 631, 639, 645, 647, 665, 680, 685, 755, 789, 803, 836, 841, 848, 867, 889, 969, 970, 975, 976, 977, 980, 982, 983, 984, 986, 990, 994, 995, 1004, 1015, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "disappoint": 4, "outcom": [4, 118, 170, 389, 409, 562, 651, 702, 734, 784, 820, 887, 888, 889, 894, 897, 976, 980, 996, 1003, 1015, 1026, 1030, 1032], "altern": [4, 26, 71, 86, 119, 120, 126, 132, 172, 184, 200, 218, 230, 249, 252, 270, 313, 347, 348, 349, 358, 371, 379, 380, 382, 387, 389, 390, 392, 397, 399, 400, 402, 403, 404, 406, 407, 409, 410, 412, 434, 435, 438, 439, 440, 445, 451, 456, 492, 531, 533, 534, 540, 546, 547, 550, 551, 552, 553, 557, 558, 559, 575, 581, 582, 584, 610, 613, 636, 685, 699, 701, 763, 766, 770, 773, 791, 821, 856, 862, 865, 878, 885, 887, 900, 901, 902, 903, 947, 948, 974, 976, 977, 979, 980, 983, 984, 988, 990, 992, 993, 995, 996, 1001, 1010, 1015, 1017, 1027, 1029, 1035, 1036], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 105, 115, 126, 153, 158, 159, 165, 170, 171, 176, 180, 184, 215, 216, 217, 226, 233, 235, 246, 252, 262, 264, 270, 271, 281, 283, 297, 298, 300, 303, 334, 348, 349, 369, 371, 376, 382, 387, 389, 399, 400, 402, 403, 404, 406, 407, 409, 410, 412, 433, 436, 442, 443, 445, 447, 449, 508, 520, 534, 537, 554, 555, 556, 560, 561, 575, 582, 636, 645, 665, 666, 667, 668, 672, 680, 685, 697, 712, 728, 787, 837, 838, 869, 871, 872, 873, 881, 886, 928, 929, 951, 954, 972, 973, 976, 977, 979, 980, 983, 984, 988, 990, 994, 995, 1013, 1015, 1026, 1027, 1030, 1031, 1032, 1035, 1036], "periodic_spline_transform": 4, "n_spline": [4, 871], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 53, 54, 55, 56, 62, 97, 100, 105, 116, 121, 122, 124, 127, 141, 149, 153, 159, 160, 173, 179, 200, 201, 208, 211, 218, 221, 235, 236, 237, 255, 261, 262, 273, 286, 288, 292, 306, 307, 310, 315, 316, 323, 326, 332, 334, 335, 338, 339, 341, 347, 348, 371, 373, 376, 378, 383, 385, 389, 393, 402, 406, 409, 412, 413, 414, 418, 419, 420, 421, 423, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 700, 701, 702, 704, 705, 706, 707, 709, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 726, 727, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 881, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 912, 913, 915, 916, 917, 918, 921, 923, 928, 929, 932, 933, 934, 935, 939, 940, 943, 946, 948, 949, 951, 954, 955, 961, 964, 965, 967, 969, 976, 980, 990, 993, 996, 1006, 1010, 1015, 1017, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "degre": [4, 16, 34, 97, 114, 157, 164, 169, 171, 176, 179, 184, 188, 189, 201, 204, 235, 241, 246, 247, 248, 251, 252, 261, 275, 300, 315, 316, 331, 341, 407, 411, 439, 445, 491, 528, 534, 632, 633, 636, 649, 767, 787, 789, 838, 867, 871, 894, 895, 896, 897, 898, 972, 973, 975, 976, 977, 978, 980, 981, 983, 986, 987, 990, 993, 995, 1013, 1025, 1031, 1035, 1036], "n_knot": [4, 201, 316, 871, 990, 1035], "include_bia": [4, 179, 275, 867, 871, 1036], "knot": [4, 201, 316, 871, 990, 1035], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 55, 80, 81, 96, 105, 113, 123, 125, 152, 153, 155, 156, 157, 158, 159, 161, 171, 179, 180, 182, 184, 190, 194, 200, 201, 202, 206, 210, 211, 212, 213, 214, 218, 226, 229, 232, 233, 235, 237, 250, 261, 263, 264, 268, 269, 270, 271, 275, 286, 287, 293, 294, 304, 306, 317, 318, 333, 334, 337, 339, 340, 342, 343, 344, 624, 625, 795, 816, 832, 833, 1014], "again": [4, 20, 67, 72, 125, 156, 158, 160, 170, 225, 262, 347, 358, 380, 385, 389, 390, 402, 403, 404, 409, 410, 465, 560, 561, 627, 640, 644, 646, 648, 654, 656, 658, 685, 969, 976, 980, 994, 1019, 1022, 1030], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 101, 113, 118, 119, 120, 121, 122, 125, 126, 127, 130, 131, 141, 145, 147, 153, 154, 156, 158, 159, 164, 165, 167, 171, 172, 188, 189, 200, 202, 207, 209, 212, 213, 214, 215, 216, 220, 222, 224, 227, 229, 232, 233, 234, 235, 236, 238, 239, 246, 248, 250, 251, 252, 259, 261, 263, 264, 267, 268, 270, 271, 281, 286, 287, 291, 294, 297, 299, 305, 306, 313, 315, 318, 319, 324, 325, 327, 331, 333, 334, 337, 338, 339, 340, 343, 344, 347, 348, 356, 362, 369, 370, 371, 376, 378, 389, 399, 400, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 914, 917, 918, 923, 927, 929, 931, 934, 942, 944, 949, 951, 955, 956, 957, 958, 959, 960, 961, 970, 975, 976, 980, 981, 982, 983, 984, 986, 990, 991, 992, 993, 994, 995, 996, 1011, 1012, 1014, 1015, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1038, 1039], "concat": [4, 164, 169, 189, 218, 865], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 90, 95, 98, 102, 106, 114, 120, 121, 141, 147, 155, 156, 171, 179, 183, 184, 191, 192, 209, 212, 213, 214, 216, 222, 223, 224, 233, 234, 238, 255, 256, 281, 284, 285, 287, 289, 290, 292, 294, 297, 299, 300, 303, 305, 322, 323, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 353, 690, 1011, 1012], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 90, 95, 98, 102, 114, 120, 121, 141, 147, 155, 156, 171, 183, 192, 209, 212, 213, 214, 216, 222, 223, 224, 230, 233, 234, 238, 243, 255, 256, 281, 285, 287, 291, 294, 297, 299, 300, 303, 305, 315, 318, 322, 323, 327, 330, 331, 332, 333, 334, 335, 336, 338, 340, 343, 344, 353, 373, 403, 690, 905, 980, 990, 996, 1011, 1012], "tab20b": 4, "stai": [4, 26, 37, 105, 170, 348, 375, 376, 380, 389, 390, 985, 1028], "midnight": 4, "fewer": [4, 13, 26, 55, 112, 121, 123, 200, 362, 377, 402, 411, 412, 441, 454, 546, 587, 689, 822, 933, 976, 981, 983, 1027, 1028, 1029], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 104, 112, 118, 119, 126, 132, 144, 145, 146, 148, 149, 157, 165, 169, 170, 171, 172, 173, 176, 184, 200, 201, 218, 236, 240, 246, 252, 258, 259, 264, 268, 269, 271, 290, 303, 309, 310, 313, 316, 319, 323, 334, 347, 348, 349, 358, 362, 363, 364, 371, 372, 374, 376, 378, 380, 381, 382, 384, 387, 389, 390, 392, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 436, 437, 439, 443, 449, 450, 453, 461, 489, 496, 514, 517, 525, 527, 532, 536, 542, 544, 554, 555, 559, 560, 581, 582, 584, 586, 597, 604, 620, 623, 642, 651, 665, 667, 669, 671, 680, 681, 685, 688, 717, 720, 738, 750, 751, 755, 777, 784, 787, 788, 792, 793, 808, 820, 821, 834, 835, 836, 838, 840, 841, 842, 843, 844, 867, 869, 877, 878, 880, 881, 882, 883, 890, 928, 929, 931, 943, 948, 969, 970, 974, 975, 976, 977, 978, 979, 980, 981, 983, 986, 987, 988, 993, 994, 995, 996, 999, 1000, 1001, 1004, 1011, 1013, 1015, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 149, 373], "132": [4, 8, 13, 56, 409], "013": [4, 33, 35, 58, 146, 150], "successfulli": [4, 13, 307, 375, 380, 402, 410, 994], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 115, 123, 125, 127, 130, 146, 170, 179, 180, 184, 198, 204, 205, 208, 231, 233, 236, 239, 262, 268, 290, 305, 308, 309, 318, 348, 349, 358, 368, 370, 373, 376, 382, 387, 389, 400, 401, 402, 404, 406, 407, 409, 410, 411, 413, 437, 438, 443, 450, 453, 486, 527, 537, 542, 548, 549, 550, 551, 556, 557, 558, 566, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 620, 636, 645, 665, 666, 667, 668, 680, 685, 688, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 819, 869, 881, 884, 885, 900, 901, 902, 903, 969, 972, 974, 975, 976, 977, 980, 983, 992, 993, 997, 1006, 1014, 1022, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1036, 1038], "choic": [4, 7, 40, 46, 55, 65, 70, 78, 103, 152, 153, 159, 164, 189, 201, 239, 255, 259, 261, 264, 286, 310, 315, 347, 348, 358, 362, 374, 378, 381, 387, 392, 402, 404, 406, 408, 409, 411, 412, 445, 455, 464, 465, 466, 467, 468, 469, 471, 531, 533, 534, 540, 552, 631, 640, 641, 649, 651, 652, 654, 662, 673, 685, 698, 821, 834, 835, 840, 842, 843, 869, 872, 881, 883, 892, 893, 916, 969, 974, 976, 977, 978, 980, 981, 986, 988, 993, 994, 995, 996, 1029, 1032, 1033, 1037, 1038], "arbitrari": [4, 55, 86, 95, 96, 97, 117, 159, 179, 200, 217, 218, 259, 303, 307, 309, 315, 347, 356, 363, 376, 387, 389, 403, 406, 407, 409, 410, 414, 439, 443, 448, 450, 458, 525, 526, 552, 553, 574, 632, 641, 662, 673, 681, 781, 790, 791, 796, 798, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 856, 858, 871, 969, 971, 972, 976, 977, 980, 983, 990, 1001, 1015, 1022, 1023, 1026, 1028, 1029, 1030, 1032, 1036, 1038], "held": [4, 8, 71, 103, 126, 172, 208, 248, 264, 269, 279, 409, 552, 553, 554, 555, 694, 789, 792, 793, 803, 849, 850, 862, 969, 970, 979, 988, 1015], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 98, 100, 101, 107, 112, 114, 118, 121, 122, 130, 149, 154, 159, 160, 167, 170, 171, 172, 179, 183, 189, 192, 194, 196, 198, 200, 201, 202, 204, 206, 209, 212, 213, 217, 218, 221, 222, 223, 224, 225, 229, 232, 234, 239, 248, 252, 255, 258, 262, 263, 268, 270, 271, 279, 281, 284, 285, 286, 287, 288, 289, 290, 292, 294, 297, 304, 305, 307, 309, 322, 323, 327, 330, 333, 334, 335, 336, 338, 339, 343, 344, 347, 348, 349, 353, 358, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 384, 387, 389, 390, 401, 402, 407, 408, 409, 410, 413, 414, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 453, 454, 462, 465, 467, 491, 497, 505, 507, 508, 512, 515, 518, 523, 526, 528, 534, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 603, 604, 621, 624, 625, 626, 630, 631, 632, 637, 638, 644, 648, 650, 663, 664, 666, 668, 669, 671, 672, 675, 676, 681, 682, 683, 684, 685, 686, 687, 694, 699, 700, 703, 706, 710, 715, 717, 723, 728, 729, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 756, 771, 772, 787, 788, 789, 803, 813, 822, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 857, 871, 886, 887, 888, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 910, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 990, 992, 993, 995, 996, 1000, 1001, 1010, 1013, 1014, 1015, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 117, 303], "insight": [4, 7, 170, 171, 201, 202, 218, 299, 303, 347, 356, 400, 789, 792, 793, 803, 815, 987, 996, 1004], "last_hour": 4, "slice": [4, 17, 121, 209, 223, 226, 234, 284, 289, 292, 316, 317, 330, 371, 377, 378, 385, 403, 457, 460, 486, 487, 501, 539, 632, 766, 770, 773, 908, 932, 933, 951, 1034, 1036], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 106, 112, 121, 122, 129, 132, 161, 170, 171, 194, 199, 215, 216, 221, 222, 223, 238, 249, 257, 300, 303, 305, 313, 315, 322, 323, 327, 341, 342, 353], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 91, 92, 97, 99, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 139, 145, 152, 153, 157, 158, 159, 160, 161, 164, 167, 170, 173, 176, 179, 180, 182, 183, 184, 188, 189, 190, 194, 200, 201, 202, 203, 206, 207, 208, 209, 210, 215, 217, 218, 222, 223, 224, 229, 234, 235, 237, 239, 240, 248, 255, 256, 259, 260, 262, 263, 264, 265, 267, 270, 271, 272, 273, 274, 275, 279, 286, 288, 290, 293, 298, 300, 303, 304, 308, 313, 314, 317, 321, 325, 326, 327, 328, 341, 342, 347, 348, 352, 353, 354, 355, 364, 368, 369, 370, 375, 376, 378, 381, 385, 389, 390, 399, 400, 401, 412, 413, 419, 420, 424, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 454, 455, 458, 462, 480, 481, 482, 486, 487, 488, 489, 495, 496, 501, 502, 505, 507, 508, 512, 515, 516, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 562, 563, 585, 586, 587, 588, 589, 591, 592, 593, 597, 598, 599, 602, 603, 624, 651, 652, 659, 660, 661, 666, 667, 668, 669, 670, 671, 690, 691, 693, 695, 696, 697, 698, 700, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 717, 718, 719, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 746, 747, 748, 749, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 838, 839, 841, 842, 849, 850, 852, 856, 859, 860, 863, 865, 866, 876, 887, 888, 889, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 912, 917, 918, 943, 944, 951, 969, 976, 977, 981, 982, 983, 984, 986, 987, 990, 994, 995, 996, 1000, 1002, 1006, 1011, 1013, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "actual": [4, 27, 46, 60, 75, 86, 118, 149, 176, 189, 200, 204, 208, 248, 257, 264, 349, 358, 362, 364, 373, 374, 376, 378, 381, 382, 387, 388, 389, 400, 402, 407, 410, 411, 427, 502, 508, 509, 520, 528, 531, 533, 540, 555, 556, 637, 638, 641, 651, 652, 659, 660, 661, 662, 663, 665, 667, 669, 670, 671, 673, 680, 684, 688, 694, 697, 702, 708, 714, 715, 716, 777, 787, 792, 793, 808, 809, 838, 869, 892, 898, 920, 921, 922, 955, 972, 979, 980, 983, 987, 988, 1029, 1030, 1036, 1037, 1038], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 121, 144, 152, 153, 157, 158, 161, 165, 170, 171, 179, 188, 189, 190, 192, 196, 200, 201, 202, 206, 209, 212, 213, 218, 229, 246, 249, 284, 286, 297, 298, 300, 327, 344, 353, 354, 355, 376, 392, 395, 402, 409, 412, 548, 549, 624, 986, 987, 996, 1000, 1006], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 103, 120, 122, 125, 128, 167, 170, 173, 178, 204, 215, 219, 229, 240, 251, 261, 268, 271, 290, 304, 329, 331, 345, 348, 362, 373, 376, 388, 389, 402, 405, 407, 408, 409, 410, 413, 437, 442, 465, 467, 471, 505, 559, 624, 632, 651, 659, 661, 666, 668, 669, 670, 780, 796, 797, 820, 821, 822, 853, 854, 865, 896, 943, 970, 972, 976, 977, 978, 979, 980, 981, 983, 984, 987, 988, 990, 995, 1002, 1017, 1026, 1028, 1035, 1037], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 97, 99, 103, 104, 105, 111, 112, 113, 114, 115, 116, 118, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 145, 152, 153, 157, 158, 159, 160, 161, 170, 171, 176, 179, 180, 182, 185, 188, 189, 190, 194, 200, 201, 202, 203, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 224, 232, 233, 234, 235, 237, 240, 248, 256, 258, 260, 261, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 286, 287, 288, 293, 298, 304, 308, 314, 317, 324, 333, 336, 341, 347, 352, 353, 354, 355, 693, 1011], "draw": [4, 7, 16, 60, 161, 170, 196, 240, 263, 268, 334, 383, 405, 407, 408, 409, 548, 549, 550, 551, 556, 557, 558, 559, 604, 627, 694, 795, 811, 904, 906, 979, 1000, 1009, 1035, 1036], "conclus": [4, 100, 170, 172, 200, 202, 261, 263, 358, 409, 1009], "abov": [4, 25, 26, 37, 44, 66, 70, 114, 117, 118, 123, 125, 135, 148, 149, 170, 171, 173, 186, 200, 202, 206, 211, 233, 236, 237, 261, 267, 286, 305, 308, 309, 314, 316, 348, 349, 356, 358, 362, 363, 364, 370, 371, 373, 374, 375, 376, 378, 380, 382, 387, 389, 390, 402, 403, 404, 406, 407, 408, 410, 412, 434, 438, 457, 460, 482, 488, 489, 490, 516, 583, 627, 697, 747, 789, 801, 803, 813, 855, 856, 869, 875, 881, 889, 943, 969, 970, 972, 974, 976, 977, 980, 983, 985, 987, 990, 994, 995, 996, 1001, 1006, 1007, 1013, 1014, 1015, 1028], "problemat": [4, 257, 403, 970, 1030], "captur": [4, 9, 12, 37, 39, 86, 125, 129, 144, 157, 170, 179, 184, 200, 204, 252, 314, 334, 384, 402, 409, 410, 411, 564, 581, 582, 584, 838, 947, 980, 985, 993, 997, 1013, 1034], "big": [4, 44, 60, 62, 205, 222, 252, 363, 376, 382, 390, 404, 410, 414, 531, 554, 555, 557, 558, 795, 816, 827, 828, 829, 830, 831, 1001, 1004, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "goe": [4, 37, 117, 356, 376, 409, 464, 465, 471, 550, 551, 557, 558, 559, 900, 901, 902, 903, 990, 994], "artifact": [4, 13, 46, 47, 303, 364, 380], "discontinu": [4, 387], "fail": [4, 54, 66, 96, 103, 160, 161, 179, 184, 204, 236, 261, 313, 363, 374, 376, 378, 379, 384, 390, 392, 405, 406, 433, 465, 467, 669, 670, 671, 849, 850, 923, 969, 977, 1022, 1023, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "intra": [4, 581, 584, 782, 783], "variat": [4, 12, 37, 129, 149, 157, 158, 167, 170, 205, 245, 247, 252, 253, 258, 279, 314, 334, 373, 406, 407, 412, 436, 440, 452, 529, 636, 665, 667, 668, 787, 788, 807, 808, 810, 969, 980, 990, 993, 996, 1000, 1011, 1013, 1016, 1017, 1025, 1027, 1028], "harmon": [4, 37, 268, 348, 402, 528, 534, 721, 722, 728, 775, 785, 980], "phase": [4, 184, 194, 362, 620, 972, 977, 983, 1004, 1030, 1032], "potenti": [4, 55, 78, 165, 169, 171, 179, 287, 288, 297, 319, 349, 362, 363, 389, 392, 393, 402, 406, 409, 410, 461, 475, 476, 477, 478, 489, 517, 542, 550, 551, 554, 555, 557, 558, 566, 599, 604, 627, 755, 882, 883, 890, 900, 901, 902, 903, 986, 994, 996, 1000, 1015, 1025, 1032, 1033, 1036], "fix": [4, 8, 20, 25, 34, 46, 71, 105, 117, 118, 121, 152, 153, 157, 160, 170, 184, 202, 218, 252, 264, 297, 313, 314, 315, 316, 317, 318, 319, 348, 362, 363, 370, 372, 374, 375, 376, 378, 379, 384, 387, 389, 390, 393, 402, 403, 406, 407, 409, 410, 412, 445, 455, 465, 497, 505, 524, 530, 533, 535, 541, 542, 552, 553, 557, 558, 581, 584, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 623, 646, 656, 663, 677, 680, 684, 688, 700, 777, 787, 803, 810, 834, 835, 837, 840, 842, 843, 859, 876, 900, 901, 929, 947, 969, 976, 979, 980, 983, 990, 1001, 1003, 1015, 1020, 1021, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039], "two": [4, 7, 9, 11, 14, 20, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 104, 110, 112, 113, 120, 121, 122, 125, 128, 129, 130, 133, 136, 146, 149, 152, 153, 154, 155, 158, 159, 164, 165, 167, 170, 171, 172, 179, 183, 184, 188, 189, 190, 191, 196, 200, 201, 202, 208, 209, 212, 217, 218, 223, 225, 226, 229, 234, 236, 237, 239, 246, 247, 248, 250, 251, 252, 256, 258, 262, 268, 284, 286, 289, 290, 292, 294, 303, 305, 308, 313, 314, 316, 317, 324, 330, 331, 334, 335, 336, 343, 347, 348, 349, 353, 358, 369, 370, 371, 372, 373, 374, 376, 378, 380, 382, 383, 384, 387, 389, 390, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 434, 435, 436, 437, 438, 440, 443, 444, 445, 446, 450, 452, 457, 462, 463, 464, 465, 466, 467, 468, 469, 481, 483, 484, 485, 486, 487, 489, 491, 493, 494, 495, 496, 497, 498, 500, 503, 507, 512, 515, 529, 531, 533, 537, 540, 542, 543, 546, 553, 563, 574, 577, 583, 584, 585, 588, 589, 591, 592, 593, 595, 596, 599, 600, 601, 603, 604, 613, 614, 617, 621, 624, 625, 632, 636, 638, 663, 664, 666, 685, 692, 696, 697, 698, 705, 708, 709, 712, 714, 715, 716, 723, 724, 727, 728, 730, 733, 735, 746, 747, 749, 755, 756, 763, 766, 769, 770, 771, 772, 773, 777, 778, 784, 785, 786, 787, 821, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 849, 850, 856, 857, 864, 865, 866, 867, 886, 887, 888, 892, 900, 902, 903, 943, 959, 960, 966, 969, 970, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 1006, 1010, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "onc": [4, 8, 50, 146, 149, 152, 222, 236, 259, 262, 281, 309, 313, 317, 347, 349, 356, 358, 362, 364, 370, 371, 376, 380, 381, 382, 383, 384, 388, 389, 390, 402, 403, 405, 406, 407, 409, 410, 411, 412, 442, 444, 446, 465, 501, 502, 531, 537, 544, 552, 553, 583, 584, 590, 604, 612, 620, 640, 644, 646, 648, 654, 656, 658, 659, 660, 661, 669, 670, 671, 690, 705, 709, 711, 728, 773, 790, 794, 797, 807, 827, 828, 829, 830, 831, 904, 976, 977, 983, 990, 994, 995, 996, 1006, 1015, 1019, 1022, 1030, 1032, 1033, 1034, 1035], "specif": [4, 11, 12, 20, 27, 44, 55, 62, 65, 70, 72, 118, 132, 157, 160, 170, 171, 176, 204, 218, 256, 261, 303, 313, 314, 318, 347, 348, 349, 358, 362, 363, 371, 376, 379, 381, 382, 384, 387, 389, 392, 398, 401, 402, 403, 406, 407, 409, 410, 411, 412, 489, 496, 527, 544, 550, 557, 560, 561, 562, 563, 567, 581, 584, 586, 590, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 618, 633, 636, 639, 640, 645, 651, 665, 680, 690, 692, 705, 706, 738, 789, 790, 791, 796, 797, 798, 803, 815, 828, 921, 923, 924, 943, 956, 957, 958, 974, 976, 977, 979, 980, 982, 983, 985, 987, 990, 994, 996, 997, 998, 999, 1015, 1017, 1022, 1026, 1030, 1031, 1032, 1033, 1036, 1037], "furthermor": [4, 37, 118, 158, 171, 172, 240, 242, 281, 347, 348, 362, 364, 383, 402, 407, 409, 410, 555, 583, 599, 612, 697, 728, 738, 747, 749, 785, 892, 976, 988, 1025, 1029], "enforc": [4, 12, 53, 95, 157, 194, 290, 362, 376, 404, 407, 409, 412, 501, 520, 524, 530, 532, 535, 536, 538, 539, 541, 550, 551, 554, 555, 557, 558, 871, 900, 901, 902, 903, 912, 913, 970, 977, 1024, 1030, 1032, 1034, 1038], "behav": [4, 12, 48, 52, 57, 204, 256, 303, 315, 334, 358, 376, 382, 387, 388, 402, 406, 872, 976, 990, 995, 997, 1001, 1015, 1022, 1029, 1031, 1035, 1036], "similarli": [4, 12, 37, 55, 92, 128, 171, 184, 189, 200, 230, 261, 297, 303, 319, 334, 358, 363, 372, 374, 378, 381, 389, 399, 405, 406, 410, 975, 977, 978, 980, 987, 994, 995, 997, 1006, 1010, 1030, 1036, 1038], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 56, 58, 115, 146, 149, 165, 171, 172, 183, 184, 231, 236, 257, 259, 270, 272, 273, 284, 292, 313, 327, 330, 331, 337, 347, 348, 349, 361, 362, 363, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 384, 385, 387, 389, 392, 393, 399, 400, 402, 403, 406, 407, 409, 410, 411, 412, 413, 414, 416, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 455, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 484, 485, 488, 489, 490, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 613, 620, 621, 622, 623, 625, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 700, 713, 721, 722, 730, 763, 766, 770, 771, 772, 773, 775, 776, 779, 780, 781, 782, 783, 787, 788, 789, 791, 792, 793, 794, 795, 796, 798, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 881, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 912, 913, 915, 923, 924, 928, 929, 936, 937, 938, 939, 948, 949, 950, 951, 954, 964, 965, 969, 970, 976, 977, 980, 982, 983, 986, 988, 990, 994, 995, 996, 1001, 1003, 1006, 1013, 1014, 1015, 1017, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "shorter": [4, 158, 249, 387, 402, 407, 412, 443, 450, 556, 690, 982, 986, 1015, 1033], "necessarili": [4, 31, 72, 98, 170, 200, 208, 218, 234, 235, 247, 305, 347, 348, 370, 380, 400, 402, 409, 620, 840, 842, 843, 844, 974, 977, 979, 980], "59": [4, 46, 176, 184, 218, 300, 339, 373, 382, 403, 503, 980, 1018, 1022], "37": [4, 184, 264, 322, 371, 409, 517, 709, 872, 990, 1022], "creat": [4, 5, 8, 11, 16, 20, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 97, 100, 114, 117, 121, 122, 125, 128, 131, 147, 148, 152, 154, 157, 158, 159, 161, 165, 169, 171, 179, 181, 183, 186, 196, 201, 202, 212, 213, 223, 234, 236, 240, 242, 251, 256, 257, 259, 261, 271, 279, 284, 289, 291, 292, 305, 307, 308, 313, 316, 317, 327, 330, 331, 335, 336, 339, 342, 343, 344, 349, 352, 354, 355, 358, 363, 371, 372, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 392, 400, 402, 403, 406, 408, 409, 410, 412, 431, 444, 446, 458, 459, 492, 508, 509, 510, 511, 539, 546, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 581, 582, 584, 590, 621, 623, 624, 625, 626, 690, 691, 693, 694, 695, 774, 781, 789, 791, 795, 799, 803, 807, 811, 813, 814, 822, 853, 865, 894, 897, 900, 901, 902, 903, 907, 910, 932, 933, 939, 948, 953, 965, 970, 976, 979, 980, 981, 983, 987, 990, 991, 992, 994, 995, 996, 1000, 1001, 1004, 1011, 1013, 1014, 1019, 1022, 1023, 1025, 1028, 1032, 1035, 1036, 1037, 1038, 1039], "turn": [4, 32, 78, 164, 165, 170, 184, 215, 216, 234, 261, 285, 349, 362, 364, 371, 387, 389, 390, 401, 402, 403, 405, 407, 410, 411, 412, 574, 575, 582, 600, 601, 821, 825, 894, 897, 915, 970, 974, 982, 985, 990, 1004, 1015, 1027, 1029, 1030, 1035], "downstream": [4, 80, 310, 349, 410, 524, 527, 530, 534, 535, 599, 865, 990, 1032], "freedom": [4, 97, 157, 188, 189, 191, 261, 534, 649, 787, 976, 1025], "underfit": [4, 125, 152, 167, 172, 204, 254, 276, 277, 297, 309, 409, 650, 789, 792, 793, 803, 814, 815, 852, 867, 975, 976], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 105, 116, 124, 125, 149, 153, 170, 177, 180, 196, 200, 201, 214, 218, 228, 229, 232, 235, 244, 252, 261, 266, 275, 282, 290, 295, 303, 305, 306, 308, 313, 316, 347, 349, 354, 355, 358, 365, 368, 373, 385, 387, 389, 399, 400, 403, 405, 406, 407, 409, 412, 414, 415, 416, 426, 442, 462, 463, 466, 467, 468, 469, 475, 476, 477, 484, 489, 495, 514, 517, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 552, 553, 575, 582, 603, 604, 612, 631, 632, 633, 634, 635, 650, 651, 652, 665, 667, 669, 670, 672, 680, 685, 750, 751, 756, 787, 790, 807, 813, 817, 818, 832, 833, 836, 840, 842, 843, 844, 848, 852, 853, 858, 862, 864, 865, 869, 881, 892, 897, 898, 928, 929, 954, 973, 974, 975, 976, 977, 979, 983, 984, 985, 986, 987, 988, 992, 994, 995, 996, 1000, 1001, 1015, 1017, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "especi": [4, 8, 55, 56, 122, 125, 170, 200, 236, 309, 318, 338, 348, 358, 363, 370, 376, 384, 387, 389, 400, 402, 410, 436, 442, 494, 531, 550, 551, 552, 553, 557, 558, 559, 639, 640, 641, 643, 645, 646, 647, 651, 652, 653, 654, 655, 656, 662, 673, 688, 698, 738, 827, 828, 829, 830, 831, 900, 901, 902, 903, 976, 982, 983, 988, 990, 1004, 1025, 1030, 1034, 1035, 1036], "sharp": [4, 171, 987, 990], "rush": [4, 376], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 80, 95, 127, 152, 159, 170, 171, 204, 215, 218, 261, 268, 272, 317, 347, 348, 358, 375, 400, 402, 404, 407, 409, 410, 411, 430, 436, 440, 444, 446, 452, 524, 531, 533, 535, 536, 538, 539, 540, 600, 601, 627, 792, 793, 832, 833, 928, 929, 972, 977, 980, 996, 1036], "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 149, 170, 171, 189, 200, 205, 218, 246, 249, 258, 262, 279, 300, 349, 362, 364, 376, 378, 389, 400, 402, 404, 407, 409, 411, 430, 441, 646, 838, 869, 881, 929, 976, 977, 983, 996, 1015], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 103, 122, 125, 171, 200, 229, 239, 261, 268, 270, 271, 304, 319, 342, 365, 370, 376, 378, 380, 382, 384, 389, 392, 396, 400, 402, 404, 406, 407, 410, 411, 439, 444, 446, 463, 464, 465, 466, 467, 468, 469, 525, 532, 534, 536, 647, 648, 649, 695, 699, 700, 701, 708, 734, 746, 780, 781, 787, 788, 837, 936, 976, 977, 978, 980, 983, 990, 994, 995, 996, 1000, 1001, 1015, 1022, 1024, 1025, 1027, 1030, 1034], "These": [4, 5, 7, 27, 51, 95, 97, 101, 117, 121, 167, 171, 189, 200, 201, 202, 230, 268, 279, 281, 285, 300, 303, 310, 312, 317, 323, 325, 358, 362, 363, 369, 372, 373, 376, 378, 380, 383, 385, 387, 389, 392, 396, 399, 400, 401, 402, 405, 407, 409, 410, 411, 412, 435, 439, 441, 491, 501, 502, 508, 531, 560, 561, 595, 596, 661, 669, 670, 692, 699, 725, 748, 770, 784, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 837, 838, 857, 969, 971, 974, 976, 977, 980, 981, 991, 993, 995, 1000, 1006, 1010, 1015, 1022, 1028, 1030, 1031, 1032, 1035], "systemat": [4, 261, 378, 705, 720, 980, 1037], "reveal": [4, 170, 172, 347, 382, 399, 977, 1038], "form": [4, 9, 19, 32, 42, 60, 67, 95, 135, 159, 160, 170, 235, 236, 252, 261, 322, 358, 370, 373, 376, 378, 380, 389, 390, 399, 401, 402, 405, 406, 407, 408, 409, 410, 412, 414, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 452, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 680, 681, 682, 683, 684, 685, 686, 692, 787, 788, 789, 792, 793, 794, 797, 799, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 918, 937, 940, 969, 971, 973, 974, 976, 977, 980, 981, 984, 985, 986, 990, 995, 1000, 1006, 1013, 1028, 1032, 1034], "explain": [4, 5, 12, 56, 73, 85, 86, 104, 125, 152, 157, 158, 171, 172, 200, 218, 229, 236, 252, 271, 274, 309, 347, 348, 363, 374, 376, 380, 396, 398, 405, 407, 412, 486, 514, 517, 527, 534, 537, 542, 618, 641, 649, 662, 673, 714, 715, 716, 720, 777, 976, 983, 996, 999, 1000, 1011, 1013, 1014, 1033, 1035, 1036], "lack": [4, 376, 378, 387, 406, 817, 907, 995, 1036], "deriv": [4, 19, 105, 106, 124, 157, 160, 172, 188, 189, 193, 201, 363, 371, 378, 404, 406, 408, 409, 410, 412, 414, 434, 438, 439, 458, 526, 599, 610, 615, 641, 662, 669, 673, 849, 850, 865, 871, 892, 893, 974, 976, 977, 980, 984, 986, 995, 1022, 1023, 1024, 1029, 1030, 1031, 1037], "address": [4, 48, 204, 347, 371, 376, 402, 410, 650, 976, 977, 982, 983, 984, 985, 986, 990, 1004, 1013, 1030], "section": [4, 37, 95, 100, 115, 132, 138, 139, 140, 141, 157, 161, 169, 170, 171, 179, 184, 188, 189, 202, 225, 230, 236, 241, 259, 261, 264, 270, 308, 309, 310, 315, 347, 348, 349, 358, 369, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 390, 393, 396, 400, 401, 403, 405, 406, 407, 409, 410, 411, 412, 432, 436, 452, 527, 607, 612, 615, 630, 638, 780, 788, 894, 897, 969, 974, 976, 980, 981, 983, 984, 986, 987, 994, 995, 997, 999, 1013, 1015, 1022, 1024, 1025, 1026, 1029], "margin": [4, 12, 25, 27, 153, 154, 156, 157, 158, 167, 170, 171, 178, 219, 261, 303, 309, 329, 332, 334, 336, 345, 373, 400, 401, 407, 409, 412, 505, 603, 604, 624, 638, 669, 727, 821, 869, 881, 894, 897, 976, 980, 982, 986, 987, 990, 994, 995, 1013, 1029, 1031], "construct": [4, 11, 70, 72, 112, 114, 116, 120, 132, 149, 218, 230, 236, 241, 243, 279, 294, 304, 306, 314, 317, 370, 373, 378, 385, 389, 402, 406, 407, 409, 410, 413, 427, 434, 435, 437, 438, 443, 445, 450, 456, 458, 460, 512, 528, 534, 537, 548, 549, 574, 580, 632, 681, 683, 684, 803, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 851, 852, 853, 854, 856, 897, 911, 913, 928, 929, 939, 943, 969, 970, 972, 976, 977, 980, 981, 983, 990, 993, 995, 996, 1001, 1006, 1010, 1027, 1029, 1030, 1033, 1036], "polynomialfeatur": [4, 179, 200, 201, 206, 241, 275, 315, 871, 976, 990, 1026, 1030, 1031, 1032, 1035, 1036, 1038], "coars": [4, 121, 382, 441, 454], "too": [4, 7, 12, 17, 44, 50, 55, 57, 62, 70, 74, 82, 99, 125, 164, 172, 184, 201, 204, 222, 233, 247, 255, 259, 268, 276, 299, 309, 334, 347, 354, 355, 362, 373, 376, 382, 384, 387, 389, 402, 404, 406, 409, 410, 411, 414, 430, 442, 531, 581, 584, 672, 685, 700, 827, 828, 829, 830, 831, 857, 870, 872, 975, 977, 979, 980, 982, 983, 987, 1013, 1023, 1026, 1029, 1030, 1031, 1032, 1034], "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 112, 118, 119, 120, 121, 123, 126, 145, 149, 172, 200, 221, 233, 247, 255, 261, 268, 269, 273, 281, 303, 308, 309, 313, 314, 315, 316, 317, 319, 347, 358, 362, 364, 371, 373, 375, 376, 388, 389, 390, 392, 393, 399, 400, 402, 403, 404, 407, 409, 410, 411, 412, 414, 496, 546, 547, 550, 551, 552, 553, 557, 558, 559, 581, 584, 599, 602, 620, 632, 643, 647, 651, 652, 659, 661, 669, 670, 671, 685, 688, 766, 770, 789, 793, 803, 849, 850, 865, 870, 872, 892, 900, 901, 902, 903, 969, 970, 972, 976, 977, 979, 980, 981, 982, 983, 986, 987, 988, 990, 993, 995, 997, 999, 1000, 1001, 1004, 1013, 1015, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1037, 1038], "featureunion": [4, 74, 368, 389, 401, 457, 622, 854, 970, 1001, 1004, 1017, 1023, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "hour_workday_interact": 4, "interaction_onli": [4, 867, 976, 990], "combin": [4, 12, 20, 25, 27, 61, 70, 71, 73, 74, 95, 104, 105, 110, 123, 127, 136, 152, 158, 165, 167, 170, 184, 200, 204, 217, 218, 225, 229, 234, 261, 262, 270, 272, 273, 290, 298, 309, 315, 316, 318, 337, 349, 353, 362, 368, 372, 373, 376, 381, 388, 389, 399, 400, 402, 403, 406, 407, 408, 409, 410, 411, 412, 414, 415, 438, 457, 459, 460, 466, 468, 469, 472, 473, 474, 482, 489, 501, 502, 508, 514, 517, 519, 524, 530, 531, 533, 535, 540, 542, 553, 555, 558, 560, 561, 603, 607, 609, 614, 617, 623, 627, 636, 639, 640, 645, 646, 651, 652, 653, 654, 655, 656, 659, 661, 665, 666, 667, 668, 669, 671, 672, 674, 677, 694, 722, 780, 789, 792, 793, 800, 801, 813, 815, 819, 851, 853, 857, 865, 866, 867, 872, 892, 954, 969, 972, 973, 976, 980, 981, 983, 986, 990, 993, 994, 996, 997, 1004, 1011, 1013, 1015, 1022, 1027, 1030, 1033, 1034, 1035, 1037, 1038], "ones": [4, 11, 34, 43, 55, 71, 81, 128, 152, 176, 184, 204, 205, 229, 232, 236, 261, 269, 272, 288, 307, 323, 344, 362, 363, 376, 384, 389, 402, 404, 406, 409, 443, 525, 559, 574, 603, 604, 637, 638, 651, 652, 663, 669, 696, 786, 791, 796, 807, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 867, 871, 934, 976, 980, 985, 986, 990, 995, 1013, 1022, 1030, 1031, 1032], "previou": [4, 43, 53, 71, 95, 115, 122, 125, 132, 152, 157, 158, 169, 170, 171, 184, 186, 201, 233, 235, 236, 261, 264, 268, 303, 308, 317, 347, 348, 349, 358, 362, 371, 376, 378, 381, 382, 384, 387, 389, 390, 392, 402, 409, 410, 461, 539, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 623, 639, 641, 645, 646, 651, 653, 655, 659, 660, 661, 662, 669, 670, 671, 673, 700, 808, 823, 826, 841, 849, 850, 889, 906, 976, 980, 984, 990, 1001, 1006, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "nice": [4, 67, 201, 236, 303, 362, 407, 1015], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 269, 348, 382], "104": [4, 24, 39, 68, 120, 193, 219], "highlight": [4, 80, 92, 152, 153, 158, 218, 307, 320, 347, 349, 365, 376, 380, 381, 384, 387, 412, 436, 439, 440, 457, 460, 483, 484, 489, 494, 495, 497, 505, 508, 514, 517, 531, 554, 555, 557, 558, 560, 592, 595, 621, 623, 625, 627, 633, 639, 641, 645, 651, 662, 673, 681, 694, 695, 710, 740, 780, 785, 789, 792, 793, 795, 803, 811, 814, 818, 834, 836, 853, 857, 862, 865, 866, 867, 871, 872, 873, 889, 890, 892, 897, 900, 901, 924, 977, 980, 988, 990, 995, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "anoth": [4, 37, 95, 100, 112, 127, 149, 152, 160, 165, 170, 189, 204, 208, 226, 229, 236, 240, 247, 261, 263, 264, 267, 271, 291, 347, 349, 352, 358, 362, 364, 370, 371, 374, 376, 378, 382, 387, 389, 393, 396, 399, 402, 406, 407, 409, 410, 411, 413, 435, 437, 445, 448, 455, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 501, 531, 533, 540, 666, 669, 685, 702, 712, 795, 811, 851, 852, 873, 969, 975, 976, 977, 980, 981, 983, 986, 990, 994, 995, 1006, 1013, 1014, 1015, 1031, 1032], "either": [4, 10, 30, 71, 118, 121, 122, 170, 188, 190, 230, 256, 265, 270, 286, 347, 356, 362, 363, 368, 371, 374, 376, 377, 378, 382, 389, 393, 396, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 435, 440, 445, 480, 489, 505, 517, 526, 527, 529, 537, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 575, 576, 577, 581, 582, 583, 584, 586, 587, 590, 595, 600, 601, 603, 604, 615, 620, 623, 625, 626, 643, 647, 649, 657, 669, 671, 675, 676, 683, 690, 691, 695, 699, 700, 704, 705, 713, 716, 718, 719, 720, 727, 731, 732, 734, 744, 748, 761, 766, 770, 774, 777, 780, 781, 784, 789, 792, 793, 795, 803, 811, 812, 813, 814, 815, 816, 817, 819, 822, 882, 883, 889, 892, 893, 900, 901, 902, 903, 907, 937, 941, 969, 976, 980, 981, 982, 983, 984, 985, 988, 990, 994, 995, 1006, 1014, 1015, 1022, 1025, 1031, 1032, 1033, 1036], "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 112, 123, 130, 132, 135, 145, 149, 157, 159, 161, 164, 170, 176, 193, 200, 239, 240, 243, 249, 261, 270, 281, 289, 291, 303, 304, 307, 308, 347, 348, 364, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 387, 389, 396, 398, 399, 400, 402, 403, 406, 407, 410, 411, 412, 414, 435, 440, 443, 444, 445, 446, 449, 455, 508, 525, 529, 546, 547, 552, 553, 554, 555, 590, 620, 623, 651, 652, 659, 660, 661, 666, 668, 669, 670, 671, 685, 705, 718, 748, 784, 787, 788, 792, 793, 841, 848, 852, 865, 871, 892, 897, 898, 969, 970, 974, 976, 980, 984, 985, 990, 992, 994, 995, 996, 1001, 1006, 1013, 1015, 1022, 1025, 1029, 1030, 1033, 1034, 1037], "quadrat": [4, 29, 35, 157, 161, 167, 214, 263, 316, 401, 433, 451, 454, 542, 543, 616, 641, 651, 652, 662, 669, 673, 709, 897, 898, 976, 977, 980, 983, 986, 990, 994, 995, 1002, 1017, 1023], "tractabl": [4, 406, 627, 1000, 1035], "nystr\u00f6m": 4, "latter": [4, 14, 251, 261, 270, 271, 289, 308, 342, 364, 373, 389, 406, 409, 410, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 734, 787, 788, 789, 792, 793, 798, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 947, 983, 1031], "kernel_approxim": [4, 164, 167, 175, 176, 214, 229, 234, 315, 365, 670, 750, 751, 858, 972, 1006, 1023, 1029], "nystroem": [4, 164, 214, 229, 234, 368, 633, 634, 635, 670, 858, 897, 898, 1017, 1023, 1029, 1032, 1034, 1035, 1036], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 141, 176, 261, 331, 338, 341, 445, 528, 613, 757, 766, 789, 867, 894, 895, 896, 897, 898, 976, 990, 1013], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 59, 70, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 130, 176, 199, 221, 222, 223, 224, 225, 226, 229, 233, 234, 237, 241, 246, 247, 248, 249, 250, 251, 252, 260, 285, 290, 300, 308, 315, 317, 348, 378, 381, 382, 389, 405, 407, 414, 444, 445, 455, 457, 475, 476, 477, 478, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 632, 633, 634, 635, 681, 682, 683, 684, 685, 686, 687, 688, 689, 787, 788, 841, 848, 851, 884, 885, 886, 929, 972, 974, 977, 979, 983, 1011, 1014, 1023, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1039], "300": [4, 20, 21, 34, 38, 50, 58, 98, 112, 113, 114, 118, 165, 190, 226, 229, 233, 250, 264, 291, 306, 315, 322, 340, 342, 378, 436, 440, 441, 452, 454, 632, 637, 638, 672, 683, 685, 687, 849, 976, 1032], "053": [4, 125, 136, 149, 373, 382], "002": [4, 12, 149, 152, 373], "076": [4, 880], "004": [4, 348], "almost": [4, 118, 123, 124, 202, 208, 236, 275, 308, 325, 358, 369, 371, 380, 382, 387, 388, 389, 393, 402, 406, 407, 463, 464, 465, 466, 468, 469, 470, 787, 969, 975, 976, 979, 980, 995, 1014, 1015, 1030, 1035], "rival": [4, 889, 993], "intermedi": [4, 7, 52, 55, 117, 125, 334, 410, 552, 553, 612, 852, 980, 1034], "compound": [4, 218, 410, 603, 605, 673, 716, 744, 976, 1015], "one_hot_poly_pipelin": 4, "082": [4, 14], "006": [4, 6, 382], "111": [4, 7, 8, 16, 67, 90, 101, 102, 111, 197, 215, 225, 261, 281, 844, 1025], "competit": [4, 125, 347, 409, 637, 983], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 103, 112, 115, 128, 149, 172, 193, 195, 200, 202, 204, 214, 221, 223, 229, 233, 239, 246, 247, 249, 252, 255, 261, 263, 267, 268, 276, 287, 288, 299, 307, 309, 310, 319, 325, 333, 334, 347, 356, 372, 373, 376, 381, 384, 389, 392, 399, 400, 401, 406, 407, 410, 435, 437, 442, 461, 514, 517, 528, 575, 582, 596, 672, 685, 689, 698, 718, 734, 781, 837, 866, 873, 890, 929, 945, 948, 969, 972, 975, 976, 977, 979, 980, 983, 985, 986, 987, 988, 990, 992, 995, 996, 1002, 1017, 1023, 1026, 1027, 1028, 1030, 1031, 1036, 1037], "rank": [4, 17, 25, 80, 99, 103, 119, 147, 172, 173, 218, 259, 261, 269, 372, 397, 399, 400, 404, 405, 407, 409, 410, 501, 502, 514, 517, 542, 543, 586, 587, 599, 641, 650, 662, 673, 689, 713, 718, 719, 731, 732, 748, 784, 792, 793, 929, 969, 971, 972, 977, 988, 990, 1004, 1017, 1023, 1028, 1031, 1032, 1036, 1037], "fact": [4, 11, 19, 25, 81, 86, 112, 125, 172, 233, 243, 347, 370, 383, 387, 389, 405, 407, 408, 409, 410, 642, 661, 663, 697, 974, 976, 983, 990, 994, 995, 1001, 1004, 1036], "smoother": [4, 5, 125, 171, 299, 408], "allow": [4, 20, 56, 58, 74, 75, 99, 100, 115, 116, 130, 152, 157, 159, 161, 194, 200, 204, 218, 222, 230, 233, 240, 242, 243, 246, 261, 279, 313, 314, 315, 316, 318, 339, 347, 356, 358, 362, 370, 374, 376, 377, 378, 380, 383, 385, 389, 390, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 430, 434, 436, 437, 438, 439, 440, 442, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 489, 516, 517, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 586, 587, 590, 596, 603, 604, 608, 620, 621, 623, 627, 628, 631, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 683, 685, 692, 754, 757, 766, 770, 773, 782, 783, 787, 788, 789, 790, 791, 792, 793, 796, 798, 800, 803, 807, 810, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 838, 839, 842, 843, 847, 849, 850, 852, 854, 855, 857, 858, 859, 864, 871, 872, 876, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 910, 912, 913, 923, 924, 944, 948, 969, 970, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 990, 992, 993, 994, 995, 996, 1000, 1001, 1004, 1006, 1019, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 106, 123, 132, 152, 156, 158, 160, 171, 184, 188, 189, 202, 208, 221, 223, 225, 226, 232, 251, 260, 261, 262, 272, 289, 290, 291, 308, 313, 319, 336, 337, 342, 347, 348, 352, 363, 373, 374, 376, 377, 378, 381, 382, 385, 387, 388, 389, 390, 399, 402, 404, 405, 407, 409, 410, 411, 413, 434, 437, 438, 439, 443, 444, 445, 446, 455, 524, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 551, 558, 575, 582, 603, 604, 640, 643, 646, 647, 648, 649, 651, 652, 664, 681, 700, 721, 722, 730, 774, 775, 776, 779, 780, 784, 789, 803, 834, 835, 836, 838, 840, 842, 843, 844, 865, 866, 871, 884, 885, 886, 900, 901, 903, 909, 928, 929, 931, 969, 970, 972, 975, 976, 977, 979, 980, 981, 984, 986, 990, 994, 995, 996, 999, 1001, 1004, 1006, 1008, 1010, 1011, 1013, 1014, 1015, 1022, 1029, 1030, 1031, 1032, 1034, 1036, 1037], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 95, 98, 100, 109, 111, 117, 118, 122, 124, 125, 126, 127, 145, 152, 155, 156, 157, 158, 159, 160, 165, 167, 169, 170, 171, 178, 179, 182, 184, 187, 198, 200, 201, 206, 208, 213, 214, 216, 218, 219, 221, 230, 232, 235, 236, 240, 242, 243, 251, 259, 261, 262, 263, 264, 269, 270, 275, 281, 297, 303, 313, 314, 316, 317, 319, 327, 331, 332, 333, 334, 335, 336, 340, 342, 344, 347, 348, 353, 358, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 387, 388, 389, 392, 396, 400, 402, 403, 404, 405, 407, 408, 410, 411, 413, 414, 430, 433, 436, 437, 438, 440, 441, 443, 445, 447, 450, 451, 452, 453, 454, 457, 458, 461, 462, 464, 465, 467, 471, 481, 482, 484, 485, 488, 490, 496, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 565, 568, 574, 575, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 600, 601, 602, 603, 604, 608, 610, 612, 613, 615, 616, 620, 621, 624, 625, 626, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 691, 692, 693, 695, 696, 697, 699, 704, 705, 709, 712, 714, 715, 716, 720, 724, 726, 727, 730, 732, 733, 734, 742, 747, 749, 753, 754, 755, 757, 760, 763, 766, 770, 771, 772, 773, 774, 775, 777, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 861, 862, 864, 868, 869, 870, 871, 872, 873, 876, 878, 881, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 910, 919, 921, 922, 923, 928, 929, 939, 940, 946, 947, 948, 950, 951, 954, 955, 964, 969, 970, 971, 973, 975, 977, 978, 981, 983, 984, 985, 986, 987, 988, 990, 993, 994, 996, 1000, 1001, 1002, 1006, 1009, 1010, 1011, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 129, 158, 170, 184, 189, 200, 216, 218, 225, 267, 272, 334, 358, 362, 363, 364, 370, 374, 376, 378, 380, 381, 387, 402, 404, 406, 410, 478, 496, 527, 817, 864, 969, 970, 976, 979, 980, 981, 986, 990, 993, 996, 997, 1001, 1006, 1014, 1015, 1028, 1029, 1033], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 176, 184, 283, 342, 349, 362, 398, 404, 410, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 799, 832, 833, 900, 901, 902, 903, 969, 980, 983, 996, 1004, 1009, 1013, 1025, 1026], "depth": [4, 111, 117, 122, 126, 128, 133, 352, 354, 355, 356, 362, 374, 376, 380, 388, 409, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 832, 833, 837, 900, 901, 902, 903, 904, 906, 934, 985, 986, 996, 1024, 1025, 1033], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 70, 71, 72, 73, 112, 118, 119, 123, 124, 130, 145, 146, 148, 153, 173, 176, 200, 204, 208, 215, 216, 248, 259, 260, 261, 262, 263, 265, 267, 276, 283, 289, 290, 291, 300, 305, 308, 319, 322, 323, 325, 334, 337, 358, 362, 378, 388, 389, 401, 402, 406, 409, 410, 411, 419, 430, 442, 462, 464, 465, 471, 525, 527, 534, 542, 543, 544, 546, 548, 550, 551, 552, 554, 557, 558, 560, 562, 603, 627, 651, 652, 659, 661, 664, 667, 668, 669, 685, 690, 696, 701, 706, 711, 726, 730, 735, 746, 755, 779, 784, 786, 816, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 834, 839, 841, 842, 849, 887, 888, 892, 894, 897, 900, 902, 928, 929, 969, 974, 975, 976, 977, 981, 983, 984, 988, 992, 994, 996, 1010, 1015, 1030, 1031], "On": [4, 12, 17, 26, 67, 71, 72, 85, 86, 100, 111, 112, 115, 117, 119, 120, 125, 128, 129, 132, 135, 144, 146, 156, 157, 170, 171, 172, 181, 188, 189, 202, 204, 230, 231, 232, 233, 235, 236, 240, 241, 242, 243, 246, 248, 251, 256, 257, 258, 259, 261, 262, 263, 264, 266, 268, 273, 300, 303, 305, 307, 308, 309, 314, 315, 317, 318, 324, 334, 356, 362, 374, 377, 378, 380, 387, 389, 396, 400, 402, 406, 407, 409, 411, 412, 636, 649, 684, 727, 753, 873, 969, 973, 976, 979, 980, 982, 986, 993, 995, 1010, 1013], "contrari": [4, 13, 170, 222, 226, 246, 264, 303, 347, 370, 402, 489, 537, 599, 806, 873, 976, 982, 986], "significantli": [4, 24, 25, 37, 78, 79, 112, 118, 123, 125, 149, 170, 171, 172, 200, 204, 208, 216, 218, 261, 281, 314, 315, 348, 349, 358, 363, 380, 402, 407, 409, 410, 415, 462, 467, 472, 473, 531, 533, 540, 551, 558, 639, 640, 645, 646, 653, 654, 655, 656, 677, 685, 832, 833, 972, 976, 977, 983, 988, 995, 1022, 1024, 1025, 1029, 1030, 1035, 1036, 1037], "over": [4, 7, 8, 9, 16, 20, 24, 26, 27, 31, 37, 50, 55, 56, 72, 74, 95, 115, 118, 128, 144, 148, 152, 160, 164, 169, 171, 182, 194, 200, 208, 218, 229, 261, 262, 264, 266, 268, 269, 270, 273, 286, 294, 297, 298, 305, 316, 317, 319, 322, 347, 348, 362, 363, 364, 371, 372, 375, 376, 377, 378, 382, 388, 389, 398, 400, 401, 402, 403, 406, 407, 408, 409, 410, 412, 414, 439, 442, 457, 465, 502, 526, 527, 529, 530, 531, 532, 539, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 581, 582, 584, 587, 595, 625, 626, 627, 637, 638, 639, 640, 645, 646, 651, 653, 654, 655, 656, 658, 659, 660, 661, 669, 670, 671, 678, 679, 690, 709, 711, 731, 755, 780, 783, 787, 789, 792, 793, 795, 800, 801, 803, 811, 813, 814, 815, 816, 817, 819, 848, 849, 850, 851, 867, 871, 892, 900, 902, 909, 918, 948, 969, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 996, 1000, 1001, 1004, 1011, 1014, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "compet": 4, "access": [4, 49, 78, 247, 252, 347, 356, 362, 363, 376, 377, 378, 384, 387, 389, 390, 402, 404, 405, 409, 410, 412, 443, 450, 457, 529, 560, 561, 562, 563, 610, 850, 851, 852, 907, 976, 979, 980, 986, 987, 988, 994, 995, 1001, 1004, 1006, 1014, 1015, 1022, 1024, 1028, 1029, 1030, 1031, 1034, 1036, 1037, 1038], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 102, 117, 118, 122, 126, 128, 132, 149, 171, 184, 189, 197, 200, 218, 221, 223, 230, 233, 236, 243, 262, 270, 272, 281, 283, 303, 308, 315, 316, 347, 348, 349, 370, 373, 374, 376, 378, 380, 382, 384, 387, 389, 390, 392, 393, 398, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 419, 430, 431, 432, 437, 439, 443, 445, 450, 455, 457, 460, 462, 475, 476, 477, 489, 501, 514, 517, 528, 534, 542, 543, 544, 546, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 565, 572, 573, 574, 603, 604, 612, 620, 625, 626, 627, 636, 651, 652, 659, 661, 664, 667, 668, 669, 670, 671, 679, 682, 684, 685, 686, 688, 692, 716, 721, 722, 734, 739, 741, 744, 755, 776, 779, 789, 792, 793, 796, 798, 803, 815, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 849, 852, 853, 854, 856, 866, 867, 868, 870, 872, 880, 884, 885, 887, 888, 892, 893, 894, 897, 900, 901, 902, 903, 940, 946, 966, 969, 974, 975, 976, 977, 980, 981, 982, 983, 984, 986, 987, 990, 994, 995, 996, 1001, 1006, 1013, 1015, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "geograph": [4, 11, 294, 371, 491], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 75, 132, 170, 257, 318, 980, 1037], "nrow": [4, 5, 32, 57, 66, 73, 95, 161, 171, 200, 202, 208, 218, 221, 222, 225, 263, 264, 281, 305, 307, 308, 318, 323, 341, 342, 1011], "ncol": [4, 5, 32, 53, 57, 66, 95, 100, 106, 171, 200, 201, 202, 208, 218, 221, 222, 232, 257, 263, 264, 272, 281, 298, 304, 305, 307, 308, 318, 341, 342, 348], "sharex": [4, 7, 14, 73, 92, 100, 133, 161, 171, 202, 239, 263, 286, 325, 1011], "sharei": [4, 75, 92, 100, 106, 133, 161, 171, 200, 202, 208, 239, 263, 272, 286, 304, 309, 341, 342, 348], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 75, 132, 170, 257, 318, 694], "residual_vs_predict": [4, 75, 257, 318, 694], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 75, 104, 118, 132, 144, 170, 171, 251, 255, 257, 270, 310, 315, 318, 331, 334, 347, 363, 364, 369, 371, 376, 378, 382, 387, 388, 400, 402, 405, 406, 407, 409, 410, 411, 481, 482, 496, 501, 502, 514, 517, 581, 625, 626, 694, 921, 976, 982, 987, 996, 1025, 1034, 1036, 1037], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 70, 79, 81, 82, 86, 96, 98, 105, 111, 115, 118, 123, 124, 126, 127, 138, 154, 156, 161, 173, 180, 182, 191, 200, 222, 223, 226, 229, 234, 238, 239, 246, 247, 248, 249, 251, 252, 256, 263, 264, 270, 271, 286, 290, 291, 293, 300, 305, 306, 322, 323, 325, 327, 332, 334, 341, 342, 347, 353, 371, 552, 553, 557, 558, 773, 790, 791, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810], "pred": [4, 7, 11, 32, 343, 347, 371, 641, 662, 673, 690, 695, 699, 711, 721, 722, 730, 775, 776, 779, 780, 980], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 55, 63, 64, 65, 75, 86, 92, 95, 96, 99, 104, 105, 106, 114, 116, 132, 133, 158, 164, 167, 170, 171, 172, 185, 191, 192, 200, 208, 209, 221, 233, 247, 251, 252, 259, 263, 264, 265, 268, 270, 281, 286, 289, 297, 298, 299, 305, 307, 308, 309, 326, 331, 342, 343, 353, 374, 409, 816, 990, 1015, 1018], "disp": [4, 32, 114, 128, 129, 255, 264, 276, 308, 314, 331, 336, 431, 624, 690, 693, 694, 841], "from_predict": [4, 32, 75, 132, 170, 239, 257, 268, 270, 316, 322, 347, 383, 431, 624, 691, 711, 719, 774, 776, 779, 780, 781, 980, 1019, 1035, 1036, 1037, 1038], "y_true": [4, 19, 32, 59, 75, 112, 132, 155, 200, 210, 218, 249, 325, 376, 425, 431, 432, 458, 475, 476, 477, 545, 547, 549, 550, 551, 553, 555, 557, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 690, 691, 693, 694, 695, 696, 700, 701, 702, 705, 706, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 774, 775, 776, 777, 779, 780, 781, 784, 786, 825, 826, 835, 843, 850, 893, 895, 898, 901, 903, 980, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 57, 62, 70, 75, 111, 112, 125, 126, 132, 146, 170, 200, 202, 207, 210, 215, 217, 218, 229, 230, 239, 257, 259, 264, 288, 292, 300, 308, 325, 326, 358, 376, 383, 389, 409, 425, 432, 458, 475, 476, 477, 542, 545, 547, 549, 550, 551, 553, 555, 557, 558, 560, 561, 563, 604, 624, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 690, 691, 693, 694, 695, 696, 701, 705, 706, 711, 714, 715, 716, 720, 721, 722, 726, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 775, 776, 777, 779, 780, 786, 789, 792, 793, 803, 813, 823, 825, 826, 835, 843, 850, 852, 892, 893, 894, 895, 896, 897, 898, 901, 903, 980, 982, 1011, 1028, 1029, 1031, 1033, 1037, 1038], "scatter_kwarg": [4, 75, 132, 170, 694], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 60, 64, 106, 130, 134, 171, 173, 191, 216, 234, 246, 272, 273, 279, 297, 299, 305, 306, 331], "num": [4, 12, 71, 149, 152, 157, 158, 159, 171, 172, 202, 268, 269, 317, 319, 625], "set_ytick": [4, 16, 31, 34, 43, 60, 64, 106, 130, 164, 165, 173, 191, 216, 246, 272, 297, 299, 305, 306, 331, 349], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 97, 99, 103, 104, 105, 111, 112, 114, 115, 116, 123, 124, 125, 126, 127, 129, 132, 134, 135, 139, 145, 152, 153, 159, 161, 170, 171, 182, 185, 190, 194, 200, 201, 202, 203, 206, 207, 210, 213, 214, 217, 218, 224, 232, 233, 234, 235, 237, 248, 249, 256, 259, 260, 261, 264, 265, 268, 271, 274, 275, 286, 287, 298, 304, 307, 308, 314, 317, 324, 333, 336, 341, 347, 353, 355, 803, 869, 881], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 111, 114, 115, 116, 124, 125, 126, 127, 132, 134, 145, 156, 158, 161, 170, 194, 200, 206, 207, 210, 214, 217, 218, 233, 237, 238, 260, 261, 262, 286, 287, 298, 308, 325, 333, 336, 341, 402, 408, 456, 581, 582, 584, 588, 606, 607, 608, 610, 612, 613, 615, 616, 618, 625, 626, 628, 630, 643, 647, 670, 727, 865, 866, 894, 895, 896, 916, 979, 980, 983, 990, 994, 995, 996, 1030], "bbox_to_anchor": [4, 37, 161, 266, 341], "set_aspect": [4, 155, 211, 248, 343], "equal": [4, 11, 12, 26, 37, 39, 53, 60, 80, 86, 112, 125, 155, 170, 201, 202, 211, 217, 240, 248, 251, 255, 259, 261, 270, 291, 305, 309, 334, 336, 343, 348, 371, 372, 376, 378, 389, 399, 400, 402, 406, 407, 409, 410, 415, 430, 433, 434, 435, 436, 438, 440, 442, 447, 452, 453, 456, 462, 467, 472, 473, 496, 505, 508, 512, 525, 526, 527, 532, 534, 536, 537, 542, 543, 544, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 581, 586, 587, 590, 592, 593, 600, 601, 618, 621, 622, 625, 626, 627, 628, 630, 634, 635, 638, 642, 651, 652, 664, 692, 696, 711, 713, 721, 760, 775, 779, 780, 784, 786, 789, 790, 792, 793, 802, 803, 807, 813, 820, 824, 825, 832, 833, 834, 835, 840, 841, 842, 843, 844, 849, 850, 855, 856, 857, 864, 867, 870, 871, 872, 873, 875, 882, 889, 892, 893, 899, 900, 901, 902, 903, 918, 929, 955, 961, 974, 976, 980, 981, 983, 984, 986, 990, 994, 995, 996, 1014, 1015, 1023, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "adjust": [4, 9, 36, 38, 49, 58, 68, 78, 112, 125, 167, 204, 229, 234, 242, 262, 313, 326, 342, 348, 383, 402, 407, 409, 410, 517, 546, 547, 550, 552, 554, 555, 557, 651, 652, 659, 661, 667, 668, 669, 697, 698, 701, 707, 708, 747, 749, 778, 785, 827, 828, 830, 831, 862, 884, 885, 892, 893, 894, 897, 900, 902, 918, 979, 980, 984, 990, 1013, 1019, 1022, 1028, 1038], "box": [4, 10, 30, 55, 171, 172, 222, 303, 307, 383, 407, 409, 505, 548, 549, 868, 880, 904, 906, 980, 981, 987, 990, 996, 1000, 1006, 1030, 1038], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 160, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 352, 353, 354, 355, 356, 363, 364, 376, 382, 387, 388, 392, 393, 399, 400, 404, 406, 407, 408, 409, 411, 412, 431, 495, 552, 586, 587, 624, 625, 690, 691, 693, 694, 695, 706, 795, 811, 904, 905, 906, 969, 974, 975, 977, 979, 980, 982, 983, 984, 986, 987, 990, 994, 995, 1001, 1010, 1011, 1015, 1024, 1026, 1027, 1029, 1031, 1032, 1033, 1034, 1036, 1039], "seem": [4, 9, 46, 55, 125, 171, 200, 225, 229, 262, 298, 307, 347, 348, 375, 376, 381, 406, 494, 976, 980], "regim": [4, 389, 892, 893, 979], "overal": [4, 43, 48, 112, 115, 118, 132, 157, 218, 258, 281, 308, 309, 348, 362, 375, 376, 382, 399, 400, 409, 412, 440, 442, 457, 464, 465, 471, 542, 873, 977, 980, 996, 1004, 1032], "closer": [4, 27, 37, 98, 100, 131, 149, 152, 171, 179, 204, 349, 400, 402, 407, 442, 546, 621, 705, 834, 835, 840, 842, 843, 844, 995, 1029], "diagon": [4, 25, 40, 82, 85, 218, 239, 248, 251, 252, 255, 334, 399, 402, 404, 412, 446, 464, 465, 471, 474, 504, 506, 520, 525, 543, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 643, 644, 647, 648, 649, 675, 676, 694, 708, 782, 787, 788, 836, 844, 974, 976, 979, 980, 983, 990, 1028, 1030, 1031, 1032], "obtain": [4, 7, 9, 12, 20, 27, 48, 55, 57, 58, 71, 74, 75, 100, 103, 112, 122, 125, 126, 130, 138, 149, 154, 156, 170, 171, 184, 200, 202, 204, 214, 225, 246, 247, 248, 257, 261, 262, 263, 267, 270, 308, 316, 332, 348, 349, 356, 358, 371, 373, 387, 389, 396, 400, 402, 404, 405, 407, 409, 410, 411, 412, 430, 435, 462, 489, 525, 526, 548, 549, 550, 551, 552, 553, 556, 557, 558, 586, 599, 607, 638, 652, 654, 659, 661, 665, 667, 669, 670, 680, 701, 705, 718, 731, 748, 783, 795, 811, 817, 820, 821, 824, 838, 849, 869, 881, 894, 897, 900, 901, 929, 970, 972, 974, 976, 977, 979, 980, 981, 983, 984, 986, 987, 990, 994, 995, 1028, 1030, 1033, 1035, 1036, 1037, 1038], "slightli": [4, 25, 64, 82, 115, 118, 122, 125, 128, 132, 149, 152, 153, 154, 172, 179, 200, 218, 224, 226, 236, 269, 281, 313, 331, 349, 375, 376, 387, 400, 402, 409, 410, 412, 414, 439, 581, 582, 584, 631, 651, 792, 793, 892, 894, 897, 928, 929, 969, 976, 990, 994, 995, 1031, 1035, 1036], "cost": [4, 39, 98, 118, 152, 167, 176, 221, 234, 263, 270, 313, 334, 348, 349, 351, 357, 376, 382, 384, 387, 402, 409, 471, 493, 530, 531, 532, 539, 550, 551, 552, 553, 557, 558, 595, 603, 612, 620, 639, 640, 645, 646, 653, 654, 655, 656, 661, 665, 667, 669, 671, 680, 681, 685, 818, 892, 893, 894, 897, 900, 901, 902, 903, 929, 972, 976, 977, 980, 983, 993, 994, 995, 1002, 1017, 1028, 1031, 1032], "durat": [4, 8, 200, 218, 283, 349, 363, 946, 947, 976], "regressor": [4, 75, 86, 126, 131, 132, 135, 152, 157, 165, 167, 170, 178, 180, 182, 184, 200, 203, 217, 218, 219, 236, 314, 315, 362, 376, 378, 387, 389, 400, 403, 412, 425, 429, 458, 475, 476, 477, 478, 517, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 558, 559, 560, 561, 562, 563, 598, 599, 602, 604, 625, 626, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 660, 662, 663, 665, 666, 671, 672, 694, 820, 821, 824, 825, 826, 835, 843, 848, 849, 850, 853, 859, 867, 872, 873, 893, 895, 898, 900, 901, 902, 903, 906, 921, 923, 969, 970, 976, 980, 981, 983, 988, 994, 1000, 1002, 1010, 1017, 1022, 1023, 1027, 1028, 1029, 1031, 1032, 1035, 1036, 1037], "mlpregressor": [4, 171, 240, 364, 848, 849, 984, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hidden": [4, 171, 299, 300, 376, 384, 399, 407, 848, 849, 850, 984, 985, 1000, 1022, 1033], "layer": [4, 167, 216, 240, 296, 299, 300, 301, 362, 384, 409, 507, 508, 515, 560, 818, 848, 849, 850, 853, 872, 985, 1002, 1017, 1028], "cyclic": [4, 639, 640, 645, 646, 653, 654, 655, 656, 1034], "within": [4, 20, 60, 117, 119, 120, 131, 146, 148, 149, 196, 201, 202, 212, 218, 240, 259, 260, 264, 274, 303, 304, 315, 332, 335, 342, 349, 358, 362, 371, 376, 380, 385, 387, 389, 390, 399, 400, 402, 403, 406, 408, 409, 413, 437, 441, 454, 456, 457, 462, 467, 508, 542, 560, 561, 562, 563, 586, 587, 625, 685, 689, 692, 703, 717, 773, 787, 788, 794, 795, 807, 808, 816, 817, 832, 833, 834, 835, 840, 842, 843, 844, 851, 852, 853, 865, 873, 877, 878, 880, 881, 882, 883, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 974, 976, 977, 983, 986, 990, 993, 995, 996, 1001, 1004, 1006, 1010, 1013, 1015, 1024, 1025, 1029, 1030, 1035, 1036], "finer": [4, 37, 283, 334, 363, 402, 406, 969, 983, 1032], "resolut": [4, 11, 17, 105, 171, 293, 294, 334, 390, 400, 1006, 1032], "taken": [4, 7, 31, 42, 53, 55, 127, 149, 157, 170, 233, 234, 249, 267, 305, 371, 373, 375, 376, 380, 389, 396, 401, 402, 406, 410, 412, 414, 433, 526, 576, 577, 639, 640, 643, 645, 646, 647, 651, 652, 653, 654, 655, 656, 670, 672, 674, 677, 688, 865, 866, 886, 889, 895, 896, 939, 980, 982, 990, 992, 1028, 1031, 1034, 1035], "everi": [4, 95, 164, 198, 201, 222, 235, 247, 252, 270, 316, 358, 371, 374, 376, 378, 380, 384, 389, 402, 404, 406, 407, 410, 433, 447, 501, 524, 529, 532, 538, 550, 552, 553, 557, 583, 584, 596, 639, 640, 642, 645, 646, 652, 653, 654, 655, 656, 657, 658, 659, 661, 665, 666, 667, 668, 669, 678, 679, 680, 685, 689, 746, 763, 771, 772, 802, 841, 900, 902, 904, 906, 918, 973, 975, 980, 981, 982, 990, 996, 1004, 1010, 1022, 1026, 1028, 1031, 1035], "offer": [4, 118, 378, 384, 387, 388, 392, 406, 407, 409, 410, 969, 970, 981, 984, 996, 1000, 1001, 1004, 1028], "view": [4, 16, 30, 42, 46, 78, 97, 171, 197, 241, 362, 364, 376, 402, 410, 529, 638, 650, 832, 833, 907, 976, 977], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 55, 57, 61, 78, 79, 80, 81, 82, 91, 96, 97, 98, 105, 113, 114, 125, 128, 162, 165, 179, 184, 190, 229, 233, 248, 249, 253, 286, 294, 307, 331, 365, 368, 372, 378, 381, 389, 402, 404, 407, 408, 414, 445, 462, 463, 464, 465, 466, 467, 468, 469, 489, 497, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518, 523, 525, 537, 542, 543, 556, 603, 604, 606, 607, 608, 610, 611, 612, 615, 616, 618, 620, 636, 637, 665, 670, 673, 696, 716, 733, 744, 768, 787, 788, 789, 803, 827, 828, 829, 830, 831, 832, 833, 837, 868, 872, 880, 884, 885, 886, 974, 976, 977, 978, 986, 1002, 1004, 1014, 1016, 1017, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1032, 1034, 1036], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 71, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 103, 110, 113, 115, 117, 119, 120, 121, 124, 125, 127, 128, 129, 132, 135, 136, 141, 144, 145, 148, 152, 153, 156, 158, 159, 161, 164, 165, 167, 168, 169, 174, 179, 180, 181, 182, 184, 189, 190, 194, 195, 198, 199, 200, 201, 202, 203, 206, 207, 209, 213, 214, 217, 218, 221, 222, 224, 225, 226, 228, 229, 234, 235, 236, 238, 239, 244, 246, 247, 249, 250, 251, 252, 254, 256, 258, 261, 262, 264, 266, 268, 270, 271, 272, 273, 275, 277, 279, 281, 286, 287, 288, 293, 297, 304, 306, 307, 310, 314, 315, 317, 319, 322, 323, 326, 327, 333, 334, 336, 337, 339, 340, 341, 342, 344, 347, 348, 354, 355, 362, 363, 365, 368, 372, 379, 381, 387, 388, 389, 393, 397, 398, 400, 402, 410, 411, 427, 433, 436, 440, 442, 444, 445, 446, 447, 451, 452, 453, 455, 457, 462, 463, 464, 465, 466, 467, 468, 469, 481, 482, 483, 484, 485, 488, 489, 490, 495, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 528, 529, 531, 532, 533, 534, 537, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 575, 576, 577, 582, 600, 601, 603, 604, 620, 623, 625, 627, 632, 633, 634, 635, 636, 639, 640, 642, 643, 645, 646, 647, 651, 653, 654, 655, 656, 663, 664, 665, 669, 670, 671, 672, 682, 683, 684, 685, 686, 687, 688, 694, 697, 698, 701, 723, 735, 773, 783, 787, 788, 789, 791, 792, 793, 794, 801, 803, 804, 805, 806, 807, 808, 809, 810, 817, 818, 823, 825, 826, 827, 828, 829, 831, 832, 833, 837, 841, 848, 849, 850, 852, 855, 857, 866, 869, 873, 881, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 915, 928, 929, 951, 954, 970, 972, 975, 977, 979, 980, 984, 985, 986, 988, 990, 995, 996, 1000, 1001, 1002, 1006, 1010, 1011, 1013, 1014, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "constant": [4, 105, 115, 155, 159, 165, 170, 188, 201, 202, 204, 218, 231, 236, 241, 264, 293, 298, 300, 304, 306, 314, 342, 344, 358, 368, 378, 385, 389, 399, 409, 412, 425, 439, 458, 475, 476, 477, 504, 506, 527, 531, 533, 540, 542, 543, 544, 545, 547, 549, 551, 553, 555, 558, 561, 563, 583, 599, 602, 604, 606, 620, 623, 625, 626, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 673, 680, 682, 686, 688, 714, 715, 716, 720, 767, 769, 777, 825, 826, 835, 843, 849, 850, 857, 868, 871, 880, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 974, 976, 977, 980, 982, 983, 990, 994, 996, 1017, 1025, 1030, 1032, 1034, 1035, 1036, 1038], "varianc": [4, 5, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 95, 96, 97, 100, 103, 104, 106, 110, 127, 136, 159, 161, 167, 170, 178, 180, 184, 189, 200, 202, 205, 218, 219, 251, 258, 261, 264, 270, 271, 274, 290, 297, 303, 308, 348, 358, 368, 372, 385, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 412, 414, 434, 438, 442, 456, 514, 517, 525, 526, 527, 534, 537, 542, 543, 548, 549, 551, 552, 553, 558, 596, 600, 601, 604, 618, 636, 637, 638, 645, 649, 650, 653, 655, 665, 666, 667, 668, 669, 680, 703, 720, 777, 787, 788, 830, 841, 856, 862, 868, 870, 872, 878, 880, 882, 883, 901, 903, 955, 956, 957, 961, 974, 975, 976, 978, 983, 984, 985, 992, 994, 995, 996, 997, 1002, 1011, 1013, 1014, 1017, 1022, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "poisson": [4, 167, 178, 219, 237, 372, 409, 457, 458, 489, 516, 545, 551, 555, 558, 641, 662, 665, 673, 699, 716, 737, 741, 742, 744, 818, 852, 853, 856, 857, 865, 866, 867, 872, 901, 903, 933, 976, 996, 1032, 1033, 1034, 1035, 1036, 1038, 1039], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 133, 141, 176, 214, 229, 234, 235, 259, 261, 263, 266, 272, 276, 315, 322, 323, 325, 327, 331, 333, 334, 337, 338, 340, 341, 344, 405, 407, 412, 445, 528, 555, 612, 613, 632, 633, 634, 636, 637, 638, 641, 673, 678, 684, 716, 739, 744, 751, 758, 767, 768, 769, 787, 800, 803, 887, 888, 889, 894, 895, 896, 897, 898, 969, 972, 975, 976, 978, 993, 995, 1006, 1010, 1011, 1013, 1022, 1023, 1025, 1026, 1027, 1029, 1030, 1032, 1033, 1036, 1037, 1038], "achiev": [4, 12, 17, 19, 27, 31, 98, 112, 121, 123, 130, 160, 176, 200, 208, 258, 261, 268, 308, 325, 334, 337, 342, 347, 358, 362, 364, 370, 371, 373, 378, 382, 387, 389, 399, 400, 402, 406, 407, 409, 410, 546, 551, 558, 633, 642, 669, 671, 700, 732, 755, 792, 793, 828, 872, 969, 970, 972, 976, 980, 990, 993, 995, 1003, 1015, 1035], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 103, 118, 167, 235, 241, 251, 254, 259, 260, 261, 262, 266, 269, 272, 277, 283, 285, 300, 305, 315, 319, 334, 358, 363, 378, 387, 389, 393, 403, 406, 412, 495, 513, 533, 534, 568, 592, 600, 646, 696, 734, 800, 803, 852, 862, 892, 900, 948, 969, 976, 980, 984, 994, 995, 1000, 1001, 1010, 1011, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1039], "tweedieregressor": [4, 314, 317, 641, 662, 976, 1033, 1036, 1037], "power": [4, 7, 17, 118, 123, 169, 201, 218, 252, 264, 269, 285, 303, 304, 307, 322, 331, 362, 363, 388, 400, 402, 405, 408, 409, 410, 413, 437, 475, 476, 477, 525, 528, 534, 537, 623, 673, 687, 716, 739, 741, 744, 834, 835, 842, 843, 845, 846, 867, 868, 869, 880, 881, 928, 929, 976, 977, 980, 988, 990, 994, 995, 1004, 1025, 1028, 1030, 1032, 1033, 1035, 1039], "param_grid": [4, 6, 71, 72, 73, 74, 118, 125, 235, 241, 251, 259, 260, 261, 265, 266, 269, 272, 283, 305, 334, 389, 393, 403, 409, 734, 789, 792, 800, 801, 948, 969, 980, 1010, 1011], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 353, 354, 355, 356, 357, 363, 370, 371, 373, 382, 389, 399, 402, 408, 410, 413, 425, 437, 458, 475, 476, 477, 481, 482, 483, 484, 485, 486, 487, 488, 490, 493, 494, 495, 497, 498, 503, 505, 507, 508, 512, 515, 516, 529, 530, 537, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 563, 576, 577, 583, 587, 589, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 669, 670, 671, 672, 690, 697, 698, 706, 721, 722, 723, 726, 730, 731, 749, 761, 775, 776, 779, 784, 785, 786, 789, 803, 813, 814, 815, 825, 826, 827, 828, 835, 837, 843, 850, 867, 871, 893, 895, 898, 900, 901, 902, 903, 929, 969, 976, 977, 980, 981, 982, 983, 990, 994, 995, 996, 1011, 1015, 1023, 1028, 1030, 1038], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 363, 376, 377, 378, 379, 380, 382, 387, 389, 392, 410, 1001, 1003, 1015], "819": [4, 15, 176, 177, 410], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 358, 362, 371, 378, 380, 382, 389, 399, 402, 406, 407, 409, 410, 412, 457, 460, 481, 483, 484, 485, 487, 489, 493, 495, 497, 503, 546, 576, 581, 582, 583, 584, 614, 617, 624, 625, 692, 705, 709, 750, 751, 755, 756, 758, 759, 766, 767, 768, 769, 770, 773, 789, 792, 793, 803, 816, 822, 823, 826, 829, 840, 842, 843, 844, 849, 850, 969, 970, 974, 975, 976, 977, 980, 981, 982, 983, 984, 987, 990, 991, 996, 1006, 1012, 1014, 1037], "plot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 363, 374, 376, 377, 380, 382, 384, 389, 392, 410, 413, 433, 437, 447, 454, 458, 491, 523, 637, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 861, 862, 864, 867, 868, 869, 870, 871, 872, 877, 878, 879, 880, 881, 882, 883, 924, 980, 1000, 1013, 1015, 1022, 1024, 1028, 1032, 1036], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 377, 403, 461, 890, 996, 1000, 1001, 1033, 1036], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 371, 376, 378, 389, 392, 395, 1011, 1022, 1026, 1029], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 352, 353, 354, 355, 356, 376, 380, 389, 392, 395, 1015, 1022, 1029], "kernelpca": [5, 403, 407, 526, 527, 534, 537, 681, 683, 685, 858, 990, 1023, 1024, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "take": [5, 8, 20, 27, 30, 46, 53, 55, 57, 66, 75, 80, 90, 92, 95, 112, 121, 152, 154, 157, 161, 170, 176, 183, 204, 208, 209, 225, 236, 248, 249, 256, 262, 266, 270, 271, 279, 281, 284, 287, 288, 289, 291, 292, 303, 317, 325, 330, 331, 334, 344, 348, 349, 353, 362, 363, 364, 370, 371, 374, 376, 378, 381, 382, 383, 384, 387, 389, 390, 400, 402, 403, 405, 406, 407, 409, 410, 411, 412, 414, 430, 436, 439, 440, 442, 443, 445, 450, 451, 452, 454, 456, 462, 512, 526, 531, 532, 533, 539, 540, 574, 585, 588, 589, 591, 592, 593, 603, 604, 609, 613, 614, 617, 625, 636, 642, 664, 666, 667, 668, 669, 672, 684, 685, 692, 698, 700, 702, 712, 721, 722, 730, 734, 735, 748, 763, 766, 770, 771, 772, 773, 775, 776, 779, 780, 789, 790, 794, 795, 803, 807, 816, 834, 835, 836, 838, 840, 841, 842, 843, 844, 856, 866, 887, 888, 892, 893, 894, 895, 896, 897, 898, 916, 950, 969, 972, 976, 977, 979, 980, 981, 983, 985, 986, 987, 990, 995, 996, 1004, 1006, 1010, 1012, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "exact": [5, 7, 82, 100, 118, 157, 204, 234, 281, 358, 362, 363, 370, 376, 378, 385, 387, 388, 389, 402, 409, 411, 412, 427, 475, 476, 477, 481, 489, 527, 528, 534, 554, 555, 631, 635, 639, 685, 789, 803, 813, 814, 815, 894, 897, 969, 972, 976, 977, 986, 990, 994, 995, 1029, 1030, 1032], "usp": 5, "digit": [5, 29, 35, 36, 51, 68, 72, 88, 93, 137, 142, 147, 149, 167, 191, 207, 216, 220, 225, 227, 233, 234, 259, 260, 263, 285, 290, 296, 298, 299, 301, 319, 321, 328, 369, 376, 382, 402, 408, 409, 411, 434, 438, 440, 495, 534, 537, 542, 559, 651, 681, 682, 683, 684, 685, 690, 697, 698, 706, 710, 711, 729, 783, 785, 814, 818, 834, 841, 848, 852, 853, 862, 872, 878, 885, 888, 897, 904, 905, 906, 969, 975, 977, 980, 983, 985, 993, 1006, 1010, 1013, 1014, 1017, 1026], "reproduc": [5, 12, 60, 112, 170, 176, 188, 270, 300, 363, 365, 375, 376, 378, 379, 384, 387, 389, 396, 402, 406, 407, 410, 414, 433, 447, 453, 462, 467, 481, 484, 485, 488, 490, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 544, 546, 547, 548, 549, 552, 553, 554, 555, 556, 600, 601, 603, 604, 627, 632, 633, 634, 635, 639, 640, 643, 645, 646, 647, 653, 654, 655, 656, 659, 660, 661, 664, 669, 671, 672, 682, 683, 685, 686, 687, 783, 787, 788, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 816, 817, 818, 822, 823, 826, 837, 841, 848, 849, 850, 857, 869, 873, 881, 884, 885, 892, 893, 894, 897, 928, 929, 951, 954, 972, 1000, 1003, 1022, 1030, 1035, 1036], "sect": 5, "bak\u0131r": [5, 407, 528], "g\u00f6khan": [5, 407, 528], "h": [5, 6, 48, 58, 95, 96, 111, 112, 113, 130, 149, 154, 170, 248, 286, 289, 297, 305, 317, 327, 330, 349, 373, 382, 400, 402, 404, 407, 408, 409, 410, 413, 437, 512, 525, 528, 531, 533, 540, 546, 560, 561, 575, 583, 600, 601, 682, 686, 697, 701, 749, 827, 831, 832, 833, 838, 848, 863, 872, 972, 974, 976, 977, 978, 980, 982, 984, 985, 994, 996, 1011, 1028, 1033, 1037, 1038, 1039], "jason": [5, 407, 528, 888, 1028, 1030, 1034, 1037], "weston": [5, 407, 528, 586, 587, 888], "bernhard": [5, 407, 528, 823, 858, 888, 981, 986, 995, 1028], "sch\u00f6lkopf": [5, 407, 528, 858, 986, 990, 995], "pre": [5, 71, 122, 170, 189, 303, 349, 365, 374, 376, 389, 392, 404, 406, 407, 409, 410, 411, 413, 414, 436, 437, 440, 452, 526, 528, 683, 705, 755, 855, 897, 980, 985, 990, 995, 996, 1000, 1001, 1017, 1025, 1030, 1036], "advanc": [5, 167, 228, 230, 244, 261, 364, 402, 407, 482, 494, 528, 625, 632, 775, 787, 841, 850, 853, 872, 901, 972, 980, 983, 990, 1004, 1019, 1024], "neural": [5, 6, 31, 261, 299, 365, 387, 389, 396, 406, 407, 409, 414, 526, 528, 531, 533, 540, 560, 561, 632, 638, 689, 733, 787, 841, 848, 849, 850, 858, 972, 976, 977, 978, 980, 983, 986, 990, 994, 996, 1000, 1002, 1004, 1011, 1016, 1017, 1022, 1034], "system": [5, 100, 184, 261, 268, 358, 362, 363, 364, 371, 373, 376, 377, 378, 379, 384, 387, 392, 402, 407, 409, 413, 437, 464, 465, 471, 528, 532, 536, 543, 632, 638, 643, 644, 647, 648, 649, 675, 676, 718, 748, 761, 787, 841, 887, 888, 948, 976, 980, 983, 992, 1000, 1001, 1004, 1015, 1022, 1030, 1031], "2004": [5, 149, 261, 371, 373, 402, 404, 407, 466, 528, 600, 601, 682, 686, 698, 735, 775, 888, 974, 976, 977, 982, 995, 1013], "449": [5, 407, 528], "456": [5, 407, 528], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 101, 103, 106, 109, 111, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 200, 201, 202, 204, 205, 207, 208, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 249, 260, 262, 264, 265, 267, 274, 279, 281, 283, 286, 293, 294, 297, 300, 303, 304, 306, 307, 308, 322, 323, 324, 325, 327, 342, 347, 348, 349, 370, 376, 380, 384, 387, 389, 390, 406, 444, 527, 859, 972, 998, 1000, 1025], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 118, 158, 179, 184, 185, 187, 191, 193, 194, 205, 222, 223, 229, 232, 262, 264, 267, 274, 293, 308, 342, 347, 348, 349, 524, 530, 651, 657, 678, 679, 750, 751, 978, 980], "licenc": [5, 370], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 262, 265, 267, 274, 279, 281, 283, 289, 290, 291, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 322, 323, 324, 325, 327, 338, 339, 342, 343, 347, 348, 349, 382], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 229, 234, 235, 237, 239, 246, 248, 262, 267, 274, 279, 281, 283, 289, 290, 291, 293, 294, 297, 303, 304, 305, 306, 307, 308, 338, 339, 342, 343, 347, 348, 349], "normal": [5, 12, 17, 19, 20, 26, 29, 34, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 101, 112, 113, 115, 118, 124, 125, 128, 129, 144, 155, 158, 159, 165, 167, 169, 170, 178, 179, 180, 181, 182, 184, 190, 193, 195, 198, 202, 203, 204, 206, 214, 219, 224, 239, 246, 251, 252, 255, 258, 261, 267, 286, 287, 302, 304, 308, 311, 314, 317, 325, 334, 348, 349, 358, 365, 368, 371, 372, 373, 376, 381, 385, 388, 389, 399, 400, 402, 403, 405, 408, 409, 410, 414, 433, 442, 444, 445, 446, 455, 457, 458, 468, 475, 476, 477, 482, 489, 505, 508, 512, 519, 520, 526, 529, 534, 535, 537, 541, 542, 545, 546, 547, 550, 551, 552, 553, 555, 556, 557, 558, 559, 572, 573, 575, 581, 582, 583, 584, 604, 618, 620, 632, 643, 644, 647, 648, 649, 651, 652, 657, 658, 662, 665, 669, 673, 680, 684, 688, 690, 696, 697, 699, 711, 716, 718, 726, 728, 733, 737, 741, 742, 744, 747, 748, 749, 753, 762, 784, 785, 786, 792, 793, 818, 820, 829, 831, 837, 838, 841, 852, 853, 856, 857, 860, 861, 862, 865, 866, 867, 868, 869, 870, 872, 877, 878, 880, 881, 882, 883, 887, 888, 900, 901, 902, 903, 928, 929, 933, 956, 957, 962, 963, 969, 974, 976, 977, 978, 979, 982, 986, 991, 993, 995, 996, 1011, 1013, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "pixel": [5, 6, 13, 20, 32, 47, 48, 53, 95, 110, 136, 147, 167, 176, 233, 259, 299, 300, 373, 402, 407, 409, 410, 411, 486, 487, 488, 557, 578, 579, 600, 601, 627, 983, 985, 996, 1011, 1014], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 71, 75, 86, 100, 111, 112, 117, 119, 123, 124, 125, 126, 127, 128, 131, 145, 146, 169, 170, 172, 173, 176, 184, 195, 200, 207, 208, 215, 216, 218, 230, 242, 243, 255, 258, 259, 264, 268, 270, 274, 279, 289, 290, 297, 299, 300, 305, 307, 308, 310, 313, 314, 315, 326, 352, 356, 358, 381, 388, 403, 406, 409, 430, 431, 551, 553, 560, 561, 690, 691, 693, 695, 789, 820, 823, 841, 849, 850, 852, 902, 903, 969, 970, 980, 982, 983, 988, 990, 995, 1011, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1035], "data_id": [5, 122, 157, 170, 200, 218, 230, 309, 370, 489], "41082": 5, "return_x_i": [5, 7, 14, 58, 70, 71, 72, 73, 95, 118, 122, 123, 135, 138, 139, 140, 145, 164, 165, 172, 176, 185, 187, 188, 189, 191, 196, 197, 207, 215, 216, 230, 238, 242, 243, 257, 260, 263, 268, 269, 276, 279, 283, 290, 298, 299, 300, 308, 313, 315, 317, 318, 319, 325, 337, 349, 352, 369, 381, 382, 388, 396, 402, 403, 406, 409, 411, 439, 481, 482, 483, 484, 485, 487, 488, 489, 490, 493, 494, 495, 497, 498, 503, 525, 526, 527, 528, 551, 554, 555, 560, 561, 585, 588, 589, 591, 592, 593, 595, 603, 612, 613, 615, 616, 631, 632, 651, 652, 661, 666, 667, 668, 681, 682, 683, 684, 694, 780, 792, 793, 795, 820, 825, 836, 841, 844, 901, 902, 903, 970, 975, 980, 981, 982, 983, 990, 1006, 1010, 1011, 1013, 1014, 1019, 1028, 1030, 1032, 1035], "idea": [5, 53, 80, 81, 118, 149, 157, 170, 201, 221, 286, 334, 352, 362, 363, 376, 381, 382, 404, 405, 406, 407, 408, 409, 411, 600, 601, 976, 977, 980, 983, 986, 999, 1004, 1015], "noisi": [5, 33, 49, 55, 62, 96, 112, 145, 152, 158, 184, 199, 202, 224, 232, 252, 262, 268, 270, 271, 308, 354, 355, 358, 402, 410, 413, 437, 439, 443, 514, 517, 929, 975, 977, 983, 995, 1000], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 55, 57, 61, 66, 68, 71, 72, 75, 79, 80, 95, 97, 98, 105, 113, 118, 128, 131, 134, 153, 157, 160, 161, 170, 171, 173, 176, 179, 180, 182, 184, 186, 190, 191, 192, 194, 199, 200, 201, 202, 204, 209, 210, 211, 213, 215, 216, 218, 223, 224, 226, 232, 233, 234, 235, 236, 240, 246, 248, 252, 256, 257, 259, 261, 264, 266, 271, 272, 275, 286, 287, 288, 300, 304, 305, 307, 309, 310, 316, 326, 327, 332, 333, 335, 336, 337, 341, 342, 344, 347, 348, 352, 355, 356, 362, 364, 371, 373, 376, 378, 381, 382, 393, 399, 402, 403, 406, 407, 408, 409, 410, 430, 434, 438, 442, 464, 465, 471, 483, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 521, 523, 524, 527, 529, 530, 532, 537, 538, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 603, 624, 625, 626, 632, 633, 634, 635, 639, 640, 641, 642, 645, 646, 651, 652, 653, 654, 655, 656, 658, 660, 662, 664, 673, 674, 677, 681, 682, 683, 684, 686, 738, 787, 788, 791, 816, 817, 822, 827, 828, 829, 831, 832, 833, 837, 849, 850, 868, 870, 873, 882, 969, 970, 973, 977, 980, 981, 987, 990, 992, 1006, 1010, 1014, 1015, 1030, 1031, 1032, 1035, 1036], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 103, 113, 115, 125, 129, 130, 151, 152, 157, 162, 167, 179, 181, 182, 184, 189, 190, 195, 198, 199, 202, 203, 204, 205, 217, 224, 226, 229, 231, 232, 235, 261, 269, 274, 275, 293, 297, 298, 305, 310, 314, 341, 354, 355, 358, 372, 378, 381, 400, 402, 407, 409, 411, 413, 437, 439, 445, 504, 506, 507, 508, 509, 510, 511, 515, 517, 518, 523, 525, 527, 534, 600, 601, 604, 606, 607, 608, 609, 610, 614, 615, 617, 618, 637, 638, 642, 643, 644, 646, 647, 648, 649, 656, 657, 658, 664, 672, 685, 869, 881, 887, 973, 975, 976, 977, 980, 983, 993, 1013, 1014, 1023, 1028, 1033, 1035, 1036], "approach": [5, 8, 58, 63, 66, 99, 149, 152, 164, 170, 173, 182, 188, 200, 202, 208, 218, 221, 309, 347, 348, 349, 364, 375, 376, 382, 385, 389, 392, 396, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 430, 436, 439, 441, 445, 455, 513, 525, 575, 582, 628, 651, 652, 667, 668, 821, 837, 929, 969, 970, 976, 977, 980, 981, 983, 984, 990, 994, 995, 999, 1000, 1004, 1008, 1013, 1014, 1026, 1038], "copi": [5, 12, 17, 44, 62, 75, 98, 115, 149, 164, 165, 170, 171, 172, 186, 193, 206, 216, 218, 222, 281, 322, 323, 325, 327, 348, 353, 363, 373, 376, 378, 380, 381, 382, 387, 389, 427, 430, 433, 435, 436, 437, 439, 440, 442, 447, 452, 475, 476, 477, 478, 493, 495, 503, 525, 526, 527, 528, 534, 541, 546, 547, 552, 554, 555, 565, 583, 590, 600, 601, 603, 604, 621, 623, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 664, 665, 667, 672, 674, 677, 678, 679, 724, 761, 782, 789, 803, 832, 833, 847, 855, 858, 861, 862, 863, 864, 868, 869, 870, 872, 875, 877, 878, 879, 880, 881, 882, 883, 887, 888, 892, 894, 895, 896, 897, 898, 907, 910, 912, 913, 939, 951, 953, 954, 990, 995, 996, 1001, 1007, 1010, 1015, 1022, 1025, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "add": [5, 12, 16, 17, 20, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 121, 124, 145, 149, 152, 157, 158, 159, 164, 165, 182, 189, 195, 201, 203, 204, 215, 224, 229, 233, 235, 236, 268, 270, 271, 281, 293, 305, 307, 313, 315, 316, 337, 341, 342, 348, 362, 374, 375, 376, 377, 378, 380, 382, 384, 389, 392, 398, 400, 406, 409, 410, 411, 508, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 595, 620, 621, 623, 625, 651, 652, 687, 690, 810, 832, 833, 889, 919, 948, 969, 970, 979, 986, 990, 993, 994, 1001, 1013, 1014, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "corrupt": [5, 103, 184, 206, 217, 387, 848, 976, 988], "uncorrupt": 5, "base": [5, 12, 14, 17, 20, 25, 26, 27, 49, 56, 57, 58, 67, 70, 71, 75, 80, 95, 96, 109, 111, 112, 113, 118, 124, 125, 126, 130, 132, 135, 143, 146, 150, 152, 157, 158, 160, 171, 172, 173, 178, 189, 200, 201, 208, 217, 218, 219, 221, 229, 236, 237, 258, 259, 264, 281, 294, 300, 303, 304, 306, 308, 315, 317, 327, 332, 348, 352, 362, 363, 365, 370, 371, 372, 373, 374, 377, 378, 379, 384, 389, 390, 391, 400, 403, 407, 408, 410, 412, 413, 414, 430, 437, 439, 440, 441, 442, 443, 445, 449, 450, 454, 456, 457, 458, 459, 460, 480, 493, 494, 501, 502, 525, 526, 528, 529, 530, 531, 532, 534, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 571, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 600, 601, 603, 604, 609, 610, 611, 614, 617, 625, 626, 628, 629, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 657, 662, 664, 665, 666, 667, 668, 673, 675, 676, 678, 679, 680, 683, 685, 697, 710, 718, 727, 728, 729, 731, 733, 747, 748, 749, 777, 780, 785, 789, 791, 792, 793, 795, 796, 798, 803, 807, 808, 809, 810, 816, 818, 822, 823, 826, 834, 835, 836, 838, 840, 842, 843, 844, 849, 850, 853, 854, 857, 864, 865, 867, 871, 872, 873, 881, 884, 885, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 915, 923, 948, 949, 969, 971, 972, 974, 975, 977, 980, 981, 982, 983, 984, 985, 986, 987, 990, 992, 993, 994, 995, 996, 999, 1000, 1001, 1004, 1010, 1015, 1017, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033], "solv": [5, 6, 66, 152, 189, 234, 261, 375, 376, 377, 378, 381, 387, 402, 404, 406, 407, 412, 440, 446, 455, 471, 524, 530, 531, 532, 536, 538, 539, 540, 541, 628, 630, 639, 645, 647, 648, 657, 658, 663, 665, 667, 670, 678, 679, 680, 822, 892, 893, 896, 929, 971, 974, 976, 977, 980, 981, 994, 995, 996, 999, 1000, 1004, 1008, 1011, 1015, 1028, 1032, 1035], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 180, 184, 195, 197, 198, 201, 207, 208, 214, 215, 216, 218, 230, 238, 242, 243, 248, 250, 255, 258, 259, 264, 268, 270, 274, 279, 287, 289, 290, 297, 299, 300, 305, 307, 308, 310, 313, 314, 315, 325, 326, 333, 347, 352, 356, 358, 362, 370, 378, 381, 388, 403, 406, 409, 430, 431, 502, 551, 552, 553, 560, 561, 690, 691, 693, 695, 818, 820, 823, 841, 849, 850, 852, 866, 902, 903, 970, 980, 982, 983, 984, 986, 988, 990, 994, 995, 1010, 1011, 1019], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 112, 115, 117, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 157, 160, 169, 170, 171, 172, 173, 176, 180, 184, 190, 195, 197, 198, 206, 207, 208, 214, 215, 216, 218, 230, 232, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 275, 279, 287, 289, 290, 297, 299, 300, 305, 307, 308, 310, 313, 314, 315, 325, 326, 333, 347, 352, 354, 355, 356, 358, 362, 370, 378, 381, 388, 403, 406, 409, 431, 463, 464, 465, 466, 467, 468, 469, 502, 551, 552, 553, 560, 561, 690, 691, 693, 695, 818, 820, 823, 841, 849, 850, 852, 866, 902, 903, 970, 980, 982, 983, 984, 986, 990, 994, 995, 996, 1010, 1011, 1013, 1019, 1022], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 180, 184, 195, 197, 198, 201, 207, 208, 215, 216, 230, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 279, 289, 290, 297, 299, 300, 305, 308, 310, 313, 314, 315, 322, 323, 325, 326, 327, 347, 352, 356, 358, 362, 370, 378, 381, 388, 403, 406, 409, 430, 431, 551, 552, 553, 560, 561, 690, 691, 693, 695, 818, 820, 823, 841, 849, 850, 852, 902, 903, 970, 980, 982, 983, 988, 990, 995, 1010, 1011, 1019], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 112, 115, 117, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 160, 169, 170, 171, 172, 173, 176, 184, 195, 197, 200, 206, 207, 208, 215, 216, 218, 230, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 279, 289, 290, 297, 299, 300, 305, 308, 310, 313, 314, 315, 325, 326, 347, 352, 356, 358, 370, 381, 388, 403, 406, 409, 431, 551, 552, 553, 560, 561, 690, 691, 693, 695, 818, 820, 823, 841, 849, 850, 852, 902, 903, 980, 982, 983, 990, 995, 1010, 1011, 1019, 1022], "stratifi": [5, 100, 119, 128, 145, 172, 215, 230, 243, 256, 261, 264, 270, 289, 290, 313, 378, 389, 544, 552, 560, 561, 595, 652, 659, 661, 669, 789, 792, 793, 795, 803, 804, 805, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 826, 841, 849, 951, 980, 983, 1010, 1027, 1028, 1029, 1031, 1032, 1035], "train_siz": [5, 7, 10, 112, 131, 153, 176, 216, 235, 263, 274, 315, 318, 342, 791, 795, 806, 809, 816, 818, 975, 1010, 1022, 1023, 1028, 1029], "1_000": [5, 48, 72, 100, 152, 157, 159, 171, 233, 258, 694, 811], "rng": [5, 20, 21, 31, 37, 50, 81, 86, 95, 97, 103, 113, 125, 128, 129, 131, 152, 153, 156, 158, 159, 161, 164, 165, 169, 172, 179, 180, 181, 182, 184, 189, 194, 201, 202, 207, 214, 229, 235, 236, 238, 239, 246, 256, 264, 267, 272, 273, 297, 307, 310, 314, 315, 317, 319, 322, 323, 327, 337, 342, 354, 355, 358, 363, 378, 381, 393, 463, 467, 468, 469, 636, 642, 663, 665, 671, 801, 827, 828, 829, 831, 832, 833, 837, 840, 842, 843, 844, 869, 881, 884, 885, 887, 888, 889, 898, 1006], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 61, 81, 82, 86, 95, 97, 103, 113, 124, 125, 128, 129, 131, 145, 152, 153, 156, 158, 159, 161, 164, 165, 169, 172, 179, 180, 181, 182, 184, 189, 194, 201, 202, 207, 214, 224, 229, 235, 236, 239, 246, 249, 256, 264, 267, 268, 270, 271, 272, 273, 297, 304, 306, 307, 310, 314, 315, 317, 319, 322, 323, 327, 337, 342, 354, 355, 378, 381, 385, 389, 393, 407, 414, 433, 436, 440, 442, 444, 445, 446, 447, 451, 452, 453, 455, 462, 463, 467, 468, 469, 481, 484, 485, 488, 490, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 576, 577, 600, 601, 603, 604, 620, 625, 627, 632, 633, 634, 635, 636, 639, 640, 642, 643, 645, 646, 647, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 667, 669, 670, 671, 672, 680, 682, 683, 684, 685, 686, 687, 688, 694, 773, 783, 787, 788, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 816, 817, 818, 822, 823, 826, 827, 828, 829, 831, 832, 833, 837, 841, 848, 849, 850, 857, 869, 873, 881, 884, 885, 887, 888, 889, 892, 893, 894, 897, 898, 900, 901, 902, 903, 915, 928, 929, 949, 951, 954, 990, 1006, 1017], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 218, 272, 369, 378, 379, 388, 389, 406, 461, 568, 890, 1010, 1011, 1022, 1029, 1030, 1031, 1035], "qualit": [5, 6, 53, 55, 61, 118, 125, 200, 318, 371, 402, 432, 694, 1011, 1037], "assess": [5, 37, 60, 112, 123, 125, 170, 200, 218, 239, 257, 258, 260, 264, 400, 409, 694, 735, 979, 980, 986, 1001, 1037], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 113, 115, 122, 124, 125, 157, 159, 170, 171, 180, 186, 190, 191, 201, 204, 206, 215, 217, 218, 248, 261, 268, 273, 283, 294, 298, 300, 303, 305, 307, 315, 322, 327, 334, 339, 347, 348, 364, 369, 371, 373, 376, 379, 385, 389, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 434, 436, 438, 439, 440, 442, 451, 452, 456, 468, 489, 491, 531, 533, 540, 548, 549, 550, 554, 555, 557, 575, 582, 583, 595, 600, 601, 643, 647, 648, 649, 651, 652, 672, 675, 676, 738, 792, 793, 807, 817, 820, 849, 850, 857, 885, 894, 897, 929, 969, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 990, 992, 993, 996, 1001, 1004, 1013, 1014, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "img": [5, 50, 66, 499, 579], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 58, 80, 105, 113, 115, 121, 125, 130, 131, 132, 141, 152, 154, 156, 157, 158, 159, 170, 179, 190, 191, 193, 200, 213, 214, 222, 226, 229, 233, 235, 243, 248, 250, 264, 268, 270, 281, 286, 287, 293, 294, 297, 298, 299, 300, 305, 306, 317, 327, 333, 334, 338, 339, 340, 341, 343, 344, 347, 354, 355, 458, 486, 487, 488, 624, 711, 967, 980, 1039], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 106, 154, 155, 156, 160, 173, 191, 216, 222, 238, 272, 285, 300, 322, 323, 334, 340, 343, 370, 625, 690, 1011, 1012, 1036], "grei": [5, 34, 271, 303, 371], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 118, 204, 222, 234, 238, 255, 260, 262, 263, 303, 323, 327, 334, 344, 347, 371, 376, 378, 402, 404, 411, 435, 546, 547, 552, 553, 581, 584, 627, 649, 685, 708, 787, 788, 789, 792, 793, 803, 815, 933, 979, 985, 995, 1001, 1022, 1026, 1027, 1029], "fontsiz": [5, 8, 10, 14, 34, 50, 60, 91, 98, 121, 144, 155, 156, 158, 161, 171, 180, 190, 199, 211, 222, 223, 249, 256, 265, 266, 267, 272, 273, 300, 307, 341, 906], "mse": [5, 7, 78, 79, 125, 126, 164, 165, 200, 202, 204, 206, 275, 640, 646, 742, 980, 996, 1033, 1035], "quantit": [5, 6, 25, 61, 125, 135, 149, 257, 275, 373, 1011], "nmse": [5, 275], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 105, 125, 131, 132, 144, 170, 171, 173, 176, 180, 189, 191, 196, 200, 215, 216, 217, 218, 229, 233, 260, 264, 265, 267, 269, 270, 271, 289, 290, 297, 305, 308, 317, 334, 347, 348, 358, 403, 406, 409, 816], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 57, 74, 75, 86, 95, 100, 104, 111, 115, 117, 130, 132, 135, 138, 139, 141, 144, 147, 149, 156, 158, 164, 165, 168, 169, 171, 174, 176, 182, 184, 186, 188, 189, 190, 195, 197, 198, 201, 202, 204, 208, 212, 214, 216, 217, 218, 219, 220, 223, 225, 227, 232, 235, 237, 238, 241, 255, 257, 258, 259, 261, 264, 266, 267, 268, 269, 270, 271, 275, 286, 289, 290, 300, 303, 304, 305, 310, 315, 316, 329, 331, 334, 335, 336, 338, 339, 342, 343, 345, 347, 354, 355, 363, 365, 368, 372, 373, 374, 378, 379, 381, 389, 391, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 435, 448, 458, 460, 468, 475, 476, 477, 489, 494, 495, 505, 508, 514, 517, 525, 526, 527, 528, 529, 532, 534, 536, 537, 541, 542, 543, 547, 559, 575, 582, 586, 587, 599, 602, 607, 613, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 680, 681, 682, 683, 684, 685, 686, 694, 700, 709, 742, 745, 757, 759, 766, 777, 789, 800, 804, 815, 818, 832, 833, 837, 841, 848, 849, 850, 853, 858, 859, 862, 865, 867, 869, 870, 871, 872, 881, 885, 892, 893, 894, 895, 896, 897, 898, 969, 971, 972, 973, 975, 980, 983, 984, 985, 986, 987, 988, 994, 995, 1000, 1002, 1004, 1006, 1009, 1010, 1015, 1016, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036], "radial": [5, 100, 152, 157, 159, 334, 368, 445, 615, 684, 978, 995, 1017], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 133, 141, 152, 153, 154, 156, 157, 158, 159, 161, 167, 214, 228, 229, 235, 244, 259, 261, 263, 266, 276, 327, 329, 331, 338, 340, 341, 345, 368, 403, 407, 409, 445, 495, 497, 528, 534, 603, 604, 605, 606, 609, 612, 613, 614, 616, 617, 632, 633, 634, 635, 636, 669, 684, 757, 766, 768, 789, 800, 803, 809, 852, 872, 887, 888, 892, 894, 895, 896, 897, 898, 969, 972, 973, 975, 977, 980, 986, 990, 993, 1006, 1011, 1017, 1028, 1033], "decomposit": [5, 6, 14, 17, 58, 70, 72, 73, 74, 86, 87, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 130, 136, 221, 222, 224, 234, 237, 241, 260, 285, 290, 308, 317, 348, 364, 365, 369, 382, 385, 389, 398, 399, 400, 403, 409, 442, 444, 445, 446, 455, 475, 476, 477, 488, 542, 549, 604, 643, 644, 645, 646, 647, 648, 649, 656, 657, 658, 665, 666, 667, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 787, 788, 841, 848, 851, 854, 870, 901, 928, 929, 976, 977, 980, 997, 1000, 1002, 1009, 1011, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "kernel_pca": [5, 100, 403], "400": [5, 26, 50, 95, 111, 127, 131, 152, 165, 206, 226, 273, 298, 348, 371, 407, 488, 1015], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 149, 152, 155, 157, 158, 159, 160, 161, 164, 170, 180, 193, 200, 201, 207, 214, 218, 224, 229, 235, 240, 246, 249, 252, 259, 269, 272, 299, 310, 316, 319, 326, 332, 334, 342, 347, 382, 414, 436, 440, 445, 452, 455, 464, 465, 471, 475, 476, 477, 524, 525, 526, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 552, 553, 554, 555, 585, 590, 604, 606, 607, 608, 612, 613, 615, 616, 618, 620, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 645, 646, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 680, 682, 683, 684, 685, 686, 687, 688, 720, 733, 777, 787, 788, 803, 827, 828, 829, 830, 831, 832, 833, 841, 849, 850, 857, 887, 888, 892, 893, 894, 895, 896, 897, 898, 966, 969, 980, 984, 988, 990, 994, 1011, 1015, 1030, 1035, 1036, 1037], "fit_inverse_transform": [5, 100, 528, 1031], "5e": [5, 95, 185, 588, 589, 591], "inde": [5, 7, 25, 39, 40, 53, 55, 58, 82, 86, 100, 112, 115, 148, 149, 152, 170, 172, 179, 184, 188, 189, 200, 202, 263, 264, 268, 270, 281, 303, 308, 348, 358, 362, 375, 381, 388, 389, 390, 402, 404, 409, 560, 561, 976, 990, 994, 1036], "least": [5, 14, 80, 81, 84, 87, 98, 123, 126, 149, 160, 167, 178, 179, 184, 193, 200, 202, 204, 205, 208, 217, 218, 219, 233, 261, 279, 308, 315, 316, 334, 348, 349, 362, 369, 371, 373, 375, 376, 380, 382, 384, 387, 389, 390, 393, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 437, 441, 443, 449, 450, 451, 454, 467, 475, 476, 477, 478, 487, 509, 524, 530, 532, 534, 535, 536, 538, 539, 540, 541, 542, 550, 551, 552, 553, 555, 557, 558, 559, 586, 595, 628, 636, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 685, 690, 705, 709, 711, 777, 790, 794, 795, 801, 803, 804, 805, 807, 808, 810, 813, 816, 817, 818, 849, 850, 853, 864, 872, 897, 900, 901, 902, 903, 921, 943, 970, 973, 977, 980, 983, 992, 994, 995, 996, 1001, 1002, 1004, 1013, 1017, 1022, 1024, 1025, 1028, 1029, 1033], "hope": [5, 218, 389, 401, 1031], "remov": [5, 14, 16, 17, 34, 54, 55, 70, 75, 149, 164, 165, 170, 173, 179, 262, 303, 310, 313, 314, 315, 347, 348, 352, 358, 368, 371, 375, 376, 377, 380, 381, 385, 389, 402, 403, 406, 409, 410, 412, 413, 430, 435, 437, 440, 442, 443, 450, 452, 471, 481, 482, 519, 527, 528, 530, 532, 534, 539, 546, 547, 548, 549, 560, 561, 562, 563, 572, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 604, 623, 626, 631, 637, 638, 643, 644, 647, 648, 649, 651, 657, 658, 733, 760, 770, 771, 772, 795, 811, 816, 839, 851, 852, 856, 857, 865, 869, 870, 872, 881, 895, 896, 898, 907, 923, 924, 926, 970, 977, 983, 996, 1002, 1007, 1017, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "think": [5, 37, 171, 347, 348, 376, 408, 979, 1001, 1003, 1004, 1006], "happen": [5, 117, 188, 303, 309, 348, 358, 362, 363, 374, 375, 376, 380, 381, 382, 387, 389, 390, 392, 402, 404, 406, 409, 430, 508, 565, 651, 777, 870, 872, 892, 976, 980, 981, 995, 1001, 1015, 1030, 1034, 1035, 1037, 1038], "ridg": [5, 10, 13, 54, 75, 132, 149, 151, 162, 164, 167, 170, 171, 178, 179, 184, 200, 201, 219, 228, 238, 244, 347, 362, 365, 387, 407, 409, 517, 528, 532, 536, 604, 608, 615, 618, 636, 637, 638, 640, 642, 650, 654, 666, 667, 668, 671, 680, 694, 742, 789, 795, 803, 825, 898, 980, 988, 990, 994, 995, 1002, 1013, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1035, 1036, 1037], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 146, 236, 285, 348, 393, 407, 410, 438, 458, 475, 476, 477, 526, 527, 528, 531, 532, 533, 534, 536, 537, 574, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 623, 789, 792, 793, 803, 852, 856, 857, 859, 860, 861, 862, 863, 865, 866, 868, 869, 870, 872, 884, 885, 990, 991, 992, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 33, 58, 79, 86, 95, 97, 103, 111, 112, 115, 118, 121, 125, 128, 152, 154, 156, 158, 160, 171, 172, 184, 185, 186, 190, 200, 201, 202, 203, 213, 221, 225, 232, 233, 238, 248, 252, 260, 261, 263, 264, 268, 269, 271, 274, 285, 287, 288, 305, 308, 317, 325, 334, 340, 347, 348, 349, 353, 371, 376, 400, 401, 402, 405, 406, 407, 408, 409, 410, 413, 437, 441, 457, 460, 491, 502, 525, 527, 534, 537, 546, 552, 553, 554, 555, 556, 581, 582, 584, 596, 604, 606, 607, 608, 610, 612, 613, 615, 616, 618, 625, 626, 628, 630, 670, 672, 705, 709, 717, 720, 726, 731, 787, 788, 838, 840, 842, 843, 844, 846, 873, 894, 895, 896, 899, 916, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 992, 994, 995, 996, 1013, 1024, 1025, 1030, 1037], "analysi": [5, 7, 9, 25, 29, 35, 36, 57, 63, 68, 94, 96, 97, 99, 100, 102, 104, 107, 122, 167, 170, 189, 222, 245, 253, 258, 261, 262, 266, 282, 295, 303, 308, 348, 365, 368, 371, 373, 376, 378, 390, 399, 402, 404, 409, 410, 414, 432, 440, 441, 466, 468, 469, 475, 476, 478, 495, 497, 505, 508, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 548, 549, 624, 631, 681, 683, 684, 685, 686, 703, 712, 717, 718, 748, 780, 781, 782, 783, 787, 789, 814, 818, 834, 841, 852, 853, 858, 868, 872, 880, 928, 929, 970, 976, 977, 979, 980, 990, 999, 1000, 1002, 1004, 1007, 1016, 1017, 1022, 1023, 1024, 1026, 1031], "favor": [5, 82, 118, 246, 252, 387, 404, 409, 626, 722, 797, 799, 851, 969, 988, 1024, 1026, 1028, 1029, 1031, 1034, 1035, 1036, 1037, 1038], "background": [5, 11, 47, 66, 128, 300, 305, 371, 376, 384, 402, 486, 487, 977, 985, 994, 1032], "204": [5, 15, 57, 68, 247, 253, 332, 345, 988, 993], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 98, 99, 100, 102, 106, 107, 110, 111, 113, 114, 115, 116, 117, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 142, 145, 146, 147, 148, 149, 151, 160, 162, 164, 165, 172, 173, 176, 178, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 199, 203, 204, 207, 208, 212, 213, 214, 215, 216, 217, 219, 223, 225, 226, 228, 230, 233, 235, 237, 238, 239, 242, 243, 244, 246, 248, 249, 250, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 279, 281, 283, 284, 285, 289, 290, 291, 292, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 328, 329, 330, 332, 334, 335, 336, 337, 338, 342, 343, 344, 345, 348, 349, 351, 352, 354, 355, 356, 357, 358, 363, 364, 365, 378, 379, 380, 382, 388, 389, 391, 392, 396, 398, 399, 400, 402, 403, 406, 407, 408, 409, 410, 411, 417, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 452, 462, 463, 466, 467, 468, 469, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 539, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 576, 577, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 595, 596, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 624, 625, 626, 627, 628, 631, 632, 633, 636, 638, 639, 640, 642, 644, 645, 646, 648, 650, 651, 652, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 672, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 696, 697, 701, 721, 747, 749, 779, 780, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 848, 849, 850, 852, 853, 856, 857, 865, 866, 870, 872, 874, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 912, 913, 917, 918, 969, 970, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996, 1000, 1001, 1003, 1004, 1007, 1009, 1010, 1011, 1014, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1039], "excerpt": [6, 992, 1011], "wild": [6, 369, 486, 487, 501, 502, 1011, 1017, 1022], "aka": [6, 297, 347, 387, 410, 445, 529, 531, 533, 537, 540, 574, 575, 608, 615, 644, 645, 647, 648, 649, 651, 652, 655, 659, 660, 661, 663, 669, 670, 671, 733, 859, 863, 865, 976, 984, 994, 1006, 1011, 1024, 1036], "lfw": [6, 371, 486, 487, 1011, 1022], "vi": [6, 8, 371, 692, 1011, 1030, 1033], "www": [6, 71, 176, 200, 216, 218, 230, 279, 299, 370, 371, 376, 384, 392, 402, 406, 435, 442, 480, 501, 502, 524, 527, 530, 534, 637, 651, 657, 664, 678, 679, 841, 848, 900, 901, 976, 993, 1011], "umass": [6, 19, 371, 1011], "edu": [6, 8, 11, 17, 46, 123, 149, 159, 176, 182, 221, 249, 260, 286, 294, 307, 347, 370, 371, 373, 402, 442, 480, 493, 495, 501, 502, 503, 527, 634, 637, 642, 651, 659, 660, 669, 672, 675, 676, 827, 829, 830, 831, 841, 848, 885, 887, 900, 901, 976, 978, 1011], "funnel": [6, 486, 487, 1011], "tgz": [6, 1011], "233mb": [6, 1011], "stat": [6, 8, 10, 70, 80, 101, 149, 152, 173, 258, 261, 269, 273, 286, 315, 322, 323, 373, 385, 388, 404, 467, 585, 588, 589, 591, 592, 593, 597, 598, 599, 602, 675, 676, 793, 801, 803, 900, 901, 931, 969, 976, 990, 1011, 1029, 1031, 1035], "loguniform": [6, 152, 269, 969, 1011, 1032], "fetch_lfw_peopl": [6, 371, 1011, 1037], "confusionmatrixdisplai": [6, 32, 255, 316, 322, 347, 624, 711, 980, 1011, 1032, 1033, 1035, 1036, 1037], "classification_report": [6, 32, 70, 146, 259, 300, 322, 323, 980, 1011, 1015, 1024, 1026, 1030, 1031, 1032, 1034, 1038], "randomizedsearchcv": [6, 71, 152, 262, 269, 315, 358, 388, 568, 969, 980, 994, 1000, 1011, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1039], "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 106, 132, 149, 170, 179, 188, 189, 191, 200, 216, 218, 230, 231, 240, 241, 243, 258, 268, 289, 290, 297, 305, 308, 313, 314, 316, 317, 318, 334, 337, 358, 364, 376, 378, 381, 385, 388, 403, 406, 423, 459, 460, 560, 643, 644, 647, 648, 649, 657, 658, 669, 671, 852, 853, 856, 869, 883, 892, 893, 894, 895, 897, 898, 970, 977, 984, 990, 994, 995, 997, 1011, 1024, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "svc": [6, 16, 25, 27, 30, 31, 32, 70, 74, 133, 139, 141, 147, 167, 176, 234, 237, 241, 255, 259, 261, 263, 266, 267, 268, 271, 272, 276, 305, 313, 315, 325, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 347, 362, 378, 382, 389, 396, 400, 403, 406, 409, 461, 508, 548, 690, 691, 693, 695, 789, 806, 819, 821, 852, 889, 890, 892, 894, 968, 969, 975, 978, 980, 981, 990, 1006, 1010, 1011, 1013, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "disk": [6, 13, 371, 374, 376, 381, 389, 396, 1011], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 124, 126, 128, 131, 134, 139, 146, 149, 153, 154, 155, 160, 170, 179, 181, 184, 193, 194, 197, 200, 201, 207, 217, 222, 223, 229, 233, 236, 240, 243, 246, 247, 248, 250, 251, 256, 257, 259, 261, 262, 265, 266, 270, 279, 294, 306, 313, 316, 317, 319, 323, 330, 337, 347, 355, 356, 358, 362, 363, 369, 370, 371, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 396, 399, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 508, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 574, 575, 576, 577, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 912, 913, 914, 917, 918, 926, 927, 928, 929, 930, 931, 933, 934, 935, 942, 943, 944, 951, 952, 953, 954, 955, 956, 957, 958, 966, 967, 970, 975, 976, 978, 980, 981, 983, 984, 986, 987, 990, 991, 992, 994, 995, 996, 999, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "lfw_peopl": [6, 371, 1011], "min_faces_per_person": [6, 371, 487, 1011], "resiz": [6, 46, 47, 240, 371, 486, 487, 1011], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 103, 111, 112, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 140, 141, 148, 149, 161, 164, 165, 169, 179, 181, 182, 184, 186, 188, 190, 192, 194, 195, 199, 200, 201, 203, 204, 208, 212, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 233, 234, 236, 247, 249, 250, 251, 252, 258, 259, 261, 264, 265, 268, 270, 271, 272, 273, 274, 275, 281, 291, 305, 306, 307, 310, 314, 315, 317, 319, 324, 332, 335, 336, 342, 347, 348, 358, 369, 373, 376, 378, 381, 385, 387, 388, 389, 393, 402, 404, 405, 406, 407, 409, 413, 414, 415, 417, 419, 420, 421, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 494, 497, 501, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 762, 763, 764, 765, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 917, 918, 929, 931, 933, 942, 949, 951, 954, 955, 956, 957, 958, 959, 960, 961, 969, 972, 976, 980, 981, 983, 984, 990, 991, 992, 994, 995, 996, 1006, 1011, 1012, 1013, 1014, 1015, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 58, 64, 102, 105, 149, 164, 199, 204, 217, 236, 237, 246, 247, 248, 251, 252, 272, 300, 316, 317, 339, 342, 349, 358, 371, 373, 382, 396, 402, 403, 407, 409, 410, 414, 419, 425, 430, 458, 462, 465, 467, 475, 476, 477, 516, 531, 533, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 581, 582, 584, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 692, 717, 718, 748, 789, 803, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 834, 835, 838, 839, 842, 843, 849, 850, 885, 887, 888, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 926, 931, 976, 980, 984, 985, 990, 992, 994, 995, 1011, 1015, 1032, 1036, 1037, 1038, 1039], "info": [6, 42, 71, 95, 170, 171, 236, 259, 373, 375, 380, 389, 410, 936, 946, 1011], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 103, 112, 114, 116, 118, 119, 146, 148, 149, 164, 165, 176, 179, 182, 184, 186, 194, 195, 199, 203, 204, 215, 217, 222, 229, 233, 234, 236, 246, 251, 258, 264, 268, 270, 271, 273, 274, 291, 297, 305, 313, 314, 315, 317, 319, 342, 347, 348, 349, 358, 362, 369, 370, 376, 378, 381, 387, 388, 389, 393, 402, 404, 405, 407, 409, 410, 413, 414, 415, 417, 419, 420, 421, 424, 425, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 454, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 487, 494, 497, 501, 502, 505, 508, 509, 512, 514, 516, 517, 519, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 690, 691, 693, 694, 695, 703, 717, 750, 751, 752, 753, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 929, 955, 956, 957, 958, 959, 960, 961, 972, 976, 981, 983, 984, 990, 994, 995, 996, 1006, 1011, 1012, 1014, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "id": [6, 19, 218, 294, 356, 370, 371, 376, 384, 404, 406, 410, 487, 488, 489, 904, 906, 924, 1011, 1015, 1030, 1031, 1034], "person": [6, 264, 371, 375, 406, 410, 486, 487, 488, 990, 1011, 1030], "target_nam": [6, 19, 52, 99, 104, 169, 209, 222, 248, 255, 262, 270, 271, 284, 309, 326, 347, 353, 369, 371, 481, 482, 484, 485, 486, 487, 489, 490, 493, 495, 496, 497, 498, 503, 706, 980, 996, 1006, 1011, 1015, 1032], "n_class": [6, 30, 37, 91, 92, 112, 114, 119, 121, 146, 148, 215, 222, 234, 237, 248, 268, 269, 270, 290, 291, 313, 353, 358, 376, 378, 389, 409, 430, 481, 482, 495, 508, 512, 516, 542, 543, 544, 546, 548, 550, 552, 554, 557, 560, 562, 586, 587, 597, 603, 627, 632, 651, 652, 659, 660, 661, 667, 668, 669, 670, 690, 700, 709, 711, 727, 730, 733, 746, 780, 784, 789, 792, 793, 803, 813, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 834, 839, 841, 842, 849, 852, 859, 860, 863, 866, 876, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 902, 904, 905, 917, 918, 976, 980, 981, 984, 991, 994, 995, 1003, 1011, 1027, 1028, 1029, 1031, 1032, 1033], "1288": [6, 371], "1850": [6, 371], "scaler": [6, 71, 73, 167, 216, 234, 241, 243, 289, 302, 308, 311, 318, 334, 337, 358, 381, 403, 406, 483, 651, 652, 665, 667, 680, 852, 861, 862, 864, 868, 869, 870, 872, 877, 878, 879, 880, 881, 882, 883, 984, 990, 994, 1011, 1022, 1027, 1030, 1035], "unlabel": [6, 237, 315, 322, 323, 324, 326, 327, 389, 401, 402, 887, 888, 889, 979, 1006, 1009, 1011, 1013, 1034], "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 117, 130, 229, 237, 287, 288, 333, 347, 348, 358, 365, 368, 371, 378, 388, 389, 401, 402, 405, 407, 408, 409, 410, 426, 435, 438, 525, 527, 529, 530, 532, 535, 536, 542, 556, 559, 560, 562, 563, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 621, 623, 627, 628, 631, 632, 633, 634, 635, 670, 734, 789, 792, 793, 795, 803, 811, 816, 819, 834, 835, 838, 840, 841, 842, 843, 848, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 884, 885, 889, 896, 977, 980, 986, 993, 1002, 1006, 1007, 1009, 1011, 1017, 1022, 1025, 1035], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 103, 112, 117, 130, 140, 141, 149, 152, 154, 155, 159, 167, 184, 196, 201, 217, 220, 222, 223, 225, 227, 229, 233, 234, 237, 247, 248, 282, 285, 295, 305, 331, 347, 358, 362, 368, 371, 372, 373, 376, 385, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 438, 440, 442, 458, 462, 466, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 490, 493, 494, 495, 497, 498, 503, 508, 512, 525, 527, 528, 531, 532, 533, 534, 537, 540, 542, 556, 559, 566, 592, 600, 624, 633, 634, 635, 645, 681, 682, 683, 684, 685, 686, 687, 689, 692, 703, 717, 787, 788, 789, 818, 832, 833, 834, 837, 840, 841, 848, 852, 853, 856, 862, 867, 872, 884, 885, 886, 892, 896, 929, 966, 971, 972, 975, 976, 981, 982, 986, 992, 993, 994, 995, 996, 1002, 1004, 1006, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1034, 1037, 1039], "reduct": [6, 19, 54, 57, 69, 73, 76, 86, 95, 115, 130, 167, 220, 222, 223, 227, 233, 237, 282, 295, 317, 331, 358, 362, 368, 401, 402, 403, 405, 407, 409, 411, 461, 475, 476, 477, 478, 495, 523, 525, 527, 528, 531, 532, 533, 534, 537, 540, 542, 546, 547, 550, 551, 552, 553, 557, 558, 559, 592, 600, 651, 652, 681, 682, 683, 684, 685, 686, 773, 789, 818, 834, 841, 848, 852, 853, 862, 872, 890, 892, 900, 901, 902, 903, 972, 977, 992, 996, 1001, 1002, 1004, 1011, 1017, 1023, 1024, 1025, 1028, 1036, 1037, 1038], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 109, 117, 118, 121, 132, 135, 170, 200, 202, 211, 215, 229, 239, 240, 246, 248, 249, 252, 258, 262, 270, 271, 286, 303, 305, 309, 314, 322, 323, 334, 347, 358, 374, 376, 382, 387, 399, 400, 402, 407, 408, 409, 480, 580, 581, 584, 592, 718, 748, 784, 904, 906, 969, 972, 976, 978, 988, 1004, 1011, 1014, 1015, 1036], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 184, 186, 215, 216, 217, 223, 226, 229, 233, 235, 262, 347, 348, 349, 669, 670, 671, 1011], "svd_solver": [6, 95, 103, 398, 407, 528, 534, 1011, 1028], "whiten": [6, 95, 96, 97, 285, 407, 414, 526, 527, 534, 870, 872, 1011, 1026, 1028, 1036, 1037], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 146, 149, 157, 170, 171, 176, 179, 184, 186, 204, 217, 235, 236, 251, 259, 262, 265, 270, 281, 306, 315, 347, 348, 349, 358, 363, 370, 374, 376, 378, 380, 383, 384, 385, 387, 389, 393, 402, 404, 406, 407, 409, 434, 435, 438, 443, 445, 465, 475, 476, 477, 478, 482, 528, 554, 555, 575, 599, 621, 623, 625, 627, 636, 637, 638, 652, 733, 787, 788, 789, 803, 808, 809, 856, 870, 965, 969, 970, 973, 976, 977, 980, 982, 983, 984, 990, 993, 994, 995, 996, 1001, 1006, 1010, 1011, 1013, 1015, 1022, 1024, 1029, 1032, 1034, 1038], "components_": [6, 14, 58, 86, 95, 97, 98, 101, 106, 233, 234, 300, 308, 317, 389, 403, 407, 437, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 536, 537, 632, 841, 848, 884, 885, 992, 1011, 1026, 1028, 1034, 1037], "project": [6, 8, 11, 13, 17, 27, 34, 45, 53, 55, 58, 67, 90, 94, 95, 97, 99, 101, 102, 107, 114, 156, 158, 160, 161, 167, 171, 179, 192, 197, 209, 221, 222, 223, 225, 228, 234, 237, 244, 247, 285, 290, 294, 306, 313, 326, 331, 339, 348, 353, 362, 365, 368, 370, 374, 375, 381, 382, 385, 389, 390, 392, 399, 405, 407, 408, 414, 433, 439, 444, 445, 455, 467, 475, 476, 477, 478, 482, 495, 497, 524, 526, 527, 528, 530, 532, 534, 535, 536, 537, 541, 542, 566, 575, 582, 634, 635, 642, 665, 667, 681, 684, 688, 689, 822, 841, 869, 884, 885, 886, 928, 929, 974, 976, 977, 978, 981, 983, 984, 986, 993, 996, 998, 1003, 1004, 1006, 1011, 1014, 1017, 1022, 1023, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "orthonorm": [6, 385, 928, 1011], "x_train_pca": [6, 1011], "x_test_pca": [6, 100, 1011], "966": 6, "066": [6, 259, 297, 301, 641], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 56, 70, 71, 72, 73, 100, 111, 112, 113, 114, 116, 119, 120, 121, 124, 130, 133, 134, 145, 146, 148, 167, 172, 176, 178, 190, 191, 192, 198, 207, 209, 212, 215, 219, 229, 234, 236, 242, 255, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 276, 278, 280, 283, 284, 289, 290, 292, 297, 300, 305, 315, 316, 321, 322, 323, 325, 326, 328, 329, 330, 333, 335, 336, 337, 342, 343, 344, 345, 349, 371, 373, 376, 378, 381, 387, 389, 402, 403, 406, 410, 411, 412, 419, 428, 430, 431, 432, 481, 482, 489, 497, 505, 507, 508, 515, 524, 529, 530, 535, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 586, 587, 595, 599, 603, 615, 622, 624, 625, 626, 642, 651, 652, 659, 661, 664, 665, 666, 667, 668, 669, 690, 691, 693, 695, 696, 700, 701, 702, 705, 706, 711, 713, 718, 719, 721, 722, 726, 727, 730, 731, 732, 733, 734, 735, 746, 748, 774, 775, 776, 779, 780, 781, 784, 786, 789, 792, 793, 795, 803, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 839, 840, 842, 843, 848, 849, 850, 852, 853, 859, 872, 873, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 906, 921, 923, 969, 970, 972, 975, 976, 977, 980, 981, 982, 985, 988, 990, 993, 994, 995, 996, 1001, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "1e3": [6, 7, 10, 152, 158, 164, 235, 272, 319, 969, 1011], "1e5": [6, 157, 181, 183, 190, 272, 606, 607, 608, 612, 613, 615, 616, 618, 881, 886, 992, 1011, 1013], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 90, 101, 102, 116, 124, 127, 128, 133, 138, 141, 145, 146, 148, 154, 156, 173, 190, 192, 193, 197, 198, 204, 207, 209, 212, 213, 214, 216, 224, 230, 231, 234, 237, 239, 243, 250, 258, 262, 266, 267, 269, 272, 273, 284, 287, 288, 289, 292, 297, 305, 308, 313, 314, 315, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 352, 353, 356, 362, 371, 388, 389, 396, 403, 406, 409, 411, 431, 542, 543, 546, 548, 550, 552, 554, 556, 557, 560, 586, 587, 590, 625, 627, 631, 632, 633, 634, 635, 637, 638, 641, 645, 651, 652, 653, 654, 655, 659, 661, 662, 665, 666, 667, 668, 669, 670, 673, 690, 691, 693, 695, 780, 789, 792, 793, 803, 820, 821, 822, 824, 827, 828, 829, 830, 831, 838, 839, 849, 892, 894, 896, 897, 900, 904, 906, 970, 972, 976, 980, 981, 983, 984, 986, 987, 994, 995, 996, 1006, 1010, 1011, 1015], "class_weight": [6, 336, 389, 550, 554, 557, 651, 652, 659, 661, 667, 668, 669, 670, 892, 894, 895, 896, 897, 898, 899, 900, 902, 969, 994, 995, 1011, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1036, 1037], "n_iter": [6, 17, 71, 152, 179, 208, 221, 222, 226, 262, 269, 281, 300, 336, 378, 382, 388, 414, 447, 471, 525, 526, 530, 532, 537, 538, 539, 540, 637, 638, 639, 640, 645, 646, 653, 654, 655, 656, 674, 675, 676, 677, 678, 679, 680, 685, 687, 792, 793, 801, 803, 848, 850, 928, 929, 969, 994, 1011, 1023, 1028, 1029, 1030, 1034, 1036, 1037, 1038], "found": [6, 19, 20, 21, 106, 119, 148, 152, 156, 158, 160, 204, 237, 259, 262, 263, 264, 308, 313, 316, 318, 319, 334, 349, 362, 364, 370, 373, 375, 376, 378, 387, 389, 390, 399, 402, 405, 406, 407, 409, 410, 412, 427, 434, 437, 438, 452, 465, 550, 551, 552, 553, 557, 558, 581, 583, 603, 604, 621, 629, 640, 644, 646, 648, 654, 656, 658, 664, 665, 667, 669, 671, 680, 681, 705, 712, 789, 792, 793, 803, 829, 834, 835, 841, 863, 865, 866, 900, 901, 902, 903, 907, 964, 968, 969, 972, 976, 977, 979, 981, 982, 983, 984, 990, 994, 995, 996, 1001, 1003, 1006, 1011, 1015, 1022, 1025, 1026, 1029, 1030, 1032, 1036], "grid": [6, 8, 10, 11, 20, 25, 26, 27, 42, 54, 61, 71, 72, 74, 78, 82, 121, 123, 130, 156, 167, 169, 170, 171, 189, 218, 226, 234, 235, 236, 240, 246, 251, 254, 258, 260, 262, 265, 266, 277, 279, 283, 285, 286, 294, 300, 305, 306, 308, 331, 334, 340, 347, 378, 383, 387, 389, 397, 403, 406, 408, 409, 410, 412, 441, 454, 457, 465, 491, 495, 508, 515, 624, 625, 626, 640, 643, 646, 647, 649, 652, 654, 656, 669, 706, 720, 734, 777, 780, 789, 792, 793, 800, 803, 805, 818, 819, 897, 973, 975, 980, 983, 987, 1001, 1006, 1007, 1009, 1011, 1013, 1017, 1022, 1025, 1026, 1027, 1029, 1030, 1036, 1038, 1039], "search": [6, 46, 54, 71, 72, 73, 74, 125, 146, 149, 152, 167, 218, 235, 236, 251, 254, 262, 265, 266, 273, 277, 281, 283, 285, 300, 305, 318, 334, 347, 358, 365, 373, 374, 376, 378, 387, 389, 397, 402, 403, 406, 409, 410, 411, 412, 413, 436, 441, 443, 445, 450, 451, 454, 457, 464, 465, 471, 495, 508, 515, 550, 551, 552, 553, 557, 558, 559, 572, 592, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 621, 646, 669, 681, 682, 685, 686, 706, 720, 777, 780, 789, 792, 793, 800, 801, 803, 805, 818, 819, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 897, 900, 901, 902, 903, 934, 968, 973, 975, 977, 980, 983, 984, 994, 996, 1000, 1001, 1006, 1007, 1009, 1011, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1036, 1037], "best_estimator_": [6, 54, 73, 74, 78, 103, 235, 251, 262, 265, 285, 789, 792, 793, 803, 969, 1010, 1011, 1029], "271": [6, 233], "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 25, 27, 31, 56, 114, 117, 128, 129, 133, 171, 183, 192, 209, 235, 240, 242, 255, 258, 263, 264, 268, 271, 276, 284, 289, 292, 308, 313, 314, 315, 316, 318, 319, 330, 331, 332, 335, 336, 353, 383, 400, 626, 711, 719, 774, 776, 779, 780, 781, 975, 980, 987, 1011, 1019, 1035, 1036, 1037, 1038], "display_label": [6, 255, 690, 1011, 1034], "xticks_rot": [6, 690, 1011], "vertic": [6, 17, 60, 124, 173, 189, 233, 234, 265, 279, 303, 306, 339, 341, 389, 399, 402, 407, 508, 690, 773, 1011], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 55, 65, 73, 75, 86, 95, 96, 106, 112, 114, 119, 121, 126, 130, 132, 134, 154, 156, 161, 164, 169, 170, 172, 173, 179, 180, 184, 190, 198, 200, 208, 211, 215, 218, 221, 234, 239, 256, 257, 273, 279, 281, 283, 293, 304, 305, 306, 307, 308, 313, 317, 332, 348, 352, 353, 1011], "045": [6, 107, 715], "precis": [6, 25, 32, 70, 75, 82, 95, 146, 158, 159, 167, 176, 230, 254, 255, 259, 277, 300, 303, 322, 323, 376, 378, 389, 399, 400, 401, 402, 404, 407, 409, 436, 462, 463, 464, 465, 466, 467, 468, 469, 471, 497, 516, 525, 527, 534, 537, 637, 638, 639, 641, 643, 644, 645, 647, 648, 649, 662, 665, 667, 673, 675, 676, 680, 692, 693, 699, 700, 701, 706, 719, 721, 722, 723, 731, 755, 774, 775, 776, 779, 780, 787, 788, 818, 821, 832, 833, 838, 853, 872, 876, 892, 897, 904, 906, 929, 974, 976, 983, 984, 995, 1011, 1015, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "recal": [6, 25, 32, 70, 100, 146, 167, 230, 254, 259, 277, 300, 322, 323, 376, 389, 402, 497, 597, 693, 699, 700, 701, 705, 706, 719, 721, 722, 723, 774, 775, 776, 779, 780, 818, 821, 853, 872, 876, 892, 976, 996, 1011, 1015, 1025, 1026, 1029, 1031, 1032, 1034, 1035, 1036, 1038], "f1": [6, 25, 32, 70, 146, 259, 300, 322, 323, 326, 406, 706, 721, 722, 730, 775, 980, 981, 1011, 1015, 1026, 1038], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 70, 72, 110, 116, 123, 131, 136, 145, 146, 171, 201, 210, 211, 212, 218, 234, 235, 236, 242, 255, 259, 266, 268, 281, 300, 303, 307, 317, 322, 323, 326, 327, 330, 331, 334, 335, 337, 339, 342, 345, 362, 363, 364, 365, 370, 374, 376, 378, 380, 381, 382, 383, 385, 386, 388, 389, 390, 393, 402, 406, 407, 410, 412, 430, 433, 443, 445, 446, 457, 459, 460, 462, 467, 480, 489, 505, 531, 533, 534, 537, 540, 542, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 606, 607, 608, 610, 612, 613, 615, 616, 618, 620, 624, 625, 626, 636, 638, 650, 651, 652, 663, 664, 665, 667, 668, 669, 670, 671, 680, 683, 687, 692, 700, 706, 721, 722, 730, 735, 760, 770, 771, 772, 775, 776, 779, 780, 789, 792, 793, 795, 803, 815, 816, 824, 825, 830, 832, 833, 836, 838, 839, 844, 852, 853, 857, 863, 865, 866, 868, 872, 880, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 918, 923, 924, 968, 969, 970, 972, 973, 974, 976, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 994, 998, 1000, 1001, 1002, 1004, 1006, 1009, 1011, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "ariel": [6, 371, 1022, 1028], "sharon": [6, 371], "69": [6, 191, 308, 323, 402, 464, 465, 600, 601, 748, 980, 990, 1013], "colin": [6, 371, 1028], "powel": [6, 371], "87": [6, 8, 32, 70, 161, 259, 300, 323, 590, 660, 780, 789, 868, 880, 980, 1015], "donald": [6, 371, 402, 717, 970], "rumsfeld": [6, 371], "63": [6, 353, 373, 409, 550, 551, 558, 559, 692, 718, 789, 803, 902, 903, 980], "georg": [6, 371, 402, 1028, 1034, 1035, 1036, 1037], "bush": [6, 371], "95": [6, 14, 30, 32, 44, 52, 57, 67, 91, 101, 102, 121, 125, 159, 170, 179, 200, 202, 207, 218, 248, 249, 252, 261, 262, 286, 294, 300, 305, 309, 317, 323, 334, 358, 409, 520, 625, 626, 629, 640, 654, 740, 889, 976, 980, 981, 993, 1015, 1025], "91": [6, 32, 51, 157, 300, 322, 323, 409, 975, 1011, 1015], "146": [6, 90, 93, 409], "gerhard": [6, 371], "schroeder": [6, 371], "hugo": [6, 371, 1028, 1033, 1034, 1035, 1036], "chavez": [6, 371], "90": [6, 10, 14, 32, 74, 105, 106, 124, 125, 126, 146, 157, 173, 180, 191, 197, 199, 202, 207, 218, 246, 270, 272, 300, 305, 309, 319, 322, 323, 358, 362, 376, 382, 406, 556, 773, 789, 816, 821, 873, 975, 980, 1011, 1015, 1037, 1038], "toni": [6, 371, 556, 872, 986, 1035, 1036], "blair": [6, 371], "93": [6, 32, 149, 200, 243, 259, 300, 323, 347, 373, 780, 789, 816, 900, 975, 980, 1011, 1015], "83": [6, 30, 34, 39, 70, 300, 322, 373, 378, 412, 700, 778, 975, 980, 1011, 1015, 1025], "322": [6, 91, 93, 348, 464, 465], "macro": [6, 32, 70, 146, 259, 300, 313, 322, 323, 371, 406, 700, 706, 721, 722, 730, 775, 776, 779, 780, 980, 1015, 1022, 1030, 1038], "avg": [6, 32, 70, 146, 259, 300, 322, 323, 562, 697, 706, 980, 1011, 1015, 1038], "weight": [6, 13, 14, 19, 24, 32, 54, 70, 106, 125, 133, 134, 145, 146, 157, 165, 167, 170, 178, 184, 189, 191, 200, 204, 205, 214, 215, 216, 218, 219, 241, 246, 259, 264, 268, 270, 284, 293, 296, 297, 300, 301, 308, 310, 313, 316, 322, 323, 329, 336, 345, 347, 348, 349, 358, 372, 373, 385, 387, 389, 402, 404, 405, 407, 408, 411, 413, 419, 425, 430, 433, 436, 437, 439, 440, 442, 446, 452, 453, 456, 457, 458, 460, 462, 467, 475, 476, 477, 489, 508, 517, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 582, 583, 584, 586, 590, 595, 596, 603, 604, 621, 625, 626, 627, 628, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 682, 686, 690, 691, 693, 695, 696, 700, 701, 702, 705, 706, 709, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 726, 727, 728, 730, 731, 732, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 751, 761, 774, 775, 776, 777, 779, 780, 781, 784, 785, 786, 787, 788, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 854, 857, 871, 872, 873, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 917, 918, 931, 955, 961, 970, 971, 976, 977, 979, 980, 982, 983, 984, 985, 987, 990, 993, 994, 995, 996, 1001, 1006, 1013, 1015, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "85": [6, 16, 17, 32, 50, 55, 70, 98, 146, 215, 218, 272, 300, 323, 358, 409, 432, 493, 548, 549, 590, 645, 651, 737, 745, 780, 789, 816, 980, 981, 1011, 1022], "plot_galleri": [6, 95, 1011], "n_row": [6, 19, 95, 399, 417, 444, 446, 504, 506, 1011], "n_col": [6, 19, 95, 238, 417, 444, 446, 504, 506, 625, 1011], "portrait": [6, 407, 1011], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 111, 112, 113, 114, 115, 123, 124, 125, 126, 127, 130, 131, 135, 138, 139, 141, 144, 145, 148, 153, 154, 155, 156, 159, 160, 165, 169, 170, 171, 172, 179, 184, 185, 190, 193, 194, 197, 199, 201, 202, 206, 211, 214, 215, 216, 217, 223, 224, 225, 229, 233, 234, 235, 237, 238, 240, 246, 248, 249, 251, 252, 255, 260, 265, 266, 275, 286, 290, 291, 294, 297, 300, 303, 305, 306, 310, 313, 315, 322, 323, 324, 332, 334, 338, 339, 353, 354, 355, 376, 402, 408, 409, 410, 412, 431, 624, 625, 690, 691, 693, 694, 695, 795, 811, 906, 969, 973, 976, 979, 980, 983, 984, 987, 994, 995, 996, 1011, 1013, 1014, 1035], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 105, 114, 115, 132, 170, 199, 200, 215, 218, 229, 237, 246, 248, 249, 252, 256, 272, 274, 286, 294, 297, 300, 305, 315, 323, 331, 334, 1011], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 123, 130, 135, 200, 211, 229, 246, 248, 249, 252, 258, 261, 272, 286, 303, 323, 325, 334, 376, 400, 402, 408, 580, 904, 974, 976, 980, 1001, 1011, 1014], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 112, 115, 117, 118, 119, 122, 125, 132, 134, 155, 161, 165, 170, 185, 193, 200, 201, 202, 204, 211, 213, 214, 217, 218, 229, 233, 237, 239, 240, 246, 248, 249, 252, 257, 258, 259, 260, 262, 270, 271, 273, 286, 287, 294, 297, 300, 303, 317, 319, 323, 333, 334, 356, 376, 378, 380, 399, 402, 405, 406, 408, 409, 410, 412, 439, 465, 475, 476, 477, 478, 486, 491, 542, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 580, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 628, 632, 636, 644, 648, 787, 788, 789, 792, 793, 796, 803, 865, 872, 900, 901, 902, 903, 904, 916, 929, 951, 954, 969, 972, 974, 976, 978, 980, 982, 987, 992, 994, 996, 1010, 1011, 1013, 1014, 1029, 1031, 1036], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 62, 68, 76, 85, 95, 97, 98, 115, 123, 124, 126, 129, 130, 136, 149, 157, 161, 162, 170, 171, 181, 184, 191, 207, 212, 213, 218, 219, 221, 222, 229, 233, 234, 235, 240, 244, 248, 252, 253, 255, 260, 261, 262, 266, 268, 269, 277, 286, 295, 298, 303, 314, 320, 328, 336, 345, 348, 354, 355, 357, 371, 373, 381, 402, 411, 442, 464, 508, 525, 532, 536, 588, 589, 591, 635, 639, 647, 651, 671, 689, 708, 789, 803, 886, 949, 976, 980, 984, 990, 992, 994, 1011, 1015], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 91, 92, 97, 98, 100, 103, 105, 111, 112, 114, 115, 116, 125, 126, 127, 134, 145, 152, 155, 165, 190, 201, 202, 203, 204, 206, 207, 210, 211, 229, 232, 233, 236, 246, 248, 249, 251, 252, 256, 257, 261, 264, 268, 271, 272, 274, 286, 294, 297, 300, 303, 305, 308, 319, 323, 334, 336, 342, 344, 347, 353, 356, 358, 365, 376, 387, 390, 399, 402, 405, 407, 408, 409, 412, 457, 475, 476, 477, 478, 527, 534, 537, 550, 551, 552, 553, 554, 555, 557, 558, 559, 580, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 628, 669, 671, 857, 900, 901, 902, 903, 904, 916, 929, 969, 972, 974, 976, 978, 980, 982, 983, 987, 992, 994, 995, 996, 1000, 1001, 1004, 1007, 1011, 1013, 1014, 1024, 1030, 1036, 1038], "99": [6, 8, 25, 32, 44, 51, 62, 95, 218, 229, 233, 246, 248, 259, 262, 300, 303, 323, 363, 369, 373, 380, 406, 409, 410, 485, 640, 654, 664, 780, 839, 949, 975, 980, 990, 994, 1011, 1017, 1024], "hspace": [6, 13, 14, 44, 45, 62, 95, 218, 229, 246, 248, 249, 252, 286, 315, 323, 331, 1011], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 127, 149, 198, 200, 218, 233, 237, 238, 268, 299, 373, 407, 486, 487, 495, 514, 1011, 1014, 1033], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 90, 98, 123, 126, 139, 145, 154, 155, 156, 160, 183, 190, 196, 213, 229, 237, 247, 248, 249, 252, 256, 275, 285, 294, 300, 322, 334, 338, 339, 340, 347, 1011], "portion": [6, 8, 81, 149, 270, 362, 371, 373, 376, 382, 389, 780, 813, 830, 969, 979, 983, 1011, 1015], "pred_nam": [6, 1011], "rsplit": [6, 17, 262, 1011], "true_nam": [6, 1011], "ntrue": [6, 322, 323, 1011], "prediction_titl": [6, 1011], "signif": [6, 1011], "eigenface_titl": [6, 1011], "convolut": [6, 160, 1011], "network": [6, 299, 362, 363, 364, 365, 370, 371, 387, 389, 390, 396, 402, 407, 409, 414, 489, 526, 528, 560, 561, 689, 733, 849, 850, 976, 978, 980, 994, 996, 1000, 1002, 1011, 1016, 1017, 1022, 1036], "famili": [6, 362, 364, 389, 402, 405, 407, 410, 411, 585, 588, 589, 591, 592, 593, 599, 849, 850, 868, 880, 976, 990, 994, 1011, 1013, 1026, 1036], "outsid": [6, 9, 19, 121, 201, 202, 232, 243, 387, 410, 439, 628, 871, 986, 1011, 1030], "scope": [6, 19, 362, 364, 376, 387, 410, 1000, 1001, 1011], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 70, 109, 117, 118, 132, 146, 149, 161, 165, 167, 170, 188, 189, 218, 228, 242, 254, 258, 277, 281, 286, 288, 312, 320, 347, 348, 352, 353, 358, 363, 364, 365, 368, 370, 371, 372, 373, 375, 376, 379, 382, 383, 384, 385, 388, 389, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 420, 421, 424, 425, 426, 431, 436, 439, 440, 443, 450, 452, 457, 458, 460, 461, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 505, 508, 514, 517, 531, 554, 555, 557, 558, 560, 569, 574, 575, 576, 578, 579, 582, 592, 595, 604, 619, 621, 623, 625, 627, 631, 633, 639, 641, 645, 651, 662, 673, 681, 693, 694, 695, 710, 740, 770, 771, 772, 780, 785, 789, 790, 791, 792, 793, 794, 795, 803, 806, 807, 808, 809, 810, 811, 814, 818, 820, 821, 834, 836, 853, 855, 857, 859, 862, 864, 865, 866, 867, 871, 872, 873, 876, 889, 890, 892, 897, 900, 901, 923, 924, 946, 947, 948, 969, 970, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 990, 993, 994, 995, 996, 999, 1003, 1009, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "librari": [6, 261, 316, 318, 354, 358, 368, 370, 371, 374, 375, 376, 377, 382, 387, 388, 389, 392, 398, 651, 892, 893, 894, 895, 897, 898, 948, 976, 980, 995, 996, 1000, 1001, 1004, 1011, 1015, 1020, 1025, 1029, 1030, 1031, 1032, 1033, 1035], "reader": [6, 42, 316, 364, 376, 1011], "pytorch": [6, 387, 1000, 1001, 1011, 1038], "tensorflow": [6, 387, 1000, 1011], "implement": [6, 7, 13, 16, 17, 46, 56, 81, 95, 118, 165, 176, 184, 185, 189, 214, 218, 221, 229, 235, 236, 259, 261, 270, 281, 283, 286, 306, 313, 314, 315, 316, 317, 319, 347, 349, 362, 363, 364, 370, 371, 373, 374, 376, 377, 378, 381, 382, 384, 385, 389, 392, 393, 396, 398, 399, 401, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 430, 435, 436, 437, 439, 440, 441, 442, 443, 468, 486, 489, 501, 525, 526, 527, 528, 529, 531, 534, 535, 536, 546, 547, 548, 550, 551, 554, 555, 556, 560, 565, 575, 581, 582, 584, 586, 590, 594, 603, 604, 625, 626, 633, 634, 638, 639, 646, 650, 651, 652, 656, 657, 661, 664, 665, 667, 668, 669, 670, 671, 677, 678, 679, 680, 681, 684, 685, 688, 700, 704, 713, 727, 730, 770, 774, 780, 781, 787, 789, 792, 793, 795, 803, 807, 808, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 827, 828, 829, 830, 831, 834, 835, 837, 840, 842, 843, 848, 849, 850, 852, 874, 882, 883, 889, 892, 893, 894, 895, 896, 897, 898, 928, 929, 940, 945, 948, 949, 951, 969, 970, 972, 974, 976, 977, 978, 979, 981, 982, 984, 985, 986, 990, 992, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1006, 1011, 1012, 1013, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "173": [6, 15, 112, 136, 291, 295, 382, 577], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 55, 61, 68, 70, 72, 112, 116, 126, 146, 160, 167, 201, 236, 242, 243, 248, 252, 254, 264, 267, 270, 275, 277, 283, 286, 293, 302, 305, 307, 310, 311, 315, 321, 323, 324, 327, 328, 332, 342, 347, 348, 349, 358, 364, 371, 372, 376, 381, 387, 393, 398, 402, 406, 409, 440, 495, 505, 513, 690, 696, 706, 734, 788, 789, 857, 888, 900, 969, 970, 974, 980, 981, 982, 983, 990, 993, 996, 999], "diabet": [7, 126, 135, 137, 142, 149, 165, 167, 187, 188, 189, 196, 197, 257, 369, 409, 494, 645, 646, 789, 794, 813, 814, 815, 988, 1006, 1010, 1017], "regress": [7, 10, 13, 25, 27, 30, 54, 69, 71, 76, 80, 81, 84, 87, 98, 110, 115, 117, 118, 123, 131, 136, 149, 151, 162, 164, 165, 167, 169, 170, 171, 178, 182, 184, 186, 190, 194, 195, 197, 201, 203, 204, 205, 216, 219, 228, 230, 238, 243, 244, 257, 274, 275, 279, 282, 295, 300, 304, 308, 315, 316, 317, 318, 329, 345, 347, 351, 357, 363, 364, 365, 368, 369, 371, 373, 376, 378, 381, 384, 385, 387, 388, 389, 397, 400, 404, 405, 406, 407, 411, 425, 430, 457, 458, 467, 477, 482, 483, 485, 489, 494, 495, 497, 498, 505, 509, 510, 511, 517, 521, 524, 528, 530, 532, 534, 535, 536, 538, 539, 541, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 563, 564, 585, 586, 587, 588, 589, 590, 591, 592, 593, 597, 598, 599, 602, 603, 604, 607, 608, 615, 616, 618, 624, 625, 626, 627, 628, 630, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 687, 694, 699, 714, 715, 716, 720, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 777, 789, 792, 793, 795, 803, 811, 815, 816, 818, 819, 823, 825, 826, 834, 835, 840, 842, 843, 849, 850, 852, 853, 856, 857, 859, 865, 866, 867, 869, 872, 873, 876, 881, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 906, 912, 915, 917, 933, 969, 970, 972, 975, 977, 987, 988, 990, 991, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1012, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "patient": [7, 135, 149, 165, 373, 384, 406, 976, 1013], "diseas": [7, 135, 149, 165, 264, 373, 705, 980, 1013], "newsgroup": [7, 14, 19, 233, 262, 326, 348, 349, 369, 399, 410, 481, 482, 1007, 1017], "post": [7, 14, 19, 70, 167, 317, 347, 348, 349, 351, 357, 362, 371, 375, 376, 380, 381, 388, 402, 441, 481, 482, 493, 705, 818, 900, 980, 996, 1004, 1015, 1033], "written": [7, 29, 35, 89, 167, 207, 316, 363, 373, 376, 377, 378, 382, 384, 387, 389, 403, 408, 480, 495, 501, 690, 706, 818, 897, 904, 974, 976, 980, 984, 985, 994, 999, 1006, 1007, 1012, 1015, 1031], "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 121, 146, 161, 167, 169, 170, 173, 204, 217, 229, 236, 258, 259, 261, 263, 268, 286, 308, 313, 315, 316, 317, 318, 319, 323, 347, 349, 356, 358, 362, 363, 365, 369, 371, 375, 376, 380, 381, 382, 388, 389, 390, 396, 406, 407, 410, 412, 431, 485, 487, 488, 489, 490, 493, 494, 495, 497, 498, 503, 508, 554, 555, 586, 587, 600, 601, 607, 626, 633, 669, 671, 735, 789, 795, 803, 811, 821, 913, 970, 976, 977, 979, 981, 983, 986, 987, 990, 991, 993, 995, 996, 998, 1000, 1004, 1006, 1007, 1013, 1015, 1027, 1028, 1038], "sgdclassifi": [7, 8, 207, 208, 209, 210, 211, 212, 213, 234, 269, 326, 336, 347, 358, 362, 364, 382, 389, 400, 401, 410, 631, 633, 634, 635, 639, 651, 659, 661, 892, 897, 972, 976, 981, 994, 995, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038], "stochast": [7, 58, 124, 127, 167, 176, 178, 219, 223, 225, 229, 234, 289, 290, 296, 301, 316, 402, 407, 409, 455, 481, 489, 495, 496, 497, 507, 515, 529, 537, 552, 553, 564, 597, 620, 632, 651, 652, 661, 665, 667, 669, 670, 671, 672, 680, 681, 682, 683, 685, 818, 841, 848, 849, 850, 853, 862, 896, 928, 929, 954, 969, 983, 984, 986, 1002, 1016, 1017, 1022, 1023, 1026, 1027, 1029, 1031, 1033], "gradient": [7, 46, 66, 110, 117, 129, 132, 135, 136, 157, 158, 167, 178, 219, 229, 234, 303, 309, 389, 401, 402, 412, 445, 455, 459, 460, 481, 483, 489, 494, 496, 497, 508, 513, 546, 547, 552, 553, 554, 555, 557, 558, 564, 579, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 627, 628, 632, 641, 642, 651, 652, 661, 662, 665, 667, 669, 670, 671, 673, 680, 685, 687, 688, 733, 734, 740, 742, 789, 792, 793, 794, 815, 818, 848, 849, 850, 853, 865, 866, 896, 954, 977, 980, 983, 984, 985, 986, 1000, 1002, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1035, 1037], "descent": [7, 13, 167, 178, 185, 219, 229, 234, 316, 407, 409, 464, 465, 471, 481, 489, 496, 524, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 564, 632, 639, 640, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 661, 665, 667, 669, 670, 671, 674, 675, 676, 677, 680, 687, 818, 849, 850, 853, 892, 896, 954, 977, 984, 986, 995, 1002, 1013, 1017, 1022, 1025, 1026, 1027, 1029, 1031, 1033, 1035, 1036, 1037], "nusvr": [7, 362, 898, 995, 1024, 1030, 1032, 1033, 1034, 1036, 1037], "nu": [7, 9, 11, 161, 214, 229, 333, 362, 409, 412, 612, 670, 894, 895, 896, 986, 994, 995, 1033, 1037], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 145, 152, 160, 181, 187, 204, 205, 212, 216, 234, 235, 239, 242, 259, 261, 262, 266, 287, 300, 303, 327, 330, 331, 333, 334, 335, 337, 338, 339, 342, 344, 345, 348, 362, 364, 365, 381, 382, 385, 387, 389, 399, 400, 402, 404, 405, 406, 407, 409, 412, 413, 414, 430, 436, 437, 438, 440, 442, 443, 444, 446, 457, 458, 460, 461, 475, 476, 477, 478, 480, 482, 490, 502, 505, 514, 517, 524, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 544, 545, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 615, 616, 618, 624, 631, 633, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 682, 684, 685, 686, 688, 692, 712, 727, 755, 760, 761, 762, 763, 765, 766, 767, 769, 770, 789, 792, 793, 803, 816, 819, 820, 821, 827, 828, 829, 830, 831, 834, 835, 836, 838, 839, 840, 842, 843, 844, 849, 850, 857, 859, 864, 872, 876, 879, 890, 892, 893, 894, 895, 896, 897, 898, 899, 912, 926, 928, 929, 943, 949, 969, 972, 973, 974, 976, 977, 978, 980, 981, 982, 984, 985, 986, 990, 994, 996, 1002, 1006, 1009, 1012, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1033, 1035], "gradientboostingregressor": [7, 125, 126, 132, 135, 362, 381, 387, 547, 555, 625, 626, 976, 980, 981, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "forward": [7, 112, 149, 236, 315, 362, 376, 393, 411, 501, 502, 532, 536, 546, 552, 553, 578, 579, 595, 678, 679, 852, 856, 976, 1001, 1034], "wise": [7, 26, 48, 160, 201, 229, 271, 303, 348, 362, 389, 400, 402, 406, 407, 411, 451, 524, 527, 530, 534, 538, 539, 542, 543, 546, 548, 549, 552, 553, 585, 588, 589, 591, 592, 593, 599, 633, 645, 693, 746, 820, 869, 882, 883, 886, 953, 955, 956, 957, 958, 961, 972, 974, 980, 981, 994, 1001, 1022, 1027, 1030, 1031, 1032], "fashion": [7, 117, 123, 208, 270, 363, 389, 399, 400, 402, 407, 409, 546, 550, 551, 552, 553, 557, 558, 559, 595, 620, 818, 841, 856, 859, 865, 876, 900, 901, 902, 903, 951, 970, 976, 980, 990, 1031], "notic": [7, 25, 26, 53, 57, 80, 115, 117, 118, 125, 148, 179, 184, 229, 242, 258, 259, 261, 262, 264, 270, 271, 281, 308, 347, 348, 349, 358, 381, 390, 406, 489, 534, 556, 969, 979, 980, 986, 1015, 1019, 1035], "faster": [7, 19, 39, 64, 73, 95, 117, 118, 122, 125, 149, 171, 176, 186, 200, 202, 215, 216, 218, 235, 281, 283, 299, 314, 316, 317, 347, 348, 349, 362, 370, 376, 384, 385, 389, 401, 402, 407, 411, 412, 414, 436, 440, 442, 444, 445, 446, 455, 501, 524, 525, 526, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 546, 552, 553, 554, 555, 636, 639, 640, 645, 646, 651, 652, 653, 654, 655, 656, 665, 667, 677, 680, 684, 688, 718, 748, 770, 771, 772, 832, 833, 837, 849, 850, 867, 869, 871, 881, 885, 929, 949, 969, 973, 976, 981, 983, 984, 987, 992, 994, 995, 996, 1000, 1003, 1011, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "10_000": [7, 25, 75, 117, 125, 169, 176, 233, 264, 281, 552, 553, 557, 558, 869], "vari": [7, 34, 44, 46, 55, 62, 75, 118, 119, 121, 148, 167, 170, 171, 189, 191, 194, 198, 226, 234, 251, 257, 261, 264, 296, 301, 303, 308, 319, 321, 328, 334, 337, 358, 362, 364, 371, 389, 434, 438, 439, 493, 501, 507, 508, 515, 552, 553, 557, 558, 639, 640, 643, 644, 645, 646, 647, 648, 653, 654, 655, 656, 674, 677, 696, 755, 808, 811, 816, 818, 819, 849, 853, 857, 872, 889, 897, 900, 901, 954, 972, 975, 976, 980, 983, 984, 993, 996, 1004, 1029, 1030, 1038], "relev": [7, 9, 19, 77, 83, 147, 149, 167, 179, 194, 261, 262, 268, 358, 362, 364, 371, 373, 375, 376, 378, 380, 381, 382, 389, 390, 393, 404, 405, 411, 412, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 534, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 718, 732, 748, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 870, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 980, 981, 986, 997, 1001, 1025, 1030, 1034, 1036], "select": [7, 9, 36, 44, 55, 57, 62, 68, 69, 71, 74, 76, 82, 92, 94, 107, 112, 114, 120, 122, 125, 132, 139, 146, 150, 157, 159, 170, 171, 173, 176, 178, 180, 184, 204, 208, 215, 218, 219, 222, 229, 233, 235, 245, 246, 253, 259, 260, 261, 262, 266, 285, 303, 308, 309, 315, 319, 322, 323, 326, 329, 334, 342, 345, 347, 348, 349, 358, 362, 363, 365, 371, 373, 374, 376, 378, 384, 388, 389, 399, 402, 403, 404, 407, 409, 410, 412, 436, 438, 439, 440, 442, 444, 446, 451, 452, 453, 457, 459, 460, 465, 466, 469, 481, 482, 485, 486, 489, 490, 493, 494, 495, 497, 505, 508, 525, 527, 528, 533, 534, 537, 542, 544, 551, 552, 553, 556, 558, 574, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 620, 624, 625, 638, 639, 640, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 664, 666, 669, 671, 675, 676, 684, 685, 690, 705, 709, 711, 746, 780, 782, 783, 787, 788, 789, 792, 793, 794, 795, 803, 814, 815, 816, 818, 820, 834, 835, 836, 838, 840, 842, 843, 844, 852, 853, 857, 862, 868, 872, 889, 892, 893, 897, 900, 901, 902, 903, 908, 949, 950, 974, 975, 977, 980, 981, 983, 984, 986, 990, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1013, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "ham": [7, 443, 450, 574, 692, 696, 702, 726, 733, 770, 771, 772, 786, 983], "loss": [7, 24, 25, 26, 27, 118, 123, 124, 125, 126, 127, 152, 153, 167, 178, 182, 190, 193, 202, 204, 205, 207, 208, 212, 218, 219, 235, 269, 298, 299, 308, 316, 326, 331, 332, 336, 342, 347, 387, 389, 400, 401, 407, 412, 457, 458, 489, 501, 502, 525, 531, 532, 533, 536, 540, 545, 546, 547, 551, 552, 553, 554, 555, 558, 636, 639, 642, 651, 652, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 696, 699, 702, 715, 726, 727, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 786, 789, 792, 793, 803, 814, 815, 818, 849, 850, 852, 853, 856, 857, 865, 866, 867, 872, 892, 893, 898, 899, 901, 903, 929, 933, 973, 976, 984, 988, 993, 994, 995, 996, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "eustach": [7, 8, 10, 1004, 1024, 1025], "diemert": [7, 8, 10, 1004, 1024, 1025], "maria": [7, 126, 132, 149, 165, 402, 1033, 1034, 1035, 1036, 1037], "telenczuk": [7, 126, 132, 149, 165, 1031, 1034, 1035, 1037], "github": [7, 8, 12, 26, 71, 72, 111, 117, 119, 120, 126, 128, 129, 132, 135, 146, 157, 165, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 281, 300, 309, 314, 315, 317, 318, 324, 356, 370, 374, 375, 379, 380, 381, 382, 384, 387, 389, 390, 392, 396, 398, 445, 455, 501, 529, 684, 685, 688, 983, 999, 1000, 1003, 1004, 1015, 1027, 1032], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 117, 123, 124, 126, 127, 131, 132, 152, 155, 157, 159, 161, 165, 180, 200, 202, 207, 217, 218, 222, 224, 226, 232, 246, 248, 249, 262, 265, 281, 303, 304, 307, 308, 347, 348, 370, 371, 374, 376, 380, 381, 382, 384, 387, 392, 402, 435, 445, 455, 501, 527, 529, 534, 664, 684, 688, 698, 983, 998, 1003, 1027, 1029, 1032], "maikia": [7, 126, 132, 165, 1030, 1031, 1033, 1034], "lemaitre58": [7, 132, 152, 157, 159, 161, 222, 303], "gmail": [7, 11, 14, 16, 24, 42, 48, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 117, 123, 124, 126, 127, 131, 132, 152, 155, 157, 159, 161, 180, 200, 202, 217, 218, 222, 224, 232, 246, 248, 249, 262, 265, 303, 308, 347, 348], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 262, 265, 267, 274, 279, 281, 283, 289, 290, 291, 293, 294, 297, 300, 303, 304, 305, 306, 307, 308, 322, 323, 324, 325, 327, 338, 339, 342, 343, 347, 348, 349, 370, 389, 396, 996, 1004], "hamming_loss": [7, 696, 786, 980, 1024, 1028, 1031], "mean_squared_error": [7, 125, 126, 196, 200, 202, 204, 206, 218, 358, 409, 734, 744, 980, 1023, 1025, 1032, 1033], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 62, 64, 65, 71, 78, 79, 80, 92, 96, 101, 102, 115, 121, 141, 144, 172, 190, 195, 198, 203, 206, 209, 213, 217, 224, 247, 249, 250, 251, 252, 264, 267, 275, 286, 287, 288, 293, 339, 340, 344, 348, 358, 363, 378, 385, 387, 389, 402, 406, 407, 436, 440, 441, 443, 445, 450, 452, 453, 454, 455, 464, 465, 466, 529, 537, 546, 547, 548, 549, 552, 553, 620, 639, 640, 645, 646, 653, 654, 655, 656, 670, 682, 684, 686, 688, 787, 788, 793, 823, 826, 841, 895, 915, 928, 929, 945, 949, 969, 970, 975, 977, 1013, 1026, 1027, 1031, 1032, 1038], "fetch_20newsgroups_vector": [7, 215, 233, 371, 1022, 1032, 1034], "spars": [7, 12, 13, 17, 39, 40, 54, 55, 57, 77, 83, 94, 107, 117, 130, 167, 178, 195, 199, 216, 219, 233, 235, 262, 281, 314, 318, 342, 346, 349, 350, 356, 362, 368, 370, 371, 372, 376, 378, 379, 380, 381, 387, 388, 389, 401, 402, 403, 409, 410, 412, 413, 417, 424, 431, 433, 435, 436, 437, 439, 440, 442, 443, 444, 445, 446, 450, 452, 453, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 480, 481, 482, 489, 490, 496, 501, 516, 517, 519, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 574, 575, 578, 579, 581, 582, 583, 584, 586, 587, 596, 597, 598, 599, 600, 601, 602, 622, 623, 624, 626, 631, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 705, 706, 707, 721, 722, 723, 726, 730, 731, 732, 746, 747, 752, 753, 755, 756, 758, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 782, 783, 786, 789, 792, 793, 803, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 874, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 908, 910, 911, 912, 913, 918, 926, 929, 930, 933, 934, 935, 943, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 966, 970, 973, 976, 977, 978, 980, 981, 983, 993, 995, 996, 1001, 1002, 1013, 1014, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "generate_data": [7, 33], "load_diabet": [7, 126, 135, 138, 149, 165, 185, 187, 188, 189, 196, 197, 240, 257, 318, 409, 551, 555, 561, 666, 694, 813, 814, 815, 901, 903, 988, 1010, 1013, 1028, 1033, 1036], "elif": [7, 8, 16, 34, 180, 202, 237, 239, 248, 286, 868], "subset": [7, 19, 20, 26, 27, 32, 70, 71, 80, 81, 119, 121, 122, 138, 146, 149, 171, 189, 201, 215, 216, 217, 218, 232, 234, 238, 239, 259, 262, 264, 270, 271, 273, 308, 309, 315, 322, 326, 347, 348, 349, 358, 371, 376, 384, 387, 389, 399, 400, 402, 403, 406, 409, 410, 412, 419, 430, 442, 457, 459, 460, 462, 481, 482, 485, 486, 490, 501, 542, 543, 544, 546, 548, 549, 550, 552, 554, 555, 556, 557, 560, 562, 595, 603, 622, 632, 633, 634, 635, 644, 648, 651, 659, 661, 664, 667, 668, 669, 670, 671, 672, 690, 696, 697, 706, 709, 711, 723, 726, 747, 749, 783, 786, 791, 816, 818, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 839, 842, 849, 858, 887, 888, 892, 894, 897, 900, 902, 908, 949, 969, 976, 980, 981, 991, 993, 995, 996, 1015, 1025, 1030, 1031, 1033, 1035], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 59, 80, 109, 110, 112, 116, 133, 136, 165, 167, 173, 196, 204, 205, 217, 234, 236, 260, 261, 267, 271, 275, 279, 332, 339, 358, 362, 383, 389, 399, 400, 402, 406, 407, 409, 413, 431, 434, 436, 437, 438, 439, 441, 443, 444, 446, 448, 449, 464, 465, 471, 474, 529, 540, 546, 557, 562, 590, 604, 613, 625, 626, 627, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 672, 674, 677, 681, 683, 685, 687, 700, 709, 721, 722, 727, 728, 730, 736, 746, 756, 761, 763, 764, 765, 766, 770, 773, 775, 776, 779, 780, 781, 782, 783, 785, 796, 798, 813, 817, 830, 832, 833, 870, 871, 872, 878, 882, 892, 893, 918, 931, 972, 974, 976, 977, 978, 980, 982, 983, 984, 988, 990, 993, 995, 1010, 1013, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "given": [7, 10, 11, 27, 37, 49, 58, 60, 78, 85, 96, 100, 118, 128, 130, 132, 152, 159, 170, 171, 184, 200, 201, 204, 218, 222, 229, 233, 234, 236, 238, 240, 257, 261, 262, 263, 264, 270, 287, 288, 289, 305, 309, 316, 342, 347, 348, 349, 355, 362, 364, 371, 375, 376, 378, 380, 382, 384, 385, 387, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 419, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 449, 451, 452, 453, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 480, 489, 494, 496, 498, 516, 526, 527, 529, 531, 532, 533, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 586, 587, 594, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 624, 625, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 680, 681, 683, 684, 690, 691, 692, 693, 694, 695, 697, 698, 699, 705, 707, 710, 711, 713, 716, 718, 719, 726, 728, 729, 732, 744, 747, 748, 750, 751, 756, 766, 770, 773, 774, 776, 779, 780, 781, 784, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 801, 803, 807, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 878, 879, 881, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 916, 917, 918, 939, 964, 968, 969, 972, 974, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 996, 1004, 1006, 1010, 1011, 1013, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039], "round": [7, 9, 25, 85, 118, 164, 165, 207, 218, 261, 267, 305, 307, 347, 389, 443, 449, 450, 557, 558, 586, 587, 590, 620, 685, 706, 791, 801, 857, 889, 904, 906, 970, 984, 996, 1024, 1026, 1028, 1030, 1031, 1033, 1035, 1036, 1038], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 80, 116, 128, 135, 149, 157, 165, 173, 188, 193, 214, 224, 232, 264, 268, 287, 333, 336, 348, 349, 362, 371, 373, 380, 392, 406, 407, 409, 410, 412, 439, 457, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 562, 563, 574, 576, 577, 581, 582, 583, 584, 625, 791, 795, 796, 798, 811, 938, 951, 954, 969, 975, 976, 980, 986, 991, 1001, 1004, 1010, 1015, 1024, 1034], "chang": [7, 16, 25, 26, 55, 95, 99, 100, 115, 118, 126, 153, 164, 169, 170, 173, 201, 202, 204, 205, 240, 241, 251, 256, 261, 268, 271, 307, 313, 314, 315, 316, 317, 318, 319, 323, 334, 349, 353, 358, 362, 363, 364, 371, 374, 378, 379, 380, 381, 384, 387, 389, 393, 402, 406, 409, 410, 412, 414, 427, 430, 433, 436, 437, 440, 442, 445, 447, 452, 455, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 486, 487, 489, 497, 501, 502, 505, 506, 507, 515, 519, 524, 526, 527, 528, 529, 530, 531, 532, 533, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 574, 575, 581, 582, 583, 584, 586, 587, 590, 595, 603, 604, 606, 607, 608, 610, 612, 613, 615, 616, 618, 620, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 683, 685, 693, 697, 700, 705, 709, 710, 721, 722, 728, 729, 733, 747, 748, 749, 770, 776, 777, 779, 785, 787, 788, 789, 790, 791, 792, 793, 794, 796, 798, 803, 807, 808, 810, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 842, 843, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 864, 865, 871, 872, 880, 881, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 910, 912, 913, 924, 929, 939, 946, 947, 948, 950, 969, 970, 971, 979, 980, 981, 983, 990, 993, 994, 995, 996, 998, 1001, 1006, 1013, 1015, 1020, 1021], "affect": [7, 25, 80, 159, 169, 170, 204, 225, 240, 264, 271, 308, 319, 358, 362, 363, 364, 372, 389, 391, 400, 402, 405, 406, 408, 410, 413, 415, 437, 443, 450, 466, 468, 472, 542, 543, 562, 692, 705, 780, 789, 792, 793, 794, 803, 807, 808, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 872, 873, 883, 897, 979, 983, 995, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 380, 400, 406, 827, 982, 1036], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 61, 71, 103, 115, 116, 118, 123, 125, 139, 165, 173, 193, 204, 205, 207, 208, 215, 218, 234, 235, 261, 264, 270, 271, 274, 279, 297, 298, 309, 325, 334, 337, 347, 348, 349, 352, 356, 382, 389, 403, 410, 651, 652, 892, 893, 899, 919, 990, 1010], "start_tim": [7, 10, 19, 119, 120, 132, 152, 189, 222], "elapsed_tim": [7, 39, 67, 119, 120, 132, 217], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 102, 141, 160, 170, 186, 190, 224, 260, 261, 265, 269, 342, 349, 362, 370, 371, 376, 385, 389, 402, 403, 410, 411, 413, 414, 415, 419, 421, 425, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 480, 485, 486, 487, 489, 491, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 576, 577, 581, 584, 585, 586, 587, 588, 589, 590, 591, 595, 596, 603, 604, 606, 607, 608, 609, 610, 612, 613, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 758, 761, 767, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 803, 806, 809, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 852, 855, 858, 859, 865, 866, 868, 870, 872, 873, 874, 875, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 910, 912, 913, 916, 926, 927, 943, 955, 961, 966, 970, 980, 981, 983, 984, 990, 995, 996, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 115, 124, 126, 215, 216, 218, 308], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 68, 94, 107, 129, 167, 199, 236, 348, 349, 369, 370, 371, 378, 387, 389, 402, 410, 442, 457, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 503, 519, 524, 530, 531, 532, 533, 535, 536, 537, 538, 539, 541, 560, 561, 562, 563, 574, 575, 577, 580, 581, 582, 625, 626, 627, 657, 678, 679, 694, 706, 789, 792, 793, 800, 801, 803, 815, 851, 856, 865, 900, 901, 902, 903, 907, 917, 937, 969, 976, 980, 995, 1006, 1015, 1016, 1017, 1022, 1030, 1033, 1034, 1035, 1036, 1037], "necessari": [7, 13, 116, 184, 200, 205, 246, 261, 262, 268, 283, 354, 362, 371, 374, 375, 376, 377, 378, 379, 380, 384, 387, 402, 404, 409, 445, 455, 481, 482, 484, 485, 486, 487, 488, 490, 527, 637, 638, 639, 645, 649, 650, 653, 654, 655, 656, 657, 658, 664, 666, 668, 669, 684, 688, 785, 855, 864, 875, 879, 885, 969, 972, 976, 979, 982, 990, 996, 1015, 1022, 1030], "defin": [7, 9, 12, 27, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 111, 112, 113, 132, 149, 152, 159, 160, 161, 171, 172, 179, 201, 208, 217, 218, 229, 233, 236, 240, 242, 246, 251, 261, 262, 264, 268, 270, 271, 272, 273, 281, 303, 314, 334, 342, 347, 348, 362, 372, 375, 376, 377, 378, 382, 383, 385, 387, 388, 389, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 412, 418, 423, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 452, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 482, 512, 513, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 620, 621, 622, 623, 625, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 689, 690, 692, 701, 703, 709, 714, 715, 716, 717, 720, 723, 730, 733, 737, 738, 740, 742, 743, 745, 746, 749, 752, 758, 773, 777, 782, 783, 787, 788, 789, 792, 793, 795, 803, 811, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 879, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 916, 918, 921, 927, 938, 940, 964, 969, 970, 976, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 990, 992, 994, 995, 996, 1001, 1011, 1014, 1017, 1019, 1024, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 69, 70, 76, 81, 90, 105, 121, 124, 157, 167, 169, 170, 171, 176, 184, 200, 202, 236, 243, 245, 248, 251, 253, 256, 267, 268, 270, 271, 338, 342, 347, 349, 356, 358, 363, 365, 369, 370, 371, 373, 374, 376, 377, 379, 380, 381, 382, 387, 388, 392, 396, 398, 399, 403, 410, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 489, 501, 502, 508, 560, 565, 574, 575, 578, 579, 581, 582, 584, 593, 597, 610, 620, 622, 623, 631, 649, 651, 665, 667, 672, 680, 682, 685, 686, 692, 694, 700, 707, 709, 721, 722, 730, 733, 775, 776, 779, 780, 787, 788, 789, 795, 803, 811, 816, 818, 819, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 852, 853, 854, 857, 859, 865, 866, 872, 873, 890, 894, 895, 896, 897, 898, 908, 910, 912, 913, 916, 920, 921, 943, 944, 951, 954, 967, 970, 972, 977, 979, 980, 981, 982, 983, 984, 990, 992, 996, 1003, 1004, 1008, 1013, 1014, 1015, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 85, 145, 146, 149, 169, 170, 179, 182, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 199, 203, 204, 205, 209, 215, 216, 237, 243, 274, 310, 317, 332, 339, 343, 347, 358, 371, 378, 389, 405, 411, 458, 475, 476, 477, 542, 586, 587, 590, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 892, 893, 894, 895, 896, 897, 898, 964, 974, 976, 994, 995, 1013, 1022, 1024, 1027, 1029, 1034, 1036], "toarrai": [7, 326, 356, 403, 410, 559, 575, 581, 583, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 865, 882, 883, 951, 954, 970, 983, 990], "count_nonzero": [7, 10, 362], "configur": [7, 10, 71, 72, 171, 241, 243, 310, 347, 361, 374, 376, 378, 382, 384, 387, 389, 392, 393, 398, 403, 410, 411, 426, 435, 436, 438, 440, 442, 445, 455, 457, 461, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 575, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 619, 620, 621, 622, 623, 625, 628, 631, 632, 633, 634, 635, 681, 682, 683, 684, 685, 687, 688, 780, 836, 841, 844, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 890, 946, 947, 948, 977, 980, 990, 995, 1000, 1015, 1017, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039], "penalti": [7, 10, 30, 82, 167, 178, 179, 184, 189, 193, 200, 204, 215, 216, 219, 231, 269, 297, 316, 326, 339, 347, 362, 384, 387, 401, 404, 407, 411, 464, 465, 466, 467, 468, 469, 471, 495, 524, 530, 531, 532, 533, 535, 536, 540, 541, 590, 636, 639, 640, 641, 642, 645, 646, 647, 650, 651, 652, 653, 654, 655, 661, 662, 663, 665, 669, 671, 673, 674, 680, 803, 872, 892, 893, 895, 897, 898, 899, 969, 976, 979, 984, 990, 994, 995, 1013, 1015, 1024, 1027, 1029, 1031, 1032, 1034, 1035, 1037, 1038], "elasticnet": [7, 10, 181, 191, 269, 274, 362, 382, 387, 407, 640, 645, 650, 651, 652, 653, 654, 655, 656, 661, 669, 671, 674, 976, 994, 1022, 1023, 1026, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036], "001": [7, 13, 32, 44, 62, 149, 152, 170, 184, 209, 229, 246, 259, 261, 263, 325, 348, 373, 382, 406, 529, 530, 532, 539, 620, 637, 638, 639, 640, 645, 646, 653, 654, 655, 656, 659, 660, 661, 669, 670, 671, 672, 674, 677, 682, 683, 686, 687, 787, 788, 849, 850, 887, 888, 894, 895, 896, 897, 898, 969, 1006, 1015], "modified_hub": [7, 669, 994], "fit_intercept": [7, 179, 180, 186, 205, 214, 229, 269, 310, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 892, 893, 899, 976, 994, 1026, 1030, 1031, 1032, 1034, 1035, 1036], "tol": [7, 10, 17, 73, 95, 123, 149, 164, 180, 191, 193, 207, 208, 214, 216, 229, 240, 247, 249, 300, 316, 342, 347, 378, 382, 409, 414, 436, 440, 442, 445, 452, 455, 464, 465, 471, 475, 476, 477, 524, 525, 526, 528, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 552, 553, 554, 555, 595, 620, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 665, 667, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 684, 686, 688, 787, 788, 803, 841, 849, 850, 887, 888, 892, 893, 894, 895, 896, 897, 898, 966, 976, 994, 995, 1011, 1015, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "n_iter_no_chang": [7, 118, 123, 208, 316, 347, 381, 389, 409, 552, 553, 554, 555, 659, 660, 661, 669, 670, 671, 849, 850, 994, 1030, 1033], "l1_ratio": [7, 10, 14, 184, 185, 191, 269, 274, 362, 387, 407, 531, 533, 540, 639, 640, 645, 651, 652, 653, 654, 655, 656, 661, 669, 671, 674, 976, 994, 1023, 1025, 1027, 1034, 1036], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 146, 167, 168, 169, 174, 178, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 202, 203, 215, 218, 219, 243, 299, 310, 315, 316, 317, 347, 348, 349, 362, 372, 376, 378, 389, 391, 401, 404, 405, 407, 411, 412, 415, 425, 445, 458, 460, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 489, 517, 519, 520, 524, 528, 530, 532, 535, 536, 541, 545, 547, 549, 551, 553, 555, 558, 561, 563, 575, 582, 586, 590, 602, 604, 607, 620, 628, 629, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 694, 696, 709, 712, 721, 726, 730, 735, 742, 745, 767, 769, 777, 778, 782, 783, 786, 804, 815, 818, 825, 826, 835, 843, 850, 853, 865, 872, 892, 893, 894, 895, 896, 897, 898, 901, 903, 971, 974, 976, 994, 995, 1013, 1022, 1026, 1027, 1029, 1030, 1031, 1033, 1034, 1035, 1036], "misclassif": [7, 112, 786, 994, 995, 996, 1023], "ratio": [7, 53, 66, 73, 104, 167, 233, 235, 249, 254, 277, 362, 376, 402, 404, 406, 409, 443, 449, 486, 487, 508, 534, 542, 543, 544, 624, 651, 703, 705, 709, 717, 722, 728, 731, 774, 775, 776, 779, 785, 815, 818, 838, 885, 949, 974, 986, 996, 1011, 1037], "sparsifi": [7, 184, 362, 651, 652, 659, 661, 669, 670, 671, 892, 964, 1024], "05": [7, 8, 14, 24, 26, 28, 30, 37, 44, 52, 60, 62, 64, 65, 67, 75, 85, 91, 100, 115, 118, 123, 125, 130, 138, 142, 145, 149, 157, 160, 161, 170, 180, 181, 199, 202, 214, 219, 225, 226, 227, 229, 246, 248, 249, 252, 253, 261, 262, 268, 270, 271, 272, 286, 289, 294, 303, 305, 313, 317, 323, 325, 339, 345, 350, 373, 411, 443, 449, 585, 588, 589, 591, 606, 607, 608, 612, 613, 615, 616, 618, 625, 626, 642, 683, 687, 748, 789, 841, 892, 893, 976, 984, 990], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 101, 105, 106, 109, 115, 118, 121, 122, 123, 140, 141, 147, 148, 152, 160, 165, 171, 173, 199, 200, 218, 224, 229, 232, 233, 234, 236, 238, 239, 246, 248, 249, 256, 259, 261, 262, 269, 270, 272, 275, 279, 281, 288, 290, 291, 297, 304, 305, 306, 309, 319, 322, 323, 326, 334, 341, 344, 347, 348, 349, 356, 387, 389, 412, 430, 438, 443, 449, 457, 500, 508, 543, 562, 563, 575, 590, 625, 626, 774, 789, 803, 814, 818, 820, 823, 887, 888, 1013, 1014, 1015, 1031, 1034], "support_vectors_": [7, 10, 16, 335, 338, 339, 894, 895, 896, 897, 898, 995], "squared_error": [7, 105, 125, 126, 316, 409, 551, 552, 553, 555, 558, 664, 669, 671, 686, 901, 903, 994, 996, 1035, 1038, 1039], "learning_r": [7, 111, 112, 124, 125, 126, 127, 226, 281, 298, 300, 314, 316, 409, 546, 547, 552, 553, 554, 555, 661, 669, 670, 671, 685, 848, 849, 850, 977, 987, 994, 1023, 1031, 1035], "max_depth": [7, 31, 111, 113, 114, 117, 121, 124, 125, 126, 127, 130, 131, 133, 164, 222, 258, 273, 315, 316, 352, 354, 355, 356, 388, 389, 409, 546, 547, 550, 551, 552, 553, 554, 555, 557, 558, 559, 792, 793, 816, 900, 901, 902, 903, 904, 905, 906, 969, 987, 996, 1031, 1033], "n_estim": [7, 10, 26, 31, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 130, 131, 134, 164, 173, 222, 238, 242, 248, 258, 273, 305, 313, 315, 362, 388, 389, 409, 411, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 625, 792, 793, 969, 986, 987, 1019, 1030, 1038], "n_tree": 7, "loop": [7, 8, 115, 125, 170, 256, 266, 347, 356, 362, 376, 377, 382, 402, 406, 411, 639, 640, 645, 646, 652, 653, 654, 655, 656, 969, 993, 994, 1010, 1025, 1026, 1029, 1034, 1035], "previous": [7, 53, 57, 71, 112, 158, 170, 259, 268, 317, 371, 384, 387, 392, 402, 407, 410, 433, 436, 447, 517, 527, 534, 642, 651, 652, 659, 661, 669, 670, 671, 892, 948, 976, 990, 1000, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "subsequ": [7, 32, 58, 75, 98, 112, 146, 188, 202, 263, 266, 281, 283, 334, 358, 376, 378, 382, 389, 402, 403, 409, 412, 430, 489, 501, 546, 547, 552, 554, 555, 659, 661, 669, 792, 793, 820, 821, 824, 827, 828, 829, 830, 831, 849, 867, 871, 970, 979, 981, 1031, 1032, 1036, 1038], "relax": [7, 402, 410, 446, 993, 1029], "sgd": [7, 8, 167, 178, 207, 214, 219, 229, 269, 298, 299, 316, 347, 358, 364, 497, 505, 624, 642, 659, 660, 661, 664, 669, 670, 671, 672, 849, 850, 969, 984, 1002, 1017, 1022, 1025, 1026, 1027, 1029, 1033, 1035], "svr": [7, 10, 167, 228, 244, 313, 329, 345, 362, 549, 560, 561, 586, 587, 636, 671, 789, 795, 893, 895, 897, 973, 1013, 1022, 1024, 1026, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "optim": [7, 13, 27, 53, 54, 57, 60, 72, 78, 79, 95, 111, 124, 126, 148, 149, 152, 153, 156, 157, 158, 159, 160, 184, 188, 189, 193, 208, 216, 235, 259, 266, 269, 274, 279, 285, 300, 303, 308, 317, 325, 336, 342, 347, 348, 349, 358, 362, 365, 370, 373, 376, 378, 379, 387, 389, 392, 397, 399, 402, 404, 406, 407, 409, 411, 412, 413, 437, 441, 442, 443, 445, 450, 454, 455, 465, 466, 472, 524, 527, 528, 530, 532, 536, 550, 551, 552, 553, 567, 603, 604, 612, 613, 628, 631, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 676, 677, 680, 683, 685, 687, 688, 694, 715, 722, 789, 803, 834, 835, 836, 838, 840, 841, 842, 843, 844, 849, 850, 868, 880, 884, 885, 892, 893, 894, 895, 896, 897, 898, 972, 973, 974, 975, 976, 980, 981, 982, 983, 984, 985, 994, 995, 996, 1000, 1004, 1010, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038], "few": [7, 14, 19, 39, 46, 52, 99, 122, 155, 158, 159, 189, 198, 200, 202, 218, 235, 236, 246, 263, 264, 268, 299, 303, 307, 313, 314, 315, 316, 317, 318, 319, 322, 342, 349, 362, 371, 372, 373, 376, 378, 388, 390, 393, 396, 399, 400, 402, 406, 407, 409, 411, 412, 430, 442, 554, 555, 581, 584, 648, 685, 688, 885, 929, 948, 976, 977, 979, 980, 983, 984, 993, 995, 996, 1004, 1006, 1013, 1014, 1015, 1028, 1038], "drawn": [7, 52, 80, 115, 148, 152, 161, 169, 240, 268, 285, 347, 372, 402, 408, 409, 412, 414, 462, 463, 464, 465, 466, 467, 468, 469, 508, 516, 526, 548, 549, 556, 604, 620, 625, 634, 828, 884, 885, 902, 903, 976, 990, 992, 1025], "boost": [7, 110, 111, 112, 113, 117, 129, 132, 135, 136, 167, 309, 382, 389, 401, 411, 441, 459, 460, 483, 489, 494, 497, 508, 513, 546, 547, 552, 553, 554, 555, 557, 558, 625, 626, 627, 628, 733, 734, 740, 742, 789, 792, 793, 794, 815, 818, 853, 865, 866, 976, 980, 1000, 1002, 1017, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1035], "detriment": [7, 148, 363, 411, 976], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 122, 165, 173, 200, 230, 232, 240, 246, 264, 272, 304, 308, 309, 325, 347, 348, 1011], "add_subplot": [7, 16, 25, 27, 42, 45, 64, 67, 90, 101, 102, 111, 171, 197, 215, 223, 225, 322, 323, 383], "line1": [7, 12, 224], "tab": [7, 53, 112, 129, 132, 152, 157, 159, 188, 189, 314, 403, 1029], "blue": [7, 20, 21, 26, 34, 92, 95, 112, 115, 119, 127, 129, 132, 134, 147, 157, 159, 176, 180, 188, 189, 196, 198, 224, 233, 255, 256, 261, 298, 308, 314, 324, 373, 402, 407], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 111, 161, 164, 165, 169, 171, 172, 176, 189, 195, 197, 198, 200, 202, 215, 216, 234, 261, 263, 267, 272, 273, 276, 286, 303, 304, 308, 325, 348, 349, 352], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 106, 111, 112, 119, 161, 171, 176, 189, 191, 195, 197, 198, 200, 202, 204, 215, 234, 246, 261, 263, 267, 272, 273, 279, 286, 303, 304, 308, 313, 325, 342, 348, 352, 1011], "spine": [7, 14, 211, 303], "set_color": [7, 211], "get_color": 7, "yaxi": [7, 10, 45, 60, 90, 101, 102, 118, 197, 221, 223, 226, 246, 281, 286, 347], "tick_param": [7, 14, 135, 246, 261, 307, 325], "ax2": [7, 57, 60, 65, 67, 80, 92, 122, 165, 173, 200, 230, 240, 246, 264, 272, 291, 304, 308, 309, 325, 347], "frameon": [7, 206], "line2": [7, 12, 224, 343], "orang": [7, 53, 92, 96, 97, 103, 112, 127, 129, 159, 165, 188, 189, 210, 237, 249, 284, 292, 314, 355, 981], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 61, 164, 200, 202, 236, 243, 256, 263, 305, 326, 347, 348, 349, 383, 387, 865], "prediction_perform": 7, "4948": 7, "2675": 7, "056114": 7, "1847": 7, "3264": 7, "042372": 7, "997": [7, 40, 149], "3383": 7, "034881": 7, "802": [7, 149, 373], "3582": 7, "031969": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000180": 7, "5289": 7, "8022": [7, 389, 466, 1031], "000258": 7, "5193": 7, "8353": 7, "000418": 7, "124": [7, 241, 244, 409, 1024], "5131": [7, 1027], "3279": 7, "000641": 7, "178": [7, 12, 15, 205, 219, 324, 328, 373, 382, 503, 836], "5149": 7, "0779": 7, "000881": 7, "4066": 7, "4812": 7, "000158": 7, "3551": 7, "1723": 7, "000184": 7, "3445": 7, "2171": 7, "000224": 7, "3433": 7, "0358": 7, "000260": 7, "3456": 7, "0602": 7, "000297": 7, "deduc": 7, "guarante": [7, 8, 80, 81, 170, 208, 233, 279, 281, 303, 348, 358, 364, 370, 384, 385, 402, 406, 407, 410, 439, 529, 638, 651, 652, 661, 665, 667, 669, 671, 680, 687, 806, 809, 832, 833, 870, 872, 885, 886, 899, 972, 976, 977, 979, 983, 988, 992, 996, 1014, 1032], "aspect": [7, 58, 86, 95, 156, 171, 221, 229, 290, 340, 362, 363, 364, 376, 389, 390, 402, 651, 652, 996, 1004], "915": [7, 8, 15], "plot_model_complexity_influ": [7, 15], "doesn": [8, 200, 236, 247, 299, 334, 384, 389, 392, 393, 402, 410, 411, 415, 427, 468, 625, 626, 659, 661, 669, 709, 816, 819, 824, 834, 835, 849, 979, 980, 996, 1026], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 101, 103, 105, 106, 111, 112, 115, 116, 123, 124, 125, 126, 127, 131, 132, 149, 153, 155, 156, 157, 160, 161, 167, 170, 171, 172, 173, 179, 181, 184, 187, 194, 197, 198, 199, 200, 201, 218, 220, 222, 223, 224, 225, 227, 236, 237, 247, 250, 252, 260, 261, 281, 293, 294, 299, 313, 316, 317, 319, 322, 323, 325, 330, 331, 334, 335, 338, 339, 342, 347, 348, 349, 355, 356, 358, 362, 363, 370, 371, 373, 376, 378, 380, 382, 384, 387, 388, 389, 392, 393, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 415, 419, 425, 427, 430, 440, 441, 443, 449, 456, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 488, 489, 506, 507, 508, 512, 513, 518, 523, 525, 527, 534, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 583, 584, 587, 600, 601, 603, 604, 620, 621, 623, 624, 625, 626, 628, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 685, 689, 697, 703, 709, 710, 718, 728, 729, 747, 748, 749, 759, 780, 781, 784, 785, 789, 792, 793, 803, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 838, 839, 842, 843, 848, 849, 850, 858, 863, 865, 866, 872, 873, 885, 887, 888, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 929, 944, 969, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 994, 995, 996, 1003, 1006, 1013, 1014, 1015, 1016, 1017, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "memori": [8, 54, 71, 72, 99, 123, 170, 171, 283, 309, 313, 315, 317, 318, 347, 348, 349, 363, 364, 370, 376, 379, 385, 389, 403, 406, 407, 410, 413, 414, 434, 435, 436, 437, 438, 439, 440, 442, 443, 447, 450, 452, 461, 466, 472, 489, 496, 501, 526, 527, 528, 531, 548, 549, 550, 551, 556, 557, 558, 574, 575, 581, 582, 584, 639, 640, 641, 645, 646, 651, 652, 653, 654, 655, 656, 659, 661, 662, 669, 670, 671, 672, 673, 674, 677, 770, 771, 772, 773, 789, 795, 803, 811, 813, 814, 815, 816, 819, 820, 821, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 852, 853, 870, 872, 882, 883, 885, 890, 892, 893, 900, 901, 902, 903, 913, 949, 965, 976, 982, 983, 990, 992, 993, 995, 996, 1001, 1004, 1006, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "onlin": [8, 14, 36, 68, 95, 98, 167, 178, 214, 219, 364, 371, 375, 381, 389, 402, 407, 410, 412, 435, 439, 440, 442, 488, 495, 524, 529, 530, 531, 532, 538, 539, 575, 577, 651, 659, 660, 661, 669, 671, 818, 827, 828, 829, 830, 831, 834, 835, 840, 842, 843, 861, 862, 872, 892, 893, 972, 976, 984, 986, 999, 1002, 1004, 1013, 1017, 1022, 1026, 1027, 1029, 1037], "partial_fit": [8, 50, 95, 236, 317, 364, 378, 389, 402, 407, 435, 442, 527, 529, 530, 531, 582, 590, 651, 652, 659, 660, 661, 669, 670, 671, 820, 821, 824, 825, 827, 828, 829, 830, 831, 848, 849, 850, 861, 862, 872, 892, 976, 982, 984, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1038], "fed": [8, 132, 358, 371, 410, 969, 985, 990, 1033], "batch": [8, 11, 64, 95, 99, 294, 317, 364, 385, 389, 410, 433, 435, 440, 442, 444, 446, 524, 526, 527, 529, 530, 531, 532, 533, 535, 536, 538, 539, 657, 678, 679, 794, 807, 808, 827, 828, 829, 830, 831, 849, 850, 861, 862, 872, 885, 932, 946, 984, 985, 994, 1022, 1026, 1027, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "remain": [8, 25, 27, 71, 112, 119, 124, 126, 148, 170, 200, 204, 216, 246, 259, 263, 267, 270, 399, 402, 403, 404, 406, 410, 439, 457, 460, 508, 509, 514, 521, 527, 563, 603, 604, 755, 761, 791, 792, 793, 794, 797, 799, 827, 828, 829, 831, 933, 969, 970, 979, 980, 984, 990, 996, 1001, 1024, 1030, 1036], "hashingvector": [8, 349, 364, 482, 581, 583, 1023, 1029, 1030, 1031, 1032, 1035], "where": [8, 11, 12, 13, 16, 17, 19, 20, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 101, 105, 106, 111, 112, 114, 116, 118, 122, 123, 125, 129, 146, 149, 152, 158, 161, 165, 170, 179, 184, 192, 201, 204, 209, 210, 211, 213, 217, 218, 221, 223, 224, 229, 230, 233, 236, 237, 241, 252, 257, 258, 261, 263, 267, 268, 270, 272, 273, 300, 303, 305, 306, 307, 308, 309, 310, 313, 315, 316, 323, 324, 332, 342, 343, 344, 347, 352, 353, 358, 362, 363, 364, 370, 372, 373, 375, 376, 378, 380, 382, 383, 384, 387, 388, 389, 390, 392, 396, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 425, 430, 437, 440, 441, 445, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 480, 489, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 575, 576, 577, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 606, 608, 612, 615, 616, 618, 620, 621, 622, 623, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 681, 684, 685, 686, 689, 700, 705, 709, 717, 721, 722, 723, 731, 734, 747, 755, 760, 761, 762, 765, 773, 774, 775, 776, 779, 782, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 835, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 862, 865, 867, 868, 871, 872, 878, 880, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 920, 921, 922, 923, 929, 937, 965, 969, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 994, 995, 996, 1001, 1003, 1006, 1007, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "word": [8, 14, 19, 70, 152, 233, 237, 334, 348, 349, 362, 371, 372, 376, 378, 381, 389, 399, 402, 404, 405, 406, 407, 446, 504, 516, 527, 529, 534, 581, 582, 584, 689, 821, 831, 889, 974, 978, 982, 985, 990, 993, 994, 1004, 1013, 1014, 1022, 1030], "federicov": 8, "itertool": [8, 42, 44, 62, 133, 171, 185, 247, 252, 261, 268, 270, 409], "sy": [8, 12, 16, 19, 208, 233, 281, 326, 349, 371, 387, 610], "tarfil": 8, "hashlib": 8, "sha256": [8, 1037], "htmlparser": 8, "pathlib": [8, 1037], "path": [8, 16, 17, 167, 178, 185, 189, 219, 352, 370, 374, 376, 380, 384, 385, 389, 434, 438, 443, 479, 480, 481, 492, 493, 494, 496, 497, 498, 501, 502, 541, 550, 551, 556, 557, 558, 559, 586, 587, 590, 639, 640, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 674, 675, 676, 677, 678, 679, 681, 852, 853, 899, 900, 901, 902, 903, 934, 969, 976, 977, 986, 1001, 1022, 1023, 1026, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038], "urllib": [8, 17], "request": [8, 17, 46, 200, 218, 236, 316, 363, 370, 374, 375, 379, 389, 390, 393, 396, 407, 410, 411, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 574, 575, 581, 583, 584, 587, 603, 604, 625, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 692, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 936, 937, 939, 980, 983, 1015, 1028, 1029, 1030], "urlretriev": 8, "rcparam": [8, 229, 234, 310], "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 66, 70, 98, 167, 262, 326, 346, 347, 348, 349, 364, 365, 371, 402, 403, 410, 457, 537, 865, 978, 1014, 1015, 1022, 1023, 1024, 1025, 1028, 1029], "passiveaggressiveclassifi": [8, 207, 362, 364, 976, 981, 1023, 1026, 1027, 1029, 1030, 1033, 1035], "perceptron": [8, 167, 207, 210, 216, 240, 296, 301, 364, 387, 410, 507, 508, 515, 659, 669, 818, 848, 849, 850, 853, 872, 978, 981, 985, 994, 1002, 1017, 1026, 1028, 1029, 1030, 1034], "naive_bay": [8, 24, 25, 27, 31, 130, 134, 262, 263, 347, 358, 364, 365, 371, 409, 430, 562, 853, 974, 981, 982, 1015, 1023, 1024, 1026, 1027, 1028, 1029], "multinomialnb": [8, 364, 371, 410, 827, 828, 829, 830, 982, 1015, 1024, 1026, 1029, 1030, 1034, 1035, 1037], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 71, 109, 128, 155, 158, 160, 170, 171, 200, 204, 218, 222, 230, 236, 259, 303, 356, 358, 363, 371, 374, 375, 376, 378, 380, 381, 382, 389, 393, 402, 403, 404, 406, 407, 409, 411, 414, 433, 435, 444, 446, 447, 452, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 484, 485, 489, 490, 496, 501, 502, 507, 515, 520, 524, 525, 530, 531, 532, 533, 535, 538, 539, 541, 545, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 574, 581, 582, 583, 584, 590, 595, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 624, 625, 626, 628, 629, 630, 631, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 683, 687, 688, 690, 691, 693, 695, 697, 705, 734, 753, 759, 766, 770, 774, 781, 789, 792, 793, 794, 795, 803, 807, 808, 811, 812, 815, 816, 818, 821, 823, 826, 827, 828, 829, 831, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 849, 850, 856, 873, 879, 892, 893, 894, 895, 896, 897, 898, 904, 906, 910, 912, 913, 914, 916, 928, 929, 953, 964, 968, 969, 970, 975, 976, 980, 985, 986, 992, 994, 995, 1004, 1029, 1030, 1031, 1039], "builder": [8, 10, 380], "__file__": [8, 10, 1035], "global": [8, 10, 42, 57, 95, 200, 221, 222, 243, 270, 299, 314, 358, 362, 363, 382, 387, 389, 402, 412, 435, 445, 455, 461, 583, 619, 625, 681, 684, 685, 688, 700, 721, 722, 730, 775, 776, 779, 780, 807, 873, 888, 890, 948, 950, 969, 977, 980, 986, 990, 996, 1004, 1030, 1037], "21578": [8, 1035], "uci": [8, 149, 308, 370, 373, 493, 495, 497, 503], "ml": [8, 149, 370, 373, 381, 493, 495, 503, 976, 978, 1000, 1001, 1004], "uncompress": [8, 501, 502, 1015], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 56, 61, 89, 109, 112, 132, 200, 202, 208, 216, 223, 232, 236, 238, 249, 267, 269, 281, 305, 313, 325, 326, 334, 347, 363, 365, 370, 371, 374, 376, 377, 378, 379, 387, 388, 389, 398, 402, 403, 406, 407, 410, 430, 436, 437, 440, 442, 446, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 574, 575, 581, 583, 584, 587, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 812, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 975, 978, 980, 981, 990, 991, 1000, 1004, 1007, 1017, 1022, 1023, 1025, 1026, 1028, 1029], "pars": [8, 17, 362, 370, 371, 377, 501], "sgml": [8, 362], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 68, 76, 83, 87, 93, 107, 136, 142, 150, 162, 166, 174, 177, 219, 227, 244, 253, 277, 280, 295, 301, 311, 320, 328, 345, 347, 348, 350, 357, 362, 364, 370, 371, 373, 374, 376, 380, 381, 382, 384, 387, 396, 403, 407, 480, 486, 487, 489, 496, 501, 502, 527, 572, 573, 581, 582, 584, 904, 983, 996, 1003, 1007, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 123, 125, 184, 195, 200, 215, 218, 266, 279, 297, 303, 331, 336, 347, 348, 358, 362, 364, 370, 381, 389, 399, 402, 404, 406, 407, 409, 410, 411, 412, 430, 442, 461, 465, 501, 502, 530, 531, 532, 534, 539, 546, 547, 552, 553, 554, 555, 560, 561, 587, 595, 640, 644, 645, 646, 648, 654, 656, 658, 666, 668, 679, 718, 773, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 819, 823, 826, 884, 885, 923, 930, 932, 933, 938, 972, 974, 976, 977, 980, 995, 996, 1010, 1027, 1028, 1030, 1033, 1035], "__init__": [8, 16, 56, 109, 160, 236, 281, 334, 376, 378, 380, 381, 382, 383, 389, 410, 416, 941, 1023, 1028, 1030, 1035, 1036, 1037, 1038], "self": [8, 16, 19, 25, 27, 56, 109, 160, 167, 236, 281, 321, 327, 328, 334, 347, 370, 376, 377, 378, 381, 382, 383, 384, 402, 410, 412, 416, 419, 425, 426, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 493, 501, 502, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 696, 787, 788, 789, 790, 791, 792, 793, 796, 798, 803, 807, 808, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 940, 941, 946, 954, 983, 1001, 1002, 1004, 1017, 1024, 1029, 1036], "latin": [8, 410], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 71, 229, 324, 370, 375, 379, 380, 384, 387, 389, 398, 410, 489, 820, 1001, 1003, 1027, 1031, 1032, 1033, 1036, 1037, 1038], "attr": [8, 56], "start_": 8, "getattr": [8, 303, 378, 389, 1038], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 70, 149, 240, 318, 373], "topic_d": 8, "fd": 8, "chunk": [8, 50, 362, 363, 402, 407, 413, 437, 442, 461, 531, 770, 773, 820, 821, 827, 828, 829, 830, 831, 890, 982, 1029, 1030, 1031, 1032, 1033], "feed": [8, 86, 201, 349, 371, 381, 387, 402, 410, 865, 981], "decod": [8, 294, 371, 389, 496, 562, 581, 582, 584, 1022, 1023], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 115, 122, 125, 128, 132, 152, 153, 156, 157, 158, 159, 160, 170, 172, 184, 204, 206, 222, 229, 235, 239, 246, 252, 261, 262, 287, 288, 303, 313, 334, 339, 348, 358, 371, 376, 378, 384, 387, 389, 390, 400, 401, 402, 405, 406, 409, 412, 443, 448, 465, 501, 502, 525, 556, 621, 636, 640, 654, 665, 667, 680, 698, 738, 787, 807, 808, 827, 828, 829, 831, 838, 913, 969, 973, 974, 976, 977, 979, 980, 981, 983, 986, 987, 990, 995, 1004, 1013, 1025, 1029, 1030, 1031], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 71, 104, 109, 112, 119, 120, 123, 145, 149, 200, 208, 236, 239, 251, 259, 260, 265, 273, 290, 294, 316, 349, 356, 364, 365, 369, 370, 371, 373, 376, 379, 383, 387, 398, 399, 400, 402, 403, 404, 405, 407, 409, 410, 411, 412, 417, 418, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 503, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 728, 785, 787, 788, 789, 792, 793, 795, 803, 811, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 907, 941, 964, 974, 976, 981, 983, 984, 986, 990, 993, 994, 995, 996, 1004, 1006, 1012, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "end_reut": 8, "sub": [8, 37, 48, 53, 55, 57, 60, 70, 105, 236, 238, 246, 315, 322, 323, 331, 334, 343, 371, 376, 378, 382, 389, 403, 409, 410, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 529, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 938, 976, 980, 994, 1015, 1032, 1036], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 72, 82, 95, 98, 112, 115, 118, 121, 123, 124, 126, 127, 149, 161, 164, 167, 179, 180, 208, 215, 248, 249, 254, 256, 272, 277, 297, 299, 300, 305, 315, 323, 325, 326, 334, 376, 378, 382, 384, 385, 388, 389, 397, 402, 405, 407, 409, 411, 414, 430, 433, 434, 436, 438, 440, 441, 442, 445, 447, 452, 454, 455, 456, 464, 465, 471, 475, 476, 477, 508, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 552, 553, 554, 555, 557, 560, 561, 574, 575, 581, 582, 584, 586, 587, 595, 603, 620, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 826, 841, 848, 849, 850, 851, 852, 856, 863, 865, 867, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 907, 928, 929, 935, 938, 946, 970, 976, 977, 979, 980, 983, 984, 985, 993, 994, 995, 996, 1001, 1004, 1010, 1014, 1015, 1017, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039], "archiv": [8, 370, 371, 373, 374, 396, 402, 435, 493, 495, 503, 750, 751, 978, 995, 1015], "exist": [8, 9, 17, 19, 53, 218, 261, 299, 303, 370, 375, 378, 379, 382, 387, 389, 390, 392, 396, 402, 406, 407, 409, 410, 412, 417, 427, 430, 436, 437, 440, 442, 444, 446, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 492, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 578, 581, 582, 583, 584, 587, 590, 596, 603, 604, 625, 626, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 691, 693, 695, 754, 757, 761, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 865, 866, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 964, 972, 977, 979, 980, 984, 986, 987, 990, 1004, 1014, 1022, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "str": [8, 10, 16, 58, 60, 104, 106, 121, 218, 239, 261, 273, 281, 291, 332, 347, 370, 371, 385, 410, 413, 414, 418, 423, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 569, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 610, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 685, 689, 690, 691, 692, 693, 695, 700, 702, 704, 706, 719, 721, 722, 724, 725, 730, 763, 766, 770, 771, 772, 773, 774, 775, 776, 779, 781, 782, 783, 789, 790, 791, 792, 793, 795, 796, 798, 800, 801, 803, 807, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 911, 912, 913, 916, 919, 921, 925, 936, 937, 940, 943, 964, 965, 968, 1037], "kei": [8, 9, 10, 17, 19, 42, 118, 122, 132, 164, 169, 218, 236, 242, 262, 264, 265, 314, 315, 316, 317, 318, 319, 364, 369, 378, 381, 382, 383, 387, 389, 390, 392, 393, 402, 403, 406, 412, 457, 465, 554, 555, 560, 561, 562, 563, 581, 584, 587, 610, 619, 625, 626, 627, 652, 789, 792, 793, 801, 803, 815, 851, 852, 907, 917, 945, 1001, 1015, 1019, 1028, 1034, 1035, 1037, 1038], "download_url": 8, "ic": [8, 315, 370, 373, 391, 493, 495, 503, 625, 626, 1017, 1034, 1035], "databas": [8, 149, 308, 362, 364, 371, 373, 402, 407, 409, 410, 413, 435, 437, 503, 548, 549, 885, 992], "reuters21578": 8, "mld": 8, "tar": [8, 380], "gz": [8, 380, 392, 501, 502], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 56, 62, 82, 99, 115, 121, 125, 160, 170, 171, 189, 202, 218, 222, 229, 233, 235, 236, 237, 238, 261, 262, 265, 272, 281, 286, 294, 297, 298, 305, 347, 348, 356, 376, 380, 382, 409, 410, 412, 414, 430, 442, 501, 513, 526, 562, 618, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 665, 666, 667, 669, 672, 674, 675, 676, 677, 696, 702, 760, 780, 784, 786, 792, 793, 818, 856, 865, 868, 871, 879, 892, 893, 907, 942, 944, 946, 967, 996], "mkdir": [8, 382, 384], "parent": [8, 169, 236, 376, 380, 389, 402, 435, 456, 1022], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 136, 142, 150, 162, 166, 174, 177, 219, 227, 233, 244, 253, 277, 280, 295, 301, 311, 320, 328, 345, 347, 349, 350, 357, 371, 382, 894, 895, 896, 897, 898, 995, 1018], "1e6": [8, 10, 193, 233, 347, 349, 362, 529, 886, 980, 992], "current_sz_mb": 8, "stdout": [8, 95, 208, 821, 841, 849, 850], "write": [8, 17, 165, 236, 347, 362, 363, 370, 374, 375, 379, 380, 381, 382, 384, 385, 387, 389, 392, 403, 407, 410, 991, 1001, 1015, 1023, 1035], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 326, 371, 382, 396, 481, 493, 496, 497, 500, 581, 582, 584, 1015, 1022, 1027, 1030, 1031], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 233, 261, 270, 363, 379, 1001], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 223, 370, 371, 375, 376, 380, 382, 387, 388, 390, 392, 396, 403, 410, 480, 489, 501, 502, 970, 1000, 1004, 1009, 1025, 1029, 1030, 1032, 1038], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 410, 496, 581, 582, 584, 1024], "alternate_sign": [8, 410, 575, 582, 1029], "data_stream": 8, "binari": [8, 13, 25, 27, 111, 116, 118, 128, 130, 146, 160, 170, 176, 191, 193, 200, 208, 222, 230, 242, 258, 259, 264, 270, 276, 279, 285, 334, 340, 356, 358, 370, 371, 372, 378, 380, 381, 389, 392, 396, 399, 400, 401, 402, 409, 410, 412, 430, 431, 432, 445, 480, 493, 501, 502, 513, 516, 542, 543, 546, 548, 552, 554, 555, 559, 560, 561, 574, 581, 582, 584, 586, 587, 595, 603, 620, 621, 622, 623, 625, 626, 651, 652, 659, 661, 666, 667, 668, 669, 693, 696, 700, 701, 702, 705, 706, 708, 711, 713, 719, 721, 722, 726, 727, 730, 731, 732, 733, 734, 735, 774, 775, 776, 779, 780, 781, 784, 786, 789, 790, 792, 793, 794, 795, 803, 807, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 827, 838, 848, 859, 863, 865, 873, 876, 892, 894, 897, 943, 970, 981, 982, 983, 984, 985, 987, 988, 990, 991, 992, 994, 995, 996, 1003, 1006, 1019, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1036, 1037], "acq": 8, "chosen": [8, 20, 46, 73, 132, 153, 170, 171, 189, 201, 217, 237, 255, 256, 258, 264, 348, 358, 362, 387, 402, 404, 405, 409, 412, 433, 439, 442, 444, 446, 447, 453, 489, 516, 528, 550, 551, 552, 553, 557, 558, 640, 646, 649, 651, 652, 654, 656, 664, 669, 670, 671, 672, 673, 683, 687, 784, 787, 788, 789, 792, 793, 803, 822, 841, 892, 893, 900, 901, 902, 903, 929, 969, 972, 974, 976, 977, 979, 981, 986, 987, 994, 1010, 1011, 1013, 1014, 1030, 1038], "evenli": [8, 39, 52, 125, 204, 256, 410, 933, 1015], "care": [8, 55, 126, 362, 364, 380, 382, 387, 389, 390, 402, 404, 410, 430, 453, 462, 633, 651, 652, 659, 661, 669, 670, 671, 688, 892, 977, 995, 1004, 1038], "all_class": 8, "positive_class": [8, 705], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 72, 73, 95, 98, 117, 118, 134, 138, 140, 161, 164, 165, 170, 171, 179, 186, 192, 193, 207, 208, 209, 212, 213, 215, 221, 222, 223, 224, 240, 241, 246, 247, 248, 249, 252, 274, 291, 297, 298, 299, 309, 315, 316, 317, 322, 323, 331, 347, 348, 382, 389, 409, 414, 433, 436, 440, 441, 442, 447, 452, 454, 464, 465, 471, 475, 476, 477, 524, 525, 526, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 554, 555, 620, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 665, 667, 669, 670, 671, 672, 673, 675, 676, 680, 681, 682, 683, 686, 687, 787, 788, 803, 841, 849, 850, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 970, 972, 976, 983, 984, 993, 994, 1011, 1015, 1023, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038], "nb": [8, 103, 130, 358, 829, 982], "multinomi": [8, 30, 167, 178, 215, 219, 237, 256, 270, 371, 372, 376, 407, 409, 489, 505, 516, 544, 546, 552, 554, 562, 624, 651, 652, 733, 818, 826, 827, 828, 829, 830, 831, 872, 915, 980, 981, 996, 1002, 1015, 1017, 1022, 1026, 1028, 1029, 1030, 1035, 1036], "passiv": [8, 207, 659, 660, 1002, 1017, 1023], "aggress": [8, 207, 659, 660, 792, 793, 1002, 1017, 1023], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 402, 407, 442, 527, 669, 848, 849, 850, 1000, 1022], "tupl": [8, 48, 49, 55, 105, 171, 218, 369, 370, 371, 378, 389, 406, 414, 427, 444, 446, 457, 460, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 498, 501, 503, 504, 505, 506, 507, 515, 526, 539, 554, 555, 560, 561, 562, 563, 575, 576, 577, 580, 581, 582, 584, 620, 625, 626, 627, 705, 712, 773, 775, 787, 789, 803, 815, 832, 833, 851, 852, 862, 863, 867, 870, 878, 882, 894, 895, 896, 897, 898, 907, 913, 914, 916, 920, 921, 922, 923, 938, 947, 964, 987, 1028, 1029, 1033, 1034, 1035], "x_text": 8, "befor": [8, 12, 25, 42, 70, 72, 75, 86, 132, 145, 159, 161, 163, 166, 167, 170, 171, 173, 181, 184, 188, 189, 193, 236, 261, 268, 283, 304, 307, 308, 310, 316, 337, 358, 362, 363, 371, 374, 376, 378, 379, 381, 382, 384, 385, 387, 389, 390, 391, 396, 400, 402, 403, 404, 406, 407, 411, 414, 415, 436, 440, 441, 442, 452, 454, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 483, 494, 527, 530, 531, 532, 533, 534, 537, 539, 540, 554, 555, 558, 560, 562, 563, 570, 581, 582, 584, 604, 620, 621, 623, 638, 643, 644, 647, 648, 649, 657, 658, 659, 660, 661, 664, 669, 671, 680, 685, 687, 787, 788, 794, 795, 807, 808, 810, 814, 816, 818, 832, 833, 840, 841, 842, 843, 844, 847, 852, 853, 856, 859, 866, 870, 871, 872, 873, 877, 878, 880, 881, 882, 883, 889, 900, 901, 929, 964, 970, 976, 977, 980, 986, 990, 994, 995, 996, 1001, 1015, 1022, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "exclud": [8, 19, 169, 303, 376, 380, 389, 439, 457, 459, 721, 722, 730, 775, 776, 779, 802, 810, 867, 955, 980, 983, 1031, 1038], "invalid": [8, 200, 326, 389, 439, 571, 664, 705, 766, 976, 980, 1028, 1030, 1032, 1033, 1035, 1036, 1038], "assign": [8, 17, 20, 37, 46, 49, 57, 58, 60, 112, 117, 128, 130, 145, 154, 213, 218, 229, 234, 237, 297, 305, 310, 327, 342, 348, 371, 376, 378, 389, 399, 406, 407, 409, 410, 411, 412, 433, 434, 435, 436, 438, 439, 440, 441, 442, 445, 447, 449, 452, 453, 454, 455, 508, 529, 554, 555, 586, 587, 600, 601, 603, 651, 652, 659, 660, 661, 669, 670, 671, 697, 698, 708, 709, 710, 713, 723, 731, 735, 747, 749, 778, 783, 784, 785, 789, 792, 793, 795, 798, 803, 811, 813, 814, 815, 816, 819, 836, 842, 844, 845, 846, 859, 887, 888, 892, 893, 894, 895, 896, 897, 898, 974, 979, 980, 981, 982, 983, 984, 985, 990, 993, 1004, 1006, 1015, 1022, 1027, 1029, 1030], "format": [8, 11, 12, 19, 21, 48, 54, 58, 61, 70, 80, 95, 105, 115, 121, 124, 126, 138, 144, 145, 173, 176, 180, 186, 191, 200, 218, 256, 266, 268, 269, 272, 275, 285, 286, 289, 290, 307, 313, 341, 352, 356, 362, 369, 375, 376, 378, 379, 384, 385, 388, 389, 403, 406, 409, 410, 426, 435, 436, 438, 440, 442, 443, 445, 452, 457, 461, 475, 476, 477, 478, 480, 482, 489, 490, 491, 501, 502, 503, 516, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 544, 550, 551, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 639, 645, 651, 652, 653, 655, 659, 661, 669, 670, 671, 681, 682, 685, 690, 706, 713, 731, 732, 743, 760, 782, 821, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 879, 884, 885, 890, 892, 904, 912, 913, 934, 942, 946, 951, 954, 956, 957, 958, 959, 960, 961, 970, 980, 983, 988, 990, 991, 994, 996, 1000, 1006, 1007, 1017, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1037], "islic": [8, 44, 62], "asarrai": [8, 17, 200, 218, 300, 324, 347, 348, 378, 389, 398, 578, 579, 718, 748, 840, 842, 843, 844, 990, 995, 1039], "int": [8, 10, 13, 16, 17, 19, 37, 44, 62, 81, 115, 124, 128, 140, 141, 153, 154, 155, 161, 165, 169, 181, 191, 193, 200, 218, 226, 229, 235, 239, 246, 256, 259, 260, 261, 281, 286, 288, 294, 310, 323, 349, 371, 376, 378, 387, 389, 400, 403, 406, 410, 413, 414, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 481, 484, 485, 487, 488, 489, 490, 495, 496, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 600, 601, 603, 604, 610, 620, 621, 622, 623, 624, 625, 626, 627, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 700, 702, 706, 718, 719, 721, 722, 723, 726, 730, 748, 749, 761, 766, 770, 771, 772, 773, 774, 775, 776, 779, 781, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 912, 913, 915, 916, 928, 929, 931, 932, 933, 934, 945, 949, 951, 954, 959, 960, 976, 987, 1022, 1028, 1032, 1033], "iter_minibatch": 8, "minibatch_s": [8, 364], "statist": [8, 81, 111, 112, 115, 116, 127, 138, 139, 140, 141, 144, 148, 149, 167, 169, 170, 171, 172, 184, 188, 204, 254, 258, 260, 263, 270, 277, 303, 309, 315, 358, 365, 369, 371, 373, 376, 382, 389, 400, 402, 403, 404, 406, 407, 409, 411, 427, 462, 467, 486, 487, 509, 510, 511, 513, 515, 534, 539, 552, 553, 555, 597, 598, 599, 602, 620, 623, 627, 628, 637, 642, 649, 683, 687, 689, 703, 709, 714, 715, 716, 723, 735, 780, 789, 805, 822, 849, 850, 868, 869, 870, 872, 877, 880, 881, 883, 897, 900, 901, 955, 969, 970, 974, 976, 977, 979, 980, 981, 982, 987, 990, 994, 995, 996, 997, 998, 999, 1007, 1013, 1014, 1027, 1030, 1033, 1034, 1036, 1037], "test_stat": 8, "n_test": [8, 10, 33, 115, 261, 1022, 1025], "n_test_po": 8, "hold": [8, 16, 26, 27, 200, 204, 262, 356, 369, 376, 377, 378, 389, 400, 402, 406, 409, 410, 412, 496, 550, 554, 555, 557, 582, 625, 626, 627, 728, 789, 792, 793, 803, 828, 859, 860, 865, 866, 873, 876, 900, 902, 970, 974, 980, 984, 994, 995, 996, 1003, 1006, 1015, 1030, 1034], "n_test_docu": 8, "tick": [8, 43, 60, 155, 240, 272, 625, 816], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 105, 124, 125, 145, 149, 160, 170, 181, 187, 196, 200, 204, 215, 218, 222, 224, 270, 281, 288, 291, 317, 326, 339, 342, 347, 348, 349, 356, 373, 382, 389, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 412, 425, 435, 436, 440, 442, 452, 457, 458, 475, 476, 477, 508, 513, 516, 524, 527, 529, 530, 534, 537, 538, 539, 542, 543, 545, 547, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 583, 584, 604, 606, 616, 618, 628, 634, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 669, 670, 671, 672, 674, 677, 683, 687, 689, 692, 702, 703, 712, 718, 733, 748, 750, 751, 755, 780, 820, 821, 825, 826, 835, 839, 843, 850, 851, 871, 872, 892, 893, 895, 898, 900, 901, 902, 903, 931, 955, 961, 966, 976, 980, 981, 982, 983, 995, 996, 1013, 1025, 1026, 1028, 1030, 1031, 1033], "cls_name": [8, 10], "string": [8, 27, 71, 121, 160, 218, 231, 265, 316, 349, 362, 370, 371, 376, 377, 378, 382, 389, 396, 403, 406, 409, 410, 411, 413, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 482, 483, 489, 498, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 610, 613, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 692, 702, 704, 712, 724, 754, 757, 763, 766, 770, 771, 772, 773, 782, 783, 787, 788, 789, 792, 793, 795, 803, 811, 815, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 910, 912, 913, 920, 921, 922, 944, 948, 964, 965, 969, 970, 980, 993, 995, 1006, 1013, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "n_train": [8, 10, 33, 115, 261, 1022, 1025], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 55, 181, 264, 362, 399, 404, 411, 501, 502, 542, 590, 620, 623, 637, 865, 869, 881, 970, 976, 1030, 1034], "mini": [8, 64, 95, 317, 364, 389, 410, 433, 435, 440, 442, 444, 446, 524, 526, 529, 530, 531, 532, 533, 535, 536, 538, 539, 984, 985, 1022, 1033, 1035], "smaller": [8, 24, 40, 46, 55, 82, 112, 149, 157, 158, 161, 164, 185, 189, 191, 204, 233, 287, 288, 297, 303, 334, 342, 348, 376, 399, 401, 402, 404, 406, 407, 409, 411, 412, 432, 433, 439, 443, 447, 449, 507, 527, 528, 550, 551, 552, 553, 557, 558, 586, 603, 612, 626, 639, 640, 642, 643, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 665, 667, 675, 676, 685, 702, 787, 792, 793, 838, 841, 865, 866, 884, 885, 892, 900, 901, 902, 903, 929, 974, 976, 977, 979, 980, 981, 983, 984, 986, 990, 992, 994, 995, 996, 1001, 1015, 1030, 1035], "bigger": [8, 40, 60, 213, 261, 300, 344, 348, 361, 363, 410, 431, 432, 501, 531, 838, 1010, 1017], "overhead": [8, 281, 363, 364, 376, 382, 385, 387, 389, 409, 434, 438, 442, 527, 692, 824, 825, 827, 828, 829, 830, 831, 832, 833, 948, 982, 983, 1025, 1030, 1031, 1034], "partial": [8, 12, 50, 84, 87, 129, 167, 168, 174, 218, 228, 244, 315, 318, 373, 389, 391, 404, 405, 407, 409, 412, 457, 475, 476, 477, 478, 489, 494, 527, 529, 534, 555, 582, 625, 626, 650, 780, 818, 820, 821, 848, 849, 850, 853, 865, 866, 869, 872, 901, 977, 984, 994, 1015, 1017, 1019, 1023, 1030, 1031, 1035], "stream": [8, 402, 407, 410, 455, 582, 861, 862, 872, 972, 1000, 1030, 1033], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 55, 75, 116, 118, 122, 125, 132, 170, 198, 202, 208, 222, 235, 236, 238, 248, 258, 264, 317, 323, 348, 369, 376, 377, 378, 385, 403, 457, 519, 554, 555, 581, 582, 584, 625, 801, 865, 887, 888, 907, 908, 934, 972, 993, 1001, 1006], "updat": [8, 16, 44, 62, 112, 118, 127, 234, 313, 349, 374, 375, 376, 380, 384, 389, 402, 407, 409, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 955, 976, 983, 984, 985, 994, 1003, 1004, 1023, 1029, 1030, 1031, 1033, 1035, 1037, 1038, 1039], "accumul": [8, 50, 119, 120, 189, 380, 382, 402, 410, 980, 1023, 1030], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "61": [8, 81, 171, 218, 370, 373, 382, 403, 534, 553, 706], "1565": 8, "855": 8, "62": [8, 171, 176, 218, 255, 300, 318, 323, 358, 371, 402, 486, 487, 832, 833, 1018, 1025], "1552": 8, "877": [8, 259], "1496": 8, "933": [8, 74, 406], "1489": 8, "3911": 8, "517": [8, 65, 68, 445, 455, 1013], "938": [8, 196, 777, 980, 1010], "2224": [8, 1024], "936": [8, 149, 430, 980], "2221": 8, "885": [8, 149, 243, 373], "2210": 8, "941": 8, "2207": 8, "6821": 8, "891": 8, "952": [8, 49, 311], "86": [8, 32, 70, 146, 191, 305, 322, 323, 780, 900, 980, 1011], "2383": 8, "2380": 8, "900": [8, 50, 74, 75], "2374": 8, "953": [8, 49], "2372": 8, "9759": 8, "1276": 8, "949": [8, 149, 150], "2446": 8, "2445": 8, "909": 8, "00": [8, 15, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 107, 136, 142, 150, 157, 162, 166, 170, 171, 174, 177, 191, 218, 219, 227, 233, 244, 253, 259, 262, 277, 280, 295, 300, 301, 311, 320, 322, 323, 328, 345, 348, 350, 357, 370, 373, 382, 402, 409, 410, 706, 708, 780, 789, 803, 816, 901, 976, 980, 990, 992, 994, 1014], "2440": 8, "958": 8, "2438": 8, "11680": 8, "1499": 8, "944": [8, 1010], "2356": 8, "956": [8, 1010], "2354": 8, "97": [8, 32, 105, 149, 173, 237, 252, 300, 323, 334, 373, 382, 388, 406, 651, 975, 981, 990, 1022], "2351": 8, "950": 8, "2350": 8, "14625": 8, "1865": 8, "965": [8, 980], "2396": 8, "903": 8, "2395": 8, "924": [8, 73], "2392": 8, "957": [8, 412, 720, 980], "2391": 8, "17360": [8, 1033], "2179": 8, "2428": 8, "2427": 8, "932": [8, 326, 328], "2424": 8, "curv": [8, 11, 23, 28, 37, 75, 78, 115, 117, 118, 124, 167, 178, 179, 190, 200, 218, 219, 221, 223, 226, 228, 230, 239, 240, 244, 245, 253, 254, 261, 271, 277, 298, 313, 354, 383, 397, 401, 406, 408, 430, 431, 432, 495, 503, 508, 514, 518, 557, 625, 638, 651, 691, 693, 695, 699, 700, 701, 702, 719, 721, 733, 734, 774, 776, 779, 780, 781, 787, 788, 795, 806, 811, 816, 818, 819, 830, 853, 872, 892, 897, 976, 977, 979, 980, 986, 996, 1002, 1004, 1017, 1019, 1024, 1025, 1028, 1032, 1034, 1035, 1036, 1037, 1038], "evolut": [8, 10, 273, 362, 364, 539], "cours": [8, 9, 176, 362, 376, 378, 407, 410, 411, 970, 975, 976, 1004], "valid": [8, 13, 26, 54, 55, 56, 71, 74, 78, 82, 103, 109, 116, 118, 121, 122, 123, 124, 125, 137, 142, 143, 147, 149, 150, 160, 167, 170, 172, 178, 184, 188, 200, 202, 208, 218, 219, 236, 238, 248, 251, 254, 258, 261, 262, 263, 265, 267, 269, 270, 275, 277, 285, 300, 304, 309, 313, 315, 325, 334, 342, 352, 363, 371, 376, 379, 387, 388, 389, 393, 396, 397, 400, 402, 403, 404, 407, 408, 409, 410, 411, 412, 418, 430, 435, 436, 438, 439, 440, 442, 443, 450, 456, 457, 461, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 486, 494, 495, 497, 508, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 568, 570, 575, 576, 582, 586, 587, 590, 595, 625, 627, 631, 632, 633, 634, 635, 636, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 685, 692, 694, 695, 699, 706, 720, 754, 757, 766, 770, 771, 772, 777, 782, 783, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 858, 864, 872, 884, 885, 887, 888, 890, 892, 894, 897, 899, 900, 901, 902, 903, 912, 913, 916, 923, 935, 940, 970, 979, 980, 981, 984, 988, 990, 992, 994, 995, 996, 1000, 1001, 1004, 1006, 1009, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "consumpt": [8, 362, 527, 550, 551, 557, 558, 789, 803, 813, 814, 815, 900, 901, 902, 903, 946, 1006, 1022, 1024, 1028, 1030, 1031, 1036], "queue": [8, 983, 1025], "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 109, 117, 165, 171, 179, 184, 193, 201, 216, 217, 239, 248, 263, 266, 281, 294, 300, 304, 309, 317, 323, 331, 347, 349, 364, 370, 371, 376, 380, 382, 383, 384, 385, 387, 389, 390, 400, 402, 407, 409, 410, 436, 440, 441, 442, 443, 445, 449, 452, 453, 454, 501, 502, 529, 542, 543, 550, 551, 552, 553, 554, 555, 557, 558, 559, 603, 620, 625, 626, 632, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 674, 675, 676, 677, 685, 698, 761, 787, 788, 791, 792, 793, 795, 816, 866, 867, 870, 882, 900, 901, 902, 903, 906, 929, 932, 933, 969, 976, 977, 980, 983, 990, 994, 995, 1001, 1003, 1004, 1014, 1015, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 113, 115, 158, 170, 184, 204, 218, 234, 315, 322, 325, 327, 334, 342, 349, 362, 363, 364, 387, 401, 402, 404, 407, 409, 410, 411, 436, 447, 462, 531, 532, 534, 536, 556, 589, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 658, 674, 677, 685, 792, 793, 832, 833, 838, 873, 888, 889, 902, 903, 975, 976, 979, 982, 984, 990, 992, 993, 994, 995, 1013, 1014, 1035], "learner": [8, 111, 113, 123, 132, 364, 550, 551, 552, 553, 557, 558, 559, 575, 582, 623, 834, 835, 840, 842, 843, 982, 985, 996, 1000, 1001, 1015], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 62, 86, 155, 205, 209, 211, 229, 242, 265, 289, 291, 304, 330, 332, 335, 336, 987, 1019], "set_ylim": [8, 10, 16, 31, 42, 60, 72, 92, 111, 117, 129, 130, 161, 171, 173, 180, 198, 200, 201, 234, 246, 265, 268, 276, 279, 286, 297, 303, 305, 306, 308, 314, 325, 343], "runtim": [8, 10, 58, 112, 186, 215, 217, 234, 300, 305, 363, 378, 379, 387, 389, 401, 402, 409, 443, 556, 672, 803, 892, 893, 894, 895, 896, 897, 898, 994, 995, 1025, 1029, 1030, 1036, 1037], "gcf": [8, 987], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 72, 118, 119, 122, 123, 126, 134, 145, 149, 160, 164, 171, 179, 246, 251, 260, 262, 266, 279, 308, 309, 317, 318, 348, 378, 405, 574, 625, 641, 662, 673, 980, 987, 994, 996, 1028, 1029, 1030, 1031], "width": [8, 10, 16, 45, 53, 80, 90, 97, 98, 104, 105, 106, 115, 121, 122, 125, 134, 145, 154, 160, 183, 243, 246, 260, 303, 305, 306, 309, 315, 318, 331, 373, 403, 431, 432, 445, 457, 486, 487, 499, 514, 579, 857, 905, 990, 994, 996, 1012, 1013, 1030], "set_xticklabel": [8, 10, 80, 106, 134, 155, 171, 173, 272, 273, 279], "ymax": [8, 10, 11, 78, 187, 189, 192, 193, 201, 209, 261, 294], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 106, 112, 117, 119, 128, 130, 132, 133, 161, 164, 165, 169, 170, 171, 172, 179, 180, 189, 191, 198, 200, 201, 202, 208, 221, 222, 225, 226, 232, 234, 235, 239, 240, 246, 255, 256, 257, 258, 261, 263, 264, 268, 272, 273, 276, 279, 281, 285, 286, 291, 297, 298, 303, 304, 305, 306, 307, 308, 313, 317, 322, 323, 331, 342, 343, 344, 347, 352], "autolabel": [8, 123], "attach": [8, 123, 347, 427, 837, 1023, 1033], "rect": [8, 52, 123, 179], "height": [8, 14, 53, 98, 122, 149, 173, 303, 309, 347, 408, 439, 486, 487, 499, 579], "get_height": [8, 123], "get_x": [8, 123], "get_width": [8, 123], "va": [8, 123, 272, 289, 291, 341], "setp": [8, 10, 272, 275], "rotat": [8, 40, 94, 97, 100, 107, 124, 134, 167, 173, 224, 272, 273, 279, 334, 341, 405, 407, 412, 414, 497, 525, 534, 543, 607, 690, 872, 904, 976, 1033, 1034], "read": [8, 17, 95, 221, 268, 313, 314, 315, 317, 319, 362, 370, 374, 377, 378, 379, 380, 381, 383, 384, 387, 388, 389, 402, 413, 414, 415, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 925, 969, 976, 980, 981, 1000, 1004, 1015, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "feat": [8, 10, 380, 410], "extr": 8, "hash": [8, 110, 136, 167, 348, 349, 362, 364, 368, 376, 379, 387, 409, 507, 537, 550, 559, 574, 575, 582, 633, 827, 945, 972, 1015, 1017, 1023, 1026, 1029], "vect": [8, 70, 262, 326, 410, 1015], "127": [8, 15, 115, 124, 136, 1022], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 101, 111, 112, 115, 120, 123, 127, 129, 131, 132, 144, 149, 151, 152, 153, 154, 157, 158, 159, 160, 162, 167, 169, 171, 172, 176, 189, 196, 197, 200, 202, 204, 208, 214, 217, 218, 221, 222, 224, 226, 229, 231, 232, 234, 235, 236, 238, 261, 268, 273, 274, 282, 295, 308, 312, 313, 315, 325, 334, 335, 339, 340, 342, 343, 348, 349, 355, 358, 362, 373, 376, 381, 384, 388, 405, 407, 409, 410, 508, 603, 604, 606, 607, 608, 612, 615, 616, 841, 969, 976, 980, 983, 986, 992, 993, 994, 995, 1004, 1006], "robust": [9, 61, 63, 77, 83, 125, 149, 165, 167, 170, 171, 178, 202, 204, 217, 219, 229, 303, 319, 364, 373, 378, 384, 402, 409, 410, 439, 441, 462, 463, 466, 467, 468, 469, 517, 527, 552, 553, 642, 650, 663, 664, 671, 672, 742, 822, 853, 867, 869, 870, 881, 887, 927, 980, 984, 986, 990, 993, 994, 1000, 1002, 1004, 1016, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1038], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 103, 106, 128, 152, 159, 229, 245, 247, 250, 251, 252, 253, 365, 385, 389, 402, 405, 407, 412, 475, 476, 477, 478, 497, 508, 512, 520, 525, 527, 534, 539, 541, 542, 543, 556, 603, 604, 606, 615, 616, 637, 638, 643, 647, 649, 675, 676, 679, 682, 686, 787, 788, 789, 808, 979, 986, 990, 1002, 1016, 1017, 1022, 1024, 1025, 1026, 1027, 1029, 1031], "wine": [9, 242, 308, 309, 369, 503, 1017], "tool": [9, 11, 170, 236, 259, 264, 358, 369, 370, 371, 374, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 396, 401, 402, 403, 404, 480, 685, 694, 969, 975, 976, 980, 986, 990, 995, 997, 1000, 1001, 1004, 1006, 1015, 1029, 1032, 1035, 1036, 1037], "purpos": [9, 12, 16, 37, 86, 164, 214, 215, 216, 221, 223, 237, 249, 251, 257, 258, 334, 335, 347, 348, 358, 371, 376, 378, 388, 389, 390, 392, 395, 399, 402, 403, 407, 409, 410, 411, 412, 539, 631, 814, 815, 852, 977, 980, 981, 983, 986, 998, 1000, 1006, 1034, 1036], "awar": [9, 14, 111, 146, 161, 331, 347, 374, 376, 378, 387, 390, 406, 410, 560, 561, 641, 647, 648, 649, 651, 652, 662, 673, 838, 867, 986, 990, 996, 1019, 1022, 1023, 1036], "thing": [9, 222, 256, 347, 363, 364, 371, 375, 376, 378, 387, 402, 404, 410, 552, 553, 976, 990, 1004, 1028], "trivial": [9, 202, 352, 376, 402, 807, 894, 897, 977, 1001, 1022], "dimens": [9, 12, 14, 37, 40, 53, 82, 85, 90, 95, 149, 154, 156, 158, 160, 171, 183, 184, 198, 223, 225, 229, 233, 234, 240, 247, 248, 285, 286, 290, 306, 347, 348, 349, 371, 373, 377, 389, 401, 402, 407, 408, 412, 414, 435, 436, 438, 440, 441, 442, 445, 457, 458, 475, 476, 477, 486, 487, 508, 517, 518, 522, 523, 526, 534, 542, 575, 576, 577, 578, 580, 582, 590, 604, 612, 615, 634, 637, 652, 683, 684, 685, 687, 688, 692, 756, 813, 832, 833, 837, 851, 884, 885, 886, 894, 895, 896, 897, 898, 912, 913, 914, 943, 951, 954, 970, 972, 974, 976, 977, 978, 981, 983, 984, 986, 992, 995, 1006, 1013, 1014, 1029, 1031, 1032, 1034], "below": [9, 25, 26, 27, 32, 55, 60, 70, 75, 80, 89, 90, 95, 109, 116, 119, 120, 125, 144, 169, 171, 183, 196, 197, 200, 202, 216, 217, 222, 226, 231, 236, 241, 243, 256, 259, 264, 266, 267, 268, 303, 307, 313, 314, 315, 316, 317, 318, 319, 338, 339, 347, 356, 358, 363, 369, 370, 374, 376, 378, 380, 381, 385, 389, 390, 392, 402, 404, 405, 406, 407, 409, 410, 411, 412, 439, 441, 464, 465, 471, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 503, 524, 530, 535, 541, 575, 588, 589, 590, 591, 592, 593, 626, 639, 645, 651, 652, 660, 666, 668, 685, 692, 698, 735, 755, 787, 788, 789, 800, 803, 821, 852, 855, 865, 866, 869, 875, 881, 969, 970, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 990, 994, 995, 996, 997, 1000, 1008, 1015, 1018, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "main": [9, 16, 32, 62, 86, 99, 122, 167, 229, 270, 312, 342, 347, 362, 363, 364, 369, 374, 376, 378, 380, 382, 384, 387, 388, 389, 391, 392, 400, 401, 402, 407, 409, 410, 412, 496, 518, 523, 542, 543, 618, 706, 822, 969, 977, 979, 980, 987, 992, 1001, 1003, 1012, 1015, 1022, 1025, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "empir": [9, 24, 25, 36, 68, 77, 80, 82, 83, 167, 218, 267, 303, 400, 406, 409, 412, 440, 442, 453, 462, 463, 464, 467, 470, 471, 525, 527, 532, 534, 536, 542, 544, 558, 583, 596, 632, 642, 660, 664, 671, 672, 709, 714, 715, 716, 817, 827, 828, 829, 831, 850, 873, 915, 954, 972, 974, 980, 982, 984, 990, 992, 994, 1016, 1017], "heterogen": [9, 24, 55, 69, 71, 76, 167, 171, 200, 243, 308, 313, 368, 370, 387, 457, 481, 537, 574, 584, 706, 852, 856, 892, 977, 987, 990, 1000, 1017, 1026, 1030, 1032, 1033], "mode": [9, 10, 46, 47, 80, 200, 229, 281, 283, 300, 313, 376, 379, 384, 385, 387, 399, 405, 409, 413, 436, 437, 440, 442, 445, 452, 455, 464, 465, 471, 475, 480, 501, 502, 550, 554, 557, 585, 588, 589, 591, 592, 593, 603, 620, 637, 638, 651, 652, 659, 661, 666, 667, 668, 669, 672, 675, 676, 682, 686, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 848, 892, 894, 897, 900, 902, 918, 928, 929, 931, 983, 986, 1000, 1006, 1007, 1014, 1023, 1031, 1036], "stick": [9, 787, 979], "bias": [9, 27, 82, 98, 125, 131, 169, 170, 172, 266, 371, 391, 400, 409, 517, 542, 848, 872, 883, 975, 979, 988, 994, 996], "yet": [9, 57, 184, 218, 251, 262, 349, 364, 371, 375, 380, 387, 391, 392, 393, 406, 407, 409, 410, 412, 441, 445, 454, 455, 570, 770, 964, 969, 976, 980, 986, 994, 1001, 1031], "extent": [9, 30, 58, 154, 155, 156, 233, 340, 343, 433, 528, 689, 787, 980], "assum": [9, 55, 57, 159, 165, 169, 170, 189, 200, 218, 229, 232, 239, 252, 261, 270, 303, 349, 363, 375, 376, 378, 380, 382, 387, 388, 389, 391, 396, 399, 400, 402, 404, 406, 407, 409, 410, 412, 413, 418, 423, 430, 432, 437, 439, 443, 450, 456, 462, 463, 464, 465, 466, 467, 468, 469, 496, 501, 502, 525, 535, 541, 542, 554, 555, 560, 561, 580, 581, 582, 584, 613, 625, 636, 637, 639, 640, 645, 651, 652, 653, 654, 655, 659, 660, 661, 664, 665, 669, 670, 671, 674, 678, 680, 681, 685, 702, 718, 727, 733, 748, 756, 761, 766, 770, 773, 789, 792, 793, 803, 828, 834, 835, 838, 839, 840, 842, 843, 848, 859, 872, 940, 956, 957, 958, 970, 974, 976, 978, 979, 980, 982, 983, 985, 986, 987, 990, 994, 995, 996, 1028, 1034], "parametr": [9, 24, 25, 82, 232, 285, 307, 316, 400, 403, 408, 409, 430, 544, 546, 628, 678, 689, 868, 880, 923, 924, 976, 979, 982, 983, 990, 993, 996, 1030, 1032, 1035], "therefor": [9, 13, 20, 24, 37, 52, 53, 71, 72, 75, 80, 86, 100, 105, 112, 115, 117, 125, 130, 132, 148, 169, 172, 200, 204, 216, 217, 246, 251, 252, 262, 264, 299, 303, 308, 322, 334, 343, 347, 348, 356, 362, 370, 374, 381, 387, 393, 402, 403, 404, 406, 407, 409, 410, 430, 489, 528, 542, 544, 546, 547, 552, 553, 557, 558, 597, 599, 651, 652, 658, 661, 664, 669, 671, 672, 694, 705, 727, 749, 787, 852, 853, 865, 869, 873, 881, 892, 893, 970, 974, 976, 977, 980, 982, 983, 984, 985, 988, 990, 995, 996, 1001, 1006, 1013, 1014, 1015, 1031, 1032, 1035, 1036, 1037, 1038], "minimum": [9, 55, 57, 80, 125, 126, 148, 189, 210, 233, 271, 287, 288, 378, 385, 392, 395, 399, 402, 409, 410, 434, 438, 439, 443, 447, 449, 462, 463, 466, 467, 468, 469, 504, 506, 534, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 587, 620, 624, 625, 628, 630, 661, 664, 669, 671, 672, 675, 676, 685, 698, 717, 771, 772, 792, 793, 813, 828, 849, 850, 861, 862, 865, 866, 867, 871, 885, 886, 899, 900, 901, 902, 903, 909, 912, 913, 916, 932, 977, 980, 984, 986, 990, 992, 996, 1022, 1025, 1029, 1030, 1034, 1035], "determin": [9, 11, 13, 19, 46, 55, 80, 112, 114, 118, 157, 170, 179, 180, 196, 203, 261, 303, 308, 349, 356, 358, 375, 376, 378, 385, 388, 389, 399, 400, 402, 406, 407, 409, 410, 411, 412, 425, 430, 434, 435, 436, 438, 440, 442, 443, 449, 452, 453, 454, 458, 462, 463, 465, 466, 467, 468, 469, 475, 476, 477, 481, 484, 485, 488, 490, 496, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 530, 532, 535, 536, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 558, 560, 561, 563, 575, 576, 577, 581, 584, 587, 595, 600, 601, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 620, 628, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 680, 682, 683, 685, 686, 687, 700, 704, 715, 721, 722, 730, 775, 776, 777, 779, 780, 783, 789, 791, 792, 793, 795, 803, 811, 812, 813, 814, 815, 816, 817, 819, 823, 825, 826, 828, 835, 837, 838, 843, 848, 849, 850, 856, 857, 865, 866, 867, 869, 873, 881, 892, 893, 895, 898, 901, 903, 906, 927, 943, 949, 951, 954, 969, 972, 974, 979, 983, 985, 986, 990, 993, 994, 996, 1006, 1022, 1027, 1030, 1031, 1033, 1034, 1035], "concentr": [9, 100, 112, 130, 157, 167, 226, 245, 252, 253, 305, 324, 372, 376, 409, 412, 436, 512, 787, 979, 986], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 80, 91, 102, 114, 121, 128, 173, 226, 246, 247, 248, 249, 262, 287, 288, 290, 306, 314, 318, 336, 346, 347, 349, 350, 364, 365, 369, 371, 373, 376, 378, 381, 387, 389, 397, 408, 410, 416, 417, 420, 481, 495, 496, 497, 504, 505, 506, 507, 508, 515, 523, 534, 537, 557, 559, 582, 583, 584, 624, 684, 685, 688, 697, 698, 703, 710, 712, 717, 723, 728, 729, 747, 749, 770, 771, 778, 782, 783, 785, 787, 788, 844, 845, 853, 857, 864, 872, 921, 923, 941, 948, 964, 970, 977, 979, 983, 986, 988, 990, 993, 997, 1000, 1001, 1004, 1006, 1009, 1012, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "outli": [9, 80, 389, 462, 467, 976, 986], "skew": [9, 125, 203, 233, 303, 319, 368, 406, 632, 633, 634, 635, 868, 880, 976, 990, 1017, 1025, 1029, 1038], "Of": [9, 25, 27, 164, 362, 378, 402, 410, 970], "screen": [9, 1035], "presenc": [9, 60, 62, 80, 81, 109, 169, 184, 204, 303, 374, 377, 389, 404, 407, 705, 718, 748, 761, 821, 855, 863, 865, 964, 970, 976, 980, 981, 994, 1025, 1026, 1028, 1032, 1034, 1036], "mixtur": [9, 44, 55, 57, 248, 249, 253, 365, 371, 372, 389, 402, 407, 408, 412, 616, 789, 1000, 1001, 1016, 1017, 1022, 1026, 1027, 1028, 1029, 1039], "univari": [9, 36, 68, 72, 74, 143, 144, 150, 167, 215, 329, 345, 368, 401, 402, 403, 410, 438, 497, 518, 523, 585, 588, 589, 591, 592, 593, 595, 598, 599, 600, 601, 602, 620, 621, 622, 623, 638, 789, 794, 814, 818, 852, 853, 862, 867, 871, 872, 892, 897, 976, 995, 997, 1002, 1014, 1017, 1022, 1028], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 73, 75, 86, 95, 96, 102, 104, 106, 117, 118, 125, 145, 152, 170, 172, 184, 189, 204, 205, 214, 221, 222, 223, 229, 234, 236, 261, 262, 264, 273, 279, 290, 303, 307, 308, 314, 334, 349, 356, 358, 362, 368, 376, 378, 384, 387, 388, 389, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 414, 433, 439, 445, 455, 457, 458, 460, 462, 467, 475, 476, 477, 478, 501, 502, 509, 510, 511, 517, 524, 525, 526, 527, 528, 530, 532, 534, 535, 536, 541, 542, 543, 546, 547, 550, 551, 552, 553, 557, 558, 559, 581, 582, 583, 584, 620, 625, 626, 631, 632, 634, 635, 651, 652, 661, 669, 670, 671, 684, 692, 694, 700, 718, 748, 750, 751, 773, 780, 782, 783, 789, 803, 818, 821, 827, 828, 829, 830, 831, 841, 851, 852, 861, 868, 869, 872, 877, 878, 880, 881, 882, 883, 888, 899, 900, 901, 902, 903, 912, 918, 921, 928, 929, 952, 970, 972, 976, 977, 978, 979, 980, 982, 984, 986, 990, 994, 995, 996, 997, 999, 1004, 1023, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036], "font_manag": [9, 81, 287, 333], "ellipticenvelop": [9, 229, 463, 466, 467, 468, 469, 556, 986, 1022, 1025, 1029, 1030, 1035], "load_win": [9, 242, 308, 836, 844, 1019, 1033], "oneclasssvm": [9, 11, 16, 214, 229, 316, 333, 556, 670, 838, 986, 994, 995, 1024, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037], "support_fract": [9, 462, 467], "contamin": [9, 80, 81, 229, 239, 287, 288, 462, 556, 838, 986, 1030, 1038], "ocsvm": [9, 214], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 85, 91, 114, 124, 155, 212, 224, 239, 303, 331, 378, 389, 423, 457, 502, 560, 561, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 692, 855, 856, 857, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 1014], "frontier": [9, 214, 287, 333, 986, 1013], "xx1": [9, 114, 624], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 58, 80, 121, 130, 153, 154, 155, 156, 158, 171, 211, 212, 213, 214, 226, 229, 250, 287, 294, 297, 305, 306, 327, 333, 334, 339, 340, 343, 344, 624], "500": [9, 10, 44, 50, 57, 60, 61, 63, 85, 86, 103, 105, 116, 118, 126, 148, 152, 176, 213, 214, 222, 240, 241, 246, 247, 251, 261, 264, 274, 281, 287, 293, 307, 314, 319, 333, 340, 344, 362, 409, 462, 463, 467, 468, 469, 475, 476, 477, 604, 606, 607, 609, 614, 617, 618, 643, 644, 647, 648, 649, 673, 675, 676, 850, 969, 995], "clf_name": [9, 10, 347], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 56, 114, 128, 141, 212, 213, 214, 230, 236, 239, 268, 287, 288, 297, 305, 332, 333, 334, 338, 339, 340, 344, 378, 389, 400, 409, 430, 462, 542, 543, 546, 548, 552, 554, 556, 560, 586, 587, 624, 625, 626, 651, 652, 659, 661, 667, 668, 669, 670, 691, 693, 695, 700, 713, 718, 719, 727, 731, 732, 734, 748, 774, 780, 781, 784, 789, 792, 793, 803, 813, 820, 821, 822, 823, 838, 852, 859, 889, 892, 894, 896, 897, 976, 980, 986, 987, 994, 995, 1013, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 58, 80, 96, 101, 121, 124, 129, 130, 139, 141, 154, 198, 213, 214, 216, 229, 239, 287, 306, 308, 327, 333, 334, 338, 340, 343, 344, 402, 652, 707, 708, 711, 980, 1010, 1013, 1014], "contour": [9, 11, 16, 34, 46, 47, 80, 121, 141, 149, 155, 156, 158, 211, 212, 213, 214, 229, 234, 250, 287, 294, 332, 333, 335, 336, 338, 339, 340, 373, 383, 624, 625, 986, 994], "linewidth": [9, 24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 113, 125, 129, 152, 156, 160, 189, 190, 194, 195, 196, 198, 201, 203, 206, 214, 217, 229, 237, 239, 270, 274, 287, 291, 304, 314, 332, 333, 335, 340, 354, 1011], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 85, 94, 101, 107, 167, 384, 407, 526, 534, 685, 980, 999, 1000, 1014], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 102, 118, 125, 127, 198, 206, 229, 238, 248, 259, 260, 262, 265, 268, 270, 281, 285, 305, 309, 317, 326, 334, 348, 349, 364, 368, 370, 378, 387, 389, 403, 406, 413, 414, 416, 420, 424, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 489, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 706, 754, 757, 763, 771, 772, 787, 788, 789, 792, 793, 795, 800, 801, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 917, 918, 934, 940, 969, 980, 990, 1010, 1011, 1015, 1017, 1022, 1028, 1029, 1039], "boxstyl": [9, 305], "fc": [9, 286, 371], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 268, 294, 339, 392, 639, 640, 643, 644, 645, 646, 647, 648, 653, 654, 655, 656, 657, 674, 675, 676, 677, 679], "xycoord": [9, 26], "textcoord": [9, 176], "xytext": [9, 26, 176], "bbox": [9, 12, 34, 45, 102, 246, 247, 248, 251, 252, 305], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 58, 62, 73, 78, 79, 80, 90, 97, 114, 115, 116, 131, 138, 153, 154, 170, 179, 190, 192, 199, 206, 209, 214, 229, 237, 247, 252, 256, 271, 275, 287, 288, 333, 338, 339, 343, 355], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 58, 62, 78, 79, 80, 90, 97, 114, 115, 122, 123, 125, 131, 134, 139, 153, 154, 170, 187, 189, 190, 192, 193, 194, 206, 209, 210, 214, 229, 237, 247, 252, 256, 260, 264, 271, 274, 275, 287, 288, 333, 338, 339, 343, 347, 355], "prop": [9, 73, 81, 206, 248, 287, 333, 356, 393, 940, 1011], "fontproperti": [9, 81, 287, 333], "ash": [9, 373, 1025, 1028], "malic_acid": 9, "abil": [9, 61, 80, 125, 158, 164, 169, 170, 172, 200, 204, 218, 229, 347, 364, 392, 409, 410, 774, 775, 776, 779, 977, 980, 983, 986, 996, 1001, 1022, 1024, 1029, 1031, 1035, 1036], "locat": [9, 25, 53, 54, 72, 80, 81, 194, 294, 315, 334, 369, 374, 376, 380, 381, 384, 385, 392, 402, 404, 408, 441, 453, 454, 462, 463, 464, 465, 466, 467, 468, 469, 481, 493, 494, 497, 498, 505, 508, 965, 970, 976, 981, 986, 990, 996, 1030], "hard": [9, 200, 229, 233, 261, 263, 364, 375, 387, 389, 402, 407, 410, 527, 534, 562, 669, 894, 895, 896, 897, 898, 976, 993, 995, 996, 1001, 1013, 1014, 1015, 1031, 1032], "due": [9, 26, 27, 53, 55, 60, 75, 112, 115, 152, 170, 171, 179, 184, 191, 198, 200, 202, 217, 218, 233, 247, 269, 270, 281, 308, 309, 347, 348, 349, 374, 376, 382, 389, 392, 400, 402, 406, 407, 409, 412, 436, 439, 440, 452, 528, 532, 536, 537, 567, 664, 789, 792, 793, 797, 799, 803, 813, 814, 817, 820, 824, 825, 857, 861, 862, 872, 970, 976, 977, 979, 980, 981, 983, 987, 994, 1001, 1014, 1022, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "banana": [9, 980], "anywai": [9, 347, 378, 658, 678, 679], "rid": [9, 994], "difficulti": [9, 27, 218, 303, 364, 376, 400, 849, 850, 979, 983], "bandwidth": [9, 44, 63, 235, 285, 286, 294, 387, 389, 402, 408, 441, 451, 454, 832, 833, 837, 973, 986, 1033, 1037], "compromis": [9, 171, 362, 376, 640, 672, 983, 1025], "risk": [9, 55, 200, 204, 218, 304, 342, 358, 375, 376, 389, 401, 406, 409, 560, 561, 877, 878, 880, 881, 882, 883, 976, 980, 1004, 1029], "x2": [9, 16, 85, 91, 114, 124, 155, 212, 239, 378, 403, 581, 622, 692, 1014], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 373], "321": [9, 15, 91, 320], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 20, 52, 57, 86, 164, 171, 176, 200, 215, 218, 238, 239, 258, 259, 347, 363, 364, 371, 378, 381, 382, 389, 390, 391, 407, 411, 535, 541, 583, 586, 731, 980, 983, 985, 986, 994, 995, 996, 998, 1004, 1006, 1009, 1013, 1015, 1030], "boxplot": [10, 80, 126, 170, 173, 313], "gc": 10, "defaultdict": [10, 19, 25, 173, 264, 348, 349], "make_regress": [10, 75, 179, 181, 182, 186, 203, 204, 274, 314, 358, 372, 378, 379, 388, 547, 549, 553, 558, 628, 639, 640, 642, 644, 646, 648, 656, 657, 658, 660, 664, 672, 850, 893, 980, 981, 983], "randomforestregressor": [10, 118, 131, 132, 135, 164, 165, 315, 388, 409, 550, 551, 553, 555, 559, 561, 563, 625, 626, 902, 970, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "sgdregressor": [10, 211, 362, 364, 387, 401, 639, 642, 660, 664, 669, 672, 850, 893, 898, 976, 994, 1024, 1026, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1038], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 60, 61, 95, 111, 118, 119, 121, 132, 165, 184, 208, 209, 214, 229, 262, 266, 267, 274, 281, 310, 322, 323, 324, 325, 336, 347, 348, 358, 371, 385, 389, 397, 462, 467, 481, 482, 484, 485, 488, 490, 496, 504, 505, 506, 507, 508, 512, 515, 517, 524, 530, 532, 533, 539, 540, 546, 547, 548, 549, 557, 558, 560, 561, 595, 651, 652, 659, 660, 661, 665, 667, 669, 670, 671, 680, 789, 791, 792, 793, 794, 795, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 849, 850, 873, 892, 893, 894, 897, 928, 929, 949, 951, 975, 976, 981, 988, 994, 995, 1010, 1015, 1017, 1022, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 132, 187, 262, 299, 300, 303, 316, 326, 347, 374, 380, 389, 396, 433, 436, 440, 442, 445, 447, 452, 455, 457, 460, 464, 465, 471, 524, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 586, 587, 620, 625, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 685, 687, 757, 770, 787, 788, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 821, 823, 826, 841, 848, 849, 850, 851, 852, 853, 854, 889, 892, 893, 894, 895, 896, 897, 898, 946, 1001, 1024, 1025, 1027, 1029, 1030, 1031, 1033, 1034, 1036, 1037], "n_instanc": [10, 626], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 111, 114, 115, 124, 126, 127, 131, 146, 149, 165, 179, 184, 186, 191, 193, 194, 199, 200, 201, 204, 205, 206, 210, 215, 218, 233, 236, 237, 246, 250, 252, 258, 261, 266, 270, 271, 286, 303, 314, 315, 342, 348, 349, 352, 356, 362, 363, 371, 378, 382, 389, 400, 401, 402, 404, 407, 409, 410, 411, 412, 415, 439, 445, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 480, 490, 501, 502, 516, 519, 520, 524, 525, 528, 530, 531, 532, 533, 535, 536, 540, 541, 545, 550, 551, 552, 553, 554, 555, 557, 558, 559, 574, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 604, 629, 632, 636, 637, 638, 643, 651, 652, 657, 658, 659, 661, 664, 669, 670, 671, 678, 679, 696, 702, 705, 706, 708, 709, 717, 721, 722, 726, 730, 732, 738, 775, 776, 777, 779, 786, 787, 804, 805, 808, 809, 821, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 855, 862, 864, 865, 867, 868, 869, 871, 872, 878, 879, 880, 881, 885, 892, 900, 901, 902, 903, 927, 966, 970, 976, 978, 979, 982, 983, 984, 990, 991, 992, 994, 995, 996, 1006, 1013, 1015, 1022, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "atomic_benchmark": 10, "percentil": [10, 71, 125, 243, 303, 362, 585, 588, 589, 591, 592, 593, 596, 599, 625, 626, 740, 990, 1027, 1035], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 74, 123, 135, 165, 201, 239, 258, 265, 334, 352, 362, 374, 376, 387, 388, 403, 405, 409, 412, 442, 476, 531, 548, 549, 550, 551, 556, 557, 558, 559, 563, 678, 679, 789, 792, 793, 803, 816, 827, 828, 829, 830, 831, 969, 980, 990, 1015, 1030, 1032], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 66, 79, 81, 124, 149, 152, 158, 159, 171, 176, 202, 256, 261, 262, 273, 323, 342, 348, 349, 378, 385, 389, 390, 399, 400, 401, 402, 407, 410, 411, 412, 581, 586, 600, 601, 608, 620, 627, 652, 794, 804, 805, 808, 918, 970, 979, 1017, 1030, 1032], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 58, 64, 100, 114, 116, 121, 125, 141, 156, 160, 180, 183, 192, 209, 212, 218, 233, 256, 261, 268, 270, 327, 330, 332, 334, 335, 336, 338, 340, 348, 353, 371, 387, 389, 399, 400, 403, 406, 410, 412, 430, 433, 434, 438, 443, 450, 456, 464, 465, 471, 486, 501, 502, 575, 585, 588, 589, 591, 592, 593, 603, 606, 607, 608, 610, 612, 613, 615, 616, 618, 620, 625, 626, 636, 685, 692, 693, 698, 699, 700, 708, 723, 732, 750, 751, 755, 758, 761, 762, 763, 764, 765, 766, 768, 770, 771, 772, 773, 774, 778, 820, 832, 833, 907, 980, 981, 982, 983, 990, 996, 1022, 1034, 1035, 1037, 1038], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 114, 116, 120, 128, 158, 170, 171, 173, 176, 191, 204, 218, 229, 236, 239, 240, 243, 251, 259, 261, 267, 270, 271, 279, 287, 288, 290, 303, 316, 323, 326, 347, 348, 369, 370, 371, 373, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 396, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 414, 416, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 493, 495, 496, 497, 501, 502, 503, 507, 508, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 681, 682, 683, 684, 685, 689, 690, 691, 693, 694, 695, 702, 705, 727, 728, 729, 760, 764, 771, 772, 780, 784, 787, 788, 789, 792, 793, 795, 803, 807, 808, 811, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 932, 933, 935, 936, 943, 947, 949, 969, 970, 972, 978, 981, 984, 986, 990, 991, 993, 996, 1000, 1006, 1015, 1022, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "generate_dataset": 10, "coef": [10, 54, 105, 169, 170, 179, 184, 187, 191, 192, 194, 199, 203, 204, 205, 209, 216, 243, 274, 299, 319, 343, 517, 639, 640, 642, 645, 646, 652, 653, 654, 655, 656, 662, 665, 667, 673, 674, 675, 676, 677, 678, 679, 680, 984], "random_se": [10, 92, 121], "x_scaler": 10, "y_scaler": 10, "ok": [10, 376, 986], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 294, 326, 362, 700, 706, 721, 722, 730, 775, 776, 779, 780, 980, 1022, 1030, 1031, 1037], "bp": [10, 126, 149, 188, 189, 373, 988], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 115, 132, 135, 161, 176, 179, 180, 190, 198, 226, 240, 256, 267, 294, 298, 304, 308, 309, 324, 334, 355, 374, 389, 402, 407, 981], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 101, 118, 131, 159, 160, 176, 188, 193, 195, 197, 198, 200, 202, 203, 215, 217, 222, 246, 248, 249, 256, 261, 263, 264, 265, 288, 303, 308, 324, 352, 376, 380, 410, 1030, 1032, 1033, 1038], "linestyl": [10, 11, 16, 33, 60, 73, 80, 103, 105, 112, 124, 134, 138, 141, 152, 155, 157, 159, 161, 172, 185, 187, 188, 189, 200, 201, 202, 206, 210, 212, 213, 218, 237, 239, 258, 260, 264, 265, 270, 286, 294, 298, 304, 332, 335, 336, 338, 339, 340, 1011], "major": [10, 14, 118, 268, 303, 307, 313, 314, 315, 316, 317, 318, 319, 349, 362, 371, 375, 376, 379, 382, 387, 390, 402, 406, 408, 410, 412, 544, 562, 563, 687, 721, 722, 730, 775, 776, 779, 904, 906, 980, 983, 994, 1001, 1004, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25, 795, 811], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 208, 383, 431, 569, 691, 693, 695, 911], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 657, 678, 679, 976, 980], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 208, 223, 226, 281], "1e2": [10, 152, 159, 235, 252, 334, 738], "randomforest": [10, 121, 362, 409, 900, 901, 1027], "0001": [10, 149, 208, 259, 378, 414, 436, 440, 452, 464, 465, 471, 526, 531, 533, 540, 542, 543, 552, 553, 639, 640, 641, 642, 645, 646, 651, 652, 653, 654, 655, 656, 661, 662, 665, 667, 669, 671, 673, 680, 682, 686, 849, 850, 892, 893, 969], "250": [10, 65, 125, 176, 221, 486, 685, 969, 992, 1029], "410": [10, 15], "plot_prediction_lat": [10, 15], "conserv": [11, 389, 575, 582, 884, 885, 979, 992], "biologi": 11, "south": [11, 170, 294, 408], "american": [11, 12, 70, 81, 371, 402, 404, 408, 409, 410, 462, 467, 723, 872], "mammal": 11, "past": [11, 380, 381, 384, 387, 390, 406, 407, 409, 531, 548, 549, 671, 1004, 1007, 1038], "environment": [11, 184, 218], "unsuccess": 11, "cast": [11, 53, 200, 222, 370, 389, 390, 410, 489, 637, 638, 639, 645, 649, 650, 653, 654, 655, 656, 657, 658, 666, 668, 945, 1029, 1030, 1031, 1032, 1035, 1037], "densiti": [11, 49, 55, 60, 65, 75, 101, 105, 149, 167, 186, 200, 215, 218, 225, 229, 233, 245, 252, 253, 261, 267, 282, 287, 288, 295, 303, 334, 347, 373, 385, 389, 402, 409, 413, 421, 437, 439, 441, 443, 445, 457, 460, 491, 495, 529, 534, 542, 543, 787, 788, 789, 832, 833, 837, 838, 885, 974, 976, 979, 983, 985, 986, 992, 1000, 1002, 1006, 1016, 1017, 1024, 1026, 1030, 1031, 1037, 1038], "phillip": [11, 294, 491], "2006": [11, 294, 409, 412, 455, 491, 550, 551, 558, 559, 603, 604, 607, 612, 615, 642, 659, 660, 733, 780, 781, 787, 827, 885, 902, 903, 976, 980, 982, 985, 992, 993], "basemap": [11, 294], "coast": [11, 294], "line": [11, 17, 40, 43, 60, 70, 95, 100, 112, 118, 124, 151, 162, 164, 165, 167, 170, 171, 188, 189, 190, 192, 195, 196, 198, 201, 202, 203, 208, 209, 211, 212, 229, 233, 234, 237, 239, 258, 265, 267, 268, 291, 294, 304, 315, 333, 338, 339, 343, 344, 347, 370, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 387, 407, 408, 409, 431, 480, 481, 482, 501, 502, 535, 546, 547, 548, 549, 603, 606, 607, 625, 663, 679, 693, 694, 695, 795, 811, 948, 974, 980, 984, 987, 994, 1000, 1003, 1013, 1015, 1024, 1033, 1035, 1038], "nation": [11, 80, 294, 371, 839], "boundari": [11, 13, 25, 26, 27, 31, 34, 58, 60, 110, 114, 121, 130, 136, 153, 156, 167, 171, 183, 201, 229, 234, 237, 264, 284, 289, 291, 292, 294, 297, 303, 305, 308, 321, 328, 331, 332, 334, 336, 343, 344, 353, 372, 400, 409, 410, 412, 443, 449, 497, 529, 542, 543, 562, 581, 582, 584, 624, 821, 834, 840, 842, 843, 844, 871, 888, 889, 896, 897, 900, 916, 974, 983, 986, 990, 993, 994, 995, 1022, 1024, 1026, 1035, 1036, 1037], "america": [11, 12, 80, 294, 839, 990], "bradypu": [11, 294, 491], "variegatu": [11, 294, 491], "brown": [11, 92, 294, 491, 621, 970, 1027, 1029, 1030, 1031, 1034], "throat": [11, 294, 491], "sloth": [11, 294, 491], "microryzomi": [11, 294, 491], "minutu": [11, 294, 491], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 104, 105, 132, 157, 159, 165, 184, 200, 201, 218, 229, 261, 263, 270, 290, 294, 304, 316, 322, 331, 348, 364, 373, 374, 376, 379, 384, 387, 389, 392, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 412, 431, 456, 475, 477, 491, 501, 502, 537, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 581, 582, 584, 587, 602, 615, 626, 651, 652, 665, 675, 676, 687, 697, 703, 706, 711, 721, 735, 747, 749, 785, 821, 827, 828, 829, 830, 831, 834, 839, 842, 848, 876, 900, 901, 902, 903, 970, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 990, 995, 996, 1006, 1011, 1013, 1014], "forest": [11, 27, 31, 110, 117, 121, 127, 128, 130, 132, 135, 136, 164, 167, 168, 174, 176, 229, 239, 258, 294, 315, 347, 358, 369, 388, 389, 400, 401, 411, 456, 457, 483, 484, 488, 489, 491, 508, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 623, 627, 789, 794, 818, 825, 852, 866, 896, 900, 901, 902, 969, 970, 981, 988, 1001, 1002, 1017, 1019, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1031], "rice": [11, 294, 491, 1035], "rat": [11, 294, 491], "rodent": [11, 294, 491], "live": [11, 70, 170, 294, 376, 402, 491, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "peru": [11, 294, 491], "colombia": [11, 294, 491], "ecuador": [11, 294, 491], "venezuela": [11, 294, 491], "entropi": [11, 241, 273, 294, 315, 322, 323, 358, 402, 409, 414, 491, 526, 550, 557, 600, 601, 651, 710, 728, 729, 733, 785, 900, 902, 976, 977, 980, 984, 996, 1024, 1026, 1030, 1031, 1036, 1038, 1039], "anderson": [11, 294, 491, 1028, 1034], "schapir": [11, 294, 409, 491, 546, 547], "ecolog": [11, 294, 491], "190": [11, 124, 218, 270, 271, 277, 294, 382, 491], "231": [11, 294, 331, 345, 402, 413, 437, 491, 577], "259": [11, 223, 294, 409, 491, 560, 561], "________________________________________________________________________________": [11, 54, 347], "coastlin": [11, 149, 294, 373], "coverag": [11, 125, 200, 218, 294, 379, 398, 491, 620, 713], "area": [11, 34, 128, 149, 200, 218, 239, 258, 261, 268, 270, 271, 334, 339, 343, 373, 376, 380, 387, 402, 410, 695, 699, 700, 701, 734, 780, 781, 977, 980, 983, 999, 1024], "roc": [11, 25, 117, 149, 167, 228, 230, 239, 240, 244, 254, 277, 383, 400, 406, 497, 503, 557, 651, 695, 699, 700, 701, 719, 734, 774, 780, 781, 808, 818, 821, 859, 897, 986, 1019, 1024, 1025, 1027, 1028, 1032, 1034, 1038], "868443": 11, "993919": 11, "elaps": [11, 47, 67, 118, 119, 120, 362, 457, 460, 562, 563, 851, 852, 853, 854], "astro": [11, 159, 221, 249], "washington": [11, 159, 221, 249, 286, 294], "fetch_species_distribut": [11, 294, 1031], "bunch": [11, 369, 370, 371, 457, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 503, 560, 561, 562, 563, 625, 626, 627, 851, 852, 900, 901, 902, 903, 940, 1004, 1015, 1027, 1029, 1032, 1034, 1038], "ll": [11, 55, 120, 256, 294, 376, 387, 525, 534, 983, 996, 1006], "otherwis": [11, 56, 62, 114, 161, 165, 181, 202, 208, 294, 358, 364, 374, 378, 380, 382, 389, 393, 402, 404, 406, 410, 412, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 446, 447, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 489, 519, 526, 527, 528, 529, 531, 533, 534, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 590, 595, 603, 604, 607, 624, 625, 626, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 683, 685, 689, 690, 691, 693, 695, 696, 700, 702, 706, 707, 716, 718, 719, 720, 721, 722, 730, 733, 744, 746, 747, 748, 758, 766, 770, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 803, 807, 808, 811, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 847, 849, 850, 852, 855, 856, 857, 858, 859, 863, 864, 871, 872, 873, 874, 877, 878, 879, 881, 882, 883, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 907, 913, 915, 928, 929, 939, 941, 964, 966, 975, 976, 977, 980, 983, 984, 986, 987, 990, 992, 994, 995, 1000, 1004, 1006, 1024, 1030, 1031, 1032, 1035, 1038], "improvis": [11, 294], "mpl_toolkit": [11, 45, 67, 90, 101, 102, 171, 197, 221, 223, 294], "except": [11, 16, 44, 53, 98, 109, 118, 208, 215, 229, 236, 269, 281, 294, 298, 299, 303, 305, 318, 365, 369, 376, 378, 379, 380, 381, 387, 389, 393, 396, 399, 403, 406, 407, 409, 410, 412, 425, 453, 458, 461, 475, 476, 477, 502, 547, 549, 550, 551, 553, 555, 557, 558, 561, 563, 604, 620, 623, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 680, 704, 770, 796, 825, 826, 832, 833, 835, 838, 843, 849, 850, 856, 870, 872, 890, 893, 895, 898, 901, 903, 933, 966, 976, 980, 995, 1006, 1014, 1015, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "importerror": [11, 16, 53, 98, 281, 294, 384, 489], "construct_grid": [11, 294], "object": [11, 13, 14, 19, 26, 44, 50, 62, 66, 70, 71, 98, 109, 132, 138, 147, 148, 157, 167, 171, 184, 196, 200, 216, 218, 228, 236, 240, 242, 243, 244, 259, 273, 294, 309, 316, 317, 319, 322, 348, 349, 358, 369, 370, 371, 376, 377, 379, 381, 382, 383, 385, 388, 389, 390, 393, 396, 402, 403, 404, 407, 410, 411, 412, 416, 418, 423, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 704, 711, 724, 725, 734, 750, 751, 773, 774, 781, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 912, 913, 914, 915, 916, 919, 923, 925, 935, 936, 937, 938, 939, 940, 941, 943, 945, 946, 948, 965, 966, 968, 976, 977, 978, 979, 983, 986, 987, 990, 993, 994, 995, 1000, 1001, 1006, 1007, 1009, 1010, 1013, 1015, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "func": [11, 75, 117, 170, 180, 218, 294, 376, 403, 458, 692, 856, 990, 1026, 1028, 1030, 1031], "xgrid": [11, 294], "ygrid": [11, 294], "correspond": [11, 13, 16, 20, 26, 32, 41, 53, 65, 78, 82, 97, 112, 115, 118, 119, 121, 128, 145, 148, 149, 153, 158, 161, 170, 189, 192, 200, 201, 204, 209, 218, 230, 235, 236, 243, 251, 260, 262, 264, 265, 270, 271, 294, 308, 315, 316, 317, 348, 352, 353, 358, 363, 370, 371, 372, 375, 376, 378, 380, 383, 384, 388, 389, 390, 399, 400, 402, 404, 405, 406, 407, 409, 410, 411, 412, 417, 423, 430, 432, 434, 438, 441, 444, 446, 452, 454, 456, 457, 465, 475, 476, 477, 483, 484, 485, 486, 487, 488, 489, 527, 534, 537, 538, 539, 542, 543, 545, 548, 550, 552, 553, 554, 557, 575, 577, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 610, 623, 625, 626, 628, 636, 637, 638, 639, 640, 641, 645, 651, 652, 653, 654, 655, 661, 662, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 680, 683, 684, 685, 687, 696, 703, 706, 716, 717, 726, 730, 744, 746, 766, 770, 774, 780, 781, 784, 786, 787, 788, 789, 792, 793, 795, 803, 811, 813, 821, 824, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 841, 849, 850, 859, 863, 865, 866, 869, 873, 881, 894, 897, 900, 901, 902, 903, 917, 923, 940, 955, 969, 970, 972, 973, 974, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 990, 991, 994, 995, 999, 1006, 1012, 1015, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "coordin": [11, 12, 13, 54, 100, 131, 156, 185, 221, 262, 294, 362, 407, 412, 436, 440, 441, 442, 454, 464, 465, 471, 524, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 543, 607, 639, 640, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 674, 675, 676, 677, 681, 682, 683, 686, 687, 699, 756, 761, 892, 976, 977, 995, 1013, 1022, 1025, 1026, 1027, 1031, 1033, 1035, 1036, 1037], "corner": [11, 13, 26, 53, 169, 258, 262, 270, 271, 294, 376, 491, 904, 906, 980, 1036], "cell": [11, 12, 20, 26, 32, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 294, 300, 309, 314, 315, 317, 318, 324, 356, 373, 381, 685, 980, 981, 1028, 1036], "xmin": [11, 78, 190, 192, 209, 210, 294], "x_left_lower_corn": [11, 294, 491], "grid_siz": [11, 61, 294, 491], "xmax": [11, 78, 190, 192, 209, 210, 294], "nx": [11, 34, 294, 491], "ymin": [11, 78, 187, 189, 192, 193, 201, 209, 261, 294], "y_left_lower_corn": [11, 294, 491], "ny": [11, 34, 260, 294, 373, 491, 970, 992], "create_species_bunch": 11, "species_nam": [11, 294], "record": [11, 96, 116, 172, 236, 309, 349, 362, 376, 402, 404, 443, 450, 491, 613, 636, 685, 763, 766, 770, 771, 772, 773, 815, 838, 1035, 1036], "join": [11, 12, 19, 55, 164, 218, 261, 305, 371, 390, 456, 1015, 1022, 1030], "ascii": [11, 294, 410, 480, 581, 582, 584], "pt": [11, 371, 411, 868, 990], "desir": [11, 24, 114, 149, 165, 200, 202, 303, 307, 369, 376, 378, 380, 384, 396, 399, 402, 405, 406, 407, 411, 496, 531, 533, 537, 540, 560, 586, 595, 596, 657, 663, 678, 679, 692, 701, 728, 832, 833, 837, 857, 859, 862, 863, 865, 866, 868, 869, 873, 876, 878, 880, 881, 916, 949, 972, 974, 977, 983, 990, 994, 995, 996, 1006, 1022, 1030, 1031, 1032, 1035], "pts_": 11, "ix": [11, 270, 341], "searchsort": 11, "dd": [11, 12, 130, 294, 491], "ii": [11, 96, 171, 207, 256, 373, 410, 575, 576, 582, 631, 659, 660, 855, 864, 976, 990, 999], "lat": [11, 294, 491, 756], "cov_": [11, 82], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 81, 92, 124, 165, 172, 224, 232, 236, 238, 273, 315, 378, 381, 388, 393, 793, 810, 827, 828, 829, 831, 969, 970], "land": [11, 294, 390, 409], "water": 11, "land_refer": [11, 294], "standard": [11, 12, 20, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 112, 115, 117, 118, 119, 120, 121, 128, 132, 149, 152, 157, 159, 161, 170, 179, 185, 189, 198, 200, 209, 221, 222, 223, 234, 251, 256, 259, 260, 261, 262, 264, 303, 308, 332, 347, 362, 363, 368, 369, 370, 372, 373, 374, 376, 378, 379, 381, 382, 385, 387, 389, 392, 396, 398, 402, 404, 405, 406, 410, 412, 439, 461, 465, 481, 489, 494, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 515, 517, 518, 523, 525, 528, 534, 545, 583, 587, 604, 627, 637, 638, 643, 644, 647, 648, 649, 657, 658, 665, 666, 667, 668, 669, 671, 680, 682, 686, 780, 795, 810, 811, 829, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 856, 861, 862, 865, 868, 869, 870, 872, 880, 881, 882, 883, 890, 892, 893, 912, 969, 972, 976, 977, 980, 982, 983, 984, 986, 994, 995, 1001, 1004, 1006, 1011, 1013, 1014, 1015, 1017, 1028, 1029, 1030, 1031, 1033, 1034, 1035], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 294], "llcrnrlat": [11, 294], "urcrnrlat": [11, 294], "llcrnrlon": [11, 294], "urcrnrlon": [11, 294], "drawcoastlin": [11, 294], "drawcountri": [11, 294], "9998": [11, 294], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 90, 91, 92, 95, 102, 103, 111, 112, 114, 121, 125, 128, 130, 131, 133, 134, 138, 141, 145, 146, 149, 153, 155, 156, 160, 165, 167, 170, 171, 172, 182, 183, 185, 194, 197, 204, 212, 214, 233, 235, 237, 238, 246, 249, 261, 264, 265, 270, 271, 274, 281, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 304, 305, 306, 307, 310, 313, 317, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 346, 347, 349, 350, 358, 363, 370, 371, 373, 376, 384, 385, 389, 393, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 452, 453, 455, 462, 465, 481, 495, 497, 499, 505, 516, 524, 530, 534, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 574, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 624, 632, 633, 641, 643, 644, 646, 647, 648, 649, 651, 652, 656, 657, 658, 659, 660, 662, 672, 673, 675, 676, 677, 678, 679, 681, 684, 688, 689, 697, 698, 701, 710, 718, 729, 735, 748, 750, 751, 753, 758, 761, 766, 767, 768, 769, 771, 783, 784, 785, 787, 788, 790, 794, 796, 797, 798, 801, 804, 805, 807, 808, 810, 816, 827, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 853, 857, 858, 859, 863, 864, 865, 867, 868, 872, 880, 885, 899, 907, 915, 924, 929, 954, 969, 970, 972, 973, 974, 976, 977, 978, 979, 982, 984, 985, 986, 988, 993, 994, 995, 996, 1000, 1003, 1010, 1016, 1017, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "solid": [11, 16, 31, 33, 124, 155, 212, 213, 229, 294, 305, 1004], "z": [11, 16, 34, 58, 101, 121, 141, 154, 156, 171, 210, 212, 213, 214, 221, 223, 229, 234, 250, 287, 294, 297, 305, 308, 327, 333, 334, 338, 339, 340, 344, 373, 399, 407, 409, 546, 547, 578, 632, 657, 664, 678, 679, 682, 686, 692, 716, 777, 872, 976, 977, 984, 985, 1037], "float64": [11, 13, 48, 53, 71, 124, 126, 127, 170, 171, 272, 317, 318, 363, 370, 376, 378, 389, 410, 464, 465, 471, 489, 490, 501, 502, 535, 574, 575, 582, 584, 634, 651, 666, 668, 692, 730, 857, 865, 866, 894, 895, 897, 898, 901, 903, 910, 912, 951, 954, 956, 957, 958, 995, 1006, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "idx": [11, 16, 19, 30, 45, 55, 105, 114, 118, 121, 133, 161, 171, 173, 184, 192, 199, 200, 209, 222, 239, 353, 403, 406], "9999": [11, 218, 294, 325, 491, 620, 1030], "coverages_land": 11, "contourf": [11, 16, 121, 214, 234, 287, 294, 297, 305, 306, 327, 333, 339, 344, 624, 625], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 149, 200, 218, 239, 258, 261, 265, 268, 270, 271, 400, 695, 701, 780, 980, 1027, 1030, 1034], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 101, 105, 213, 214, 247, 268, 287, 288, 333, 339, 344, 402, 700, 980, 996], "fpr": [11, 230, 239, 258, 270, 271, 383, 585, 589, 691, 695, 699, 719, 781, 980, 1019, 1022, 1038], "tpr": [11, 230, 239, 258, 270, 271, 383, 695, 699, 781, 980, 1019, 1022, 1038], "threshold": [11, 25, 42, 65, 98, 105, 149, 167, 171, 173, 195, 230, 232, 258, 259, 260, 268, 279, 319, 321, 328, 353, 356, 389, 402, 407, 409, 411, 434, 435, 438, 439, 462, 493, 501, 502, 524, 530, 535, 541, 542, 543, 556, 581, 584, 586, 590, 595, 596, 637, 660, 664, 669, 671, 685, 691, 693, 695, 696, 699, 700, 713, 718, 719, 731, 732, 748, 774, 780, 781, 784, 787, 788, 808, 827, 838, 839, 855, 857, 859, 875, 887, 888, 889, 897, 904, 906, 954, 976, 980, 983, 984, 986, 990, 993, 995, 996, 1001, 1022, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038], "roc_curv": [11, 230, 258, 270, 695, 699, 719, 774, 780, 980, 1022, 1023, 1024, 1027, 1028, 1030, 1035, 1038], "roc_auc": [11, 149, 261, 265, 270, 271, 383, 627, 695, 980, 1019], "ntime": [11, 272], "388": [11, 15], "plot_species_distribution_model": [11, 15, 491], "emploi": [12, 152, 235, 404, 410, 412, 443, 471, 575, 582, 988, 1004, 1014, 1028], "techniqu": [12, 18, 70, 72, 97, 106, 113, 123, 140, 148, 149, 165, 167, 169, 208, 223, 225, 266, 285, 316, 323, 352, 364, 373, 387, 389, 400, 401, 402, 406, 407, 408, 409, 410, 411, 440, 441, 442, 443, 527, 547, 670, 682, 686, 687, 718, 748, 972, 976, 977, 979, 980, 983, 986, 988, 992, 994, 996, 1001, 1004, 1009, 1014, 1015, 1035], "histor": [12, 200, 1001], "quot": [12, 14, 70, 262, 347, 348, 363, 370, 371, 374, 380, 401, 481, 482, 489, 980, 992, 995, 1015, 1037], "quantiti": [12, 122, 261, 268, 315, 362, 389, 402, 409, 714, 715, 716, 777, 848, 969, 971, 974, 976, 1027], "daili": [12, 1004], "price": [12, 75, 122, 132, 309, 970, 976, 1004, 1011], "link": [12, 17, 112, 170, 171, 179, 200, 204, 218, 246, 264, 291, 352, 363, 374, 375, 376, 377, 380, 384, 389, 400, 402, 404, 407, 412, 554, 555, 603, 641, 662, 673, 681, 698, 911, 913, 976, 983, 996, 997, 1000, 1003, 1009, 1013, 1015, 1020, 1022, 1025, 1026, 1029, 1030, 1033], "fluctuat": [12, 60, 200, 268, 1030], "normalesup": [12, 32, 46, 66, 234], "2003": [12, 399, 402, 407, 410, 444, 445, 455, 506, 508, 682, 686, 827, 829, 976, 977, 982, 992, 1030], "2008": [12, 404, 406, 407, 471, 527, 556, 583, 638, 657, 678, 679, 685, 709, 718, 748, 822, 827, 831, 848, 974, 977, 978, 980, 981, 982, 985, 986, 995], "calm": 12, "ago": [12, 1001], "tech": [12, 373, 830], "firm": [12, 402], "crash": [12, 376, 461, 882, 883, 890, 990, 1026, 1030, 1038], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 384, 848, 985, 1013], "msft": 12, "ibm": [12, 19, 326, 349, 371], "twx": 12, "warner": [12, 1037, 1038], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1015], "amzn": 12, "amazon": 12, "tm": [12, 983], "toyota": 12, "caj": 12, "canon": [12, 389, 400, 409, 475, 476, 478, 760, 1001, 1002, 1017], "sne": [12, 167, 220, 221, 222, 223, 225, 227, 507, 518, 685, 1016, 1017], "soni": [12, 1032, 1034], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 849, 850, 984], "boe": 12, "ko": [12, 26, 153], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 80, 81, 404, 462, 467], "mcdonald": 12, "pep": [12, 384, 1022], "pepsi": 12, "kellogg": 12, "un": [12, 376, 400, 410, 414, 526, 582, 785, 855, 864, 875, 879, 1031], "unilev": 12, "mar": [12, 998], "marriott": 12, "pg": [12, 382, 642, 976, 1027], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 971, 982, 1034], "electr": [12, 373, 402], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1004], "chase": [12, 1022], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 1004], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 362, 374, 387, 981, 998], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 70], "instrument": [12, 70, 96, 169], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1032], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 135], "dynam": [12, 171, 548, 549, 556, 572, 573, 669, 670, 671, 996, 1004, 1028, 1034], "rtn": 12, "raytheon": 12, "cat": [12, 71, 171, 172, 316, 317, 318, 319, 371, 410, 575, 705, 711, 746, 775, 873, 980, 990, 1031, 1032, 1034], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 349, 363, 378, 382, 404, 410, 492, 575, 581, 582, 584, 904, 906, 1000], "fetch": [12, 17, 132, 170, 218, 369, 370, 371, 376, 380, 381, 384, 401, 407, 489, 548, 549, 556, 581, 582, 584, 1030, 1038], "histori": [12, 365, 539, 552, 553, 998, 1022], "stderr": [12, 821], "url": [12, 17, 149, 370, 373, 380], "githubusercont": 12, "master": [12, 16, 281, 318, 376, 380, 1004, 1027], "financi": [12, 402, 409, 976], "csv": [12, 370, 373, 381, 1003, 1030, 1035], "read_csv": [12, 381, 489, 1037], "close_pric": 12, "vstack": [12, 26, 57, 65, 155, 156, 182, 246, 250, 281, 294, 339, 624, 981, 1030], "q": [12, 71, 85, 125, 200, 316, 399, 402, 407, 928, 976, 995], "open_pric": 12, "carri": [12, 31, 112, 165, 261, 264, 269, 298, 305, 349, 390, 396, 410, 550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 1004, 1014], "invers": [12, 54, 77, 83, 112, 167, 251, 270, 276, 334, 348, 349, 368, 389, 401, 403, 405, 406, 407, 410, 414, 438, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 520, 526, 527, 528, 532, 534, 536, 550, 554, 557, 582, 583, 584, 621, 637, 638, 651, 652, 659, 661, 667, 668, 669, 670, 671, 673, 716, 735, 744, 787, 788, 834, 835, 842, 843, 849, 850, 852, 856, 859, 865, 866, 868, 884, 885, 892, 893, 894, 897, 898, 900, 902, 918, 974, 976, 980, 983, 984, 990, 994, 995, 1013, 1015, 1016, 1017, 1022, 1025, 1030, 1033, 1034, 1036], "correl": [12, 27, 82, 85, 86, 106, 129, 145, 148, 157, 167, 168, 169, 171, 172, 174, 184, 189, 195, 218, 261, 279, 309, 314, 315, 342, 369, 372, 373, 381, 389, 391, 399, 404, 406, 411, 412, 443, 450, 475, 476, 478, 486, 487, 493, 517, 557, 599, 602, 620, 627, 628, 629, 675, 676, 735, 749, 770, 771, 772, 818, 832, 833, 869, 870, 872, 881, 971, 976, 981, 987, 990, 994, 996, 1001, 1002, 1017, 1022, 1023, 1024, 1035, 1036], "condition": [12, 27, 200, 400, 404, 750, 974], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 374, 376, 385, 389, 404, 434, 438, 445, 455, 456, 578, 579, 688, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 978, 983, 985, 993, 1026, 1035], "edge_model": 12, "graphicallassocv": [12, 82, 404, 464, 466, 467, 468, 469, 471, 1030, 1034, 1036, 1038], "seri": [12, 20, 82, 119, 169, 172, 182, 200, 204, 221, 239, 243, 266, 310, 317, 322, 368, 371, 381, 389, 402, 482, 483, 484, 485, 489, 493, 494, 495, 497, 498, 503, 534, 683, 687, 810, 908, 971, 976, 977, 981, 983, 994, 1000, 1025, 1028, 1029, 1030, 1034, 1037], "rather": [12, 53, 82, 112, 115, 164, 170, 200, 201, 214, 307, 308, 347, 348, 358, 363, 372, 376, 378, 381, 382, 384, 387, 388, 389, 390, 402, 406, 407, 409, 410, 412, 441, 454, 456, 558, 574, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 622, 639, 640, 645, 646, 653, 654, 655, 656, 773, 803, 823, 825, 826, 855, 892, 893, 904, 929, 974, 976, 977, 980, 982, 983, 987, 1001, 1010, 1013, 1022, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1037, 1038], "former": [12, 349, 409, 410, 558, 791, 798, 807, 982, 1022, 1028, 1031], "recoveri": [12, 82, 184, 199, 404], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 384], "trust": [12, 26, 71, 72, 81, 111, 112, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 380, 390, 396, 400, 1010, 1036], "unabl": [12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 169, 170, 171, 172, 181, 184, 200, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 364, 872, 990, 1031], "render": [12, 26, 53, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 195, 204, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356, 376, 380, 381, 382, 389, 544, 582, 624, 693, 695, 869, 881, 904, 906, 979, 996, 1035], "nbviewer": [12, 26, 71, 72, 111, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 318, 324, 356], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 55, 58, 60, 134, 171, 173, 200, 222, 236, 252, 256, 309, 324, 348, 356, 371, 381, 389, 390, 393, 402, 408, 409, 410, 427, 439, 488, 581, 582, 584, 587, 711, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 865, 866, 902, 903, 976, 977, 979, 980, 981, 990, 996, 997, 998, 1000, 1006, 1009, 1010, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1038], "amongst": [12, 996], "indic": [12, 19, 20, 25, 26, 27, 48, 59, 60, 66, 75, 86, 95, 112, 117, 157, 160, 165, 169, 171, 197, 223, 233, 236, 255, 263, 264, 267, 268, 281, 294, 322, 323, 326, 347, 348, 349, 356, 363, 371, 376, 377, 378, 380, 384, 385, 387, 389, 398, 399, 400, 402, 404, 406, 407, 409, 410, 412, 413, 417, 430, 433, 437, 443, 444, 445, 446, 448, 449, 450, 453, 457, 460, 465, 480, 501, 502, 504, 505, 506, 516, 525, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 574, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 613, 620, 621, 622, 623, 625, 626, 632, 640, 643, 644, 646, 647, 648, 654, 656, 658, 666, 668, 675, 676, 683, 685, 687, 689, 696, 700, 705, 706, 711, 712, 713, 717, 720, 721, 722, 723, 726, 730, 731, 732, 733, 746, 763, 770, 771, 772, 773, 775, 776, 777, 779, 780, 782, 783, 784, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 825, 826, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 856, 859, 863, 865, 873, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 912, 913, 918, 933, 943, 944, 970, 975, 976, 977, 980, 981, 982, 983, 984, 987, 988, 990, 991, 994, 995, 1001, 1006, 1010, 1013, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1032, 1033, 1035, 1037, 1038], "reflect": [12, 40, 46, 47, 80, 92, 96, 122, 171, 172, 200, 218, 270, 285, 348, 372, 375, 380, 389, 391, 399, 443, 449, 977, 980, 986, 988, 1014, 1023, 1031], "properti": [12, 25, 159, 160, 202, 217, 247, 283, 308, 356, 362, 365, 369, 376, 378, 392, 399, 400, 402, 404, 407, 409, 411, 412, 417, 435, 438, 444, 445, 446, 457, 458, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 583, 584, 586, 587, 590, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 625, 639, 645, 648, 653, 655, 667, 668, 692, 697, 698, 701, 789, 792, 793, 803, 820, 821, 851, 852, 865, 866, 867, 873, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 972, 975, 976, 977, 980, 981, 983, 986, 990, 993, 995, 996, 997, 1001, 1006, 1027, 1031, 1032, 1035, 1036], "impact": [12, 25, 36, 37, 68, 75, 112, 145, 167, 169, 170, 171, 202, 204, 218, 255, 308, 318, 348, 358, 362, 363, 369, 387, 390, 400, 402, 407, 440, 442, 529, 533, 540, 583, 659, 660, 661, 665, 667, 669, 670, 671, 685, 784, 789, 792, 793, 803, 815, 832, 833, 869, 881, 915, 929, 951, 954, 969, 979, 987, 995, 1029, 1032, 1035], "affinity_propag": [12, 44], "covariance_": [12, 34, 80, 82, 462, 463, 464, 465, 466, 467, 468, 469, 542, 543, 974, 1029], "n_label": [12, 92, 237, 389, 480, 516, 706, 713, 718, 731, 732, 746, 748, 782, 783, 809, 980, 1028, 1030], "lai": [12, 308, 986], "canva": [12, 16], "manifold": [12, 39, 52, 67, 224, 225, 226, 227, 281, 313, 317, 318, 324, 365, 369, 389, 402, 407, 409, 495, 518, 523, 537, 542, 559, 841, 853, 862, 885, 915, 983, 1016, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "dens": [12, 55, 167, 178, 219, 317, 318, 326, 362, 385, 389, 402, 407, 409, 411, 436, 439, 440, 442, 457, 460, 489, 516, 517, 527, 528, 537, 559, 578, 579, 600, 601, 622, 645, 650, 651, 652, 659, 661, 665, 666, 669, 670, 671, 680, 681, 682, 685, 686, 752, 753, 759, 771, 782, 849, 850, 857, 864, 865, 867, 869, 870, 871, 872, 881, 882, 883, 884, 885, 892, 893, 894, 895, 897, 898, 930, 951, 954, 970, 973, 976, 977, 980, 981, 983, 986, 990, 992, 993, 994, 995, 996, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "eigen_solv": [12, 44, 46, 66, 221, 222, 407, 445, 455, 528, 681, 682, 684, 686, 688, 977, 1023, 1032, 1035, 1036, 1037], "arpack": [12, 19, 44, 46, 66, 222, 407, 444, 445, 446, 455, 528, 534, 537, 681, 682, 684, 686, 688, 977, 1028, 1029, 1034], "don": [12, 54, 70, 123, 170, 222, 236, 237, 261, 281, 325, 331, 335, 342, 347, 348, 362, 370, 376, 378, 380, 382, 384, 387, 388, 393, 403, 410, 639, 645, 820, 900, 901, 902, 903, 944, 969, 976, 979, 981, 984, 986, 994, 1003, 1015, 1026, 1031, 1038, 1039], "control": [12, 16, 61, 99, 100, 118, 138, 157, 159, 184, 201, 204, 208, 232, 233, 262, 264, 283, 314, 316, 352, 354, 355, 362, 363, 369, 372, 376, 378, 381, 384, 387, 389, 392, 396, 401, 402, 405, 406, 407, 408, 411, 412, 427, 433, 442, 447, 464, 465, 471, 524, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 586, 587, 589, 607, 612, 618, 620, 625, 627, 632, 634, 635, 639, 640, 642, 643, 644, 645, 647, 648, 649, 665, 667, 669, 670, 675, 676, 680, 685, 694, 702, 787, 788, 789, 791, 792, 793, 794, 795, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 818, 819, 822, 823, 826, 849, 850, 871, 873, 884, 885, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 906, 946, 948, 967, 969, 976, 977, 979, 980, 981, 983, 986, 987, 990, 992, 994, 995, 996, 1000, 1001, 1002, 1013, 1017, 1022, 1024, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "neighbor": [12, 31, 39, 44, 47, 60, 130, 133, 140, 164, 165, 222, 223, 225, 229, 238, 239, 285, 286, 287, 288, 290, 291, 292, 294, 295, 315, 317, 318, 347, 365, 368, 373, 385, 389, 392, 402, 408, 409, 410, 413, 416, 426, 434, 437, 438, 441, 443, 445, 450, 451, 454, 456, 489, 495, 497, 556, 563, 595, 600, 601, 620, 621, 624, 681, 682, 683, 684, 685, 686, 689, 773, 789, 818, 852, 853, 872, 888, 896, 954, 981, 986, 1001, 1002, 1009, 1014, 1016, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029], "node": [12, 41, 122, 126, 184, 313, 319, 352, 356, 384, 385, 402, 404, 407, 409, 434, 435, 438, 456, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 643, 647, 649, 675, 676, 685, 832, 833, 900, 901, 902, 903, 904, 906, 934, 948, 983, 985, 986, 987, 996, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1035, 1036, 1037], "plane": [12, 149, 212, 234, 287, 333, 336, 338, 339, 344, 373, 445, 455, 974, 976, 995, 1013], "node_position_model": 12, "locallylinearembed": [12, 221, 222, 223, 317, 681, 683, 685, 977, 983, 1027, 1028, 1036, 1037, 1038], "n_neighbor": [12, 44, 62, 67, 133, 164, 221, 222, 223, 225, 229, 239, 281, 283, 284, 287, 288, 289, 290, 293, 308, 313, 315, 347, 409, 445, 595, 600, 601, 621, 681, 682, 684, 686, 689, 834, 835, 836, 838, 840, 841, 845, 887, 888, 970, 977, 983, 986, 993, 1029, 1036, 1038], "output": [12, 14, 16, 25, 27, 37, 53, 59, 98, 110, 112, 115, 121, 122, 132, 136, 140, 141, 152, 160, 164, 165, 167, 170, 196, 228, 236, 243, 244, 249, 255, 259, 261, 264, 268, 270, 271, 281, 304, 307, 309, 310, 313, 316, 317, 319, 348, 349, 351, 356, 357, 369, 370, 371, 373, 376, 378, 382, 384, 387, 388, 389, 400, 401, 402, 403, 405, 406, 409, 410, 411, 418, 423, 426, 430, 434, 435, 436, 438, 439, 440, 442, 443, 445, 452, 453, 455, 456, 457, 458, 459, 460, 461, 475, 476, 477, 478, 481, 484, 485, 486, 487, 488, 489, 490, 496, 498, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 639, 640, 643, 645, 646, 647, 650, 651, 653, 654, 655, 656, 659, 660, 661, 664, 666, 667, 669, 671, 672, 674, 675, 676, 677, 681, 682, 683, 685, 687, 689, 692, 693, 706, 707, 714, 715, 716, 718, 720, 727, 734, 737, 738, 740, 742, 743, 744, 745, 746, 748, 753, 759, 764, 777, 780, 787, 788, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 813, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 835, 836, 837, 841, 842, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 880, 881, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 913, 915, 918, 929, 930, 936, 939, 947, 967, 969, 970, 972, 974, 976, 977, 980, 981, 982, 983, 984, 987, 990, 995, 1002, 1006, 1007, 1009, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "edg": [12, 26, 46, 66, 98, 122, 224, 268, 384, 389, 399, 402, 404, 446, 554, 555, 578, 579, 581, 582, 584, 787, 829, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 857, 905, 990, 993, 1004, 1028, 1030, 1033, 1036], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 118, 123, 128, 129, 132, 167, 170, 171, 185, 187, 218, 228, 229, 239, 244, 250, 258, 262, 263, 268, 275, 291, 309, 314, 315, 338, 353, 362, 376, 379, 383, 385, 392, 403, 407, 410, 411, 431, 457, 460, 461, 489, 534, 557, 623, 624, 625, 651, 680, 690, 691, 693, 694, 695, 706, 711, 774, 781, 789, 795, 803, 811, 818, 852, 853, 865, 867, 872, 890, 897, 904, 905, 906, 920, 946, 967, 980, 984, 1000, 1017, 1031, 1033, 1034, 1036, 1037], "strength": [12, 132, 159, 200, 204, 262, 313, 362, 405, 409, 439, 560, 561, 636, 641, 642, 645, 651, 652, 662, 665, 666, 667, 668, 669, 671, 673, 680, 775, 849, 850, 892, 893, 897, 898, 969, 976, 983, 986, 994, 995], "plan": [12, 370, 374, 376, 377, 390, 990, 1025], "fair": [12, 409, 683, 687, 821, 981, 1004], "crucial": [12, 169, 204, 256, 362, 375, 376, 390, 402, 412, 995], "challeng": [12, 132, 152, 171, 179, 218, 229, 364, 371, 372, 402, 404, 455, 465, 980, 986, 1004, 1006], "overlap": [12, 37, 55, 126, 148, 224, 248, 348, 374, 399, 402, 406, 409, 410, 580, 782, 783, 790, 794, 796, 797, 798, 799, 807, 977, 990, 1028], "heurist": [12, 14, 124, 347, 363, 402, 411, 442, 445, 454, 455, 501, 502, 530, 532, 539, 669, 670, 671, 684, 688, 792, 793, 894, 895, 896, 897, 898, 917, 977, 978, 983, 994, 996, 1004, 1013, 1022, 1023, 1027, 1031, 1034, 1035], "direct": [12, 85, 86, 90, 95, 97, 101, 104, 149, 206, 246, 252, 258, 290, 300, 308, 334, 339, 374, 376, 377, 380, 384, 390, 392, 402, 405, 407, 410, 411, 445, 455, 464, 465, 471, 527, 534, 542, 581, 582, 584, 595, 634, 681, 841, 974, 975, 976, 981, 983, 985, 1001, 1014, 1022, 1025], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 58, 61, 82, 89, 95, 98, 156, 165, 191, 212, 216, 238, 285, 287, 290, 291, 295, 300, 333, 334, 338, 339, 340, 344, 365, 368, 373, 385, 389, 402, 408, 409, 413, 416, 426, 437, 439, 441, 443, 445, 450, 454, 455, 489, 495, 497, 600, 601, 620, 621, 623, 624, 628, 681, 682, 684, 685, 689, 782, 783, 789, 818, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 852, 853, 857, 872, 954, 977, 986, 995, 1001, 1002, 1009, 1017, 1022, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1034], "along": [12, 13, 56, 59, 66, 86, 119, 125, 187, 200, 234, 236, 265, 313, 348, 349, 358, 376, 380, 382, 384, 385, 389, 392, 393, 396, 399, 407, 409, 410, 411, 412, 414, 526, 543, 580, 604, 605, 623, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 669, 671, 674, 675, 676, 677, 678, 679, 771, 772, 782, 789, 803, 861, 862, 865, 866, 869, 870, 871, 872, 877, 878, 879, 881, 882, 883, 908, 931, 955, 961, 969, 976, 983, 990, 993, 1004, 1022, 1027, 1028, 1030, 1034, 1035], "linecollect": [12, 224, 232, 625], "facecolor": [12, 16, 26, 34, 45, 60, 95, 102, 114, 141, 160, 221, 237, 261, 288, 305, 332, 335, 338, 339, 341], "partial_correl": 12, "precision_": [12, 82, 462, 463, 464, 465, 466, 467, 468, 469], "sqrt": [12, 80, 81, 82, 98, 101, 105, 116, 138, 179, 181, 224, 226, 241, 246, 247, 248, 251, 252, 261, 339, 402, 409, 410, 412, 456, 462, 463, 464, 465, 466, 467, 468, 469, 531, 533, 540, 550, 551, 552, 553, 557, 558, 612, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 692, 723, 755, 756, 761, 872, 885, 900, 901, 902, 903, 972, 976, 977, 980, 982, 992, 1036], "diag": [12, 82, 160, 248, 251, 407, 412, 525, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 787, 788, 976, 1037], "newaxi": [12, 13, 19, 24, 42, 82, 105, 113, 153, 181, 190, 196, 201, 202, 203, 205, 206, 217, 232, 234, 275, 286, 293, 342, 354, 355, 399, 529, 976], "ab": [12, 17, 40, 75, 99, 106, 114, 122, 132, 145, 149, 173, 187, 191, 211, 213, 216, 218, 224, 261, 303, 332, 344, 402, 531, 533, 540, 620, 738, 832, 833, 867, 980], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 102], "start_idx": [12, 224], "end_idx": [12, 224], "sequenc": [12, 112, 121, 188, 224, 378, 389, 403, 406, 407, 409, 410, 496, 505, 554, 555, 562, 563, 574, 575, 581, 582, 584, 639, 789, 792, 800, 818, 876, 932, 933, 943, 951, 954, 1000, 1022, 1025, 1027, 1028], "line0": [12, 224], "linen": [12, 224], "x0": [12, 34, 192, 209, 224, 303, 331, 389, 423, 457, 560, 561, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 855, 856, 857, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "y0": [12, 224], "y1": [12, 91, 114, 224, 502, 709, 981, 982], "xm": [12, 224], "ym": [12, 224], "segment": [12, 36, 47, 68, 167, 224, 232, 371, 384, 402, 410, 445, 455, 501, 502, 684, 848, 980, 1000, 1004, 1030, 1032, 1034], "stop": [12, 17, 44, 62, 110, 118, 136, 157, 159, 167, 171, 178, 202, 219, 314, 376, 378, 384, 385, 389, 402, 407, 409, 411, 433, 434, 436, 438, 440, 442, 445, 447, 455, 456, 464, 465, 471, 475, 476, 477, 489, 497, 501, 502, 508, 513, 525, 529, 530, 531, 532, 533, 536, 538, 539, 540, 546, 547, 550, 551, 552, 553, 554, 555, 557, 558, 564, 581, 582, 584, 595, 610, 620, 637, 638, 639, 641, 642, 645, 649, 651, 652, 659, 660, 661, 662, 664, 669, 670, 671, 673, 684, 685, 688, 707, 787, 788, 818, 849, 850, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 934, 954, 969, 976, 984, 985, 995, 996, 1001, 1002, 1004, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038], "lc": [12, 224, 232], "zorder": [12, 34, 58, 97, 129, 141, 153, 161, 190, 198, 222, 224, 232, 235, 246, 314, 338, 339], "hot_r": [12, 303], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 155, 158, 179, 184, 186, 191, 224, 246, 247, 248, 250, 252, 258, 262, 286, 303, 334, 348, 382, 385, 389, 402, 410, 411, 435, 436, 440, 452, 453, 457, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 482, 524, 527, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 582, 583, 584, 590, 636, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 667, 669, 671, 674, 677, 678, 679, 683, 685, 686, 687, 762, 829, 864, 879, 892, 894, 897, 962, 963, 973, 976, 978, 980, 990, 994, 1025, 1027, 1029, 1033], "set_arrai": [12, 224, 232], "set_linewidth": [12, 224, 232], "add_collect": [12, 224, 232], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 112, 117, 119, 123, 146, 149, 157, 164, 169, 170, 171, 172, 200, 204, 218, 240, 243, 247, 248, 252, 256, 259, 260, 261, 262, 264, 272, 273, 281, 303, 308, 309, 310, 317, 322, 323, 348, 349, 371, 373, 374, 376, 378, 380, 385, 387, 389, 399, 403, 406, 407, 409, 410, 417, 436, 440, 441, 442, 443, 444, 446, 447, 450, 452, 453, 457, 460, 496, 502, 550, 551, 552, 553, 557, 558, 559, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 610, 625, 626, 633, 690, 697, 698, 705, 709, 711, 723, 730, 749, 771, 772, 778, 780, 784, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 818, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 865, 900, 901, 902, 903, 933, 951, 954, 959, 960, 980, 982, 983, 984, 994, 996, 1000, 1013, 1015, 1022, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "dx": [12, 13, 519, 692], "dy": [12, 692], "this_dx": 12, "argmin": [12, 124, 260, 378, 404, 524, 530, 538, 539, 678, 771, 772, 996], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 102, 229, 246, 297, 305], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 56, 60, 67, 90, 91, 92, 102, 114, 121, 128, 130, 131, 133, 134, 141, 144, 153, 154, 156, 160, 171, 183, 192, 202, 209, 212, 213, 214, 233, 234, 235, 237, 246, 249, 261, 264, 275, 284, 287, 288, 289, 292, 297, 305, 306, 308, 327, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 344, 353, 354, 355, 624], "ptp": 12, "03": [12, 52, 68, 76, 80, 85, 95, 107, 136, 149, 150, 157, 162, 170, 174, 181, 218, 227, 233, 244, 246, 252, 262, 295, 301, 311, 323, 348, 373, 410, 740, 789, 976, 980], "plot_stock_market": [12, 15], "parallel": [13, 110, 116, 118, 121, 136, 167, 171, 202, 262, 314, 315, 317, 339, 356, 361, 368, 376, 377, 379, 380, 387, 389, 403, 411, 413, 414, 430, 437, 439, 441, 442, 443, 445, 450, 451, 454, 457, 460, 465, 488, 524, 526, 527, 528, 530, 532, 534, 535, 536, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 582, 587, 595, 603, 625, 627, 632, 651, 681, 682, 683, 684, 685, 686, 687, 766, 770, 773, 789, 792, 793, 795, 800, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 851, 854, 887, 888, 948, 950, 1001, 1010, 1015, 1017, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1037, 1038], "acquir": [13, 120, 263, 1034], "angl": [13, 34, 98, 149, 246, 247, 248, 251, 252, 373, 407, 524, 530, 532, 535, 536, 538, 539, 541, 643, 644, 645, 646, 647, 648, 649, 656, 657, 658, 671, 675, 676, 677, 678, 679, 685, 977, 978, 1002, 1017, 1022], "Such": [13, 128, 152, 157, 169, 179, 184, 189, 201, 264, 347, 389, 390, 406, 407, 409, 548, 549, 649, 970, 980, 983, 990, 996, 1013, 1032, 1037], "ct": [13, 160, 243, 403, 457, 459, 460], "cellular": 13, "materi": [13, 390, 574, 882, 883, 999], "haar": 13, "wavelet": [13, 105, 407], "sparsiti": [13, 82, 167, 178, 184, 193, 215, 216, 219, 235, 348, 362, 389, 404, 407, 409, 411, 494, 495, 520, 524, 530, 531, 532, 533, 536, 538, 539, 540, 639, 645, 650, 651, 669, 671, 714, 715, 716, 861, 867, 872, 877, 973, 976, 983, 990, 1009, 1014, 1024], "oper": [13, 19, 149, 160, 167, 235, 254, 258, 268, 277, 349, 362, 363, 373, 374, 376, 379, 382, 387, 389, 390, 392, 396, 398, 406, 407, 409, 410, 411, 415, 441, 454, 461, 468, 475, 476, 477, 478, 497, 526, 527, 534, 544, 545, 559, 565, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 609, 614, 617, 623, 628, 636, 651, 682, 686, 695, 699, 700, 701, 719, 766, 773, 774, 780, 781, 808, 818, 821, 832, 833, 855, 859, 864, 875, 876, 890, 897, 900, 931, 948, 953, 976, 983, 990, 995, 1000, 1004, 1013, 1026, 1028, 1029, 1030, 1032, 1033, 1038], "fidel": 13, "penal": [13, 30, 82, 132, 184, 189, 193, 200, 204, 216, 218, 308, 342, 402, 404, 407, 411, 462, 463, 464, 465, 466, 467, 468, 469, 471, 640, 645, 646, 654, 656, 669, 698, 708, 726, 778, 785, 865, 892, 899, 976, 980, 982, 984, 994, 995, 1013], "account": [13, 55, 97, 104, 112, 157, 164, 170, 218, 236, 261, 290, 342, 344, 348, 362, 372, 376, 389, 390, 396, 402, 405, 406, 407, 409, 410, 456, 560, 561, 620, 621, 623, 625, 626, 642, 666, 672, 697, 700, 720, 721, 722, 730, 735, 748, 775, 776, 779, 780, 790, 794, 807, 866, 972, 974, 978, 980, 981, 982, 983, 990, 994, 996, 1027, 1029, 1030, 1031, 1034, 1035, 1037], "call": [13, 17, 46, 48, 50, 54, 71, 92, 109, 117, 124, 146, 152, 156, 158, 160, 169, 171, 188, 200, 201, 204, 218, 236, 240, 242, 243, 261, 262, 270, 275, 276, 281, 283, 308, 310, 315, 316, 347, 348, 349, 356, 362, 363, 364, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 400, 402, 403, 404, 405, 406, 407, 409, 410, 412, 414, 425, 433, 436, 439, 440, 442, 443, 444, 445, 446, 447, 450, 453, 455, 457, 458, 461, 462, 467, 475, 476, 477, 481, 484, 485, 488, 490, 496, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 570, 575, 576, 578, 579, 581, 582, 584, 590, 595, 600, 601, 603, 604, 607, 610, 613, 620, 621, 622, 623, 624, 625, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 697, 724, 734, 747, 763, 766, 770, 771, 772, 773, 783, 787, 788, 789, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 841, 843, 848, 849, 850, 851, 852, 855, 856, 857, 859, 861, 862, 864, 869, 872, 873, 876, 881, 882, 883, 884, 885, 889, 892, 893, 894, 895, 897, 898, 901, 903, 919, 923, 928, 929, 940, 946, 947, 948, 951, 954, 964, 969, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 988, 990, 992, 993, 995, 996, 1000, 1004, 1006, 1010, 1013, 1014, 1015, 1017, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 56, 57, 61, 62, 66, 68, 79, 85, 95, 97, 111, 112, 113, 114, 118, 167, 176, 187, 189, 203, 216, 223, 225, 228, 232, 239, 244, 247, 248, 249, 252, 258, 261, 270, 281, 287, 288, 290, 294, 303, 305, 308, 313, 314, 315, 318, 333, 347, 348, 358, 362, 364, 369, 370, 371, 372, 373, 376, 377, 378, 379, 384, 385, 388, 389, 391, 398, 399, 401, 402, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 462, 467, 468, 471, 475, 476, 477, 481, 496, 504, 505, 506, 507, 508, 515, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 546, 547, 548, 549, 552, 553, 556, 584, 596, 597, 603, 604, 628, 630, 632, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 697, 698, 701, 710, 712, 727, 729, 735, 766, 770, 771, 783, 785, 787, 788, 820, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 853, 857, 859, 872, 876, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 912, 928, 929, 931, 945, 949, 955, 970, 972, 975, 977, 978, 980, 982, 985, 986, 990, 993, 994, 995, 999, 1000, 1001, 1002, 1004, 1006, 1009, 1010, 1012, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "computation": [13, 78, 95, 118, 124, 132, 152, 281, 347, 361, 377, 401, 402, 403, 406, 407, 409, 412, 531, 625, 626, 664, 755, 789, 791, 792, 793, 803, 815, 976, 977, 979, 987, 988, 992, 1014, 1017, 1026], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 68, 79, 94, 96, 97, 107, 112, 118, 125, 130, 135, 143, 150, 151, 162, 167, 172, 182, 184, 186, 188, 191, 198, 204, 215, 220, 223, 227, 228, 232, 244, 248, 254, 256, 258, 277, 279, 297, 305, 307, 308, 313, 315, 327, 331, 346, 348, 350, 358, 371, 373, 389, 400, 404, 405, 407, 411, 430, 431, 436, 439, 440, 442, 481, 497, 505, 507, 508, 515, 518, 534, 542, 543, 546, 557, 558, 574, 575, 581, 582, 583, 584, 599, 601, 603, 604, 608, 615, 618, 624, 632, 636, 651, 665, 681, 682, 683, 684, 685, 697, 730, 735, 771, 780, 789, 792, 795, 803, 805, 818, 827, 830, 834, 849, 853, 861, 862, 864, 868, 869, 870, 872, 877, 878, 879, 880, 881, 882, 883, 892, 894, 895, 897, 898, 900, 969, 974, 977, 980, 982, 983, 986, 995, 1019], "l2": [13, 30, 40, 82, 85, 167, 178, 184, 185, 191, 200, 211, 215, 216, 218, 219, 262, 281, 303, 326, 347, 348, 378, 385, 387, 402, 404, 407, 410, 434, 438, 443, 450, 517, 531, 533, 540, 551, 554, 555, 558, 582, 583, 584, 636, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 665, 669, 671, 673, 674, 679, 680, 681, 727, 742, 753, 754, 770, 771, 772, 803, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 849, 850, 864, 872, 879, 892, 893, 897, 898, 899, 901, 903, 963, 969, 973, 976, 978, 983, 984, 990, 994, 996, 1013, 1015, 1024, 1026, 1027, 1029, 1031], "produc": [13, 25, 26, 44, 57, 70, 98, 125, 126, 127, 128, 184, 267, 300, 325, 358, 371, 372, 376, 378, 381, 389, 390, 402, 403, 406, 407, 409, 433, 436, 439, 445, 512, 529, 552, 556, 574, 581, 586, 587, 625, 626, 791, 792, 793, 801, 806, 809, 813, 857, 867, 894, 897, 971, 972, 976, 978, 979, 980, 983, 986, 987, 991, 993, 994, 995, 1006, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 94, 95, 100, 107, 112, 114, 117, 120, 130, 149, 165, 167, 171, 172, 176, 178, 201, 219, 222, 237, 248, 261, 264, 270, 271, 303, 305, 308, 315, 325, 329, 334, 338, 339, 345, 347, 358, 362, 372, 373, 378, 381, 384, 387, 389, 400, 402, 403, 404, 407, 409, 410, 412, 457, 505, 512, 526, 531, 533, 534, 540, 542, 574, 581, 582, 584, 603, 624, 631, 639, 640, 666, 669, 670, 683, 687, 717, 724, 737, 738, 740, 745, 782, 808, 824, 825, 851, 852, 894, 896, 897, 902, 903, 969, 970, 972, 974, 976, 977, 979, 986, 987, 990, 994, 995, 1011, 1013, 1014, 1022, 1025, 1027, 1028, 1032, 1034, 1035, 1038], "central": [13, 202, 402, 986, 1000], "emmanuel": [13, 66, 1022, 1029, 1030, 1031], "gouillart": [13, 66, 1022], "nsup": 13, "ndimag": [13, 46, 47, 54, 300, 1014], "_weight": [13, 218], "orig": [13, 288], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 60, 62, 66, 81, 102, 122, 124, 141, 169, 190, 191, 218, 224, 235, 239, 272, 281, 310, 410, 970, 976, 1029], "hstack": [13, 33, 34, 42, 134, 145, 226, 238, 256, 337, 406, 851], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 141, 338], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 304, 337, 628], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 124, 134, 348, 832, 833], "mask": [13, 42, 66, 120, 200, 208, 259, 260, 326, 385, 389, 403, 409, 462, 467, 554, 555, 574, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 622, 623, 625, 626, 642, 664, 789, 792, 793, 803, 952, 970, 987, 1022, 1025, 1027, 1028, 1030, 1032], "logical_and": [13, 125], "proj_oper": 13, "coo_matrix": [13, 186, 445, 578, 579, 951, 954], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 58, 62, 103, 115, 129, 131, 144, 179, 184, 223, 224, 229, 235, 236, 275, 293, 314, 315, 326, 327, 341, 342, 348, 354, 355, 385, 393, 537, 697, 698, 708, 749, 773, 778, 884, 885, 887, 888, 889, 992, 1006, 1022, 1033, 1034], "gaussian_filt": [13, 46, 47, 54, 1014], "sigma": [13, 46, 47, 54, 80, 103, 125, 259, 261, 399, 404, 407, 409, 607, 642, 974, 976, 978, 982, 985, 1014], "logical_xor": [13, 156, 340], "binary_eros": 13, "128": [13, 14, 92, 93, 200, 250, 253, 362, 529], "proj": [13, 642], "randn": [13, 33, 34, 39, 54, 65, 66, 80, 81, 98, 103, 128, 144, 152, 156, 169, 172, 189, 194, 195, 199, 213, 214, 217, 247, 250, 251, 256, 268, 270, 271, 275, 287, 288, 310, 314, 315, 333, 339, 340, 342, 344, 378, 381, 636, 663, 665, 671, 810, 895, 898], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 58, 71, 74, 78, 82, 87, 103, 118, 121, 122, 124, 125, 137, 142, 143, 147, 149, 150, 170, 171, 178, 184, 188, 200, 202, 218, 219, 248, 249, 251, 254, 258, 261, 262, 263, 265, 267, 270, 275, 277, 285, 300, 302, 304, 309, 311, 313, 315, 325, 334, 342, 365, 371, 376, 378, 385, 387, 388, 389, 393, 396, 397, 400, 403, 404, 407, 409, 410, 411, 412, 430, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 486, 494, 495, 497, 508, 534, 560, 561, 568, 586, 587, 590, 595, 599, 602, 635, 636, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 677, 678, 679, 694, 695, 699, 706, 720, 733, 777, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 826, 852, 853, 857, 872, 873, 890, 892, 894, 897, 935, 979, 980, 983, 984, 988, 990, 995, 996, 1000, 1001, 1002, 1004, 1006, 1009, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "lassocv": [13, 132, 138, 170, 184, 189, 409, 411, 644, 645, 647, 648, 649, 656, 677, 976, 1010, 1022, 1025, 1029, 1032, 1033, 1035, 1036], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 156, 159, 167, 178, 191, 216, 219, 232, 238, 270, 285, 293, 300, 323, 334, 340, 412, 628, 638, 646, 656, 665, 677, 693, 700, 835, 843, 853, 867, 871, 971, 976, 980, 990, 1029, 1034], "133": [13, 56], "wspace": [13, 14, 39, 44, 45, 62, 80, 95, 114, 200, 218, 229, 246, 248, 249, 252, 286, 294, 323, 331], "494": [13, 15], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 72, 382, 401, 410, 528, 531, 537, 540, 1016, 1017, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039], "latentdirichletalloc": [14, 364, 381, 407, 1000, 1027, 1029, 1036, 1037], "corpu": [14, 348, 349, 371, 407, 581, 582, 583, 584, 1015, 1023], "frobeniu": [14, 98, 436, 440, 452, 462, 463, 464, 465, 466, 467, 468, 469, 524, 530, 531, 533, 538, 539, 540, 976, 1029], "kullback": [14, 221, 407, 531, 533, 540, 685, 977, 1029], "leibler": [14, 221, 407, 531, 533, 540, 685, 977, 1029], "diverg": [14, 124, 221, 226, 286, 531, 533, 540, 685, 848, 977, 979, 980, 985, 987, 1029, 1030, 1035], "probabilist": [14, 27, 30, 82, 94, 107, 151, 152, 155, 159, 162, 167, 347, 389, 400, 408, 409, 430, 466, 469, 525, 527, 528, 534, 552, 581, 582, 603, 615, 636, 638, 669, 696, 733, 789, 814, 859, 894, 895, 897, 898, 973, 974, 976, 979, 980, 985, 990, 995, 996, 1000, 1004, 1022, 1025, 1029], "semant": [14, 347, 348, 389, 537, 1015, 1016, 1017, 1024], "runnabl": [14, 380, 381], "coupl": [14, 52, 53, 55, 222, 370, 371, 399, 400, 402, 411, 582, 898, 969, 995], "ten": [14, 19, 112, 118, 149, 222, 252, 371, 373, 409, 513, 897, 1031], "polynomi": [14, 164, 167, 175, 177, 178, 200, 206, 219, 241, 261, 275, 315, 316, 331, 338, 341, 368, 372, 445, 484, 613, 632, 633, 634, 636, 665, 757, 766, 767, 818, 853, 862, 864, 867, 871, 892, 894, 895, 896, 897, 898, 975, 995, 1002, 1017, 1034, 1035], "lda": [14, 33, 34, 94, 107, 167, 290, 358, 373, 398, 497, 529, 534, 542, 543, 841, 1000, 1002, 1016, 1017, 1027], "proport": [14, 26, 40, 148, 186, 200, 207, 213, 229, 264, 288, 291, 344, 362, 371, 400, 402, 404, 406, 407, 409, 410, 431, 432, 439, 462, 467, 508, 542, 543, 548, 550, 552, 553, 554, 555, 556, 557, 576, 577, 581, 584, 620, 625, 651, 652, 659, 660, 661, 667, 668, 669, 671, 689, 694, 705, 790, 791, 792, 793, 806, 809, 818, 838, 849, 850, 866, 892, 893, 894, 897, 898, 900, 902, 904, 906, 918, 969, 979, 980, 983, 986, 994, 995, 996, 1027], "112": [14, 54, 149, 190, 219, 309, 311, 371, 373, 1024], "tf": [14, 19, 233, 347, 348, 349, 371, 407, 514, 537, 581, 582, 583, 584, 831, 839, 864, 969, 978, 982, 990, 1000, 1015], "idf": [14, 19, 233, 347, 348, 349, 371, 407, 514, 537, 581, 582, 583, 584, 831, 839, 864, 969, 978, 982, 990, 1015, 1022], "245": [14, 15, 992, 1024], "236": 14, "2000": [14, 26, 40, 50, 75, 96, 103, 123, 176, 249, 252, 261, 297, 317, 348, 371, 373, 402, 403, 409, 414, 445, 455, 526, 527, 552, 682, 684, 686, 735, 780, 787, 838, 868, 880, 977, 980, 986, 992, 1006, 1014], "071": [14, 149, 212, 219, 373, 430], "260": [14, 260, 1035], "minibatchnmf": [14, 364, 407, 1036, 1038, 1039], "batch_siz": [14, 19, 42, 64, 95, 98, 99, 348, 407, 442, 527, 529, 530, 531, 532, 539, 848, 849, 850, 932, 933, 946, 1023, 1030, 1033, 1035, 1036], "226": [14, 235, 253, 402, 413, 437], "213": 14, "ensta": [14, 17, 37, 48, 61, 200, 218, 222, 262, 264, 347, 348, 349], "chyi": [14, 1025, 1026, 1027, 1028, 1029], "kwei": [14, 1025, 1026, 1027, 1028, 1029], "yau": [14, 1025, 1026, 1027, 1028, 1029], "chyikwei": 14, "fetch_20newsgroup": [14, 19, 70, 262, 326, 347, 348, 349, 371, 482, 1015, 1027, 1032], "countvector": [14, 326, 349, 371, 381, 403, 407, 410, 482, 529, 575, 582, 583, 584, 1015, 1022, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035], "tfidfvector": [14, 19, 70, 262, 347, 371, 407, 410, 482, 581, 582, 583, 1015, 1022, 1024, 1030, 1031, 1032, 1035, 1036], "n_top_word": 14, "init": [14, 42, 45, 58, 59, 61, 64, 171, 180, 221, 222, 224, 225, 226, 247, 249, 281, 348, 379, 384, 402, 407, 409, 436, 440, 442, 444, 446, 452, 453, 531, 533, 540, 541, 552, 553, 625, 626, 683, 685, 687, 841, 977, 1022, 1031, 1034, 1036, 1037, 1038], "nndsvda": [14, 407, 531, 533, 540, 1031, 1034], "plot_top_word": 14, "feature_nam": [14, 19, 106, 119, 126, 129, 149, 170, 172, 173, 209, 240, 284, 303, 313, 314, 315, 331, 347, 353, 369, 371, 381, 403, 483, 484, 485, 489, 493, 494, 495, 497, 498, 503, 575, 624, 625, 626, 904, 905, 906, 988, 996, 1038], "flatten": [14, 32, 224, 234, 259, 307, 331, 343, 382, 495, 562, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 841], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 124, 126, 172, 173, 200, 218, 313, 322, 323, 347, 348, 371, 988], "top_featur": 14, "barh": [14, 126, 164, 165, 169, 170, 172, 173, 243, 310, 347, 348, 349], "fontdict": [14, 39], "labels": [14, 307], "set_vis": [14, 285, 291, 303], "filter": [14, 46, 47, 206, 218, 259, 261, 283, 347, 378, 382, 385, 401, 402, 410, 441, 481, 482, 496, 581, 584, 588, 589, 590, 591, 766, 827, 921, 945, 982, 983, 1012, 1015, 1032], "useless": [14, 121, 264, 382, 411, 508, 521, 651, 705, 976, 990, 1031], "earli": [14, 44, 62, 110, 118, 121, 136, 167, 178, 219, 314, 389, 409, 434, 438, 442, 456, 489, 497, 508, 513, 529, 530, 531, 532, 539, 546, 547, 552, 553, 554, 555, 564, 620, 638, 649, 659, 660, 661, 669, 671, 685, 818, 849, 850, 954, 977, 983, 990, 999, 1001, 1004, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037], "strip": [14, 218, 348, 362, 370, 371, 489], "header": [14, 70, 262, 347, 348, 371, 374, 410, 481, 482, 789, 792, 793, 803], "footer": [14, 70, 262, 347, 348, 371, 481, 482], "repli": [14, 347, 375, 376, 379], "common": [14, 17, 19, 98, 146, 149, 167, 168, 174, 256, 268, 315, 347, 349, 356, 362, 365, 370, 376, 378, 384, 386, 387, 388, 391, 393, 399, 400, 401, 402, 403, 406, 408, 411, 412, 458, 460, 489, 583, 625, 646, 665, 666, 694, 738, 745, 761, 804, 815, 818, 853, 855, 863, 864, 865, 870, 872, 877, 878, 880, 881, 882, 883, 931, 969, 970, 976, 983, 986, 990, 995, 996, 1000, 1001, 1004, 1006, 1017, 1022, 1030, 1032, 1033, 1037], "english": [14, 19, 70, 347, 348, 349, 381, 410, 581, 582, 584, 1000, 1001, 1015, 1035], "occur": [14, 70, 200, 204, 218, 358, 376, 378, 384, 390, 399, 402, 404, 406, 410, 437, 501, 502, 565, 574, 581, 583, 584, 620, 664, 788, 789, 792, 793, 795, 803, 811, 814, 815, 816, 819, 917, 980, 982, 990, 1015, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 262, 326, 347, 348, 581, 584, 1033], "min_df": [14, 19, 70, 262, 326, 347, 348, 410, 581, 584, 1022, 1024, 1033], "max_featur": [14, 31, 116, 127, 238, 258, 273, 315, 409, 411, 548, 549, 550, 551, 552, 553, 556, 557, 558, 581, 584, 590, 900, 901, 902, 903, 969, 976, 1022, 1024, 1025, 1029, 1030, 1033, 1036], "stop_word": [14, 19, 347, 348, 410, 581, 582, 584], "tfidf": [14, 70, 326, 410, 584, 1015], "tf_vector": 14, "beta_loss": [14, 531, 533, 540, 1029], "alpha_w": [14, 407, 531, 533, 540, 1035], "00005": 14, "alpha_h": [14, 407, 531, 533, 540, 1035], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 170, 172, 316, 347, 348, 349, 371, 378, 389, 403, 410, 418, 423, 426, 435, 436, 438, 440, 442, 457, 460, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 681, 682, 685, 836, 841, 844, 848, 851, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 990, 1035, 1036, 1037, 1038], "solver": [14, 30, 33, 34, 46, 66, 167, 178, 189, 191, 192, 193, 200, 202, 215, 216, 218, 219, 297, 298, 299, 300, 310, 347, 382, 387, 389, 392, 398, 402, 414, 445, 455, 464, 465, 471, 495, 526, 528, 533, 534, 537, 540, 542, 639, 640, 641, 645, 646, 651, 652, 653, 654, 655, 656, 659, 661, 662, 663, 665, 667, 669, 673, 674, 677, 680, 681, 682, 684, 686, 688, 780, 803, 818, 823, 826, 849, 850, 894, 895, 896, 897, 898, 974, 977, 980, 984, 994, 995, 1000, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "mu": [14, 80, 81, 261, 407, 415, 466, 468, 469, 472, 473, 474, 533, 540, 974, 976, 1029, 1032], "mbnmf": 14, "learning_method": [14, 381, 529], "learning_offset": [14, 529], "tf_feature_nam": 14, "plot_topics_extraction_with_nmf_lda": [14, 15], "execut": [15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 136, 142, 150, 162, 164, 166, 174, 177, 184, 189, 219, 227, 235, 244, 253, 266, 277, 280, 295, 301, 311, 320, 328, 345, 350, 357, 363, 376, 382, 396, 398, 402, 407, 413, 436, 454, 789, 795, 803, 811, 813, 814, 815, 816, 819, 837, 946, 947, 990, 993, 1007, 1015, 1024, 1027, 1030], "auto_examples_appl": 15, "09": [15, 97, 105, 107, 136, 166, 170, 233, 237, 244, 274, 311, 402, 727, 830, 980, 990, 994], "06": [15, 22, 52, 67, 68, 83, 85, 161, 166, 170, 191, 199, 200, 219, 261, 262, 277, 300, 301, 305, 328, 341, 345, 382, 475, 476, 477, 637, 638, 682, 686, 787, 788, 789, 803, 901, 976, 990, 992], "04": [15, 30, 40, 42, 54, 67, 68, 97, 105, 136, 142, 149, 157, 162, 170, 174, 181, 199, 218, 237, 246, 252, 261, 262, 274, 277, 294, 295, 301, 320, 341, 373, 409, 411, 464, 465, 780, 789, 803, 976, 980, 984, 994], "real": [15, 31, 55, 57, 70, 74, 78, 80, 110, 112, 136, 155, 170, 204, 225, 239, 255, 267, 275, 285, 304, 305, 349, 362, 365, 369, 370, 373, 380, 382, 385, 387, 388, 389, 399, 400, 402, 404, 406, 407, 409, 410, 462, 482, 483, 486, 487, 488, 489, 490, 493, 494, 497, 503, 513, 544, 545, 546, 548, 549, 550, 551, 552, 553, 557, 558, 585, 587, 588, 589, 590, 591, 592, 593, 692, 697, 716, 720, 744, 747, 749, 777, 785, 786, 817, 818, 849, 850, 894, 895, 896, 897, 898, 900, 901, 903, 970, 971, 972, 977, 980, 982, 984, 985, 986, 996, 999, 1017, 1022, 1035], "svm_gui": [15, 16, 1013], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 81, 171, 326, 347, 348, 349, 371, 382, 401, 402, 404, 407, 782, 783, 787, 822, 904, 980, 981, 987, 1000, 1015], "frontend": [16, 382], "mainli": [16, 27, 53, 112, 115, 152, 270, 362, 378, 400, 604, 982, 987], "intend": [16, 57, 58, 99, 201, 347, 376, 377, 378, 383, 387, 406, 461, 575, 666, 692, 861, 862, 872, 890, 975, 976, 980, 984, 991], "didact": [16, 376, 1001], "region": [16, 25, 36, 47, 49, 53, 56, 66, 68, 133, 159, 167, 170, 200, 218, 229, 233, 234, 252, 306, 334, 373, 383, 389, 402, 409, 412, 441, 443, 449, 455, 580, 977, 980, 983, 986, 990, 994, 996, 1014], "induc": [16, 26, 56, 170, 184, 191, 193, 198, 201, 215, 235, 349, 399, 401, 407, 409, 412, 439, 442, 532, 536, 546, 550, 551, 552, 553, 557, 558, 559, 636, 718, 748, 865, 900, 901, 902, 903, 973, 980, 994, 1013], "mous": [16, 370], "button": [16, 376, 384, 1013], "prettenho": 16, "tkagg": 16, "backend": [16, 363, 389, 461, 890, 946, 948, 950, 980, 1025, 1030, 1031, 1032, 1033], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 34, 316, 365, 379, 380, 385, 389, 393, 430, 434, 438, 440, 442, 443, 450, 452, 471, 519, 529, 530, 531, 532, 533, 539, 546, 547, 548, 549, 562, 563, 572, 573, 575, 620, 626, 631, 637, 638, 643, 644, 647, 648, 649, 651, 657, 658, 733, 748, 760, 770, 771, 772, 792, 793, 795, 827, 828, 829, 831, 839, 851, 865, 894, 895, 896, 897, 898, 908, 923, 924, 926, 969, 970, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "tkinter": 16, "tk": 16, "contourset": 16, "dump_svmlight_fil": [16, 1022, 1023, 1027, 1037], "y_min": [16, 31, 34, 58, 90, 114, 121, 130, 141, 154, 234, 297, 305, 327, 338, 339, 628, 630], "y_max": [16, 31, 34, 58, 90, 114, 121, 130, 141, 154, 218, 234, 297, 305, 327, 338, 339, 628, 630], "x_min": [16, 31, 34, 52, 58, 90, 114, 121, 125, 130, 141, 154, 189, 234, 297, 305, 327, 338, 339], "x_max": [16, 31, 34, 52, 58, 90, 114, 121, 130, 141, 154, 234, 297, 305, 327, 338, 339], "notifi": [16, 565, 566, 567, 1003, 1020, 1032], "regist": [16, 34, 184, 347, 382, 948, 950], "surfac": [16, 110, 136, 167, 192, 209, 330, 331, 351, 357, 409, 497, 546, 550, 557, 624, 756, 900, 906, 974, 979, 994, 995, 996], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 176, 341, 445, 528, 632, 633, 636, 767, 769, 894, 895, 896, 897, 898, 978, 995], "kernel_map": 16, "hasattr": [16, 44, 56, 62, 82, 109, 121, 218, 233, 297, 305, 347, 389, 941, 1032], "decision_surfac": 16, "delta": [16, 405, 445], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 119, 138, 167, 254, 260, 262, 265, 277, 389, 406, 412, 495, 560, 620, 652, 658, 706, 789, 792, 793, 803, 818, 897, 969, 976, 980, 1029, 1030, 1031], "docstr": [16, 376, 378, 382, 389, 441, 454, 465, 692, 694, 919, 969, 980, 983, 984, 994, 1022, 1029, 1030, 1035, 1036], "set_xlim": [16, 31, 42, 60, 75, 80, 92, 117, 130, 165, 171, 198, 200, 205, 234, 246, 265, 267, 268, 286, 297, 303, 305, 306, 307, 308, 314, 343], "attributeerror": [16, 403, 552, 570, 941, 1014, 1031, 1032, 1034, 1038], "get_tk_widget": 16, "pack": [16, 385, 1030], "fill": [16, 34, 121, 138, 172, 256, 286, 353, 389, 403, 407, 508, 520, 531, 533, 540, 580, 623, 904, 906, 970, 983, 996], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 66, 101, 105, 115, 125, 153, 184, 210, 286, 291, 294, 314, 315, 319, 400, 402, 403, 408, 414, 445, 458, 514, 526, 529, 608, 609, 615, 634, 751, 758, 768, 849, 850, 868, 974, 976, 978, 982, 983, 984, 993, 994, 995, 1013], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 218, 376, 380, 382, 402, 461, 529, 639, 645, 890, 977, 1001, 1003, 1022, 1027, 1028, 1030, 1035, 1036, 1037], "isinst": [16, 121, 218, 389], "lineset": 16, "support_vector": [16, 332], "place": [16, 60, 230, 240, 285, 362, 374, 376, 377, 378, 381, 383, 390, 400, 410, 412, 434, 438, 439, 475, 476, 477, 508, 574, 583, 621, 623, 624, 760, 773, 787, 959, 960, 1000, 1022, 1029, 1032, 1033, 1035], "circl": [16, 60, 100, 130, 131, 141, 226, 237, 288, 291, 298, 303, 305, 324, 355, 372, 380, 384, 402, 445, 455, 507, 515, 756, 995], "dash": [16, 33, 80, 112, 124, 134, 152, 155, 157, 170, 187, 192, 195, 201, 202, 209, 212, 213, 239, 261, 271, 336, 340, 994], "bone": [16, 213, 344], "rais": [16, 109, 201, 236, 237, 264, 307, 316, 376, 378, 380, 381, 382, 385, 387, 389, 393, 396, 403, 406, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 502, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 569, 570, 574, 575, 581, 582, 583, 584, 587, 596, 603, 604, 610, 622, 625, 628, 629, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 689, 691, 695, 702, 704, 705, 706, 707, 719, 721, 722, 730, 748, 770, 774, 775, 776, 779, 780, 781, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 803, 807, 811, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 841, 842, 843, 847, 849, 850, 851, 852, 855, 856, 857, 858, 859, 864, 865, 866, 870, 871, 872, 879, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 907, 910, 912, 913, 915, 916, 933, 941, 964, 965, 966, 967, 980, 990, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "valueerror": [16, 236, 237, 378, 382, 393, 461, 570, 596, 610, 628, 664, 707, 824, 842, 851, 857, 871, 911, 915, 916, 965, 966, 967, 990, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 233, 362, 363, 374, 376, 380, 382, 384, 392, 410, 501, 1000, 1015, 1024], "anchor": [16, 272], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 167, 178, 192, 209, 219, 237, 264, 329, 331, 334, 339, 345, 505, 624, 651, 652, 659, 661, 667, 668, 669, 670, 892, 894, 896, 897, 994, 995], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 380, 651, 652, 659, 661, 669, 670, 671, 849, 850, 892, 990], "add_opt": 16, "action": [16, 316, 347, 375, 379, 380, 392, 990, 1032], "store": [16, 32, 53, 54, 70, 72, 81, 90, 146, 160, 176, 186, 189, 204, 222, 230, 240, 251, 266, 270, 322, 349, 356, 362, 370, 371, 376, 378, 383, 384, 385, 387, 389, 403, 405, 407, 409, 410, 412, 413, 431, 433, 437, 439, 443, 450, 462, 463, 466, 467, 468, 469, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 501, 527, 528, 534, 542, 543, 548, 549, 556, 562, 563, 582, 603, 604, 620, 624, 625, 628, 631, 642, 643, 647, 653, 654, 655, 656, 659, 660, 666, 668, 669, 670, 671, 681, 682, 683, 685, 690, 691, 693, 694, 695, 773, 787, 788, 789, 795, 803, 811, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 847, 863, 870, 872, 873, 887, 888, 889, 912, 913, 937, 938, 951, 954, 970, 972, 976, 983, 992, 995, 996, 1000, 1006, 1015, 1019, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "dest": [16, 318], "dump": [16, 17, 396, 480, 832, 833], "argv": [16, 233], "opt": [16, 374, 378], "arg": [16, 236, 298, 377, 389, 407, 409, 416, 564, 565, 566, 567, 568, 569, 570, 571, 610, 692, 856, 976, 982, 983], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 326, 387], "classic": [17, 195, 225, 239, 246, 252, 373, 380, 404, 406, 407, 436, 440, 442, 452, 485, 493, 497, 503, 625, 626, 902, 903, 974, 976, 982, 990, 1000, 1009, 1022, 1023, 1027, 1036], "graph": [17, 25, 39, 44, 46, 66, 67, 160, 221, 258, 281, 283, 325, 362, 376, 379, 389, 399, 404, 413, 434, 437, 438, 445, 446, 450, 455, 456, 464, 465, 471, 504, 578, 579, 681, 684, 685, 688, 774, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 888, 977, 980, 983, 985, 993, 996, 1000, 1004, 1011, 1014, 1022, 1029, 1030, 1032, 1035, 1037], "vertex": [17, 26, 402, 446, 1035], "en": [17, 24, 384, 524, 530, 588, 629, 657, 661, 664, 678, 679, 688, 698, 834, 835, 840, 841, 842, 843, 870, 886, 900, 901, 976, 980, 995, 996], "wiki": [17, 24, 382, 384, 588, 629, 661, 664, 688, 698, 834, 835, 840, 841, 842, 843, 870, 886, 900, 901, 976, 996], "eigenvector_centr": 17, "webpag": [17, 176, 376], "pagerank": 17, "insid": [17, 19, 26, 171, 202, 236, 261, 324, 334, 364, 370, 371, 378, 382, 402, 410, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 582, 583, 584, 587, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 940, 948, 987, 1004], "accord": [17, 24, 26, 37, 49, 78, 118, 124, 149, 153, 183, 200, 218, 233, 313, 348, 358, 376, 378, 387, 388, 389, 390, 399, 402, 404, 406, 407, 409, 410, 412, 430, 443, 445, 449, 453, 455, 458, 462, 497, 509, 510, 511, 518, 523, 525, 528, 529, 531, 533, 543, 546, 547, 554, 555, 556, 559, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 634, 635, 637, 638, 642, 651, 652, 663, 673, 684, 688, 727, 771, 772, 789, 790, 791, 792, 793, 796, 797, 798, 803, 813, 827, 828, 829, 830, 831, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 855, 862, 870, 882, 884, 885, 892, 893, 894, 895, 897, 898, 974, 976, 980, 982, 983, 990, 993, 994, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "tradit": [17, 55, 200, 215, 348, 364, 400, 409, 410, 625, 687, 976, 979, 990, 1004], "power_iter": 17, "martinsson": [17, 528, 534, 929], "dbpedia": 17, "content": [17, 308, 347, 349, 371, 376, 380, 382, 396, 401, 410, 479, 496, 501, 502, 581, 582, 584, 664, 906, 989, 1004, 1015, 1023, 1032], "bz2": [17, 501, 502], "bz2file": 17, "pprint": [17, 125, 236, 262, 371, 924], "urlopen": 17, "randomized_svd": [17, 385, 444, 446, 525, 534, 537, 539, 1022, 1023, 1028, 1035, 1036, 1037], "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 125, 164, 200, 299, 315, 361, 365, 379, 388, 409, 792, 793, 981, 998, 1001, 1004, 1007, 1017, 1030, 1035, 1036], "wait": [17, 376, 380, 389, 659, 660, 661, 669, 671, 1034], "wb": 17, "index_map": 17, "setdefault": [17, 907], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 70, 262, 283, 313, 376, 380, 382, 384, 412, 418, 435, 436, 438, 440, 442, 457, 460, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 632, 633, 634, 635, 681, 682, 685, 795, 816, 836, 841, 844, 848, 852, 858, 884, 885, 1028, 1029, 1035, 1037], "get_redirect": 17, "transit": [17, 380, 1033], "malform": [17, 1026], "1000000": [17, 529], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 55, 66, 82, 98, 105, 119, 125, 170, 171, 196, 225, 232, 236, 298, 303, 334, 347, 371, 378, 380, 388, 389, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 418, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 514, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 616, 620, 621, 622, 623, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 955, 961, 969, 975, 983, 984, 990, 996, 1004, 1010, 1011, 1013, 1014, 1034, 1035, 1036, 1037, 1038], "break": [17, 39, 46, 70, 81, 167, 189, 206, 236, 248, 316, 323, 329, 345, 347, 349, 376, 378, 380, 382, 388, 402, 462, 505, 632, 766, 770, 773, 787, 865, 872, 877, 894, 897, 976, 979, 988, 990, 995, 1001, 1022, 1023, 1029, 1030, 1032, 1034, 1038], "get_adjacency_matrix": 17, "resolv": [17, 375, 376, 380, 384, 390, 410, 439, 445, 455, 684, 688, 929, 970, 980, 1029, 1031, 1032, 1035], "lil_matrix": 17, "float32": [17, 124, 224, 300, 318, 363, 371, 376, 378, 398, 550, 551, 552, 553, 556, 557, 558, 559, 586, 587, 633, 634, 651, 692, 755, 857, 900, 901, 902, 903, 910, 956, 957, 958, 996, 1006, 1015, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "del": [17, 382, 1034, 1035], "convert": [17, 34, 46, 48, 66, 71, 98, 157, 173, 200, 221, 242, 247, 248, 251, 252, 294, 362, 370, 385, 387, 389, 396, 410, 433, 436, 437, 440, 442, 443, 444, 445, 452, 457, 458, 489, 527, 534, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 565, 574, 575, 581, 582, 583, 584, 586, 587, 599, 620, 621, 622, 623, 639, 645, 651, 652, 653, 655, 659, 661, 663, 667, 669, 670, 671, 685, 770, 847, 856, 857, 859, 863, 865, 866, 867, 869, 892, 900, 901, 902, 903, 910, 912, 913, 935, 965, 966, 969, 976, 977, 978, 980, 990, 991, 995, 996, 1015, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1034, 1037, 1038], "csr": [17, 349, 362, 370, 371, 385, 387, 389, 410, 413, 436, 439, 440, 442, 443, 452, 490, 501, 516, 546, 547, 550, 551, 557, 558, 559, 623, 651, 685, 707, 760, 782, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 855, 859, 861, 863, 864, 867, 870, 871, 872, 875, 876, 877, 879, 882, 885, 900, 901, 902, 903, 908, 912, 913, 935, 943, 955, 956, 957, 958, 959, 960, 961, 983, 990, 994, 1022, 1023, 1028, 1030, 1031, 1037, 1038, 1039], "tocsr": 17, "convers": [17, 125, 191, 347, 358, 364, 370, 376, 378, 384, 387, 396, 410, 565, 847, 856, 864, 912, 913, 966, 977, 1001, 1004, 1030, 1031, 1032, 1035, 1038], "5m": 17, "ram": [17, 53, 364, 409, 884, 885, 982, 995, 1015, 1028, 1034, 1037, 1038], "5000000": 17, "strongest": [17, 193], "highest": [17, 19, 26, 82, 145, 149, 204, 259, 261, 272, 315, 347, 376, 387, 400, 402, 406, 409, 411, 430, 548, 550, 557, 585, 588, 589, 591, 592, 593, 596, 597, 599, 628, 630, 718, 748, 784, 787, 789, 792, 793, 803, 889, 900, 931, 969, 976, 980, 981, 984, 994, 996, 1034], "centrality_scor": 17, "networkx": [17, 385], "copyright": [17, 82], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 373], "dan": [17, 1022, 1026, 1027, 1028, 1030, 1031], "schult": 17, "dschult": 17, "pieter": [17, 1028, 1029, 1036], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 199, 233, 265, 349, 399, 413, 437, 516, 517, 524, 530, 535, 541, 581, 584, 678, 679, 692, 834, 835, 838, 840, 842, 843, 976, 980], "indptr": [17, 281, 356, 1030, 1038], "dangl": 17, "isclos": 17, "guess": [17, 112, 121, 406, 409, 410, 471, 525, 531, 533, 534, 540, 980, 994], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 103, 105, 112, 115, 152, 153, 159, 160, 170, 181, 184, 192, 194, 195, 207, 234, 247, 248, 250, 251, 265, 330, 332, 362, 378, 382, 385, 389, 399, 407, 410, 526, 531, 533, 540, 583, 584, 607, 639, 640, 643, 645, 646, 647, 650, 653, 654, 655, 656, 674, 677, 680, 753, 755, 864, 904, 930, 978, 982, 990, 994, 995, 1014, 1031], "converg": [17, 57, 61, 78, 79, 123, 125, 152, 158, 161, 193, 202, 208, 216, 247, 249, 298, 299, 303, 308, 323, 364, 385, 389, 399, 402, 407, 410, 412, 414, 433, 436, 439, 440, 441, 442, 445, 447, 452, 453, 454, 455, 464, 465, 471, 475, 476, 477, 526, 528, 529, 530, 531, 532, 539, 546, 564, 603, 637, 638, 639, 640, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 661, 665, 667, 669, 671, 675, 676, 680, 681, 683, 684, 687, 688, 787, 788, 841, 849, 850, 887, 888, 894, 970, 975, 976, 977, 979, 984, 994, 1022, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1036, 1037, 1038], "l_inf": 17, "scores_max": 17, "err": [17, 85, 99, 112], "6f": [17, 99, 266, 729, 785], "concern": [18, 36, 77, 84, 88, 94, 108, 110, 143, 151, 163, 167, 175, 178, 220, 245, 251, 278, 282, 296, 302, 321, 329, 346, 351, 362, 378, 401, 977, 992], "demo": [18, 22, 36, 68, 128, 167, 184, 206, 251, 262, 270, 308, 347, 348, 378, 399, 402, 410, 433, 434, 437, 439, 440, 441, 443, 444, 446, 448, 451, 495, 504, 505, 506, 534, 697, 698, 710, 712, 729, 783, 785, 853, 872], "spectral": [18, 22, 36, 44, 46, 49, 55, 68, 167, 222, 223, 376, 410, 442, 444, 445, 446, 455, 462, 463, 464, 465, 466, 467, 468, 469, 481, 504, 506, 584, 681, 682, 683, 684, 685, 688, 712, 785, 983, 993, 1016, 1017, 1022, 1023], "twenti": [19, 233, 373, 399, 402, 1015], "comp": [19, 85, 86, 98, 106, 300, 326, 347, 348, 349, 371, 1015], "window": [19, 326, 371, 376, 378, 379, 410, 1000, 1022, 1025, 1029, 1033, 1035, 1036], "misc": [19, 53, 98, 262, 326, 347, 348, 349, 371, 1014], "categori": [19, 44, 62, 70, 71, 122, 132, 170, 171, 200, 208, 215, 239, 262, 298, 299, 305, 309, 310, 315, 318, 326, 347, 348, 349, 370, 371, 385, 401, 402, 403, 409, 410, 412, 481, 489, 490, 496, 554, 555, 641, 651, 652, 662, 673, 735, 750, 751, 828, 865, 866, 873, 970, 976, 977, 978, 982, 988, 1006, 1015, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "noth": [19, 70, 347, 348, 381, 535, 707, 855, 864, 913, 990], "frequenc": [19, 27, 152, 171, 184, 194, 200, 233, 314, 315, 347, 348, 349, 371, 387, 400, 406, 407, 409, 410, 411, 544, 550, 552, 553, 554, 557, 581, 582, 583, 584, 597, 651, 652, 657, 659, 661, 667, 668, 669, 678, 679, 821, 856, 865, 866, 892, 894, 897, 900, 902, 918, 976, 977, 982, 990, 994, 996, 1024, 1026, 1027, 1033], "dhillon": [19, 399, 444, 446, 504], "cut": [19, 43, 46, 65, 66, 223, 380, 387, 399, 402, 439, 445, 446, 455, 581, 584, 684, 688, 990], "minibatchkmean": [19, 36, 44, 50, 61, 68, 167, 348, 364, 402, 407, 433, 435, 440, 505, 771, 1023, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038], "coclust": [19, 399, 444, 506], "4415": 19, "3015": 19, "talk": [19, 70, 262, 347, 348, 349, 365, 371, 389, 396, 1004, 1007, 1015], "polit": [19, 347, 371, 375, 976, 981], "mideast": [19, 371], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 308, 373], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 371], "17": [19, 39, 52, 74, 80, 98, 153, 170, 171, 174, 199, 225, 227, 233, 264, 297, 300, 307, 348, 371, 374, 381, 392, 394, 395, 402, 406, 412, 437, 454, 480, 490, 493, 516, 524, 529, 533, 540, 542, 543, 548, 552, 553, 562, 563, 590, 621, 642, 650, 651, 652, 659, 662, 665, 667, 680, 685, 721, 722, 732, 753, 758, 776, 779, 781, 807, 830, 841, 856, 861, 862, 870, 872, 878, 894, 897, 900, 901, 902, 903, 969, 970, 981, 983, 990, 998, 1018, 1020, 1022, 1023, 1024, 1025, 1028, 1031, 1036], "sci": [19, 70, 347, 348, 349, 371, 387, 682, 686, 863, 977, 990, 1015], "med": [19, 70, 270, 371, 990, 1015], "geb": 19, "gordon": [19, 249, 1028, 1032, 1034, 1036], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 371, 1015], "religion": [19, 262, 347, 348, 349, 371, 981, 1015], "alt": [19, 262, 326, 347, 348, 349, 371, 384, 1015], "atheism": [19, 262, 326, 347, 348, 349, 371, 1015], "god": [19, 347, 348, 1015], "jesu": [19, 347, 348], "kent": 19, "belief": [19, 261, 848, 985], "christ": 19, "faith": [19, 158, 339], "moral": [19, 71, 347, 651, 1030, 1034, 1035], "775": 19, "1623": 19, "pc": [19, 326, 349, 371], "hardwar": [19, 326, 349, 362, 363, 371, 374, 998, 1000, 1036, 1037], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 810], "s3": [19, 96, 149, 188, 189, 373, 1014], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 309, 326, 371, 376, 701, 980], "electron": [19, 149, 371, 373, 531, 533, 540, 620], "voltag": 19, "ship": [19, 132, 165, 353, 363, 374, 392, 410, 976, 1022, 1031], "circuit": [19, 977], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 399, 444, 1024, 1029, 1033], "v_measure_scor": [19, 37, 38, 49, 58, 319, 348, 402, 710, 728, 729, 749, 980, 1031], "number_norm": 19, "token": [19, 349, 362, 371, 380, 410, 529, 581, 582, 583, 584, 1022, 1030, 1034], "placehold": [19, 380, 620, 621, 622, 623, 804, 805, 808, 809, 970], "begin": [19, 109, 149, 152, 256, 263, 279, 316, 347, 358, 376, 381, 382, 389, 399, 402, 409, 546, 547, 552, 554, 555, 659, 660, 669, 670, 671, 969, 976, 980, 990, 992, 994, 1030, 1036, 1037], "By": [19, 45, 95, 128, 129, 179, 204, 236, 270, 303, 313, 319, 347, 363, 376, 378, 382, 383, 389, 393, 402, 403, 405, 406, 407, 408, 409, 411, 431, 434, 438, 439, 443, 457, 460, 461, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 517, 519, 542, 543, 550, 551, 552, 553, 557, 558, 578, 579, 581, 582, 584, 599, 602, 625, 626, 664, 666, 668, 670, 683, 685, 687, 690, 692, 693, 695, 696, 711, 721, 722, 726, 730, 775, 776, 779, 784, 786, 792, 793, 838, 852, 853, 865, 866, 868, 870, 880, 882, 890, 895, 896, 900, 901, 902, 903, 912, 913, 948, 969, 970, 972, 976, 980, 987, 990, 992, 996, 1006, 1010, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1036], "isdigit": [19, 410], "numbernormalizingvector": 19, "build_token": [19, 410, 581, 582, 584], "super": [19, 25, 27, 378, 410, 1030], "forsal": [19, 349, 371], "rec": [19, 349, 371, 634], "auto": [19, 25, 27, 33, 44, 45, 48, 57, 58, 60, 92, 95, 145, 146, 149, 156, 176, 183, 221, 222, 223, 224, 226, 234, 239, 241, 258, 260, 268, 281, 284, 289, 305, 313, 314, 315, 316, 317, 318, 330, 331, 332, 337, 340, 341, 349, 370, 371, 378, 409, 411, 412, 413, 434, 437, 438, 439, 440, 442, 443, 445, 450, 452, 455, 489, 501, 502, 528, 531, 533, 534, 537, 540, 542, 550, 551, 554, 555, 556, 557, 558, 560, 561, 586, 587, 590, 595, 600, 601, 622, 624, 625, 626, 628, 632, 639, 640, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 695, 727, 733, 792, 793, 820, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 849, 850, 865, 866, 873, 884, 885, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 928, 929, 946, 949, 971, 974, 976, 977, 980, 981, 983, 990, 995, 1000, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "motorcycl": [19, 371], "sport": [19, 371], "basebal": [19, 371], "hockei": [19, 371], "crypt": [19, 371], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 317, 348, 376, 389, 402, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 453, 454, 455, 456, 504, 506, 1014, 1022, 1026, 1028, 1030, 1031, 1033, 1036], "svd_method": [19, 444, 446, 525, 1025], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 57, 58, 61, 68, 167, 249, 252, 306, 317, 348, 385, 402, 433, 436, 441, 442, 445, 455, 505, 782, 783, 787, 788, 857, 983, 990, 1001, 1014, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 57, 58, 60, 61, 64, 95, 221, 222, 223, 224, 314, 317, 348, 402, 436, 440, 442, 444, 445, 446, 452, 455, 683, 687, 787, 788, 1014, 1022, 1030, 1036, 1037, 1038], "y_coclust": 19, "row_labels_": [19, 20, 21, 399, 444, 446], "y_kmean": 19, "fit_predict": [19, 56, 57, 60, 229, 236, 288, 378, 389, 402, 420, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 462, 556, 670, 787, 788, 838, 844, 852, 896, 986, 1027, 1030, 1031, 1035, 1037, 1039], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 118, 133, 221, 239, 343, 504, 506], "get_indic": [19, 417, 444, 446], "float_info": 19, "row_compl": 19, "logical_not": [19, 64, 105, 203], "rows_": [19, 399, 417, 444, 446], "col_compl": 19, "columns_": [19, 399, 417, 444, 446], "ident": [19, 64, 124, 195, 200, 218, 229, 233, 327, 347, 371, 378, 389, 399, 402, 403, 404, 406, 412, 415, 431, 432, 445, 457, 458, 466, 468, 469, 472, 473, 474, 481, 496, 544, 552, 553, 557, 558, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 636, 672, 673, 692, 697, 698, 728, 777, 785, 791, 794, 804, 805, 806, 808, 809, 834, 835, 841, 849, 850, 856, 857, 869, 881, 900, 901, 973, 974, 977, 980, 983, 984, 995, 1026, 1030, 1031, 1032, 1036], "most_common": 19, "counter": [19, 112, 268, 402, 669, 670, 671, 1035], "itemgett": 19, "revers": [19, 75, 149, 205, 261, 527, 534, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 781, 852, 980, 1022, 1023, 1032, 1034, 1038], "best_idx": [19, 260], "get_shap": [19, 417, 444, 446], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 58], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "716": [19, 22, 506], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 399, 444, 446, 504, 506], "simultan": [20, 55, 96, 265, 269, 319, 355, 368, 399, 402, 969, 980, 981, 996, 1004, 1029], "aim": [20, 81, 165, 204, 289, 324, 364, 371, 374, 376, 389, 396, 402, 404, 410, 441, 976, 980, 983, 990, 995, 1000, 1006, 1014, 1036], "identifi": [20, 97, 104, 125, 126, 169, 170, 200, 203, 204, 249, 251, 259, 264, 270, 290, 310, 315, 347, 348, 370, 371, 375, 376, 380, 381, 389, 402, 403, 406, 409, 410, 439, 443, 450, 480, 489, 501, 502, 548, 549, 556, 599, 636, 642, 692, 705, 766, 817, 838, 857, 887, 888, 969, 976, 980, 986, 993, 1004, 1013, 1029, 1031, 1036, 1037], "particularli": [20, 31, 70, 71, 74, 105, 130, 201, 231, 261, 305, 314, 344, 358, 362, 376, 385, 389, 402, 403, 405, 408, 410, 489, 795, 811, 829, 929, 948, 949, 976, 977, 980, 982, 1001, 1004, 1014, 1022, 1027, 1029, 1030, 1036], "suit": [20, 95, 130, 170, 200, 201, 229, 251, 316, 317, 319, 347, 363, 376, 378, 381, 382, 384, 387, 392, 405, 407, 409, 412, 443, 445, 496, 670, 829, 873, 923, 969, 972, 977, 980, 982, 983, 994, 1000, 1001, 1004, 1008, 1029, 1036], "arrang": [20, 279, 625, 823, 824, 825, 826, 980], "genom": [20, 506], "rearrang": [20, 21, 399], "kemaleren": [20, 21], "make_checkerboard": [20, 504, 1024], "uniform": [20, 31, 37, 53, 124, 125, 128, 145, 153, 158, 161, 179, 180, 214, 226, 229, 232, 269, 284, 287, 288, 293, 297, 304, 306, 307, 310, 317, 319, 333, 378, 381, 402, 431, 432, 544, 562, 563, 603, 604, 621, 632, 642, 643, 647, 661, 669, 670, 671, 692, 714, 715, 720, 737, 738, 740, 742, 743, 745, 777, 793, 801, 803, 827, 828, 831, 834, 835, 842, 843, 857, 869, 871, 881, 917, 931, 969, 970, 979, 980, 983, 1028, 1030, 1032, 1036, 1038], "deviat": [20, 34, 61, 80, 115, 118, 119, 120, 121, 149, 152, 157, 159, 161, 170, 179, 206, 258, 259, 260, 261, 262, 264, 287, 288, 303, 308, 368, 372, 373, 381, 385, 389, 406, 409, 443, 465, 494, 504, 505, 506, 507, 509, 510, 511, 515, 517, 518, 523, 545, 587, 604, 627, 637, 638, 664, 716, 744, 795, 811, 838, 861, 862, 872, 881, 882, 883, 976, 980, 986, 990, 1013, 1028, 1029, 1030, 1033, 1034, 1035], "matshow": [20, 21, 66, 120, 147, 299, 495], "afterward": [20, 380, 528, 534, 816], "row_idx_shuffl": 20, "permut": [20, 21, 37, 81, 120, 126, 141, 167, 168, 174, 216, 254, 277, 310, 391, 397, 402, 409, 457, 489, 493, 497, 552, 553, 557, 558, 620, 623, 627, 672, 697, 698, 710, 728, 729, 747, 749, 785, 806, 808, 817, 818, 852, 866, 897, 900, 901, 929, 949, 951, 954, 980, 994, 1010, 1013, 1017, 1022, 1028, 1035, 1037], "col_idx_shuffl": 20, "redefin": [20, 125, 170], "lost": [20, 57, 82, 371, 377, 387, 977, 980], "ground": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 128, 160, 184, 194, 200, 201, 252, 264, 348, 389, 401, 402, 696, 697, 698, 701, 705, 706, 707, 708, 710, 711, 714, 715, 716, 720, 721, 722, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 775, 776, 777, 778, 779, 785, 786, 980, 993, 1006, 1014, 1030], "truth": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 103, 128, 160, 184, 194, 200, 201, 252, 264, 348, 389, 401, 402, 696, 697, 698, 701, 705, 706, 707, 708, 710, 711, 714, 715, 716, 718, 720, 721, 722, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 775, 776, 777, 778, 779, 785, 786, 980, 1006, 1014, 1030, 1036], "consensus_scor": [20, 21, 399, 1024], "biclusters_": [20, 21, 417, 444, 446], "consensu": [20, 21, 37, 375, 376, 390, 399, 402, 642, 664, 671, 672, 712, 980], "1f": [20, 30, 50, 53, 98, 180, 200, 233, 246, 248, 268, 313, 348, 349], "perfect": [20, 26, 37, 70, 81, 98, 100, 196, 200, 347, 348, 376, 380, 402, 406, 546, 547, 683, 687, 697, 698, 701, 710, 718, 720, 723, 729, 735, 748, 749, 777, 778, 785, 976, 980, 983, 995, 1004, 1013, 1036], "ascend": [20, 71, 172, 309, 409, 443, 449, 620, 628, 904, 905, 906, 994, 1032, 1038], "column_labels_": [20, 21, 399, 444, 446], "reorder": [20, 45, 102, 389, 690, 711, 1001, 1030], "reordered_row": 20, "reordered_data": 20, "step": [20, 26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 103, 112, 117, 121, 122, 132, 146, 147, 148, 154, 157, 170, 172, 200, 208, 218, 230, 231, 234, 240, 243, 252, 259, 262, 268, 270, 281, 283, 289, 297, 300, 305, 308, 309, 314, 317, 327, 330, 334, 348, 349, 352, 358, 362, 365, 371, 374, 375, 376, 378, 380, 381, 384, 387, 389, 399, 400, 402, 404, 405, 407, 409, 410, 411, 435, 440, 442, 529, 530, 531, 532, 539, 556, 581, 582, 584, 586, 587, 590, 599, 620, 637, 641, 659, 660, 662, 669, 671, 672, 673, 687, 693, 787, 788, 789, 792, 793, 803, 823, 824, 825, 826, 848, 849, 850, 852, 853, 855, 892, 893, 894, 895, 897, 898, 928, 929, 951, 955, 970, 976, 979, 984, 985, 990, 994, 996, 997, 1000, 1003, 1011, 1015, 1022, 1026, 1027, 1029, 1030, 1031, 1033, 1034, 1035, 1038], "outer": [20, 100, 266, 324, 444, 507, 633, 643, 644, 647, 972, 1023], "product": [20, 71, 95, 133, 152, 157, 171, 358, 362, 378, 379, 382, 385, 396, 399, 407, 409, 444, 531, 533, 540, 575, 582, 583, 584, 606, 607, 626, 633, 657, 658, 678, 679, 753, 755, 767, 769, 864, 867, 884, 885, 930, 969, 972, 976, 978, 990, 992, 994, 995, 1000, 1004, 1030], "shade": [20, 53, 183, 284, 289, 330, 407], "539": [20, 22, 244], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 365, 410, 417, 442, 444, 446, 481, 504, 506, 584, 712, 785, 980, 1016, 1017, 1024, 1028], "make_biclust": [21, 506, 1024], "implant": 21, "row_idx": [21, 200], "col_idx": 21, "fit_data": 21, "405": [21, 22, 172, 174, 348], "plot_spectral_coclust": [21, 22], "07": [22, 105, 136, 170, 196, 215, 218, 219, 270, 277, 308, 328, 350, 358, 371, 402, 524, 554, 555, 685, 980, 994], "660": [22, 235], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 55, 75, 92, 110, 111, 133, 136, 144, 151, 152, 153, 154, 162, 167, 170, 221, 225, 230, 233, 261, 264, 267, 268, 271, 303, 307, 313, 315, 325, 327, 362, 365, 371, 372, 378, 382, 387, 389, 402, 406, 407, 410, 411, 412, 428, 429, 430, 431, 432, 439, 440, 442, 497, 505, 508, 516, 520, 542, 543, 544, 546, 548, 550, 552, 554, 555, 557, 560, 562, 563, 586, 587, 603, 606, 607, 615, 620, 625, 626, 651, 652, 664, 669, 685, 691, 693, 695, 696, 699, 700, 702, 705, 709, 713, 718, 719, 721, 731, 732, 733, 734, 748, 774, 776, 779, 780, 781, 784, 787, 788, 789, 792, 793, 803, 817, 818, 821, 823, 824, 827, 828, 829, 830, 831, 834, 837, 842, 848, 849, 885, 886, 887, 888, 889, 892, 894, 897, 900, 902, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 990, 992, 993, 994, 996, 1001, 1002, 1003, 1015, 1017, 1022, 1024, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1036], "confid": [24, 25, 26, 27, 157, 159, 247, 261, 264, 325, 390, 400, 412, 629, 651, 652, 659, 661, 664, 667, 668, 669, 691, 695, 700, 713, 718, 719, 731, 732, 748, 781, 820, 859, 892, 894, 897, 976, 979, 980, 981, 986, 993, 994, 995, 1004, 1015, 1032], "being": [24, 27, 45, 52, 55, 82, 86, 90, 100, 112, 116, 129, 152, 157, 170, 172, 176, 194, 236, 255, 261, 307, 308, 334, 347, 349, 374, 375, 376, 378, 380, 381, 387, 389, 390, 396, 402, 404, 406, 409, 410, 411, 412, 413, 415, 434, 435, 437, 438, 443, 449, 462, 468, 486, 516, 562, 633, 642, 649, 665, 667, 680, 683, 687, 705, 711, 721, 726, 728, 775, 781, 787, 832, 833, 838, 840, 842, 843, 844, 867, 885, 930, 969, 970, 976, 979, 980, 983, 986, 987, 988, 990, 992, 994, 995, 996, 1022, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "postprocess": [24, 400, 528, 534], "brier": [24, 25, 400, 702], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 368, 409, 430, 445, 528, 554, 613, 632, 636, 757, 766, 769, 849, 850, 894, 895, 896, 897, 898, 985, 995, 1013, 1017, 1035], "isoton": [24, 25, 167, 228, 244, 365, 430, 650, 915, 1002, 1017, 1023, 1024, 1025, 1026, 1028, 1035, 1038], "belong": [24, 27, 55, 60, 239, 261, 313, 319, 324, 370, 371, 399, 400, 402, 405, 406, 409, 417, 433, 436, 440, 441, 442, 444, 446, 516, 705, 723, 796, 802, 813, 839, 859, 873, 936, 937, 976, 979, 980, 982, 983, 984, 986, 995, 1000, 1006, 1013], "mblondel": [24, 48, 191, 222, 262, 347, 370, 501], "telecom": [24, 25, 42, 229, 1004], "balaz": [24, 1026], "kegl": [24, 1026], "jhm": [24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235], "informatik": [24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235, 980], "uni": [24, 25, 26, 27, 74, 116, 152, 153, 155, 156, 157, 158, 159, 161, 191, 234, 235, 324, 342], "bremen": [24, 25, 26, 27, 152, 153, 155, 156, 157, 158, 159, 161, 235], "style": [24, 26, 81, 125, 189, 208, 218, 265, 376, 383, 402, 410, 436, 440, 452, 693, 795, 811, 912, 913, 1022, 1025, 1036], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 192, 212, 229, 249, 306, 314, 317, 332, 335, 336, 343, 372, 378, 379, 409, 508, 1030, 1033, 1036], "50000": 24, "n_bin": [24, 25, 27, 53, 200, 218, 304, 306, 310, 431, 432, 857, 990], "calibration_curv": [24, 400, 430, 431, 1031, 1036], "blob": [24, 33, 42, 44, 57, 62, 64, 91, 402, 441, 505, 1027], "sample_weight": [24, 181, 200, 213, 218, 236, 314, 319, 344, 376, 389, 393, 402, 409, 413, 419, 425, 430, 436, 437, 440, 442, 452, 453, 458, 462, 475, 476, 477, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 603, 604, 625, 626, 627, 628, 630, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 690, 691, 693, 695, 696, 700, 701, 702, 705, 706, 709, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 726, 727, 730, 731, 732, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 774, 775, 776, 777, 779, 780, 781, 784, 786, 789, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 857, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 940, 968, 980, 994, 995, 996, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "sw_train": [24, 314], "sw_test": [24, 314], "calibratedclassifiercv": [24, 25, 26, 358, 389, 400, 669, 969, 995, 1001, 1026, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "brier_score_loss": [24, 25, 400, 980, 1030, 1031, 1032], "gaussiannb": [24, 25, 27, 31, 134, 263, 358, 400, 409, 430, 562, 827, 828, 829, 831, 853, 974, 981, 982, 1026, 1027, 1028, 1030, 1035, 1038], "With": [24, 34, 44, 67, 75, 100, 123, 145, 167, 171, 200, 202, 228, 230, 235, 237, 243, 244, 261, 285, 362, 365, 371, 376, 378, 389, 402, 403, 406, 409, 411, 430, 432, 494, 575, 625, 626, 651, 760, 850, 853, 855, 866, 872, 873, 899, 901, 973, 976, 977, 980, 981, 983, 984, 987, 994, 996, 1006, 1007, 1014, 1019, 1025, 1029, 1030, 1032, 1034, 1036], "itself": [24, 49, 55, 112, 125, 128, 171, 184, 198, 236, 242, 270, 281, 310, 334, 348, 362, 364, 375, 376, 378, 380, 389, 393, 401, 402, 413, 433, 434, 437, 438, 439, 462, 463, 464, 465, 466, 467, 468, 469, 520, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 544, 559, 562, 576, 585, 588, 589, 591, 592, 593, 595, 596, 632, 633, 634, 635, 636, 638, 648, 682, 684, 782, 783, 827, 828, 829, 830, 831, 832, 833, 837, 845, 846, 857, 858, 859, 887, 888, 972, 976, 977, 979, 983, 984, 988, 1000, 1026, 1037], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 130, 134, 149, 153, 154, 155, 156, 236, 270, 297, 305, 308, 313, 315, 347, 378, 383, 389, 400, 401, 409, 430, 431, 542, 543, 544, 546, 548, 550, 552, 554, 557, 560, 562, 586, 587, 603, 612, 613, 615, 616, 624, 625, 626, 651, 652, 669, 691, 693, 695, 733, 734, 780, 787, 788, 789, 792, 793, 803, 813, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 834, 842, 849, 852, 859, 887, 888, 889, 894, 897, 900, 902, 976, 980, 982, 984, 987, 993, 994, 995, 996, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 114, 127, 184, 192, 206, 208, 209, 236, 323, 339, 342, 353, 373, 384, 387, 392, 402, 467, 552, 553, 583, 584, 628, 638, 657, 669, 671, 678, 679, 787, 976], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 102, 107, 235], "109": [24, 53, 981, 1024], "y_uniqu": 24, "rainbow": [24, 223], "this_i": [24, 206], "this_x": [24, 198, 206, 1013], "this_sw": 24, "lexsort": 24, "51": [24, 42, 92, 157, 218, 281, 402, 403, 773, 976, 1018], "uncalibr": [24, 25, 26, 430], "gnb": [24, 25, 27, 134, 409, 562, 982], "434": [24, 28], "plot_calibr": [24, 28], "reliabl": [25, 27, 400, 406, 431, 432, 639, 996, 1004], "diagram": [25, 27, 71, 241, 314, 400, 402, 431, 432, 461, 890, 990, 1033, 1034], "redund": [25, 27, 106, 148, 247, 252, 358, 372, 375, 376, 381, 389, 400, 508, 627, 1001, 1015, 1034], "uninform": [25, 27, 310, 372, 381, 410, 969, 976, 1030], "rest": [25, 30, 122, 126, 167, 178, 184, 215, 219, 236, 249, 313, 326, 331, 382, 389, 401, 412, 505, 603, 624, 637, 651, 652, 669, 746, 780, 820, 821, 822, 841, 892, 894, 897, 976, 980, 981, 984, 987, 995, 1004, 1026, 1027, 1036, 1037, 1038], "make_classif": [25, 27, 31, 91, 116, 117, 119, 123, 146, 148, 258, 264, 272, 273, 291, 297, 305, 313, 315, 319, 342, 358, 372, 379, 398, 430, 431, 505, 546, 548, 550, 557, 659, 690, 691, 693, 695, 811, 816, 822, 849, 852, 892, 969, 980, 981, 990, 995, 1028, 1029, 1030, 1032], "100_000": [25, 27, 170], "n_inform": [25, 27, 31, 91, 116, 119, 146, 148, 179, 184, 203, 204, 258, 264, 274, 291, 297, 305, 313, 342, 378, 381, 508, 517, 546, 547, 548, 549, 557, 558, 658, 822, 981, 1030], "n_redund": [25, 27, 31, 91, 119, 146, 148, 258, 264, 291, 297, 305, 381, 430, 508, 546, 548, 557, 822], "logisticregress": [25, 27, 30, 71, 73, 117, 134, 140, 148, 149, 183, 190, 191, 192, 193, 207, 215, 216, 230, 231, 241, 243, 264, 270, 279, 300, 305, 313, 314, 315, 316, 317, 319, 347, 362, 376, 378, 382, 384, 388, 393, 400, 403, 409, 411, 431, 560, 562, 590, 624, 627, 636, 645, 652, 665, 666, 667, 668, 669, 680, 693, 780, 803, 811, 823, 824, 826, 877, 878, 880, 881, 882, 883, 899, 924, 976, 980, 981, 990, 994, 995, 1011, 1013, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "baselin": [25, 112, 122, 125, 135, 149, 179, 218, 271, 279, 315, 348, 373, 402, 411, 544, 545, 627, 980, 983, 1015, 1038], "regular": [25, 36, 68, 71, 73, 79, 100, 110, 136, 159, 164, 167, 178, 179, 180, 184, 185, 187, 188, 189, 191, 200, 214, 218, 219, 235, 247, 255, 262, 265, 274, 286, 287, 296, 299, 300, 301, 308, 309, 329, 331, 333, 334, 335, 345, 347, 349, 352, 362, 376, 387, 388, 400, 402, 404, 405, 407, 408, 409, 412, 430, 436, 440, 464, 465, 469, 471, 472, 473, 474, 497, 505, 507, 508, 513, 515, 517, 521, 531, 532, 533, 536, 540, 541, 543, 552, 554, 555, 581, 582, 584, 631, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 686, 727, 733, 742, 787, 788, 806, 818, 819, 849, 850, 853, 872, 892, 893, 894, 895, 897, 898, 899, 969, 970, 972, 973, 974, 977, 979, 985, 986, 990, 993, 994, 995, 1002, 1004, 1010, 1011, 1013, 1017, 1022, 1023, 1024, 1026, 1027, 1031, 1032, 1034, 1035], "logist": [25, 27, 30, 69, 71, 76, 117, 140, 167, 178, 219, 230, 243, 279, 300, 308, 317, 347, 389, 390, 400, 403, 409, 411, 412, 430, 482, 489, 495, 497, 505, 534, 552, 554, 564, 603, 624, 639, 650, 651, 652, 659, 661, 669, 733, 789, 803, 818, 848, 849, 850, 852, 872, 899, 915, 917, 980, 984, 985, 994, 995, 1002, 1004, 1011, 1017, 1026, 1029, 1030, 1032, 1033], "guid": [25, 55, 69, 95, 118, 161, 167, 170, 171, 188, 221, 268, 287, 288, 291, 309, 313, 314, 315, 316, 317, 318, 319, 365, 374, 375, 376, 381, 382, 383, 388, 389, 390, 393, 401, 403, 409, 413, 414, 415, 416, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 925, 980, 981, 1008, 1015, 1022, 1023, 1024, 1025, 1027, 1029, 1031, 1032, 1039], "gridspec": [25, 27, 65, 246, 383], "calibrationdisplai": [25, 27, 400, 1035, 1036], "lr": [25, 27, 117, 134, 135, 203, 215, 231, 232, 257, 264, 388, 393, 409, 561, 562, 563, 705], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 339], "dark2": [25, 27, 222], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 110, 136, 167, 200, 233, 267, 286, 303, 315, 400, 483, 552, 553, 554, 555, 557, 558, 635, 750, 751, 789, 794, 972, 978, 990, 1016, 1017, 1034, 1037], "grid_posit": [25, 27], "y_prob": [25, 27, 155, 431, 432, 702, 823, 849, 980, 1036], "poorli": [25, 62, 78, 86, 115, 127, 225, 363, 402, 409, 521, 623, 976, 977, 1028], "violat": [25, 334, 384, 387, 389, 628, 916, 987, 994, 996], "independ": [25, 27, 37, 46, 96, 97, 99, 117, 121, 159, 171, 238, 261, 264, 266, 270, 279, 303, 310, 313, 348, 358, 362, 363, 372, 378, 380, 388, 389, 392, 399, 400, 401, 402, 403, 404, 405, 406, 410, 414, 442, 457, 481, 496, 508, 509, 510, 511, 513, 525, 526, 528, 530, 532, 533, 539, 540, 544, 545, 597, 600, 601, 618, 633, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 697, 698, 710, 728, 729, 747, 749, 785, 791, 817, 821, 823, 825, 826, 864, 868, 869, 870, 872, 876, 877, 878, 879, 881, 882, 883, 886, 894, 895, 896, 897, 898, 923, 969, 972, 974, 976, 977, 980, 981, 982, 985, 987, 990, 995, 996, 1016, 1017, 1022, 1023, 1028, 1030, 1032, 1037], "overli": [25, 26, 189, 266, 358, 407, 980], "typic": [25, 27, 99, 109, 176, 184, 200, 204, 218, 235, 263, 264, 268, 270, 271, 287, 288, 315, 334, 348, 362, 369, 370, 371, 374, 378, 379, 380, 385, 388, 389, 400, 401, 402, 403, 406, 407, 409, 410, 412, 436, 440, 442, 489, 544, 546, 548, 549, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 622, 631, 633, 636, 647, 648, 649, 664, 675, 676, 705, 859, 866, 870, 873, 928, 929, 940, 965, 969, 973, 976, 977, 979, 980, 981, 982, 986, 988, 1004, 1015, 1031, 1035, 1038], "transpos": [25, 261, 414, 519, 531, 533, 540, 653, 654, 655, 656, 780, 929, 966, 980, 992, 1014, 1022, 1036], "nearli": [25, 264, 371, 389, 401, 756, 980, 983, 992, 1015], "albeit": 25, "strongli": [25, 27, 82, 86, 98, 122, 126, 170, 182, 215, 236, 267, 347, 376, 391, 392, 400, 409, 651, 728, 785, 976, 977, 1017, 1031, 1038], "plenti": 25, "greater": [25, 92, 112, 114, 170, 217, 234, 249, 267, 279, 287, 288, 352, 362, 372, 381, 389, 400, 402, 405, 409, 434, 438, 442, 445, 456, 465, 529, 534, 550, 551, 552, 553, 554, 555, 557, 558, 559, 586, 587, 590, 603, 604, 621, 633, 635, 638, 657, 659, 660, 664, 669, 670, 671, 685, 702, 705, 713, 727, 728, 731, 734, 780, 785, 787, 788, 822, 834, 835, 842, 843, 849, 850, 855, 870, 882, 886, 889, 900, 901, 902, 903, 929, 949, 969, 975, 976, 977, 980, 981, 986, 990, 995, 996, 1025, 1030, 1033, 1035, 1036, 1037], "exploit": [25, 279, 981, 1001, 1025], "f1_score": [25, 268, 326, 371, 730, 980, 1022, 1024, 1025, 1026, 1027, 1031, 1032, 1038], "log_loss": [25, 26, 124, 127, 153, 308, 326, 347, 389, 400, 409, 550, 552, 554, 557, 639, 651, 669, 900, 902, 969, 976, 980, 994, 996, 1024, 1026, 1028, 1036, 1037, 1038, 1039], "precision_scor": [25, 268, 701, 779, 980, 1022, 1024, 1025, 1026, 1027, 1032, 1038], "recall_scor": [25, 268, 406, 701, 776, 980, 1022, 1024, 1025, 1026, 1027, 1032, 1038], "roc_auc_scor": [25, 149, 261, 270, 313, 695, 699, 700, 701, 781, 980, 1024, 1025, 1030, 1032, 1036, 1037], "score_nam": [25, 37, 235, 263, 276, 319, 348, 795, 811], "score_df": 25, "set_index": [25, 112, 125, 157, 189, 218, 261, 309, 348], "decim": [25, 158, 464, 465, 905, 1029, 1030], "098921": 25, "323178": 25, "937457": 25, "872009": 25, "851408": 25, "861586": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 82, 465, 702, 980, 1015], "alter": [25, 165, 378, 389, 721, 722, 730, 775, 776, 779, 1027, 1031, 1034], "uncertainti": [25, 152, 159, 179, 263, 400, 402, 560, 561, 636, 852, 970, 992], "linearsvc": [25, 27, 70, 72, 145, 146, 167, 176, 234, 258, 260, 268, 305, 313, 329, 331, 342, 345, 347, 362, 378, 382, 400, 410, 411, 430, 505, 560, 570, 624, 632, 636, 645, 665, 666, 667, 668, 669, 680, 727, 734, 815, 820, 893, 894, 897, 899, 976, 980, 981, 995, 1022, 1023, 1024, 1028, 1030, 1033, 1038], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 218, 232, 303, 334, 628, 669, 733, 862, 990, 1026, 1033, 1034], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 134, 430, 900, 902], "dual": [25, 27, 70, 72, 145, 146, 176, 234, 258, 260, 268, 305, 313, 331, 332, 342, 347, 410, 411, 464, 465, 471, 560, 561, 604, 632, 639, 640, 645, 646, 651, 652, 653, 654, 655, 656, 674, 677, 727, 820, 832, 833, 892, 893, 894, 897, 980, 981, 995, 1024, 1033, 1036, 1038], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 67, 100, 170, 171, 189, 268, 389, 400, 404, 406, 411, 436, 440, 442, 462, 531, 533, 540, 556, 705, 722, 838, 896, 1022], "behavior": [25, 27, 37, 39, 52, 164, 167, 170, 171, 200, 218, 236, 252, 254, 264, 277, 299, 303, 305, 310, 334, 358, 363, 370, 373, 376, 378, 380, 384, 385, 389, 400, 402, 406, 410, 529, 544, 559, 659, 660, 661, 669, 670, 671, 692, 694, 721, 722, 775, 776, 779, 790, 791, 794, 806, 807, 808, 809, 810, 829, 865, 969, 976, 981, 986, 990, 1004, 1006, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "hing": [25, 207, 210, 212, 269, 331, 332, 336, 389, 659, 669, 727, 892, 899, 976, 994, 995, 1015], "focus": [25, 78, 189, 371, 387, 977, 990, 1000], "far": [25, 60, 82, 122, 153, 159, 170, 200, 218, 334, 347, 349, 376, 385, 412, 713, 872, 955, 985, 986, 995, 1004, 1013], "awai": [25, 26, 27, 60, 78, 121, 152, 153, 157, 203, 339, 371, 400, 412, 621, 834, 835, 842, 843, 979, 980, 995, 1013], "shown": [25, 48, 57, 89, 109, 114, 118, 125, 161, 169, 171, 184, 190, 198, 218, 226, 229, 234, 248, 261, 264, 267, 270, 286, 298, 299, 303, 304, 305, 322, 347, 348, 376, 381, 390, 400, 402, 403, 406, 407, 408, 410, 412, 431, 453, 625, 691, 693, 694, 695, 706, 789, 803, 904, 906, 975, 976, 977, 980, 983, 988, 990, 994, 995, 996, 1015, 1026, 1031, 1032, 1033, 1036], "varieti": [25, 164, 248, 309, 334, 384, 387, 401, 402, 404, 410, 636, 983, 996, 1000, 1004, 1024, 1037, 1038], "niculescu": [25, 27, 400, 430, 432], "mizil": [25, 27, 400, 430, 432], "caruana": [25, 27, 400, 430, 432], "144943": 25, "465660": 25, "937597": 25, "872186": 25, "851792": 25, "861868": 25, "099820": 25, "376999": 25, "936480": 25, "853174": 25, "877981": 25, "865400": 25, "098758": 25, "321301": 25, "937532": 25, "873724": 25, "848743": 25, "861053": 25, "deal": [25, 57, 71, 164, 170, 184, 225, 349, 376, 381, 401, 403, 410, 411, 412, 467, 489, 696, 701, 755, 779, 858, 929, 976, 1004, 1012, 1025, 1037, 1038], "situat": [25, 44, 57, 72, 169, 170, 206, 229, 264, 376, 384, 404, 406, 407, 409, 461, 521, 527, 575, 865, 868, 880, 890, 974, 976, 982, 983, 993, 996, 1030], "supervis": [25, 27, 37, 49, 54, 58, 86, 104, 117, 140, 141, 222, 237, 248, 261, 290, 315, 325, 328, 348, 362, 365, 371, 378, 388, 389, 400, 402, 405, 406, 407, 409, 410, 412, 430, 432, 457, 481, 496, 497, 546, 581, 583, 586, 587, 627, 669, 721, 790, 791, 794, 796, 797, 798, 799, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 817, 818, 841, 851, 852, 856, 866, 873, 887, 888, 889, 897, 974, 977, 980, 982, 983, 986, 990, 991, 995, 996, 997, 1000, 1001, 1003, 1006, 1007, 1009, 1015, 1017, 1022, 1028, 1034], "icml": [25, 27, 400, 402, 410, 430, 432, 827, 829, 848, 980, 982, 994, 999], "2005": [25, 27, 81, 373, 400, 430, 432, 841, 976, 983, 993], "501": [25, 28], "plot_calibration_curv": [25, 28], "simplex": [26, 663, 787, 867], "arrow": [26, 1036], "green": [26, 34, 81, 92, 115, 129, 134, 152, 176, 226, 298, 304, 308, 314, 389, 981, 1030, 1031, 1033, 1034], "600": [26, 50, 131, 132, 371, 673], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 212, 229, 249, 306, 336, 505], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 56, 116, 117, 118, 119, 120, 121, 134, 172, 173, 241, 242, 258, 273, 313, 315, 347, 358, 388, 389, 400, 409, 411, 550, 551, 552, 554, 559, 560, 562, 792, 793, 822, 902, 969, 970, 981, 1004, 1019, 1026, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039], "concaten": [26, 39, 50, 61, 69, 76, 81, 114, 128, 160, 167, 179, 182, 222, 229, 239, 246, 250, 251, 257, 268, 270, 271, 286, 300, 307, 310, 323, 347, 403, 457, 460, 497, 502, 524, 530, 534, 535, 592, 773, 789, 851, 852, 854, 857, 865, 897, 981, 1010, 1023], "randomforestclassifierrandomforestclassifi": [26, 119, 120, 172, 241, 273], "cal_clf": 26, "prefit": [26, 389, 400, 411, 430, 560, 561, 590, 1001, 1034, 1035, 1036], "x27": [26, 71, 72, 111, 117, 132, 135, 146, 170, 171, 172, 230, 231, 240, 241, 243, 251, 259, 261, 262, 268, 273, 300, 309, 314, 315, 317, 324], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1034], "unit": [26, 70, 80, 170, 176, 200, 218, 286, 299, 303, 348, 371, 376, 377, 378, 382, 384, 385, 407, 410, 414, 457, 482, 483, 512, 517, 525, 526, 527, 534, 535, 582, 583, 584, 604, 651, 652, 669, 678, 692, 762, 839, 848, 849, 850, 856, 862, 864, 868, 870, 872, 878, 879, 880, 882, 883, 892, 893, 976, 978, 979, 985, 990, 996, 1000, 1013, 1026, 1030, 1036, 1037], "mid": [26, 334, 980, 982], "frac": [26, 80, 81, 112, 261, 268, 270, 316, 399, 400, 402, 404, 407, 408, 409, 410, 412, 425, 456, 458, 475, 476, 477, 547, 549, 551, 553, 555, 558, 561, 563, 604, 608, 612, 615, 616, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 671, 672, 673, 689, 747, 761, 825, 826, 835, 843, 850, 893, 895, 898, 901, 903, 972, 974, 975, 976, 977, 978, 980, 982, 983, 984, 985, 987, 988, 990, 992, 994, 995, 996, 1013], "shrink": [26, 82, 95, 126, 171, 184, 195, 198, 204, 221, 250, 303, 407, 552, 553, 669, 671, 839, 849, 850, 894, 895, 896, 897, 898, 983, 995, 1013], "perfectli": [26, 37, 264, 275, 391, 402, 409, 431, 560, 599, 697, 698, 708, 710, 728, 729, 749, 778, 785, 865, 975, 977, 980, 995, 1035, 1036], "incur": [26, 612, 892, 995, 1030], "correct": [26, 27, 57, 81, 112, 160, 170, 184, 189, 200, 218, 246, 255, 261, 268, 270, 334, 336, 347, 358, 373, 376, 378, 380, 390, 400, 401, 402, 406, 407, 409, 410, 443, 449, 462, 467, 481, 494, 496, 628, 660, 669, 671, 696, 697, 701, 705, 706, 711, 714, 715, 716, 720, 721, 722, 726, 730, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 775, 776, 777, 779, 784, 786, 820, 821, 822, 829, 837, 863, 965, 976, 980, 981, 995, 1006, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039], "decreas": [26, 39, 46, 55, 58, 66, 75, 129, 148, 149, 160, 170, 171, 208, 232, 233, 263, 268, 274, 297, 305, 308, 313, 352, 362, 364, 376, 400, 402, 409, 434, 438, 456, 514, 527, 528, 534, 550, 551, 552, 553, 554, 555, 557, 558, 559, 595, 628, 629, 630, 669, 670, 671, 699, 705, 719, 774, 781, 849, 850, 900, 901, 902, 903, 969, 971, 976, 977, 980, 983, 984, 987, 988, 994, 995, 1004, 1013, 1024, 1029, 1032, 1035], "cal_scor": 26, "327": [26, 722, 1013], "549": [26, 116, 136], "p1d": 26, "p0": 26, "p1": [26, 134], "p2": [26, 134, 218], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 400, 430], "this_p": 26, "sure": [26, 56, 193, 206, 236, 237, 358, 362, 363, 370, 374, 375, 376, 377, 378, 380, 381, 384, 387, 400, 403, 410, 486, 516, 642, 912, 913, 923, 966, 970, 977, 994, 1000, 1001, 1029, 1030, 1032, 1037], "renorm": 26, "multiclass": [26, 30, 118, 167, 178, 219, 237, 254, 268, 271, 277, 279, 331, 343, 365, 371, 372, 378, 379, 381, 389, 402, 409, 430, 445, 455, 482, 497, 550, 552, 554, 557, 560, 561, 564, 587, 595, 603, 624, 625, 626, 651, 652, 659, 661, 666, 667, 668, 669, 695, 699, 701, 721, 722, 726, 727, 730, 735, 746, 775, 776, 779, 780, 781, 784, 789, 790, 792, 793, 794, 795, 803, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 859, 873, 892, 894, 897, 900, 902, 974, 976, 991, 995, 996, 1002, 1003, 1015, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1037, 1038], "argmax": [26, 103, 260, 274, 378, 409, 562, 820, 900, 995, 1035], "565": [26, 28, 261, 276, 277], "plot_calibration_multiclass": [26, 28], "gave": [27, 400, 789, 792, 793, 803, 859], "four": [27, 145, 160, 176, 182, 201, 248, 249, 323, 331, 372, 376, 389, 550, 557, 712, 900, 902, 918, 976, 978, 979, 980, 990, 999], "naiv": [27, 31, 130, 261, 263, 347, 349, 365, 371, 400, 409, 410, 430, 537, 827, 828, 829, 830, 831, 974, 975, 983, 1002, 1017, 1022, 1023, 1024, 1025, 1030, 1032, 1035, 1037], "bay": [27, 31, 115, 130, 152, 189, 251, 263, 347, 365, 371, 400, 407, 409, 410, 412, 529, 542, 543, 649, 827, 828, 829, 830, 831, 873, 974, 975, 976, 990, 1002, 1015, 1017, 1022, 1023, 1024, 1025, 1030, 1032, 1035, 1037], "train_sampl": [27, 215, 216], "against": [27, 37, 86, 105, 115, 126, 144, 176, 191, 192, 209, 217, 236, 270, 309, 313, 334, 371, 376, 390, 400, 402, 406, 410, 431, 502, 535, 541, 544, 669, 671, 747, 749, 780, 791, 796, 798, 817, 821, 946, 972, 976, 980, 981, 983, 995, 999, 1006], "rfc": [27, 242, 313, 1019], "circleci": [27, 34, 53, 55, 114, 156, 158, 160, 161, 169, 170, 179, 192, 209, 247, 251, 306, 313, 326, 339, 353, 376], "1198": 27, "userwarn": [27, 44, 55, 62, 114, 161, 169, 170, 192, 209, 251, 339, 353, 381, 705, 990, 1028, 1030, 1035], "redundantli": [27, 389], "keyword": [27, 347, 370, 376, 378, 381, 383, 389, 402, 413, 416, 431, 437, 438, 443, 445, 450, 457, 460, 489, 496, 528, 531, 533, 552, 553, 560, 561, 562, 563, 613, 621, 624, 625, 632, 636, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 681, 685, 690, 691, 692, 693, 694, 695, 766, 770, 771, 772, 773, 782, 783, 795, 811, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 852, 856, 924, 926, 947, 969, 977, 980, 983, 993, 1022, 1026, 1028, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1039], "argument": [27, 72, 201, 230, 233, 236, 363, 370, 371, 376, 377, 379, 381, 382, 384, 385, 387, 389, 402, 403, 406, 407, 409, 411, 413, 414, 416, 420, 424, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 450, 452, 454, 456, 461, 462, 486, 489, 496, 501, 526, 528, 529, 531, 533, 544, 552, 553, 556, 560, 561, 562, 563, 570, 574, 575, 581, 582, 584, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 624, 632, 636, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 659, 661, 669, 670, 674, 677, 681, 685, 689, 691, 692, 693, 694, 695, 707, 712, 727, 734, 755, 771, 772, 795, 811, 820, 821, 824, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 849, 852, 856, 890, 896, 906, 910, 919, 924, 926, 947, 948, 949, 950, 964, 969, 972, 976, 977, 978, 980, 983, 987, 988, 995, 996, 1006, 1010, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039], "fmt": [27, 61, 211], "preced": [27, 279, 363, 376, 480, 980, 1022], "contrast": [27, 104, 171, 202, 235, 261, 263, 290, 308, 348, 389, 400, 402, 403, 405, 409, 412, 442, 445, 455, 612, 636, 803, 848, 970, 973, 975, 976, 980, 983, 985, 988, 990, 993, 994, 996, 1032], "push": [27, 376, 380, 400, 1003], "equat": [27, 342, 376, 402, 407, 409, 550, 551, 552, 553, 557, 558, 559, 583, 620, 651, 652, 675, 676, 680, 755, 872, 900, 901, 902, 903, 970, 977, 980, 985, 1030], "twice": [27, 273, 347, 349, 378, 412, 612, 722, 724, 931, 1031], "approx": [27, 95, 234, 407, 409, 410, 980, 987, 994], "rare": [27, 171, 309, 358, 380, 387, 389, 391, 400, 402, 406, 582, 641, 651, 652, 662, 673, 892, 917, 948, 976, 990, 1004, 1029, 1030, 1031, 1035, 1037], "explan": [27, 86, 236, 362, 375, 376, 400, 410, 969, 979, 981, 996, 1004, 1025], "bag": [27, 70, 110, 116, 118, 127, 136, 167, 172, 348, 349, 372, 400, 401, 509, 510, 511, 548, 549, 550, 551, 552, 553, 556, 557, 558, 733, 794, 818, 901, 978, 981, 1002, 1017, 1022, 1024, 1025, 1026, 1027, 1028, 1035, 1036, 1038], "underli": [27, 56, 80, 131, 149, 201, 203, 204, 236, 266, 285, 286, 355, 363, 376, 387, 389, 391, 393, 398, 400, 402, 404, 406, 407, 408, 409, 411, 412, 430, 444, 445, 446, 455, 457, 458, 464, 465, 471, 517, 560, 561, 562, 563, 586, 587, 590, 595, 651, 652, 661, 673, 684, 688, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 837, 892, 900, 901, 902, 903, 945, 976, 977, 981, 986, 993, 995, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1038, 1039], "restrict": [27, 66, 67, 164, 167, 217, 296, 301, 378, 382, 387, 400, 402, 409, 410, 458, 486, 495, 525, 574, 603, 646, 647, 648, 649, 651, 675, 676, 706, 774, 780, 781, 818, 840, 842, 843, 844, 846, 848, 849, 850, 852, 878, 980, 996, 1016, 1017, 1022, 1024, 1032, 1034], "interv": [27, 110, 136, 159, 167, 184, 200, 201, 202, 218, 261, 371, 389, 400, 406, 409, 412, 431, 432, 509, 510, 511, 550, 551, 553, 555, 557, 558, 628, 629, 631, 670, 734, 740, 742, 793, 810, 818, 855, 857, 871, 894, 895, 896, 916, 972, 976, 980, 990, 996, 1029, 1033], "move": [27, 121, 262, 300, 334, 375, 376, 380, 382, 400, 402, 542, 543, 564, 565, 566, 568, 570, 571, 947, 1014, 1022, 1023, 1027, 1030, 1032, 1035, 1036], "characterist": [27, 44, 62, 149, 157, 167, 229, 254, 258, 277, 303, 358, 371, 373, 381, 400, 406, 409, 412, 496, 497, 616, 631, 651, 695, 699, 701, 719, 774, 780, 781, 808, 818, 821, 859, 897, 976], "difficult": [27, 55, 112, 170, 208, 376, 384, 400, 407, 409, 546, 547, 552, 554, 555, 975, 977, 979, 983, 985, 987, 996, 1004, 1022, 1036], "bayesian": [27, 54, 167, 178, 184, 188, 219, 245, 247, 251, 252, 253, 407, 430, 517, 521, 525, 637, 638, 649, 650, 787, 788, 853, 855, 867, 872, 969, 1000, 1002, 1016, 1017, 1028, 1035], "domingo": [27, 780, 980], "pazzani": 27, "proc": [27, 79, 400, 410, 443, 682, 686, 827, 969, 977, 982, 986], "13th": 27, "intl": [27, 406], "1996": [27, 402, 409, 413, 437, 509, 510, 511, 548, 549, 990], "zadrozni": [27, 400, 430, 669], "bianca": 27, "charl": [27, 756, 1022, 1025, 1028, 1032, 1034, 1037], "elkan": [27, 314, 400, 430, 436, 440, 452, 669, 1028, 1032, 1033, 1035, 1036], "vol": [27, 160, 184, 267, 373, 402, 467, 552, 553, 621, 628, 638, 657, 678, 679, 787, 817, 829, 970, 982, 983], "2001": [27, 157, 172, 260, 399, 402, 409, 430, 444, 445, 446, 455, 504, 552, 553, 557, 558, 621, 627, 632, 638, 684, 689, 727, 780, 873, 885, 917, 970, 976, 980, 986, 988, 990, 992, 995], "476": [27, 28], "plot_compare_calibr": [27, 28], "976": [28, 192], "auto_examples_calibr": 28, "calibr": [28, 30, 218, 365, 389, 505, 508, 557, 562, 651, 669, 702, 721, 733, 776, 779, 780, 818, 830, 889, 892, 969, 976, 980, 993, 995, 1002, 1017, 1019, 1026, 1028], "discrimin": [29, 35, 104, 144, 146, 149, 167, 176, 215, 222, 237, 290, 365, 373, 400, 409, 468, 505, 542, 543, 559, 775, 841, 969, 977, 980, 983, 994, 996, 1002, 1013, 1017, 1025], "ellipsoid": [29, 35, 167, 245, 246, 253, 542, 543, 787, 788, 974, 979], "ledoit": [29, 35, 77, 78, 82, 83, 167, 466, 468, 472, 473, 505, 542, 974], "wolf": [29, 35, 77, 78, 82, 83, 167, 466, 468, 472, 473, 505, 542, 974, 1029], "oa": [29, 35, 77, 83, 167, 404, 462, 463, 466, 467, 469, 470, 505, 542, 789, 974], "hand": [29, 35, 86, 89, 97, 100, 118, 125, 144, 157, 167, 170, 171, 193, 204, 207, 225, 232, 233, 235, 236, 258, 263, 270, 334, 362, 370, 371, 373, 376, 378, 382, 384, 388, 396, 407, 408, 409, 411, 495, 636, 690, 706, 780, 818, 873, 897, 969, 973, 976, 980, 982, 984, 988, 993, 995, 1004, 1006, 1009, 1012, 1013], "built": [30, 86, 109, 112, 113, 121, 123, 172, 208, 264, 294, 313, 353, 362, 374, 376, 377, 378, 380, 382, 384, 385, 387, 388, 389, 392, 396, 401, 402, 403, 406, 409, 411, 438, 496, 546, 547, 548, 549, 554, 555, 581, 582, 586, 590, 632, 633, 634, 635, 636, 639, 640, 645, 651, 653, 654, 655, 656, 665, 666, 667, 668, 674, 792, 793, 800, 823, 826, 832, 833, 902, 903, 964, 976, 980, 981, 993, 994, 996, 1000, 1004, 1015, 1022, 1025, 1026, 1028, 1034], "enabl": [30, 50, 72, 123, 171, 208, 223, 236, 305, 314, 316, 317, 319, 343, 374, 376, 381, 384, 387, 389, 392, 393, 398, 401, 402, 403, 407, 409, 410, 442, 461, 527, 528, 534, 552, 553, 554, 555, 556, 572, 573, 583, 584, 595, 603, 787, 788, 789, 792, 852, 853, 865, 866, 889, 890, 892, 893, 894, 895, 896, 897, 898, 907, 947, 970, 972, 977, 979, 980, 983, 990, 991, 994, 995, 1001, 1004, 1022, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "troubl": [30, 410], "ovr": [30, 192, 215, 279, 313, 343, 651, 652, 780, 821, 892, 894, 897, 976, 980, 981, 995, 1022, 1027, 1028, 1030, 1031, 1032, 1036, 1037], "gpc": [30, 151, 162, 167, 497, 603, 604, 606, 607, 612, 613, 615, 616, 696, 733, 1002, 1017, 1032], "gaussian_process": [30, 31, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 365, 389, 412, 636, 981, 1025, 1028, 1029], "gaussianprocessclassifi": [30, 31, 153, 154, 155, 156, 160, 389, 412, 604, 612, 613, 615, 616, 981, 1028, 1030, 1032, 1036], "accuracy_scor": [30, 112, 153, 265, 308, 325, 347, 358, 388, 393, 550, 557, 701, 721, 722, 726, 730, 734, 775, 776, 779, 784, 786, 969, 980, 1023, 1024, 1025, 1034], "iri": [30, 41, 45, 74, 88, 93, 94, 99, 106, 107, 110, 123, 133, 136, 141, 145, 151, 162, 167, 178, 183, 193, 219, 243, 248, 255, 266, 267, 270, 271, 284, 292, 298, 315, 321, 328, 329, 330, 334, 337, 345, 351, 356, 357, 369, 370, 388, 402, 403, 406, 407, 409, 489, 497, 534, 542, 546, 550, 557, 603, 615, 624, 669, 789, 803, 887, 888, 889, 892, 897, 900, 904, 905, 906, 969, 970, 974, 979, 980, 983, 987, 990, 993, 994, 995, 996, 1006, 1013, 1014, 1017, 1035], "load_iri": [30, 41, 45, 74, 90, 99, 102, 104, 106, 121, 123, 133, 141, 145, 154, 183, 193, 209, 243, 248, 255, 266, 267, 268, 270, 271, 284, 289, 292, 298, 313, 315, 318, 327, 330, 331, 334, 337, 353, 356, 388, 396, 402, 403, 406, 409, 411, 554, 560, 595, 603, 612, 613, 615, 616, 624, 651, 652, 780, 789, 792, 793, 795, 803, 820, 841, 887, 888, 889, 900, 902, 904, 905, 906, 970, 975, 980, 981, 982, 983, 987, 990, 996, 1006, 1012, 1013, 1014, 1028, 1030, 1033], "saga": [30, 191, 215, 216, 651, 652, 665, 667, 680, 803, 976, 1029, 1031], "multi_class": [30, 192, 215, 270, 313, 562, 603, 651, 652, 780, 826, 892, 976, 981, 995, 1022, 1026, 1030, 1035, 1037], "n_classifi": [30, 562, 563], "xx": [30, 34, 42, 58, 80, 121, 125, 130, 141, 154, 155, 156, 171, 187, 207, 210, 211, 212, 213, 214, 226, 229, 237, 250, 287, 297, 305, 306, 327, 333, 334, 338, 339, 340, 343, 344, 380], "yy": [30, 34, 42, 58, 80, 121, 130, 141, 154, 156, 171, 207, 211, 212, 213, 214, 226, 229, 237, 287, 297, 305, 306, 327, 333, 334, 338, 339, 340, 343, 344], "xfull": 30, "imshow_handl": 30, "cax": [30, 155, 272], "orient": [30, 95, 170, 221, 303, 389, 904, 977], "horizont": [30, 95, 221, 234, 303, 306, 381, 389, 457, 508, 690, 694], "352": [30, 35, 150, 261, 382], "plot_classification_prob": [30, 35], "salt": [31, 234, 305, 1036], "convei": [31, 226, 305, 1013], "linearli": [31, 100, 114, 149, 170, 179, 214, 222, 229, 270, 271, 305, 308, 338, 347, 362, 373, 387, 407, 409, 508, 635, 700, 980, 983, 986, 995, 1013, 1029, 1038], "semi": [31, 237, 305, 315, 328, 365, 371, 389, 481, 497, 528, 581, 583, 669, 721, 818, 852, 856, 887, 888, 889, 897, 978, 983, 986, 1002, 1017, 1022, 1034, 1037], "transpar": [31, 305, 965, 1004], "ga\u00ebl": [31, 45, 51, 73, 89, 90, 102, 183, 197, 198, 305, 338, 339, 390, 1004], "modifi": [31, 45, 51, 73, 75, 89, 90, 183, 184, 197, 198, 210, 221, 222, 223, 236, 248, 319, 339, 344, 374, 376, 378, 380, 389, 402, 409, 412, 436, 440, 447, 452, 461, 475, 476, 477, 478, 488, 503, 574, 603, 604, 606, 612, 669, 671, 682, 686, 721, 722, 760, 775, 776, 779, 910, 976, 993, 994, 1001, 1012, 1016, 1017, 1022, 1024, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037], "listedcolormap": [31, 121, 284, 289, 292, 297, 305], "make_circl": [31, 44, 62, 100, 130, 226, 297, 298, 305, 324, 372, 1023, 1030, 1033], "make_moon": [31, 44, 62, 229, 261, 297, 298, 305, 372, 969, 1029, 1033], "discriminant_analysi": [31, 33, 34, 104, 222, 290, 358, 365, 398, 529, 841, 974, 981, 1022, 1025, 1026, 1027, 1028, 1029], "quadraticdiscriminantanalysi": [31, 34, 542, 974, 981, 983, 1022, 1027, 1029, 1037], "adaboostclassifi": [31, 111, 114, 121, 409, 547, 552, 554, 1024, 1025, 1028, 1029, 1031, 1032, 1035, 1037, 1038], "decisionboundarydisplai": [31, 56, 114, 128, 133, 183, 192, 209, 264, 284, 289, 292, 308, 330, 331, 332, 335, 336, 353, 1036, 1037], "kneighborsclassifi": [31, 133, 140, 283, 284, 289, 290, 308, 315, 317, 347, 409, 595, 835, 839, 840, 841, 842, 843, 981, 983, 1013, 1022, 1032, 1034, 1035, 1036, 1037, 1038], "neural_network": [31, 167, 171, 240, 296, 297, 298, 299, 300, 364, 365, 387, 981, 984, 1024], "mlpclassifi": [31, 167, 296, 297, 299, 301, 364, 495, 497, 507, 515, 564, 848, 850, 862, 981, 984, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "decisiontreeclassifi": [31, 111, 112, 114, 121, 133, 265, 319, 352, 353, 356, 389, 409, 546, 548, 550, 552, 554, 557, 624, 795, 816, 901, 902, 904, 905, 906, 970, 981, 996, 1023, 1024, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "net": [31, 167, 178, 184, 191, 211, 219, 274, 382, 401, 406, 464, 465, 471, 494, 517, 550, 551, 552, 553, 557, 558, 559, 639, 640, 645, 650, 651, 652, 653, 654, 655, 656, 661, 669, 671, 674, 677, 848, 900, 901, 902, 903, 969, 980, 985, 994, 1002, 1004, 1017, 1022, 1027, 1031, 1032, 1034], "adaboost": [31, 110, 121, 136, 167, 512, 513, 544, 546, 547, 552, 624, 696, 786, 818, 900, 901, 1002, 1017, 1024], "qda": [31, 34, 373, 542, 543, 1002, 1017, 1027], "025": [31, 202, 258, 683, 687], "n_clusters_per_class": [31, 91, 116, 146, 148, 258, 291, 297, 305, 381, 508], "linearly_separ": [31, 297], "ds_cnt": [31, 305, 306], "rdbu": [31, 95, 216, 297, 334, 339], "cm_bright": [31, 297, 305], "ff0000": [31, 289, 297], "0000ff": [31, 289, 297], "ep": [31, 44, 46, 49, 55, 65, 183, 185, 224, 233, 387, 402, 413, 437, 443, 448, 464, 465, 471, 624, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 674, 675, 676, 677, 683, 687, 707, 733, 844, 884, 885, 886, 992, 1037, 1038], "lstrip": [31, 44, 62, 229, 297, 305], "854": [31, 35, 259], "plot_classifier_comparison": [31, 35, 305], "8x8": [32, 89, 191, 233, 290, 300, 373, 495, 1012], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 58, 72, 73, 89, 139, 140, 147, 191, 207, 222, 233, 234, 259, 260, 263, 269, 276, 283, 285, 290, 298, 300, 319, 322, 323, 382, 403, 438, 439, 525, 526, 527, 528, 592, 593, 631, 632, 661, 681, 682, 683, 684, 1006, 1010, 1011, 1012, 1013, 1014, 1028, 1033], "set_axis_off": 32, "gray_r": [32, 89, 98, 155, 222, 300, 322, 323, 1012], "entir": [32, 164, 200, 208, 300, 303, 314, 356, 358, 370, 377, 378, 389, 396, 402, 406, 408, 410, 465, 485, 527, 581, 582, 583, 584, 640, 644, 646, 648, 651, 652, 654, 656, 658, 659, 661, 669, 675, 676, 726, 786, 820, 821, 824, 849, 851, 852, 865, 877, 878, 880, 881, 882, 883, 949, 969, 970, 980, 990, 994, 996, 1013, 1031, 1032], "98": [32, 34, 42, 44, 54, 62, 64, 82, 98, 149, 229, 259, 297, 300, 305, 323, 373, 380, 406, 409, 652, 827, 975, 982, 1010, 1015], "92": [32, 34, 50, 98, 146, 176, 259, 300, 322, 323, 334, 371, 373, 531, 533, 540, 555, 590, 789, 803, 975, 1015], "899": [32, 259, 326], "confus": [32, 167, 230, 254, 270, 277, 322, 323, 347, 389, 461, 497, 624, 645, 690, 706, 708, 711, 721, 722, 730, 746, 776, 779, 818, 890, 897, 1015, 1022, 1023, 1027, 1031, 1032, 1034, 1035, 1036, 1037], "figure_": [32, 171, 240, 313, 315, 383, 431, 624, 625, 690, 691, 693, 694, 695, 795, 811], "confusion_matrix": [32, 230, 255, 322, 323, 690, 706, 746, 815, 980, 1015, 1023, 1028, 1029, 1032, 1033, 1035], "gt": [32, 71, 72, 117, 132, 170, 251, 259, 273, 374, 376, 380], "rebuilt": [32, 832, 833], "546": [32, 35], "plot_digits_classif": [32, 35], "oracl": [33, 200, 218, 415, 462, 463, 466, 467, 468, 469, 974, 1022], "shrinkag": [33, 77, 79, 82, 83, 103, 127, 167, 292, 415, 462, 463, 466, 467, 468, 469, 470, 472, 473, 474, 532, 536, 542, 554, 555, 789, 976, 990, 1002, 1017, 1022, 1026, 1027, 1029], "lineardiscriminantanalysi": [33, 34, 104, 222, 290, 358, 398, 529, 543, 841, 974, 981, 983, 1022, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1036, 1037, 1038], "200": [33, 34, 44, 50, 54, 60, 75, 98, 114, 123, 125, 131, 156, 186, 195, 201, 204, 205, 206, 212, 217, 222, 241, 246, 262, 268, 270, 271, 303, 306, 324, 326, 333, 334, 355, 358, 371, 378, 387, 407, 409, 414, 433, 447, 461, 464, 465, 526, 527, 528, 531, 532, 533, 536, 540, 577, 642, 644, 664, 672, 685, 803, 849, 850, 890, 894, 895, 896, 897, 898, 995], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 133, 134, 409, 562], "lsqr": [33, 310, 542, 665, 667, 680, 974, 1023, 1029, 1036], "clf2": [33, 133, 134, 378, 396, 409, 562], "store_precis": [33, 79, 462, 463, 466, 467, 468, 469], "assume_cent": [33, 79, 404, 415, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473], "clf3": [33, 133, 134, 378, 409, 562], "covariance_estim": [33, 542, 974, 1034], "features_samples_ratio": 33, "gold": [33, 194, 201, 203, 206, 210, 214, 217, 247, 252, 268, 287, 333, 382], "navi": [33, 70, 79, 99, 104, 105, 131, 179, 203, 211, 224, 247, 248, 249, 252, 268, 270, 286, 293, 324, 355], "plot_lda": [33, 35], "doubl": [34, 118, 273, 376, 389, 407, 531, 533, 540, 832, 833, 843, 964, 970, 995, 996, 1022, 1032, 1033], "own": [34, 118, 218, 236, 251, 281, 283, 324, 348, 363, 370, 379, 380, 381, 384, 385, 392, 401, 402, 414, 418, 433, 447, 526, 550, 557, 639, 787, 788, 834, 835, 836, 838, 840, 842, 843, 844, 866, 900, 902, 918, 923, 948, 976, 982, 983, 986, 990, 995, 1000, 1004, 1014, 1015, 1029, 1030, 1032], "mpl": [34, 246, 247, 248, 252, 303], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "plot_lda_qda": [34, 35], "matplotlibdeprecationwarn": 34, "minor": [34, 264, 268, 371, 379, 390, 489, 980, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "dataset_fixed_cov": 34, "dim": [34, 209, 233, 284, 289, 290, 292, 330, 331, 520, 692], "dataset_cov": 34, "matric": [34, 40, 80, 82, 95, 205, 247, 248, 250, 251, 252, 281, 294, 314, 326, 347, 348, 368, 370, 378, 379, 387, 388, 389, 401, 402, 403, 404, 405, 407, 410, 411, 417, 443, 444, 446, 457, 466, 475, 476, 477, 527, 528, 531, 533, 534, 537, 540, 542, 543, 548, 549, 556, 559, 574, 575, 582, 636, 651, 657, 665, 667, 680, 746, 752, 760, 766, 770, 771, 772, 773, 782, 787, 788, 818, 836, 839, 844, 855, 859, 861, 864, 867, 869, 870, 872, 875, 877, 879, 881, 882, 883, 884, 885, 894, 895, 897, 898, 908, 929, 935, 944, 951, 953, 954, 970, 974, 977, 978, 979, 981, 983, 984, 992, 994, 995, 1000, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "linalg": [34, 54, 78, 79, 82, 101, 103, 105, 186, 246, 247, 248, 251, 252, 376, 382, 407, 444, 445, 446, 455, 525, 528, 534, 537, 650, 665, 667, 680, 684, 688, 927], "plot_data": 34, "fig_index": 34, "splot": [34, 247, 252], "tp": [34, 402, 705, 711, 723, 774, 775, 776, 779, 904, 980], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 115, 170, 334, 371], "000099": 34, "pcolormesh": [34, 130, 141, 183, 284, 289, 330, 334, 338, 624], "white": [34, 58, 60, 95, 157, 170, 214, 221, 287, 300, 305, 327, 333, 407, 410, 412, 618, 996, 1022, 1025, 1028, 1032, 1036], "means_": [34, 246, 247, 248, 249, 251, 252, 542, 543, 787, 788], "yellow": [34, 92, 334, 981], "markers": [34, 49, 55, 58, 61, 63, 64, 125, 155, 159, 232, 317], "markeredgecolor": [34, 49, 55, 61, 63, 64], "plot_ellips": [34, 246], "cov": [34, 82, 86, 114, 251, 376, 389, 392, 395, 405, 415, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 512, 525, 527, 534, 541], "eigh": [34, 246, 247, 248, 251, 252, 407, 414, 526, 528, 1037], "arctan": [34, 247, 252, 372, 511], "180": [34, 246, 247, 248, 251, 252, 290, 294, 348, 350, 382, 412, 495], "ell": [34, 246, 247, 248, 252, 399], "patch": [34, 50, 246, 247, 248, 251, 252, 256, 371, 380, 387, 407, 409, 548, 549, 576, 577, 580, 1022, 1030], "ellips": [34, 229, 246, 247, 248, 251, 252, 986], "set_clip_box": [34, 246, 247, 248, 251, 252], "set_alpha": [34, 111, 246, 247, 248, 251, 252], "add_artist": [34, 222, 246, 247, 248, 251, 252], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 130, 222, 348, 385, 398, 405, 414, 444, 446, 475, 476, 478, 525, 526, 527, 528, 532, 533, 534, 537, 539, 542, 543, 657, 665, 666, 667, 678, 679, 680, 851, 929, 974, 1015, 1024, 1028, 1029, 1035, 1037], "store_covari": [34, 542, 543, 1027, 1029], "tight": [34, 40, 55, 105, 114, 121, 141, 145, 169, 170, 185, 187, 192, 193, 194, 205, 209, 212, 214, 217, 223, 226, 250, 251, 281, 287, 288, 292, 293, 330, 333, 334, 337, 338, 339, 353, 575, 685, 1034], "337": [34, 35, 382], "102": [35, 41, 68, 182, 219, 382, 1013, 1024], "auto_examples_classif": 35, "modul": [36, 37, 49, 53, 77, 84, 88, 94, 95, 110, 143, 151, 161, 163, 167, 168, 175, 178, 215, 220, 221, 245, 254, 278, 282, 296, 298, 299, 302, 321, 329, 346, 351, 354, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 387, 389, 391, 392, 396, 400, 401, 402, 405, 409, 410, 411, 413, 437, 496, 528, 572, 573, 652, 921, 969, 974, 976, 978, 980, 981, 984, 986, 987, 990, 992, 994, 996, 997, 1004, 1009, 1010, 1015, 1023, 1024, 1025, 1027, 1028, 1032, 1034, 1036], "handwritten": [36, 68, 167, 220, 225, 227, 233, 259, 299, 300, 322, 323, 369, 402, 409, 440, 495, 534, 537, 542, 559, 681, 682, 683, 684, 685, 697, 698, 710, 729, 783, 785, 841, 853, 862, 872, 885, 977, 983, 1006, 1017], "hierarch": [36, 40, 54, 68, 167, 173, 317, 389, 410, 434, 436, 438, 439, 497, 505, 507, 515, 523, 540, 723, 845, 872, 997, 1001, 1016, 1017, 1022, 1025, 1026, 1038], "coin": [36, 68, 167, 402, 410, 434, 455, 992, 1014], "shift": [36, 44, 68, 167, 179, 224, 251, 286, 300, 303, 404, 408, 433, 441, 451, 454, 462, 505, 508, 682, 686, 838, 861, 990, 1016, 1017, 1022, 1026, 1030], "chanc": [36, 49, 68, 112, 167, 200, 208, 215, 218, 261, 267, 270, 271, 309, 348, 358, 375, 402, 406, 693, 695, 697, 698, 701, 709, 747, 749, 778, 785, 817, 980, 988, 996, 1038], "agglom": [36, 44, 47, 68, 167, 402, 434, 438, 495, 684, 770, 845, 1025], "bisect": [36, 68, 167, 436, 440, 505, 1036], "quantiz": [36, 68, 167, 370, 371, 402, 436, 440, 442, 499, 771, 857, 954, 990], "birch": [36, 44, 68, 167, 317, 364, 389, 439, 442, 505, 1016, 1017, 1026, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "toi": [36, 49, 53, 57, 68, 86, 99, 115, 128, 133, 134, 167, 182, 190, 204, 214, 228, 244, 246, 298, 331, 341, 369, 382, 387, 409, 410, 433, 434, 435, 437, 439, 441, 442, 443, 445, 451, 462, 505, 507, 515, 556, 632, 670, 718, 748, 788, 838, 845, 853, 872, 896, 977, 979, 980, 986, 990, 1017], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 67, 68, 167, 173, 433, 434, 438, 439, 456, 505, 507, 515, 872, 1000, 1014, 1025, 1030, 1033], "dbscan": [36, 44, 55, 65, 68, 167, 319, 387, 389, 439, 443, 445, 448, 505, 697, 698, 710, 729, 783, 785, 844, 872, 983, 1016, 1017, 1022, 1024, 1026, 1027, 1029, 1030, 1031, 1038], "hdbscan": [36, 44, 68, 167, 437, 505, 872, 970, 1000, 1016, 1017, 1038], "optic": [36, 44, 68, 167, 317, 369, 413, 437, 439, 448, 449, 450, 495, 1016, 1017, 1031, 1035, 1036, 1037, 1038], "affin": [36, 44, 68, 167, 303, 368, 378, 389, 401, 407, 433, 434, 438, 445, 447, 455, 505, 528, 684, 688, 697, 698, 710, 729, 783, 785, 888, 974, 977, 980, 1016, 1017, 1022, 1023, 1026, 1032, 1033, 1035, 1037], "propag": [36, 68, 167, 321, 328, 371, 401, 433, 447, 495, 505, 507, 690, 697, 698, 706, 707, 710, 711, 729, 783, 785, 852, 866, 887, 888, 889, 946, 947, 984, 1002, 1016, 1017, 1022, 1034, 1037], "agglomer": [36, 68, 167, 368, 402, 410, 438, 495, 593, 599, 638, 789, 794, 852, 1017], "unstructur": [36, 68, 167, 299, 402, 434, 438, 456, 496, 523, 845, 992, 1004, 1026], "dendrogram": [36, 68, 167, 173, 402, 434, 438, 497, 1034], "pictur": [36, 68, 167, 233, 252, 371, 390, 402, 407, 410, 455, 486, 487, 514, 1001], "greek": [36, 68, 167, 402, 455], "silhouett": [36, 38, 49, 57, 58, 68, 167, 348, 376, 440, 505, 782, 783, 1022, 1026], "embed": [36, 44, 46, 68, 117, 152, 167, 220, 223, 225, 227, 228, 244, 281, 290, 382, 389, 401, 402, 434, 445, 455, 482, 495, 537, 542, 559, 575, 632, 681, 682, 683, 684, 685, 686, 687, 688, 689, 841, 853, 862, 884, 885, 886, 972, 983, 986, 992, 997, 1016, 1017, 1022, 1023, 1033, 1034, 1036], "explor": [37, 115, 116, 225, 226, 262, 263, 269, 270, 310, 315, 334, 348, 358, 370, 373, 375, 382, 396, 402, 409, 465, 789, 792, 800, 873, 969, 976, 977, 979, 985, 987, 988, 990, 1004, 1009, 1015, 1028], "uniformli": [37, 118, 125, 144, 229, 246, 313, 378, 509, 510, 511, 544, 635, 793, 801, 803, 871, 969, 970, 980, 983, 990, 1026, 1031], "divid": [37, 43, 48, 91, 95, 146, 157, 200, 246, 348, 358, 372, 373, 399, 402, 406, 407, 462, 463, 464, 465, 466, 467, 468, 469, 505, 512, 527, 534, 643, 644, 647, 648, 649, 657, 658, 669, 670, 671, 712, 718, 726, 730, 748, 784, 786, 849, 850, 894, 897, 929, 932, 933, 969, 977, 979, 980, 983, 990, 994, 1015, 1022, 1029, 1030, 1033], "randomli": [37, 48, 50, 61, 71, 88, 93, 115, 128, 164, 167, 171, 217, 233, 237, 251, 256, 267, 279, 322, 358, 363, 385, 387, 388, 402, 406, 409, 412, 442, 451, 505, 508, 512, 516, 524, 530, 538, 539, 544, 552, 553, 556, 557, 558, 603, 604, 664, 672, 683, 687, 709, 787, 788, 848, 886, 900, 901, 902, 903, 979, 981, 983, 986, 988, 992, 996, 1013, 1015, 1033, 1037], "quiroz": [37, 57, 118, 179, 184, 262, 264, 308, 347, 348, 349], "fundament": [37, 49, 81, 348, 374, 388, 405, 489, 531, 533, 540, 701, 976, 980], "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 348, 371, 387, 389, 404, 409, 412, 439, 607, 697, 710, 723, 728, 729, 749, 785, 977, 978, 980, 1031], "frequent": [37, 112, 165, 264, 270, 271, 348, 365, 373, 376, 410, 544, 583, 623, 842, 865, 866, 869, 881, 970, 972, 980, 994, 998, 1001], "ari": [37, 58, 348, 402, 698, 1027, 1033], "mutual": [37, 38, 49, 55, 58, 143, 150, 167, 389, 409, 411, 439, 585, 588, 589, 592, 593, 599, 600, 601, 602, 697, 698, 708, 747, 749, 778, 785, 969, 976, 980, 981, 1022, 1028, 1038], "mi": [37, 144, 402, 600, 601, 697, 747, 749, 970, 980, 994], "theoret": [37, 57, 152, 401, 402, 409, 546, 547, 632, 697, 718, 748, 892, 969, 977, 979, 980, 982, 992, 994, 995, 1003, 1004], "nmi": [37, 402, 710, 728, 729, 749], "ami": [37, 49, 58, 402, 697], "score_func": [37, 71, 72, 585, 588, 589, 591, 592, 593, 734, 1022, 1024], "rand_scor": [37, 402, 708, 980, 1034], "adjusted_rand_scor": [37, 38, 49, 58, 348, 402, 697, 708, 734, 749, 778, 980, 1035], "mutual_info_scor": [37, 402, 697, 980, 1030, 1033, 1034], "normalized_mutual_info_scor": [37, 402, 728, 747, 785, 980, 1030, 1036], "adjusted_mutual_info_scor": [37, 38, 49, 58, 402, 698, 708, 747, 749, 778, 980, 1022, 1030, 1034, 1038], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 61, 176, 348], "seaborn": [37, 111, 113, 169, 170, 179, 184, 251, 261, 284, 376, 392, 395, 1000], "sn": [37, 111, 113, 169, 170, 179, 184, 251, 261, 284], "color_palett": [37, 111, 113, 251], "colorblind": [37, 111, 113], "vx": 37, "errorbar": [37, 61, 79, 81, 148, 158, 159, 283, 325, 337, 795, 811], "refer": [37, 38, 60, 63, 71, 126, 132, 149, 161, 218, 236, 268, 291, 303, 313, 314, 315, 316, 317, 318, 319, 348, 363, 365, 374, 376, 377, 378, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 396, 403, 413, 414, 415, 430, 431, 432, 433, 435, 437, 439, 440, 441, 443, 444, 445, 446, 447, 450, 455, 456, 457, 460, 461, 462, 465, 466, 467, 468, 491, 496, 504, 506, 508, 509, 510, 511, 512, 513, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 537, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 583, 586, 587, 588, 595, 600, 601, 603, 604, 607, 612, 615, 616, 620, 621, 624, 625, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 640, 642, 644, 646, 648, 649, 651, 654, 656, 658, 659, 660, 661, 664, 666, 668, 669, 671, 672, 675, 676, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 697, 698, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 726, 727, 728, 729, 730, 732, 733, 735, 748, 750, 751, 761, 775, 777, 778, 780, 781, 782, 783, 785, 787, 788, 789, 791, 792, 793, 795, 803, 811, 812, 813, 814, 815, 816, 817, 819, 822, 823, 827, 828, 829, 831, 837, 838, 839, 841, 848, 849, 850, 858, 859, 868, 869, 873, 880, 885, 886, 887, 888, 889, 890, 892, 894, 895, 897, 898, 900, 901, 902, 903, 917, 929, 946, 991, 1001, 1006, 1010, 1014, 1015, 1022, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "satur": [37, 170, 303], "uniform_labelings_scor": 37, "nwith": [37, 57, 61, 148, 348], "constantli": [37, 200, 1004], "unbound": [37, 979, 1036], "cardin": [37, 119, 120, 126, 172, 309, 310, 319, 402, 409, 456, 546, 547, 550, 551, 552, 553, 557, 558, 559, 672, 865, 866, 873, 900, 901, 902, 903, 980, 981, 988, 990, 1036, 1037], "why": [37, 52, 95, 112, 118, 170, 172, 176, 189, 258, 261, 347, 348, 376, 384, 389, 402, 404, 407, 413, 437, 440, 444, 980, 982, 995, 1010, 1013, 1025], "chart": [37, 266, 981, 1008, 1025], "henc": [37, 60, 72, 170, 204, 233, 270, 334, 347, 348, 362, 371, 378, 380, 382, 389, 402, 406, 409, 410, 480, 501, 532, 534, 535, 536, 556, 583, 636, 639, 645, 653, 655, 665, 680, 697, 698, 702, 708, 723, 749, 778, 785, 808, 809, 827, 828, 829, 830, 831, 867, 977, 979, 980, 981, 986, 987, 990, 1001, 1029, 1030, 1033, 1034, 1036], "safe": [37, 170, 189, 236, 348, 376, 378, 402, 403, 427, 501, 502, 581, 584, 766, 770, 886, 946, 952, 983, 1028, 1029, 1030, 1035, 1036], "stabil": [37, 116, 170, 222, 266, 303, 348, 389, 399, 439, 643, 647, 663, 830, 849, 850, 868, 880, 928, 970, 976, 979, 990, 1001, 1006, 1022, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "mislead": [37, 119, 120, 126, 170, 377, 391, 409, 546, 547, 550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 1017, 1035], "meaning": [37, 226, 290, 349, 399, 406, 410, 411, 412, 541, 721, 722, 730, 775, 776, 779, 841, 984, 994, 995, 1022, 1038], "plot_adjusted_for_chance_measur": [37, 68], "brendan": [38, 433, 447, 1038], "frei": [38, 433, 447, 1032], "delbert": [38, 433, 447], "dueck": [38, 433, 447], "messag": [38, 44, 62, 70, 95, 236, 347, 348, 371, 374, 375, 376, 380, 381, 384, 385, 402, 433, 447, 461, 532, 536, 541, 567, 620, 705, 789, 792, 793, 795, 803, 811, 816, 819, 821, 841, 849, 850, 890, 911, 912, 913, 916, 919, 943, 964, 980, 990, 1022, 1026, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "feb": [38, 433, 447], "affinitypropag": [38, 44, 317, 402, 1022, 1025, 1026, 1030, 1033, 1035, 1036, 1037, 1038], "labels_tru": [38, 49, 55, 64, 402, 697, 698, 707, 708, 710, 723, 728, 729, 747, 749, 778, 785], "af": 38, "prefer": [38, 44, 55, 252, 270, 303, 358, 362, 363, 364, 374, 376, 377, 378, 389, 402, 406, 407, 409, 410, 433, 447, 464, 465, 471, 480, 501, 502, 620, 625, 626, 647, 651, 652, 694, 718, 720, 749, 750, 841, 867, 892, 893, 934, 946, 969, 972, 974, 976, 980, 985, 995, 996, 1000, 1013, 1023, 1029, 1031, 1035, 1036], "cluster_centers_indic": [38, 447], "cluster_centers_indices_": [38, 433], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 317, 319, 348, 376, 389, 402, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 448, 1014, 1027], "n_clusters_": [38, 49, 55, 63, 434, 438], "homogeneity_scor": [38, 49, 58, 348, 402, 710, 728, 785, 980], "completeness_scor": [38, 49, 58, 314, 348, 402, 728, 729, 785, 980], "silhouette_scor": [38, 49, 58, 60, 348, 376, 402, 1022, 1026, 1028, 1030, 1032, 1036], "sqeuclidean": [38, 443, 450, 770, 771, 772], "872": [38, 988], "912": [38, 157, 162], "871": [38, 80, 81, 305, 311, 404, 467], "753": [38, 207, 219, 347], "cycler": 38, "viridi": [38, 281, 690], "class_memb": 38, "cluster_cent": [38, 61, 63, 64, 454], "319": [38, 68, 153, 1015], "plot_affinity_propag": [38, 68, 433, 447], "impos": [39, 57, 129, 194, 204, 309, 387, 402, 407, 409, 410, 520, 650, 976], "simpli": [39, 86, 130, 152, 160, 225, 237, 270, 294, 315, 316, 362, 371, 376, 378, 381, 387, 389, 404, 405, 406, 407, 409, 410, 478, 688, 754, 757, 859, 931, 972, 980, 981, 982, 983, 994, 1007, 1015, 1029, 1030, 1031], "There": [39, 46, 118, 152, 218, 225, 236, 239, 252, 256, 258, 261, 347, 369, 371, 373, 376, 377, 378, 381, 387, 389, 390, 392, 399, 401, 402, 407, 409, 410, 411, 439, 445, 455, 527, 546, 547, 552, 553, 581, 582, 584, 599, 638, 970, 976, 977, 978, 979, 980, 983, 987, 990, 994, 995, 996, 999, 1003, 1014, 1022, 1030], "singl": [39, 48, 52, 53, 55, 58, 61, 62, 72, 110, 112, 113, 121, 122, 123, 131, 136, 149, 152, 158, 164, 167, 171, 173, 176, 184, 200, 202, 204, 240, 242, 251, 257, 270, 299, 317, 319, 334, 347, 348, 349, 353, 355, 358, 362, 363, 370, 371, 376, 381, 383, 384, 385, 387, 388, 389, 400, 401, 403, 405, 406, 407, 409, 410, 411, 427, 430, 433, 434, 438, 439, 440, 442, 447, 457, 459, 460, 486, 487, 489, 499, 502, 527, 546, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 575, 585, 592, 593, 595, 599, 620, 625, 627, 636, 659, 660, 666, 669, 670, 671, 683, 685, 687, 703, 714, 715, 716, 717, 728, 729, 730, 733, 766, 777, 787, 788, 789, 792, 793, 803, 810, 814, 815, 817, 818, 821, 829, 832, 833, 837, 849, 850, 851, 861, 862, 865, 866, 867, 872, 873, 887, 888, 900, 901, 902, 903, 908, 944, 948, 967, 969, 975, 976, 977, 980, 981, 983, 985, 987, 988, 990, 994, 995, 996, 1000, 1004, 1006, 1013, 1015, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "unstabl": [39, 66, 170, 402, 404, 405, 682, 686, 928, 929, 996, 1026, 1027, 1029, 1034, 1036], "quickli": [39, 240, 298, 313, 373, 376, 377, 406, 409, 685, 976, 983, 984, 1004, 1015, 1033], "fight": [39, 204, 1004], "percol": 39, "distanc": [39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 149, 164, 167, 173, 186, 201, 221, 223, 226, 233, 281, 283, 284, 289, 291, 293, 294, 303, 308, 313, 317, 318, 347, 348, 362, 373, 385, 387, 389, 399, 402, 404, 407, 408, 412, 413, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 448, 449, 450, 451, 452, 454, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 531, 533, 540, 600, 601, 608, 612, 613, 615, 616, 621, 651, 652, 659, 661, 667, 668, 669, 670, 671, 681, 682, 683, 685, 686, 687, 688, 689, 692, 696, 717, 726, 750, 752, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 770, 771, 772, 773, 782, 783, 786, 821, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 871, 886, 890, 892, 894, 896, 897, 898, 900, 901, 902, 903, 970, 974, 977, 978, 980, 986, 990, 992, 994, 995, 1001, 1013, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "merg": [39, 41, 46, 51, 316, 374, 376, 379, 384, 387, 390, 402, 433, 434, 435, 438, 439, 456, 809, 1014, 1022, 1029], "exagger": [39, 170, 685, 977], "behaviour": [39, 100, 201, 202, 218, 336, 376, 389, 402, 409, 552, 553, 557, 558, 595, 890, 900, 901, 953, 969, 970, 980, 990, 1030, 1033, 1034, 1037, 1038], "shortest": [39, 381, 385, 681, 934, 977, 1035], "mechan": [39, 236, 343, 347, 363, 376, 378, 402, 410, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 978, 996, 1004], "resembl": [39, 204], "brittl": [39, 402], "pronounc": [39, 40, 52, 157], "kneighbors_graph": [39, 44, 62, 67, 281, 389, 402, 434, 438, 834, 835, 836, 838, 840, 842, 843, 844, 846, 983, 1022, 1026, 1031], "geometri": [39, 402, 977, 983], "instabl": [39, 170, 291, 445, 528, 532, 536, 688, 1029, 1032, 1035], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 389, 402, 433, 435, 438, 1014, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1037], "1500": [39, 50, 57, 62, 67, 92, 221, 225, 246], "knn_graph": 39, "include_self": [39, 44, 67, 845, 846, 1026], "plot_agglomerative_clust": [39, 68], "waveform": 40, "euclidean": [40, 57, 58, 186, 233, 281, 289, 313, 318, 348, 399, 401, 402, 407, 408, 409, 410, 412, 433, 434, 437, 438, 439, 443, 445, 450, 453, 456, 524, 530, 582, 608, 612, 615, 616, 669, 671, 683, 685, 688, 689, 692, 754, 755, 761, 762, 763, 764, 770, 771, 772, 773, 782, 783, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 886, 970, 974, 978, 981, 983, 992, 1001, 1026, 1029, 1030, 1031, 1032, 1038], "cityblock": [40, 44, 402, 443, 450, 754, 770, 771, 772, 983], "invari": [40, 373, 389, 402, 412, 607, 682, 739, 807, 808, 976, 977, 980, 995, 1001, 1030, 1033, 1034, 1035], "ie": [40, 66, 96, 433, 697, 760, 976, 990], "inter": [40, 119, 358, 409, 709, 935], "character": [40, 218, 352, 402, 406, 977], "ill": [40, 82, 205, 464, 465, 471, 643, 644, 647, 648, 649, 675, 676, 976, 979, 1014, 1032], "recov": [40, 65, 82, 96, 97, 103, 122, 152, 169, 184, 199, 200, 204, 221, 349, 404, 408, 411, 414, 453, 526, 552, 976, 977, 979, 1001, 1014, 1028], "put": [40, 58, 141, 152, 154, 234, 241, 246, 297, 305, 317, 327, 338, 339, 344, 364, 378, 380, 381, 384, 412, 436, 440, 452, 508, 607, 640, 654, 787, 869, 873, 881, 894, 895, 896, 897, 898, 919, 970, 977, 979, 980, 981, 987, 990, 1003, 1007, 1009, 1015, 1034], "cc": [40, 374], "patheffect": 40, "pairwise_dist": [40, 389, 402, 413, 434, 437, 438, 439, 443, 450, 681, 689, 754, 763, 771, 772, 782, 783, 836, 838, 840, 844, 978, 1022, 1026, 1028, 1030, 1031, 1033, 1034], "sqr": 40, "sign": [40, 79, 86, 96, 99, 114, 184, 251, 297, 342, 376, 402, 407, 410, 537, 575, 582, 599, 628, 629, 651, 652, 659, 661, 667, 668, 669, 670, 727, 734, 892, 896, 927, 929, 945, 976, 980, 985, 990, 994, 995, 1014, 1022, 1026, 1031, 1035, 1037], "phi": [40, 407, 735, 858, 972, 980, 990, 995], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 62, 63, 229], "f781bf": [40, 44, 62, 63], "set_label": [40, 155, 233], "avg_dist": [40, 773], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 66], "cividi": 40, "vmin": [40, 82, 95, 98, 106, 155, 158, 179, 184, 191, 216, 234, 250, 256, 299, 334], "45": [40, 64, 73, 145, 157, 172, 189, 200, 218, 268, 272, 273, 323, 334, 358, 406, 409, 410, 557, 558, 620, 627, 780, 787, 896, 970, 980, 988, 999, 1011, 1018, 1022, 1025], "interclass": 40, "149": [40, 62, 68, 981, 1022], "plot_agglomerative_clustering_metr": [40, 68], "hierarchi": [41, 173, 376, 443, 449, 456, 985, 1014], "plot_dendrogram": 41, "kwarg": [41, 98, 236, 378, 383, 416, 420, 424, 431, 435, 441, 443, 457, 462, 528, 531, 533, 556, 610, 624, 639, 640, 645, 646, 653, 654, 655, 656, 670, 674, 677, 691, 692, 693, 695, 734, 832, 833, 851, 852, 856, 896, 907, 926, 940, 1029, 1033, 1035, 1039], "children_": [41, 434, 438, 456], "current_count": 41, "child_idx": 41, "leaf": [41, 117, 128, 130, 352, 356, 402, 409, 413, 434, 435, 436, 437, 438, 439, 443, 450, 456, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 900, 901, 902, 903, 904, 905, 983, 996, 1025, 1027, 1029, 1033, 1036], "linkage_matrix": 41, "column_stack": [41, 297, 305], "distances_": [41, 434, 438, 1034], "distance_threshold": [41, 434, 438, 1031, 1034], "truncate_mod": 41, "parenthesi": [41, 376], "plot_agglomerative_dendrogram": [41, 68], "scalabl": [42, 44, 62, 167, 175, 177, 254, 277, 318, 348, 376, 402, 409, 410, 441, 484, 495, 582, 633, 795, 806, 816, 818, 830, 853, 862, 864, 892, 894, 897, 898, 972, 975, 977, 980, 993, 995, 1004, 1022, 1025, 1026, 1032, 1033, 1036, 1037], "hundr": [42, 124, 222, 307, 371, 406, 409, 554, 555, 977, 1033], "thousand": [42, 118, 233, 235, 307, 348, 371, 402, 409, 849, 850, 897, 977, 1015, 1031, 1033], "million": [42, 56, 157, 176, 410, 412, 685, 977, 995, 1004, 1036, 1037], "chose": [42, 170, 1010], "usag": [42, 53, 71, 74, 85, 99, 109, 123, 146, 170, 171, 230, 234, 236, 255, 284, 290, 292, 299, 330, 349, 362, 375, 376, 378, 379, 383, 384, 386, 389, 390, 392, 402, 406, 407, 412, 413, 437, 439, 443, 482, 554, 555, 602, 641, 651, 652, 653, 659, 661, 662, 669, 670, 671, 672, 673, 770, 773, 782, 783, 892, 900, 901, 902, 903, 929, 969, 972, 979, 980, 981, 983, 995, 1002, 1006, 1010, 1017, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "enjoi": 42, "edit": [42, 373, 375, 376, 379, 380, 384, 387, 392, 523, 527, 822, 974, 976, 981, 987, 1015], "158": [42, 101, 107, 409, 662], "manojkumarsivaraj334": 42, "joblib": [42, 54, 72, 118, 281, 314, 371, 374, 376, 379, 385, 387, 389, 392, 395, 396, 401, 403, 413, 430, 434, 437, 438, 439, 441, 443, 445, 450, 451, 454, 457, 460, 465, 501, 524, 528, 529, 530, 532, 535, 536, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 587, 595, 603, 625, 627, 632, 640, 644, 646, 648, 650, 651, 652, 654, 656, 658, 659, 661, 669, 672, 681, 682, 683, 684, 685, 686, 687, 766, 770, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 834, 835, 838, 840, 842, 843, 845, 846, 851, 852, 853, 854, 887, 888, 946, 947, 948, 950, 965, 980, 1001, 1022, 1023, 1025, 1027, 1029, 1030, 1031, 1033, 1034, 1037], "cpu_count": [42, 118, 281, 948], "n_center": [42, 505], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 58, 167, 282, 295, 306, 317, 348, 372, 402, 435, 436, 439, 440, 441, 442, 445, 452, 453, 455, 497, 542, 624, 839, 1002, 1017, 1022, 1026, 1029, 1034, 1038], "subcluster_centers_": [42, 435], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 64], "256": [42, 48, 53, 124, 309, 363, 371, 402, 409, 442, 461, 530, 539, 556, 848, 880, 890, 1015, 1036], "max_no_improv": [42, 61, 64, 442, 530, 531, 532, 539, 1036, 1037], "t_mini_batch": [42, 64], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 317, 348, 433, 436, 440, 441, 442, 1014], "545": [42, 68], "plot_birch_vs_minibatchkmean": [42, 68], "bisectingkmean": [43, 402, 1036, 1037, 1038], "__doc__": [43, 75, 157, 239, 249, 389], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 62], "variant": [43, 95, 163, 166, 167, 261, 316, 317, 348, 349, 382, 402, 405, 407, 410, 412, 442, 453, 483, 486, 487, 505, 508, 536, 552, 553, 558, 608, 612, 615, 616, 620, 623, 631, 632, 634, 638, 665, 697, 790, 794, 796, 797, 798, 807, 814, 835, 853, 889, 970, 976, 977, 978, 979, 980, 982, 983, 994, 1001, 1015, 1022, 1030], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 376, 384, 827, 828, 829, 830, 831, 1025, 1030, 1038], "flat": [43, 95, 101, 171, 221, 222, 223, 259, 402, 410, 433, 439, 441, 454, 502, 987, 1014, 1022, 1023, 1038], "label_out": 43, "989": [43, 68], "plot_bisect_kmean": [43, 68], "null": [44, 71, 170, 171, 172, 261, 267, 402, 406, 641, 662, 673, 697, 723, 749, 785, 817, 976, 977, 980, 995, 1032], "mismatch": [44, 979, 1031], "warn": [44, 53, 62, 72, 200, 215, 236, 264, 281, 298, 299, 306, 307, 313, 362, 365, 376, 379, 380, 381, 389, 396, 410, 440, 442, 452, 489, 531, 533, 540, 543, 546, 547, 550, 551, 552, 553, 557, 558, 559, 564, 565, 566, 567, 568, 569, 571, 595, 629, 663, 683, 686, 687, 705, 706, 721, 722, 730, 775, 776, 779, 827, 828, 829, 831, 856, 857, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 912, 913, 919, 929, 946, 950, 966, 967, 969, 980, 990, 1013, 1022, 1024, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "noisy_circl": [44, 62], "noisy_moon": [44, 62], "no_structur": [44, 62], "anisotropicli": [44, 62], "170": [44, 57, 58, 62, 382], "x_aniso": [44, 57, 62], "aniso": [44, 62], "plot_num": [44, 62, 229], "default_bas": [44, 62], "quantil": [44, 53, 63, 91, 112, 114, 167, 178, 219, 303, 306, 307, 387, 409, 431, 432, 451, 512, 545, 553, 555, 650, 663, 715, 737, 740, 742, 815, 857, 869, 870, 871, 881, 882, 980, 990, 1002, 1017, 1022, 1026, 1029, 1031, 1035, 1036, 1038], "damp": [44, 402, 433, 447], "min_sampl": [44, 49, 65, 387, 389, 402, 413, 437, 439, 443, 449, 450, 664, 976, 1031, 1035], "xi": [44, 65, 373, 402, 405, 410, 443, 449, 502, 994, 1033], "min_cluster_s": [44, 65, 319, 402, 439, 443, 449, 1031], "allow_single_clust": [44, 439], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "220": [44, 149, 1022], "i_dataset": [44, 62, 229], "algo_param": [44, 62], "param": [44, 55, 61, 62, 71, 124, 126, 127, 221, 235, 236, 259, 261, 269, 273, 285, 298, 376, 378, 389, 409, 412, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 801, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 1028, 1032, 1033, 1035, 1036, 1039], "estimate_bandwidth": [44, 63, 402, 441, 454], "symmetr": [44, 125, 173, 202, 389, 400, 402, 445, 455, 456, 467, 512, 520, 522, 683, 687, 688, 697, 698, 708, 709, 710, 716, 720, 728, 729, 747, 749, 755, 777, 785, 787, 788, 966, 969, 976, 980, 983], "meanshift": [44, 317, 402, 433, 1025, 1026, 1027, 1030, 1032, 1033, 1036, 1037, 1038], "bin_seed": [44, 63, 441, 454, 1033], "two_mean": 44, "spectralclust": [44, 317, 402, 433, 983, 1022, 1023, 1032, 1034, 1035, 1036, 1037, 1038], "nearest_neighbor": [44, 445, 684], "average_linkag": 44, "gmm": [44, 167, 245, 247, 250, 251, 252, 253, 497, 505, 788, 808, 979, 1022, 1023, 1026, 1027, 1028], "gaussianmixtur": [44, 57, 247, 248, 249, 250, 251, 252, 408, 787, 1028, 1030, 1031, 1035, 1036, 1039], "covariance_typ": [44, 247, 248, 250, 251, 252, 787, 788, 1039], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 62, 299, 384, 385], "catch_warn": [44, 62, 236, 298, 299], "filterwarn": [44, 62, 215, 298, 299, 376, 990], "fulli": [44, 55, 119, 125, 362, 370, 371, 389, 402, 408, 409, 411, 436, 440, 550, 551, 557, 558, 900, 901, 902, 903, 904, 906, 969, 970, 976, 985, 993, 1000, 1035, 1036], "t1": [44, 46, 62, 215, 223, 226, 229], "ff7f00": [44, 62, 229], "4daf4a": [44, 62], "a65628": [44, 62], "984ea3": [44, 62], "999999": [44, 62], "e41a1c": [44, 62], "dede00": [44, 62, 63], "000000": [44, 170, 189, 218, 261, 307, 729], "transax": [44, 62, 225, 229, 248, 289, 305], "209": [44, 68, 733, 868], "plot_cluster_comparison": [44, 68], "bad": [45, 60, 61, 153, 170, 347, 358, 376, 402, 412, 685, 738, 969, 976, 977, 982, 988, 1014, 1022], "eight": [45, 1015], "deliv": [45, 362, 1004], "though": [45, 55, 118, 149, 176, 179, 267, 286, 305, 307, 348, 349, 358, 362, 370, 373, 376, 378, 388, 389, 402, 407, 408, 409, 410, 411, 692, 796, 798, 892, 969, 970, 972, 977, 980, 983, 990, 994, 1015, 1030], "3d": [45, 48, 67, 90, 101, 102, 197, 221, 223, 225, 410, 499, 579, 943, 1029, 1030, 1032], "mplot3d": [45, 67, 90, 101, 102, 171, 197, 221, 223], "noqa": [45, 67, 90, 101, 102, 125, 149, 164, 165, 171, 197, 221, 223, 272, 273, 315, 347, 380, 572, 573, 620, 792, 793, 969, 1031], "f401": [45, 67, 90, 101, 102, 171, 197, 221, 223], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 132, 170, 236, 238, 305, 315, 358, 396, 409, 555, 727, 857, 969, 980, 990, 994, 1033, 1034], "elev": [45, 67, 90, 101, 102, 171, 197, 221, 225], "azim": [45, 67, 90, 101, 102, 171, 197, 221, 225], "134": [45, 53, 102, 124, 261, 1025], "xaxi": [45, 90, 101, 102, 118, 197, 221, 223, 226, 281, 286, 347], "set_ticklabel": [45, 90, 101, 102, 197, 347], "zaxi": [45, 90, 101, 102, 197, 221], "petal": [45, 90, 104, 106, 121, 243, 315, 318, 373, 403, 905, 996, 1012, 1013], "sepal": [45, 90, 104, 106, 121, 154, 183, 243, 315, 318, 331, 373, 990, 1012, 1013], "length": [45, 70, 89, 90, 92, 104, 106, 121, 149, 152, 153, 154, 157, 158, 160, 176, 183, 236, 237, 240, 243, 315, 318, 331, 349, 369, 373, 376, 384, 385, 389, 403, 407, 409, 410, 412, 438, 483, 501, 502, 505, 508, 516, 544, 556, 574, 575, 582, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 625, 639, 640, 643, 644, 645, 646, 647, 649, 650, 653, 654, 655, 656, 674, 677, 773, 789, 792, 793, 803, 818, 820, 823, 824, 826, 834, 835, 836, 838, 840, 879, 905, 912, 914, 918, 934, 935, 951, 954, 979, 986, 990, 1006, 1012, 1013, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1038], "set_zlabel": [45, 90, 197], "setosa": [45, 90, 102, 104, 270, 271, 373, 497, 1006, 1013], "versicolour": [45, 90, 102, 104, 373, 1013], "virginica": [45, 90, 102, 104, 270, 271, 373, 497, 980, 1013], "text3d": [45, 102], "309": [45, 68], "plot_cluster_iri": [45, 68], "voxel": [46, 66, 578], "multipl": [46, 69, 76, 92, 105, 112, 118, 120, 121, 167, 170, 194, 234, 261, 273, 283, 313, 319, 362, 363, 364, 370, 372, 373, 376, 378, 379, 380, 381, 387, 389, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 437, 453, 457, 459, 460, 462, 467, 481, 484, 485, 488, 489, 490, 496, 497, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 544, 546, 547, 548, 549, 552, 553, 554, 555, 556, 574, 592, 600, 601, 603, 604, 620, 625, 627, 632, 633, 634, 635, 639, 640, 643, 645, 646, 647, 650, 653, 654, 655, 656, 659, 660, 661, 664, 666, 669, 671, 672, 682, 683, 685, 686, 687, 714, 715, 720, 737, 738, 740, 742, 743, 745, 777, 780, 783, 787, 788, 789, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 814, 815, 816, 818, 822, 823, 824, 825, 826, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 854, 857, 869, 873, 881, 884, 885, 892, 893, 894, 897, 908, 923, 928, 929, 951, 954, 972, 975, 976, 977, 981, 982, 983, 987, 988, 993, 994, 996, 1000, 1001, 1006, 1015, 1022, 1023, 1025, 1028, 1029, 1032, 1033, 1034, 1035, 1037, 1038], "partli": [46, 761], "procedur": [46, 56, 118, 125, 149, 180, 188, 251, 263, 306, 310, 334, 347, 358, 376, 378, 387, 388, 389, 390, 400, 401, 404, 406, 407, 409, 411, 524, 530, 531, 533, 538, 539, 540, 546, 547, 548, 549, 552, 553, 586, 588, 595, 602, 637, 665, 667, 680, 720, 777, 849, 850, 869, 881, 951, 969, 976, 982, 988, 990, 993, 994, 995, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "solut": [46, 179, 184, 189, 191, 205, 214, 229, 235, 316, 334, 374, 378, 389, 399, 402, 404, 406, 407, 410, 411, 412, 442, 444, 446, 524, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 603, 639, 641, 643, 645, 647, 648, 649, 651, 653, 655, 657, 658, 659, 660, 661, 662, 665, 667, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 787, 788, 803, 841, 849, 850, 973, 974, 976, 977, 979, 984, 986, 994, 995, 999, 1004, 1010, 1013, 1015, 1022, 1025, 1035, 1036, 1037], "closest": [46, 64, 204, 378, 402, 433, 435, 436, 440, 441, 442, 452, 646, 771, 772, 822, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 971, 974, 981, 983, 1013], "partit": [46, 66, 70, 128, 130, 261, 299, 389, 399, 400, 402, 406, 409, 442, 444, 446, 455, 504, 550, 551, 552, 553, 556, 557, 558, 697, 698, 708, 778, 840, 900, 901, 902, 903, 979, 983, 986, 990, 996, 1015], "cluster_qr": [46, 402, 445, 455, 1036], "qr": [46, 202, 398, 527, 534, 537, 928, 929, 977, 1028, 1039], "pivot": [46, 272, 273], "cheung": [46, 1023], "andrew": [46, 402, 455, 684, 688, 710, 729, 785, 867, 984, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "knyazev": [46, 402, 445, 455, 688, 1032, 1035, 1036], "ucdenv": 46, "skimag": [46, 47, 370, 1014], "spectral_clust": [46, 66, 1030, 1032, 1034, 1035, 1036, 1037], "orig_coin": [46, 47], "speed": [46, 47, 57, 70, 98, 109, 118, 165, 171, 186, 189, 193, 239, 281, 315, 323, 347, 349, 364, 365, 376, 379, 385, 387, 389, 400, 402, 407, 409, 410, 413, 436, 437, 440, 441, 442, 443, 445, 450, 452, 453, 454, 455, 524, 525, 603, 620, 625, 626, 627, 632, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 674, 677, 685, 787, 788, 795, 816, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 867, 929, 969, 977, 979, 981, 994, 1004, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "down": [46, 47, 81, 112, 215, 216, 223, 233, 234, 236, 264, 300, 303, 358, 370, 379, 384, 404, 407, 436, 443, 449, 583, 586, 587, 632, 642, 766, 770, 773, 867, 870, 871, 882, 894, 897, 904, 976, 1006, 1014, 1030], "alias": [46, 47, 236, 374, 376, 379, 393, 440, 452, 1022, 1026, 1036], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 1014], "anti_alias": [46, 47, 1014], "img_to_graph": [46, 66, 410, 1025, 1035], "exponenti": [46, 75, 152, 157, 286, 291, 408, 409, 412, 442, 529, 547, 552, 607, 612, 615, 632, 636, 750, 751, 832, 833, 837, 849, 850, 867, 972, 976, 980, 995, 1013, 1029, 1035], "beta": [46, 85, 169, 204, 382, 400, 402, 405, 529, 531, 533, 540, 637, 721, 722, 728, 734, 775, 785, 787, 980, 1013, 1024, 1027, 1029, 1031, 1032], "voronoi": [46, 66, 402], "n_region": 46, "extra": [46, 121, 238, 281, 349, 374, 375, 377, 380, 389, 409, 410, 431, 436, 440, 452, 457, 525, 550, 551, 559, 583, 584, 693, 694, 695, 813, 836, 902, 903, 919, 979, 980, 983, 1022, 1025, 1027, 1028, 1030, 1035, 1037], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 445, 455, 681, 684, 688, 1032, 1035, 1036, 1037], "amg": [46, 66, 402, 445, 455, 684, 688, 1032, 1036, 1037], "pyamg": [46, 392, 395, 402, 445, 455, 684, 688], "toler": [46, 73, 164, 191, 193, 216, 217, 349, 371, 378, 385, 402, 414, 436, 440, 445, 452, 455, 464, 465, 471, 475, 476, 477, 524, 525, 526, 528, 529, 533, 534, 535, 536, 537, 538, 540, 541, 552, 553, 554, 555, 620, 639, 640, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 669, 671, 672, 674, 675, 676, 677, 681, 682, 683, 684, 686, 687, 688, 832, 833, 837, 841, 849, 850, 887, 888, 892, 893, 894, 895, 896, 897, 898, 966, 976, 980, 994, 995, 1011, 1034, 1035, 1036, 1037], "eigen_tol": [46, 445, 455, 684, 688, 1023, 1036, 1037], "todo": [46, 233, 380, 384, 389, 402, 1039], "21243": 46, "assign_label": [46, 402, 445, 455], "individu": [46, 60, 80, 110, 115, 132, 136, 144, 161, 167, 168, 174, 200, 218, 230, 264, 266, 313, 342, 363, 377, 380, 383, 385, 389, 391, 399, 403, 406, 409, 410, 430, 445, 455, 457, 489, 494, 496, 502, 548, 549, 552, 553, 555, 556, 558, 560, 561, 562, 563, 596, 602, 603, 625, 626, 636, 638, 650, 651, 652, 661, 664, 665, 666, 667, 668, 669, 670, 671, 680, 705, 712, 720, 726, 742, 743, 777, 789, 803, 820, 824, 825, 827, 828, 829, 830, 831, 850, 853, 861, 862, 864, 865, 866, 869, 871, 872, 877, 878, 879, 892, 893, 980, 981, 990, 995, 1010, 1015, 1017, 1023, 1026, 1028, 1034, 1036, 1038], "comment": [46, 347, 374, 375, 376, 377, 379, 380, 384, 480, 572, 980], "paus": 46, "21194": [46, 1035], "890": [46, 68, 259], "plot_coin_segment": [46, 68], "spatial": [47, 49, 55, 173, 184, 217, 299, 371, 389, 402, 413, 437, 439, 443, 445, 450, 672, 685, 752, 755, 770, 771, 772, 773, 782, 783, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 976, 983, 990, 1024, 1028, 1035, 1038], "constrain": [47, 95, 122, 129, 171, 191, 297, 314, 332, 334, 369, 389, 401, 402, 407, 409, 502, 554, 555, 628, 651, 652, 683, 687, 817, 976, 979, 1026], "piec": [47, 201, 363, 979], "grid_to_graph": [47, 51, 54, 402, 410, 1014, 1035], "st": [47, 67, 261, 318, 1025, 1028, 1030], "161": [47, 215, 219], "4697": 47, "333": [47, 68, 834], "plot_coin_ward_segment": [47, 68], "vq": [48, 58], "palac": 48, "china": [48, 402, 499, 500, 577], "615": 48, "literatur": [48, 157, 261, 348, 373, 376, 382, 384, 387, 388, 402, 405, 407, 409, 436, 440, 442, 494, 529, 531, 533, 540, 548, 549, 581, 584, 701, 787, 969, 972, 976, 980, 1032], "codebook": [48, 559, 822], "palett": [48, 170, 261, 284], "byte": [48, 53, 410, 480, 496, 501, 502, 575, 581, 582, 584, 945, 1013, 1015, 1022, 1029, 1030, 1037], "wherea": [48, 53, 67, 80, 111, 128, 214, 262, 263, 264, 270, 308, 343, 364, 390, 406, 409, 437, 558, 651, 652, 791, 807, 820, 972, 979, 981, 983, 990, 996, 1035], "rgb": [48, 371, 410, 486, 487, 576, 577, 580], "gif": 48, "pick": [48, 55, 60, 173, 237, 269, 317, 322, 371, 376, 380, 402, 409, 436, 453, 516, 666, 902, 903, 969, 976, 977, 979, 994, 1033], "017": [48, 327, 328, 382, 464, 465], "040": 48, "085": 48, "robertlayton": 48, "load_sample_imag": [48, 576, 577, 1031], "pairwise_distances_argmin": [48, 64, 317, 772, 1030, 1036, 1037, 1038], "n_color": 48, "photo": 48, "jpg": [48, 499, 577], "255": [48, 98, 281, 293, 295, 299, 309, 316, 371, 486, 487, 554, 555], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 240], "book": [48, 70, 436, 440, 442, 822, 827, 831, 976, 977, 978, 981, 998, 1034], "alongsid": [48, 376, 382, 389, 392, 411, 980, 987, 1000, 1001], "525": [48, 68, 432, 621, 970], "plot_color_quant": [48, 68], "750": [49, 55, 120, 261], "math": [49, 70, 149, 239, 261, 262, 373, 392, 756], "db": [49, 55, 402], "n_noise_": 49, "come": [49, 67, 70, 80, 86, 100, 101, 149, 152, 234, 313, 342, 347, 348, 362, 364, 369, 373, 376, 377, 380, 384, 387, 389, 392, 402, 406, 409, 410, 432, 443, 449, 465, 543, 698, 785, 810, 894, 897, 969, 970, 974, 977, 979, 983, 986, 995, 1006, 1022, 1033, 1036, 1038], "handi": [49, 71, 348, 349, 377, 1038], "883": 49, "917": 49, "916": 49, "626": [49, 186], "unique_label": [49, 55, 348, 378, 385], "core_samples_mask": 49, "zeros_lik": [49, 202, 270], "bool": [49, 66, 81, 165, 218, 356, 376, 414, 415, 416, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 512, 515, 516, 517, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 693, 695, 696, 700, 701, 702, 704, 705, 706, 707, 718, 719, 720, 721, 722, 723, 730, 733, 734, 742, 743, 746, 748, 753, 755, 759, 760, 761, 766, 770, 774, 775, 776, 777, 779, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 803, 807, 808, 811, 812, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 923, 929, 930, 942, 945, 951, 953, 961, 966, 967, 968, 970, 1031, 1034, 1035], "core_sample_indices_": [49, 437], "class_member_mask": 49, "markerfacecolor": [49, 55, 61, 63, 64], "177": [49, 68, 382], "plot_dbscan": [49, 68, 413, 437], "constitut": [50, 389, 406, 409, 443, 449, 581, 582, 584, 984], "standpoint": 50, "proce": [50, 146, 181, 374, 380, 405, 406, 409, 433, 976], "reassign": [50, 376, 440, 442, 1023, 1027], "success": [50, 167, 254, 268, 277, 358, 397, 402, 406, 407, 409, 508, 557, 572, 789, 792, 793, 810, 897, 983, 1004, 1010, 1014, 1017, 1034], "becom": [50, 55, 57, 72, 80, 202, 204, 236, 263, 281, 304, 308, 334, 347, 358, 370, 376, 378, 380, 384, 389, 390, 402, 404, 409, 410, 412, 433, 443, 447, 448, 450, 574, 581, 582, 584, 612, 620, 651, 652, 669, 671, 866, 892, 893, 899, 975, 976, 977, 979, 983, 990, 995, 1013, 1015, 1023, 1030, 1031, 1034, 1035, 1036, 1037], "fetch_olivetti_fac": [50, 95, 120, 238, 371, 1030, 1031, 1032], "extract_patches_2d": [50, 98, 410, 1030], "patch_siz": [50, 98, 410, 576, 577], "buffer": [50, 1035], "max_patch": [50, 410, 576, 577, 1030], "4i": 50, "dt": [50, 98, 111, 133, 409, 410, 996], "2400": 50, "700": [50, 315], "800": [50, 123, 316, 371, 577, 685], "1100": 50, "1200": [50, 124, 303, 409], "1300": 50, "1400": [50, 467], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 316], "2200": [50, 371, 486], "2300": [50, 189], "ntrain": 50, "694": [50, 68], "plot_dict_face_patch": [50, 68], "agglo": [51, 438, 1014], "featureagglomer": [51, 54, 433, 434, 997, 1014, 1025, 1031, 1032, 1035, 1036, 1038], "x_reduc": [51, 90, 130, 438, 1014], "x_restor": 51, "images_restor": 51, "vmax": [51, 82, 95, 98, 106, 155, 158, 179, 184, 191, 216, 234, 250, 256, 299, 334], "179": [51, 68, 373, 382, 409, 1022], "plot_digits_agglomer": [51, 68], "rich": [52, 384, 387, 402, 432, 1004, 1033, 1036], "richer": [52, 105, 402], "uneven": [52, 256, 402, 406], "patholog": [52, 979, 1028], "clean": [52, 71, 199, 358, 368, 374, 408, 986, 990, 1032], "fring": [52, 402], "sensibl": [52, 164, 348, 378, 976, 990], "resampl": [52, 125, 157, 170, 218, 285, 385, 387, 389, 548, 549, 954, 1001, 1031, 1035], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 221, 222, 223, 681, 682, 683, 685, 977, 1023, 1028, 1032, 1036, 1037], "428": [52, 68], "plot_digits_linkag": [52, 68], "raccoon": [53, 98, 407], "addition": [53, 72, 114, 170, 200, 218, 236, 314, 316, 348, 376, 387, 400, 410, 603, 604, 639, 645, 664, 869, 969, 970, 980, 988, 1000, 1028], "adapt": [53, 55, 111, 112, 124, 125, 155, 246, 247, 305, 363, 374, 375, 376, 385, 402, 409, 412, 508, 509, 510, 511, 669, 670, 671, 849, 850, 976, 982, 984, 990, 994, 1000, 1001, 1030, 1031, 1038], "pooch": [53, 376, 392, 395], "instal": [53, 243, 281, 313, 314, 315, 316, 317, 318, 319, 362, 363, 365, 376, 377, 379, 380, 382, 384, 387, 388, 395, 398, 402, 410, 445, 455, 489, 684, 688, 996, 998, 1015, 1029, 1030, 1031, 1035, 1036], "raccoon_fac": [53, 98], "nbyte": [53, 233], "768": 53, "1024": [53, 105, 442, 461, 531, 890, 1035], "uint8": [53, 98, 370, 490, 499, 500, 1034], "786432": 53, "unsign": [53, 99, 371, 575, 945], "786": [53, 71], "kilobyt": 53, "behind": [53, 80, 112, 378, 380, 384, 401, 404, 409, 979, 983, 992, 1038], "simplest": [53, 406, 977, 980, 1013, 1014], "certainli": [53, 70, 348], "compressed_raccoon_uniform": 53, "_discret": [53, 306], "239": [53, 306, 347, 1022], "futurewarn": [53, 179, 306, 313, 376, 384, 1029, 1030, 1031, 1033, 1035, 1038], "onward": [53, 306, 866, 1026], "subsampl": [53, 105, 124, 127, 171, 200, 217, 218, 257, 306, 310, 315, 451, 552, 553, 554, 555, 556, 625, 672, 694, 792, 793, 818, 857, 869, 881, 908, 918, 972, 976, 1001, 1003, 1022, 1032, 1036, 1038], "200_000": [53, 306, 857, 1038], "silenc": [53, 236, 306, 489], "disabl": [53, 116, 306, 310, 347, 374, 376, 410, 442, 453, 461, 530, 531, 532, 539, 552, 553, 554, 555, 851, 890, 912, 913, 990, 1028, 1031, 1035, 1037], "spot": [53, 231, 402], "leav": [53, 112, 117, 126, 171, 173, 218, 268, 308, 356, 358, 362, 373, 375, 381, 389, 402, 409, 412, 434, 435, 438, 439, 456, 496, 550, 551, 552, 553, 554, 555, 557, 558, 559, 666, 668, 791, 796, 797, 798, 799, 807, 808, 832, 833, 881, 900, 901, 902, 903, 969, 977, 983, 987, 996, 1010, 1013, 1022, 1029, 1031, 1033, 1034, 1038], "bin_edg": 53, "bin_edges_": [53, 304, 857], "bin_cent": [53, 200], "625": [53, 200, 701], "875": [53, 153, 662], "375": [53, 442, 742, 980], "140": [53, 409, 503, 509, 510, 511, 548, 549, 981], "171": [53, 149, 373, 382, 780, 980], "203": [53, 199, 219], "234": [53, 827, 831, 849, 850, 982], "axvlin": [53, 60, 73, 82, 103, 124, 134, 170, 172, 189, 267, 1011], "get_ybound": 53, "state": [53, 57, 70, 72, 80, 202, 233, 241, 247, 267, 315, 358, 363, 364, 376, 378, 382, 384, 387, 389, 390, 401, 410, 415, 433, 436, 440, 442, 447, 452, 468, 537, 582, 672, 792, 793, 801, 803, 805, 832, 833, 839, 887, 888, 915, 969, 970, 976, 982, 985, 992, 1000, 1001, 1004, 1024, 1026, 1028, 1030, 1032, 1035, 1038], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 149, 371, 1022], "79431128": 53, "185": [53, 149, 161, 224, 227, 373, 382, 849, 850], "18557327": 53, "224": [53, 85, 130, 402, 717], "01945707": 53, "save": [53, 70, 72, 300, 375, 376, 380, 382, 383, 384, 389, 396, 406, 414, 461, 527, 528, 620, 832, 833, 890, 976, 980, 990, 996, 1004, 1015, 1022, 1025, 1029, 1032], "verifi": [53, 60, 109, 170, 200, 376, 381, 398, 964, 983], "6291456": 53, "surpris": [53, 171, 976, 1000, 1024], "x8": 53, "ndarrai": [53, 58, 90, 200, 243, 259, 260, 261, 376, 377, 378, 382, 383, 398, 410, 413, 414, 417, 418, 420, 423, 424, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 490, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 693, 694, 695, 708, 711, 714, 715, 716, 719, 720, 730, 737, 738, 740, 742, 743, 745, 746, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 781, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 910, 911, 912, 917, 918, 928, 929, 930, 931, 935, 942, 944, 945, 949, 952, 953, 955, 956, 957, 958, 961, 966, 967, 980, 995, 1001, 1025, 1029, 1032, 1033, 1036, 1037, 1038], "practic": [53, 71, 80, 86, 98, 118, 122, 152, 169, 170, 176, 184, 202, 229, 235, 262, 269, 287, 288, 315, 334, 363, 365, 376, 378, 379, 382, 384, 388, 389, 402, 404, 406, 407, 408, 409, 410, 412, 440, 445, 455, 514, 517, 582, 625, 626, 663, 787, 831, 885, 892, 969, 970, 974, 979, 980, 981, 982, 983, 986, 987, 990, 1000, 1001, 1002, 1004, 1006, 1015, 1016, 1017, 1024, 1028, 1030, 1032, 1034], "gain": [53, 223, 268, 281, 283, 323, 347, 348, 356, 375, 382, 384, 387, 409, 525, 550, 554, 555, 557, 718, 748, 787, 788, 821, 900, 902, 981, 985, 993, 996, 1025, 1029, 1032], "363": [53, 68, 130, 136], "plot_face_compress": [53, 68], "anova": [54, 143, 150, 167, 329, 345, 403, 497, 508, 585, 588, 589, 591, 592, 593, 597, 598, 599, 602, 706, 814, 818, 852, 853, 872, 892, 897, 995], "bayesianridg": [54, 164, 179, 180, 184, 315, 620, 637, 976, 1029, 1030, 1031, 1032, 1035, 1036, 1038], "shutil": [54, 72, 403], "tempfil": [54, 283, 313, 403, 983], "feature_select": [54, 71, 72, 74, 143, 144, 145, 146, 147, 148, 149, 167, 243, 315, 317, 337, 358, 365, 389, 393, 403, 411, 574, 969, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "kfold": [54, 118, 124, 138, 256, 266, 358, 406, 430, 465, 560, 561, 587, 595, 640, 644, 646, 648, 654, 656, 658, 666, 789, 792, 793, 795, 797, 799, 803, 808, 810, 811, 812, 813, 814, 815, 816, 817, 819, 823, 826, 873, 1010, 1023, 1024, 1025, 1027, 1028, 1030, 1032], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 78, 272, 1000], "cachedir": [54, 72, 385, 403], "mkdtemp": [54, 403], "mem": [54, 382, 501], "n_x": [54, 578], "n_y": [54, 578, 982, 990], "parcel": [54, 67, 402], "ward__n_clust": 54, "n_job": [54, 72, 73, 118, 119, 120, 125, 126, 132, 139, 148, 149, 164, 170, 171, 172, 222, 224, 241, 260, 262, 263, 265, 276, 281, 313, 314, 315, 318, 363, 376, 389, 409, 413, 430, 437, 439, 441, 443, 445, 450, 451, 454, 457, 460, 465, 524, 528, 529, 530, 532, 535, 536, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 587, 595, 603, 625, 627, 632, 640, 644, 646, 648, 650, 651, 652, 654, 656, 658, 659, 661, 669, 672, 681, 682, 683, 684, 685, 686, 687, 766, 770, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 851, 854, 887, 888, 946, 948, 969, 980, 981, 983, 1010, 1011, 1015, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 434, 438, 1022, 1026], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 111, 115, 116, 127, 231, 255, 260, 268, 270, 314, 348, 352, 356, 365, 373, 375, 376, 378, 385, 390, 399, 401, 402, 406, 407, 409, 410, 413, 437, 439, 445, 457, 480, 501, 505, 507, 513, 515, 519, 520, 524, 530, 531, 533, 543, 550, 551, 552, 553, 557, 558, 559, 560, 561, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 610, 625, 651, 652, 659, 661, 669, 670, 671, 700, 710, 719, 726, 728, 738, 755, 761, 770, 774, 780, 781, 822, 832, 833, 834, 835, 836, 838, 840, 842, 843, 847, 849, 850, 855, 871, 872, 875, 879, 892, 897, 900, 901, 902, 903, 931, 932, 933, 951, 953, 954, 974, 976, 980, 981, 984, 987, 990, 991, 992, 996, 1004, 1006, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1038], "return_dist": [54, 456, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 983, 1026], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 144, 411, 585, 588, 589, 591, 592, 593, 597, 598, 602, 1025, 1029, 1036], "cach": [54, 167, 262, 281, 282, 295, 362, 363, 371, 389, 434, 438, 443, 461, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 495, 501, 789, 834, 836, 852, 853, 890, 894, 895, 896, 897, 898, 965, 983, 995, 1025, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038], "selectpercentil": [54, 71, 243, 337, 411, 585, 588, 589, 591, 592, 596, 599, 1023, 1028, 1038], "percentag": [54, 104, 122, 191, 218, 256, 264, 267, 406, 411, 527, 534, 537, 542, 586, 587, 641, 662, 673, 696, 726, 738, 807, 808, 809, 822, 904, 906, 981, 996, 1024, 1028, 1034, 1035], "anova__percentil": [54, 337], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "638768": 54, "rdbu_r": [54, 82, 106, 334], "temporari": [54, 70, 72, 362, 461, 680, 773, 890, 983, 1025, 1026, 1029, 1035, 1036], "worri": [54, 977, 1007], "rmtree": [54, 72, 403], "ignore_error": 54, "548": [54, 68], "plot_feature_agglomeration_vs_univariate_select": [54, 68], "perspect": [55, 60, 200, 362, 371, 387, 390, 523, 636, 892, 973], "certain": [55, 170, 205, 217, 236, 261, 281, 307, 358, 371, 372, 374, 380, 389, 391, 402, 407, 411, 631, 642, 646, 651, 656, 677, 852, 857, 892, 969, 972, 976, 977, 980, 981, 984, 990, 995, 1000, 1006, 1010, 1027, 1031, 1034, 1037], "conveni": [55, 204, 368, 384, 387, 403, 406, 410, 412, 417, 436, 440, 442, 444, 446, 457, 482, 604, 669, 671, 692, 720, 777, 851, 852, 954, 970, 972, 976, 977, 987, 1004, 1015, 1022], "ground_truth": [55, 288], "proba_map": 55, "class_index": 55, "ci": [55, 363, 379, 380, 384, 982, 1028, 1030], "preambl": 55, "parameters_str": 55, "greatest": [55, 392, 402, 859, 1030], "remark": [55, 86, 149, 364, 376, 990], "unlik": [55, 56, 118, 170, 171, 221, 223, 251, 303, 332, 376, 378, 382, 387, 389, 393, 404, 406, 407, 410, 439, 443, 528, 643, 644, 647, 648, 649, 675, 676, 777, 810, 832, 833, 872, 883, 895, 976, 979, 980, 987, 995, 1022, 1028], "bi": [55, 410], "isotrop": [55, 57, 61, 100, 154, 156, 221, 223, 402, 404, 412, 505, 512, 525, 608, 612, 613, 615, 616], "worth": [55, 121, 171, 200, 376, 384, 1004], "rememb": [55, 378, 381, 392, 410, 983, 987, 996], "hardli": [55, 600, 601], "proper": [55, 189, 218, 364, 382, 400, 409, 442, 534, 546, 669, 929, 955, 975, 976, 977, 980, 995, 1022, 1032, 1033, 1034, 1035, 1036, 1037], "must": [55, 170, 171, 173, 181, 184, 217, 218, 229, 240, 256, 287, 304, 309, 347, 358, 371, 375, 376, 377, 378, 380, 382, 384, 389, 390, 393, 398, 400, 402, 403, 406, 407, 409, 410, 411, 412, 413, 423, 431, 434, 437, 438, 439, 440, 442, 443, 444, 448, 450, 452, 454, 455, 457, 459, 460, 462, 467, 480, 501, 502, 505, 516, 524, 530, 531, 532, 533, 534, 536, 537, 540, 546, 547, 552, 553, 554, 555, 560, 561, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 603, 604, 610, 613, 620, 621, 622, 623, 625, 626, 631, 635, 636, 641, 642, 645, 651, 652, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 692, 696, 699, 702, 727, 738, 756, 763, 766, 770, 773, 780, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 796, 798, 799, 801, 803, 804, 805, 807, 808, 810, 813, 816, 818, 819, 827, 828, 829, 830, 831, 834, 835, 836, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 855, 856, 857, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 892, 893, 894, 895, 896, 897, 898, 899, 905, 948, 955, 964, 966, 969, 970, 976, 977, 978, 980, 983, 984, 986, 987, 994, 995, 996, 1006, 1015, 1022, 1025, 1029, 1033, 1035, 1036], "plot_hdbscan": [55, 68], "layout": [55, 112, 169, 170, 251, 303, 353, 387, 892, 893, 894, 897, 913, 995, 1025, 1027], "maintain": [55, 205, 218, 221, 236, 261, 363, 365, 375, 379, 382, 383, 384, 387, 389, 392, 402, 409, 433, 435, 861, 862, 868, 869, 872, 877, 880, 881, 883, 976, 977, 990, 1000, 1001, 1006, 1017, 1037], "mitig": [55, 172, 310, 363, 364, 977, 996, 1013, 1014, 1034], "great": [55, 169, 170, 198, 358, 376, 387, 407, 756, 1001, 1004, 1022, 1029], "appropri": [55, 57, 103, 157, 170, 204, 236, 270, 342, 352, 358, 374, 376, 378, 384, 389, 401, 402, 406, 408, 409, 413, 437, 443, 450, 482, 483, 484, 489, 493, 494, 495, 497, 498, 503, 570, 575, 584, 585, 588, 589, 591, 592, 593, 665, 667, 680, 702, 834, 835, 836, 838, 840, 842, 843, 844, 964, 976, 979, 980, 990, 1026, 1029, 1035, 1038], "immedi": [55, 376, 387, 789, 803, 813, 814, 1030], "hdb": [55, 439], "probabilities_": [55, 439], "capabl": [55, 56, 86, 157, 204, 225, 378, 389, 392, 981, 984, 995, 996, 1004, 1022, 1031], "constraint": [55, 57, 67, 95, 110, 136, 167, 195, 204, 256, 298, 299, 300, 314, 376, 387, 407, 410, 480, 501, 502, 550, 551, 554, 555, 557, 558, 625, 628, 807, 808, 900, 901, 902, 903, 949, 969, 971, 976, 977, 994, 1026, 1029, 1030, 1033, 1035, 1037, 1039], "reachabl": [55, 65, 439, 443, 448, 449, 450, 838, 934], "extend": [55, 56, 67, 109, 201, 250, 268, 334, 373, 374, 387, 389, 400, 401, 402, 407, 409, 624, 713, 821, 824, 825, 857, 859, 876, 907, 972, 980, 981, 995, 1001, 1002, 1017, 1027, 1028, 1029, 1030, 1032, 1037], "fragment": [55, 98], "sparser": [55, 179, 191, 407, 464, 471, 532, 536, 976, 983, 994], "Not": [55, 138, 171, 362, 387, 402, 420, 421, 424, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 462, 463, 464, 465, 466, 467, 468, 469, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 556, 559, 562, 563, 574, 575, 576, 581, 582, 584, 620, 621, 622, 623, 670, 681, 682, 683, 684, 686, 760, 784, 787, 788, 789, 792, 793, 803, 829, 832, 833, 836, 837, 838, 840, 844, 856, 864, 867, 868, 870, 884, 885, 896, 980, 986, 1000, 1031], "mention": [55, 86, 112, 218, 314, 358, 362, 376, 380, 381, 387, 389, 402, 689, 884, 885, 969, 974, 976, 1001, 1004, 1015, 1029, 1030, 1031], "until": [55, 123, 149, 208, 273, 315, 317, 381, 389, 390, 399, 402, 406, 411, 412, 501, 502, 550, 551, 552, 553, 557, 558, 559, 586, 639, 640, 645, 646, 651, 652, 653, 654, 655, 656, 659, 661, 664, 669, 670, 671, 687, 787, 788, 792, 793, 849, 850, 889, 892, 900, 901, 902, 903, 955, 969, 976, 977, 985, 993, 996, 1015, 1025, 1029, 1030, 1036], "tradeoff": [55, 115, 167, 234, 254, 268, 269, 277, 347, 362, 376, 384, 408, 508, 557, 691, 695, 719, 781, 818, 853, 872, 892, 977, 1013, 1031, 1034], "comfort": [55, 409], "epsilon": [55, 65, 182, 224, 235, 319, 341, 407, 439, 448, 636, 642, 660, 669, 671, 738, 849, 850, 893, 895, 898, 973, 976, 980, 984, 994, 995, 1013, 1022], "incap": 55, "suffici": [55, 123, 132, 208, 275, 334, 362, 389, 402, 411, 525, 539, 650, 675, 676, 808, 809, 981, 983, 1001, 1031, 1037, 1038], "intervent": 55, "inaccess": 55, "ultim": [55, 225, 377], "world": [55, 70, 74, 170, 204, 225, 239, 347, 362, 365, 369, 373, 402, 407, 410, 970, 980, 982, 999, 1001, 1004, 1009, 1017, 1022], "whose": [55, 79, 80, 81, 149, 157, 200, 332, 371, 384, 385, 389, 400, 402, 404, 409, 411, 412, 415, 430, 431, 432, 441, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 508, 527, 531, 533, 534, 537, 540, 542, 565, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 664, 688, 711, 789, 796, 803, 817, 838, 857, 884, 885, 928, 959, 960, 974, 981, 985, 986, 987, 995, 1025, 1030, 1031, 1033, 1036], "respect": [55, 67, 100, 112, 116, 118, 121, 129, 160, 176, 179, 184, 189, 202, 214, 217, 221, 223, 230, 233, 235, 251, 270, 287, 288, 300, 308, 317, 331, 362, 363, 371, 372, 376, 400, 402, 405, 407, 409, 410, 412, 439, 457, 460, 463, 464, 465, 466, 467, 468, 469, 527, 533, 534, 540, 546, 554, 555, 590, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 629, 636, 664, 683, 687, 705, 720, 774, 777, 787, 788, 828, 838, 849, 850, 904, 906, 969, 973, 974, 976, 977, 980, 983, 984, 985, 986, 990, 995, 1000, 1004, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "neighborhood": [55, 82, 167, 221, 282, 295, 373, 389, 402, 407, 413, 437, 439, 443, 450, 495, 497, 508, 534, 542, 621, 624, 689, 818, 834, 835, 838, 840, 841, 842, 843, 844, 846, 852, 853, 872, 977, 986, 1002, 1017, 1031], "recomput": [55, 56, 240, 242, 283, 313, 462, 467, 976, 992, 1027, 1038], "span": [55, 78, 125, 234, 258, 371, 402, 410, 542, 629, 789, 792, 980, 1014], "cut_dist": [55, 439], "intract": [56, 407, 977, 985], "inferenti": 56, "meta": [56, 70, 110, 135, 136, 167, 200, 236, 270, 319, 358, 370, 374, 378, 380, 387, 389, 393, 398, 400, 401, 411, 412, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 568, 574, 575, 581, 583, 584, 587, 590, 596, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 940, 969, 981, 1001, 1002, 1017, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036, 1037], "chirag": 56, "nagpal": 56, "christo": [56, 1031, 1032, 1034, 1036], "arida": [56, 1031, 1032, 1034, 1036], "baseestim": [56, 109, 236, 281, 376, 388, 389, 412, 426, 625, 626, 921, 1022, 1029, 1032, 1034, 1036, 1037], "clone": [56, 125, 160, 171, 236, 300, 358, 374, 376, 379, 380, 382, 384, 389, 400, 403, 412, 430, 458, 562, 563, 590, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 795, 811, 816, 819, 823, 826, 852, 853, 889, 1001, 1022, 1028, 1030, 1034, 1038, 1039], "metaestim": [56, 378, 389, 889, 1026, 1035, 1036], "available_if": [56, 389, 1035, 1036], "check_is_fit": [56, 109, 236, 379, 385, 389, 1032, 1035, 1036], "5000": [56, 186, 215, 216, 218, 315, 873], "_classifier_ha": 56, "deleg": [56, 382, 427, 905, 1026, 1028, 1034], "unfit": [56, 403, 427, 457, 562, 563, 595, 604, 1030, 1032], "classifier_": [56, 236], "inductivecluster": 56, "clusterer_": 56, "plot_scatt": 56, "cluster_label": [56, 60], "x_new": [56, 403, 407, 411, 426, 435, 436, 438, 440, 442, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 537, 542, 560, 562, 563, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 621, 623, 628, 631, 632, 633, 634, 635, 681, 682, 683, 684, 685, 841, 848, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 884, 885, 992, 1006], "y_new": 56, "declar": [56, 222, 236, 358, 376, 377, 378, 382, 389, 436, 439, 440, 452, 464, 465, 471, 683, 687, 1029, 1033], "membership": [56, 390, 399, 401, 402, 504, 505, 506, 507, 508, 512, 515, 995], "inductive_learn": 56, "probable_clust": 56, "response_method": [56, 114, 128, 133, 183, 192, 209, 264, 284, 289, 292, 308, 330, 331, 353, 624, 625, 626, 691, 693, 695], "plot_inductive_clust": [56, 68], "meant": [57, 149, 371, 378, 385, 467, 486, 670, 838, 946, 947, 970, 984, 986, 990, 1023], "unintuit": 57, "possibli": [57, 86, 149, 200, 215, 348, 373, 375, 384, 396, 402, 409, 410, 444, 446, 582, 827, 828, 829, 830, 831, 897, 898, 900, 901, 902, 903, 969, 972, 977, 983, 990, 1037], "undesir": [57, 153, 412], "phil": [57, 1027, 1038], "roth": [57, 1027, 1030, 1037], "mr": [57, 318, 1023, 1026, 1036], "spheric": [57, 85, 128, 223, 248, 250, 251, 294, 372, 756, 787, 788, 976, 979, 983, 1000], "anisotrop": [57, 154, 412, 610, 612, 615], "ellipt": [57, 976], "60834549": 57, "63667341": 57, "40887718": 57, "85253229": 57, "x_vari": 57, "y_vari": 57, "unequ": [57, 1030], "x_filter": 57, "unevenli": [57, 200, 256], "y_filter": 57, "set_i": 57, "scenario": [57, 70, 152, 176, 204, 264, 358, 383, 392, 406, 409, 530, 536, 538, 539, 974, 980, 990, 1032], "criteria": [57, 118, 167, 178, 189, 208, 219, 251, 261, 384, 402, 411, 459, 475, 476, 477, 494, 550, 551, 552, 553, 557, 558, 639, 645, 649, 651, 652, 664, 685, 853, 872, 892, 893, 900, 901, 902, 903, 970, 979, 984, 994, 1014, 1025, 1030, 1033], "knowledg": [57, 120, 170, 217, 239, 261, 365, 371, 376, 379, 382, 388, 389, 402, 406, 409, 413, 437, 504, 548, 549, 556, 713, 728, 732, 775, 821, 980, 981, 992, 1015], "consequ": [57, 103, 218, 261, 262, 303, 331, 358, 407, 409, 554, 555, 559, 648, 649, 970, 976, 980, 996, 1031, 1033, 1038], "likelihood": [57, 77, 79, 80, 81, 83, 103, 152, 153, 154, 156, 157, 158, 159, 161, 167, 188, 218, 250, 254, 261, 267, 277, 300, 303, 378, 389, 400, 404, 407, 409, 412, 430, 462, 463, 464, 465, 466, 467, 468, 469, 470, 508, 525, 529, 534, 542, 543, 544, 603, 604, 624, 638, 651, 705, 733, 787, 788, 789, 815, 818, 837, 848, 868, 880, 894, 895, 897, 898, 976, 979, 982, 990, 995, 1025, 1026, 1031, 1037], "inertia": [57, 58, 61, 348, 402, 436, 440, 442, 445, 452, 453, 455, 456, 1033], "common_param": [57, 125, 171, 235, 263, 264], "unexpect": [57, 236, 358, 376, 381, 384, 396, 528, 689, 980, 995, 1024, 1030, 1031, 1034, 1036, 1038], "suffic": [57, 58, 378, 1015], "propos": [57, 78, 79, 281, 371, 376, 378, 387, 389, 402, 404, 409, 414, 415, 443, 468, 528, 600, 601, 669, 670, 671, 849, 850, 976, 979, 983, 994, 998, 1029], "inflat": [57, 169, 170, 172, 402, 406, 980, 990], "allevi": [57, 179, 184, 402, 982], "fastest": [57, 259, 349, 440, 663, 665, 667, 680, 928, 929, 979], "restart": [57, 379, 384, 440, 524, 530, 531, 536, 538, 539, 603, 604, 977, 1035], "plot_kmeans_assumpt": [57, 68], "judg": [58, 206, 402, 1010], "definit": [58, 81, 188, 200, 268, 281, 348, 376, 377, 378, 389, 391, 402, 404, 405, 407, 520, 522, 528, 604, 621, 685, 701, 711, 720, 750, 787, 788, 969, 972, 974, 976, 978, 980, 983, 994, 999, 1017, 1026, 1030, 1037], "shorthand": [58, 389, 403, 460, 554, 555, 853, 854, 1025], "homo": 58, "compl": 58, "mea": 58, "context": [58, 239, 243, 281, 362, 363, 370, 375, 377, 388, 389, 402, 403, 408, 409, 410, 412, 413, 430, 437, 439, 441, 443, 445, 450, 451, 454, 457, 460, 461, 465, 524, 528, 529, 530, 532, 535, 536, 537, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 587, 595, 603, 619, 620, 623, 625, 627, 632, 640, 644, 646, 648, 650, 651, 652, 654, 656, 658, 659, 661, 669, 672, 681, 682, 683, 684, 685, 686, 687, 766, 770, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 834, 835, 838, 840, 842, 843, 845, 846, 851, 854, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 948, 970, 976, 980, 986, 990, 994, 1001, 1004, 1013, 1022, 1029, 1030, 1035, 1038], "n_digit": 58, "1797": [58, 89, 259, 300, 322, 373, 438, 495, 525, 526, 527, 528, 592, 593, 681, 682, 683, 684, 983, 1012], "bench_k_mean": 58, "tabl": [58, 218, 261, 376, 377, 380, 385, 402, 410, 575, 651, 673, 789, 803, 829, 945, 976, 980, 981, 986, 1000, 1023], "fit_tim": [58, 122, 189, 208, 263, 406, 815, 816], "inertia_": [58, 61, 64, 436, 440, 442, 1033], "clustering_metr": 58, "sample_s": [58, 234, 348, 783], "formatter_result": 58, "determinist": [58, 125, 363, 372, 378, 389, 402, 436, 440, 442, 444, 445, 446, 451, 452, 455, 544, 552, 553, 557, 558, 576, 577, 684, 688, 800, 801, 848, 900, 901, 972, 976, 1023, 1026, 1028, 1030, 1031, 1034, 1037], "ttime": 58, "tinertia": 58, "thomo": 58, "tcompl": 58, "tv": 58, "tari": 58, "tami": 58, "tsilhouett": 58, "__________________________________________________________________________________": 58, "036": [58, 382, 465], "69545": 58, "598": [58, 103, 153, 534], "645": [58, 204, 219], "621": [58, 761], "469": 58, "617": [58, 259, 264, 277, 402, 761], "152": [58, 382], "042": [58, 382], "69735": 58, "681": [58, 382], "723": [58, 235], "701": 58, "574": [58, 527, 534], "698": 58, "72686": 58, "636": [58, 184, 348, 382], "658": [58, 86], "647": [58, 326], "521": [58, 344, 345], "643": [58, 259, 269, 277], "reduced_data": 58, "mesh": [58, 121, 130, 154, 234, 289, 297, 305, 327, 330], "169": [58, 300], "mark": [58, 92, 144, 165, 265, 272, 368, 376, 378, 380, 384, 385, 389, 402, 528, 600, 601, 604, 625, 651, 845, 846, 887, 888, 905, 919, 924, 929, 976, 1004, 1017, 1022, 1023, 1028, 1030, 1031, 1038], "770": [58, 68], "plot_kmeans_digit": [58, 68], "kmeans_plusplu": [59, 402, 1034], "4000": [59, 127, 249], "centers_init": 59, "4eacc5": [59, 64], "ff9c34": [59, 64], "4e9a06": [59, 64], "cluster_data": 59, "065": [59, 68, 259, 382], "plot_kmeans_plusplu": [59, 68], "wrong": [60, 200, 287, 347, 358, 373, 376, 378, 410, 497, 718, 748, 783, 980, 986, 995, 1025, 1027, 1029, 1030, 1031, 1032, 1035], "wide": [60, 61, 115, 233, 304, 387, 402, 407, 410, 969, 976, 1000, 1004, 1015, 1022, 1024, 1038], "ambival": 60, "thick": [60, 291, 983], "ow": 60, "7049787496083262": 60, "5882004012129721": 60, "6505186632729437": 60, "561464362648773": 60, "4857596147013469": 60, "silhouette_sampl": [60, 783, 1026, 1028, 1030, 1038], "distinct": [60, 261, 324, 347, 349, 371, 378, 381, 389, 390, 406, 409, 410, 582, 790, 799, 807, 866, 867, 887, 888, 969, 976, 983, 986, 1015, 1030], "center_box": [60, 505], "range_n_clust": 60, "set_size_inch": [60, 138, 240], "lie": [60, 85, 148, 170, 234, 303, 324, 332, 334, 407, 409, 599, 840, 842, 843, 844, 974, 977, 980, 990, 995], "insert": [60, 170, 200, 387, 402, 480, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 907], "blank": [60, 381, 970, 996], "demarc": 60, "silhouette_avg": 60, "sample_silhouette_valu": 60, "y_lower": [60, 125], "aggreg": [60, 116, 218, 264, 270, 317, 319, 402, 409, 527, 548, 549, 714, 715, 720, 737, 738, 740, 742, 743, 745, 777, 981, 983, 990, 1038], "ith_cluster_silhouette_valu": 60, "size_cluster_i": 60, "y_upper": [60, 125], "fill_betweenx": 60, "2nd": [60, 90, 160, 308, 402, 413, 437, 523, 990, 1037], "lw": [60, 78, 79, 81, 99, 104, 105, 194, 201, 203, 206, 210, 217, 224, 249, 256, 271, 286, 303, 324, 341], "fontweight": [60, 195], "bold": [60, 125, 189, 195, 376], "091": [60, 68, 354, 357], "plot_kmeans_silhouette_analysi": [60, 68], "reach": [61, 118, 149, 200, 202, 216, 218, 263, 317, 334, 356, 381, 390, 392, 402, 407, 411, 443, 450, 501, 502, 586, 587, 620, 637, 638, 639, 640, 645, 646, 647, 648, 649, 653, 654, 655, 656, 659, 660, 661, 669, 670, 671, 672, 674, 675, 676, 677, 721, 722, 775, 787, 788, 849, 850, 889, 969, 980, 984, 994, 996, 1004, 1033, 1037, 1038], "optimum": [61, 158, 170, 176, 274, 407, 465, 976, 979], "stuck": [61, 685, 977], "check_random_st": [61, 216, 223, 232, 238, 378, 385, 389], "trade": [61, 78, 118, 172, 204, 260, 262, 263, 334, 347, 401, 402, 404, 546, 547, 552, 553, 627, 649, 685, 789, 792, 793, 803, 815, 977, 984, 992, 994, 995, 1001], "n_init_rang": 61, "n_samples_per_cent": 61, "make_data": 61, "n_clusters_tru": 61, "init_s": [61, 348, 442], "factori": [61, 261, 410, 734, 950, 980], "empti": [61, 70, 105, 212, 325, 362, 371, 378, 380, 402, 414, 476, 526, 554, 555, 624, 800, 857, 897, 899, 907, 912, 913, 919, 939, 970, 995, 1013, 1024, 1026, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "run_id": 61, "km": [61, 317, 348], "my_memb": [61, 63, 64], "360": [61, 68, 112], "plot_kmeans_stability_low_dim_dens": [61, 68], "fast": [62, 176, 184, 189, 215, 216, 234, 235, 304, 349, 362, 371, 376, 385, 402, 404, 406, 407, 409, 410, 412, 414, 439, 440, 462, 467, 501, 525, 526, 528, 531, 533, 537, 540, 557, 558, 559, 581, 582, 584, 625, 626, 633, 651, 652, 665, 667, 680, 692, 789, 803, 813, 814, 824, 825, 832, 833, 837, 848, 929, 949, 972, 976, 979, 982, 983, 985, 986, 996, 1000, 1004, 1015, 1022, 1023, 1028, 1029, 1032, 1033], "globular": [62, 402], "cleanli": [62, 1022], "plot_linkage_comparison": [62, 68], "dorin": [63, 441], "comaniciu": [63, 402, 441], "meer": [63, 402, 441], "ieee": [63, 79, 81, 373, 402, 404, 411, 415, 441, 468, 527, 556, 657, 678, 679, 717, 761, 976, 980, 986], "transact": [63, 373, 402, 404, 413, 415, 437, 441, 468, 527, 531, 533, 540, 556, 637, 657, 678, 679, 717, 718, 748, 761, 976, 980], "intellig": [63, 149, 347, 373, 402, 409, 441, 548, 549, 631, 689, 717, 822, 849, 850, 981, 992, 1001, 1004], "2002": [63, 400, 402, 409, 430, 441, 586, 587, 718, 748, 839, 887, 972, 980], "603": [63, 441], "619": [63, 171, 348, 441], "labels_uniqu": 63, "448": [63, 68, 147, 150, 281], "plot_mean_shift": [63, 68, 454], "3000": [64, 224, 884, 885], "k_mean": [64, 385, 389, 1014, 1030, 1038], "t_batch": 64, "pairwis": [64, 169, 170, 233, 270, 313, 317, 318, 347, 362, 368, 378, 389, 402, 407, 412, 439, 451, 454, 455, 461, 480, 501, 502, 528, 554, 555, 613, 631, 632, 633, 634, 635, 636, 681, 683, 685, 687, 689, 692, 770, 773, 780, 782, 783, 820, 836, 840, 844, 858, 890, 972, 980, 983, 992, 995, 1017, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039], "k_means_cluster_cent": 64, "mbk_means_cluster_cent": 64, "k_means_label": 64, "mbk_means_label": 64, "ninertia": 64, "bbbbbb": 64, "188": [64, 68, 149, 157, 373, 382, 577], "plot_mini_batch_kmean": [64, 68], "shane": [65, 1031, 1034, 1037], "grigsbi": 65, "refug": 65, "rocktalu": 65, "cluster_optics_dbscan": [65, 402], "n_points_per_clust": 65, "c1": [65, 122, 160, 232, 309], "c2": [65, 122, 160, 232, 309], "c3": [65, 122, 309], "c4": [65, 309, 1002, 1017], "c5": [65, 1002, 1017], "c6": 65, "clust": [65, 443, 450], "labels_050": 65, "reachability_": [65, 402, 443, 448, 449, 450], "core_dist": [65, 448], "core_distances_": [65, 443, 448, 450], "ordering_": [65, 402, 443, 448, 449, 450], "labels_200": 65, "ax3": [65, 325], "ax4": 65, "klass": 65, "xk": [65, 543], "rk": 65, "full_lik": 65, "noptic": 65, "ndbscan": 65, "plot_opt": [65, 68], "tri": [66, 104, 221, 290, 363, 378, 381, 387, 390, 400, 442, 444, 446, 624, 625, 626, 663, 685, 691, 693, 695, 803, 948, 985, 1003, 1006, 1024, 1030, 1034], "intens": [66, 98, 281, 373, 377, 407, 436, 440, 452, 600, 601, 625, 626, 791, 969, 987, 1004, 1030], "weakli": 66, "outlin": [66, 121, 376, 378, 389, 390, 391, 402, 969, 1017], "center1": 66, "center2": 66, "center3": 66, "67": [66, 170, 218, 300, 347, 373, 509, 510, 511, 620, 660, 706, 803, 970, 980, 994, 1018, 1022], "58": [66, 79, 300, 373, 404, 415, 468, 756, 990, 1011], "center4": 66, "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "label_im": 66, "cleaner": 66, "518": [66, 68], "plot_segmentation_toi": [66, 68], "swiss": [67, 167, 220, 227, 402, 523, 685, 686, 1036], "roll": [67, 167, 220, 227, 379, 402, 523, 685, 686, 923, 1004, 1032, 1037], "sole": [67, 387, 402], "oppos": [67, 236, 380, 398, 402, 888, 983, 995, 1006, 1022], "make_swiss_rol": [67, 225, 1036], "thinner": 67, "fig1": 67, "set_posit": [67, 101, 102, 211, 303], "jet": 67, "fig2": 67, "121": [67, 114, 165, 234, 662, 990], "354": [67, 68, 283, 295], "plot_ward_structured_vs_unstructur": [67, 68], "55": [68, 170, 176, 195, 200, 218, 223, 227, 323, 381, 402, 406, 484, 590, 789, 795, 803, 816, 980, 1022], "673": [68, 86, 382], "auto_examples_clust": 68, "chain": [69, 76, 112, 167, 278, 280, 281, 358, 365, 368, 387, 389, 401, 412, 489, 495, 534, 604, 620, 651, 730, 789, 818, 821, 823, 824, 825, 826, 852, 853, 872, 969, 970, 981, 985, 997, 1000, 1004, 1015, 1017], "raster": 70, "caption": 70, "serv": [70, 99, 112, 158, 264, 403, 539, 544, 631, 972, 1036], "matt": [70, 1025, 1026, 1027, 1032, 1033, 1037, 1038], "terri": [70, 1026], "truncatedsvd": [70, 130, 222, 348, 407, 527, 528, 532, 533, 534, 685, 851, 854, 977, 1024, 1029, 1033, 1034, 1036], "dictvector": [70, 167, 346, 348, 350, 371, 410, 481, 575, 581, 582, 583, 584, 865, 1022, 1023, 1026, 1032, 1034, 1035, 1038], "compris": [70, 125, 259, 347, 348, 349, 371, 387, 407, 409, 508, 796, 977], "subject": [70, 129, 252, 264, 347, 371, 376, 378, 380, 387, 389, 390, 400, 401, 404, 406, 407, 488, 651, 652, 678, 855, 892, 893, 950, 971, 976, 995, 999, 1015, 1031, 1032, 1035, 1037], "mccall": 70, "mksol": 70, "dseg": 70, "ti": [70, 200, 248, 251, 259, 343, 362, 400, 402, 592, 593, 628, 713, 718, 748, 787, 788, 894, 897, 900, 979, 980, 995, 1023, 1025, 1026, 1030, 1032, 1036, 1037, 1039], "fred": [70, 1022, 1035], "575": [70, 200, 348], "3539": 70, "1993apr6": 70, "131900": 70, "8407": 70, "perhap": [70, 121, 373, 375, 384, 389, 408, 1001], "militari": 70, "slug": 70, "school": [70, 373, 402, 780, 980], "physic": [70, 118, 363, 498, 945, 976, 1038], "teacher": 70, "ex": [70, 374, 377, 392, 1026, 1027], "fighter": 70, "jock": 70, "wasn": [70, 236, 1031], "poundal": 70, "flink": 70, "funni": 70, "propon": 70, "si": 70, "insist": 70, "safeti": [70, 387, 403, 946, 1001, 1032], "ball": [70, 286, 294, 402, 408, 441, 685, 832, 833, 837, 840, 842, 843, 844, 1022, 1024, 1027, 1033], "mari": [70, 1030, 1031, 1032, 1033, 1036], "shafer": 70, "nasa": [70, 347, 348, 373], "am": [70, 75, 80, 132, 171, 347, 381, 404, 467, 486, 1029], "dryden": 70, "stateless": [70, 348, 364, 378, 389, 410, 575, 576, 582, 631, 855, 856, 864, 990, 1038], "subject_body_extractor": 70, "startswith": [70, 222, 294], "subject_body_transform": 70, "sentenc": [70, 347, 349, 371, 390, 410], "text_stat": 70, "num_sent": 70, "text_stats_transform": 70, "subjectbodyextractor": 70, "subjectbodi": 70, "union": [70, 170, 403, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 489, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 730, 746, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 851, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 1029], "body_bow": 70, "pull": [70, 316, 363, 374, 379, 389, 390, 1032], "body_stat": 70, "transformer_weight": [70, 457, 460, 851, 1027, 1034], "396": [70, 149, 373, 1015], "394": [70, 161], "618": [70, 76, 259], "plot_column_transform": [70, 76], "imput": [71, 132, 166, 172, 231, 241, 243, 314, 317, 365, 368, 380, 388, 389, 403, 409, 483, 494, 558, 573, 632, 638, 665, 814, 835, 853, 911, 913, 1000, 1001, 1017, 1024, 1025], "miss": [71, 132, 149, 166, 172, 231, 241, 261, 281, 314, 318, 358, 362, 365, 368, 371, 373, 375, 376, 378, 380, 381, 389, 398, 401, 402, 403, 404, 439, 465, 483, 489, 491, 494, 550, 551, 554, 555, 557, 558, 559, 620, 621, 622, 623, 632, 638, 665, 683, 687, 719, 761, 814, 835, 853, 861, 862, 866, 868, 869, 872, 873, 877, 880, 881, 883, 900, 901, 902, 903, 976, 977, 980, 1000, 1001, 1002, 1004, 1017, 1024, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "chi": [71, 80, 112, 307, 368, 411, 512, 585, 588, 589, 591, 592, 593, 597, 598, 599, 602, 631, 632, 633, 634, 635, 750, 751, 1017, 1022, 1027, 1028], "dispatch": [71, 365, 398, 461, 789, 803, 813, 814, 815, 890, 946, 947, 1010, 1017, 1037], "processor": [71, 132, 170, 365, 413, 430, 437, 439, 441, 443, 445, 450, 451, 454, 457, 460, 465, 524, 528, 529, 530, 532, 535, 536, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 587, 595, 603, 625, 627, 632, 640, 644, 646, 648, 650, 651, 652, 654, 656, 658, 659, 661, 669, 672, 681, 682, 683, 684, 685, 686, 687, 766, 770, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 834, 835, 838, 840, 842, 843, 845, 846, 851, 854, 887, 888], "pedro": [71, 1023, 1025, 1026, 1030], "chi2": [71, 410, 411, 445, 574, 585, 588, 589, 591, 592, 593, 598, 599, 602, 613, 631, 632, 633, 634, 635, 636, 751, 757, 766, 1022, 1029, 1036], "simpleimput": [71, 132, 164, 165, 172, 231, 241, 243, 314, 317, 358, 389, 620, 621, 622, 970, 990, 1030, 1031, 1033, 1034, 1036, 1037, 1038], "40945": 71, "titan": [71, 172, 243, 313, 317, 318], "surviv": [71, 172, 969, 1000], "ag": [71, 149, 170, 172, 188, 189, 200, 218, 240, 241, 243, 303, 316, 317, 318, 371, 373, 1004, 1006, 1013], "fare": [71, 172, 243, 317, 318, 1026, 1027], "embark": [71, 172, 243, 313, 317, 318], "sex": [71, 149, 170, 172, 188, 189, 243, 318, 373, 988, 1013], "femal": [71, 170, 318, 381, 865, 866, 990], "male": [71, 170, 318, 381, 865, 866, 990], "pclass": [71, 172, 243, 313, 317, 318], "numeric_featur": [71, 317], "numeric_transform": [71, 317], "categorical_transform": 71, "selector": [71, 145, 146, 384, 410, 459, 574, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 1024, 1032, 1034, 1038], "preprocessor": [71, 132, 170, 200, 231, 241, 309, 314, 316, 317, 318, 403, 410, 581, 582, 584, 1000, 1015, 1022, 1025, 1030, 1032], "798": [71, 171, 186, 315, 320, 409], "lt": [71, 72, 117, 132, 170, 251, 259, 273, 374, 376], "0x7f7f538afee0": 71, "pipelinepipelin": [71, 72, 117, 132, 146, 170, 172, 230, 231, 240, 241, 243, 262, 268, 309, 314, 317], "columntransformercolumntransform": [71, 132, 170, 171, 172, 231, 241, 309, 314, 317], "simpleimputersimpleimput": [71, 132, 172, 231, 241, 314, 317], "standardscalerstandardscal": [71, 132, 170, 230, 231, 240, 241, 243, 268, 314, 317], "onehotencoderonehotencod": [71, 117, 132, 170, 171, 231, 241, 314, 317], "selectpercentileselectpercentil": [71, 243], "logisticregressionlogisticregress": [71, 117, 230, 231, 241, 243, 300, 314, 317], "make_column_selector": [71, 122, 132, 403, 457, 460, 1032], "subset_featur": 71, "Then": [71, 111, 113, 117, 120, 132, 135, 146, 170, 176, 184, 188, 200, 204, 225, 230, 236, 242, 263, 264, 347, 370, 380, 382, 384, 392, 399, 400, 402, 405, 407, 410, 411, 563, 586, 712, 748, 789, 803, 852, 970, 979, 980, 986, 995, 1015, 1031], "1047": 71, "1118": 71, "684": [71, 80, 286, 295], "1045": 71, "841": 71, "1046": [71, 251], "kb": [71, 170, 171], "numerical_transform": 71, "yourself": [71, 375, 376, 377, 381, 384, 984], "dtype_exclud": [71, 459], "dtype_includ": [71, 122, 132, 403, 459], "_column_transform": [71, 132], "0x7f7f327cb9d0": 71, "0x7f7f327cb700": 71, "exactli": [71, 112, 169, 179, 184, 193, 200, 204, 252, 269, 304, 347, 376, 378, 399, 402, 406, 407, 410, 415, 439, 446, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 508, 519, 583, 584, 608, 669, 671, 696, 698, 755, 790, 807, 813, 972, 976, 977, 978, 980, 981, 996, 1014, 1015, 1022, 1028, 1029, 1035], "hyperparamet": [71, 111, 152, 153, 159, 160, 164, 167, 171, 179, 184, 189, 214, 218, 229, 254, 259, 264, 266, 277, 283, 300, 347, 378, 389, 402, 406, 407, 409, 412, 495, 528, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 636, 646, 652, 658, 666, 669, 720, 777, 789, 803, 969, 974, 975, 976, 979, 980, 982, 984, 986, 994, 1001, 1015, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038], "cartesian": [71, 399, 626, 983, 1037], "preprocessor__num__imputer__strategi": 71, "preprocessor__cat__selector__percentil": 71, "classifier__c": 71, "search_cv": 71, "param_distribut": [71, 152, 262, 269, 273, 315, 388, 793, 801, 803], "randomizedsearchcvrandomizedsearchcv": 71, "trigger": [71, 72, 380, 403, 849, 850, 852, 853, 912, 913, 929, 976, 1015, 1030, 1036, 1037], "best_params_": [71, 73, 125, 152, 235, 251, 259, 265, 315, 334, 388, 789, 792, 793, 803, 969, 1011, 1015], "best_score_": [71, 73, 235, 262, 265, 266, 334, 666, 668, 789, 792, 793, 803, 1010, 1011, 1015, 1033], "cv_results_": [71, 72, 73, 82, 118, 138, 148, 251, 259, 260, 261, 262, 265, 269, 272, 273, 283, 334, 465, 587, 789, 792, 793, 803, 1015, 1028, 1032, 1034, 1035], "sort_valu": [71, 172, 243, 251, 261, 272, 309, 310], "mean_test_scor": [71, 72, 73, 82, 118, 138, 148, 251, 260, 261, 262, 269, 272, 273, 283, 334, 465, 587, 789, 803, 969, 1028, 1035], "std_test_scor": [71, 73, 118, 138, 148, 260, 261, 262, 269, 283, 465, 587, 789, 803, 1028, 1035], "param_preprocessor__num__imputer__strategi": 71, "param_preprocessor__cat__selector__percentil": 71, "param_classifier__c": 71, "786015": 71, "031020": 71, "785063": 71, "030498": 71, "783149": 71, "030462": 71, "312": [71, 76, 126, 136, 1025], "plot_column_transformer_mixed_typ": [71, 76], "instanti": [72, 155, 316, 379, 393, 409, 443, 560, 561, 595, 623, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 919, 986, 1012, 1022, 1030, 1034, 1038], "memoiz": [72, 371, 389], "costli": [72, 78, 119, 164, 262, 343, 363, 377, 382, 402, 436, 620, 797, 799, 884, 885, 929, 980, 983, 992, 1001], "mcgibbon": [72, 1024, 1025, 1028], "selectkbest": [72, 74, 145, 146, 317, 358, 376, 393, 403, 411, 574, 585, 588, 589, 591, 593, 599, 969, 1023, 1028, 1038], "mutual_info_classif": [72, 411, 585, 588, 589, 592, 593, 1028, 1034, 1037], "pipe": [72, 73, 122, 241, 260, 309, 315, 316, 388, 393, 403, 410, 583, 852, 877, 878, 880, 881, 882, 883, 969, 990, 1011], "reduce_dim": [72, 241, 260, 403], "popul": [72, 78, 80, 170, 200, 264, 303, 371, 385, 389, 404, 433, 705, 711, 834, 835, 836, 838, 840, 842, 843, 844, 949, 980, 986, 990, 996], "n_features_opt": 72, "c_option": 72, "iterated_pow": [72, 525, 528, 534, 1028], "reduce_dim__n_compon": [72, 260, 403], "classify__c": 72, "reduce_dim__k": 72, "reducer_label": 72, "kbest": [72, 585], "0x7f7f538cc3a0": 72, "gridsearchcvgridsearchcv": [72, 241, 251, 259, 261], "minmaxscalerminmaxscal": 72, "passthroughpassthroughlinearsvclinearsvc": 72, "mean_scor": [72, 270, 273, 348, 1035], "alphabet": [72, 389, 733], "eas": [72, 251, 308, 376, 379, 382, 976, 994, 1000, 1001, 1004, 1033, 1034, 1036], "sometim": [72, 132, 169, 261, 299, 348, 358, 363, 364, 376, 378, 380, 382, 388, 389, 392, 402, 404, 407, 409, 410, 442, 527, 528, 531, 533, 534, 857, 858, 859, 907, 975, 976, 977, 980, 985, 990, 991, 995, 1006, 1014, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038], "worthwhil": [72, 389], "slower": [72, 98, 118, 122, 164, 235, 270, 349, 409, 410, 411, 439, 444, 446, 531, 533, 540, 548, 549, 551, 556, 558, 581, 582, 584, 624, 625, 626, 636, 652, 665, 667, 680, 685, 697, 820, 824, 825, 973, 977, 978, 979, 981, 983, 996, 1015, 1026, 1033], "constructor": [72, 232, 363, 378, 389, 401, 403, 410, 457, 460, 542, 543, 548, 560, 561, 562, 563, 574, 575, 581, 582, 590, 661, 669, 670, 834, 835, 836, 838, 839, 840, 842, 843, 844, 851, 852, 853, 854, 948, 969, 981, 990, 995, 1001, 1006, 1022, 1023, 1025, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037], "folder": [72, 371, 374, 376, 380, 384, 392, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 983, 1015], "cached_pip": [72, 403], "delet": [72, 323, 325, 380, 381, 462, 467, 479], "exit": [72, 281, 380, 384, 461], "benefici": [72, 74, 78, 95, 130, 303, 304, 374, 977], "725": [72, 76], "plot_compare_reduct": [72, 76], "logistic__c": [73, 1011], "046415888336127774": 73, "pca__n_compon": [73, 851, 1011], "truncat": [73, 130, 222, 385, 527, 528, 532, 533, 534, 537, 669, 671, 718, 748, 787, 841, 905, 929, 969, 979, 980, 994, 1011, 1015, 1016, 1017, 1028, 1030], "x_digit": [73, 140, 298, 403, 1010, 1011, 1013], "y_digit": [73, 140, 298, 403, 1010, 1011, 1013], "__": [73, 262, 389, 403, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 1011, 1030, 1031], "spectrum": [73, 517, 537, 688, 929, 1004, 1011, 1030], "ax0": [73, 75, 200, 232, 348, 1011], "n_components_": [73, 103, 389, 434, 438, 527, 531, 532, 533, 534, 535, 536, 884, 885, 1011, 1031, 1033], "explained_variance_ratio_": [73, 104, 348, 407, 527, 534, 537, 542, 1011, 1025, 1028], "named_step": [73, 86, 403, 586, 587, 590, 852, 853, 892, 893, 976, 1011, 1029, 1031], "components_col": 73, "param_pca__n_compon": 73, "best_clf": 73, "nlargest": 73, "yerr": [73, 79, 81, 119, 122, 148, 283, 309, 325], "val": [73, 212, 261, 931], "991": [73, 76, 980], "plot_digits_pip": [73, 76], "candid": [74, 251, 259, 262, 269, 315, 364, 376, 380, 402, 409, 441, 443, 789, 792, 793, 801, 803, 976, 983, 996, 1028], "features__pca__n_compon": 74, "features__univ_select__k": 74, "svm__c": 74, "867": 74, "967": [74, 980, 984], "transformer_list": [74, 403, 851, 854, 970, 1033, 1034], "univ_select": 74, "amuel": [74, 116, 191, 234, 324, 342], "ai": [74, 116, 191, 234, 324, 342, 406], "bonn": [74, 116, 191, 234, 324, 342], "mayb": [74, 299, 389, 410, 995, 1001], "combined_featur": 74, "x_featur": [74, 633, 634, 635, 972], "grid_search": [74, 118, 241, 251, 259, 269, 403, 948, 1024, 1025, 1026, 1027, 1028, 1029], "408": [74, 76], "plot_feature_union": [74, 76], "overview": [75, 377, 379, 388, 389, 726, 735, 982, 994, 1016, 1017], "transformedtargetregressor": [75, 170, 200, 387, 403, 586, 587, 590, 1030, 1032, 1035], "hous": [75, 132, 164, 165, 303, 315, 369, 483, 1017], "translat": [75, 378, 412, 520, 607, 861, 862, 878, 977, 980, 998, 1004], "lowest": [75, 86, 171, 184, 251, 370, 402, 406, 628, 630, 792, 793, 796, 899, 900, 977, 980, 996, 1037], "logarithm": [75, 132, 170, 204, 233, 262, 334, 389, 411, 453, 583, 651, 652, 669, 697, 718, 733, 743, 747, 748, 749, 795, 832, 833, 927, 996, 1010, 1029], "log1p": [75, 232, 856, 980, 990], "expm1": 75, "y_tran": 75, "At": [75, 112, 205, 273, 322, 325, 362, 363, 380, 390, 392, 398, 405, 409, 430, 433, 458, 581, 582, 584, 595, 820, 822, 859, 944, 969, 976, 979, 981, 985, 994, 1004], "meda": [75, 170, 980], "median_absolute_error": [75, 170, 980, 1026, 1032, 1034], "r2_score": [75, 169, 184, 195, 196, 409, 425, 458, 475, 476, 477, 547, 549, 551, 553, 555, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 716, 720, 825, 826, 835, 843, 850, 893, 895, 898, 901, 903, 969, 980, 1023, 1025, 1031, 1035, 1036], "compute_scor": [75, 103, 179, 180, 637, 638, 1031], "r2": [75, 113, 118, 132, 169, 171, 195, 235, 378, 403, 409, 547, 563, 666, 815, 850, 980, 988, 1031], "ridge_cv": 75, "y_pred_ridg": 75, "ridge_cv_with_trans_target": 75, "inverse_func": [75, 170, 403, 458, 856, 990, 1030], "y_pred_ridge_with_trans_target": 75, "sell": 75, "quantile_transform": [75, 869, 880, 990, 1029, 1030, 1031], "house_pric": [75, 132], "select_dtyp": [75, 122, 318, 459], "nan": [75, 122, 164, 165, 170, 218, 241, 256, 264, 309, 313, 318, 319, 362, 368, 378, 385, 389, 409, 439, 461, 489, 548, 549, 550, 554, 555, 557, 586, 587, 590, 596, 599, 602, 620, 621, 622, 623, 628, 705, 706, 707, 714, 715, 716, 720, 721, 722, 761, 770, 775, 776, 777, 779, 789, 792, 793, 795, 803, 811, 814, 815, 816, 819, 861, 862, 866, 868, 869, 872, 873, 877, 880, 881, 883, 910, 911, 912, 913, 955, 969, 980, 990, 996, 1017, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "inf": [75, 155, 291, 385, 402, 412, 439, 443, 450, 454, 464, 465, 471, 546, 547, 552, 553, 586, 587, 590, 599, 600, 601, 612, 620, 628, 630, 641, 642, 643, 645, 662, 664, 665, 669, 673, 680, 720, 722, 738, 770, 777, 781, 848, 857, 864, 910, 912, 913, 927, 980, 990, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "lotfrontag": 75, "garageyrblt": 75, "masvnrarea": [75, 132], "to_fram": 75, "n_quantil": [75, 171, 307, 869, 881, 1031], "output_distribut": [75, 303, 307, 403, 868, 869, 880, 881, 990], "squeez": [75, 158, 159, 281, 303, 1014], "quantiletransform": [75, 171, 307, 403, 458, 868, 881, 970, 990, 1029, 1030, 1031, 1032, 1033, 1038], "weaker": 75, "residu": [75, 196, 202, 257, 425, 458, 475, 476, 477, 545, 547, 549, 551, 553, 555, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 667, 671, 672, 678, 679, 694, 736, 777, 825, 826, 835, 843, 850, 893, 895, 898, 901, 903, 976, 980, 1013, 1034, 1035, 1037], "smile": [75, 371, 1036], "507": [75, 76, 403], "plot_transformed_target": [75, 76, 458], "560": [76, 200, 261, 277, 510, 511], "auto_examples_compos": 76, "mahalanobi": [77, 83, 167, 402, 404, 443, 450, 462, 463, 464, 465, 466, 467, 468, 469, 692, 770, 771, 772, 839, 974, 986, 1030, 1033, 1034], "ledoitwolf": [77, 79, 83, 103, 167, 404, 462, 463, 467, 468, 469, 470, 789, 1026], "empiricalcovari": [78, 80, 81, 404, 462, 466, 467, 468, 469, 986], "unbias": [78, 400, 404, 407, 430, 543, 649, 665, 667, 680, 976, 1010], "shrunk": [78, 103, 303, 310, 319, 415, 466, 468, 469, 472, 473, 474, 542, 873, 974, 994, 1016, 1017], "base_x_train": 78, "base_x_test": 78, "coloring_matrix": [78, 79], "shrunkcovari": [78, 103, 404, 462, 463, 466, 467, 468], "empirical_covari": [78, 404, 1038], "log_likelihood": [78, 603, 604, 787, 788], "negative_loglik": 78, "real_cov": [78, 79, 463, 466, 467, 468, 469], "emp_cov": [78, 80, 82, 471, 474], "loglik_r": 78, "inv": [78, 82, 298], "formula": [78, 79, 399, 402, 404, 415, 466, 468, 509, 510, 511, 583, 636, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 669, 671, 697, 721, 747, 756, 969, 974, 976, 980, 985, 986, 990, 994, 1027, 1029, 1031], "asymptot": [78, 79, 189, 362, 404, 467, 529, 722, 976, 979, 1032], "criterion": [78, 79, 173, 188, 208, 251, 273, 314, 378, 385, 389, 402, 407, 434, 438, 442, 445, 452, 455, 525, 530, 532, 539, 546, 547, 550, 551, 552, 553, 557, 558, 559, 599, 620, 637, 638, 641, 649, 659, 660, 661, 662, 664, 665, 667, 669, 670, 671, 673, 684, 688, 703, 788, 889, 894, 895, 896, 897, 898, 900, 901, 902, 903, 976, 979, 980, 988, 993, 996, 1002, 1014, 1017, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1039], "chen": [78, 79, 404, 409, 415, 468, 718, 748, 972, 980, 1025, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1038], "Its": [78, 111, 259, 263, 372, 378, 389, 407, 412, 531, 975, 976, 985, 988, 994, 1000, 1004, 1025], "tuned_paramet": [78, 138, 259], "loglik_lw": 78, "loglik_oa": 78, "unseen": [78, 123, 146, 189, 204, 208, 274, 287, 364, 368, 378, 388, 389, 402, 406, 838, 869, 881, 971, 980, 986, 988, 990, 996, 1006, 1025, 1030, 1034], "loglog": [78, 233], "lik_max": 78, "amax": [78, 123], "lik_min": 78, "amin": 78, "vline": [78, 97, 187, 188, 189, 201, 261, 274, 304], "shrinkage_": [78, 79, 466, 468], "magenta": [78, 127], "purpl": [78, 92, 225], "cyan": [78, 115, 170, 284, 292], "realli": [78, 172, 189, 380, 381, 382, 980, 986, 1004, 1036], "interestingli": [78, 149, 990], "outperform": [78, 86, 132, 308, 387, 406, 409, 445, 455, 982, 990], "423": [78, 83], "plot_covariance_estim": [78, 83], "inspir": [79, 129, 171, 218, 376, 387, 409, 554, 555, 917, 970, 1000, 1031], "mmse": [79, 404, 415, 468], "tran": 79, "octob": [79, 371, 1022, 1029, 1035, 1036], "choleski": [79, 200, 218, 385, 464, 465, 471, 520, 604, 641, 643, 644, 647, 648, 649, 651, 652, 662, 665, 667, 673, 675, 676, 680, 787, 788, 976, 1025, 1029, 1031, 1034, 1037, 1038], "toeplitz": 79, "simul": [79, 97, 170, 194, 237, 261, 1004], "n_samples_rang": [79, 233], "lw_mse": 79, "oa_ms": 79, "lw_shrinkag": 79, "oa_shrinkag": 79, "error_norm": [79, 81, 462, 463, 464, 465, 466, 467, 468, 469], "darkorang": [79, 99, 104, 105, 201, 211, 224, 247, 248, 249, 252, 268, 270, 284, 286, 292, 293, 324, 354], "248": [79, 83, 171], "plot_lw_vs_oa": [79, 83], "x_i": [80, 116, 144, 170, 201, 316, 342, 402, 407, 408, 409, 412, 607, 608, 612, 615, 616, 618, 827, 828, 831, 971, 972, 976, 982, 983, 984, 990, 994, 995, 996], "d_": [80, 402, 407, 641, 662, 673, 770, 977, 982], "mle": [80, 103, 534, 1030, 1033], "resist": [80, 81, 376], "erron": [80, 81, 407, 976, 1023, 1030, 1034], "breakdown": [80, 81, 217, 672, 976], "n_": [80, 81, 261, 316, 402, 407, 409, 639, 645, 678, 689, 972, 976, 980, 982, 983, 987, 990, 992, 995, 996], "smallest": [80, 81, 200, 281, 352, 371, 402, 404, 411, 520, 534, 623, 647, 648, 649, 675, 676, 683, 687, 688, 789, 792, 793, 803, 808, 996, 1035], "pure": [80, 81, 86, 184, 200, 389, 402, 466, 472, 489, 550, 551, 552, 553, 557, 558, 559, 698, 708, 778, 785, 900, 901, 902, 903, 990], "rousseuw": [80, 81], "rousseeuw": [80, 81, 402, 404, 462, 467, 782, 783, 986], "ass": [80, 81, 404, 467], "1984": [80, 81, 404, 467, 900, 901, 996], "wilson": [80, 373, 1022, 1025], "hilferti": 80, "1931": 80, "proceed": [80, 149, 371, 373, 402, 413, 432, 437, 504, 689, 701, 718, 748, 839, 889, 980, 992, 993, 994], "academi": [80, 839], "688": 80, "n_outlier": [80, 81, 128, 203, 229, 288], "gen_cov": 80, "ey": [80, 81, 248, 252, 334, 371, 527, 534, 543], "outliers_cov": 80, "mincovdet": [80, 81, 404, 462, 463, 466, 468, 469, 986, 1022, 1029], "robust_cov": 80, "nmcd": 80, "nmle": 80, "26253567e": 80, "06695631e": 80, "22747343e": 80, "23773583": 80, "24640578": 80, "51963999": 80, "inlier": [80, 128, 203, 229, 239, 303, 389, 404, 424, 462, 556, 664, 670, 838, 869, 881, 895, 896, 898, 976, 986, 1029, 1030, 1035], "inlier_plot": 80, "outlier_plot": 80, "get_xlim": [80, 195, 205, 303], "zz": 80, "mahal_emp_cov": 80, "emp_cov_contour": 80, "pubu_r": 80, "mahal_robust_cov": 80, "robust_contour": 80, "ylorbr_r": 80, "dist": [80, 222, 233, 380, 462, 463, 464, 465, 466, 467, 468, 469, 692, 755, 761, 832, 833], "borderaxespad": 80, "cubic": [80, 412], "suggest": [80, 98, 115, 119, 170, 173, 261, 334, 362, 375, 376, 383, 389, 406, 407, 409, 462, 467, 558, 638, 817, 974, 976, 977, 985, 995, 1015, 1026, 1033, 1036], "emp_mah": 80, "markeredgewidth": [80, 265], "rm": [80, 155, 380, 384, 404], "mahal": 80, "robust_mah": 80, "location_": [80, 81, 462, 463, 464, 465, 466, 467, 468, 469], "289": [80, 83, 170], "plot_mahalanobis_dist": [80, 83], "compens": [81, 169, 171, 176, 200, 218, 262, 404, 407], "soon": [81, 389, 1013], "5n_": 81, "johanna": 81, "hardin": 81, "rock": 81, "decemb": [81, 157, 371, 657, 678, 679, 1022, 1030, 1032, 1034, 1037], "928": [81, 430], "946": 81, "zoubir": 81, "koivunen": 81, "chakhchoukh": 81, "muma": 81, "signal": [81, 95, 96, 97, 105, 125, 152, 157, 158, 167, 178, 199, 201, 219, 252, 316, 401, 402, 404, 410, 411, 412, 415, 468, 496, 514, 519, 524, 527, 530, 534, 618, 637, 638, 639, 640, 645, 646, 656, 657, 665, 677, 678, 679, 777, 810, 818, 866, 976, 980, 997, 1004, 1009, 1016, 1017], "tutori": [81, 138, 139, 140, 141, 189, 202, 218, 261, 365, 376, 377, 382, 384, 388, 396, 402, 445, 455, 684, 995, 1013, 1025], "treatment": [81, 169, 370, 407, 462, 467], "concept": [81, 118, 123, 236, 270, 365, 376, 387, 401, 402, 408, 410, 972, 980, 983, 996, 1004], "magazin": [81, 411], "29": [81, 153, 157, 191, 200, 204, 217, 226, 318, 323, 373, 374, 392, 394, 395, 409, 552, 553, 683, 687, 773, 787, 844, 976, 977, 994], "range_n_outli": 81, "err_loc_mcd": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_cov_emp_ful": 81, "err_loc_emp_pur": 81, "err_cov_emp_pur": 81, "outliers_index": 81, "outliers_offset": 81, "inliers_mask": 81, "pure_x": 81, "pure_loc": 81, "pure_emp_cov": 81, "font_prop": 81, "hat": [81, 105, 257, 261, 286, 316, 374, 400, 404, 408, 409, 971, 976, 977, 980, 982, 984], "_2": [81, 157, 407, 410, 524, 530, 538, 539, 639, 645, 976, 984, 994, 995], "x_size": 81, "691": [81, 83, 714], "plot_robust_vs_empirical_covari": [81, 83], "graphicallasso": [82, 404, 462, 463, 465, 466, 467, 468, 469, 471, 1030, 1038], "largest": [82, 97, 118, 149, 202, 373, 402, 404, 407, 436, 520, 534, 550, 551, 552, 553, 557, 558, 581, 702, 787, 788, 808, 830, 900, 901, 902, 903, 929, 977, 980, 990, 995, 996], "invert": [82, 100, 146, 222, 348, 349, 387, 404, 410, 623, 682, 686, 990, 1031], "fairli": [82, 124, 223, 276, 298, 384, 402, 552, 553, 692, 981, 1013], "tweak": [82, 236, 406, 946, 979, 1015, 1033], "readabl": [82, 262, 316, 381, 382, 384, 396, 527, 1031, 1034, 1035, 1036, 1037], "make_sparse_spd_matrix": [82, 522], "prng": 82, "prec": [82, 230, 520, 980], "smallest_coef": [82, 520], "largest_coef": [82, 520], "multivariate_norm": [82, 86, 246, 462, 463, 464, 465, 466, 467, 468, 469], "ledoit_wolf": [82, 404, 1035], "prec_": 82, "lw_cov_": 82, "lw_prec_": 82, "this_cov": 82, "this_prec": 82, "ma": [82, 309, 334, 976, 1028, 1033], "masked_equ": 82, "set_facecolor": [82, 246], "set_axis_bgcolor": 82, "alpha_": [82, 138, 170, 180, 188, 189, 465, 604, 637, 638, 640, 644, 646, 648, 649, 654, 656, 666, 668, 976, 996, 1010, 1022, 1029], "543": [82, 83], "plot_sparse_cov": [82, 83], "195": [83, 486, 487], "auto_examples_covari": 83, "cross_decomposit": [84, 85, 86, 167, 237, 365, 1026, 1027, 1029, 1030, 1031], "plscanon": [85, 475, 477, 478, 1002, 1017, 1026, 1030, 1032, 1034, 1036], "plsregress": [85, 86, 1002, 1017, 1029, 1032, 1034, 1036, 1039], "share": [85, 130, 170, 251, 347, 356, 358, 362, 363, 378, 384, 402, 407, 410, 542, 661, 697, 701, 787, 788, 792, 793, 974, 987, 1022, 1024, 1030, 1032, 1034, 1037], "appar": [85, 982, 1004], "scatterplot": [85, 179, 261, 284], "maxim": [85, 86, 95, 106, 125, 179, 251, 252, 262, 266, 270, 271, 291, 308, 315, 334, 352, 356, 373, 389, 399, 402, 405, 407, 411, 412, 542, 603, 604, 637, 638, 641, 662, 672, 673, 713, 789, 792, 793, 803, 861, 867, 877, 974, 976, 980, 983, 985, 995, 1010, 1013, 1025, 1027, 1032, 1035, 1037], "weak": [85, 111, 123, 126, 204, 218, 267, 406, 550, 551, 552, 557, 558, 559, 623, 983, 1004], "var": [85, 86, 101, 115, 149, 180, 261, 373, 377, 411, 634, 638, 894, 895, 896, 897, 898, 980, 1030], "corr": [85, 173, 261], "corrcoef": [85, 106], "plsca": [85, 476], "x_train_r": 85, "y_train_r": 85, "x_test_r": 85, "y_test_r": 85, "221": [85, 130, 1025], "222": [85, 130, 257, 277, 995], "223": [85, 130, 149, 373], "yj": [85, 307], "noiz": 85, "xb": [85, 871], "50210309": 85, "55301008": 85, "72528805": 85, "03429511": 85, "83576671": 85, "74902647": 85, "03916339": 85, "84652988": 85, "78629756": 85, "11231897": 85, "1905275": 85, "33508757": 85, "35433161": 85, "32686504": 85, "39877158": 85, "47827435": 85, "38004088": 85, "35574845": 85, "exce": [85, 279, 314, 412, 435, 508, 595, 642, 651, 1031, 1034, 1036], "219": [85, 87, 260], "plot_compare_cross_decomposit": [85, 87], "pcr": [86, 405], "pl": [86, 204, 373, 405, 475, 476, 477, 478, 1027], "greedili": [86, 149, 402, 406, 411, 453], "despit": [86, 198, 200, 218, 235, 290, 389, 393, 404, 620, 621, 623, 976, 983, 1004, 1030, 1031], "suffer": [86, 120, 172, 281, 303, 348, 362, 402, 409, 412, 537, 755, 975, 976, 980, 983, 1014, 1031], "dive": [86, 376, 382], "explained_variance_": [86, 527, 534, 537, 1014, 1029], "onto": [86, 222, 223, 234, 303, 387, 407, 410, 414, 439, 441, 454, 526, 532, 536, 620, 621, 623, 681, 974, 978, 983], "recommend": [86, 120, 164, 217, 230, 236, 257, 270, 307, 315, 362, 363, 365, 370, 374, 376, 378, 382, 384, 387, 392, 405, 406, 407, 409, 411, 431, 440, 442, 444, 453, 489, 501, 528, 531, 537, 542, 554, 555, 562, 575, 576, 582, 599, 604, 624, 625, 631, 663, 669, 685, 690, 691, 693, 695, 795, 801, 803, 811, 848, 855, 857, 864, 871, 872, 877, 878, 880, 881, 882, 883, 885, 894, 897, 929, 948, 969, 977, 980, 982, 984, 987, 990, 992, 994, 995, 996, 999, 1004, 1017, 1024, 1025, 1031, 1032, 1033, 1034, 1036, 1038], "linearregress": [86, 135, 169, 179, 190, 195, 196, 197, 198, 203, 206, 217, 232, 236, 238, 257, 275, 304, 358, 376, 387, 388, 403, 409, 458, 563, 625, 628, 639, 642, 645, 647, 664, 665, 680, 976, 980, 990, 1013, 1026, 1027, 1031, 1034, 1035, 1036, 1038], "retriev": [86, 170, 204, 268, 348, 356, 380, 389, 403, 407, 410, 411, 461, 489, 583, 586, 587, 619, 646, 656, 677, 692, 718, 722, 724, 725, 748, 773, 827, 831, 864, 890, 976, 978, 980, 982, 1000, 1001, 1014, 1027, 1032, 1034, 1036], "026": [86, 231, 244], "predit": 86, "pca_2": 86, "554": [86, 87, 208, 216, 249, 253, 299], "plot_pcr_vs_pl": [86, 87], "774": 87, "auto_examples_cross_decomposit": 87, "multilabel": [88, 93, 167, 228, 244, 268, 279, 371, 378, 379, 389, 397, 475, 480, 490, 501, 502, 508, 516, 534, 550, 557, 560, 667, 668, 696, 700, 706, 718, 721, 722, 726, 727, 730, 731, 746, 748, 775, 776, 779, 780, 784, 786, 821, 825, 849, 856, 859, 863, 865, 876, 897, 900, 902, 918, 942, 943, 944, 991, 1002, 1003, 1015, 1017, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1035, 1036, 1037], "057": [89, 93, 382, 530], "plot_digits_last_imag": [89, 93], "iris": [90, 267, 268, 1012], "150x4": 90, "unus": [90, 101, 102, 171, 197, 221, 223, 456, 572, 755, 763, 969, 977, 1022, 1030, 1032, 1033, 1035, 1037], "plai": [90, 96, 126, 154, 183, 209, 255, 284, 292, 330, 331, 362, 387, 1015], "set1": [90, 261, 290, 291], "getter": [90, 462, 463, 464, 465, 466, 467, 468, 469, 586, 587, 590], "110": [90, 179, 197, 207, 232, 303, 309, 311, 430, 974, 975], "3rd": [90, 160, 827, 870, 982, 990], "plot_iris_dataset": [90, 93], "easi": [91, 171, 208, 218, 249, 259, 261, 334, 347, 358, 371, 382, 384, 387, 388, 402, 409, 493, 497, 503, 859, 969, 975, 979, 987, 990, 1000, 1001, 1004, 1015, 1032, 1037, 1038], "make_gaussian_quantil": [91, 112, 114, 372, 463, 467, 468, 469, 513], "323": [91, 134, 136], "y2": [91, 114, 709, 981], "324": [91, 371], "multi": [91, 110, 111, 136, 167, 178, 216, 219, 220, 223, 227, 228, 229, 237, 240, 244, 254, 258, 270, 277, 279, 296, 301, 313, 318, 347, 351, 357, 363, 371, 373, 378, 379, 385, 389, 392, 402, 409, 410, 412, 419, 430, 445, 455, 462, 467, 488, 489, 497, 498, 503, 507, 508, 512, 513, 515, 534, 542, 543, 544, 546, 548, 550, 551, 552, 554, 557, 558, 560, 562, 603, 624, 626, 636, 639, 640, 645, 646, 650, 651, 653, 654, 655, 656, 659, 661, 665, 666, 667, 668, 669, 674, 677, 683, 696, 706, 713, 721, 726, 732, 734, 775, 789, 803, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 839, 840, 842, 848, 849, 850, 853, 859, 872, 876, 887, 888, 892, 894, 897, 900, 901, 902, 904, 905, 906, 912, 915, 918, 969, 981, 983, 987, 990, 994, 1000, 1001, 1002, 1006, 1012, 1016, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1038, 1039], "325": 91, "326": [91, 266, 277], "plot_random_dataset": [91, 93], "make_multilabel_classif": [92, 237, 372, 508, 529, 780, 823, 824, 980, 1024, 1025, 1027, 1033], "star": [92, 135, 376], "degener": [92, 247, 414, 433, 447, 526, 713, 976, 980, 1031, 1035, 1036], "vocabulari": [92, 215, 347, 348, 387, 410, 581, 582, 583, 584, 982, 1006, 1015, 1022, 1024, 1027, 1030, 1033, 1035], "757": [92, 149, 259, 281, 373], "w0": 92, "w1": [92, 409, 650], "make_ml_clf": 92, "ff3333": 92, "0198e1": 92, "bf5fff": 92, "fcd116": 92, "ff7216": 92, "4dbd33": 92, "87421f": 92, "plot_2d": [92, 221], "p_c": [92, 516], "p_w_c": [92, 516], "allow_unlabel": [92, 237, 516], "return_distribut": [92, 516], "sep": [92, 270], "p_w": 92, "plot_random_multilabel_dataset": [92, 93], "652": [93, 114, 136], "auto_examples_dataset": 93, "blind": [94, 107, 167, 347, 407, 526, 534], "fastica": [94, 107, 167, 407, 525, 528, 534, 1014, 1022, 1024, 1030, 1036, 1037], "increment": [94, 107, 167, 264, 380, 382, 435, 440, 456, 497, 526, 527, 528, 529, 532, 534, 537, 595, 639, 651, 659, 795, 816, 824, 825, 827, 828, 829, 830, 831, 861, 862, 872, 892, 893, 955, 976, 982, 1025, 1026], "fa": [94, 106, 107, 167, 382, 407, 466, 469, 525, 534, 789, 814], "precomput": [94, 107, 167, 178, 219, 224, 281, 283, 378, 385, 387, 389, 402, 410, 413, 425, 433, 434, 437, 438, 439, 443, 445, 450, 458, 464, 475, 476, 477, 517, 524, 528, 530, 533, 535, 541, 547, 549, 551, 553, 555, 558, 561, 563, 603, 604, 613, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 674, 675, 677, 678, 681, 683, 684, 685, 689, 766, 770, 773, 782, 783, 825, 826, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 850, 893, 894, 895, 896, 897, 898, 901, 903, 956, 957, 958, 972, 978, 983, 995, 1001, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038], "olivetti": [95, 120, 369, 407, 488, 1017, 1022, 1030], "chapter": [95, 358, 378, 402, 407, 409, 412, 523, 525, 527, 607, 612, 615, 636, 970, 973, 976, 995, 996], "decompos": [95, 99, 115, 305, 401, 527, 531, 702, 813, 929, 975, 976, 980, 997, 1016, 1017], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 238], "constrained_layout": [95, 171, 221, 309, 310, 318], "set_constrained_layout_pad": 95, "w_pad": [95, 121, 353], "h_pad": [95, 121, 353], "set_edgecolor": 95, "vec": [95, 410, 531, 533, 540], "im": [95, 106, 272, 285, 1003], "pad": [95, 121, 164, 171, 221, 239, 347, 353, 410, 581, 582, 584], "initialis": [95, 531, 533, 540, 1022, 1030, 1031], "mathbb": [95, 115, 155, 405, 980, 987, 995], "4096": [95, 371, 407, 488], "human": [95, 171, 347, 396, 402, 407, 849, 850, 980, 987, 1031], "friendli": [95, 363, 376, 384, 407, 885, 992, 993, 1000, 1001], "visualis": [95, 98, 106, 237, 537, 983, 1001], "64x64": [95, 371, 407], "singular": [95, 385, 399, 402, 405, 444, 446, 475, 476, 477, 478, 514, 517, 527, 531, 533, 534, 537, 540, 542, 543, 650, 665, 666, 667, 680, 929, 976, 977, 979, 1016, 1017, 1028, 1029], "scalar": [95, 316, 382, 389, 403, 412, 414, 457, 460, 517, 526, 608, 609, 610, 615, 616, 620, 621, 730, 734, 908, 916, 972, 984, 986, 990, 994, 1000, 1032, 1033, 1036, 1038], "noise_variance_": [95, 188, 525, 527, 534, 649, 1029, 1036], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 170, 368, 404, 407, 410, 466, 509, 510, 511, 620, 621, 622, 623, 642, 664, 671, 672, 827, 828, 829, 830, 831, 974, 976, 979, 982, 1000, 1006, 1014, 1017], "subcompon": [95, 407], "ica_estim": 95, "15e": 95, "sparsepca": [95, 524, 526, 527, 528, 530, 532, 533, 534, 535, 538, 539, 1022, 1029, 1030, 1032, 1033, 1035, 1036, 1037], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 364, 407, 524, 531, 535, 538, 539, 1023, 1025, 1032, 1033, 1035, 1036, 1037, 1038], "batch_dict_estim": 95, "That": [95, 112, 149, 189, 229, 261, 265, 348, 349, 363, 370, 384, 389, 406, 411, 412, 436, 439, 440, 550, 557, 586, 807, 900, 901, 969, 977, 978, 980, 986, 996, 1031, 1032], "enhanc": [95, 204, 375, 376, 380, 387, 389, 402, 980, 998, 1020, 1021, 1022, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "consum": [95, 358, 370, 378, 389, 393, 402, 406, 409, 442, 792, 793, 852, 853, 936, 976, 1004, 1027, 1039], "kmeans_estim": 95, "factoranalysi": [95, 103, 106, 407, 537, 1023, 1025, 1034, 1036], "heteroscedast": [95, 103, 125, 202, 407, 868, 880], "fa_estim": 95, "wrap": [95, 117, 125, 281, 370, 378, 389, 426, 501, 578, 579, 650, 669, 734, 818, 876, 970, 980, 983, 995, 1000, 1022, 1027, 1030, 1032, 1033, 1035, 1037], "colormap": [95, 114, 160, 192, 209, 334, 339, 353, 690, 1035], "uv": [95, 407], "x_1": [95, 144, 155, 197, 201, 405, 407, 409, 412, 606, 618, 650, 865, 976, 982, 984, 990, 994], "x_n": [95, 407, 982, 984, 994], "dict_pos_dict_estim": 95, "positive_dict": [95, 524, 530, 538, 539], "dict_pos_code_estim": 95, "fit_algorithm": [95, 524, 530, 1037, 1038], "cd": [95, 149, 373, 374, 376, 380, 382, 407, 464, 465, 471, 524, 530, 532, 533, 536, 538, 539, 540, 976, 1015, 1027, 1037], "positive_cod": [95, 524, 530, 535, 538, 539], "dict_pos_estim": 95, "385": [95, 107, 171], "plot_faces_decomposit": [95, 107], "imagin": [96, 152, 236, 406, 407, 410, 976], "microphon": 96, "s1": [96, 149, 160, 188, 189, 373, 1014], "sinusoid": [96, 113, 125, 184, 235, 412, 973, 1014], "s2": [96, 149, 160, 188, 189, 373, 543, 1014], "sawtooth": [96, 1014], "saw": [96, 201, 204, 1014], "tooth": [96, 1014], "s_": [96, 265, 977, 988, 1014], "a_": [96, 399, 402, 531, 533, 540, 976, 1014], "mixing_": [96, 97, 526, 1014], "prove": [96, 1004], "revert": [96, 623, 625, 626, 1029, 1034], "unmix": [96, 414, 526], "allclos": [96, 129, 992, 1014], "mean_": [96, 265, 525, 526, 527, 532, 534, 536, 872, 990, 1014, 1030], "orthogon": [96, 97, 98, 167, 178, 219, 401, 407, 519, 524, 530, 532, 535, 536, 541, 657, 658, 678, 679, 992, 1002, 1017, 1022], "steelblu": [96, 97, 134], "sig": 96, "369": [96, 107], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 401, 414, 996, 1016, 1017], "geometr": [97, 402, 681, 697, 723, 749, 977, 1030], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 252], "axis_list": 97, "x_axi": [97, 208, 265], "y_axi": [97, 208], "quiver": 97, "hline": 97, "set_zord": 97, "280": [97, 107, 323], "plot_ica_vs_pca": [97, 107], "firstli": [98, 362, 387, 650, 1015], "undistort": 98, "noiseless": [98, 978], "pursuit": [98, 167, 178, 219, 407, 467, 519, 524, 530, 535, 541, 657, 658, 678, 679, 1002, 1017, 1022], "omp": [98, 105, 199, 407, 524, 530, 535, 541, 657, 658, 678, 679, 1002, 1017, 1022, 1030], "promin": [98, 389], "reminisc": 98, "downsampl": [98, 239], "075": [98, 154, 162, 348], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 208, 249, 389, 433, 440, 441, 442, 464, 465, 475, 476, 477, 524, 525, 526, 529, 530, 531, 532, 533, 536, 554, 555, 620, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 669, 670, 671, 672, 673, 683, 685, 787, 788, 841, 849, 850, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 1026, 1029, 1030, 1032, 1035, 1036, 1038], "n_steps_": [98, 442, 530, 531, 1035], "reconstruct_from_patches_2d": [98, 410, 576], "intercept": [98, 192, 209, 217, 343, 389, 475, 476, 477, 542, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 867, 871, 874, 892, 893, 899, 976, 978, 980, 985, 994, 995, 1025, 1027, 1031, 1032], "transform_algorithm": [98, 105, 524, 530, 535, 1038], "n1": 98, "atom": [98, 105, 407, 524, 530, 532, 535, 536, 538, 539, 646, 656, 677, 976, 1022, 1035], "transform_n_nonzero_coef": [98, 105, 524, 530, 535], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 524, 530, 535, 1035], "set_param": [98, 106, 116, 122, 125, 171, 172, 180, 188, 189, 193, 204, 208, 234, 274, 313, 337, 348, 379, 389, 402, 403, 409, 412, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 970, 986, 1006, 1013, 1022, 1028, 1029, 1030, 1035, 1036], "727": [98, 107, 239, 244], "plot_image_denois": [98, 107], "ipca": [99, 526, 527], "flip": [99, 575, 734, 929, 982, 1026, 1035], "incrementalpca": [99, 364, 407, 526, 528, 532, 534, 537, 1026, 1029, 1030, 1032, 1033, 1036], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 127, 206, 217, 224, 248, 249, 268], "x_transform": [99, 130, 236, 478, 524, 525, 526, 527, 528, 530, 532, 536, 559, 631, 632, 681, 682, 683, 684], "nmean": 99, "shadow": [99, 104, 105, 224, 324, 341, 349, 410], "scatterpoint": [99, 104, 224, 248, 324], "243": [99, 107, 164, 166, 194, 219, 577], "plot_incremental_pca": [99, 107], "nest": [100, 112, 167, 189, 236, 254, 277, 363, 382, 389, 392, 402, 406, 412, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 455, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 497, 512, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 794, 803, 814, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 980, 983, 1022, 1023, 1026, 1028, 1029, 1030, 1036], "train_ax": 100, "test_ax": 100, "straight": [100, 190, 196, 198, 258, 362], "inner": [100, 125, 262, 266, 324, 362, 410, 436, 507, 539, 575, 582, 641, 662, 673, 767, 769, 972, 980, 990, 995, 1023, 1026, 1036], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 379, 977], "untangl": 100, "mind": [100, 169, 170, 171, 218, 307, 308, 347, 348, 358, 376, 396, 404, 406, 409, 639, 640, 697, 976, 995, 1000, 1006, 1013], "investig": [100, 106, 112, 165, 342, 376, 976], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 118, 122, 149, 173, 188, 189, 281, 314, 318, 347, 362, 363, 378, 381, 384, 385, 387, 389, 398, 399, 402, 407, 409, 410, 542, 578, 579, 586, 590, 600, 601, 816, 819, 857, 946, 969, 972, 974, 976, 980, 983, 990, 995, 1004, 1030, 1031, 1032, 1036, 1038], "analyt": [100, 407, 412, 525, 613, 701, 970, 974, 980, 999, 1004], "kernelridg": [100, 152, 235, 665, 973, 1026], "kernal": 100, "relianc": [100, 204], "608": [100, 107], "plot_kernel_pca": [100, 107], "aid": [101, 258, 402, 782, 783, 977, 1004, 1022, 1034], "kevin": [101, 636, 1024, 1026, 1028, 1029, 1032, 1033, 1034, 1036, 1037], "hugh": [101, 867, 1024, 1035], "pdf": [101, 149, 261, 286, 303, 373, 376, 402, 411, 435, 442, 524, 527, 530, 534, 634, 637, 642, 651, 657, 659, 660, 664, 669, 672, 675, 676, 678, 679, 685, 829, 830, 841, 848, 885, 887, 976, 993, 996, 1003, 1018, 1022], "30000": [101, 371], "pdf_z": 101, "plot_fig": [101, 197], "fig_num": [101, 197], "pca_scor": [101, 103], "vt": [101, 543], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 171, 197], "plot_pca_3d": [101, 107], "cla": 102, "plot_pca_iri": [102, 107], "homoscedast": [103, 232, 307, 980, 1030], "succe": [103, 184], "subspac": [103, 405, 409, 445, 508, 548, 549, 684, 688, 929, 974, 983, 986, 992, 1004, 1014], "overestim": [103, 358, 406], "circumst": [103, 218, 983, 1000], "nip": [103, 373, 508, 534, 559, 634, 980], "604": [103, 534], "minka": [103, 534, 976], "deni": [103, 1024, 1025, 1029, 1030, 1031, 1037, 1038], "engemann": [103, 1024, 1025, 1029], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 139, 164, 165, 167, 254, 257, 266, 275, 277, 319, 337, 358, 376, 378, 387, 406, 409, 513, 568, 696, 734, 789, 813, 815, 900, 901, 969, 980, 1010, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1034, 1035], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 138, 190, 260, 264], "violet": [103, 1038], "277": [103, 107, 988, 1024], "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 270, 499, 500, 980, 1000], "92461872": 104, "05306648": 104, "x_r": [104, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "x_r2": 104, "201": [104, 107, 124, 149, 222, 227, 255, 277, 373, 577], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 407, 524, 530, 533, 541, 1029, 1030, 1032, 1034, 1036], "mexican": 105, "piecewis": [105, 316, 399, 971, 976, 990, 996], "matter": [105, 252, 358, 402, 409, 560, 661, 669, 671, 976, 1026], "motiv": [105, 376, 378, 389, 972, 980, 990, 1004, 1035], "heavier": [105, 404, 976], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 524, 530, 535, 541, 1032], "n_nonzero": 105, "coder": [105, 535, 709], "flatnonzero": [105, 188, 260, 269, 270, 773], "soft": [105, 133, 134, 376, 389, 562, 563, 888, 896, 994, 1004, 1027], "debias": 105, "lstsq": [105, 376, 650, 663], "rcond": 105, "278": [105, 107, 373, 832, 833], "plot_sparse_cod": [105, 107], "uncov": [106, 688], "inher": [106, 195, 358, 402, 407, 970, 972, 974, 975, 977, 981], "varimax": [106, 407, 525, 1034], "jona": [106, 1034], "sassenhagen": [106, 1034], "set_yticklabel": [106, 155, 164, 165, 173, 272, 349], "n_comp": [106, 176], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "435": [106, 107, 348], "plot_varimax_fa": [106, 107], "auto_examples_decomposit": 107, "custom": [108, 167, 240, 254, 262, 277, 283, 288, 313, 329, 334, 345, 347, 349, 368, 371, 374, 378, 383, 384, 385, 387, 388, 389, 401, 402, 403, 406, 412, 461, 482, 486, 487, 495, 497, 531, 533, 540, 542, 550, 551, 557, 558, 564, 566, 595, 624, 683, 692, 706, 789, 818, 856, 890, 897, 964, 969, 974, 980, 983, 995, 1000, 1001, 1004, 1015, 1017, 1022, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1037, 1038, 1039], "__sklearn_is_fitted__": [108, 167, 378, 416, 419, 964, 1035, 1036], "convent": [109, 261, 365, 376, 378, 379, 380, 382, 389, 420, 421, 424, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 462, 463, 464, 465, 466, 467, 468, 469, 501, 502, 524, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 540, 556, 559, 562, 563, 574, 575, 576, 581, 582, 584, 620, 621, 622, 623, 670, 681, 682, 683, 684, 711, 787, 788, 820, 821, 836, 838, 840, 844, 856, 864, 867, 868, 870, 884, 885, 896, 923, 924, 980, 1007, 1022, 1029, 1030, 1033, 1035, 1036, 1038], "subclass": [109, 378, 412, 567, 946, 1027, 1030, 1035], "showcas": [109, 378], "statu": [109, 161, 370, 380, 392, 489, 832, 833], "_is_fit": 109, "snippet": [109, 358, 376, 381, 384, 387, 398, 409, 410, 411, 970, 990, 1003, 1035], "customestim": 109, "classifiermixin": [109, 236, 376, 378, 389, 406, 1033], "kushan": 109, "kushansharma1": 109, "classes_": [109, 192, 209, 230, 236, 270, 322, 323, 376, 378, 389, 430, 431, 542, 543, 544, 546, 548, 550, 552, 554, 557, 560, 562, 586, 587, 603, 651, 652, 659, 661, 667, 668, 669, 690, 693, 695, 780, 789, 792, 793, 803, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 834, 839, 842, 849, 852, 859, 860, 863, 887, 888, 889, 892, 894, 897, 900, 902, 905, 980, 991, 994, 1023, 1026, 1027, 1029, 1032, 1034], "track": [109, 116, 124, 323, 376, 379, 380, 392, 398, 527, 949, 981, 1000, 1001, 1029, 1032], "notfittederror": [109, 389, 841, 964, 1026, 1028, 1031, 1032, 1038], "boolean": [109, 356, 371, 376, 378, 385, 403, 409, 410, 411, 457, 554, 555, 574, 575, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 622, 625, 626, 629, 642, 664, 692, 821, 827, 848, 855, 875, 908, 964, 970, 976, 982, 987, 990, 996, 1022, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1037], "sklearn_is_fit": 109, "predictor": [110, 136, 167, 200, 218, 378, 388, 389, 403, 405, 406, 409, 412, 459, 460, 475, 476, 477, 489, 509, 510, 511, 548, 549, 555, 558, 561, 595, 603, 623, 625, 626, 641, 646, 650, 662, 666, 673, 694, 813, 815, 824, 825, 853, 865, 866, 872, 954, 976, 981, 1023, 1029, 1032], "stack": [110, 136, 167, 286, 356, 375, 384, 387, 389, 401, 408, 457, 459, 460, 489, 508, 555, 558, 560, 561, 605, 620, 621, 623, 646, 666, 694, 813, 815, 853, 857, 865, 866, 872, 954, 970, 1000, 1001, 1002, 1003, 1017, 1022, 1025, 1029, 1030, 1031, 1032, 1033], "versu": [110, 132, 136, 167, 170, 178, 209, 215, 219, 235, 249, 254, 277, 289, 321, 328, 402, 406, 409, 412, 497, 513, 527, 546, 549, 603, 632, 651, 652, 659, 661, 667, 668, 669, 670, 775, 786, 789, 794, 814, 818, 824, 853, 888, 889, 896, 897, 900, 901, 969, 976, 980, 981, 986, 993, 994, 995, 1013, 1030], "isolationforest": [110, 136, 167, 229, 239, 624, 818, 896, 986, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038], "oob": [110, 124, 136, 167, 409, 508, 557, 1001, 1024, 1035], "votingclassifi": [110, 136, 167, 497, 557, 563, 624, 651, 830, 834, 897, 900, 969, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036], "vote": [110, 118, 133, 134, 136, 167, 279, 389, 390, 401, 494, 548, 549, 550, 553, 557, 558, 562, 563, 650, 820, 834, 835, 840, 842, 981, 983, 1002, 1013, 1017, 1022, 1025, 1027, 1032], "hasti": [111, 112, 115, 116, 123, 127, 149, 188, 260, 373, 406, 409, 512, 513, 546, 552, 553, 621, 649, 714, 715, 716, 822, 839, 885, 900, 901, 970, 974, 976, 981, 987, 992, 994, 996], "2009": [111, 112, 115, 116, 127, 184, 402, 406, 407, 409, 410, 512, 513, 521, 524, 530, 531, 533, 534, 537, 540, 546, 552, 553, 628, 664, 672, 689, 823, 900, 901, 928, 929, 976, 980, 981, 987, 996], "tibshirani": [111, 115, 116, 127, 149, 188, 260, 373, 406, 409, 513, 552, 553, 621, 649, 714, 715, 716, 822, 839, 900, 901, 970, 974, 976, 981, 987, 996], "friedman": [111, 115, 116, 127, 260, 404, 406, 409, 471, 509, 510, 511, 513, 551, 552, 553, 558, 586, 587, 822, 900, 901, 903, 974, 976, 981, 987, 996], "ed": [111, 116, 127, 402, 409, 513, 552, 553, 992, 1022, 1029], "springer": [111, 115, 116, 127, 260, 400, 402, 406, 407, 409, 513, 528, 552, 553, 683, 687, 689, 698, 713, 718, 732, 733, 748, 787, 900, 901, 977, 980, 981, 987, 996], "zhu": [111, 112, 409, 512, 546, 651, 887], "zou": [111, 112, 188, 409, 512, 546, 649, 976, 994], "rosset": [111, 112, 409, 512, 546], "make_hastie_10_2": [111, 123, 127, 265, 372, 409, 552, 987], "12_000": 111, "Be": [111, 146, 161, 347, 376, 404, 560, 561, 641, 647, 648, 649, 651, 652, 662, 673, 697, 807, 808, 867, 990, 1019, 1023], "stump": [111, 114, 409, 552, 1033], "2_000": [111, 112], "dt_stump": 111, "min_samples_leaf": [111, 118, 124, 125, 172, 313, 316, 352, 409, 550, 551, 552, 553, 554, 555, 557, 558, 559, 900, 901, 902, 903, 996, 1028], "dt_stump_err": 111, "dt_err": 111, "ada_discret": 111, "adaboostclassifieradaboostclassifi": 111, "decisiontreeclassifierdecisiontreeclassifi": [111, 356], "ada_r": 111, "zero_one_loss": [111, 376, 696, 726, 980, 1023, 1024, 1025], "ada_discrete_err": 111, "staged_predict": [111, 112, 126, 409, 546, 547, 552, 553, 554, 555, 1022, 1034], "ada_discrete_err_train": 111, "ada_real_err": 111, "ada_real_err_train": 111, "leg": 111, "fancybox": [111, 341], "get_fram": 111, "613": [111, 136], "plot_adaboost_hastie_10_2": [111, 136], "experi": [112, 155, 159, 169, 170, 171, 172, 176, 202, 308, 342, 348, 349, 363, 370, 376, 379, 401, 406, 508, 720, 777, 976, 981, 992, 998, 999, 1000, 1004, 1013, 1015], "depict": [112, 263, 409, 979], "principl": [112, 159, 286, 308, 349, 376, 387, 389, 390, 406, 409, 412, 929, 969, 979, 983, 994, 1029], "repeatedli": [112, 317, 358, 389, 402, 409, 412, 501, 539, 659, 660, 669, 670, 671, 773, 970, 984, 1010], "misclassifi": [112, 255, 347, 995], "349": [112, 382], "sphere": [112, 167, 220, 221, 227, 348, 408, 512, 582, 681, 682, 683, 684, 685, 756, 915, 974, 978, 983], "roughli": [112, 125, 189, 252, 271, 281, 308, 362, 389, 407, 410, 512, 977, 1022], "percent": [112, 485, 593, 993], "base_estim": [112, 315, 378, 400, 430, 546, 547, 548, 549, 823, 826, 889, 969, 976, 1033, 1035, 1036, 1037, 1038], "predecessor": [112, 443, 449, 450], "mistak": [112, 146, 323, 358, 402, 406, 727, 863, 877, 878, 880, 881, 882, 883, 976, 981], "samm": [112, 114, 409, 546], "incorrect": [112, 169, 268, 325, 358, 376, 402, 600, 601, 625, 626, 726, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "consecut": [112, 201, 400, 406, 410, 436, 440, 442, 443, 445, 449, 452, 455, 530, 531, 532, 539, 595, 638, 659, 660, 661, 669, 670, 671, 787, 788, 794, 827, 828, 829, 830, 831, 849, 850, 969, 990, 1015, 1030], "weak_learn": 112, "max_leaf_nod": [112, 118, 127, 200, 316, 356, 409, 550, 551, 552, 553, 554, 555, 557, 558, 559, 900, 901, 902, 903, 1025, 1031, 1033], "adaboost_clf": 112, "misclassification_error": 112, "dummyclassifi": [112, 264, 545, 980, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032], "preval": [112, 313, 389, 693, 705, 980], "dummi": [112, 113, 200, 218, 236, 264, 365, 378, 381, 397, 865, 874, 990, 996, 1017, 1023, 1025, 1026, 1027, 1029], "dummy_clf": [112, 544], "weak_learners_misclassification_error": 112, "dummy_classifiers_misclassification_error": 112, "475": [112, 161], "692": [112, 349], "surpass": [112, 849, 850], "conclud": [112, 170, 180, 218, 261, 349, 358, 390], "boosting_error": 112, "missclassif": 112, "jitter": [112, 643, 647, 1033], "stagewis": 112, "estimator_errors_": [112, 546, 547], "estimator_weights_": [112, 546, 547], "weak_learners_info": 112, "get_figur": 112, "reweight": [112, 348, 389, 404, 409, 583, 584, 641, 662, 673], "formul": [112, 152, 161, 204, 270, 376, 404, 407, 410, 412, 415, 468, 542, 543, 550, 557, 643, 644, 647, 648, 649, 651, 652, 658, 663, 755, 761, 788, 894, 897, 900, 902, 980, 981, 990, 1002, 1017], "mathemat": [112, 170, 188, 217, 264, 368, 373, 376, 389, 391, 401, 404, 407, 408, 542, 543, 550, 557, 628, 639, 649, 782, 783, 788, 850, 894, 897, 900, 902, 980, 990, 992, 1002, 1004, 1013, 1017, 1036], "th": [112, 239, 316, 356, 388, 402, 406, 409, 417, 434, 438, 444, 446, 452, 456, 465, 550, 551, 552, 553, 554, 555, 557, 558, 559, 586, 587, 625, 641, 642, 662, 664, 673, 689, 711, 772, 810, 873, 917, 970, 976, 980, 984, 987, 994, 995, 1037], "boil": [112, 379, 404], "forc": [112, 152, 185, 204, 281, 307, 347, 370, 374, 380, 397, 406, 409, 443, 450, 489, 599, 602, 639, 640, 645, 646, 650, 653, 654, 655, 656, 665, 666, 667, 674, 677, 680, 746, 770, 773, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 894, 895, 896, 897, 898, 910, 912, 913, 990, 1017, 1027, 1030, 1031, 1032, 1034, 1035, 1036], "plot_adaboost_multiclass": [112, 136], "1d": [113, 115, 167, 171, 201, 233, 282, 295, 341, 354, 376, 383, 385, 388, 389, 403, 408, 457, 460, 610, 626, 646, 650, 653, 656, 677, 696, 705, 706, 712, 721, 722, 726, 730, 734, 775, 776, 779, 786, 834, 835, 836, 837, 838, 840, 842, 843, 844, 857, 908, 912, 913, 943, 967, 981, 1006, 1013, 1022, 1027, 1028, 1029, 1031, 1035, 1036], "299": [113, 673], "drucker": [113, 409, 547], "1997": [113, 371, 407, 409, 412, 528, 547, 683, 687, 976, 977, 980], "decisiontreeregressor": [113, 115, 240, 304, 313, 319, 354, 355, 381, 547, 549, 551, 552, 553, 555, 558, 625, 626, 900, 903, 905, 924, 970, 996, 1023, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "adaboostregressor": [113, 409, 546, 555, 1024, 1025, 1028, 1031, 1032, 1035, 1037, 1038], "regr_1": [113, 354, 355], "regr_2": [113, 354, 355], "y_1": [113, 354, 355, 405, 980, 984, 994], "y_2": [113, 354, 355, 984], "439": [113, 136, 152], "plot_adaboost_regress": [113, 136], "puriti": [114, 904, 906], "plot_adaboost_twoclass": [114, 136], "73": [114, 265, 323, 388, 789, 803, 838, 901, 990, 1011, 1022, 1024], "bdt": 114, "plot_color": [114, 353], "br": 114, "plot_step": [114, 121, 353], "class_nam": [114, 255, 904, 905, 906, 996, 1038], "xx0": [114, 624], "twoclass_output": 114, "plot_rang": 114, "irreduc": [115, 980], "light": [115, 371], "beam": [115, 1022], "pointwis": [115, 159, 413, 437], "offset": [115, 176, 387, 404, 407, 462, 501, 502, 556, 625, 626, 634, 635, 637, 638, 670, 720, 767, 769, 838, 896, 980, 994, 1013, 1030], "narrow": [115, 125, 303, 305, 381, 832, 833], "bootstrap": [115, 116, 124, 164, 264, 273, 315, 406, 409, 547, 548, 549, 550, 551, 556, 557, 558, 918, 951, 976, 1022, 1023, 1025, 1027, 1030, 1032, 1035], "stem": [115, 172, 199, 252, 406, 410, 972, 982], "0255": 115, "0003": 115, "0152": 115, "0098": 115, "0196": 115, "0004": [115, 308], "0092": 115, "baggingregressor": [115, 409, 548, 903, 970, 1025, 1028, 1030, 1033, 1037, 1038], "n_repeat": [115, 119, 126, 148, 170, 172, 173, 261, 313, 406, 508, 627, 804, 805, 988], "knn": [115, 133, 140, 164, 289, 290, 293, 308, 315, 324, 347, 409, 595, 841, 887, 888, 983, 993, 1013, 1028], "y_predict": [115, 378, 1022], "y_error": [115, 206], "y_nois": 115, "y_bia": 115, "y_var": 115, "plot_bias_vari": [115, 136], "z_i": [116, 984], "y_i": [116, 316, 342, 400, 409, 971, 972, 976, 980, 984, 994, 995, 996], "whilst": [116, 223], "practition": [116, 204], "suitabl": [116, 125, 184, 186, 204, 298, 349, 370, 371, 382, 385, 402, 407, 410, 445, 455, 461, 480, 498, 501, 620, 628, 827, 828, 831, 866, 867, 890, 945, 949, 974, 976, 979, 990, 992, 994, 1000, 1003, 1015, 1036, 1037], "p592": 116, "593": 116, "kian": [116, 1027, 1037, 1038], "ho": [116, 409, 548, 549, 980, 1027, 1030, 1031, 1036], "hui": [116, 188, 531, 533, 540, 649, 976], "ordereddict": 116, "123": [116, 134, 348, 358, 409, 509, 510, 511, 548, 549, 825, 981, 988], "warm_start": [116, 156, 193, 316, 378, 382, 389, 409, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 603, 639, 641, 642, 645, 651, 653, 655, 659, 660, 661, 662, 669, 670, 671, 673, 787, 788, 841, 849, 850, 986, 1002, 1017, 1022, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1036, 1038], "trajectori": 116, "ensemble_clf": 116, "oob_scor": [116, 409, 548, 549, 550, 551, 557, 558, 1027, 1029], "log2": [116, 210, 241, 550, 551, 552, 553, 557, 558, 900, 901, 902, 903, 981], "error_r": 116, "min_estim": 116, "max_estim": 116, "oob_error": 116, "oob_score_": [116, 548, 549, 550, 551, 552, 553, 557, 558, 1024, 1038], "clf_err": 116, "plot_ensemble_oob": [116, 136], "betatim": [117, 131, 1037], "leak": [117, 266, 347, 358, 403, 406, 852, 877, 878, 880, 881, 882, 883, 990, 1022, 1029, 1032], "80_000": 117, "x_full_train": 117, "y_full_train": 117, "x_train_ensembl": 117, "x_train_linear": 117, "y_train_ensembl": 117, "y_train_linear": 117, "gradientboostingclassifi": [117, 123, 124, 127, 305, 358, 387, 546, 554, 625, 626, 981, 987, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "random_forest": 117, "gradient_boost": [117, 1024, 1025, 1031], "histgradientboostingclassifi": [117, 118, 313, 314, 315, 316, 318, 363, 552, 557, 625, 626, 970, 1000, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "randomtreesembed": [117, 130, 222, 409, 902, 1023, 1030, 1031, 1035, 1036, 1037], "random_tree_embed": 117, "rt_model": 117, "randomtreesembeddingrandomtreesembed": 117, "rf_appli": 117, "rf_leaves_yield": 117, "kw_arg": [117, 856, 990, 1028], "rf_model": 117, "0x7f7f4080c280": 117, "functiontransformerfunctiontransform": 117, "gbdt_appli": 117, "gbdt_leaves_yield": 117, "gbdt_model": 117, "0x7f7f40f0aa60": 117, "roccurvedisplai": [117, 239, 242, 258, 270, 271, 313, 383, 780, 781, 986, 1019, 1032, 1038], "rt": 117, "rf": [117, 118, 131, 134, 135, 172, 313, 358, 409, 560, 562, 563], "gbdt": [117, 171, 313, 314, 319, 381, 409], "model_displai": 117, "083": [117, 136, 259], "plot_feature_transform": [117, 136], "hgbt": [118, 409], "fetch_california_h": [118, 164, 165, 303, 315, 371, 388, 403, 1031, 1033], "20640": [118, 165, 371, 483], "n_core": 118, "only_physical_cor": 118, "unnecessari": [118, 246, 381, 436, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 698, 983, 990, 1001, 1004, 1025, 1027, 1032, 1033, 1035, 1038], "early_stop": [118, 171, 208, 297, 316, 347, 389, 409, 554, 555, 659, 660, 661, 669, 670, 671, 849, 850, 994, 1030, 1033, 1036, 1037], "return_train_scor": [118, 265, 309, 406, 789, 792, 793, 803, 815, 1028, 1029, 1031], "wast": [118, 382, 406, 407, 969], "plotli": [118, 262, 376, 392, 395], "cursor": [118, 262], "px": [118, 262], "make_subplot": 118, "shared_yax": 118, "subplot_titl": 118, "model_nam": [118, 239, 279], "colors_list": 118, "param_nam": [118, 262, 276, 319, 342, 393, 811, 819, 975, 1015], "param_": 118, "scatter_fig": 118, "mean_fit_tim": [118, 283, 789, 803], "error_x": [118, 262], "std_fit_tim": [118, 283, 789, 803], "error_i": [118, 262], "hover_data": [118, 262], "line_fig": 118, "scatter_trac": 118, "line_trac": 118, "add_trac": 118, "mean_score_tim": [118, 259, 262, 789, 803], "std_score_tim": [118, 262, 789, 803], "update_layout": [118, 262], "xaxis2": 118, "traceord": 118, "borderwidth": 118, "plateau": [118, 148, 259, 263], "earlier": [118, 171, 204, 370, 376, 405, 823, 826, 990, 998, 1020, 1023, 1035, 1037], "never": [118, 237, 358, 376, 385, 387, 396, 402, 403, 405, 406, 443, 450, 516, 539, 548, 549, 550, 557, 852, 853, 972, 990, 1032, 1035], "hgbdt": 118, "domin": [118, 165, 200, 205, 270, 308, 371, 382, 400, 872, 982, 990, 996, 1038], "ever": [118, 131, 385, 409, 1004], "disput": 118, "alwai": [118, 122, 125, 179, 200, 218, 226, 233, 264, 267, 271, 310, 331, 348, 358, 362, 363, 370, 376, 377, 378, 382, 388, 389, 392, 400, 402, 403, 406, 409, 410, 411, 412, 425, 436, 442, 457, 458, 460, 462, 475, 476, 477, 481, 489, 501, 502, 537, 542, 544, 545, 547, 549, 551, 552, 553, 554, 555, 557, 558, 561, 563, 574, 581, 582, 584, 587, 604, 620, 621, 623, 625, 626, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 669, 671, 672, 688, 698, 702, 708, 714, 715, 716, 724, 726, 727, 731, 774, 777, 778, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 825, 826, 835, 836, 843, 844, 850, 857, 865, 870, 872, 885, 893, 894, 895, 897, 898, 900, 901, 903, 930, 939, 969, 970, 972, 974, 976, 979, 980, 983, 986, 988, 992, 993, 995, 996, 1004, 1006, 1013, 1022, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "thumb": [118, 176, 362, 376, 377, 387, 402, 651, 652, 659, 661, 669, 670, 671, 892, 980], "737": [118, 136, 139, 142, 235, 273, 277, 517], "plot_forest_hist_grad_boosting_comparison": [118, 136], "artifici": [119, 122, 129, 149, 165, 204, 221, 235, 300, 347, 371, 372, 373, 381, 399, 401, 402, 406, 407, 412, 528, 689, 822, 849, 850, 973, 977, 979, 981, 987, 992, 996, 1001, 1004, 1022], "feature_importances_": [119, 120, 126, 149, 172, 173, 389, 409, 411, 546, 547, 550, 551, 552, 553, 557, 558, 559, 586, 587, 590, 900, 901, 902, 903, 1024, 1027, 1031], "estimators_": [119, 121, 237, 313, 389, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 820, 821, 822, 823, 824, 825, 826, 1023, 1029, 1036], "forest_import": 119, "mdi": [119, 126, 167, 168, 173, 174, 409, 457, 489, 557, 623, 627, 818, 852, 866, 988], "overcom": [119, 204, 362, 410], "permutation_import": [119, 120, 126, 172, 173, 313, 409, 546, 547, 550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 988, 1032, 1034, 1035], "importances_mean": [119, 126, 172, 173, 313, 627, 988], "492": [119, 636, 973, 1013], "importances_std": [119, 627, 988], "omit": [119, 169, 170, 327, 381, 415, 468, 527, 659, 661, 669, 796, 798, 820, 821, 824, 827, 828, 829, 830, 831, 849, 978, 985], "990": [119, 136, 662, 980], "plot_forest_import": [119, 136], "hotter": 120, "job": [120, 249, 376, 380, 384, 409, 413, 430, 437, 439, 441, 443, 445, 450, 451, 454, 457, 460, 461, 465, 524, 528, 529, 530, 532, 535, 536, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 595, 603, 627, 632, 650, 681, 682, 683, 684, 685, 686, 687, 766, 770, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 851, 854, 887, 888, 890, 946, 1004, 1008], "five": [120, 247, 323, 326, 371, 524, 532, 538, 977, 983, 995, 1004, 1022], "drawback": [120, 217, 972, 975], "img_shap": 120, "imp_reshap": 120, "met": [120, 236, 378, 411, 527, 534, 620, 664, 976, 980, 1030], "210": [120, 136], "plot_forest_importances_fac": [120, 136], "third": [121, 126, 144, 149, 160, 218, 229, 252, 286, 305, 319, 363, 371, 375, 387, 390, 410, 527, 581, 582, 583, 584, 791, 792, 793, 798, 834, 835, 836, 838, 840, 870, 882, 948, 969, 991, 998, 1022, 1033, 1038], "fourth": [121, 1006], "descend": [121, 620, 1032], "extratreesclassifi": [121, 130, 409, 411, 551, 557, 559, 902, 903, 981, 1025, 1026, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039], "decisiontre": [121, 1027], "consol": [121, 374, 1007], "extratre": [121, 130, 362, 1025], "sequenti": [121, 143, 150, 167, 194, 262, 315, 374, 407, 409, 410, 493, 494, 527, 586, 590, 595, 596, 598, 599, 639, 640, 645, 646, 651, 653, 654, 655, 656, 666, 780, 852, 853, 872, 970, 988, 994, 1000, 1002, 1017, 1022, 1031, 1034], "9266666666666666": 121, "8666666666666667": 121, "9933333333333333": 121, "rdylbu": [121, 353], "plot_step_coars": 121, "plot_idx": 121, "model_titl": 121, "model_detail": 121, "blend": [121, 132, 309, 389, 406, 1000], "estimator_alpha": 121, "coarser": [121, 125], "regularli": [121, 387, 982], "xx_coarser": 121, "yy_coars": 121, "z_points_coars": 121, "cs_point": 121, "155": [121, 136], "plot_forest_iri": [121, 136], "equidist": [122, 685], "lowa": 122, "sale": [122, 261, 980, 1004], "42165": 122, "categorical_columns_subset": 122, "bldgtype": 122, "garagefinish": 122, "lotconfig": 122, "masvnrtyp": [122, 132], "housestyl": [122, 132], "fireplacequ": 122, "extercond": 122, "exterqu": [122, 132], "poolqc": 122, "numerical_columns_subset": 122, "3ssnporch": 122, "fireplac": 122, "bsmthalfbath": 122, "halfbath": 122, "garagecar": [122, 132], "totrmsabvgrd": 122, "bsmtfinsf1": [122, 132], "bsmtfinsf2": 122, "grlivarea": 122, "screenporch": 122, "n_categorical_featur": [122, 554, 555, 625, 626], "n_numerical_featur": 122, "1460": [122, 132], "make_column_transform": [122, 132, 170, 231, 314, 403, 457, 459, 1030], "dropper": 122, "hist_drop": 122, "hist_one_hot": 122, "etc": [122, 200, 218, 256, 265, 266, 358, 362, 364, 376, 378, 380, 381, 387, 388, 389, 393, 399, 403, 406, 410, 482, 496, 550, 551, 557, 558, 661, 669, 685, 711, 763, 789, 803, 823, 826, 856, 867, 900, 901, 902, 903, 904, 906, 912, 913, 923, 969, 970, 974, 980, 983, 1000, 1001, 1004, 1022, 1029, 1031, 1032], "use_encoded_valu": [122, 132, 172, 309, 866, 990, 1034], "unknown_valu": [122, 132, 172, 309, 866, 990, 1034, 1036, 1037], "hist_ordin": 122, "n_unique_categori": [122, 309], "hist_n": 122, "mean_absolute_percentage_error": [122, 980, 1034, 1036], "neg_mean_absolute_percentage_error": [122, 980, 988], "n_cv_fold": [122, 309, 795, 811, 816, 819], "dropped_result": 122, "one_hot_result": 122, "ordinal_result": 122, "native_result": 122, "plot_result": [122, 246, 247, 252], "figure_titl": 122, "plot_info": 122, "test_scor": [122, 124, 126, 208, 260, 263, 309, 342, 352, 388, 406, 795, 811, 815, 816, 819], "y_limit": 122, "mape_cv_mean": 122, "mape_cv_std": 122, "c0": [122, 232, 309], "slowest": [122, 928, 929], "theori": [122, 235, 251, 342, 373, 401, 402, 406, 409, 683, 687, 718, 748, 884, 885, 929, 969, 976, 977, 979, 980, 981, 995, 996], "poorer": [122, 358, 407], "slight": [122, 205, 315, 409, 442, 1032], "acf": 122, "bde": 122, "isol": [122, 128, 229, 239, 348, 374, 376, 382, 392, 556, 838, 896, 1031, 1032], "bcde": 122, "histgradientboostingregressor__max_depth": 122, "histgradientboostingregressor__max_it": 122, "altogeth": [122, 382, 1030], "906": [122, 136], "plot_gradient_boosting_categor": [122, 136], "validation_fract": [123, 208, 316, 409, 552, 553, 554, 555, 659, 660, 661, 669, 671, 849, 850, 994, 1030, 1036], "denot": [123, 385, 389, 392, 400, 402, 406, 409, 581, 582, 584, 789, 795, 803, 811, 865, 866, 965, 969, 972, 976, 978, 980, 981, 990, 993, 1006], "kept": [123, 251, 281, 342, 370, 380, 396, 412, 489, 528, 531, 533, 534, 539, 540, 590, 603, 604, 612, 613, 637, 688, 787, 788, 913, 990, 1030, 1031], "asid": [123, 208, 396, 552, 553, 554, 555, 659, 660, 661, 669, 671, 849, 850], "n_estimators_": [123, 552, 553], "vighnesh": [123, 1027, 1028, 1030], "birodkar": [123, 1027, 1028, 1030], "vighneshbirodkar": 123, "rvraghav93": [123, 265, 303], "data_list": 123, "n_gb": 123, "score_gb": 123, "time_gb": 123, "n_gbe": 123, "gbe": 123, "gb": [123, 135, 409, 546, 626], "bar_width": 123, "bar1": 123, "crimson": 123, "bar2": 123, "coral": 123, "n_est": 123, "max_i": [123, 237, 982], "714": [123, 136], "plot_gradient_boosting_early_stop": [123, 136], "fly": [124, 381, 384, 501, 502, 575, 1022, 1024, 1031], "pessimist": [124, 409], "cumul": [124, 200, 218, 402, 718, 727, 748, 869, 881, 990, 994, 1029, 1031, 1032], "demand": [124, 410, 789, 803, 813, 814], "6820": 124, "special": [124, 170, 190, 218, 291, 309, 334, 370, 372, 378, 382, 387, 389, 402, 405, 407, 457, 460, 546, 548, 552, 813, 904, 969, 974, 976, 978, 979, 980, 981, 983, 996, 1029, 1032, 1034, 1036], "expit": [124, 190, 409, 554, 976, 1029], "ridgewai": [124, 409], "gbm": [124, 409, 1025], "x3": [124, 239, 403, 1014], "binomi": [124, 127, 409, 546, 552, 554, 976, 1036], "acc": 124, "heldout_scor": 124, "devianc": [124, 127, 200, 218, 319, 409, 546, 551, 552, 554, 555, 558, 641, 662, 673, 714, 715, 716, 739, 741, 744, 901, 903, 976, 996, 1023, 1032, 1033, 1035, 1036, 1038], "y_proba": [124, 127, 308, 389, 852], "staged_predict_proba": [124, 127, 546, 552, 554, 1022], "cv_estim": 124, "cv_clf": 124, "val_scor": 124, "cv_score": 124, "cumsum": [124, 200, 218, 1029], "oob_improvement_": [124, 409, 552, 553, 1024], "oob_best_it": 124, "test_best_it": 124, "cv_best_it": 124, "brew": [124, 374, 392], "oob_color": 124, "174": [124, 251, 253, 300, 317, 320, 382, 577], "212": [124, 149, 266, 325, 373, 462, 493, 986, 1013], "test_color": 124, "cv_color": 124, "253": [124, 527], "192": [124, 242, 244, 382, 1022], "oob_lin": 124, "test_lin": 124, "cv_line": 124, "dashdot": [124, 152, 155], "xticks_po": 124, "tolist": [124, 164, 173, 260, 315, 371], "xticks_label": 124, "024": [124, 136], "plot_gradient_boosting_oob": [124, 136], "atleast_2d": [125, 378], "expected_i": 125, "amplitud": [125, 157, 159, 194, 412, 976], "lognorm": [125, 158, 181, 250, 307, 990], "tail": [125, 165, 170, 200, 202, 261, 303, 514, 517, 976], "imposs": [125, 349, 1001], "mean_pinball_loss": [125, 316, 976, 980, 1035], "all_model": 125, "min_samples_split": [125, 126, 127, 265, 273, 304, 315, 409, 550, 551, 552, 553, 557, 558, 559, 792, 793, 900, 901, 902, 903, 969, 996, 1028], "gbr": 125, "gbr_l": 125, "5th": [125, 160, 402], "95th": [125, 740], "y_med": 125, "fill_between": [125, 138, 152, 157, 159, 161, 179, 180, 218, 261, 263, 264, 265, 271, 795, 811], "unfortun": [125, 169, 170, 218, 384, 387, 409, 501, 502], "sinoisoid": 125, "highlight_min": [125, 189], "font": [125, 189, 214, 234, 904, 906], "pbl": 125, "nbsp": [125, 189], "715413": 125, "750348": 125, "127128": 125, "253445": 125, "379763": 125, "933253": 125, "305438": 125, "622811": 125, "940184": 125, "827917": 125, "909909": 125, "145957": 125, "382005": 125, "667219": 125, "asymmetr": [125, 202, 389, 1027], "nor": [125, 264, 347, 358, 362, 381, 387, 410, 430, 439, 587, 916, 984, 996, 1033], "917281": 125, "767498": 125, "617715": 125, "692901": 125, "144204": 125, "245961": 125, "347717": 125, "648026": 125, "412021": 125, "607752": 125, "803483": 125, "874771": 125, "354394": 125, "355445": 125, "356497": 125, "852774": 125, "underestim": [125, 171, 200, 218, 261, 376], "extrem": [125, 200, 202, 238, 303, 310, 325, 348, 376, 379, 402, 407, 550, 551, 557, 558, 559, 625, 626, 672, 716, 744, 902, 903, 904, 906, 980, 982], "coverage_fract": 125, "y_low": 125, "y_high": 125, "868": [125, 145], "hypothesi": [125, 261, 267, 342, 406, 683, 687, 817, 977], "pinbal": [125, 316, 555, 663, 715, 740, 976, 1035, 1036], "experiment": [125, 164, 165, 200, 272, 273, 315, 316, 365, 376, 378, 379, 386, 387, 389, 393, 406, 489, 542, 620, 689, 792, 793, 950, 969, 970, 976, 979, 980, 1000, 1001, 1009, 1017, 1030, 1031, 1034, 1035, 1036, 1037, 1039], "enable_halving_search_cv": [125, 272, 273, 315, 380, 792, 793, 969], "halvingrandomsearchcv": [125, 273, 315, 572, 792, 969, 1034, 1036, 1037], "make_scor": [125, 265, 393, 406, 789, 814, 815, 980, 1031], "neg_mean_pinball_loss_05p_scor": 125, "greater_is_bett": [125, 734, 980], "search_05p": 125, "max_resourc": [125, 792, 793, 969], "min_resourc": [125, 792, 793], "neg_mean_pinball_loss_95p_scor": 125, "search_95p": 125, "estimator__alpha": 125, "did": [125, 152, 170, 173, 200, 208, 218, 247, 310, 371, 620, 705, 808, 894, 1014, 1023, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037], "untun": 125, "joint": [125, 167, 171, 178, 219, 221, 403, 604, 645, 655, 685, 827, 828, 829, 830, 831, 892, 976, 977, 981, 985, 987, 991, 1022], "9026666666666666": 125, "796": 125, "sadli": 125, "plot_gradient_boosting_quantil": [125, 136], "tackl": [126, 261, 363, 376, 402, 829, 982, 1004, 1009], "katrina": [126, 1033], "ni": [126, 1028, 1033], "nilichen": 126, "reg": [126, 170, 180, 236, 304, 314, 339, 409, 551, 553, 561, 643, 644, 646, 647, 648, 649, 650, 656, 657, 658, 663, 664, 671, 672, 682, 686, 903, 976, 1027], "3025": 126, "7877": 126, "train_score_": [126, 409, 552, 553, 554, 555], "impur": [126, 356, 391, 409, 411, 546, 547, 550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 904, 906, 996, 1017, 1027, 1028, 1029, 1030], "feature_import": 126, "sorted_idx": [126, 313], "po": [126, 224, 410], "align": [126, 165, 221, 246, 272, 349, 389, 682, 686, 983, 994, 1016, 1017, 1038], "vert": [126, 172, 173, 313, 994], "plot_gradient_boosting_regress": [126, 136], "consider": [127, 153, 156, 256, 262, 268, 376, 412, 612, 789, 803, 969, 982, 986, 994, 1004], "return_invers": [127, 378], "original_param": 127, "test_devi": 127, "514": [127, 136], "plot_gradient_boosting_regular": [127, 136], "anomali": [128, 167, 228, 239, 244, 287, 288, 371, 401, 462, 505, 515, 556, 632, 670, 838, 853, 896, 986, 1000, 1028, 1029], "recurs": [128, 143, 150, 167, 352, 378, 401, 402, 406, 433, 434, 435, 438, 456, 495, 508, 556, 586, 587, 590, 595, 625, 626, 651, 808, 897, 980, 983, 986, 987, 996, 1002, 1014, 1017, 1022, 1032, 1033], "deform": [128, 251, 344], "notat": [128, 389, 403, 407, 410, 583, 705, 976, 980, 1006, 1031, 1038], "120": [128, 222, 411, 583, 1022], "cluster_1": 128, "cluster_2": 128, "legend_el": [128, 213, 264], "nuniformli": 128, "max_sampl": [128, 164, 409, 548, 549, 550, 551, 556, 557, 558, 627, 1032, 1035, 1038], "isolationforestisolationforest": 128, "ax_": [128, 255, 264, 268, 276, 308, 313, 383, 431, 624, 690, 691, 693, 694, 695, 795, 811], "nof": 128, "443": [128, 136, 230, 244, 252, 253], "plot_isolation_forest": [128, 136], "trend": [129, 157, 171, 232, 298, 412, 1004, 1029], "xgboost": [129, 409, 1000], "partialdependencedisplai": [129, 171, 240, 314, 315, 316, 318, 383, 626, 987, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "f_0": 129, "f_1": [129, 268, 980], "gbdt_no_cst": [129, 314], "histgradientboostingregressorhistgradientboostingregressor": [129, 132, 309, 318], "gbdt_with_monotonic_cst": 129, "monotonic_cst": [129, 314, 316, 409, 550, 551, 554, 555, 557, 558, 900, 901, 902, 903, 1037], "line_kw": [129, 240, 263, 314, 625, 795, 811], "unconstrain": [129, 171, 314, 371, 994], "axes_": [129, 240, 314, 383, 625], "f_idx": 129, "oscil": [129, 171, 205, 402, 433], "x_df": 129, "gbdt_with_monotonic_cst_df": 129, "601": [129, 136], "plot_monotonic_constraint": [129, 136], "excel": [130, 370, 376, 409, 683, 687, 976, 1004], "bernoullinb": [130, 364, 828, 829, 830, 831, 981, 982, 1023, 1024, 1026, 1029, 1034, 1035, 1037], "hasher": [130, 349, 410], "transformed_grid": 130, "y_grid_pr": 130, "plot_random_forest_embed": [130, 136], "multioutput": [131, 270, 279, 365, 378, 389, 425, 458, 475, 476, 477, 544, 547, 549, 550, 551, 553, 555, 557, 558, 561, 563, 604, 625, 626, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 714, 715, 720, 737, 738, 740, 742, 743, 745, 777, 780, 813, 821, 835, 843, 850, 859, 893, 895, 898, 900, 901, 902, 903, 918, 943, 944, 980, 1002, 1017, 1022, 1023, 1024, 1028, 1029, 1035, 1036], "multioutputregressor": [131, 425, 458, 475, 476, 477, 547, 549, 551, 553, 555, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 824, 826, 835, 843, 850, 893, 895, 898, 901, 903, 1028, 1029, 1031, 1033, 1034, 1038], "nativ": [131, 164, 363, 371, 389, 409, 554, 555, 824, 825, 948, 976, 980, 1000, 1032, 1034], "centr": 131, "regr_multirf": 131, "regr_rf": 131, "y_multirf": 131, "y_rf": 131, "cornflowerblu": [131, 194, 203, 210, 247, 249, 252, 268, 270, 284, 286, 292, 354, 355], "497": [131, 136], "plot_random_forest_regression_multioutput": [131, 136], "compil": [132, 281, 349, 362, 363, 376, 377, 378, 379, 384, 385, 387, 1000, 1022], "dean": [132, 1030, 1036, 1038], "cock": [132, 1031], "becam": [132, 390, 1030], "kaggl": [132, 388], "residenti": 132, "iowa": 132, "won": [132, 299, 348, 380, 402, 461, 489, 620, 621, 623, 680, 697, 710, 728, 729, 747, 749, 785, 979, 990, 1027, 1028, 1033], "load_ames_h": 132, "yrsold": 132, "heatingqc": 132, "street": [132, 149, 373], "yearremodadd": 132, "heat": [132, 334, 402, 445, 455, 688], "bsmtunfsf": 132, "mssubclass": 132, "condition2": 132, "garagetyp": 132, "overallqu": 132, "totalbsmtsf": 132, "miscfeatur": 132, "mosold": 132, "cat_selector": 132, "num_selector": 132, "besid": [132, 232, 376, 381, 582, 969, 1030], "cat_tree_processor": 132, "encoded_missing_valu": [132, 172, 866, 990, 1036, 1037], "num_tree_processor": 132, "add_ind": [132, 165, 620, 621, 623, 970, 1031, 1034], "tree_preprocessor": [132, 200], "0x7f7f33df9b80": 132, "0x7f7f33df98e0": 132, "ordinalencoderordinalencod": [132, 171, 172, 309], "cat_linear_processor": 132, "num_linear_processor": 132, "linear_preprocessor": 132, "tediou": 132, "wrote": [132, 371], "lasso_pipelin": 132, "lassocvlassocv": 132, "rf_pipelin": 132, "randomforestregressorrandomforestregressor": 132, "gbdt_pipelin": 132, "stackingregressor": [132, 313, 389, 409, 560, 1032, 1033, 1034, 1035, 1036], "stacking_regressor": 132, "final_estim": [132, 313, 409, 560, 561], "unknown_v": 132, "stackingregressorstackingregressor": 132, "forestcolumntransform": 132, "lassocolumntransform": 132, "boostingcolumntransform": 132, "final_estimatorridgecvridgecv": 132, "cross_val_predict": [132, 257, 313, 400, 406, 409, 430, 560, 561, 814, 815, 1026, 1027, 1028, 1029, 1031, 1033, 1035], "scorer": [132, 218, 265, 378, 389, 393, 406, 409, 554, 555, 587, 595, 627, 652, 666, 668, 704, 724, 725, 734, 789, 792, 793, 795, 803, 811, 814, 815, 816, 819, 938, 969, 976, 980, 988, 1001, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039], "test_": [132, 406], "line_kwarg": [132, 694], "nevalu": 132, "147": [132, 136, 981], "plot_stack_predictor": [132, 136], "exemplari": 133, "eclf": [133, 134, 409], "axarr": [133, 303], "tt": [133, 256, 458], "672": [133, 136], "plot_voting_decision_region": [133, 136], "examplari": 134, "class1_1": 134, "class2_1": 134, "lightgreen": [134, 206, 217], "p3": 134, "p4": 134, "nweight": 134, "plot_voting_proba": [134, 136], "votingregressor": [135, 409, 562, 1031, 1032, 1033, 1036], "cohort": 135, "reg1": [135, 409], "reg2": [135, 409], "reg3": [135, 409], "ereg": [135, 409], "votingregressorvotingregressor": 135, "gbgradientboostingregressorgradientboostingregressor": 135, "rfrandomforestregressorrandomforestregressor": 135, "lrlinearregressionlinearregress": 135, "xt": [135, 281, 389, 438, 531, 533, 620, 622, 789, 792, 793, 803, 836, 844, 852, 857, 862, 869, 881, 910, 1038], "pred1": 135, "pred2": 135, "pred3": 135, "pred4": 135, "labelbottom": [135, 261], "921": [135, 136], "plot_voting_regressor": [135, 136], "216": [136, 993], "auto_examples_ensembl": 136, "n_fold": [138, 640, 644, 646, 648, 652, 654, 656, 1023, 1024, 1028], "scores_std": [138, 139], "semilogx": [138, 139, 189, 274], "std_error": 138, "transluc": 138, "999999999999999e": 138, "31622776601683794": 138, "answer": [138, 169, 261, 376, 387, 718, 748, 980, 1004], "extern": [138, 152, 364, 365, 369, 373, 376, 378, 381, 387, 389, 399, 402, 410, 411, 412, 586, 603, 604, 710, 729, 785, 976, 979, 980, 983, 996, 1001, 1007, 1013, 1017, 1030, 1034], "lasso_cv": 138, "k_fold": [138, 1010], "maximis": [138, 247, 289, 974, 983], "5f": [138, 317], "moreov": [138, 158, 305, 317, 358, 380, 402, 406, 412, 885, 950, 980, 1004, 1030, 1036, 1037], "substanti": [138, 283, 287, 288, 304, 376, 838, 986, 1026, 1029], "05968": 138, "54209": 138, "04520": 138, "15521": 138, "07880": 138, "45192": 138, "527": [138, 142, 260, 277], "plot_cv_diabet": [138, 142], "this_scor": [139, 337], "plot_cv_digit": [139, 142], "961111": 140, "933333": [140, 841], "plot_digits_classification_exercis": [140, 142], "200j": [141, 338], "418": [141, 142], "plot_iris_exercis": [141, 142], "824": 142, "auto_examples_exercis": 142, "exercis": [142, 364, 365, 373, 376, 494, 495, 497, 498, 645, 646, 651, 789, 794, 814, 834, 897, 1007, 1025], "elimin": [143, 150, 167, 401, 402, 406, 441, 495, 508, 586, 587, 590, 595, 651, 792, 793, 808, 897, 966, 980, 1002, 1004, 1017, 1022], "x_2": [144, 155, 197, 407, 409, 410, 412, 606, 618, 976, 984, 990], "x_3": [144, 990], "irrelev": [144, 184, 358, 382, 404, 409, 411, 597, 732, 980], "agre": [144, 384, 390, 401, 402, 778, 1006], "percept": [144, 171, 987], "correctli": [144, 148, 200, 218, 236, 268, 270, 275, 291, 310, 324, 334, 376, 385, 407, 409, 419, 430, 462, 486, 542, 543, 544, 546, 548, 550, 552, 554, 557, 560, 562, 603, 651, 659, 661, 667, 668, 669, 696, 784, 786, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 839, 842, 849, 872, 887, 888, 892, 894, 895, 896, 897, 898, 900, 902, 930, 977, 980, 983, 984, 990, 995, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "mutual_info_regress": [144, 317, 411, 585, 588, 589, 592, 593, 602, 1028, 1029, 1034, 1036, 1037, 1038, 1039], "f_test": 144, "x_": [144, 153, 252, 261, 313, 378, 402, 405, 407, 620, 628, 756, 887, 888, 976, 982, 987, 1028], "plot_f_test_vs_mi": [144, 150], "examin": [145, 382, 384, 402, 841], "f_classif": [145, 146, 337, 411, 585, 588, 589, 591, 592, 593, 597, 599, 602], "log10": [145, 158, 170, 185, 193, 262, 334], "pvalues_": [145, 585, 588, 589, 591, 592, 593, 1022], "x_indic": 145, "p_": [145, 980, 983, 996], "svm_weight": 145, "789": [145, 409], "clf_select": 145, "svm_weights_select": 145, "get_support": [145, 149, 315, 574, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 1024], "198": [145, 150, 1022], "plot_feature_select": [145, 150], "anova_filt": 146, "anova_svm": 146, "selectkbestselectkbest": [146, 317], "linearsvclinearsvc": [146, 268], "75788833": 146, "27161955": 146, "26113448": 146, "plot_feature_selection_pipelin": [146, 150], "rfe": [147, 148, 411, 587, 590, 595, 1022, 1026, 1032, 1033, 1034, 1035, 1036, 1038], "n_features_to_select": [147, 149, 315, 411, 586, 595, 1034, 1036], "ranking_": [147, 586, 587], "plot_rfe_digit": [147, 150], "introduct": [148, 218, 259, 365, 376, 406, 407, 410, 583, 780, 781, 827, 831, 976, 978, 980, 982, 999, 1007, 1013, 1016, 1017], "class_sep": [148, 291, 508], "rfecv": [148, 411, 586, 590, 595, 1026, 1028, 1030, 1032, 1033, 1034, 1035, 1038], "stratifiedkfold": [148, 248, 256, 267, 271, 325, 406, 430, 560, 561, 587, 595, 652, 666, 789, 790, 792, 793, 794, 795, 797, 799, 803, 807, 809, 811, 812, 813, 814, 815, 816, 817, 819, 873, 1010, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1035], "min_features_to_select": [148, 587, 1030], "n_features_": [148, 534, 586, 587, 1035, 1037], "n_score": 148, "506": [148, 150], "plot_rfe_with_cross_valid": [148, 150], "selectfrommodel": [149, 389, 586, 595, 596, 1002, 1017, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1038], "sequentialfeatureselector": [149, 411, 586, 590, 596, 1034, 1035, 1036, 1037, 1038], "greedi": [149, 409, 411, 440, 442, 453, 552, 553, 595, 976, 996], "442": [149, 165, 373, 494, 1013], "descript": [149, 170, 309, 369, 370, 375, 376, 380, 381, 384, 389, 402, 410, 445, 455, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 500, 503, 537, 623, 669, 754, 757, 770, 980, 994, 995, 1001, 1003, 1015, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "descr": [149, 369, 370, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 500, 503, 1012, 1030], "_diabetes_dataset": 149, "mass": [149, 240, 373, 439, 787, 976, 987], "blood": [149, 230, 373, 1013], "pressur": [149, 373, 1013], "six": [149, 201, 222, 307, 373, 1031], "serum": [149, 373], "bmi": [149, 188, 189, 240, 373, 988], "tc": [149, 373, 390], "cholesterol": [149, 373], "ldl": [149, 373], "lipoprotein": [149, 373], "hdl": [149, 373], "s4": [149, 188, 189, 373], "tch": [149, 373], "s5": [149, 188, 189, 373, 988], "ltg": [149, 373, 494], "triglycerid": [149, 373], "s6": [149, 188, 189, 373], "glu": [149, 373], "sugar": [149, 373], "www4": [149, 373], "ncsu": [149, 373], "boo": [149, 373], "bradlei": [149, 373, 976], "efron": [149, 373, 675, 676, 976], "trevor": [149, 188, 318, 373, 621, 649, 714, 715, 716, 970, 976, 992, 1026, 1027, 1030, 1031, 1032, 1034], "iain": [149, 373, 976], "johnston": [149, 373, 976, 1031], "annal": [149, 184, 188, 373, 409, 467, 509, 510, 511, 552, 553, 649, 976], "407": [149, 373], "499": [149, 373, 382], "web": [149, 370, 371, 373, 376, 379, 384, 402, 410, 514, 885, 980, 990, 1018, 1022], "stanford": [149, 373, 642, 675, 676, 827, 830, 831, 885, 978], "leastangle_2002": [149, 373], "pitfal": [149, 167, 168, 172, 174, 315, 365, 388, 389, 391, 406, 458, 460, 489, 646, 665, 666, 694, 745, 804, 815, 818, 853, 865, 872, 976, 1017], "e501": [149, 347], "accept": [149, 152, 236, 258, 313, 334, 347, 349, 358, 362, 363, 370, 376, 378, 385, 387, 388, 389, 390, 393, 396, 398, 402, 407, 410, 430, 434, 437, 438, 441, 454, 457, 460, 501, 502, 548, 549, 554, 555, 562, 563, 574, 575, 586, 587, 590, 621, 628, 632, 636, 672, 719, 734, 770, 787, 788, 792, 793, 834, 835, 842, 843, 852, 856, 910, 912, 913, 916, 976, 978, 980, 983, 988, 990, 995, 1000, 1001, 1010, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "tic": [149, 171, 272, 982], "sfm": 149, "toc": 149, "sf": [149, 239, 261, 315, 371, 411, 485, 595], "backward": [149, 236, 315, 379, 389, 411, 489, 570, 595, 607, 608, 611, 612, 613, 615, 616, 905, 908, 980, 984, 1001, 1022, 1025, 1030, 1031, 1032, 1034, 1036, 1038], "tic_fwd": 149, "sfs_forward": 149, "toc_fwd": 149, "tic_bwd": 149, "sfs_backward": 149, "toc_bwd": 149, "454": [149, 348], "isn": [149, 313, 347, 349, 358, 363, 376, 384, 508, 554, 555, 587, 784, 792, 793, 865, 983, 995, 1032], "sound": [149, 358], "finish": [149, 249, 977], "expos": [149, 236, 316, 318, 363, 369, 373, 389, 393, 400, 409, 411, 412, 430, 457, 546, 547, 560, 561, 562, 563, 586, 587, 595, 604, 789, 792, 793, 803, 821, 822, 823, 824, 825, 826, 907, 948, 976, 980, 982, 1010, 1012, 1014, 1019, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "breast": [149, 369, 493, 1017, 1027], "cancer": [149, 369, 493, 586, 587, 839, 1017, 1027], "569": [149, 325, 373, 493, 585, 588, 589, 591], "load_breast_canc": [149, 173, 325, 352, 381, 585, 588, 589, 591, 667, 668, 780, 980, 1027, 1028, 1033], "breast_cancer_data": 149, "_breast_cancer_dataset": 149, "wisconsin": [149, 173, 369, 493, 1017, 1027], "diagnost": [149, 264, 369, 389, 493, 705, 814, 815, 980, 1000, 1001, 1017], "radiu": [149, 276, 288, 334, 373, 402, 435, 443, 681, 756, 773, 832, 833, 834, 835, 836, 840, 842, 843, 844, 846, 983, 1024, 1026, 1036], "perimet": [149, 373], "textur": [149, 373, 750, 751, 978], "compact": [149, 176, 303, 362, 373, 832, 833, 996, 1024], "concav": [149, 373], "symmetri": [149, 373, 692, 865, 868, 880, 978], "fractal": [149, 373], "worst": [149, 200, 309, 373, 402, 437, 440, 701, 721, 722, 775, 776, 779, 782, 783, 817, 980, 1004, 1022, 1035], "field": [149, 218, 373, 399, 402, 403, 410, 491, 494, 610, 976, 978, 987, 995, 1000, 1003, 1015, 1023], "se": [149, 223, 373, 392], "wdbc": [149, 239, 373], "malign": [149, 373, 493], "benign": [149, 373, 493], "summari": [149, 317, 358, 373, 387, 685, 706, 905, 978, 981, 1000, 1015], "981": [149, 269, 373, 980], "43": [149, 159, 197, 233, 261, 281, 373, 381, 789, 803, 873], "143": [149, 373, 464, 465, 992, 1022, 1023], "2501": [149, 373], "163": [149, 197, 219, 243, 244, 373, 988], "019": [149, 316, 320, 348, 373, 382, 464], "345": [149, 171, 373], "427": [149, 162, 373, 499, 500, 576, 577], "106": [149, 243, 373, 868, 974, 1023], "304": [149, 307, 373], "873": [149, 373], "542": [149, 184, 373], "031": [149, 373], "135": [149, 318, 373], "008": [149, 348, 373, 382], "079": [149, 187, 219, 373], "54": [149, 176, 184, 200, 203, 371, 373, 402, 484, 1023, 1024], "41": [149, 200, 371, 373, 412, 462, 485, 524, 614, 617, 628, 651, 657, 678, 679, 692, 773, 827, 982, 986], "251": [149, 223, 373], "4254": [149, 373], "027": [149, 348, 373], "058": [149, 259, 373], "252": [149, 223, 304, 311, 373, 527, 868, 880], "291": [149, 371, 373], "156": [149, 170, 234, 244, 373], "664": [149, 373], "055": [149, 373, 980], "208": [149, 232, 244, 281, 373], "357": [149, 348, 373, 493, 893], "creator": [149, 370, 373], "william": [149, 371, 373, 412, 603, 604, 607, 612, 615, 632, 980, 984, 1029, 1030, 1031, 1032, 1037, 1038], "wolberg": [149, 373], "nick": [149, 373, 1022, 1028, 1029, 1030, 1031], "olvi": [149, 373], "mangasarian": [149, 373], "donor": [149, 373], "novemb": [149, 200, 218, 373, 1027, 1028, 1030], "1995": [149, 261, 373, 400, 409, 546, 547, 822, 889, 981], "goo": [149, 373], "gl": [149, 373], "u2uwz2": [149, 373], "needl": [149, 373], "aspir": [149, 373, 376], "fna": [149, 373], "nuclei": [149, 373], "multisurfac": [149, 373], "msm": [149, 373], "bennett": [149, 373, 980], "4th": [149, 160, 373], "midwest": [149, 373], "cognit": [149, 373], "societi": [149, 373, 402, 404, 462, 467, 534, 620, 868, 880, 976, 994], "101": [149, 373, 838, 1023], "1992": [149, 371, 373, 406, 409, 560, 561, 638, 976], "exhaust": [149, 262, 313, 314, 315, 316, 317, 318, 319, 362, 373, 381, 388, 397, 402, 789, 792, 793, 803, 882, 883, 885, 976, 1015, 1017], "insepar": [149, 373], "uw": [149, 373, 1034], "ftp": [149, 373, 675, 676], "wisc": [149, 373, 887], "prog": [149, 373], "cpo": [149, 373], "nuclear": [149, 373], "tumor": [149, 373], "diagnosi": [149, 264, 373, 839], "spie": [149, 373], "1993": [149, 373, 467, 657, 678, 679, 996], "symposium": [149, 373, 402, 453], "technologi": [149, 373, 402, 1000, 1004], "1905": [149, 373], "861": [149, 373, 780, 781, 980], "870": [149, 373], "san": [149, 373, 410, 992], "jose": [149, 373, 651, 980, 1030, 1032], "ca": [149, 373, 402, 435, 900, 901, 992, 996], "prognosi": [149, 373], "570": [149, 349, 373, 1013], "577": [149, 348, 349, 373], "juli": [149, 373, 411, 726, 873, 990, 1025, 1029, 1030, 1031], "august": [149, 373, 402, 504, 527, 995, 1022, 1024, 1025, 1029, 1036], "diagnos": [149, 264, 373, 384, 391, 403], "letter": [149, 160, 371, 373, 380, 410, 780, 781, 795, 811, 980], "1994": [149, 371, 373, 637], "feature_selector": 149, "ntol": 149, "975": [149, 169, 995], "080": [149, 339, 345], "998": [149, 984], "plot_select_from_model_diabet": [149, 150], "auto_examples_feature_select": 150, "basic": [151, 162, 165, 167, 198, 310, 339, 362, 364, 365, 376, 378, 380, 387, 389, 402, 406, 407, 409, 604, 615, 888, 900, 901, 902, 903, 969, 970, 983, 994, 999, 1000, 1001, 1004, 1013], "introductori": [151, 162, 167, 228, 604, 615, 1004], "gpr": [151, 161, 162, 167, 489, 603, 604, 606, 607, 608, 609, 614, 615, 616, 617, 618, 1002, 1017, 1032], "mauna": [151, 162, 167, 489, 604, 608, 615, 616, 618], "loa": [151, 162, 167, 489, 604, 608, 615, 616, 618], "co2": [151, 162, 167, 489, 604, 608, 615, 616, 618, 1029], "xor": [151, 162, 167, 340, 603, 607, 615, 976, 996, 1029], "posterior": [151, 152, 153, 162, 167, 179, 261, 407, 412, 542, 543, 545, 603, 604, 606, 607, 608, 612, 615, 616, 620, 637, 638, 701, 787, 974, 1000, 1028, 1031], "iso": [151, 162, 167, 223, 603, 606, 607], "trick": [152, 235, 291, 349, 361, 364, 365, 379, 387, 403, 412, 575, 582, 636, 665, 972, 973, 984, 994, 995, 1013, 1014, 1017, 1023, 1031], "drastic": [152, 233, 269, 402, 406, 983, 993], "theorem": [152, 401, 412, 982], "period": [152, 157, 161, 380, 389, 390, 400, 412, 608, 810, 871, 1030, 1035, 1037], "reus": [152, 193, 262, 313, 349, 378, 389, 402, 403, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 627, 639, 641, 642, 645, 651, 653, 655, 659, 660, 661, 662, 669, 670, 671, 673, 849, 850, 988, 992, 1004, 1029], "training_sample_indic": 152, "training_data": 152, "training_noisy_target": 152, "newer": [152, 375, 392, 407], "expsinesquar": [152, 157, 161, 412], "emb": [152, 222, 233, 290, 369, 370, 455, 688, 977], "kernel_ridg": [152, 235, 365, 1026], "length_scal": [152, 153, 156, 157, 158, 159, 161, 412, 605, 608, 612, 614, 615, 616, 617], "tell": [152, 170, 171, 236, 261, 334, 339, 363, 371, 402, 410, 556, 572, 969, 974, 987, 1015], "1e0": [152, 235, 252, 269, 969], "kernel__length_scal": 152, "kernel__period": 152, "1e1": [152, 158, 200, 235, 334], "kernel_ridge_tun": 152, "9915849773450223": 152, "7986499491396727": 152, "607275806426107": 152, "predictions_kr": 152, "gaussianprocessregressor": [152, 157, 158, 159, 160, 161, 412, 603, 606, 607, 608, 609, 610, 614, 617, 618, 636, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "whitekernel": [152, 157, 158, 412, 604, 605, 607, 1033], "periodicity_bound": [152, 157, 161, 608], "029": [152, 988], "kernel_": [152, 153, 154, 155, 156, 157, 158, 159, 161, 603, 604], "675": 152, "57": [152, 170, 216, 270, 300, 373, 374, 392, 394, 395, 403, 698, 773, 825, 980, 990, 1022], "noise_level": [152, 157, 158, 412, 605, 618], "182": [152, 300, 382, 409], "mean_predictions_gpr": 152, "std_predictions_gpr": 152, "return_std": [152, 157, 158, 159, 161, 179, 180, 389, 545, 560, 561, 604, 606, 607, 608, 609, 618, 620, 637, 638, 852, 1029, 1030, 1034], "capac": [152, 172], "length_scale_bound": [152, 158, 159, 161, 412, 604, 608, 612, 615, 616], "attenu": 152, "089": [152, 162], "plot_compare_gpr_krr": [152, 162], "arbitrarili": [153, 247, 252, 347, 389, 412, 425, 458, 475, 476, 477, 545, 547, 549, 551, 553, 555, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 671, 672, 673, 714, 715, 716, 738, 777, 781, 825, 826, 835, 843, 850, 873, 893, 895, 898, 901, 903, 980, 983, 990, 996], "lml": [153, 154, 158, 412], "exhibit": [153, 205, 347, 391, 406, 407, 409, 412, 988], "steep": [153, 171, 270, 271, 402, 406, 412, 443, 449], "laplac": [153, 412, 603, 604, 827, 828, 829, 831, 982], "214": [153, 412, 577], "gp_fix": 153, "gp_opt": 153, "log_marginal_likelihood": [153, 154, 156, 158, 161, 412, 603, 604, 1032], "theta": [153, 154, 156, 158, 160, 161, 237, 407, 412, 516, 529, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 685, 982, 996], "landscap": [153, 412], "theta0": 153, "theta1": 153, "pcolor": 153, "xscale": [153, 158, 235, 795], "yscale": [153, 158, 200, 235, 347, 795], "850": [153, 162, 326], "plot_gpc": [153, 162], "gpc_rbf_isotrop": 154, "gpc_rbf_anisotrop": 154, "m_max": 154, "plot_gpc_iri": [154, 162], "0256": 155, "dotproduct": [155, 156, 161, 412, 604, 618], "sigma_0": [155, 156, 161, 412, 607], "constantkernel": [155, 161, 412, 604, 610, 614, 617], "lim": [155, 527], "61611719": 155, "00099547": 155, "10469096": 155, "32782448": 155, "00000000": 155, "50000000": 155, "17289014": 155, "6984743": 155, "3109306": 155, "93271427": 155, "03823144": 155, "10584743": 155, "87600388": 155, "74310541": 155, "21301203": 155, "26386883": 155, "gp": [155, 160, 412, 603, 604, 615, 1028], "cb": [155, 233, 250], "widehat": 155, "mathbf": [155, 407, 976, 980, 984, 985, 994], "leq": [155, 407, 409, 976, 980, 983, 994, 995, 996], "clim": 155, "666": [155, 834, 970], "clabel": [155, 211], "334": [155, 243], "136": [155, 162], "plot_gpc_isoprob": [155, 162], "stationari": [156, 412, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "coincid": [156, 202, 412], "429": [156, 158], "convergencewarn": [156, 158, 160, 161, 208, 215, 247, 298, 299, 305, 385, 389, 787, 788, 1030, 1031, 1034], "k1__constant_valu": 156, "bound": [156, 158, 160, 167, 202, 218, 228, 244, 260, 374, 383, 402, 407, 410, 412, 413, 437, 482, 495, 505, 516, 529, 588, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 625, 628, 630, 643, 647, 651, 670, 698, 727, 787, 788, 832, 833, 869, 881, 884, 885, 886, 894, 895, 896, 899, 916, 948, 976, 979, 980, 983, 992, 994, 995, 997, 1030, 1033, 1034, 1036], "100000": [156, 235, 246, 376, 606, 607, 608, 612, 613, 615, 616, 618, 881, 973, 1013, 1015], "puor_r": [156, 340], "458": [156, 162], "plot_gpc_xor": [156, 162], "rw2006": [157, 412, 603, 604], "ascent": [157, 412], "monthli": [157, 390, 412, 980], "atmospher": [157, 412], "ppm": 157, "observatori": [157, 412], "hawaii": [157, 412], "1958": [157, 407, 409, 412, 525], "air": [157, 756], "41187": 157, "flag": [157, 374, 376, 377, 379, 393, 457, 603, 604, 620, 666, 668, 720, 777, 995, 1028, 1032, 1033, 1035, 1036, 1037, 1038], "station": 157, "mlo": 157, "316": [157, 161, 604, 607, 618, 868], "317": [157, 347], "co2_data": 157, "to_datetim": 157, "timestamp": 157, "march": [157, 718, 748, 980, 1022, 1026, 1030, 1032, 1037], "dropna": 157, "nfrom": 157, "upcom": [157, 374], "to_numpi": 157, "rise": [157, 412], "irregular": [157, 402, 412, 983], "long_term_trend_kernel": 157, "decai": [157, 412, 537, 849, 850, 929, 980, 994, 1026], "seasonal_kernel": 157, "ration": [157, 616, 978], "diffus": [157, 412], "accommod": [157, 412, 1030], "rationalquadrat": [157, 161, 412, 609], "irregularities_kernel": 157, "shall": [157, 412], "phenomena": [157, 412], "noise_kernel": 157, "noise_level_bound": [157, 158, 618], "co2_kernel": 157, "subtract": [157, 170, 405, 407, 412, 436, 440, 452, 527, 637, 638, 643, 644, 647, 648, 649, 657, 658, 1029], "normalize_i": [157, 412, 604, 1036], "y_mean": [157, 158, 161, 604, 637, 638], "gaussianprocessregressorgaussianprocessregressor": 157, "futur": [157, 201, 242, 316, 319, 374, 376, 378, 380, 387, 389, 390, 396, 406, 410, 489, 527, 628, 950, 980, 981, 995, 996, 1004, 1019, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "todai": [157, 387, 1015], "current_month": 157, "mean_y_pr": 157, "std_y_pr": 157, "536": [157, 281], "968": [157, 169, 259], "0367": 157, "6ppm": 157, "plot_gpr_co2": [157, 162], "target_gener": 158, "add_nois": 158, "minima": [158, 188, 407, 440, 685, 977, 1014, 1030], "y_std": [158, 161, 545, 604, 637, 638, 1035], "k1__k2__length_scal": [158, 412], "noptimum": 158, "nlog": 158, "length_scale_grid": 158, "noise_level_grid": 158, "newshap": 158, "594": [158, 161, 162, 200, 340, 345], "plot_gpr_noisi": [158, 162], "tikhonov": [159, 412, 665], "training_indic": 159, "n_restarts_optim": [159, 412, 603, 604], "mean_predict": 159, "std_predict": 159, "whenev": [159, 169, 358, 370, 384, 389, 392, 400, 475, 476, 477, 489, 621, 623, 971, 979, 1001, 1032], "noise_std": 159, "y_train_noisi": 159, "482": [159, 162], "plot_gpr_noisy_target": [159, 162], "gene": [160, 370, 399, 444, 506, 586, 587, 839, 872], "among": [160, 171, 176, 200, 251, 279, 356, 364, 371, 378, 389, 390, 400, 401, 405, 440, 442, 505, 512, 784, 817, 835, 840, 842, 894, 897, 900, 901, 902, 903, 969, 972, 980, 981, 987, 990, 995, 1022, 1028, 1029, 1032], "brighter": 160, "6th": 160, "haussler": 160, "1999": [160, 371, 400, 402, 404, 407, 409, 430, 443, 450, 462, 467, 527, 534, 548, 549, 552, 553, 715, 886, 894, 895, 897, 898, 986, 992], "646": 160, "technic": [160, 201, 222, 317, 371, 373, 376, 389, 409, 645, 657, 678, 679, 887, 976, 977, 983], "depart": [160, 402], "california": [160, 164, 165, 303, 309, 315, 369, 373, 483, 1017], "santa": [160, 1037], "cruz": 160, "generickernelmixin": [160, 1032], "sequencekernel": 160, "baseline_similar": 160, "baseline_similarity_bound": 160, "hyperparameter_baseline_similar": 160, "_f": [160, 976], "_g": 160, "__call__": [160, 334, 389, 410, 412, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 1029], "eval_gradi": [160, 412, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "is_stationari": [160, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "clone_with_theta": [160, 412, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "agct": 160, "agc": 160, "aact": 160, "taa": 160, "aaa": 160, "gaaca": 160, "training_idx": 160, "cga": 160, "taac": 160, "tcg": 160, "cttt": 160, "tgct": 160, "atag": 160, "ctc": 160, "419": [160, 609], "225": [160, 162, 409], "plot_gpr_on_structured_data": [160, 162], "plot_gpr_sampl": 161, "gpr_model": 161, "y_sampl": [161, 604], "sample_i": [161, 412, 604, 1036], "single_prior": 161, "pm": [161, 171, 271, 409, 980], "dev": [161, 170, 218, 266, 271, 374, 376, 380, 382, 384, 980, 1004, 1018, 1029, 1034, 1037, 1038], "279": [161, 180, 219, 976], "067": 161, "alpha_bound": [161, 616], "1e15": 161, "05e": 161, "799": [161, 348], "791": 161, "sigma_0_bound": [161, 607], "_gpr": 161, "659": [161, 323, 328], "lbfg": [161, 297, 378, 641, 642, 651, 652, 662, 665, 667, 673, 680, 823, 826, 849, 850, 976, 984, 1026, 1027, 1029, 1030, 1035, 1036, 1037], "abnormal_termination_in_lnsrch": 161, "7337046907": 161, "481": 161, "matern": [161, 412, 1033, 1037], "609": [161, 348, 382], "484": 161, "606": [161, 162, 285, 295, 606, 822, 981], "plot_gpr_prior_posterior": [161, 162], "auto_examples_gaussian_process": 162, "iterativeimput": [163, 165, 166, 167, 483, 558, 573, 621, 622, 623, 632, 638, 665, 814, 835, 853, 1031, 1032, 1033, 1034, 1036, 1037, 1038], "robin": [164, 165, 620, 970, 1028, 1031, 1036, 1037], "kneighborsregressor": [164, 238, 293, 317, 409, 563, 834, 840, 842, 843, 983, 1022, 1024, 1026, 1032, 1034, 1035, 1036, 1037, 1038], "mimic": [164, 200, 347, 807], "missforest": [164, 970], "popular": [164, 225, 371, 374, 381, 384, 387, 389, 401, 408, 409, 410, 412, 445, 455, 970, 972, 976, 978, 985, 994, 1001, 1010, 1015], "enable_iterative_imput": [164, 165, 380, 620, 970, 1031], "x_full": [164, 165, 303], "y_full": [164, 165, 303], "2k": 164, "br_estim": 164, "score_full_data": 164, "neg_mean_squared_error": [164, 165, 202, 235, 275, 815, 980, 988, 1028], "x_miss": [164, 165], "y_miss": [164, 165], "missing_sampl": [164, 165], "missing_featur": [164, 165], "score_simple_imput": 164, "missing_valu": [164, 165, 241, 389, 620, 621, 622, 623, 761, 970, 1030, 1031], "score_iterative_imput": 164, "stricter": 164, "impute_estim": 164, "__class__": [164, 200, 202, 236, 263, 305, 347, 348, 349, 383], "xerr": [164, 165, 348], "plot_iterative_imputer_variants_comparison": [164, 166], "ness": [165, 218], "auxiliari": [165, 374, 1004, 1037], "district": [165, 371], "neither": [165, 170, 313, 347, 358, 387, 430, 587, 621, 916, 983, 996], "feel": [165, 303, 375, 376, 384, 402, 439, 996], "x_diabet": [165, 1010], "y_diabet": [165, 1010], "x_california": 165, "y_california": 165, "add_missing_valu": 165, "missing_r": 165, "n_missing_sampl": 165, "x_miss_california": 165, "y_miss_california": 165, "x_miss_diabet": 165, "y_miss_diabet": 165, "knnimput": [165, 313, 620, 623, 970, 1032, 1033, 1036, 1037, 1038], "get_scores_for_imput": 165, "impute_scor": 165, "x_label": 165, "mses_california": 165, "stds_california": 165, "mses_diabet": 165, "stds_diabet": 165, "get_full_scor": 165, "full_scor": 165, "get_impute_zero_scor": 165, "fill_valu": [165, 231, 241, 314, 620, 623, 990, 1030, 1038], "zero_impute_scor": 165, "unweight": [165, 213, 456, 640, 646, 671, 700, 706, 721, 722, 730, 775, 776, 779, 780, 827, 828, 829, 830, 831, 970], "get_impute_knn_scor": 165, "knn_impute_scor": 165, "get_impute_mean": 165, "mean_impute_scor": 165, "obvious": [165, 362, 1015], "get_impute_it": 165, "n_nearest_featur": [165, 620], "sample_posterior": [165, 620, 970], "iterative_impute_scor": 165, "n_bar": 165, "xval": 165, "invert_yaxi": [165, 349], "964": [165, 166], "plot_missing_valu": [165, 166], "207": [166, 300, 1022], "auto_examples_imput": 166, "prune": [167, 351, 357, 411, 493, 550, 551, 552, 553, 557, 558, 586, 637, 818, 900, 901, 902, 903, 983, 1002, 1017, 1022, 1025, 1032, 1033], "elast": [167, 178, 184, 191, 211, 219, 274, 401, 464, 465, 471, 494, 517, 639, 640, 645, 650, 651, 652, 653, 654, 655, 656, 661, 669, 671, 674, 677, 969, 980, 994, 1002, 1017, 1022, 1027, 1031, 1032], "gram": [167, 178, 219, 378, 407, 410, 482, 517, 541, 581, 582, 583, 584, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 658, 674, 675, 676, 677, 678, 679, 759, 767, 769, 969, 990, 1015, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036], "huberregressor": [167, 178, 204, 206, 219, 517, 663, 664, 665, 671, 672, 976, 1028, 1029, 1030, 1031], "aic": [167, 178, 188, 219, 251, 494, 644, 646, 647, 648, 649, 788, 853, 872, 969, 976, 1022, 1029, 1035, 1036], "bic": [167, 178, 188, 219, 411, 494, 644, 646, 647, 648, 649, 788, 853, 872, 969, 976, 979, 1022, 1029, 1035, 1036], "mnist": [167, 178, 208, 219, 281, 296, 301, 489, 564, 651, 818, 849, 872, 915, 976, 984], "20newgroup": [167, 178, 219, 482, 564, 651, 818, 976], "ordinari": [167, 178, 179, 184, 202, 203, 205, 217, 219, 316, 628, 639, 645, 647, 648, 649, 650, 665, 671, 675, 676, 680, 994, 1002, 1017], "spline": [167, 178, 219, 509, 510, 511, 665, 853, 867, 871, 1000, 1035], "ransac": [167, 178, 206, 217, 219, 517, 642, 650, 664, 671, 672], "convex": [167, 178, 219, 221, 343, 348, 402, 404, 407, 415, 439, 445, 455, 466, 468, 469, 472, 473, 474, 651, 669, 685, 976, 977, 983, 984, 994, 1035], "theil": [167, 178, 206, 219, 642, 650, 664, 671, 672], "sen": [167, 178, 206, 219, 642, 650, 664, 671, 672], "tweedi": [167, 178, 219, 457, 489, 545, 641, 662, 673, 699, 716, 737, 739, 741, 742, 744, 818, 853, 856, 857, 865, 872, 976, 1032, 1033, 1035], "insur": [167, 178, 200, 219, 457, 489, 545, 641, 662, 673, 699, 737, 742, 744, 818, 853, 856, 857, 865, 872, 976], "claim": [167, 178, 219, 376, 457, 489, 545, 641, 662, 673, 699, 737, 742, 744, 818, 853, 856, 857, 865, 872, 976], "failur": [167, 168, 170, 174, 376, 384, 650, 777, 818, 912, 913, 1003, 1004, 1035, 1036], "infer": [167, 168, 170, 174, 247, 251, 252, 261, 353, 370, 378, 387, 401, 406, 407, 489, 501, 502, 508, 527, 529, 531, 533, 540, 542, 543, 546, 552, 553, 625, 628, 650, 702, 715, 733, 777, 787, 788, 795, 811, 818, 828, 866, 873, 887, 888, 900, 901, 902, 903, 943, 970, 976, 980, 985, 990, 993, 996, 1000, 1001, 1009, 1023, 1027, 1028, 1033, 1036, 1039], "causal": [167, 168, 174, 650, 777, 818], "multicollinear": [167, 168, 174, 405, 493, 557, 627, 648, 818, 976, 988], "isomap": [167, 220, 223, 227, 313, 317, 409, 495, 537, 542, 559, 682, 683, 684, 685, 841, 853, 862, 885, 983, 1016, 1017, 1030, 1032, 1035, 1036, 1037, 1038], "And": [167, 220, 227, 236, 261, 347, 384, 396, 402, 406, 410, 523, 581, 582, 584, 685, 686, 976, 980, 998, 1029], "hole": [167, 220, 227, 523, 685, 686, 1036], "perplex": [167, 220, 221, 225, 227, 281, 507, 518, 529, 685, 977, 1027, 1029, 1036], "metadata": [167, 228, 244, 348, 365, 370, 371, 396, 416, 419, 422, 425, 426, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 482, 489, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 936, 937, 938, 939, 940, 964, 980, 1000, 1001, 1006, 1017, 1038, 1039], "rout": [167, 228, 244, 365, 416, 419, 422, 425, 426, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 937, 938, 939, 940, 964, 1017, 1036, 1038, 1039], "johnson": [167, 228, 244, 303, 307, 368, 401, 482, 495, 868, 880, 884, 885, 886, 990, 997, 1017, 1030, 1036, 1038], "lindenstrauss": [167, 228, 244, 368, 401, 482, 495, 884, 885, 886, 997, 1017], "halv": [167, 254, 277, 397, 508, 557, 572, 789, 792, 793, 897, 1017, 1034], "det": [167, 254, 277, 376, 404, 508, 557, 691, 695, 719, 781, 818, 853, 872, 892, 927, 1034], "tsne": [167, 221, 222, 223, 225, 226, 282, 295, 317, 389, 416, 426, 489, 681, 682, 683, 836, 840, 853, 954, 977, 983, 1025, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "novelti": [167, 229, 282, 288, 295, 333, 838, 1002, 1016, 1017, 1022, 1030], "lof": [167, 229, 239, 282, 295, 556, 838, 896, 986], "boltzmann": [167, 296, 301, 495, 651, 706, 818, 848, 849, 850, 852, 878, 1016, 1017, 1024], "mlp": [167, 171, 240, 296, 298, 301, 489, 564, 818, 849, 850, 984], "semi_supervis": [167, 315, 317, 321, 322, 323, 324, 325, 326, 327, 365, 981, 993, 1023, 1028, 1029, 1036, 1037], "tie": [167, 329, 345, 387, 409, 505, 820, 897, 981, 995, 996, 1023, 1038], "unbalanc": [167, 264, 329, 345, 406, 505, 624, 897, 917, 918, 969, 994], "featurehash": [167, 346, 348, 350, 364, 371, 410, 457, 481, 574, 581, 582, 583, 584, 865, 1023, 1028, 1029, 1030, 1036, 1037], "auto_examples_python": 167, "auto_examples_jupyt": 167, "unless": [169, 236, 247, 252, 376, 378, 379, 387, 389, 400, 402, 405, 413, 430, 437, 439, 441, 443, 445, 450, 451, 454, 457, 460, 465, 482, 489, 501, 502, 524, 528, 529, 530, 532, 535, 536, 538, 539, 540, 541, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 587, 595, 603, 604, 625, 627, 632, 639, 640, 644, 645, 646, 648, 650, 651, 652, 654, 656, 658, 659, 661, 669, 672, 681, 682, 683, 684, 685, 686, 687, 702, 707, 766, 770, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 834, 835, 838, 840, 842, 843, 845, 846, 849, 850, 851, 854, 877, 878, 880, 881, 882, 883, 887, 888, 900, 901, 902, 903, 908, 912, 913, 929, 948, 976, 979, 981, 1022, 1024, 1028, 1030, 1033, 1034], "willing": [169, 258], "econom": [169, 170, 261], "educ": [169, 170, 376, 709, 981], "earn": [169, 170, 390], "polici": [169, 170, 200, 218, 389, 528, 534, 976, 1037], "maker": [169, 170], "ovb": [169, 170], "parent_hourly_wag": 169, "college_degre": 169, "true_coef": [169, 184, 195], "hourly_wag": 169, "stori": [169, 261, 371, 979], "pairplot": [169, 170], "diag_kind": [169, 170], "kde": [169, 170, 285, 286, 294, 408, 837], "mambaforg": [169, 170, 251], "env": [169, 170, 251, 374, 384, 392], "testenv": [169, 170, 251], "lib": [169, 170, 251, 363, 374, 392, 1000], "python3": [169, 170, 251, 374, 392], "site": [169, 170, 251, 374, 376, 379, 384, 392, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 1004, 1030], "axisgrid": [169, 170, 251], "118": [169, 170, 171, 251, 583], "features_nam": [169, 1029], "regressor_with_": 169, "y_pred_with_": 169, "r2_with_abl": 169, "model_coef": 169, "intellectu": 169, "proxi": [169, 170, 407, 848, 1010, 1027], "inadvert": [169, 389], "iq": 169, "regressor_without_": 169, "y_pred_without_": 169, "r2_without_": 169, "brought": [169, 546, 547, 550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "unobserv": [169, 170, 407], "confound": [169, 170], "conduct": [169, 261, 412, 1036], "prohibit": [169, 406, 409, 620, 985, 993, 1029], "uneth": 169, "iv": [169, 980], "520": [169, 174, 349, 621, 841, 970, 983], "plot_causal_interpret": [169, 174], "hint": [170, 362, 377, 381, 396, 441, 980, 1013], "aris": [170, 264, 342, 363, 381, 402, 708, 976, 977, 1034], "survei": [170, 405], "1985": [170, 402, 698, 708, 778], "534": [170, 221, 227], "race": [170, 371, 1025], "occup": [170, 303], "sector": 170, "marr": 170, "not_memb": 170, "marri": 170, "freq": [170, 184, 349], "378": [170, 348, 409, 1015, 1022], "438": [170, 988], "440": 170, "411": [170, 404, 414, 466, 526], "350": 170, "018727": 170, "822097": 170, "833333": 170, "615373": 170, "379710": 170, "726573": 170, "thereaft": [170, 179], "hispan": 170, "manufactur": 170, "unmarri": 170, "dollar": [170, 371], "exploratori": [170, 1004], "emul": [170, 384], "train_dataset": [170, 370], "rangeindex": 170, "533": 170, "normalis": [170, 604, 1015], "numerical_column": [170, 172, 460], "if_binari": [170, 243, 865, 990, 1033], "prepend": [170, 1022], "exp10": 170, "ufunc": 170, "passthroughpassthroughtransformedtargetregressor": 170, "transformedtargetregressortransformedtargetregressor": 170, "ridgeridg": 170, "mae_train": 170, "mae_test": 170, "learnt": [170, 310, 358, 389, 406, 873, 969, 990], "obviou": [170, 358, 362, 399, 407], "regressor_": [170, 458, 586, 587, 590], "race_hispan": 170, "013519": 170, "race_oth": 170, "009075": 170, "race_whit": 170, "022594": 170, "occupation_cler": 170, "000045": 170, "occupation_manag": 170, "090528": 170, "occupation_oth": 170, "025102": 170, "occupation_profession": 170, "071964": 170, "occupation_sal": 170, "046636": 170, "occupation_servic": 170, "091053": 170, "sector_construct": 170, "000198": 170, "sector_manufactur": 170, "031255": 170, "sector_oth": 170, "031025": 170, "marr_unmarri": 170, "032405": 170, "union_not_memb": 170, "117154": 170, "sex_mal": 170, "090808": 170, "south_y": 170, "033823": 170, "054699": 170, "035005": 170, "030867": 170, "adimension": 170, "Their": [170, 371, 373, 390, 402, 637, 1022], "visibl": [170, 171, 202, 344, 370, 376, 402, 848, 985, 1027, 1037], "gaug": 170, "decad": [170, 1001], "x_train_preprocess": 170, "multipli": [170, 204, 218, 261, 362, 385, 389, 407, 409, 410, 415, 457, 468, 508, 531, 533, 534, 540, 550, 554, 557, 639, 641, 645, 647, 651, 652, 653, 655, 661, 662, 663, 665, 669, 670, 671, 673, 679, 680, 682, 686, 756, 894, 895, 896, 897, 898, 900, 902, 918, 956, 957, 958, 969, 976, 980, 994, 1033], "coef_i": 170, "std_i": 170, "emphas": [170, 344, 382, 407, 980], "perturb": [170, 217, 300, 407, 409, 979], "caution": [170, 380, 433, 447, 1030], "repeatedkfold": [170, 406, 794, 805, 1029], "cv_model": 170, "return_estim": [170, 406, 815, 1030], "train_idx": [170, 389], "stripplot": 170, "whi": [170, 172], "collinear": [170, 173, 205, 218, 409, 560, 641, 662, 673, 865, 976, 1022], "teas": 170, "apart": [170, 316, 334, 387, 389, 403, 405, 411, 717, 995, 1004, 1030], "vice": [170, 258, 347, 402, 412, 435, 600, 601, 821, 1026], "versa": [170, 258, 347, 402, 412, 435, 600, 601, 821, 1026], "column_to_drop": 170, "said": [170, 229, 262, 371, 376, 782, 978, 986, 1006, 1013], "unchang": [170, 218, 268, 409, 426, 430, 435, 436, 437, 438, 439, 440, 442, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 685, 755, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 881, 884, 885, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 983, 1006, 1030, 1036, 1038], "neglig": [170, 983, 1025], "littl": [170, 171, 172, 173, 229, 371, 410, 455, 637, 789, 803, 929, 970, 977, 979, 995, 996, 1013, 1023, 1034], "ridgecvridgecv": 170, "alon": [170, 204, 267, 334, 389, 396, 400, 641, 662, 673, 734, 1029, 1031], "suppress": [170, 313, 362, 384, 685, 983, 1029], "themselv": [170, 303, 372, 384, 389, 393, 399, 402, 409, 410, 412, 439, 608, 782, 996, 1015, 1032], "bring": [170, 303, 407, 669, 671, 977, 1004], "entic": 170, "pursu": 170, "tempt": 170, "deflat": [170, 405, 414, 526], "presum": [170, 279, 402, 410, 827], "respond": [170, 376, 402], "310": [170, 174], "plot_linear_model_coefficient_interpret": [170, 174], "complement": [171, 271, 347, 625, 626, 791, 806, 809, 818, 827, 828, 829, 830, 831, 987, 1002, 1017, 1030], "molnar": [171, 987], "christoph": [171, 407, 412, 525, 603, 604, 607, 612, 615, 787, 976, 981, 1023, 1027, 1030, 1033, 1034, 1035, 1036, 1037], "goldstein": [171, 987], "kapeln": [171, 987], "bleich": [171, 987], "pitkin": [171, 987], "peek": [171, 376, 987], "settingwithcopywarn": 171, "2284": 171, "904": [171, 259, 403], "287": [171, 992], "1747": 171, "1729": 171, "mask_train": [171, 218], "accordingli": [171, 376, 380, 381, 1029, 1030, 1037], "8640": 171, "115": [171, 238, 244, 988], "nomin": [171, 370, 389, 390, 409, 410, 574, 575, 709, 990, 1001], "numerical_featur": [171, 309], "xtick_start": 171, "xtick_period": 171, "average_bike_rent": 171, "numeric_onli": 171, "decor": [171, 313, 376, 377, 378, 385, 795, 811, 919, 923, 924, 941, 947, 1032, 1035, 1038], "strike": [171, 204], "mlp_preprocessor": 171, "quantiletransformerquantiletransform": 171, "catindex": 171, "hgbdt_preprocessor": 171, "sparse_threshold": [171, 457, 460, 1030], "passthroughpassthrough": 171, "mlp_model": 171, "hidden_layer_s": [171, 240, 297, 299, 849, 850, 984], "learning_rate_init": [171, 298, 299, 849, 850], "576": 171, "forget": [171, 358, 363, 370, 380, 387, 407, 977, 1003], "poor": [171, 176, 267, 276, 325, 400, 406, 407, 683, 687, 730, 829, 832, 833, 974, 975, 977, 982, 1001, 1006, 1029, 1030, 1031, 1033, 1035], "grid_resolut": [171, 315, 332, 624, 625, 626], "features_info": 171, "hgbdt_model": 171, "cheaper": [171, 402, 412, 666, 972, 976], "807": [171, 259, 261], "temperatur": [171, 410, 987], "wind": [171, 981], "meaningless": [171, 410, 894, 897, 1025], "celsiu": [171, 987], "interaction_cst": [171, 318, 409, 554, 555, 1037], "hgbdt_model_without_interact": 171, "histgradientboostingregressor__interaction_cst": 171, "38": [171, 191, 199, 204, 255, 270, 286, 319, 409, 625, 722, 873, 980, 990, 1022, 1023, 1024], "heatmap": [171, 173, 179, 184, 272, 318, 334, 625, 987], "slope": [171, 198, 202, 217, 402, 715, 740, 978, 980], "dry": 171, "wetter": 171, "spike": 171, "degrad": [171, 229, 303, 348, 408], "somehow": 171, "forbidden": [171, 409], "noisili": 171, "partial_depend": [171, 625, 987, 1023, 1031, 1032, 1033, 1034, 1037, 1038], "grid_valu": [171, 626, 1038], "add_ax": [171, 225, 272], "surf": 171, "rstride": 171, "cstride": 171, "bupu": 171, "nthe": [171, 259, 356], "pretti": [171, 225, 259, 347, 362, 376, 387, 849, 850, 984, 1031], "view_init": [171, 221, 223, 225], "clb": 171, "ndepend": 171, "145": [171, 174, 402], "plot_partial_depend": [171, 174, 313, 314, 315, 1027, 1031, 1032, 1033, 1034, 1035, 1036], "breiman": [172, 406, 409, 509, 510, 511, 548, 549, 557, 558, 627, 900, 901, 988, 996], "random_num": 172, "random_cat": 172, "sibsp": [172, 318], "parch": [172, 318], "categorical_encod": 172, "numerical_pip": 172, "memor": 172, "814": [172, 1013], "mdi_import": 172, "sorted_importances_idx": 172, "retri": [172, 489, 1030, 1036], "classifier__min_samples_leaf": 172, "anymor": [172, 200, 263, 313, 314, 334, 358, 380, 403, 663, 1028, 1031, 1034, 1035, 1036, 1038], "810": 172, "832": [172, 409, 548, 549], "train_result": 172, "test_result": 172, "train_import": 172, "test_import": 172, "plot_permutation_import": [172, 174], "spearman": [173, 628, 629, 971], "squareform": 173, "spearmanr": 173, "012": [173, 176], "contradict": [173, 1001], "perm_sorted_idx": 173, "tree_importance_sorted_idx": 173, "tree_indic": 173, "fill_diagon": [173, 224], "distance_matrix": 173, "dist_linkag": 173, "dendro": 173, "leaf_rot": 173, "dendro_idx": 173, "ivl": 173, "cluster_id": [173, 348], "fcluster": 173, "cluster_id_to_feature_id": 173, "selected_featur": 173, "x_train_sel": 173, "x_test_sel": 173, "clf_sel": 173, "361": [173, 174, 371, 409, 548, 549], "plot_permutation_importance_multicollinear": [173, 174], "742": 174, "auto_examples_inspect": 174, "polynomialcountsketch": [176, 632, 634, 972, 1034, 1036], "covtyp": 176, "tensor": [176, 368, 398, 407, 531, 533, 540, 632, 633, 634, 1017, 1034], "sketch": [176, 364, 368, 385, 401, 632, 633, 634, 945, 1017, 1034], "daniel": [176, 318, 362, 873, 990, 1004, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1034, 1036], "lopez": 176, "sanchez": [176, 1030, 1031], "lope": 176, "usal": 176, "581": 176, "cartograph": 176, "remot": [176, 323, 376, 379], "fetch_covtyp": [176, 239, 315, 371, 1031, 1034, 1036], "5_000": 176, "mm": 176, "lsvm": 176, "lsvm_time": 176, "lsvm_score": 176, "condens": [176, 439], "ps_lsvm_time": 176, "ps_lsvm_score": 176, "ksvm": 176, "ksvm_time": 176, "ksvm_score": 176, "pham": [176, 972, 1029], "ninh": 176, "rasmu": [176, 1029], "pagh": [176, 972], "kdd": [176, 371, 400, 430, 992], "doi": [176, 200, 218, 376, 402, 669], "1145": [176, 402, 669], "2487575": 176, "2487591": 176, "csie": [176, 370, 480, 501, 502, 651], "ntu": [176, 370, 480, 501, 502, 651], "tw": [176, 370, 480, 501, 502, 651, 995], "cjlin": [176, 370, 480, 501, 502, 651, 1025], "libsvmtool": [176, 370, 480, 501, 502], "plot_scalable_poly_kernel": [176, 177], "auto_examples_kernel_approxim": 177, "ard": [179, 637, 638], "ol": [179, 190, 195, 197, 198, 206, 217, 316, 649, 976], "true_weight": 179, "ardregress": [179, 184, 638, 976, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038], "olr": 179, "brr": 179, "_bay": 179, "renam": [179, 251, 262, 376, 380, 402, 434, 438, 440, 452, 464, 465, 471, 529, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 865, 1022, 1023, 1024, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "symlognorm": [179, 184], "linthresh": [179, 184], "10e": [179, 184], "cbar_kw": [179, 184], "seismic_r": [179, 184], "stabilis": 179, "retain": [179, 389, 402, 405, 406, 410, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 487, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 688, 689, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 865, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 993, 1022], "ard_scor": 179, "scores_": [179, 180, 585, 588, 589, 591, 592, 593, 637, 638, 652, 1022, 1032], "brr_score": 179, "cutoff": [179, 934, 990, 1031], "full_data": 179, "input_featur": [179, 378, 389, 418, 423, 435, 436, 438, 440, 442, 457, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 681, 682, 685, 836, 841, 844, 848, 851, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 1038], "x_plot": [179, 201, 206, 235, 264, 286, 308], "y_plot": [179, 201, 206, 264], "ard_poli": 179, "brr_poli": 179, "y_ard": 179, "y_ard_std": 179, "y_brr": 179, "y_brr_std": 179, "queri": [179, 294, 362, 380, 408, 413, 437, 439, 443, 450, 545, 603, 604, 621, 637, 638, 718, 748, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 980, 983, 996, 1000, 1024, 1026, 1027, 1030], "lambda_init": [179, 180, 638, 976, 1032], "intrins": [179, 389, 407, 409, 983, 988, 994, 1034], "622": [179, 219, 534], "plot_ard": [179, 219, 637], "alpha_init": [180, 638, 976, 1032], "yoshihiro": [180, 1032], "uchida": [180, 1032], "nimbus1after2a1sun7show": 180, "1234": [180, 249, 264, 376], "n_order": 180, "vander": 180, "ymean": 180, "ystd": 180, "pink": 180, "_init": 180, "lambda_": [180, 637, 638, 868, 976, 1029], "plot_bayesian_ridge_curvefit": [180, 219], "normalized_weight": 181, "x_offset": 181, "x_center": 181, "x_scale": [181, 862, 878, 990], "uncent": 181, "incorrectli": [181, 409, 410, 546, 552, 554, 726, 732, 980, 1023, 1028, 1030, 1031, 1033, 1038], "lm": 181, "98809919e": 181, "48938813e": 181, "03237920e": 181, "25349312e": 181, "53959628e": 181, "67451144e": 181, "00768662e": 181, "19112072e": 181, "07963978e": 181, "47987268e": 181, "76195467e": 181, "00393284e": 181, "07582983e": 181, "66670169e": 181, "65799352e": 181, "99891212e": 181, "58195950e": 181, "58667835e": 181, "98350372e": 181, "60836363e": 181, "00911944e": 181, "elasticnetelasticnet": 181, "765": [181, 219], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [181, 219], "huber": [182, 210, 401, 409, 553, 642, 669, 671, 994, 1022, 1024, 1025, 1034], "mks542": 182, "x_outlier": [182, 214, 287, 288, 333], "y_outlier": 182, "epsilon_valu": 182, "intercept_": [182, 190, 192, 209, 237, 332, 339, 343, 378, 389, 475, 476, 477, 542, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 892, 893, 894, 895, 896, 897, 898, 974, 976, 994, 995, 1022, 1029, 1034, 1036], "coef_ridg": 182, "plot_huber_vs_ridg": [182, 219], "logreg": [183, 826], "plot_method": [183, 284, 289, 330, 332, 335, 336, 624], "046": [183, 219, 348], "plot_iris_logist": [183, 219], "underdetermin": 184, "time_step": [184, 850], "anti": [184, 358, 599, 827, 982], "9502547": 184, "8059798": 184, "63394388": 184, "70359377": 184, "62241605": 184, "84077985": 184, "30506066": 184, "63327171": 184, "74495357": 184, "02456369": 184, "random_sampl": [184, 832, 833, 837], "sensor": 184, "monitor": [184, 208, 379, 389, 546, 547, 552, 553, 554, 555, 984, 1025, 1030, 1032, 1034], "superposit": 184, "tempor": [184, 1000, 1001], "y_pred_lasso": 184, "r2_score_lasso": 184, "480": 184, "y_pred_ard": 184, "r2_score_ard": 184, "086": [184, 233], "elasticnetcv": [184, 389, 639, 645, 653, 654, 655, 656, 674, 976, 1022, 1025, 1033, 1035, 1036], "enet": [184, 274], "y_pred_enet": 184, "r2_score_enet": 184, "nlasso": 184, "meinshausen": 184, "yu": [184, 402, 445, 455, 651, 976, 984, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "246": [184, 988, 1022], "270": [184, 323], "486": [184, 202, 219], "plot_lasso_and_elasticnet": [184, 219], "penalis": [185, 198, 215, 689], "enet_path": [185, 389, 640, 1024, 1026, 1035], "lasso_path": [185, 644, 645, 646, 647, 648, 649, 656, 675, 676, 976, 1022, 1024, 1026, 1035], "alphas_lasso": 185, "coefs_lasso": 185, "alphas_positive_lasso": 185, "coefs_positive_lasso": 185, "alphas_enet": 185, "coefs_enet": 185, "alphas_positive_enet": 185, "coefs_positive_enet": 185, "neg_log_alphas_lasso": 185, "neg_log_alphas_enet": 185, "coef_l": 185, "neg_log_alphas_positive_lasso": 185, "coef_pl": 185, "neg_log_alphas_positive_enet": 185, "coef_p": 185, "298": [185, 214, 219, 233, 988], "plot_lasso_coordinate_descent_path": [185, 219, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677], "sai": [186, 229, 342, 347, 348, 376, 400, 402, 403, 407, 409, 410, 439, 440, 493, 497, 503, 670, 969, 986, 993, 1004, 1012, 1013, 1015], "x_sp": 186, "sparse_lasso": 186, "dense_lasso": 186, "coeff_diff": 186, "2e": [186, 275], "037": [186, 345, 347, 702], "01e": 186, "xs_sp": 186, "tocsc": 186, "nnz": [186, 348, 371, 692], "175": [186, 219, 382, 990], "65e": 186, "plot_lasso_dense_vs_sparse_data": [186, 219], "lars_path": [187, 385, 524, 530, 532, 535, 536, 538, 539, 541, 643, 644, 645, 646, 647, 648, 649, 656, 657, 658, 676, 677, 678, 679, 976, 1022, 1024, 1027, 1031, 1033], "plot_lasso_lar": [187, 219], "zht2007": 188, "lassolars": [188, 189, 411, 644, 647, 648, 976, 1022, 1029, 1031, 1035, 1036], "2173": [188, 649, 976], "2192": [188, 649, 976], "038076": [188, 189], "050680": [188, 189], "061696": [188, 189], "021872": [188, 189], "044223": [188, 189], "034821": [188, 189], "043401": [188, 189], "002592": [188, 189], "019907": [188, 189], "017646": [188, 189], "001882": [188, 189], "044642": [188, 189], "051474": [188, 189], "026328": [188, 189], "008449": [188, 189], "019163": [188, 189], "074412": [188, 189], "039493": [188, 189], "068332": [188, 189], "092204": [188, 189], "085299": [188, 189], "044451": [188, 189], "005670": [188, 189], "045599": [188, 189], "034194": [188, 189], "032356": [188, 189], "002861": [188, 189], "025930": [188, 189], "089063": [188, 189], "011595": [188, 189], "036656": [188, 189], "012191": [188, 189], "024991": [188, 189], "036038": [188, 189], "034309": [188, 189], "022688": [188, 189], "009362": [188, 189], "005383": [188, 189], "036385": [188, 189], "003935": [188, 189], "015596": [188, 189], "008142": [188, 189], "031988": [188, 189], "046641": [188, 189], "akaik": [188, 189, 251, 649, 788, 969, 976], "lasso_lars_": [188, 189], "zou_et_al_criterion_resc": 188, "noise_vari": [188, 525, 649, 976, 1036], "aic_criterion": 188, "criterion_": [188, 189, 649], "index_alpha_path_a": 188, "alphas_": [188, 189, 640, 643, 644, 646, 647, 648, 649, 654, 656, 675, 676, 1022, 1025, 1035], "lassolarsic__criterion": [188, 189], "bic_criterion": 188, "index_alpha_path_b": 188, "plot_lasso_lars_": [188, 219], "n_random_featur": 189, "x_random": 189, "random_": 189, "02d": 189, "random_02": 189, "random_05": 189, "random_08": 189, "random_11": 189, "647689": 189, "234137": 189, "469474": 189, "465730": 189, "012831": 189, "412304": 189, "067528": 189, "110923": 189, "601707": 189, "057711": 189, "208864": 189, "196861": 189, "478522": 189, "057122": 189, "324084": 189, "611676": 189, "331263": 189, "185659": 189, "812526": 189, "003533": 189, "alpha_a": 189, "alpha_b": 189, "160030": 189, "5244": 189, "764779": 189, "300343": 189, "5208": 189, "250639": 189, "5212": 189, "341949": 189, "542052": 189, "4928": 189, "018900": 189, "4936": 189, "201520": 189, "034077": 189, "4869": 189, "678359": 189, "4881": [189, 1027], "952289": 189, "189631": 189, "4815": 189, "437362": 189, "4831": [189, 648], "802601": 189, "329616": 189, "4810": 189, "423641": 189, "4830": 189, "880191": 189, "306012": 189, "4803": 189, "573491": 189, "4828": 189, "121351": 189, "124225": 189, "4804": 189, "126502": 189, "4832": 189, "765671": 189, "820705": 189, "621645": 189, "4836": 189, "352124": 189, "750389": 189, "4805": 189, "012521": 189, "4841": 189, "834310": 189, "570655": 189, "290075": 189, "4846": 189, "203174": 189, "550213": 189, "4807": 189, "075887": 189, "4852": 189, "080295": 189, "358295": 189, "4806": 189, "878051": 189, "4855": 189, "973770": 189, "259297": 189, "706026": 189, "4860": 189, "893055": 189, "237703": 189, "4809": [189, 264], "440409": 189, "4866": 189, "718747": 189, "850031": 189, "989341": 189, "4867": 189, "358990": 189, "384338": 189, "4801": 189, "702266": 189, "163224": 189, "296575": 189, "4802": 189, "594754": 189, "4872": 189, "147022": 189, "031555": 189, "236720": 189, "4874": 189, "880298": 189, "618263": 189, "4798": 189, "484109": 189, "4876": 189, "218997": 189, "526599": 189, "4799": 189, "543841": 189, "370039": 189, "586798": 189, "4794": 189, "238744": 189, "4880": 189, "156252": 189, "445978": 189, "4795": 189, "589715": 189, "4885": 189, "598533": 189, "259031": 189, "4796": 189, "966981": 189, "4891": 189, "067109": 189, "032179": 189, "662409": 189, "4894": 189, "853846": 189, "019069": 189, "652739": 189, "4888": 189, "752867": 189, "626286": 189, "817724": 189, "set_xscal": [189, 205, 795], "optimist": [189, 266, 347, 358, 700, 976, 980], "badli": [189, 200, 347, 364, 872, 976, 990], "lassolarscv": [189, 411, 645, 646, 647, 649, 656, 658, 675, 676, 677, 976, 1022, 1029, 1035], "3800": 189, "mse_path_": [189, 640, 644, 646, 648, 654, 656], "cv_alphas_": [189, 644, 648, 1034], "kink": 189, "heavili": [189, 362, 363, 376, 384, 642, 648, 997], "efficaci": 189, "plot_lasso_model_select": [189, 219, 640, 646], "plot_logist": [190, 219], "axes_row": 191, "clf_l1_lr": 191, "clf_l2_lr": 191, "clf_en_lr": 191, "coef_l1_lr": 191, "coef_l2_lr": 191, "coef_en_lr": 191, "sparsity_l1_lr": 191, "sparsity_l2_lr": 191, "sparsity_en_lr": 191, "nl1_ratio": 191, "477": [191, 219], "plot_logistic_l1_l2_spars": [191, 219], "995": 192, "plot_logistic_multinomi": [192, 219], "dupr": [192, 208, 281, 283, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "m4x": [192, 216], "sag": [192, 207, 651, 652, 665, 667, 680, 976, 994, 1000, 1027, 1028, 1029, 1031, 1032], "bry": [192, 209], "plot_hyperplan": [192, 209, 237], "191": [192, 219, 382, 981], "looser": 193, "liblinear": [193, 332, 382, 651, 652, 780, 892, 893, 894, 897, 898, 980, 995, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1038], "l1_min_c": [193, 976, 995, 1022], "intercept_sc": [193, 651, 652, 892, 893, 899, 976], "coefs_": [193, 299, 849, 850, 984, 1027], "plot_logistic_path": [193, 219], "jointli": [194, 268, 401, 402, 407, 976], "instant": 194, "wave": [194, 376, 979], "n_task": [194, 976], "n_relevant_featur": 194, "multitasklasso": [194, 645, 653, 656, 976, 1022, 1030, 1033, 1035], "coef_lasso_": 194, "coef_multi_task_lasso_": 194, "spy": 194, "feature_to_plot": 194, "seagreen": 194, "plot_multi_task_lasso_support": [194, 219], "reg_nnl": 195, "y_pred_nnl": 195, "r2_score_nnl": 195, "nnl": [195, 650], "8225220806196526": 195, "reg_ol": 195, "y_pred_ol": 195, "r2_score_ol": 195, "7436926291700353": 195, "low_x": 195, "high_x": 195, "low_i": 195, "high_i": 195, "get_ylim": [195, 303, 304], "847222222222214": 195, "064": [195, 219, 349, 350, 382, 988], "plot_nnl": [195, 219], "23786125": 196, "2548": 196, "diabetes_x": [196, 1013], "diabetes_i": [196, 1013], "diabetes_x_train": [196, 1013], "diabetes_x_test": [196, 1013], "diabetes_y_train": [196, 1013], "diabetes_y_test": [196, 1013], "regr": [196, 403, 547, 549, 558, 639, 640, 660, 825, 850, 893, 895, 898, 995, 1013], "diabetes_y_pr": 196, "039": [196, 219, 259, 743, 773, 980], "plot_ol": [196, 219], "plot_ols_3d": [197, 219], "greatli": [198, 234, 318, 376, 384, 445, 983, 996, 1028, 1036], "268": [198, 219, 247], "plot_ols_ridge_vari": [198, 219], "make_sparse_coded_sign": [199, 524, 530, 1036, 1038], "orthogonalmatchingpursuit": [199, 658, 678, 679, 976, 1022, 1024, 1027, 1030, 1035], "orthogonalmatchingpursuitcv": [199, 657, 1024, 1035], "512": [199, 208, 219, 246, 253], "n_nonzero_coef": [199, 519, 524, 530, 535, 541, 643, 657, 678, 679], "xw": [199, 316, 639, 640, 642, 645, 646, 647, 648, 649, 653, 654, 655, 656, 665, 674, 675, 676, 677, 976], "_0": [199, 678, 976, 980, 995], "distort": [199, 233, 373, 400, 401, 869, 881, 886, 977, 990, 992], "y_noisi": 199, "idx_r": 199, "omp_cv": 199, "plot_omp": [199, 219], "gbrt": [200, 409], "contract": [200, 218, 363, 389, 1001], "compani": [200, 218, 402, 1004], "policyhold": [200, 218, 976], "vehicl": [200, 218], "driver": [200, 218, 1037], "exposur": [200, 218, 976], "car": 200, "accid": [200, 218], "noll": [200, 218], "salzmann": [200, 218], "wuthrich": [200, 218], "2139": [200, 218], "ssrn": [200, 218], "3164764": [200, 218], "ch": [200, 202, 218, 325, 327], "rth": [200, 218], "41214": [200, 218], "idpol": [200, 218], "claimnb": [200, 218], "vehpow": [200, 218], "vehag": [200, 218], "drivag": [200, 218], "bonusmalu": [200, 218], "vehbrand": [200, 218], "vehga": [200, 218], "b12": [200, 218], "1217": 200, "r82": 200, "77000": 200, "75000": 200, "diesel": [200, 218], "r22": 200, "09000": 200, "r72": 200, "84000": 200, "678008": 200, "6114326": 200, "00274": 200, "3317": 200, "r93": 200, "678009": 200, "6114327": 200, "9850": 200, "r11": [200, 218], "678010": 200, "6114328": 200, "1323": 200, "678011": 200, "6114329": 200, "r26": 200, "678012": 200, "6114330": 200, "678013": [200, 218], "10070308464041304": 200, "log_scale_transform": [200, 218], "linear_model_preprocessor": 200, "passthrough_numer": [200, 218], "binned_numer": [200, 218], "2e5": [200, 218], "log_scaled_numer": [200, 218], "onehot_categor": [200, 218], "imbalanc": [200, 264, 268, 270, 348, 387, 400, 406, 696, 701, 779, 790, 794, 829, 980, 982, 988, 1000], "simplist": [200, 410], "pertin": 200, "dummyregressor": [200, 218, 544, 980, 1023, 1025, 1026, 1029, 1030, 1032, 1035, 1036], "df_train": [200, 218], "df_test": [200, 218], "regressor__sample_weight": 200, "mean_absolute_error": [200, 202, 218, 980, 1023, 1025], "mean_poisson_devi": [200, 980, 1032], "score_estim": [200, 218], "n_mask": 200, "564": 200, "189": [200, 382, 889, 993], "comonli": 200, "ridge_glm": 200, "strictli": [200, 218, 236, 303, 319, 348, 381, 389, 400, 405, 407, 410, 501, 502, 528, 534, 537, 554, 555, 581, 584, 635, 663, 664, 688, 693, 731, 758, 789, 792, 793, 799, 803, 815, 841, 868, 880, 884, 885, 887, 888, 892, 893, 897, 898, 927, 969, 971, 976, 980, 990, 994, 1023, 1033, 1038], "domain": [200, 309, 389, 391, 406, 628, 714, 715, 716, 790, 791, 796, 797, 798, 976, 1001], "186": [200, 300, 382, 780, 980], "595": 200, "223745": 200, "597": 200, "glm": [200, 218, 314, 641, 662, 673, 976, 1022, 1033], "vanilla": [200, 398, 402, 440, 442, 453, 622], "poissonregressor": [200, 218, 314, 317, 641, 673, 976, 1033, 1036, 1037], "poisson_glm": 200, "newton": [200, 218, 300, 603, 641, 651, 652, 662, 673, 849, 850, 976, 1026, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038], "deep": [200, 378, 389, 409, 416, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 761, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 984, 985, 1000, 1001, 1004, 1027, 1033, 1034, 1036], "implicit": [200, 389, 409, 410, 565, 675, 676, 974, 979, 1000, 1031], "concis": [200, 376, 381, 1033, 1035], "poisson_gbrt": 200, "566": 200, "prone": [200, 248, 307, 387, 400], "set_yscal": [200, 795], "5e5": 200, "realiz": [200, 1004], "priori": [200, 217, 270, 279, 303, 389, 402, 409, 581, 587, 979, 1038], "wrongli": [200, 334], "gen_even_slic": [200, 385, 932], "_mean_frequency_by_risk_group": 200, "y_true_bin": 200, "y_pred_bin": 200, "idx_sort": 200, "sl": 200, "y_true_seg": 200, "y_pred_seg": 200, "11935": 200, "11933": 200, "11932": 200, "12196": 200, "11931": 200, "portfolio": [200, 218, 974], "riskiest": [200, 218], "safest": [200, 218, 358, 370], "irrespect": [200, 233, 270, 281, 599], "lorenz": [200, 218, 1027], "summar": [200, 252, 268, 270, 349, 376, 378, 391, 409, 514, 651, 687, 699, 700, 976, 977, 980, 986], "gini": [200, 218, 241, 273, 315, 546, 547, 550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 969, 988, 996, 1030, 1031, 1038, 1039], "lorenz_curv": [200, 218], "ranked_frequ": 200, "ranked_exposur": [200, 218], "cumulated_claim": 200, "cumulated_exposur": 200, "cum_exposur": 200, "cum_claim": [200, 218], "0x7f7f3202bb50": 200, "occurr": [200, 309, 348, 349, 371, 376, 402, 410, 562, 563, 574, 582, 583, 610, 620, 621, 622, 623, 775, 827, 855, 982, 1023, 1028], "circumstanti": 200, "extractor": [200, 300, 364, 371, 389, 410, 496, 969, 1022], "discrim": 200, "profil": [200, 362, 376, 379, 514, 517, 976, 1004], "ideal": [200, 202, 218, 258, 261, 268, 270, 271, 358, 375, 376, 380, 381, 384, 387, 389, 400, 718, 748, 969, 979, 994, 995, 1001], "meaningfulli": [200, 980], "516": [200, 219], "plot_poisson_regression_non_normal_loss": [200, 219], "monomi": 201, "vandermond": [201, 990], "x_0": [201, 650], "pseudo": [201, 300, 378, 406, 414, 433, 445, 447, 455, 462, 463, 464, 466, 467, 468, 469, 526, 554, 555, 556, 620, 627, 632, 634, 635, 639, 640, 645, 646, 653, 654, 655, 656, 670, 684, 688, 792, 793, 801, 803, 841, 848, 884, 885, 889, 892, 893, 894, 897, 928, 929, 976, 992, 1027, 1036], "basis_1": 201, "basis_2": 201, "infinit": [201, 246, 264, 362, 412, 439, 615, 616, 770, 787, 910, 912, 913, 972, 979, 990, 995, 1030, 1032, 1035, 1036, 1037], "malt": [201, 1035, 1036, 1037], "londschien": [201, 1035], "prepar": [201, 236, 347, 362, 378, 379, 382, 384, 996, 1004, 1030, 1038], "set_prop_cycl": 201, "teal": [201, 210, 268], "yellowgreen": [201, 203, 210, 354], "tomato": 201, "unwant": [201, 347], "oscillatori": [201, 990], "danger": [201, 406], "pft": 201, "splt": 201, "bsplines_": [201, 871], "refrain": [201, 376], "dec": [201, 670, 871, 896, 995], "31st": [201, 871], "advis": [201, 236, 358, 374, 376, 402, 410, 430, 639, 645, 647, 653, 655, 665, 680, 948, 972, 976, 982, 984, 995, 1036], "x_plot_ext": 201, "y_plot_ext": 201, "437": [201, 219, 348], "plot_polynomial_interpol": [201, 219, 867, 871], "pareto": 202, "dale": [202, 1035], "mail": [202, 308, 371, 376, 380, 384, 387, 390, 998, 1030, 1031], "ru": 202, "glemaitre58": 202, "y_true_mean": 202, "y_normal": 202, "y_pareto": 202, "huge": [202, 205, 362, 382, 620, 1025], "heavi": [202, 399, 1001], "parse_vers": [202, 663], "sp_version": [202, 663], "incompat": [202, 380, 489, 970, 1030, 1031], "older": [202, 236, 375, 380, 1025, 1032, 1034], "recent": [202, 236, 365, 374, 377, 381, 384, 389, 392, 402, 461, 531, 558, 994, 1004, 1025, 1034], "interior": [202, 663, 976, 1037], "out_bounds_predict": 202, "bool_": 202, "logical_or": [202, 208, 270, 382], "hit": [202, 382], "wider": [202, 410, 905, 976], "asymmetri": [202, 347], "linger": 202, "linear_regress": [202, 275], "quantile_regress": 202, "y_pred_lr": 202, "y_pred_qr": 202, "805": 202, "670": 202, "cv_results_lr": 202, "cv_results_qr": 202, "test_neg_mean_squared_error": [202, 815], "732": 202, "690": 202, "679": [202, 892], "129": [202, 1011, 1022], "579": [202, 219, 517], "plot_quantile_regress": [202, 219], "robustli": [203, 401], "faulti": [203, 1022], "1903908407869": 203, "17236387": 203, "08533159": 203, "ransacregressor": [203, 206, 217, 642, 671, 672, 976, 1025, 1027, 1028, 1029, 1030, 1033, 1035, 1036], "inlier_mask": 203, "inlier_mask_": [203, 664], "outlier_mask": 203, "line_x": [203, 217], "line_i": 203, "line_y_ransac": 203, "estimator_": [203, 236, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 586, 587, 590, 664, 964, 1037], "095": [203, 219], "plot_ransac": [203, 219], "mathcal": [204, 342, 407, 409, 620, 689, 972, 974, 976, 980, 994, 1035], "discourag": [204, 387, 392, 682], "beta_": [204, 407], "excess": [204, 439, 990, 1029], "encourag": [204, 297, 334, 375, 376, 387, 995, 1000], "kornel": [204, 1028], "kielczewski": [204, 1028], "plusnet": 204, "32634568": 204, "49665188": 204, "75747153": 204, "08699432": 204, "44381023": 204, "69892343": 204, "28808734": 204, "75949622": 204, "errors_coef": 204, "regularis": [204, 415, 466, 468], "logx": [204, 342], "gradual": [204, 849, 850, 994], "formerli": [204, 1023, 1026, 1028, 1029], "intric": [204, 505], "rapidli": [204, 263, 995, 1004, 1009], "influenti": [204, 348, 1004], "pose": [204, 269, 976, 1014], "lose": [204, 217, 349, 371, 389, 405, 410, 412, 539, 928, 929, 970, 976, 1015], "concret": [204, 377, 390, 411, 661, 667, 668, 669, 670, 884, 885, 976, 994], "plot_ridge_coeff": [204, 219], "practis": 205, "10x10": 205, "hilbert": [205, 858, 972, 990], "n_alpha": [205, 465, 639, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 666, 668, 674, 675, 676, 677, 1025], "plot_ridge_path": [205, 219], "theilsen": 206, "lessen": [206, 651, 652, 892, 893], "theilsenregressor": [206, 217, 642, 664, 671, 976, 1026, 1034, 1036], "x_error": 206, "y_errors_larg": 206, "x_errors_larg": 206, "deviant": [206, 986], "legend_titl": 206, "nabsolut": 206, "nto": [206, 270], "745": [206, 219], "plot_robust_fit": [206, 219], "asgd": [207, 994], "rob": [207, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1034, 1037], "zinkov": [207, 1022, 1023, 1024, 1026, 1027], "heldout": 207, "squared_hing": [207, 342, 659, 669, 892, 899, 976], "0e4": 207, "yy_": 207, "plot_sgd_comparison": [207, 219], "_test": [208, 305, 378, 1035], "ignore_warn": [208, 305, 1028], "load_mnist": [208, 281], "class_0": [208, 373, 503], "class_1": [208, 373, 503], "mnist_784": [208, 216, 281, 299], "fit_and_scor": 208, "train_scor": [208, 309, 342, 352, 795, 811, 815, 816, 819, 975], "estimator_dict": 208, "flush": 208, "results_df": [208, 261, 309], "group_df": 208, "plot_sgd_early_stop": [208, 219], "ova": [209, 659, 661, 669, 994], "plot_sgd_iri": [209, 219], "ugli": [209, 284, 289, 292, 330], "114": [209, 219, 318, 1022], "modified_huber_loss": 210, "darkorchid": 210, "096": [210, 219], "plot_sgd_loss_funct": [210, 219], "l1_color": 211, "l2_color": 211, "elastic_net_color": 211, "1001": 211, "rho": [211, 407, 670, 976, 994, 1023], "elastic_net": 211, "dpi": [211, 906, 1035], "elastic_net_contour": 211, "l2_contour": 211, "l1_contour": 211, "inlin": [211, 376, 377, 996], "264": [211, 219], "plot_sgd_penalti": [211, 219], "ndenumer": 212, "plot_sgd_separating_hyperplan": [212, 219], "no_weight": 213, "samples_weight": 213, "no_weights_handl": 213, "weights_handl": 213, "074": [213, 219, 223, 259], "plot_sgd_weighted_sampl": [213, 219], "sgdoneclasssvm": [214, 229, 316, 896, 986, 994, 1035, 1037, 1038], "rc": [214, 380], "novel": [214, 287, 333, 358, 400, 969], "abnorm": [214, 229, 287, 333, 371, 485, 556, 838, 986, 1030], "y_pred_train": [214, 333], "y_pred_test": [214, 287, 333], "y_pred_outli": [214, 287, 333], "n_error_train": [214, 333], "n_error_test": [214, 287, 333], "n_error_outli": [214, 287, 333], "clf_sgd": 214, "pipe_sgd": 214, "y_pred_train_sgd": 214, "y_pred_test_sgd": 214, "y_pred_outliers_sgd": 214, "n_error_train_sgd": 214, "n_error_test_sgd": 214, "n_error_outliers_sgd": 214, "z_sgd": 214, "pubu": [214, 233, 287, 333], "darkr": [214, 287, 333], "palevioletr": [214, 287, 333], "b1": [214, 287, 333], "b2": [214, 287, 333], "blueviolet": [214, 287, 333], "plot_sgdocsvm_vs_ocsvm": [214, 219], "newgroups20": 215, "trim": [215, 402, 832, 833], "20newsgroup": [215, 369, 1022], "4500": 215, "130107": [215, 233, 482], "epoch": [215, 389, 529, 659, 660, 661, 669, 670, 671, 849, 850, 994, 1029, 1030, 1035], "5960": 215, "26593496": 215, "43348936": 215, "26362917": 215, "31973683": 215, "37815029": 215, "2928359": 215, "27054655": 215, "62717609": 215, "19522393": 215, "30897646": 215, "34586917": 215, "28207552": 215, "34125758": 215, "29898468": 215, "34279478": 215, "59489497": 215, "38353048": 215, "35278655": 215, "19829832": 215, "14603365": 215, "6440": 215, "36047253": 215, "1268187": 215, "10606655": 215, "17985197": 215, "5395559": 215, "07993421": 215, "06686804": 215, "21443888": 215, "11528972": 215, "2075215": 215, "10914094": 215, "11144673": 215, "13988486": 215, "09684337": 215, "26286057": 215, "11682692": 215, "55800226": 215, "17370318": 215, "11452112": 215, "093": [215, 464, 1027], "arthur": [215, 216, 402, 440, 453, 1027, 1028, 1029, 1030, 1031, 1034, 1036], "mensch": [215, 216, 1027, 1028, 1029, 1030], "timeit": [215, 249, 382], "default_tim": [215, 249], "model_param": 215, "this_max_it": 215, "train_tim": [215, 235, 347, 348], "ndataset": [215, 305], "run_tim": [215, 216], "plot_sparse_logistic_regression_20newsgroup": [215, 219], "8253": 216, "866": [216, 988], "l1_plot": 216, "929": [216, 219], "plot_sparse_logistic_regression_mnist": [216, 219], "subpopul": [217, 672, 976], "residual_threshold": [217, 664, 976, 1035], "remedi": 217, "max_subpopul": [217, 672, 1036], "florian": [217, 1004, 1022, 1026, 1028, 1032], "wilhelm": [217, 1026, 1028, 1032], "indigo": 217, "529": [217, 219], "plot_theilsen": [217, 219], "motor": 218, "parti": [218, 319, 363, 375, 387, 791, 798, 948, 998, 1022, 1033, 1038], "liabil": 218, "functool": 218, "mean_tweedie_devi": [218, 980, 1032], "load_mtpl2": 218, "fremtpl2freq": 218, "df_freq": 218, "fremtpl2sev": 218, "41215": 218, "df_sev": 218, "claimamount": 218, "fillna": 218, "unquot": 218, "column_nam": 218, "plot_obs_pr": 218, "y_label": 218, "fill_legend": 218, "df_": 218, "tweedie_pow": 218, "d\u00b2": 218, "subset_label": 218, "score_label": [218, 267], "est_freq": 218, "est_sev": 218, "unstack": [218, 264], "fremtpl2": 218, "unreason": [218, 406], "exception": 218, "200000": 218, "column_tran": [218, 403], "purepremium": 218, "indirectli": 218, "avgclaimamount": 218, "fmax": 218, "option_context": 218, "max_column": 218, "139": [218, 277, 281, 382, 409, 445, 455, 684, 688, 981], "414": [218, 403, 718, 748, 868, 880, 980], "424": 218, "463": 218, "27000": 218, "303": [218, 628], "404": [218, 348], "333333": 218, "r25": 218, "1981": [218, 976], "14156": 218, "142857": 218, "4792": 218, "1456": 218, "10403": 218, "928571": 218, "10834": 218, "17474": 218, "193548": 218, "225806": 218, "r73": 218, "3986": 218, "12860": [218, 1031], "5417": 218, "seemingli": [218, 358, 387], "169504": 218, "6237": 218, "upon": [218, 226, 294, 371, 376, 387, 389, 396, 554, 555, 620, 623, 664, 781, 787, 788, 832, 833, 969, 976, 996, 1006, 1015, 1036], "glm_freq": 218, "0201": 218, "0219": 218, "1379": 218, "1378": 218, "2441": 218, "2246": 218, "surprisingli": [218, 371, 410], "bonu": [218, 376, 1010, 1015], "malu": 218, "younger": 218, "infti": [218, 412, 612, 976, 990, 1029], "gammaregressor": [218, 314, 317, 673, 976, 1033, 1036, 1037], "mask_test": 218, "glm_sev": 218, "400000e": 218, "700000e": 218, "756746e": 218, "744042e": 218, "801770e": 218, "030677e": 218, "dummy_sev": 218, "000000e": 218, "756687e": 218, "744497e": 218, "803882e": 218, "033764e": 218, "avgclaim": 218, "nbclaim": 218, "1951": 218, "1940": 218, "1978": [218, 976], "apriori": 218, "regardless": [218, 262, 263, 264, 363, 376, 402, 528, 625, 626, 651, 697, 708, 980, 992, 1030, 1037, 1038, 1039], "glm_pure_premium": 218, "999": [218, 261, 380, 409, 710, 849, 850], "scores_product_model": 218, "scores_glm_pure_premium": 218, "expand_frame_repr": 218, "690000e": 218, "420000e": 218, "669930e": 218, "617050e": 218, "640770e": 218, "640880e": 218, "7000": 218, "695740e": 218, "683980e": 218, "682880e": 218, "692270e": 218, "8000": [218, 264, 265], "046010e": 218, "040530e": 218, "037600e": 218, "045390e": 218, "9000": 218, "387580e": 218, "385000e": 218, "382120e": 218, "387830e": 218, "9900": 218, "015716e": 218, "015414e": 218, "015347e": 218, "015587e": 218, "9990": 218, "914573e": 218, "914370e": 218, "914538e": 218, "914387e": 218, "904751e": 218, "904556e": 218, "904747e": 218, "904558e": 218, "730119e": 218, "722128e": 218, "739865e": 218, "731249e": 218, "295040e": 218, "212197e": 218, "295505e": 218, "213056e": 218, "917618e": 218, "299546e": 218, "916555e": 218, "313276e": 218, "951751e": 218, "325198e": 218, "riski": 218, "operation": [218, 1004], "simpler": [218, 334, 362, 375, 402, 407, 976, 981, 1013, 1027], "develop": [218, 259, 261, 313, 319, 347, 362, 365, 371, 375, 376, 382, 387, 389, 390, 391, 393, 396, 399, 401, 404, 405, 409, 410, 416, 419, 426, 486, 789, 964, 976, 980, 983, 996, 998, 1000, 1001, 1003, 1004, 1013, 1022, 1030, 1031, 1032, 1035, 1037, 1039], "ranked_pure_premium": 218, "cumulated_claim_amount": 218, "cumulated_sampl": 218, "y_pred_product": 218, "y_pred_tot": 218, "ordered_sampl": 218, "176": [218, 219, 292, 295, 336, 345, 382, 825, 981, 988], "plot_tweedie_regression_insurance_claim": [218, 219], "865": 219, "auto_examples_linear_model": 219, "md": [221, 222, 223, 224, 380, 681, 685, 687, 1016, 1017, 1022, 1034, 1037], "seek": [221, 223, 225, 375, 376, 387, 390, 501, 502, 977, 1007, 1009], "ticker": [221, 223, 226, 281], "s_point": 221, "s_color": 221, "make_s_curv": [221, 226], "plot_3d": 221, "points_color": 221, "subplot_kw": [221, 285], "set_major_loc": [221, 286], "multipleloc": [221, 286], "add_2d_scatt": 221, "set_major_formatt": [221, 223, 226, 281, 286], "nullformatt": [221, 223, 226, 281], "lle": [221, 222, 223, 225, 523, 682, 686, 977, 1034], "thought": [221, 286, 389, 402, 439, 977, 981], "analys": [221, 356, 407, 792, 793, 977, 1000, 1004], "lle_standard": 221, "s_standard": 221, "lle_ltsa": 221, "ltsa": [221, 222, 223, 682, 686, 977], "s_ltsa": 221, "lle_hessian": 221, "hessian": [221, 222, 223, 409, 641, 651, 652, 662, 673, 682, 686, 976, 984, 1016, 1017, 1037], "s_hessian": 221, "lle_mod": 221, "s_mod": 221, "lle_method": 221, "tangent": [221, 682, 686, 978, 1016, 1017], "eigenmap": [221, 682, 684, 686, 688, 1016, 1017, 1023], "isometr": [221, 681, 683, 684, 685, 977], "geodes": [221, 681, 977], "s_isomap": 221, "md_scale": 221, "normalized_stress": [221, 222, 223, 224, 683, 687, 977, 1037], "s_scale": 221, "laplacian": [221, 368, 399, 433, 445, 455, 613, 632, 636, 684, 688, 757, 758, 766, 888, 976, 977, 993, 1017, 1023, 1028], "s_spectral": 221, "t_sne": [221, 1030], "s_t_sne": 221, "plot_compare_method": [221, 227], "offsetbox": 222, "plot_embed": 222, "425": [222, 608], "shown_imag": 222, "someth": [222, 236, 347, 376, 378, 379, 380, 384, 410, 980, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "4e": 222, "imagebox": 222, "annotationbbox": 222, "offsetimag": 222, "neighborhoodcomponentsanalysi": [222, 289, 290, 291, 983, 1031, 1036], "random_project": [222, 233, 365, 992, 997, 1023, 1028, 1038], "sparserandomproject": [222, 233, 884, 992, 1023, 1028, 1036, 1038], "embeed": 222, "n_iter_without_progress": [222, 685, 1027, 1028], "nca": [222, 289, 290, 291, 841, 983], "plot_lle_digit": [222, 227], "pole": 223, "thin": [223, 613], "earth": [223, 348, 756, 1000], "094": [223, 330, 345, 465], "047": [223, 348, 382], "sphere_data": 223, "trans_data": 223, "2g": [223, 226, 690, 1033], "257": [223, 259, 274, 277], "258": 223, "573": [223, 227, 410], "plot_manifold_spher": [223, 227], "euclidean_dist": [224, 233, 378, 443, 450, 681, 754, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 1022, 1027, 1030, 1031], "finfo": [224, 464, 465, 471, 599, 643, 644, 647, 648, 649, 675, 676, 733, 1037], "x_true": 224, "dissimilar": [224, 389, 399, 445, 683, 687, 977, 1028, 1038], "embedding_": [224, 389, 681, 682, 683, 684, 685], "nmd": 224, "npo": 224, "plot_md": [224, 227], "sr_point": 225, "sr_color": 225, "ambient": 225, "text2d": 225, "unrol": 225, "unnecessarili": [225, 1029, 1032], "clump": 225, "sr_lle": 225, "sr_err": 225, "locally_linear_embed": [225, 977], "sr_tsne": 225, "stretch": [225, 250], "byproduct": 225, "sh_point": 225, "sh_color": 225, "topologi": [225, 226], "sh_lle": 225, "sh_err": 225, "sh_tsne": 225, "230": [225, 227, 577], "plot_swissrol": [225, 227], "tendenc": [226, 976, 977, 979, 982, 985], "clearer": [226, 995], "distil": 226, "pub": [226, 830, 887], "misread": 226, "narin": [226, 1029, 1030], "kokhlikyan": [226, 1029, 1030], "464": [226, 227], "plot_t_sne_perplex": [226, 227], "187": [227, 261, 382, 577, 981, 1013, 1024], "auto_examples_manifold": 227, "cope": [229, 364, 371, 976], "multimod": 229, "inli": [229, 976, 986], "unimod": [229, 467], "localoutlierfactor": [229, 239, 287, 288, 317, 389, 556, 896, 986, 1029, 1030, 1032, 1036, 1037, 1038], "modal": [229, 467, 931], "hypercub": [229, 508], "decent": [229, 260, 371, 982], "handpick": 229, "absenc": [229, 264, 389, 705, 855, 979, 980], "negative_linestyl": 229, "outliers_fract": 229, "n_inlier": 229, "anomaly_algorithm": 229, "blobs_param": 229, "859": [229, 244], "plot_anomaly_comparison": [229, 244], "transfus": 230, "1464": 230, "donat": 230, "cm_displai": 230, "y_score": [230, 268, 270, 389, 475, 476, 477, 700, 713, 718, 719, 731, 732, 748, 774, 780, 781, 784, 789, 792, 793, 803, 852, 980, 1028, 1036, 1038], "pos_label": [230, 239, 389, 431, 432, 691, 693, 695, 699, 700, 702, 719, 721, 722, 730, 774, 775, 776, 779, 781, 859, 876, 980, 1030, 1034, 1036], "roc_displai": 230, "previs": 230, "precision_recall_curv": [230, 268, 693, 699, 700, 719, 980, 1023, 1024, 1028, 1035, 1036, 1038], "pr_displai": 230, "easlii": 230, "plot_display_object_visu": [230, 244], "summaris": [231, 314], "composit": [231, 314, 365, 368, 406, 651, 780, 970, 976, 989, 1017, 1023], "num_proc": [231, 314], "cat_proc": [231, 314], "feat1": [231, 314, 410], "feat3": [231, 314, 410], "feat0": [231, 314], "feat2": [231, 314, 410], "plot_estimator_represent": [231, 244], "isotonicregress": [232, 971, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1034, 1036, 1037, 1038], "ir": [232, 407, 583, 718, 748, 827, 831, 978, 980], "out_of_bound": [232, 628], "y_": [232, 247, 251, 252, 293, 378, 405, 407, 630, 641, 662, 673, 721, 722, 730, 756, 775, 776, 779, 976, 980, 1028], "linearregressionlinearregress": 232, "x_thresholds_": [232, 628, 1034], "y_thresholds_": [232, 628, 1034], "plot_isotonic_regress": [232, 244], "lemma": [233, 368, 401, 527, 534, 542, 884, 885, 886, 974, 1017, 1025], "johnson_lindenstrauss_min_dim": [233, 992, 1023], "achliopta": [233, 885, 886, 992], "_compon": [233, 529], "geq": [233, 400, 407, 409, 976, 980, 990, 994, 995], "_sampl": [233, 407, 531, 533, 540], "admiss": [233, 363], "eps_rang": 233, "min_n_compon": 233, "nn_sampl": [233, 273], "semilogi": 233, "nn_compon": [233, 234], "100k": 233, "n_components_rang": 233, "rp": 233, "projected_data": 233, "n_byte": 233, "projected_dist": 233, "min_dist": 233, "max_dist": 233, "hexbin": 233, "gridsiz": 233, "332": [233, 262, 348, 880], "452": 233, "jl": [233, 885], "436": 233, "754": [233, 244], "plot_johnson_lindenstrauss_bound": [233, 244], "rbfsampler": [234, 632, 633, 635, 972, 1006, 1026, 1036, 1037], "mont": [234, 412, 604, 634, 635, 972, 985], "fourier": [234, 401, 631, 632, 633, 634, 635, 750, 751, 972], "acceler": [234, 318, 362, 387, 402, 461, 685, 890, 977, 1000, 1004, 1031, 1035, 1037], "data_train": [234, 262, 347], "targets_train": 234, "data_test": [234, 262, 347], "targets_test": 234, "kernel_svm": 234, "linear_svm": 234, "feature_map_fouri": 234, "feature_map_nystroem": [234, 632], "fourier_approx_svm": 234, "feature_map": [234, 303], "nystroem_approx_svm": 234, "kernel_svm_tim": 234, "kernel_svm_scor": 234, "linear_svm_tim": 234, "linear_svm_scor": 234, "fourier_scor": 234, "nystroem_scor": 234, "fourier_tim": 234, "nystroem_tim": 234, "feature_map__n_compon": 234, "timescal": 234, "ly": [234, 840, 842, 843, 844, 1026], "flat_grid": 234, "lv_ep": 234, "tab10": [234, 251], "plot_kernel_approxim": [234, 244], "krr": [235, 412, 636, 973], "insensit": [235, 636, 669, 671, 780, 893, 973, 994, 995, 1022], "fifth": [235, 973, 1006], "kr": [235, 261, 1036], "svr_fit": 235, "kr_fit": 235, "sv_ratio": 235, "support_": [235, 341, 462, 467, 586, 587, 595, 894, 895, 896, 897, 898, 995], "y_svr": 235, "svr_predict": 235, "y_kr": 235, "kr_predict": 235, "09999999999999999": [235, 269, 334], "340": [235, 322, 348], "168": [235, 1022], "sv_ind": 235, "arithmet": [235, 382, 384, 402, 544, 641, 662, 673, 697, 710, 728, 729, 749, 785, 980, 1030], "test_tim": [235, 347], "train_test_s": 235, "learningcurvedisplai": [235, 263, 318, 975, 1037, 1038], "negate_scor": [235, 795, 811], "score_typ": [235, 263, 276, 319, 795, 811, 1038], "std_display_styl": [235, 263, 795, 811], "get_legend_handles_label": [235, 263, 268], "455": [235, 244, 309], "plot_kernel_ridge_regress": [235, 244], "set_config": [236, 241, 243, 310, 314, 362, 363, 393, 403, 430, 436, 437, 440, 442, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 603, 604, 619, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 1031, 1033, 1036, 1038], "metaestimatormixin": 236, "regressormixin": [236, 378, 389, 458, 1033], "transformermixin": [236, 281, 378, 389, 458, 1030, 1037, 1038, 1039], "metadata_rout": [236, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903], "metadatarout": [236, 430, 652, 823, 824, 825, 826, 852, 939, 1039], "methodmap": [236, 937], "get_routing_for_object": 236, "process_rout": [236, 1039], "my_group": [236, 393], "my_weight": [236, 393], "my_other_weight": [236, 393], "enable_metadata_rout": [236, 393, 430, 436, 437, 440, 442, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 1038], "check_metadata": 236, "obj": [236, 396, 560, 561, 939, 940, 941, 946], "print_rout": 236, "get_metadata_rout": [236, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 936, 938, 939, 940, 980], "_serial": 236, "exampleclassifi": 236, "smart": [236, 436, 452, 453, 583], "accomplish": [236, 378, 400, 539, 977, 981, 983, 1004], "magic": [236, 377, 382, 412, 609, 614, 617], "set_fit_request": [236, 393, 430, 436, 437, 440, 442, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 581, 584, 587, 628, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 683, 789, 792, 793, 803, 824, 825, 827, 828, 829, 830, 831, 837, 857, 858, 871, 872, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903], "set_predict_request": [236, 436, 440, 442, 475, 476, 477, 545, 604, 628, 637, 638, 900, 901, 902, 903], "set_score_request": [236, 393, 430, 436, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 603, 604, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 834, 835, 839, 842, 843, 849, 850, 852, 887, 888, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 980], "inherit": [236, 376, 378, 388, 389, 570, 669, 921, 923, 976, 1022, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1037, 1038, 1039], "metaclassifi": [236, 237], "owner": [236, 371, 373, 936, 937], "method_map": [236, 937], "fit_param": [236, 389, 426, 430, 435, 438, 458, 525, 527, 529, 530, 532, 535, 536, 542, 560, 562, 563, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 621, 623, 628, 631, 632, 633, 634, 635, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 823, 824, 825, 826, 836, 841, 844, 848, 851, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 884, 885, 940, 1029, 1032, 1033, 1034, 1036, 1038], "metadatarequest": [236, 416, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 937, 939, 1039], "request_rout": 236, "validate_metadata": 236, "routed_param": [236, 940], "route_param": 236, "caller": [236, 403, 639, 640, 645, 653, 654, 655, 674, 882, 883, 938, 948, 956, 957, 958, 1031], "predict_param": [236, 458, 560, 561, 1035], "object_nam": [236, 937, 940], "method_nam": [236, 940], "silent": [236, 410, 574, 848, 990, 1027, 1028, 1030, 1031, 1035, 1036], "bug": [236, 313, 314, 315, 316, 317, 318, 319, 365, 374, 378, 379, 381, 384, 387, 389, 998, 1001, 1022, 1023, 1024, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "notabl": [236, 303, 370, 389, 489, 720, 865, 977, 979, 983, 1026, 1029, 1036], "metaclassifiermetaclassifi": 236, "exampleclassifierexampleclassifi": 236, "typeerror": [236, 316, 381, 704, 916, 964, 1029, 1030, 1033, 1035], "got": [236, 268, 358, 381, 544, 642, 658, 1035, 1037], "sample_weight1": 236, "sample_weight2": 236, "aliased_sample_weight": 236, "alia": [236, 377, 380, 384, 389, 430, 436, 437, 440, 442, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 526, 527, 531, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 581, 583, 584, 587, 603, 604, 610, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 789, 790, 791, 792, 793, 796, 798, 803, 807, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 837, 839, 842, 843, 849, 850, 852, 855, 857, 858, 859, 864, 871, 872, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 954, 986, 1001, 1022, 1036], "calle": [236, 938], "predict_log_proba": [236, 378, 389, 542, 543, 544, 546, 548, 550, 552, 557, 586, 587, 651, 652, 669, 789, 792, 793, 803, 813, 827, 828, 829, 830, 831, 849, 852, 889, 894, 897, 900, 902, 995, 1022, 1035], "meta_est": 236, "routerconsumerclassifi": 236, "add_self_request": 236, "self_request": 236, "clf_sample_weight": 236, "meta_clf_sample_weight": 236, "routerconsumerclassifierrouterconsumerclassifi": 236, "complic": [236, 297, 382, 412, 687, 983], "simplepipelin": 236, "_required_paramet": [236, 378], "transformer_": [236, 458], "child": [236, 347, 356, 363, 387, 389, 393, 402, 409, 435, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 900, 901, 902, 903, 940, 948, 996, 1029], "boilerpl": [236, 378, 1004, 1015], "exampletransform": 236, "set_transform_request": [236, 475, 476, 477, 526, 575, 581, 583, 584, 628, 855, 858, 864, 872], "metaregressor": 236, "weightedmetaregressor": 236, "__metadata_request__fit": 236, "compat": [236, 264, 281, 314, 370, 379, 385, 386, 387, 389, 392, 393, 410, 456, 462, 501, 559, 570, 578, 579, 582, 596, 607, 608, 611, 612, 613, 615, 616, 625, 626, 627, 651, 652, 666, 668, 766, 770, 790, 791, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810, 836, 837, 857, 865, 866, 904, 905, 908, 943, 977, 980, 983, 985, 1000, 1001, 1004, 1017, 1022, 1025, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "exampleregressor": 236, "commun": [236, 369, 375, 379, 381, 384, 389, 392, 402, 409, 531, 533, 540, 685, 703, 864, 970, 977, 983, 990, 994, 998, 1000, 1004, 1030, 1031], "vendor": [236, 1027, 1030, 1031], "NOT": [236, 287, 373, 379, 799, 832, 833], "signatur": [236, 347, 348, 371, 481, 482, 550, 551, 557, 558, 587, 603, 604, 652, 666, 668, 704, 734, 795, 811, 814, 816, 819, 865, 940, 969, 1029, 1035, 1039], "070": [236, 244, 335, 345], "plot_metadata_rout": [236, 244], "theta_c": [237, 516], "reject": [237, 389, 390, 516, 664, 719, 912, 913, 976, 980, 1030], "likewis": [237, 402, 516], "surround": [237, 376, 838, 986], "cca": [237, 405, 476, 478, 1026, 1030, 1031, 1032, 1034, 1036], "onevsrestclassifi": [237, 268, 270, 279, 400, 820, 822, 892, 1006, 1023, 1024, 1026, 1028, 1029, 1035, 1036], "min_x": 237, "max_x": 237, "plot_subfigur": 237, "min_i": 237, "zero_class": 237, "one_class": 237, "160": [237, 969, 1013], "nfor": 237, "269": [237, 244, 504], "plot_multilabel": [237, 244], "extratreesregressor": [238, 409, 550, 558, 559, 902, 903, 1025, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039], "n_face": 238, "face_id": 238, "n_pixel": [238, 259], "nn": [238, 410, 688, 1013], "y_test_predict": 238, "true_fac": 238, "completed_fac": 238, "plot_multioutput_face_complet": [238, 244], "benchmark": [239, 281, 315, 348, 349, 362, 369, 371, 376, 387, 392, 395, 400, 461, 508, 890], "iforest": 239, "pharuj": 239, "rajborirug": 239, "ra": 239, "kmitl": 239, "ac": [239, 523, 657, 678, 679, 976, 993, 1015], "preprocess_dataset": 239, "fetch_kddcup99": [239, 371, 1029, 1030, 1031, 1034, 1035], "labelbinar": [239, 270, 389, 733, 821, 856, 865, 876, 981, 1006, 1025, 1026, 1027, 1031, 1036], "dataset_nam": [239, 281], "smtp": [239, 371, 485], "sa": [239, 371, 485], "percent10": [239, 485], "lb": [239, 859, 991], "forestcov": 239, "glass": [239, 371], "cardiotocographi": 239, "tablewar": 239, "x_mal": 239, "y_mal": 239, "x_ben": 239, "y_ben": 239, "x_mal2": 239, "y_mal2": 239, "compute_predict": 239, "negative_outlier_factor_": [239, 288, 838, 986], "datasets_nam": 239, "models_nam": 239, "ceil": [239, 550, 551, 552, 553, 556, 557, 558, 559, 587, 664, 792, 793, 900, 901, 902, 903, 994], "model_idx": 239, "plot_chance_level": [239, 268, 270, 271, 693, 695, 1038], "chance_level_kw": [239, 693, 695, 1038], "plot_outlier_detection_bench": [239, 244], "recalcul": [240, 242, 402, 1019, 1022], "mlpregressormlpregressor": 240, "tree_disp": 240, "mlp_disp": 240, "0x7f7f33b966d0": 240, "979": [240, 244], "plot_partial_dependence_visualization_api": [240, 244], "deactiv": [241, 370, 374, 377, 382, 392, 403, 792, 793, 1036], "standard_scal": 241, "polynomialfeaturespolynomialfeatur": 241, "pcapca": 241, "svcsvc": [241, 242, 259, 261, 315], "numeric_preprocessor": 241, "imputation_mean": 241, "categorical_preprocessor": [241, 309], "imputation_const": 241, "onehot": [241, 304, 305, 403, 857, 990], "gender": [241, 865, 990], "classifier__n_estim": 241, "classifier__max_featur": 241, "classifier__max_depth": 241, "classifier__criterion": 241, "plot_pipeline_displai": [241, 244], "svc_disp": [242, 313, 1019], "rfc_disp": [242, 313, 1019], "plot_roc_curve_visualization_api": [242, 244], "transform_output": [243, 310, 461, 890, 1037, 1038], "slep018": [243, 378, 1037], "x_test_scal": 243, "894264": 243, "798301": 243, "271411": 243, "327605": 243, "244466": 243, "086944": 243, "327407": 243, "459074": 243, "660797": 243, "462234": 243, "576989": 243, "159419": 243, "933197": 243, "427329": 243, "414810": 243, "039497": 243, "275851": 243, "scaler2": 243, "x_test_np": 243, "x_test_df": 243, "feature_names_in_": [243, 310, 316, 389, 423, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 620, 621, 622, 623, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 1035, 1036, 1037, 1038], "num_pip": 243, "num_col": 243, "7621951219512195": 243, "log_reg": [243, 317], "config_context": [243, 362, 363, 398, 619, 890, 1029, 1035, 1038], "reset": [243, 358, 384, 527, 669, 670, 671, 832, 833, 861, 862, 872, 1024], "133660": 243, "438059": 243, "894273": 243, "506893": 243, "478": 243, "000619": 243, "182778": 243, "671": [243, 349, 992], "548540": 243, "461032": 243, "817": [243, 290, 295], "487001": 243, "13366001": 243, "4380594": 243, "89427284": 243, "50689261": 243, "00061876": 243, "18277786": 243, "54853974": 243, "46103177": 243, "48700054": 243, "plot_set_output": [243, 244], "auto_examples_miscellan": 244, "bayesiangaussianmixtur": [246, 247, 252, 788, 1028, 1030, 1031, 1035, 1036], "weight_concentration_prior_typ": [246, 252, 787, 979, 1028], "dirichlet_distribut": [246, 787, 979, 1028], "dirichlet_process": [246, 252, 787, 979, 1028], "weight_concentration_prior": [246, 252, 787, 979], "finit": [246, 252, 362, 371, 389, 461, 531, 544, 575, 599, 602, 603, 604, 651, 720, 770, 777, 787, 813, 890, 910, 912, 913, 976, 979, 980, 1004, 1006, 1013, 1029, 1030, 1034, 1036, 1037], "covar": [246, 247, 252], "eig_val": 246, "eig_vec": 246, "unit_eig_vec": 246, "arctan2": [246, 248, 251], "56b4e9": 246, "plot_titl": 246, "weights_": [246, 787, 788, 1036], "covariances_": [246, 247, 248, 251, 252, 787, 788, 1029], "get_xaxi": [246, 291, 303], "set_tick_param": 246, "007": [246, 269, 281, 348], "labelleft": 246, "0072b2": 246, "f0e442": 246, "d55e00": 246, "mean_precision_prior": [246, 252, 787], "nprior": 246, "gamma_0": [246, 252], "reg_covar": [246, 787, 788], "init_param": [246, 249, 252, 787, 788], "concentrations_prior": 246, "plot_concentration_prior": [246, 253], "_base": [247, 378], "color_it": [247, 251, 252], "dp": [247, 252], "shouldn": [247, 252, 376], "em": [247, 248, 252, 436, 440, 452, 529, 787, 788, 979, 1036], "dpgmm": [247, 252, 1022, 1026, 1028], "plot_gmm": [247, 253], "ronweiss": 248, "make_ellips": 248, "datalim": 248, "skf": [248, 406, 808], "train_index": [248, 325, 406, 790, 791, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810], "test_index": [248, 325, 406, 790, 791, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810], "cov_typ": 248, "means_init": [248, 249, 788], "y_train_pr": 248, "train_accuraci": 248, "y_test_pr": 248, "test_accuraci": [248, 262], "211": [248, 253, 266, 275, 277, 318, 325, 868, 880], "plot_gmm_covari": [248, 253], "random_from_data": [249, 787, 788, 979], "diamond": 249, "colour": [249, 373, 410, 580, 981], "eventu": [249, 401, 402, 411, 586, 1004], "walsh": [249, 1034, 1036], "timer": [249, 382], "_samples_gener": 249, "extmath": [249, 326, 347, 385, 446, 1022, 1023, 1028, 1029, 1032, 1036, 1037], "row_norm": 249, "x_squared_norm": [249, 453], "get_initial_mean": 249, "times_init": 249, "relative_tim": 249, "ini": 249, "init_tim": 249, "2fx": 249, "plot_gmm_init": [249, 253], "shifted_gaussian": 250, "stretched_gaussian": 250, "score_sampl": [250, 286, 287, 288, 294, 389, 408, 462, 525, 534, 556, 670, 787, 788, 789, 792, 793, 803, 837, 838, 848, 852, 896, 986, 1025, 1030, 1032, 1034], "plot_gmm_pdf": [250, 253], "component_1": 251, "component_2": 251, "best_parameters_": 251, "gmm_bic_scor": 251, "callabl": [251, 265, 389, 406, 410, 411, 413, 414, 434, 436, 437, 438, 439, 440, 442, 443, 445, 450, 452, 453, 457, 458, 459, 460, 524, 526, 528, 530, 532, 538, 539, 550, 551, 552, 553, 554, 555, 557, 558, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 603, 604, 613, 621, 627, 632, 636, 652, 659, 664, 666, 668, 681, 684, 685, 689, 704, 712, 724, 734, 763, 766, 770, 771, 772, 773, 782, 783, 789, 792, 793, 795, 803, 811, 814, 815, 816, 817, 819, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 856, 865, 887, 888, 894, 895, 896, 897, 898, 941, 947, 950, 964, 969, 980, 990, 1022, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1038], "0x7f7f3324b550": 251, "gaussianmixturegaussianmixtur": 251, "param_n_compon": 251, "param_covariance_typ": 251, "829429": 251, "1084": 251, "038689": 251, "1114": 251, "517272": 251, "1148": 251, "512281": 251, "1179": 251, "977890": 251, "catplot": 251, "hue": [251, 261, 284, 308, 373], "eigenvalu": [251, 399, 402, 404, 445, 455, 462, 463, 464, 465, 466, 467, 468, 469, 528, 534, 542, 666, 681, 682, 684, 686, 688, 858, 977, 990, 1024, 1028, 1031, 1032, 1033, 1034], "plot_gmm_select": [251, 253], "loos": [252, 258, 995, 1030], "liberti": 252, "judgment": [252, 980], "panel": [252, 286, 303, 408, 1000], "primarili": [252, 266, 376, 389, 398, 402, 938, 1004, 1031, 1032], "covariance_prior": [252, 787], "plot_gmm_sin": [252, 253], "auto_examples_mixtur": 253, "mislabel": [255, 409, 982], "imbal": [255, 264, 406, 700, 721, 722, 730, 775, 776, 779, 780, 980], "life": [255, 384, 977], "set_printopt": 255, "titles_opt": 255, "plot_confusion_matrix": [255, 277, 313, 1032, 1033, 1034, 1035], "groupkfold": [256, 266, 393, 406, 587, 789, 792, 793, 794, 795, 796, 797, 798, 803, 807, 811, 813, 814, 815, 816, 819, 1010, 1028, 1035], "groupshufflesplit": [256, 406, 1010, 1028], "shufflesplit": [256, 263, 342, 406, 791, 797, 799, 809, 818, 1010, 1022, 1023, 1025, 1027, 1028], "stratifiedgroupkfold": [256, 1035], "stratifiedshufflesplit": [256, 334, 406, 1010, 1022, 1023, 1028, 1029, 1035], "1338": 256, "cmap_data": 256, "cmap_cv": 256, "coolwarm": [256, 331], "n_point": [256, 832, 833], "percentiles_class": 256, "perc": 256, "group_prior": 256, "visualize_group": 256, "yticklabel": [256, 347], "ngroup": 256, "nclass": 256, "plot_cv_indic": [256, 277], "tr": [256, 373, 380, 402, 404, 462, 463, 464, 465, 466, 467, 468, 469, 830], "this_cv": 256, "372": [256, 277], "plot_cv_predict": [257, 277], "fnr": [258, 691, 719], "det_curv": [258, 691, 774, 781, 980, 1034, 1035], "commonli": [258, 369, 389, 402, 403, 412, 607, 750, 751, 787, 821, 864, 977, 978, 980, 981, 983, 1038], "detcurvedisplai": [258, 316, 719, 1034, 1035], "ax_roc": 258, "ax_det": 258, "feedback": [258, 375, 376, 377, 390, 1000, 1030], "237": [258, 277, 355, 357, 1013], "plot_det": [258, 277], "n_imag": 259, "print_datafram": 259, "filtered_cv_result": 259, "mean_precis": 259, "std_precis": 259, "mean_recal": 259, "std_recal": 259, "mean_test_precis": [259, 265], "std_test_precis": 259, "mean_test_recal": 259, "std_test_recal": 259, "03f": 259, "refit_strategi": 259, "best_index": [259, 265], "precision_threshold": 259, "high_precision_cv_result": 259, "rank_test_recal": 259, "rank_test_precis": [259, 265], "best_recall_std": 259, "best_recal": 259, "best_recall_threshold": 259, "high_recall_cv_result": 259, "fastest_top_recall_high_precision_index": 259, "idxmin": 259, "063": [259, 261, 430], "061": 259, "069": 259, "780": 259, "905": 259, "889": [259, 430], "073": [259, 464, 465], "695": 259, "743": [259, 1013], "611": [259, 261, 534], "028": [259, 348], "744": [259, 281], "005072": 259, "877206": 259, "069196": 259, "0x7f7f327b3b80": 259, "plot_grid_search_digit": [259, 277], "minimis": [260, 402, 406, 651, 652, 996], "york": [260, 780, 787, 970, 980, 992], "usa": [260, 371, 889, 970, 977, 992, 993], "best_index_": [260, 265, 789, 792, 793, 803], "wenhao": [260, 1030, 1031], "zhang": [260, 402, 435, 657, 672, 678, 679, 682, 686, 750, 751, 976, 977, 978, 982, 994, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1038], "wenhaoz": 260, "ucla": [260, 976], "lower_bound": 260, "best_score_idx": 260, "best_low_complex": 260, "fewest": [260, 620], "candidate_idx": 260, "param_reduce_dim__n_compon": 260, "plot_grid_search_refit_cal": [260, 277], "moon": [261, 298, 305, 347, 348, 515], "moder": [261, 376, 412, 447, 986], "repeatedstratifiedkfold": [261, 406, 804, 808, 1029], "repetit": [261, 381, 406, 804, 805, 988, 1036], "rank_test_scor": [261, 269, 789, 803, 1028], "rename_axi": 261, "9400": 261, "079297": 261, "9300": 261, "077846": 261, "3_poli": 261, "9044": [261, 1029], "098776": 261, "2_poli": 261, "6852": 261, "169106": 261, "certainti": [261, 378, 734, 980], "repreat": 261, "model_scor": [261, 279], "regex": [261, 349, 457, 459], "_test_scor": [261, 465, 587, 1035], "lineplot": 261, "labelpad": 261, "882561": 261, "783392": 261, "351390": 261, "746492": 261, "298688": 261, "355440": 261, "nadeau": [261, 1030], "bengio": [261, 849, 850, 969, 993], "framework": [261, 362, 378, 387, 389, 396, 402, 630, 681, 787, 976, 977, 984, 998, 1001, 1004, 1022, 1028], "diebold": 261, "mariano": 261, "proven": [261, 974, 978, 1004], "replic": [261, 375, 378], "cdot": [261, 399, 402, 407, 408, 412, 607, 608, 612, 615, 616, 858, 972, 974, 980, 984, 990], "sum_": [261, 270, 342, 399, 400, 402, 407, 408, 409, 531, 533, 540, 689, 747, 974, 976, 977, 980, 982, 984, 985, 987, 988, 990, 994, 995, 996], "ij": [261, 291, 399, 402, 407, 531, 533, 540, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 976, 977, 980, 982, 985, 995], "corrected_std": 261, "crossvalid": [261, 275], "corrected_var": 261, "ddof": [261, 872, 883], "compute_corrected_ttest": 261, "t_stat": 261, "p_val": 261, "model_1_scor": 261, "model_2_scor": 261, "ncorrect": 261, "227": [261, 402, 717], "uncorrect": [261, 588, 591], "t_stat_uncorrect": 261, "p_val_uncorrect": 261, "benavoli": 261, "colleagu": 261, "conjug": [261, 445, 455, 665, 667, 680, 688, 976], "overlin": [261, 399], "t_post": 261, "ppf": 261, "infin": [261, 534, 675, 676, 705, 813, 899, 911, 983], "minu": [261, 752, 980], "better_prob": 261, "cdf": 261, "773": [261, 347, 641, 830], "essenti": [261, 318, 374, 378, 402, 406, 407, 502, 972, 980, 983, 1001, 1004, 1030], "rope": 261, "rope_interv": 261, "rope_prob": 261, "432": [261, 404], "x_rope": 261, "uncertain": [261, 323, 375], "credibl": 261, "cred_interv": 261, "cred_int_df": 261, "000977": 261, "019023": 261, "005422": 261, "025422": 261, "016445": 261, "036445": 261, "bonferroni": 261, "n_comparison": 261, "pairwise_t_test": 261, "model_i": 261, "model_k": 261, "model_i_scor": 261, "model_k_scor": 261, "pairwise_comp_df": 261, "model_1": 261, "model_2": 261, "657": 261, "302": [261, 313, 320, 620], "276": 261, "851": 261, "pairwise_bayesian": 261, "worse_prob": 261, "pairwise_bayesian_df": 261, "018": [261, 465], "882": 261, "dietterich": [261, 822, 981], "1998": [261, 371, 373, 407, 409, 548, 549, 822, 827, 858, 981, 982, 984, 990, 994], "bouckaert": 261, "frank": [261, 823, 981, 1027, 1031, 1032], "pacif": 261, "asia": [261, 990], "confer": [261, 371, 402, 407, 413, 432, 437, 443, 504, 528, 556, 689, 701, 718, 748, 848, 849, 850, 980, 986, 992, 996], "discoveri": [261, 371, 382, 385, 402, 409, 411, 413, 437, 504, 548, 549, 556, 585, 588, 589, 591, 592, 593, 599, 713, 732, 775, 980, 992, 1004, 1036, 1037], "corani": 261, "dem\u0161ar": 261, "zaffalon": 261, "accompani": [261, 1030], "144": [261, 382, 1022], "plot_grid_search_stat": [261, 277], "loader": [262, 326, 347, 369, 370, 371, 491, 492, 501, 1001, 1015, 1022, 1027, 1029, 1030, 1033], "857": [262, 348], "complementnb": [262, 347, 827, 828, 830, 831, 982, 1030, 1034, 1035, 1037], "tfidfvectorizertfidfvector": 262, "complementnbcomplementnb": 262, "vect__": 262, "clf__": 262, "parameter_grid": 262, "vect__max_df": 262, "vect__min_df": 262, "vect__ngram_rang": [262, 1015], "unigram": [262, 371, 410, 581, 582, 584, 1029], "bigram": [262, 410, 581, 582, 584, 1015], "vect__norm": 262, "clf__alpha": [262, 1015], "parallelis": [262, 461, 890, 1029], "random_search": [262, 269], "best_paramet": 262, "get_param": [262, 379, 389, 412, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 969, 1032, 1033, 1034, 1036, 1037], "816": [262, 464, 465], "709": 262, "ambigu": [262, 381, 410, 565, 705, 929, 983, 1031, 1033, 1035], "shorten_param": 262, "xanchor": 262, "yanchor": 262, "autom": [262, 380, 392, 685, 969, 976, 977, 980, 1000, 1004], "parallel_coordin": 262, "understood": [262, 376, 402, 1012], "column_result": 262, "transform_func": 262, "fromkei": [262, 907], "ngram_rang": [262, 326, 410, 581, 582, 584], "color_continuous_scal": 262, "viridis_r": 262, "slide": [262, 637, 976, 999, 1000], "intersect": [262, 331, 399, 402, 730], "undo": [262, 862, 1026], "stronger": [262, 636, 645, 651, 652, 665, 666, 667, 668, 669, 671, 680], "399": [262, 277], "plot_grid_search_text_feature_extract": [262, 277], "ax_idx": 263, "resort": [263, 371, 548, 1032], "learning_curv": [263, 318, 795, 975, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037], "return_tim": [263, 816, 1032], "test_scores_nb": 263, "fit_times_nb": 263, "score_times_nb": 263, "test_scores_svm": 263, "fit_times_svm": 263, "score_times_svm": 263, "score_tim": [263, 406, 815, 816], "inflect": 263, "726": [263, 277, 988], "plot_learning_curv": [263, 277], "class_likelihood_ratio": [264, 980, 1037], "medicin": [264, 705, 980], "medic": [264, 406, 705, 976, 1004], "truli": [264, 268, 364, 705, 980], "odd": [264, 409, 507, 705, 980, 1029, 1030], "suppos": [264, 322, 362, 363, 378, 382, 404, 409, 410, 411, 550, 554, 557, 651, 652, 659, 661, 667, 668, 669, 734, 838, 892, 894, 897, 900, 902, 918, 984, 1031, 1033, 1039], "physiolog": [264, 373, 1013], "hopefulli": [264, 384, 1022], "indirect": [264, 377, 389], "bio": 264, "pos_lr": 264, "neg_lr": 264, "raise_warn": [264, 705, 966], "positive_likelihood_ratio": [264, 705], "negative_likelihood_ratio": [264, 705], "extract_scor": 264, "test_positive_likelihood_ratio": 264, "test_negative_likelihood_ratio": 264, "718894": 264, "724619": 264, "321091": 264, "054054": 264, "108843": 264, "986989": 264, "268147": 264, "034278": 264, "most_frequ": [264, 544, 620, 623, 842, 970, 980, 1030, 1032, 1034], "undefin": [264, 389, 705, 721, 730, 733, 775, 949, 980, 1030, 1034, 1038], "373333": 264, "5557": 264, "235430": 264, "stand": [264, 349, 380, 387, 407, 524, 530, 538, 539, 589, 602, 671, 698, 710, 728, 729, 749, 778, 780, 785, 979, 980, 986], "lr_base": 264, "pos_lr_bas": 264, "pos_lr_base_std": 264, "neg_lr_bas": 264, "neg_lr_base_std": 264, "plot_indic": 264, "scoring_on_bootstrap": 264, "n_bootstrap": [264, 1023], "results_for_preval": 264, "bootstrap_indic": 264, "default_rng": 264, "2039": 264, "507943": 264, "113516": 264, "207667": 264, "009778": 264, "3419": 264, "445329": 264, "125197": 264, "198280": 264, "008907": 264, "422287": 264, "123864": 264, "192630": 264, "006340": 264, "6196": [264, 1027], "410507": 264, "163975": 264, "193761": 264, "005864": 264, "7578": [264, 1029], "335398": 264, "175224": 264, "189120": 264, "005820": 264, "8963": 264, "198284": 264, "238943": 264, "185496": 264, "005020": 264, "band": [264, 305, 990], "374": [264, 277], "plot_likelihood_ratio": [264, 277], "scorer_nam": [265, 789, 803], "predefin": [265, 802, 969, 983, 1010, 1037], "403": [265, 333, 345], "402": [265, 307, 311], "maskedarrai": [265, 1028], "param_min_samples_split": 265, "sample_score_mean": 265, "sample_score_std": 265, "std_": [265, 1027], "rank_test_": 265, "best_scor": 265, "mean_test_": 265, "380": [265, 277, 348, 1015], "plot_multi_metric_evalu": [265, 277], "cawlei": [266, 980], "talbot": 266, "mach": [266, 400, 406, 586, 587], "2079": 266, "2107": 266, "007581": 266, "007833": 266, "num_trial": 266, "x_iri": [266, 1014], "y_iri": [266, 1014], "p_grid": 266, "non_nested_scor": 266, "nested_scor": 266, "leaveoneout": [266, 406, 1010], "leaveonegroupout": [266, 406, 790, 797, 798, 1010, 1028], "inner_cv": 266, "outer_cv": 266, "non_nest": 266, "score_differ": 266, "non_nested_scores_lin": 266, "nested_lin": 266, "difference_plot": 266, "plot_nested_cross_validation_iri": [266, 277], "permutation_test_scor": [267, 406, 1022, 1029, 1034], "plant": [267, 270, 271, 369, 980, 1017], "uncorrel": [267, 372, 521, 527, 534, 980, 1013], "n_uncorrelated_featur": 267, "x_rand": 267, "undergo": 267, "score_iri": 267, "perm_scores_iri": 267, "pvalue_iri": 267, "n_permut": [267, 406, 817], "score_rand": 267, "perm_scores_rand": 267, "pvalue_rand": 267, "evid": [267, 347, 384, 402, 406, 407, 409, 637, 787, 979], "ndata": 267, "destroi": [267, 410, 785, 861, 990], "ojala": [267, 406, 817], "garriga": [267, 406, 817], "043": [267, 277, 348, 382], "plot_permutation_tests_for_classif": [267, 277], "t_p": 268, "plu": [268, 373, 381, 672, 823, 826, 981, 994], "f_p": 268, "f_n": 268, "denomin": [268, 410, 415, 468, 583, 697, 749, 974], "stairstep": 268, "ap": [268, 700, 701, 980], "sum_n": [268, 700, 980], "r_n": [268, 700, 980], "p_n": [268, 700, 980], "nth": [268, 700, 980], "r_k": 268, "p_k": [268, 980], "trapezoid": [268, 699, 700, 980], "binar": [268, 270, 271, 368, 370, 401, 746, 827, 856, 857, 859, 863, 865, 876, 980, 982, 1006, 1017, 1036, 1038], "average_precision_scor": [268, 693, 699, 701, 734, 774, 780, 980, 1022, 1025, 1029, 1030, 1036, 1038], "differenti": [268, 409, 412, 552, 553, 612, 615], "mt19937": [268, 273, 1033], "0x7f7f31930240": 268, "precisionrecalldisplai": [268, 316, 774, 776, 779, 980, 1032, 1035, 1038], "label_binar": [268, 270, 859, 1026], "average_precis": [268, 693, 700, 734, 980], "prevalence_pos_label": [268, 693], "setup": [268, 270, 362, 374, 378, 382, 384, 983, 1007], "f_score": 268, "extens": [268, 270, 286, 362, 363, 370, 371, 374, 377, 379, 380, 384, 385, 387, 396, 402, 407, 489, 496, 527, 733, 923, 931, 977, 979, 980, 999, 1000, 1004, 1022, 1028, 1035, 1036, 1038], "412": [268, 277, 489, 976], "plot_precision_recal": [268, 277], "deem": [269, 270, 527, 988, 1035], "993": 269, "017613264528272554": 269, "14458295175799263": 269, "015": [269, 334, 345, 348, 352, 988], "26103113142851836": 269, "003999234857448686": 269, "980": 269, "016727019407645895": 269, "5720620992012775": 269, "996": 269, "6666666666666666": 269, "2222222222222222": 269, "1111111111111111": 269, "n_top": 269, "param_dist": [269, 273, 315], "n_iter_search": 269, "plot_randomized_search": [269, 277], "unambigu": [270, 981, 1028], "notion": [270, 348, 364, 387, 402, 407, 409, 976, 980], "scheme": [270, 286, 309, 310, 371, 389, 402, 406, 408, 410, 559, 583, 651, 652, 698, 802, 859, 860, 863, 865, 869, 873, 876, 881, 892, 897, 969, 976, 990, 994, 1022, 1030, 1033, 1034], "harder": [270, 271, 307, 371, 375, 378, 384, 402, 508, 554, 555, 1003], "bulk": [270, 413, 437], "scrutin": 270, "y_onehot_test": 270, "class_id": [270, 271], "class_of_interest": 270, "nvirginica": 270, "versicolor": [270, 271, 497], "tp_c": 270, "fn_c": 270, "fp_c": 270, "tn_c": 270, "briefli": [270, 375, 388, 409, 969, 1032], "nreceiv": 270, "micro_roc_auc_ovr": 270, "mcclish": [270, 780], "deci": 270, "1989": [270, 628, 780, 849, 850, 976, 983], "jul": 270, "fpr_grid": 270, "mean_tpr": [270, 271], "interp": [270, 271, 334], "macro_roc_auc_ovr": 270, "deeppink": 270, "aqua": 270, "role": [270, 362, 375, 387, 407, 998], "pair_list": 270, "pair_scor": 270, "label_a": 270, "label_b": 270, "a_mask": 270, "b_mask": 270, "ab_mask": 270, "a_tru": 270, "b_true": 270, "idx_a": 270, "idx_b": 270, "fpr_a": 270, "tpr_a": 270, "fpr_b": 270, "tpr_b": 270, "macro_roc_auc_ovo": 270, "ovo_tpr": 270, "pool": [270, 387, 438, 628, 949, 1001, 1033], "794": [270, 277], "plot_roc": [270, 277], "mean_fpr": 271, "viz": [271, 383], "interp_tpr": 271, "mean_auc": 271, "std_auc": 271, "std_tpr": 271, "tprs_upper": 271, "tprs_lower": 271, "plot_roc_crossv": [271, 277], "halvinggridsearchcv": [272, 273, 315, 572, 793, 969, 1034, 1036, 1037, 1039], "1e4": [272, 652, 672, 886, 992], "gsh": 272, "gsh_time": 272, "gs_time": 272, "make_heatmap": 272, "is_sh": 272, "make_cbar": 272, "param_c": [272, 789], "param_gamma": [272, 789, 803], "sh": [272, 380, 384, 969], "scores_matrix": 272, "pivot_t": 272, "aggfunc": 272, "0e": [272, 542, 543], "get_xticklabel": 272, "rotation_mod": 272, "cbar_ax": 272, "344": [272, 277], "plot_successive_halving_heatmap": [272, 277], "rsh": [273, 315], "0x7f7f40754140": 273, "_distn_infrastructur": 273, "rv_discrete_frozen": 273, "0x7f7f51336ca0": 273, "0x7f7f114e7520": 273, "halvingrandomsearchcvhalvingrandomsearchcv": 273, "params_str": 273, "drop_dupl": 273, "n_resources_": [273, 792, 793, 969], "nn_candid": 273, "n_candidates_": [273, 792, 793, 969], "n_iterations_": [273, 792, 793], "multialign": 273, "plot_successive_halving_iter": [273, 277], "n_samples_train": [274, 894, 895, 896, 897, 898], "n_samples_test": [274, 894, 895, 896, 897, 898, 983, 990], "train_error": 274, "test_error": 274, "i_alpha_optim": 274, "alpha_optim": 274, "0002652948464431897": 274, "plot_train_error_vs_test_error": [274, 277], "nonlinear": [275, 316, 637, 681, 682, 686, 689, 858, 976, 977, 985, 990], "true_fun": 275, "polynomial_featur": 275, "plot_underfitting_overfit": [275, 277], "validationcurvedisplai": [276, 975, 1038], "subset_mask": 276, "isin": 276, "param_rang": [276, 319, 342, 811, 819, 975], "plot_validation_curv": [276, 277], "auto_examples_model_select": 277, "yeast": 279, "2417": 279, "103": [279, 281, 371, 409, 490, 548, 549, 1022], "jaccard": [279, 399, 443, 450, 692, 696, 712, 721, 726, 730, 770, 771, 772, 786, 983, 1030, 1031], "adam": [279, 298, 849, 850, 984, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kleczewski": [279, 1029, 1030], "jaccard_scor": [279, 696, 721, 726, 786, 980, 1031, 1034], "classifierchain": [279, 389, 824, 826, 1029, 1034, 1037], "40597": 279, "wrapper": [279, 281, 382, 385, 406, 412, 537, 613, 664, 892, 996, 1000, 1026, 1034], "base_lr": [279, 823], "y_pred_ovr": 279, "ovr_jaccard_scor": 279, "y_pred_chain": 279, "chain_jaccard_scor": 279, "y_pred_ensembl": 279, "ensemble_jaccard_scor": 279, "x_po": 279, "311": [279, 280, 348], "plot_classifier_chain_yeast": [279, 280], "auto_examples_multioutput": 280, "kneighborstransform": [281, 283, 313, 844, 983, 1032, 1036, 1037], "nmslib": 281, "pynndesc": 281, "pip": [281, 313, 314, 315, 316, 317, 318, 319, 363, 374, 376, 380, 382, 392, 996], "pynndescenttransform": 281, "csr_matrix": [281, 314, 433, 437, 445, 489, 527, 537, 550, 551, 552, 553, 556, 557, 558, 559, 581, 586, 587, 707, 818, 867, 894, 895, 897, 898, 900, 901, 902, 903, 981, 990, 994, 995, 996, 1037], "nmslibtransform": 281, "sw": 281, "n_samples_fit_": [281, 834, 835, 836, 838, 840, 842, 843, 844], "cosinesimil": 281, "nmslib_": 281, "adddatapointbatch": 281, "createindex": 281, "n_samples_transform": [281, 836, 844], "thread": [281, 314, 317, 374, 387, 389, 402, 409, 824, 825, 946, 947, 948, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "num_thread": 281, "knnquerybatch": 281, "mnist_10000": 281, "mnist_20000": 281, "20_000": 281, "tsne_param": 281, "barnes_hut": [281, 685, 1029, 1030], "parallel_batch_queri": 281, "msg": [281, 964], "transformer_nam": 281, "longest": 281, "fit_dur": 281, "transform_dur": 281, "315": [281, 373], "823": 281, "884": 281, "769": 281, "733": 281, "077": 281, "759": 281, "numba": [281, 1001], "cold": 281, "nearestneighbor": [281, 317, 392, 402, 413, 437, 439, 441, 454, 681, 682, 686, 834, 835, 836, 838, 842, 843, 844, 983, 1022, 1026, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "i_ax": 281, "int32": [281, 310, 376, 389, 436, 440, 442, 444, 446, 894, 895, 896, 897, 898, 945, 995, 1031, 1037, 1038], "828": 281, "955": [281, 406, 647], "994": 281, "brute": [281, 387, 397, 406, 413, 437, 439, 443, 450, 625, 626, 681, 682, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 987, 1017, 1026, 1030, 1034, 1037, 1038], "spent": [281, 309, 377, 382, 816, 1037], "approximate_nearest_neighbor": [281, 295], "slow": [283, 303, 347, 362, 370, 374, 376, 407, 410, 440, 692, 866, 867, 871, 894, 897, 929, 977, 983, 1001, 1014, 1029], "temporarydirectori": [283, 313], "n_neighbors_list": 283, "graph_model": 283, "classifier_model": 283, "sklearn_graph_cache_": 283, "tmpdir": [283, 313], "full_model": 283, "classifier__n_neighbor": 283, "grid_model": 283, "plot_caching_nearest_neighbor": [283, 295], "cmap_light": [284, 289, 292], "cmap_bold": [284, 289, 292], "darkblu": [284, 292], "neighbour": [284, 439, 455, 685, 985], "699": [284, 295], "plot_classif": [284, 295], "79269019073225": 285, "kerneldens": [285, 286, 294, 408, 1024, 1030, 1031, 1035, 1036, 1037], "new_data": [285, 378], "4x11": 285, "real_data": 285, "set_clim": 285, "plot_digits_kde_sampl": [285, 295], "block": [286, 303, 317, 371, 373, 376, 381, 384, 389, 399, 402, 405, 408, 445, 446, 455, 466, 472, 473, 481, 482, 504, 506, 688, 948, 983, 985], "wildli": [286, 979], "kd": [286, 402, 408, 983, 1030, 1031, 1032], "jakevdp": [286, 294], "aaaaff": [286, 289], "tophat": [286, 408, 832, 833, 837], "log_den": 286, "x_src": 286, "format_func": 286, "ih": 286, "epanechnikov": [286, 408, 832, 833, 837], "funcformatt": 286, "nullloc": 286, "true_den": 286, "plot_kde_1d": [286, 295], "669": [287, 295], "plot_lof_novelty_detect": [287, 295], "x_inlier": 288, "n_error": 288, "x_score": [288, 475, 476, 477, 478], "legend_handl": 288, "handlerpathcollect": 288, "update_legend_marker_s": 288, "update_from": 288, "set_siz": 288, "handler_map": 288, "update_func": 288, "092": [288, 295, 348], "plot_lof_outlier_detect": [288, 295], "ffaaaa": 289, "aaffaa": 289, "00ff00": 289, "827": [289, 295], "plot_nca_classif": [289, 295], "neighborhoodcomponentanalysi": 290, "dim_reduction_method": 290, "acc_knn": 290, "x_embed": [290, 291, 685, 689, 841, 983], "ntest": 290, "plot_nca_dim_reduct": [290, 295], "logsumexp": [291, 1029], "get_yaxi": [291, 303], "link_thickness_i": 291, "diff_embed": 291, "dist_embed": 291, "einsum": 291, "exp_dist_embed": 291, "relate_point": 291, "pt_i": 291, "pt_j": 291, "plot_nca_illustr": [291, 295], "8133333333333334": 292, "nearestcentroid": [292, 347, 981, 983, 1022, 1026, 1029, 1034, 1037], "shrink_threshold": [292, 839, 983, 1022, 1034], "plot_nearest_centroid": [292, 295], "barycent": [293, 1022], "plot_regress": [293, 295], "geospati": [294, 408], "haversin": [294, 408, 692, 754, 756, 983, 1031, 1034], "latitud": [294, 303, 371, 491, 692, 756], "longitud": [294, 303, 371, 491, 692, 756], "xtrain": 294, "ytrain": 294, "radian": [294, 692, 756], "land_mask": 294, "ball_tre": [294, 413, 437, 443, 450, 681, 682, 834, 835, 836, 837, 838, 840, 842, 843, 844, 983, 1022], "ocean": 294, "493": [294, 295, 636, 892, 973], "plot_species_kd": [294, 295], "845": 295, "auto_examples_neighbor": 295, "combat": [297, 407], "lesser": [297, 389, 435, 534, 976], "curvatur": 297, "plot_mlp_alpha": [297, 301], "bfg": [298, 603, 604, 641, 642, 651, 662, 665, 667, 673, 680, 983, 984, 1037], "980000": 298, "096950": 298, "momentum": [298, 849, 850, 984], "049530": 298, "nesterov": [298, 849, 850, 984, 1038], "049540": 298, "360000": 298, "978444": 298, "860000": 298, "503452": 298, "504185": 298, "045311": 298, "956038": 298, "243802": 298, "992766": 298, "041297": 298, "993879": 298, "042898": 298, "638843": 298, "855465": 298, "912632": 298, "290584": 298, "909293": 298, "318387": 298, "991653": 298, "045934": 298, "840000": 298, "601052": 298, "940000": 298, "157334": 298, "154453": 298, "500000": 298, "692470": 298, "689143": 298, "689751": 298, "150527": 298, "850000": 298, "341523": 298, "336188": 298, "335919": 298, "689015": 298, "830000": 298, "512595": 298, "513034": 298, "930000": 298, "170087": 298, "schedul": [298, 363, 669, 670, 671, 849, 850, 994, 1004, 1029], "nesterovs_momentum": [298, 849, 850], "invscal": [298, 669, 670, 671, 849, 850, 994], "plot_arg": 298, "plot_on_dataset": 298, "nlearn": 298, "loss_": [298, 552, 849, 850, 984, 1036], "loss_curve_": [298, 849, 850], "data_set": 298, "get_lin": 298, "283": [298, 301], "plot_mlp_training_curv": [298, 301], "28x28": 299, "784": 299, "throw": [299, 385, 911, 1026, 1029, 1030, 1031, 1032, 1036], "infrastructur": [299, 319, 998, 1000, 1001], "44139186": 299, "19174891": 299, "13983521": 299, "11378556": 299, "09443967": 299, "07846529": 299, "06506307": 299, "05534985": 299, "986429": 299, "953061": 299, "485": [299, 301, 348, 689], "plot_mnist_filt": [299, 301], "greyscal": 300, "bernoulli": [300, 410, 411, 827, 828, 829, 830, 831, 848, 849, 850, 855, 976, 990, 1002, 1017, 1022], "bernoullirbm": [300, 849, 850, 985, 990, 1024, 1025, 1034, 1036], "yann": [300, 1022, 1024], "dauphin": [300, 1024], "gabriel": [300, 1030, 1031, 1032, 1035, 1036], "synnaev": 300, "convolv": 300, "minmax_scal": [300, 303, 862, 1027, 1030], "nudge_dataset": 300, "1px": 300, "direction_vector": 300, "apply_along_axi": 300, "feature_rang": [300, 862, 878, 990, 1024, 1034], "cg": [300, 651, 652, 665, 667, 680, 976, 1026, 1027, 1029, 1033, 1035, 1036], "rbm": [300, 848, 849, 850, 985], "rbm_features_classifi": 300, "6000": [300, 620], "raw_pixel_classifi": 300, "194": 300, "181": [300, 382], "154": [300, 644, 981], "943": [300, 301, 1010], "plot_rbm_logistic_classif": [300, 301], "778": 301, "auto_examples_neural_network": 301, "incom": [303, 371, 433], "unscal": [303, 308, 976, 980, 1030, 1036], "unterthin": [303, 1025, 1026, 1027], "medinc": [303, 315, 371], "houseag": [303, 315, 371], "averoom": [303, 315, 371], "room": [303, 371, 381, 402, 1003], "avebedrm": [303, 371], "bedroom": [303, 371], "aveoccup": [303, 315, 371], "features_idx": 303, "quantile_rang": [303, 870, 882, 1028], "yeo": [303, 307, 868, 880, 990, 1030, 1036, 1038], "cox": [303, 307, 868, 880, 990, 1030, 1038], "plasma": 303, "plasma_r": 303, "create_ax": 303, "bottom_h": 303, "left_h": 303, "rect_scatt": 303, "rect_histx": 303, "rect_histi": 303, "ax_scatt": 303, "ax_histx": 303, "ax_histi": 303, "ax_scatter_zoom": 303, "ax_histx_zoom": 303, "ax_histy_zoom": 303, "rect_colorbar": 303, "ax_colorbar": 303, "plot_distribut": 303, "hist_nbin": 303, "x0_label": 303, "x1_label": 303, "hist_x1": 303, "hist_x0": 303, "aesthet": [303, 996, 1027], "tick_bottom": 303, "tick_left": 303, "outward": 303, "ec": [303, 523], "make_plot": 303, "item_idx": 303, "ax_zoom_out": 303, "ax_zoom_in": 303, "zoom_in_percentile_rang": 303, "cutoffs_x0": 303, "cutoffs_x1": 303, "non_outliers_mask": 303, "colorbarbas": 303, "OR": [303, 402, 413, 437, 1033], "indistinguish": 303, "quadrant": 303, "plot_all_sc": [303, 311, 861, 862, 864, 868, 869, 870, 872, 877, 878, 879, 880, 881, 882, 883], "straightforward": [304, 375, 407, 1004], "anywher": 304, "qinhanmin2005": 304, "sina": [304, 1035], "rnd": 304, "enc": [304, 306, 317, 319, 865, 866, 990], "x_bin": 304, "line_bin": 304, "plot_discret": [304, 311], "get_nam": 305, "broader": [305, 976], "logisticregression__c": 305, "linearsvc__c": 305, "kbinsdiscretizer__n_bin": 305, "gradientboostingclassifier__learning_r": 305, "svc__c": [305, 852], "cm_piyg": 305, "piyg": 305, "b30065": 305, "178000": 305, "est_idx": 305, "plot_discretization_classif": [305, 311], "centers_0": 306, "centers_1": 306, "x_list": 306, "grid_encod": 306, "stripe": 306, "834": [306, 311], "plot_discretization_strategi": [306, 311], "powertransform": [307, 869, 880, 970, 990, 1030, 1033, 1036, 1038], "johnwon": 307, "weibul": 307, "bimod": [307, 408], "ineffect": [307, 990, 1030, 1031], "eric": [307, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "ericchang2017": 307, "northwestern": [307, 651], "contact": [307, 387, 1000], "font_siz": 307, "bc": 307, "qt": [307, 869], "x_lognorm": [307, 990], "x_chisq": 307, "chisquar": 307, "x_weibul": 307, "x_gaussian": 307, "x_uniform": 307, "loc_a": 307, "loc_b": 307, "105": 307, "x_a": 307, "x_b": 307, "x_bimod": 307, "d81b60": 307, "0188ff": 307, "ffc107": 307, "b7a2ff": 307, "2ec5ac": 307, "figaspect": 307, "axes_idx": 307, "axes_list": 307, "x_trans_bc": 307, "lmbda_bc": 307, "lambdas_": [307, 868, 1035, 1038], "x_trans_yj": 307, "lmbda_yj": 307, "x_trans_qt": 307, "ax_origin": 307, "ax_bc": 307, "ax_yj": 307, "ax_qt": 307, "x_tran": [307, 319, 378, 398, 435, 457, 868, 873, 880, 990], "meth_nam": 307, "lmbda": 307, "plot_map_data_to_norm": [307, 311], "involv": [308, 310, 313, 334, 362, 364, 371, 376, 380, 389, 390, 405, 412, 692, 820, 821, 977, 981, 983, 987, 995, 1000, 1004, 1013, 1030], "kneighbor": [308, 317, 834, 835, 836, 838, 840, 983, 1026, 1031, 1035, 1036, 1037, 1038], "obatin": 308, "tyler": [308, 1029, 1035, 1036, 1037], "lanigan": [308, 1029], "tylerlanigan": 308, "sebastian": [308, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "raschka": [308, 1027, 1028, 1029, 1030, 1031, 1034], "sebastianraschka": 308, "alcohol": [308, 373], "malic": [308, 373], "acid": [308, 373], "scaled_x_train": 308, "x_plot_scal": 308, "fit_and_plot_model": 308, "scaled_pca": 308, "x_train_transform": [308, 358, 406], "x_train_std_transform": 308, "first_pca_compon": 308, "target_class": 308, "repercuss": 308, "logisticregressioncv": [308, 389, 393, 651, 976, 981, 1026, 1027, 1028, 1030, 1031, 1032, 1036, 1037, 1039], "unscaled_clf": 308, "scaled_clf": 308, "y_pred_scal": 308, "y_proba_sc": 308, "0824": 308, "vastli": 308, "035": [308, 311], "plot_scaling_import": [308, 311], "targetencod": [309, 310, 389, 865, 866, 970, 990, 1000, 1038], "review": [309, 362, 371, 378, 379, 380, 381, 382, 387, 390, 406, 407, 528, 534, 980, 990, 1007], "wine_review": 309, "42074": 309, "countri": [309, 977], "provinc": 309, "region_1": 309, "region_2": 309, "wineri": 309, "tremend": [309, 409], "variet": 309, "hail": 309, "martha": 309, "vineyard": 309, "235": 309, "napa": 309, "vallei": 309, "cabernet": 309, "sauvignon": 309, "heitz": 309, "spain": 309, "ripe": 309, "aroma": 309, "blackberri": 309, "cassi": 309, "carodorum": 309, "selecci\u00f3n": 309, "reserva": 309, "northern": 309, "toro": 309, "tinta": 309, "bodega": 309, "carmen": 309, "rodr\u00edguez": 309, "watson": [309, 403], "honor": 309, "late": [309, 364], "harvest": 309, "knight": 309, "sonoma": 309, "blanc": 309, "macaulei": 309, "oak": 309, "reserv": [309, 554, 555, 1004, 1006], "oregon": 309, "willamett": 309, "pinot": 309, "noir": 309, "ponzi": 309, "franc": [309, 756], "b\u00e9gude": 309, "aft": [309, 1025], "br\u00fblade": 309, "provenc": 309, "bandol": 309, "one_hot": 309, "max_categori": [309, 317, 319, 865, 866, 990, 1036, 1038], "target_typ": [309, 873, 916, 943], "evaluate_model_and_stor": 309, "rmse_test_scor": 309, "rmse_train_scor": 309, "rmse_test_mean": 309, "rmse_test_std": 309, "rmse_train_mean": 309, "rmse_train_std": 309, "nuniqu": 309, "14810": 309, "1236": 309, "632": 309, "workaround": [309, 376, 789, 803], "high_cardinality_featur": 309, "low_cardinality_featur": 309, "mixed_encoded_preprocessor": 309, "high_cardin": 309, "low_cardin": 309, "mixed_pip": 309, "passthroughpassthroughhigh_cardinalityindex": 309, "targetencodertargetencod": 309, "low_cardinalityindex": 309, "mixed_target": 309, "name_to_color": 309, "rmse_": 309, "_mean": 309, "_std": 309, "explod": 309, "unrel": [309, 363, 381, 384, 410, 508], "plot_target_encod": [309, 311], "near_uniqu": 310, "50_000": [310, 348], "n_categori": [310, 828, 866, 990], "kbin": [310, 318], "x_inform": 310, "permuted_categori": 310, "x_shuffl": 310, "catastroph": [310, 755, 1001], "x_near_unique_categori": 310, "assembl": [310, 349, 852], "raw_model": 310, "0049896314219657345": 310, "00457762158159003": 310, "model_with_cf": 310, "cf": [310, 402, 405, 435, 693, 976, 990, 1001], "8000184677460285": 310, "7927845601690948": 310, "coefs_cf": 310, "target_encod": 310, "x_train_no_cf_encod": 310, "x_test_no_cf_encod": 310, "model_no_cf": 310, "858486250088675": 310, "6338211367110066": 310, "coefs_no_cf": 310, "336": [310, 311, 382, 990], "plot_target_encoder_cross_v": [310, 311], "auto_examples_preprocess": 311, "announc": [313, 314, 315, 316, 317, 318, 319, 380], "latest": [313, 314, 315, 316, 317, 318, 319, 374, 376, 380, 382, 384, 996, 998, 1036], "upgrad": [313, 314, 315, 316, 317, 318, 319, 392, 1001, 1022, 1027, 1030], "conda": [313, 314, 315, 316, 317, 318, 319, 363, 376, 377, 379, 380, 382, 384, 392, 395, 996], "forg": [313, 314, 315, 316, 317, 318, 319, 363, 377, 379, 380, 384, 392], "plot_roc_curv": [313, 1032, 1034], "plot_precision_recall_curv": [313, 1032, 1034, 1035], "stackingclassifi": [313, 358, 389, 409, 561, 1032, 1033, 1034, 1035, 1036, 1037], "_class": [313, 980], "9473684210526315": 313, "radiusneighborstransform": [313, 836, 983, 1032, 1034, 1036, 1037], "sklearn_cache_": 313, "isomap__n_neighbor": 313, "nan_euclidean_dist": [313, 754, 970, 1032], "ccp_alpha": [313, 352, 550, 551, 552, 553, 557, 558, 900, 901, 902, 903, 996, 1032], "tree_": [313, 352, 356, 837, 900, 901, 902, 903], "node_count": [313, 352, 356, 900, 901, 902, 903], "check_estim": [313, 378, 389, 924, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037], "pytest": [313, 363, 374, 376, 378, 379, 392, 395, 923, 924, 1032, 1035], "estimator_check": [313, 378, 389, 1029, 1030, 1032, 1033, 1036, 1037, 1038], "parametrize_with_check": [313, 378, 923, 1032, 1033], "test_sklearn_compatible_estim": [313, 924], "ovo": [313, 780, 820, 894, 897, 980, 981, 995], "decision_function_shap": [313, 343, 894, 897, 995, 1027, 1028, 1031, 1032], "9938666666666668": 313, "plot_release_highlights_0_22_0": [313, 320], "await": 314, "lam": [314, 315, 1033], "35776189065725783": 314, "42425183539869404": 314, "openmp": [314, 374, 379, 387, 389, 402, 409, 948, 1033, 1035, 1038], "7787330386372058": 314, "10k": [314, 440], "monotoinc": 314, "gbdt_cst": 314, "999791942438998": 314, "710": [314, 320, 400], "plot_release_highlights_0_23_0": [314, 320], "art": [315, 382, 642, 685, 1000, 1004], "footprint": [315, 318, 362, 364, 402, 407, 548, 549, 556, 1024, 1027, 1028, 1033, 1034, 1037], "yarowski": [315, 889, 993], "selftrainingclassifi": [315, 325, 326, 327, 993, 1034], "random_unlabeled_point": [315, 887, 888, 889], "self_training_model": [315, 889], "selftrainingclassifierselftrainingclassifi": 315, "7346": 315, "linear_baselin": 315, "7137": 315, "decisiontreeregressordecisiontreeregressor": 315, "effort": [315, 376, 382, 1000, 1004, 1033, 1035], "plot_release_highlights_0_24_0": [315, 320], "l2_regular": [316, 409, 554, 555], "max_bin": [316, 317, 409, 554, 555], "quantileregressor": [316, 976, 980, 1035, 1036, 1037], "min_": [316, 402, 409, 862, 976, 990, 994, 995, 996], "sum_i": [316, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 971, 972, 976, 978, 980, 985], "pb_q": [316, 976], "_1": [316, 404, 407, 410, 524, 530, 531, 533, 538, 539, 540, 639, 640, 645, 646, 647, 648, 649, 653, 654, 655, 656, 674, 675, 676, 677, 758, 976, 978, 980, 995], "get_feature_nam": [316, 1030, 1031, 1033, 1034, 1035], "pet": [316, 780, 980], "dog": [316, 317, 319, 575, 775, 873, 990], "fish": 316, "pet_cat": 316, "pet_dog": 316, "pet_fish": 316, "plot_": [316, 392], "plot_release_highlights_1_0_0": [316, 320], "x_1d": 317, "hist_quantil": 317, "log_reg_input_featur": 317, "gather": [317, 319, 384, 390, 401, 402, 990, 1004], "min_frequ": [317, 319, 865, 866, 990, 1036, 1038], "rabbit": [317, 319, 990], "snake": [317, 319, 575, 873, 990], "infrequent_categories_": [317, 319, 865, 866, 873, 990], "x0_cat": [317, 990], "x0_rabbit": [317, 990], "x0_infrequent_sklearn": [317, 990], "refactor": [317, 1022, 1024, 1025, 1026, 1032, 1035, 1036, 1037], "radius_neighbor": [317, 840, 842, 843, 844, 1026, 1031, 1032, 1034, 1035, 1036, 1037], "pairwise_distances_argmin_min": [317, 771, 1025, 1030, 1036, 1037, 1038], "radiusneighborsclassifi": [317, 834, 835, 840, 843, 981, 983, 1022, 1024, 1028, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "radiusneighborsregressor": [317, 834, 835, 840, 842, 983, 1022, 1024, 1030, 1032, 1034, 1035, 1036, 1037, 1038], "trustworthi": [317, 1030, 1031, 1036, 1037, 1038], "labelpropag": [317, 324, 888, 889, 981, 993, 1023, 1028, 1029, 1032, 1033, 1034, 1036, 1037, 1038], "labelspread": [317, 322, 323, 324, 326, 327, 887, 889, 981, 993, 1023, 1028, 1029, 1032, 1033, 1036, 1037, 1038], "blog": [317, 362, 376, 382, 384, 390, 1033], "cython": [317, 362, 363, 365, 374, 376, 379, 385, 387, 392, 395, 398, 402, 409, 501, 990, 991, 994, 995, 1000, 1001, 1022, 1025, 1026, 1028, 1034, 1037, 1038], "readili": [317, 407, 996, 1004], "true_w": 317, "true_h": 317, "x_reconstruct": [317, 475, 476, 477, 576], "00364": 317, "divis": [317, 402, 410, 583, 584, 587, 705, 706, 721, 722, 730, 738, 775, 776, 779, 980, 1014, 1026, 1030, 1031, 1034, 1038], "bisect_km": 317, "plot_release_highlights_1_1_0": [317, 320], "video": [318, 365, 370, 379, 496, 981, 1004, 1007], "sepal_col": 318, "petal_col": 318, "x_out": [318, 856, 865, 866], "052506": 318, "592373": 318, "189830": 318, "973554": 318, "416010": 318, "630382": 318, "107": [318, 402, 887, 981, 1024], "765012": 318, "362176": 318, "021849": 318, "788808": 318, "hist_no_interact": 318, "v1": [318, 370, 392, 748, 787, 788, 827, 828, 829, 831, 1034, 1037, 1038], "liac": [318, 370, 376, 489, 1037, 1038], "arff": [318, 376, 489, 1034, 1037, 1038], "ticket": [318, 376], "cabin": 318, "boat": 318, "allen": [318, 1025, 1027, 1029, 1032], "elisabeth": 318, "walton": 318, "24160": 318, "3375": 318, "b5": 318, "loui": [318, 1027, 1028, 1032, 1034, 1036, 1038], "mo": [318, 1033], "allison": 318, "hudson": 318, "9167": 318, "113781": 318, "151": [318, 382, 409, 992], "5500": [318, 681, 977], "c22": 318, "c26": 318, "montreal": 318, "pq": 318, "chestervil": 318, "ON": 318, "helen": 318, "lorain": 318, "joshua": [318, 371, 1024, 1025, 1027, 1028, 1034, 1037, 1038], "creighton": 318, "bessi": 318, "waldo": 318, "compliant": [318, 376], "cupi": [318, 398], "gpu": [318, 398, 984, 1001, 1015], "changelog": [318, 380, 389], "815": [318, 320], "plot_release_highlights_1_2_0": [318, 320], "throughout": [319, 358, 389, 620, 790, 849, 850, 1006, 1025, 1030], "codebas": [319, 358, 376, 377, 378, 410, 1022, 1028], "ongo": [319, 377, 390], "incorpor": [319, 376, 403, 409, 979, 1000, 1004], "contrib": [319, 376, 378, 384, 387, 389, 402, 1000, 1001, 1038], "adpot": 319, "true_label": [319, 322, 323], "non_noisy_label": 319, "9694149248180188": 319, "encodings_": [319, 873, 990], "validation_curv": [319, 342, 811, 975, 1029, 1030, 1031, 1034, 1038], "geomspac": 319, "make_low_rank_matrix": [319, 517], "46858513287221654": 319, "504": [319, 320], "plot_release_highlights_1_3_0": [319, 320], "auto_examples_release_highlight": 320, "semisupervis": [322, 389], "clai": [322, 323, 324, 327, 1022], "woolam": [322, 323, 324, 327, 1022], "n_total_sampl": [322, 323], "n_labeled_point": [322, 323], "unlabeled_set": 322, "everyth": [322, 358, 380, 382, 387, 457, 935, 1000, 1001, 1022], "lp_model": [322, 323], "predicted_label": [322, 323], "transduction_": [322, 323, 324, 887, 888, 889], "_plot": 322, "0x7f7f510092b0": 322, "pred_entropi": [322, 323], "label_distributions_": [322, 323, 887, 888, 1033], "uncertainty_index": [322, 323], "image_index": [322, 323], "386": [322, 328, 868], "plot_label_propagation_digit": [322, 328], "max_iter": 323, "______________________________________________________________________": 323, "290": [323, 681, 682, 686, 977], "330": 323, "285": [323, 716], "unlabeled_indic": 323, "transduc": 323, "in1d": [323, 1029], "delete_indic": 323, "183": [323, 382, 981, 1022], "nfit": 323, "delete_index": 323, "plot_label_propagation_digits_active_learn": [323, 328], "label_spread": 324, "labelspreadinglabelspread": 324, "output_label": 324, "output_label_arrai": 324, "outer_numb": 324, "inner_numb": 324, "plot_label_propagation_structur": [324, 328], "breast_canc": 325, "augment": [325, 623, 874, 1004], "oliv": [325, 327, 1030, 1031, 1033, 1034, 1035], "rausch": [325, 327, 1030, 1031, 1034], "rauscho": [325, 327], "ethz": [325, 327], "total_sampl": [325, 529], "base_classifi": [325, 327, 993], "x_valu": 325, "99999": 325, "amount_label": 325, "amount_iter": 325, "self_training_clf": 325, "skfold": 325, "y_test_tru": 325, "labeled_iter_": [325, 889], "return_count": [325, 348, 844], "capsiz": 325, "twinx": 325, "plot_self_training_varying_threshold": [325, 328], "2823": 326, "2117": 326, "420": 326, "761": 326, "1697": 326, "1071": 326, "196": [326, 889, 993], "runtimewarn": 326, "encount": [326, 363, 374, 396, 402, 409, 410, 489, 554, 555, 574, 827, 828, 829, 831, 865, 955, 990, 994, 1000, 1003, 1004, 1015, 1030, 1033], "matmul": 326, "tfidftransform": [326, 348, 349, 410, 482, 584, 1015, 1029, 1030, 1036, 1038], "sdg_param": 326, "vectorizer_param": 326, "selftrain": 326, "st_pipelin": 326, "ls_pipelin": 326, "eval_and_print_metr": 326, "y_mask": 326, "x_20": 326, "y_20": 326, "plot_semi_supervised_newsgroup": [326, 328], "y_rand": 327, "y_30": 327, "y_50": 327, "ls30": 327, "ls50": 327, "ls100": 327, "st30": 327, "st50": 327, "rbf_svc": [327, 995], "color_map": 327, "plot_semi_supervised_versus_svm_iri": [327, 328], "172": [328, 382, 486, 487, 642, 976], "auto_examples_semi_supervis": 328, "my_kernel": [330, 995], "plot_custom_kernel": [330, 345], "2x2": [331, 402, 746], "plot_iris_svc": [331, 345], "convention": [332, 389, 888], "support_vector_indic": 332, "plot_linearsvc_support_vector": [332, 345], "plot_oneclass": [333, 345], "midpoint": 334, "blink": 334, "act": [334, 347, 376, 388, 408, 409, 706, 721, 722, 730, 775, 776, 779, 867, 871, 977, 980, 983, 995, 1030], "spuriou": [334, 384, 990, 1035, 1036, 1037], "c_rang": 334, "gamma_rang": 334, "midpointnorm": 334, "masked_arrai": [334, 789, 803], "x_2d": 334, "y_2d": 334, "cheat": [334, 984, 994, 1024], "c_2d_rang": 334, "gamma_2d_rang": 334, "bright": 334, "brutal": 334, "plot_rbf_paramet": [334, 345], "plot_separating_hyperplan": [335, 345], "plain": [336, 412, 650, 994], "n_samples_1": [336, 995], "n_samples_2": [336, 995], "clusters_std": 336, "wclf": 336, "wdisp": 336, "surface_": [336, 624], "plot_separating_hyperplane_unbalanc": [336, 345], "blown": 337, "score_mean": 337, "score_std": 337, "314": [337, 345], "plot_svm_anova": [337, 345], "fignum": [338, 339], "199": [338, 345, 640, 743, 995], "plot_svm_kernel": [338, 345], "plot_svm_margin": [339, 345], "unreg": 339, "perpendicular": 339, "yy_down": 339, "yy_up": 339, "nusvc": [340, 362, 895, 981, 995, 1022, 1023, 1024, 1027, 1030, 1032, 1033, 1034, 1036], "plot_svm_nonlinear": [340, 345], "svr_rbf": 341, "svr_lin": 341, "svr_poli": 341, "kernel_label": 341, "model_color": 341, "setdiff1d": 341, "509": [341, 345], "plot_svm_regress": [341, 345], "omega": [342, 405, 974], "model_l1": 342, "train_size_idx": 342, "results_sc": 342, "c_scale": 342, "model_l2": 342, "653": [342, 345, 382, 604, 607, 618], "plot_svm_scale_c": [342, 345], "break_ti": [343, 894, 897, 995, 1032], "accent": [343, 581, 582, 584, 1032], "973": [343, 345, 348, 406], "plot_svm_tie_break": [343, 345], "emphasi": [344, 405, 894, 895, 896, 897, 898, 987, 1000], "subtl": [344, 358, 979, 1001], "plot_decision_funct": 344, "sample_weight_last_ten": 344, "sample_weight_const": 344, "clf_no_weight": 344, "clf_weight": 344, "plot_weighted_sampl": [344, 345], "auto_examples_svm": 345, "size_mb": 347, "utf": [347, 349, 410, 480, 496, 575, 581, 582, 584], "load_dataset": 347, "sublinear_tf": [347, 407, 410, 583, 584], "duration_train": 347, "duration_test": 347, "data_train_size_mb": 347, "data_test_size_mb": 347, "2034": [347, 371], "98mb": 347, "1353": 347, "87mb": 347, "367": [347, 348, 409, 1022], "833mb": 347, "7831": 347, "018mb": 347, "ridgeclassifi": [347, 362, 665, 666, 668, 976, 981, 1027, 1031, 1035, 1036, 1037], "sparse_cg": [347, 665, 667, 680, 976, 1023, 1029, 1031, 1032, 1036], "rarer": [347, 349, 410], "deeper": [347, 996], "plot_feature_effect": 347, "average_feature_effect": 347, "top5": 347, "top_indic": 347, "predictive_word": 347, "bar_siz": 347, "y_loc": 347, "keith": [347, 1022, 1027], "atheist": 347, "orbit": [347, 348], "caltech": 347, "expectedli": 347, "pollut": [347, 720, 777, 980, 986], "sender": [347, 371], "livesei": 347, "solntz": 347, "wpd": 347, "sgi": 347, "jon": [347, 1029, 1032, 1033, 1035, 1036], "nntp": [347, 371, 1015], "1qlettinn8oi": 347, "cco": 347, "allan": [347, 400, 1034], "schneider": [347, 1035], "me": 347, "instinct": 347, "happi": [347, 387, 390, 807, 808], "listen": 347, "murder": 347, "voluntari": 347, "disregard": [347, 389, 410, 425, 458, 475, 476, 477, 545, 547, 549, 551, 553, 555, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 714, 715, 716, 777, 825, 826, 835, 843, 850, 861, 862, 868, 869, 872, 877, 880, 881, 883, 893, 895, 898, 901, 903, 980, 1030], "beings": 347, "bahavior": 347, "theirs": 347, "mimicri": 347, "imit": 347, "parrot": 347, "polli": 347, "pulchritud": 347, "anim": [347, 410], "kill": 347, "Or": [347, 356, 406, 407, 865, 980, 986, 994], "sigh": 347, "wonder": 347, "bahaviour": 347, "believ": [347, 348, 384, 387, 1004], "primat": 347, "arbitarili": 347, "poster": [347, 375, 376, 1014], "weren": [347, 866, 1031], "slai": 347, "mate": 347, "ritual": 347, "whatnot": 347, "aren": [347, 371, 380, 392, 401, 718, 748, 985, 1032, 1034], "ye": [347, 384, 389, 859, 876, 976], "gorilla": 347, "dolphin": 347, "platypu": 347, "writer": 347, "launch": [347, 348, 392, 1004], "custom_nam": 347, "clf_descr": 347, "rocchio": [347, 839], "000585": 347, "5316": 347, "000625": 347, "000678": 347, "0601": 347, "704": 347, "0295": 347, "000575": 347, "752": 347, "0247": 347, "000765": 347, "762": 347, "00384": 347, "00207": 347, "748": [347, 382], "00195": 347, "000532": 347, "779": 347, "training_tim": 347, "txt": [347, 370, 486, 496], "curs": [347, 348, 402, 408, 412, 982, 983, 1009, 1014], "harm": [347, 378, 410, 785], "plot_document_classification_20newsgroup": [347, 350], "discov": [348, 402, 407, 410, 413, 437, 441, 1006, 1037], "category_s": 348, "true_k": 348, "3387": 348, "evaluations_std": 348, "fit_and_evalu": 348, "evaluation_std": 348, "score_valu": 348, "std_score": [348, 1035], "collis": [348, 349, 410, 575, 582], "x_tfidf": 348, "7929": [348, 1029], "prod": [348, 614], "phenomenon": [348, 990], "cluster_s": 348, "2050": 348, "711": 348, "446": [348, 412, 718, 748, 980], "1708": 348, "3384": 348, "1887": 348, "1688": 348, "987": 348, "628": 348, "358": 348, "217": [348, 528, 534], "redo": 348, "x_lsa": 348, "explained_vari": [348, 980], "398": [348, 640, 1015], "010": [348, 382, 988], "416": [348, 731, 980], "320": [348, 371, 969, 994, 1022], "030": 348, "minibatch_kmean": 348, "348": 348, "376": [348, 988], "292": [348, 392, 409, 727], "original_space_centroid": 348, "order_centroid": 348, "ve": [348, 376, 410, 1003, 1004, 1015, 1029], "shuttl": 348, "bibl": 348, "sparciti": 348, "lsa_vector": 348, "x_hashed_lsa": 348, "392": 348, "413": 348, "328": [348, 722], "022": [348, 988], "df_std": 348, "speak": [348, 362, 376, 994], "safer": [348, 358, 402, 406, 1022], "plot_document_clust": [348, 350], "18000": [349, 371], "raw_data": 349, "data_size_mb": 349, "3803": 349, "245mb": 349, "anyth": [349, 380, 382, 389, 393, 406, 944, 1036], "unicod": [349, 410, 480, 496, 575, 581, 582, 584, 945, 1022, 1030, 1034], "charact": [349, 376, 381, 389, 410, 496, 501, 502, 581, 582, 584, 904, 985, 1015, 1022, 1035, 1037], "underscor": [349, 378, 389, 964, 1012, 1022, 1032, 1035], "tok": [349, 410], "findal": 349, "token_freq": 349, "dict_count_vector": 349, "47928": 349, "vocabulary_": [349, 410, 574, 581, 584, 1015, 1022], "19145": 349, "n_nonzero_column": 349, "43873": 349, "inact": [349, 370, 376], "47668": 349, "input_typ": [349, 410, 457, 575], "y_po": 349, "downsid": 349, "featureheash": 349, "implicitli": [349, 385, 409, 590, 625, 626, 871, 970, 972, 987, 990, 995], "token_pattern": [349, 410, 581, 582, 584], "47885": 349, "488": 349, "plot_hashing_vs_dict_vector": [349, 350], "254": 350, "auto_examples_text": 350, "parameter": [352, 412, 607, 608, 615, 616, 787, 788, 976, 977, 985, 990, 996], "weakest": [352, 996], "cost_complexity_pruning_path": [352, 900, 901, 902, 903], "drawstyl": [352, 693], "3272984419327777": 352, "453": [352, 357], "plot_cost_complexity_prun": [352, 357], "ryb": 353, "pairidx": 353, "borderpad": 353, "handletextpad": 353, "plot_iris_dtc": [353, 357], "plot_tre": [353, 356, 996, 1031, 1033, 1034, 1035, 1037, 1038], "919": [353, 357], "plot_tree_regress": [354, 357], "regr_3": 355, "y_3": 355, "plot_tree_regression_multioutput": [355, 357], "decision_path": [356, 550, 551, 557, 558, 559, 900, 901, 902, 903, 1028, 1033], "children_left": 356, "children_right": 356, "n_node_sampl": 356, "travers": [356, 983, 987], "n_node": [356, 434, 438, 456, 550, 551, 557, 558, 559, 900, 901, 902, 903, 934], "node_depth": 356, "is_leav": 356, "pop": [356, 387, 907, 1010, 1030], "visit": [356, 376, 987], "node_id": [356, 904, 906], "is_split_nod": 356, "children": [356, 402, 409, 434, 438, 456, 559, 1026], "800000011920929": 356, "950000047683716": 356, "node_index": 356, "node_ind": 356, "leaf_id": 356, "sample_id": [356, 371, 490], "threshold_sign": 356, "inequ": [356, 389, 402, 436, 440, 452, 692, 977, 978, 983], "common_nod": 356, "common_node_id": 356, "090": [356, 357], "plot_unveil_tree_structur": [356, 357], "auto_examples_tre": 357, "x_test_transform": [358, 406], "standard_norm": 358, "unfair": 358, "x_select": 358, "gbc": 358, "x_train_select": 358, "x_test_select": 358, "tip": [358, 361, 365, 376, 379, 382, 397, 410, 527, 534, 638, 685, 976, 1002, 1016, 1017, 1020, 1025], "glossari": [358, 365, 376, 378, 382, 401, 413, 414, 430, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 460, 462, 465, 467, 481, 484, 485, 488, 490, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 576, 577, 587, 595, 600, 601, 603, 604, 620, 625, 627, 632, 633, 634, 635, 639, 640, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 680, 681, 682, 683, 684, 685, 686, 687, 688, 694, 766, 770, 773, 783, 787, 788, 789, 791, 792, 793, 794, 795, 801, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 834, 835, 837, 838, 840, 841, 842, 843, 845, 846, 848, 849, 850, 851, 854, 857, 869, 873, 881, 884, 885, 887, 888, 892, 893, 894, 897, 900, 901, 902, 903, 928, 929, 951, 954, 969, 970, 976, 1006, 1030], "mtrand": 358, "_rand": 358, "85418642": 358, "79084103": 358, "13077794": 358, "11915045": 358, "56479934": 358, "70814003": 358, "25291366": 358, "55212743": 358, "18197458": 358, "37845099": 358, "mutat": [358, 1030], "somewhat": [358, 364, 376, 378, 407, 409, 894, 897, 976, 995, 996], "debug": [358, 363, 377, 379, 382, 389, 391, 620, 891, 946, 1000, 1015, 1030, 1034], "govern": [358, 362, 365, 376, 389, 998, 1004], "implic": [358, 376], "rf_123": 358, "rf_inst": 358, "didn": [358, 389, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "strict": [358, 374, 389, 407, 496, 528, 581, 582, 584, 976, 1022, 1031, 1034], "pervas": [358, 376], "unlucki": 358, "lucki": 358, "fairer": 358, "temptat": [358, 376], "throughput": [361, 1000, 1017, 1025], "switch": [361, 671, 697, 710, 729, 747, 749, 785, 832, 833, 928, 929, 980, 983, 1017, 1022], "offlin": [362, 376], "bottleneck": [362, 382, 409, 441, 849, 850], "hurt": [362, 527, 1030], "toolkit": [362, 1000, 1004], "branch": [362, 374, 376, 379, 380, 402, 409, 435, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 900, 901, 902, 903, 905, 983, 987, 996], "sklearn_assume_finit": 362, "assume_finit": [362, 363, 461, 890], "assert_all_finit": [362, 385, 461], "nm": 362, "csc": [362, 387, 389, 410, 544, 546, 547, 663, 685, 859, 861, 867, 872, 875, 877, 883, 908, 912, 913, 943, 955, 956, 958, 959, 960, 961, 983, 990, 1030, 1031, 1033, 1036], "32bit": [362, 945], "speedup": [362, 407, 409, 643, 647, 650, 1022, 1023, 1024, 1025, 1037], "multithread": [362, 402, 892, 893, 894, 895, 896, 897, 898], "bla": [362, 363, 374, 377, 382, 1022, 1030, 1031, 1033, 1034], "sparsity_ratio": 362, "gbt": 362, "speedi": 362, "packet": 362, "reuter": [362, 371], "carefulli": [362, 407], "spawn": [362, 387, 789, 803, 813, 814, 815, 1033], "gil": [362, 363, 377, 948, 1025, 1030, 1031, 1034, 1035], "ought": 362, "lapack": [362, 363, 374, 525, 528, 534, 681, 1037], "dgemm": 362, "show_vers": [362, 374, 376, 384, 392, 1030], "atla": [362, 374], "rebuild": [362, 396, 410, 435], "openbla": [362, 363, 374, 387, 948, 1035], "mkl": [362, 363, 374, 387, 948, 1022], "veclib": [362, 387], "osx": 362, "nouri": [362, 1023, 1025], "instruct": [362, 376, 377, 378, 379, 380, 381, 384, 387, 388, 496, 581, 582, 584, 1006, 1015, 1022], "ubuntu": [362, 374, 382, 384], "1gb": 362, "mib": [362, 461, 890], "working_memori": [362, 363, 461, 773, 890, 1030], "adher": [362, 378, 389, 923, 924, 1022, 1023], "pairwise_distances_chunk": [362, 770, 1030, 1033], "facilit": [362, 389, 396, 1000, 1001, 1028, 1031], "moment": [362, 407, 412, 433, 608, 616, 849, 850, 944, 984, 985], "000024": 362, "027400": 362, "mileag": 362, "deploi": [362, 391, 396, 1001, 1004], "upstream": [362, 376, 380, 384, 387, 990, 1031], "lighter": [362, 693, 695, 774, 781, 1038], "threadpoolctl": [363, 374, 392, 395], "subsect": [363, 376, 401], "worker": [363, 389, 410, 946, 947, 948, 1037], "14228": 363, "loki": [363, 948, 980, 1030, 1033], "duplic": [363, 375, 376, 389, 402, 413, 437, 441, 442, 508, 628, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 816, 863, 966, 983, 1022, 1025, 1034, 1036, 1038], "memmap": [363, 371, 389, 407, 501, 527, 1030], "1mb": [363, 1027], "parallel_backend": [363, 413, 430, 437, 439, 441, 443, 445, 450, 451, 454, 457, 460, 465, 524, 528, 529, 530, 532, 535, 536, 538, 539, 541, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 587, 595, 603, 625, 627, 632, 640, 644, 646, 648, 650, 651, 652, 654, 656, 658, 659, 661, 669, 672, 681, 682, 683, 684, 685, 686, 687, 766, 770, 773, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 834, 835, 838, 840, 842, 843, 845, 846, 851, 854, 887, 888, 1030], "exclus": [363, 387, 389, 407, 409, 620, 621, 623, 969, 976, 980, 981, 1004, 1029, 1033], "omp_num_thread": 363, "my_script": 363, "algebra": [363, 374, 379, 387, 407, 410, 455, 858, 990], "bli": [363, 374, 387], "mkl_num_thread": 363, "openblas_num_thread": 363, "blis_num_thread": 363, "bash": [363, 384], "zsh": 363, "termin": [363, 381, 382, 384, 392, 402, 441, 454, 546, 547, 551, 552, 553, 556, 558, 659, 660, 661, 669, 671, 849, 850, 901, 903, 986, 996], "prompt": [363, 374, 376, 392, 395, 410, 1006], "pypi": [363, 374, 376, 378, 380, 382, 392, 996, 1030, 1034, 1036, 1037], "channel": [363, 371, 374, 387, 392, 410, 486, 487, 576, 577, 579, 580], "subscript": [363, 1035], "max_thread": [363, 377], "n_cpu": [363, 389], "_num_thread": 363, "singleton": [363, 797, 915, 1035], "aforement": [363, 981], "global_random_se": 363, "fixtur": [363, 376], "build_numb": 363, "disrupt": 363, "config": [363, 376, 377, 384, 619, 1030], "contributor": [363, 379, 380, 381, 384, 387, 389, 980, 998, 1001, 1023, 1024, 1025], "watch": 363, "annoi": 363, "test_your_test_nam": 363, "skip": [363, 376, 378, 385, 398, 410, 461, 561, 639, 640, 645, 653, 654, 655, 664, 674, 890, 1015, 1026, 1029, 1032, 1034, 1036, 1038], "global_dtyp": 363, "boundscheck": [363, 377], "segfault": [363, 377, 1022, 1030, 1035], "posix": [363, 387], "pairwisedistancesreduct": 363, "adequ": [363, 382, 560, 1006, 1035], "drive": [364, 407, 408, 542, 994, 1004, 1015], "passiveaggressiveregressor": [364, 976, 1023, 1026, 1029, 1030, 1033, 1035], "maxabsscal": [364, 856, 877, 970, 990, 1027, 1030, 1031, 1032, 1033, 1038], "routin": [364, 370, 373, 376, 377, 378, 379, 384, 387, 389, 411, 665, 667, 680, 894, 895, 896, 897, 898, 977, 983, 990, 991, 994, 1000, 1004, 1022, 1036, 1037, 1038], "passiveaggress": [364, 410, 659], "fledg": [364, 410], "naivebay": 364, "dramat": 364, "welcom": [365, 375, 376, 384, 390, 1001, 1003], "roadmap": [365, 998], "persist": [365, 384, 387, 407, 439, 603, 604, 848, 985, 1000, 1017, 1028, 1031], "miscellan": [365, 369, 370, 1028, 1029, 1036, 1037, 1039], "craft": [365, 379], "curat": [365, 376, 379, 380], "fetcher": [369, 1027, 1029], "linnerrud": [369, 1017], "covertyp": [369, 484, 1017], "rcv1": [369, 490, 1017, 1027], "kddcup": [369, 485, 1017], "svmlight": [369, 480, 501, 502, 1017, 1022, 1023, 1029, 1031], "jpeg": [370, 371, 486, 487], "publish": [370, 371, 378, 380, 384, 389, 992, 1001, 1034], "creativ": 370, "spare": [370, 667, 668], "pyplpt": 370, "load_svmlight_fil": [370, 1022, 1023, 1028, 1029, 1030, 1037], "test_dataset": 370, "everybodi": [370, 376], "upload": [370, 374, 380, 387, 664], "mice": [370, 620, 970], "brain": 370, "miceprotein": 370, "1080": [370, 402], "sc": [370, 402], "clara": [370, 1034], "higuera": 370, "katheleen": 370, "gardin": 370, "krzysztof": 370, "cio": 370, "protein": 370, "cite": [370, 402, 998], "kj": [370, 982], "critic": [370, 376, 388, 396, 409, 685, 977, 980, 988, 995, 1004, 1033], "syndrom": 370, "plo": [370, 600, 601], "ONE": [370, 600, 601], "e0129126": 370, "40966": 370, "upload_d": 370, "08t16": 370, "17928620": 370, "file_id": 370, "default_target_attribut": 370, "row_id_attribut": 370, "mouseid": 370, "ignore_attribut": 370, "genotyp": 370, "cc18": 370, "study_135": 370, "study_98": 370, "study_99": 370, "md5_checksum": 370, "3c479a6885bfa0438971388283a1ce32": 370, "websit": [370, 371, 373, 376, 390, 984, 994, 1004, 1015, 1023, 1024, 1025], "4550": 370, "17t14": 370, "1804243": 370, "pone": 370, "0129126": 370, "openml100": 370, "study_14": 370, "study_34": 370, "earliest": [370, 977], "iris_61": 370, "iris_969": 370, "969": 370, "iris_version_3": 370, "vanschoren": [370, 1034], "rijn": [370, 1030], "bischl": 370, "torgo": 370, "acm": [370, 371, 402, 413, 437, 443, 450, 453, 504, 556, 669, 718, 748, 838, 980, 983, 986, 992], "sigkdd": [370, 371, 504, 669, 873, 990, 992], "newslett": 370, "legaci": [370, 380, 389, 948, 1022, 1029, 1034], "my": [370, 376, 381, 384, 489], "columnar": [370, 457, 1000], "usabl": [370, 376, 378, 389, 396, 410, 789, 948, 1022, 1029, 1036, 1037], "io": [370, 373, 374, 376, 380, 382, 384, 389, 396, 685, 1000, 1020], "json": [370, 376, 392], "sql": 370, "smoothli": 370, "manipul": [370, 398, 500, 948, 1000, 1028], "mat": [370, 410], "load_fil": [370, 371, 1015, 1024, 1036], "audio": [370, 496], "wish": [370, 376, 383, 385, 392, 402, 643, 644, 647, 648, 649, 657, 658, 929, 1007, 1015, 1029], "imageio": 370, "wavfil": 370, "wav": 370, "hdf5": 370, "h5py": 370, "pytabl": 370, "april": [371, 657, 678, 679, 1026, 1034], "AT": [371, 488], "laboratori": [371, 1000], "cambridg": [371, 407, 583, 827, 831, 976, 978, 982], "facial": 371, "upright": 371, "frontal": 371, "movement": 371, "credit": [371, 384, 409, 976, 1004], "18846": [371, 481, 482], "scikit_learn_data": [371, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], "20news_hom": 371, "newsgroups_train": 371, "11314": 371, "1073": 371, "20new": [371, 1015], "34118": 371, "01327": 371, "newsgroups_test": 371, "vectors_test": 371, "class_prior": [371, 827, 828, 829, 831, 1023, 1026], "fit_prior": [371, 827, 828, 829, 831], "88213": 371, "suspici": 371, "show_top10": 371, "top10": 371, "affili": 371, "abund": 371, "clue": [371, 384, 977], "bare": [371, 977, 1015], "quotat": 371, "77310": 371, "76995": 371, "cleveland": 371, "indian": 371, "leagu": 371, "team": [371, 379, 387, 389, 998, 1000, 1004, 1022], "ohio": 371, "spark": [371, 1001], "death": 371, "floyd": [371, 681, 977], "reckon": 371, "coloni": 371, "paul": [371, 1025, 1028, 1029, 1030, 1031, 1035, 1036], "dolan": 371, "nicknam": 371, "tribe": 371, "theme": [371, 1022], "mlb": [371, 863], "inappropri": [371, 406, 412, 702, 810], "nlp": [371, 407, 410, 827, 831, 978, 1004], "cultur": 371, "inflammatori": 371, "famou": [371, 373, 409, 995], "internet": [371, 381, 990, 1013], "offici": [371, 378, 389, 392, 486, 490, 1000, 1015, 1030, 1031, 1034], "verif": [371, 980, 1004], "identif": [371, 376, 490, 969, 1007], "viola": [371, 1030], "opencv": 371, "detector": [371, 389, 838], "5749": [371, 486, 487], "13233": [371, 486, 487], "5828": [371, 486, 487], "200m": 371, "lfw_home": 371, "rectangular": [371, 389, 929, 1001], "1140": 371, "fetch_lfw_pair": [371, 1027, 1037], "lfw_pairs_train": 371, "subdivid": [371, 412], "10_fold": [371, 486], "gari": [371, 1029], "huang": [371, 651, 1028, 1033], "manu": 371, "ramesh": [371, 1004, 1025, 1028, 1032], "tamara": 371, "berg": [371, 1023, 1024, 1034], "erik": [371, 1004, 1025], "miller": [371, 1030, 1031, 1035], "massachusett": 371, "amherst": 371, "30m": 371, "seven": [371, 973], "homepag": [371, 523, 996], "581012": [371, 484], "newswir": 371, "ltd": [371, 1004], "804414": [371, 490], "47236": [371, 490], "fetch_rcv1": [371, 1027, 1031], "v2": [371, 490, 657, 678, 679, 976], "chronolog": [371, 490], "23149": [371, 490, 1036], "781265": [371, 490], "lyrl2004": [371, 490], "2286": 371, "810596": 371, "2287": 371, "2288": 371, "uint32": [371, 490], "gmil": 371, "381327": 371, "ccat": 371, "e11": 371, "ecat": 371, "m11": 371, "656": 371, "lewi": [371, 1029, 1033], "yang": [371, 402, 407, 527, 632, 1028, 1029, 1032, 1034, 1035, 1036, 1039], "rose": 371, "397": 371, "cup": [371, 980], "tcpdump": 371, "darpa": 371, "intrus": 371, "mit": [371, 382, 402, 412, 603, 604, 607, 612, 615, 636, 659, 660, 669, 829, 973], "lincoln": 371, "inject": [371, 409], "attack": 371, "unrealist": 371, "logged_in": 371, "resp": [371, 409, 590, 787, 788, 994, 1030], "4898431": [371, 485], "976158": 371, "699691": 371, "619052": 371, "95373": 371, "kddcup99": [371, 485], "richard": [371, 411, 651, 1023, 1032, 1034, 1036, 1037], "lippmann": 371, "hain": 371, "jonathan": [371, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1038], "korba": 371, "da": [371, 1037, 1038], "yamanishi": 371, "takeuchi": 371, "miln": 371, "discount": [371, 402, 718, 748, 1029, 1032], "sixth": 371, "press": [371, 402, 407, 412, 413, 437, 583, 603, 604, 607, 612, 615, 636, 827, 831, 973, 976, 978, 982], "household": 371, "statlib": 371, "dcc": 371, "ltorgo": 371, "cal_hous": 371, "1990": 371, "censu": 371, "bureau": 371, "resid": 371, "vacat": 371, "pace": 371, "kellei": [371, 1024, 1025], "ronald": [371, 984, 1025, 1035], "barri": [371, 1030], "autoregress": 371, "297": 371, "hyperspher": [372, 1000], "interleav": [372, 515], "simplif": [372, 375, 381, 1022, 1028], "realiti": 372, "make_sparse_uncorrel": 372, "make_friedman1": [372, 409, 532, 536, 586, 587, 625], "make_friedman2": [372, 604, 606, 607, 608, 609, 610, 614, 617, 618], "reciproc": [372, 980], "make_friedman3": 372, "7826": 373, "4194": 373, "9490": 373, "9565": 373, "fisher": [373, 409, 497, 629, 1000], "michael": [373, 400, 402, 443, 621, 630, 684, 787, 970, 976, 1004, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1036, 1037], "marshal": 373, "arc": [373, 409], "1988": 373, "sir": 373, "referenc": [373, 376, 378, 384, 389, 884, 885, 983, 1029, 1035], "duda": [373, 974], "hart": [373, 974, 1030], "taxonom": 373, "annual": [373, 402, 718, 748, 889, 980, 993], "eugen": [373, 1023, 1028], "1936": 373, "john": [373, 410, 529, 701, 727, 761, 867, 894, 895, 897, 898, 970, 976, 980, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1035, 1037, 1038], "wilei": [373, 970], "1950": [373, 980], "1973": [373, 400], "scene": [373, 983, 985, 1035], "q327": 373, "d83": 373, "son": [373, 970], "isbn": [373, 402, 976], "471": 373, "22361": 373, "218": [373, 464, 708, 778], "dasarathi": 373, "1980": 373, "nose": [373, 1025, 1029], "pami": [373, 402, 717], "gate": [373, 1035], "1972": 373, "431": 373, "433": 373, "mlc": 373, "cheeseman": 373, "autoclass": 373, "conceptu": [373, 409, 978], "alpaydin": 373, "boun": 373, "nist": [373, 980], "bitmap": 373, "preprint": 373, "32x32": 373, "nonoverlap": 373, "4x4": [373, 407, 410], "garri": 373, "candela": 373, "dimmick": 373, "geist": 373, "grother": 373, "janet": 373, "handprint": 373, "nistir": 373, "5469": 373, "kaynak": 373, "msc": 373, "graduat": 373, "bogazici": 373, "cascad": 373, "kybernetika": 373, "ken": [373, 1015, 1024, 1031], "tang": [373, 1032, 1033, 1034], "ponnuthurai": 373, "suganthan": 373, "yao": [373, 1028, 1029, 1030, 1031, 1038, 1039], "kai": [373, 556, 986, 1029], "dimensionalityreduct": 373, "nanyang": 373, "technolog": 373, "claudio": [373, 1036, 1037], "gentil": [373, 1034], "linnerud": [373, 498], "men": 373, "club": 373, "waist": 373, "puls": 373, "chin": [373, 1026], "situp": 373, "tenenhau": 373, "pratiqu": 373, "alcalin": 373, "magnesium": 373, "phenol": 373, "nonflavanoid": 373, "proanthocyanin": 373, "od280": 373, "od315": 373, "dilut": 373, "class_2": [373, 503], "162": 373, "1680": 373, "746": 373, "chemic": 373, "grown": [373, 409, 546, 547, 548, 549, 550, 551, 557, 558, 900, 901, 902, 903, 996], "itali": 373, "cultiv": 373, "thirteen": 373, "constitu": 373, "forina": 373, "parvu": 373, "pharmaceut": 373, "food": 373, "brigata": 373, "salerno": 373, "16147": 373, "genoa": 373, "lichman": 373, "irvin": 373, "aeberhard": 373, "cooman": 373, "vel": 373, "rep": 373, "dept": 373, "cook": [373, 1022, 1028], "north": [373, 402], "queensland": 373, "submit": [373, 374, 375, 378, 379, 380, 381, 384, 389, 390], "technometr": [373, 404, 462, 467, 986], "rda": 373, "1nn": 373, "THE": 373, "OF": 373, "chemometr": 373, "272": [374, 392, 394, 395], "wheel": [374, 376, 380, 392, 1032, 1034, 1036], "quickest": 374, "registri": [374, 392, 1000], "uninstal": 374, "git": [374, 378, 380, 382, 384, 1003, 1018, 1022, 1038], "fork": [374, 376, 380, 384, 387], "miniforge3": [374, 384], "miniforg": [374, 384, 392], "virtualenv": [374, 376], "venv": [374, 392], "pep517": [374, 376], "dev0": [374, 380, 1003, 1018], "pyx": [374, 376, 377, 382, 384], "pxd": [374, 376], "sklearn_fail_no_openmp": 374, "checkout": [374, 376, 380, 384], "cumbersom": 374, "reinstal": [374, 392], "setuptool": 374, "unix": [374, 410], "makefil": 374, "studio": [374, 1004], "vs_buildtool": 374, "desktop": 374, "screenshot": 374, "secondli": [374, 387, 402, 409, 650, 976, 1015], "architectur": [374, 378, 384, 387, 392, 396, 461, 890, 984, 998, 1004, 1022], "cmd": 374, "powershel": 374, "struct": [374, 389, 1025], "calcsiz": 374, "distutils_use_sdk": 374, "x86": 374, "buildtool": 374, "vc": 374, "vcvarsal": 374, "bat": 374, "x64": 374, "clang": [374, 377], "confusingli": 374, "usr": 374, "gcc": [374, 377, 382, 387], "libomp": [374, 1034], "silicon": [374, 998], "m1": [374, 998], "januari": [374, 376, 392, 1022, 1023, 1032, 1034, 1037], "arm64": [374, 379, 392], "llvm": 374, "toolchain": 374, "xcode": 374, "conflict": [374, 376, 380, 384, 392, 1029, 1030], "condarc": 374, "channel_prior": 374, "reactiv": [374, 382], "echo": [374, 380], "cxx": 374, "cflag": 374, "cxxflag": 374, "ldflag": 374, "subfold": [374, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 1035], "fopenmp": [374, 377], "export": [374, 377, 378, 392, 396, 904, 905, 996, 1000, 1003, 1031], "cppflag": 374, "xpreprocessor": 374, "wl": 374, "rpath": 374, "lomp": 374, "sudo": [374, 392], "apt": [374, 384, 392], "pip3": 374, "pythonx": 374, "precompil": 374, "arm": [374, 376, 384, 969], "cython3": 374, "cento": 374, "yum": 374, "devel": 374, "gnu": 374, "port": [374, 392, 1032], "pkg": 374, "build_ext": [374, 382], "build_clib": 374, "linker": [374, 377], "sysconfig": 374, "counterpart": [374, 969, 977, 995, 1010], "get_config_var": 374, "sklearn_build_parallel": 374, "tracker": [375, 379, 384, 387, 390, 392, 396, 998, 1001], "prioriti": [375, 625, 820, 821, 1001, 1025], "guidelin": [375, 379, 381, 382, 384, 401, 402, 409], "reformul": 375, "xyz": 375, "someestim": 375, "glanc": 375, "relabel": [375, 807, 808, 889], "stall": [375, 379], "sprint": [375, 376, 998, 1022], "unfinish": [375, 376], "supersed": [375, 1027], "overflow": [375, 384, 387, 1025, 1029, 1030, 1031, 1032, 1033, 1035], "submitt": 375, "strive": [375, 390, 1004], "expertis": [375, 376, 387], "unclear": [375, 376, 494], "pleasant": [375, 1004], "chime": 375, "permiss": [375, 380, 390, 392, 1004, 1037], "matthew": [375, 381, 529, 735, 1022, 1025, 1029, 1031, 1035, 1036], "rocklin": [375, 381], "acknowledg": [375, 602], "struggl": [375, 390, 402], "everyon": [376, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "underrepres": 376, "merit": [376, 380, 390], "teach": 376, "priceless": 376, "abid": 376, "codeofconduct": 376, "hesit": 376, "typo": [376, 390, 393, 1022], "send": [376, 402, 414, 526], "valuabl": [376, 970, 1004], "burden": [376, 864, 1001], "slep": [376, 389, 998], "templat": [376, 380, 381, 389, 390, 550, 551, 556, 557, 558, 559, 1000], "ecosystem": [376, 970, 999, 1004], "numpydoc": [376, 389, 392, 395], "compli": [376, 389, 923, 1001], "fulfil": [376, 402, 409, 789, 792, 793, 803, 852, 856, 976], "anyon": [376, 390, 1004], "gist": [376, 384, 1003], "repo": [376, 380, 1001], "feasibl": [376, 861, 862, 872], "traceback": [376, 381, 384, 387, 461, 1003], "doubt": [376, 377, 380, 976, 986, 1000], "companion": [376, 990], "transcript": 376, "inclus": [376, 378, 384, 443, 449, 746, 778, 980, 981, 1022, 1036], "yourlogin": 376, "ruff": [376, 392, 395], "mypi": [376, 380, 392, 395, 1033], "synchron": [376, 410], "my_featur": 376, "commit": [376, 380, 384, 1003, 1022, 1023, 1024, 1025], "modified_fil": 376, "committ": [376, 1022], "modif": [376, 405, 409, 410, 439, 993], "approv": [376, 390, 409], "mrg": [376, 384], "incomplet": [376, 392, 402, 698, 785, 970, 977, 1015, 1026, 1028], "wip": [376, 384, 392], "matur": [376, 1000, 1001], "broad": [376, 389, 1000], "collabor": 376, "_logist": 376, "doctest": [376, 389, 1007, 1022], "test_logist": [376, 384], "rst": [376, 380, 384, 1015, 1022, 1027], "test_common": [376, 384], "caught": [376, 384, 396], "submodul": [376, 380, 382, 401, 972, 978, 1022], "intricaci": 376, "narr": [376, 389, 651, 892, 897, 1022, 1023], "unittest": 376, "tests_for_packag": 376, "static": [376, 378, 382, 384, 639, 640, 645, 646, 653, 654, 655, 656], "astropi": 376, "linux": [376, 378, 379, 384, 1000, 1022], "gh": 376, "lint": [376, 384], "nogil": [376, 377], "cpython": [376, 377, 382, 1037], "pyodid": [376, 948], "sklearn_run_float32_test": 376, "lengthi": [376, 387], "etiquett": 376, "she": [376, 882, 883, 1032], "he": [376, 718, 748, 849, 850, 882, 883, 980, 1015, 1029, 1036, 1037], "shorten": [376, 995, 1035], "leader": [376, 1004], "grab": 376, "familiar": [376, 408, 1030], "acquaint": 376, "experienc": 376, "abandon": 376, "someon": [376, 380, 389, 1022], "glad": 376, "restructuredtext": 376, "some_param": 376, "hello": [376, 384, 941], "goodby": 376, "liter": [376, 380, 1004], "array_paramet": 376, "list_param": 376, "typed_ndarrai": 376, "multioutput_arrai": 376, "bracket": [376, 976], "delimit": [376, 986, 1037], "colon": 376, "selectfpr": [376, 411, 585, 588, 591, 592, 593, 599, 1038], "defer": 376, "backtick": [376, 381], "nowadai": 376, "dropdown": 376, "syntax": [376, 381, 384, 403, 461, 851, 852, 890, 969, 1006, 1033, 1035], "pragmat": 376, "bibliograph": 376, "arxiv": [376, 455], "_my": 376, "ref": [376, 383, 384, 970, 1028], "currentmodul": 376, "succeed": 376, "editor": [376, 384, 387], "_build": 376, "viewabl": 376, "pillow": [376, 392, 395], "sphinxext": [376, 392, 395], "opengraph": [376, 392, 395], "copybutton": [376, 392, 395], "vast": 376, "examples_pattern": 376, "your_regex_goes_her": 376, "no_mathjax": 376, "latexpdf": 376, "stone": [376, 900, 901, 996], "subdirectori": 376, "subpackag": [376, 380, 998, 1026, 1031], "cleanup": [376, 1022], "charg": 376, "test_requiring_mpl_fixtur": 376, "hang": [376, 1003, 1032, 1033], "fruit": [376, 981], "asv": 376, "asv_benchmark": 376, "airspe": 376, "veloc": 376, "publicli": [376, 1032], "zero_on": [376, 1023], "example_funct": 376, "exampleestim": 376, "_n_cluster": 376, "versionchang": 376, "meet": [376, 387, 390, 411, 565, 596, 849, 850, 889, 980, 993, 1004, 1030, 1031, 1032], "nit": 376, "retract": 376, "grammar": 376, "disambigu": [376, 820, 889, 993, 1037], "Will": [376, 490, 527, 620, 637, 638, 639, 645, 649, 650, 653, 654, 655, 656, 657, 658, 666, 668, 700, 707, 780, 857, 861, 865, 871, 872, 1025, 1026, 1028, 1030], "clariti": [376, 384], "unhelp": 376, "extran": 376, "rewritten": [376, 642, 1024, 1026], "generos": 376, "reward": 376, "heard": 376, "enemi": 376, "courtesi": 376, "justifi": [376, 382, 400, 558], "occas": 376, "deserv": [376, 382], "digest": [376, 1037], "overwhelm": 376, "sheer": [376, 1004], "myself": 376, "trickiest": 376, "buri": 376, "mixin": [376, 389, 417, 418, 419, 420, 421, 423, 424, 425, 426, 594, 923, 1024, 1033, 1037], "grep": 376, "delai": [376, 489, 789, 803, 813, 814, 948, 1036, 1037], "some_funct": [376, 919], "some_iter": 376, "flavor": [376, 983], "pointer": [376, 384, 435, 1031], "mandatori": [376, 410], "favorit": [376, 387, 1004], "Being": [376, 389, 390, 396, 976, 983], "killer": [376, 1004], "blame": 376, "migrat": [376, 1022], "ignorerevsfil": 376, "rev": [376, 600, 601], "ruin": 376, "maco": [377, 379, 392, 1030, 1034, 1036], "sklearn_enable_debug_cython_direct": 377, "scratch": [377, 435, 980, 1024], "gdb": [377, 379, 1003], "entrypoint_to_bug_reproduc": 377, "cdef": 377, "state_to_print": 377, "test_val": 377, "unifi": [377, 385, 387, 388, 409, 630, 1000, 1022], "fuse": [377, 1028, 1038], "shell": [377, 384, 387, 1006, 1015], "cythonx": 377, "language_level": 377, "wraparound": 377, "initializedcheck": 377, "nonecheck": 377, "cdivis": 377, "recompil": [377, 382, 392], "pep073": 377, "pathwai": 377, "memoryview": 377, "cnp": 377, "lightweight": [377, 789, 803, 813, 814, 1000], "virtual": [377, 392, 406, 1004], "enter": [377, 380, 402, 435, 987], "prang": 377, "void": 377, "my_func": [377, 382], "st\u00e9fan": 377, "benhel": 377, "_cython_bla": 377, "protect": [377, 380, 946], "_openmp_help": 377, "cimport": [377, 385, 1030], "omp_get_max_thread": 377, "prolifer": 378, "adopt": [378, 389, 888, 980, 994, 1030, 1037, 1039], "predomin": [378, 1023], "overrid": [378, 410, 439, 443, 450, 535, 541, 581, 582, 584, 586, 587, 590, 649, 657, 678, 679, 795, 811, 834, 835, 836, 838, 840, 842, 843, 844, 1022, 1030, 1032, 1036, 1038], "creation": [378, 504, 505, 506, 508, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 649, 832, 833, 1004, 1029, 1030, 1031, 1035], "optimis": [378, 402, 983, 1025, 1035, 1037], "param1": [378, 1012], "param2": [378, 1012], "param3": 378, "postpon": [378, 380], "requisit": 378, "liner": [378, 818], "ipython": [378, 381, 382, 384, 1007, 1015], "session": [378, 382, 387, 392, 999, 1004, 1015], "trainabl": 378, "trail": [378, 964], "overridden": [378, 389, 412, 535, 541, 609, 614, 617, 687, 1030, 1031], "n_features_in_": [378, 389, 423, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 620, 621, 622, 623, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 1033, 1035, 1037], "slep010": [378, 1033], "duck": [378, 389, 1032], "check_x_i": [378, 385, 1026, 1030, 1031, 1036], "check_arrai": [378, 385, 461, 527, 890, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "templateclassifi": 378, "demo_param": 378, "myestim": 378, "subestim": 378, "my_extra_param": 378, "my_estim": [378, 403], "subestimator__c": 378, "subestimator__class_weight": 378, "subestimator__du": 378, "subestimator__fit_intercept": 378, "subestimator__intercept_sc": 378, "subestimator__l1_ratio": 378, "subestimator__max_it": 378, "subestimator__multi_class": 378, "subestimator__n_job": 378, "subestimator__penalti": 378, "subestimator__random_st": 378, "subestimator__solv": 378, "subestimator__tol": 378, "subestimator__verbos": 378, "subestimator__warm_start": 378, "__c": 378, "__class_weight": 378, "unpack": 378, "easiest": [378, 384, 403, 977], "__repr__": [378, 1001, 1031], "setattr": 378, "deepcopi": 378, "__sklearn_clone__": [378, 427, 1038], "frozen": 378, "frozentransform": 378, "fitted_transform": [378, 457], "__getattr__": 378, "_estimator_typ": [378, 389, 1027], "clustermixin": [378, 1039], "is_classifi": [378, 389], "programmat": [378, 492, 1031], "_get_tag": [378, 1033], "allow_nan": [378, 911, 913, 1038], "array_api_support": [378, 398], "binary_onli": [378, 1032, 1033], "multioutput_onli": 378, "no_valid": 378, "non_determinist": [378, 1036], "primari": [378, 389, 407, 508, 987, 1004], "_safe_split": 378, "preserves_dtyp": 378, "poor_scor": 378, "requires_fit": 378, "requires_positive_x": [378, 1032, 1037], "requires_i": [378, 1033], "requires_positive_i": 378, "_skip_test": 378, "_xfail_check": 378, "check_nam": 378, "xfail": [378, 384], "skiptestwarn": 378, "x_type": 378, "2darrai": 378, "signifi": [378, 402, 574, 800, 985], "1dlabel": 378, "2dlabel": 378, "_more_tag": 378, "mymultioutputestim": 378, "ridgeregress": 378, "idiosyncrat": 378, "onetoonefeaturemixin": [378, 426], "classnameprefixfeaturesoutmixin": [378, 426, 1037], "auto_wrap_output_kei": 378, "mytransform": 378, "__init_subclass__": 378, "ownership": 378, "pep8": [378, 380, 384], "indent": [378, 946], "nsampl": [378, 787, 788], "statement": [378, 381, 384, 387, 389, 407, 998, 1015], "flow": 378, "client": [378, 948], "corollari": 378, "foo": [378, 574, 984], "baz": [378, 574], "pyflak": 378, "asanyarrai": 378, "hadamard": 378, "choose_random_sampl": 378, "freestand": 378, "unmodifi": [378, 389], "random_state_": [378, 529, 620, 841, 1036], "gaussiannois": 378, "quasi": [378, 849, 850, 976], "assert_allclos": 378, "rtol": [378, 832, 833, 837], "atol": [378, 665, 667, 832, 833, 837], "checklist": 379, "unclaim": 379, "workflow": [379, 380, 388, 406], "markdown": 379, "saniti": [379, 856, 980, 1022, 1023], "outdat": 379, "diff": [379, 980], "valgrind": 379, "platform": [379, 387, 389, 390, 396, 1000, 1004, 1027, 1030, 1031, 1033, 1035, 1036], "x86_64": [379, 392], "yep": 379, "gperftool": 379, "debugg": [379, 384], "gprof": 379, "callgrind": 379, "kcachegrind": 379, "warm": [379, 389, 524, 530, 536, 538, 539, 603, 646, 652, 659, 661, 669, 670, 671, 976, 1001, 1032, 1034, 1036], "homebrew": [379, 392], "freebsd": 379, "rrrcn": 380, "pep101": 380, "build_tool": 380, "blocker": 380, "mileston": 380, "maint_tool": 380, "sort_whats_new": 380, "whats_miss": 380, "fixm": [380, 389], "feedstock": 380, "recip": [380, 977, 1004], "yaml": 380, "whats_new": [380, 384], "v0": [380, 464, 465, 471, 505, 581, 582, 584, 789, 803, 851, 854, 1023, 1030, 1031, 1032], "freez": [380, 392, 396, 1001, 1004, 1030], "0rc1": 380, "__version__": 380, "draft": [380, 390], "rebas": 380, "bugfix": [380, 1022, 1036], "backport": [380, 385, 1029], "maint": 380, "enh": 380, "blindli": 380, "invit": 380, "cherri": 380, "shortlog": 380, "f2": [380, 981], "sed": [380, 1022], "front": [380, 1029], "rc1": 380, "suffix": [380, 815, 980, 1032], "brows": 380, "3a": 380, "22wheel": 380, "pyproject": 380, "toml": 380, "oldest": [380, 489], "abi": 380, "acronym": 380, "deliveri": 380, "whl": 380, "22publish": 380, "went": [380, 980], "bot": [380, 985, 1036], "sync": 380, "testpypi": 380, "tarbal": [380, 1037], "wheelhouse_upload": 380, "twine": 380, "rrr": 380, "symlink": 380, "latestst": 380, "tmp": 380, "ln": [380, 976, 984, 990], "versionwarn": 380, "secur": [380, 389, 1000, 1001, 1004, 1017], "twitter": 380, "linkedin": 380, "squash": [380, 412, 524, 530, 535, 541], "authorship": 380, "permalink": 380, "_hist_gradient_boost": 380, "_iter": 380, "pickl": [380, 389, 396, 410, 581, 582, 584, 832, 833, 1000, 1001, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038], "checker": [380, 812], "type_check": 380, "test_enable_hist_gradient_boost": 380, "enable_hist_gradient_boost": [380, 1031], "enable_my_experimental_featur": 380, "indefinit": 380, "incentiv": 380, "workabl": 381, "stackoverflow": [381, 384, 387, 1003], "blogpost": 381, "mcve": [381, 384, 387], "my_data": 381, "with_mean": [381, 872, 883, 990, 1030, 1035], "default_scor": 381, "other_scor": 381, "scrollbar": 381, "tripl": 381, "fenc": 381, "qualifi": 381, "a674e682c281": 381, "lda_featur": 381, "lda_model": 381, "n_topic": [381, 529, 1029], "minimalist": [381, 410, 1003], "continuous_featur": 381, "positive_featur": 381, "invest": [382, 1004], "idiom": 382, "crunch": 382, "performancetip": 382, "reimplement": [382, 389, 1028, 1032], "spottabl": 382, "amen": [382, 412, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 969], "cpp": 382, "engag": [382, 390], "tent": 382, "somewher": [382, 980, 1015], "prun": 382, "14496": [382, 1031], "682": 382, "ncall": 382, "tottim": 382, "percal": 382, "cumtim": 382, "lineno": 382, "_nls_subproblem": 382, "1263": 382, "157": 382, "_po": 382, "_initialize_nmf": 382, "_spars": 382, "_neg": 382, "461": 382, "hotspot": 382, "16159": [382, 1033], "840": 382, "2833": 382, "_dotbla": 382, "651": 382, "1397": 382, "2780": 382, "167": [382, 1022], "1542": 382, "2734": 382, "fromnumer": 382, "1185": 382, "lapack_lit": 382, "dgesdd": 382, "rewrit": [382, 996, 1014, 1022], "shallow": [382, 409, 554, 555, 907], "4x": [382, 1037], "line_profil": 382, "wire": [382, 527, 534], "profile_default": 382, "ipython_config": 382, "terminalipythonapp": 382, "interactiveshellapp": 382, "lprun": 382, "qtconsol": 382, "_nmf": 382, "137": [382, 1023], "73153": 382, "h_init": 382, "138": [382, 409, 412, 980], "5863": 382, "nl": 382, "112141": 382, "2336": 382, "wtv": 382, "16144": 382, "wtw": 382, "113": [382, 1025], "638": 382, "1880": 382, "195133": 382, "305": 382, "grad": [382, 1004], "495761": 382, "777": 382, "proj_gradi": 382, "2449": 382, "130": 382, "1474": 382, "4474": 382, "inner_it": 382, "83833": 382, "hn": 382, "194239": 382, "48858": 382, "150407": 382, "gradd": 382, "193": [382, 409, 708, 778, 993], "515390": 382, "dqd": 382, "pin": 382, "memory_profil": [382, 392, 395], "memit": 382, "mprun": 382, "1e7": 382, "402344": 382, "standalon": [382, 651, 892, 1003], "bianp": 382, "conda_prefix": 382, "pydebug": 382, "extra_cflag": 382, "dpy_debug": 382, "num_cor": 382, "dbg": 382, "fortun": [382, 409, 1015, 1035, 1036], "my_fil": 382, "callgrin": 382, "prof": 382, "encapsul": [383, 403, 416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903], "artist": [383, 431, 625, 691, 693, 694, 695, 795, 811, 906], "classmethod": [383, 431, 624, 625, 690, 691, 693, 694, 695, 795, 811], "line_": [383, 431, 691, 693, 694, 695, 795, 811], "gridspecfromsubplotspec": 383, "subplot_spec": 383, "get_subplotspec": 383, "ax_top_left": 383, "ax_top_right": 383, "ax_bottom": 383, "bounding_ax_": [383, 625], "lines_": [383, 625, 795, 811], "contours_": [383, 625], "advic": [384, 412, 615, 616], "forth": 384, "userscript": 384, "tampermonkei": 384, "greasemonkei": 384, "shortcut": [384, 412], "pr_number": 384, "navig": [384, 1024], "overlai": [384, 625], "codecov": 384, "test_sparsifi": 384, "pdb": 384, "ipdb": [384, 1015], "pdbcl": 384, "terminalpdb": 384, "lf": 384, "ff": 384, "tb": [384, 564, 565, 566, 567, 568, 569, 570, 571], "runxfail": 384, "werror": 384, "mailman": 384, "listinfo": 384, "crowd": [384, 390, 977, 1001, 1003], "imped": 384, "attent": [384, 600, 601, 994], "pytb": 384, "stdin": [384, 1015], "perman": 384, "25163598": 384, "issuenumb": 384, "1506": 384, "volunt": 384, "establish": [384, 387, 390, 970], "clarifi": [384, 390, 783], "regression_test": 384, "0008": 384, "patienc": [384, 389], "crop": [384, 1037], "manifest": [384, 977, 983], "fault": [384, 1030, 1032, 1034], "glibc": 384, "uniniti": 384, "trace": [384, 402, 415, 466, 468, 469, 472, 473, 474, 682, 686, 977, 1033], "supp": 384, "readm": [384, 410, 486], "my_test_script": 384, "mobil": 384, "deploy": [384, 1000, 1001, 1004], "scalewai": 384, "aw": 384, "graviton": 384, "laptop": [384, 461, 890, 1036, 1037, 1038], "workstat": 384, "qemu": 384, "docker": [384, 396, 1035, 1036], "multiarch": 384, "ppc64le": 384, "filesystem": [384, 392, 1035], "pushd": 384, "wget": 384, "aarch64": [384, 392], "arm64v8": 384, "mount": 384, "privileg": 384, "pwd": 384, "reinit": 384, "bashrc": 384, "ephemer": 384, "evolv": [385, 1037], "as_float_arrai": 385, "column_or_1d": [385, 1033, 1037], "multitarget": 385, "multi_output": [385, 912], "safe_index": [385, 1032], "check_memori": [385, 389, 1029], "5488135": 385, "71518937": 385, "60276338": 385, "54488318": 385, "has_fit_paramet": 385, "randomized_range_find": [385, 1023, 1028], "arrayfunc": 385, "cholesky_delet": 385, "min_po": 385, "least_angl": 385, "fast_logdet": 385, "safe_sparse_dot": [385, 1032], "weighted_mod": 385, "sample_without_replac": [385, 1028], "n_popul": [385, 949], "sparsefunc": [385, 1035], "mean_variance_axi": [385, 1028, 1035], "sparsefuncs_fast": 385, "inplace_csr_row_normalize_l1": 385, "inplace_csr_row_normalize_l2": 385, "inplace_csr_column_scal": 385, "sort_graph_by_row_valu": [385, 1037], "single_source_shortest_path_length": 385, "dijkstra": [385, 681, 977], "graph_shortest_path": [385, 1035], "all_estim": [385, 1032, 1033, 1037], "all_displai": [385, 1037], "all_funct": [385, 1037], "is_multilabel": 385, "dict_learn": [385, 524, 530, 539, 1023, 1030, 1032, 1035, 1036, 1038], "gen_batch": [385, 933], "safe_mask": 385, "safe_sqr": 385, "murmurhash3_32": 385, "murmurhash3_x86_32": [385, 945], "cryptograph": 385, "lookup": [385, 945, 1031], "bloom": [385, 945], "384616559": 385, "3910350737": 385, "murmurhash": 385, "graphical_lasso": [385, 464, 465, 1030, 1038], "kit": 387, "toolbox": [387, 1000, 1004], "multilay": [387, 978], "kera": [387, 1000], "forese": 387, "redesign": [387, 1022], "pystruct": [387, 1000], "ssvm": 387, "seqlearn": 387, "4143": 387, "meanwhil": [387, 995], "pipegraph": 387, "squared_loss": [387, 1035], "undertak": 387, "slowli": [387, 389, 537, 929], "ordinarili": [387, 389], "corrobor": 387, "proof": [387, 409, 886, 992], "road": 387, "bridg": [387, 977, 1000], "reproduct": [387, 976, 1003], "guidanc": [387, 412], "gitter": [387, 998, 1029, 1030], "value_kei": [387, 907], "levenshtein": 387, "dna": [387, 621, 970], "rna": 387, "pain": 387, "suppli": [387, 402, 639, 912, 913, 983, 1004, 1026, 1028, 1030, 1035], "leven": 387, "acctcctagaag": 387, "acctactagaagtt": 387, "gaatattaggccga": 387, "lev_metr": 387, "multiprocess": [387, 389, 946, 948, 983, 1022, 1030, 1036], "exec": 387, "nvidia": 387, "cuda": [387, 398], "reiniti": 387, "culprit": 387, "refus": [387, 882, 883], "forkserv": 387, "joblib_start_method": 387, "set_start_method": 387, "dozen": [388, 412], "newli": [388, 409, 456, 987, 1028, 1029, 1037], "leakag": [388, 389, 403, 1017], "disclos": 388, "entail": [388, 870, 872, 994], "r_squar": 388, "searchcv": [388, 1037], "tacit": 389, "inconsist": [389, 396, 410, 501, 502, 569, 894, 897, 916, 986, 995, 1017, 1022, 1027, 1028, 1029, 1030, 1032, 1035, 1037, 1038], "elsewher": [389, 455, 456, 464, 465, 471], "formal": [389, 390, 402, 409, 832, 833, 977, 980, 981, 984], "thereof": 389, "transduct": [389, 402, 887, 888, 1001], "position": 389, "serial": [389, 936, 1000, 1001, 1017, 1022, 1030, 1034], "unpickl": [389, 396, 569, 832, 833, 1028, 1034, 1038], "pep257": 389, "nuanc": 389, "flaw": [389, 409], "terminologi": [389, 1030], "est1": [389, 625], "est2": [389, 625], "exemplifi": 389, "_score": [389, 789, 803, 815, 980, 1022, 1035], "_loss": [389, 980], "divers": [389, 409], "abstract": [389, 407, 412, 611, 761, 1000, 1022], "descriptor": [389, 501, 502], "hoc": 389, "spectral_embed": [389, 977, 1023, 1026, 1028, 1030, 1032, 1035, 1036, 1037], "maxabs_scal": [389, 861, 1030], "astrai": 389, "readthedoc": 389, "entireti": 389, "shield": 389, "n_output": [389, 409, 419, 425, 426, 430, 435, 438, 458, 462, 475, 476, 477, 525, 527, 529, 530, 532, 535, 536, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 621, 623, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 668, 669, 671, 672, 714, 715, 720, 737, 738, 740, 742, 743, 745, 746, 777, 780, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 839, 841, 842, 843, 848, 849, 850, 851, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 884, 885, 887, 888, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 918, 951, 980, 981, 996, 1029, 1032], "n_target": [389, 405, 475, 476, 477, 478, 517, 549, 604, 636, 639, 640, 643, 644, 645, 646, 647, 649, 650, 653, 654, 655, 656, 657, 658, 664, 665, 666, 667, 668, 674, 675, 676, 677, 678, 679, 680, 981, 1034, 1036, 1038], "synonym": [389, 834, 835, 836, 842, 843, 844], "themat": 389, "alphanumer": [389, 581, 582, 584], "statistician": [389, 872], "prescrib": 389, "baggingclassifi": [389, 409, 549, 902, 970, 1025, 1028, 1029, 1030, 1033, 1037, 1038], "estimator__max_depth": [389, 969], "improp": [389, 1029], "pairwise_kernel": [389, 412, 445, 636, 757, 858, 978, 1022, 1029], "distancemetr": [389, 408, 983, 1030, 1034, 1035, 1036, 1039], "di": [389, 402, 407, 524, 530, 657, 678, 679, 885, 1026, 1035], "vectori": [389, 1032], "noun": 389, "venu": [389, 1003], "broadli": [389, 402], "consolid": [389, 390, 1022], "coo": [389, 546, 547, 685, 859, 908, 912, 913, 983, 1023], "lil": [389, 546, 547, 859, 908, 934, 983], "csgraph": [389, 1035], "absent": [389, 410, 746, 813], "densifi": [389, 407, 651, 652, 659, 661, 669, 670, 671, 892, 970, 1024], "lossili": 389, "unnorm": [389, 529, 977, 1028, 1029], "encompass": [389, 443, 449, 548, 549, 977], "is_regressor": 389, "get_n_split": [389, 790, 791, 794, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810], "estimatorcv": [389, 1001], "loo": [389, 797, 1033], "router": [389, 393, 937, 938, 939, 940], "metadta": 389, "type_of_target": [389, 859, 873, 981, 1036, 1037], "hashabl": [389, 860, 863, 991], "labelencod": [389, 562, 866, 991, 1022, 1030, 1037, 1038], "canonic": 389, "xxx": 389, "everywher": 389, "multilabelbinar": [389, 821, 856, 865, 981, 1006, 1025, 1027, 1028, 1030, 1031], "nonetheless": [389, 980], "wherein": 389, "amber": 389, "return_cov": [389, 560, 561, 604, 852], "test_idx": 389, "_idx": 389, "label1": 389, "label2": 389, "class_label": [389, 550, 554, 557, 651, 652, 659, 661, 667, 668, 669, 900, 902, 918, 995], "bincount": [389, 406, 550, 554, 557, 651, 652, 659, 661, 667, 668, 669, 892, 894, 897, 900, 902, 917, 918, 1029], "rebalanc": 389, "compute_class_weight": [389, 1025, 1036], "check_cv": [389, 1027], "obei": [389, 978], "triangl": [389, 407, 436, 440, 452, 692, 978, 983], "concurr": [389, 410, 946, 1034, 1036], "unset": [389, 1030], "get_scor": [389, 725, 1029], "check_scor": 389, "uppercas": [389, 1035], "unavail": [389, 651, 652, 941, 1029, 1035], "deadlock": 390, "meritocrat": 390, "somebodi": 390, "unanim": 390, "emeritu": [390, 998], "recant": 390, "outreach": 390, "brand": [390, 392], "social": [390, 402, 1004], "strateg": 390, "entiti": [390, 718, 748], "duti": 390, "resign": 390, "occasion": [390, 719, 1031], "escal": 390, "fallback": [390, 392, 820, 821, 980], "hereaft": 390, "lazi": [390, 410, 994, 1026], "opinion": 390, "slep020": 390, "veto": 390, "appeal": 390, "revis": [390, 663], "slep000": 390, "insuffici": [391, 979, 1014], "afraid": 392, "64bit": [392, 1022], "miniconda": 392, "administr": 392, "venvpython": 392, "venvsourc": 392, "activatesourc": 392, "activatesklearn": 392, "activatepip": 392, "learnpip": 392, "learnpip3": 392, "learnconda": 392, "installedpython3": 392, "virtualenvpython3": 392, "installedpython": 392, "virtualenvpython": 392, "installedconda": 392, "environmentpython": 392, "dnf": 392, "pacman": 392, "raspberri": 392, "polar": [392, 395, 1015], "pyarrow": [392, 395], "lock": [392, 395, 946, 948], "19137": 392, "py3": 392, "apk": 392, "bind": [392, 1022, 1029, 1030], "buster": 392, "fedora30": 392, "pkgsrc": 392, "py39": 392, "intelex": [392, 1000], "oned": 392, "sklearnex": 392, "plugin": 392, "appdata": 392, "usernam": 392, "windowsapp": 392, "oserror": [392, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491], "errno": 392, "pythonsoftwarefound": 392, "7_qbz5n2kfra8p0": 392, "localcach": 392, "python37": 392, "data_nam": 392, "australian": 392, "data_vers": 392, "lift": 392, "regedit": 392, "menu": 392, "hkey_local_machin": 392, "currentcontrolset": 392, "longpathsen": 392, "broken": [392, 406, 592, 593, 628, 713, 908, 980, 996, 1025, 1029, 1030, 1031, 1033, 1036], "set_": 393, "_request": 393, "weighted_acc": 393, "sample_weigh": 393, "sel": [393, 411], "scoring_weight": 393, "fitting_weight": 393, "hasn": 393, "retrain": [396, 1001, 1038], "inconsistentversionwarn": [396, 1038], "simplefilt": 396, "model_from_prevision_vers": 396, "original_sklearn_vers": [396, 569], "untrust": 396, "malici": 396, "unsupport": [396, 486, 1030, 1035], "inadvis": 396, "immut": 396, "snapshot": [396, 552, 553, 1001], "portabl": [396, 1000], "alex": [396, 410, 995, 1022, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1038], "gaynor": 396, "sio": 396, "get_untrusted_typ": 396, "unknown_typ": 396, "exchang": [396, 1003], "markup": 396, "pmml": [396, 1000], "onnx": [396, 1000, 1001], "xml": 396, "sklearn2pmml": [396, 1000], "affero": 396, "gplv3": 396, "datastructur": [398, 1030, 1034], "namespac": 398, "array_api": 398, "x_np": 398, "y_np": 398, "x_cu": 398, "y_cu": 398, "devic": [398, 406, 575], "array_api_dispatch": [398, 461, 890], "_estimator_with_converted_arrai": 398, "transfer": [398, 976, 1001], "_array_api": 398, "cupy_to_ndarrai": 398, "lda_np": 398, "torch": 398, "x_torch": 398, "y_torch": 398, "power_iteration_norm": [398, 534, 537, 928, 929, 1036], "array_api_compat": 398, "submatrix": [399, 417, 444, 446], "unusu": [399, 986, 990, 1030], "submatric": 399, "bipartit": [399, 446, 504, 985], "subgraph": 399, "a_n": 399, "lceil": [399, 986], "log_2": [399, 556, 986], "rceil": [399, 986], "bmatrix": 399, "u_2": 399, "u_": [399, 475, 476, 477], "n_column": [399, 444, 446], "inderjit": [399, 446], "spectralbiclust": [399, 446, 1024, 1028, 1029, 1033], "blockwis": [399, 976], "bistochast": [399, 444], "l_": [399, 604, 645, 733, 980], "k_": [399, 412, 609, 612, 614, 617, 766, 990], "u_1": 399, "v_1": 399, "v_2": 399, "v_": [399, 410], "kluger": [399, 444, 506], "yuval": [399, 444], "microarrai": [399, 444, 506, 621, 970], "cap": [399, 402, 747, 980, 1031], "hochreit": [399, 712], "hungarian": [399, 712], "bodenhof": [399, 712], "fabia": [399, 712], "acquisit": [399, 712], "murphi": [400, 636, 973], "discriminatori": 400, "wilk": 400, "tricki": [400, 977], "logit": [400, 412, 651, 652, 976], "f_i": 400, "train_set": 400, "test_set": 400, "disjoint": [400, 402, 403, 430, 697, 723, 747, 749, 977], "platt": [400, 430, 894, 895, 897, 898, 995], "_i": [400, 409, 971, 976, 980, 984, 995], "_j": [400, 971], "f_j": [400, 988], "meteorologi": 400, "climatologi": 400, "precipit": 400, "wea": 400, "640": [400, 483, 499, 500, 576, 577, 969], "650": 400, "1990a": 400, "menon": 400, "ak": [400, 1036, 1037], "jiang": [400, 1026, 1033], "xj": 400, "vembu": 400, "ohno": 400, "machado": [400, 715], "703": [400, 506], "kull": [400, 980], "silva": [400, 681, 977, 1033, 1035], "filho": 400, "flach": [400, 980], "mario": [400, 1026, 1028, 1036, 1037, 1038], "w\u00fcthrich": 400, "merz": 400, "2023": [400, 1037, 1038], "actuari": 400, "refurbish": 401, "rough": [401, 986, 1008], "uniti": 401, "lipschitz": [401, 992], "usecas": 402, "mu_j": 402, "coher": 402, "elong": 402, "lloyd": [402, 436, 440, 442, 452, 1036, 1037], "distant": [402, 685, 702, 983], "sergei": [402, 1024, 1028, 1029, 1030, 1031, 1032], "vassilvitskii": [402, 440, 453], "eighteenth": 402, "siam": [402, 406, 445, 453, 455, 528, 534], "industri": [402, 1000], "predetermin": [402, 977], "scullei": 402, "19th": 402, "exemplar": [402, 433, 447, 1014], "sent": [402, 821], "leftarrow": [402, 984, 994], "foral": [402, 412, 606], "neq": [402, 980, 982, 990], "notin": 402, "hill": [402, 441, 454, 1032], "climb": [402, 441, 454], "maxima": [402, 412], "x_j": [402, 412, 607, 608, 612, 615, 616, 618, 971, 972, 976, 983, 995, 996], "dictat": 402, "solvabl": 402, "stella": [402, 445, 455], "jianbo": [402, 445, 455, 684], "shi": [402, 445, 455, 684], "anil": [402, 445, 455], "daml": [402, 445, 455], "victor": [402, 445, 455, 1029, 1032], "minden": [402, 445, 455], "lex": [402, 445, 455], "ying": [402, 445, 455, 1036], "adjac": [402, 407, 445, 455, 578, 579, 628, 684, 688, 934, 977, 983, 1014], "adjacency_matrix": 402, "ulrik": [402, 445, 455, 684], "von": [402, 445, 455, 684, 1000, 1029, 1030], "luxburg": [402, 445, 455, 684], "jitendra": [402, 445, 455, 684], "malik": [402, 445, 455, 684], "walk": [402, 408, 1025], "marina": 402, "meila": 402, "ng": [402, 407, 684, 838, 984, 986, 1033], "jordan": [402, 407, 684, 787, 1032, 1033, 1036, 1037], "yair": [402, 684], "precondit": [402, 445, 455, 688, 996, 1038], "zhuzhunashvili": [402, 455], "forbid": [402, 409], "macroscop": 402, "occupi": [402, 980], "manhattan": [402, 434, 438, 443, 450, 692, 754, 763, 770, 771, 772, 839, 978, 983, 1026, 1031, 1038], "bisecting_strategi": [402, 436], "largest_clust": [402, 436], "biggest_inertia": [402, 436], "biggest": [402, 405, 407, 436], "steinbach": [402, 1037], "karypi": 402, "vipin": 402, "egin": 402, "minnesota": 402, "june": [402, 977, 1028, 1038], "weblog": 402, "abirami": 402, "mayilvahanan": 402, "emerg": [402, 1004], "ijet": 402, "jian": 402, "xinyu": 402, "gou": 402, "baod": 402, "hebei": 402, "knee": 402, "triangular": [402, 456, 604, 977], "whichev": [402, 409, 439, 537, 554, 555, 626, 643, 647, 649, 657, 675, 676, 690], "conjunct": [402, 587, 789, 792, 793, 795, 803, 811, 813, 814, 815, 816, 819, 947, 970, 976, 1037], "extract_dbscan": 402, "radius_neighbors_graph": [402, 413, 437, 834, 835, 836, 838, 840, 842, 843, 844, 845, 983, 1026, 1031, 1034], "ester": [402, 413, 437], "kriegel": [402, 413, 437, 443, 450, 838, 986], "sander": [402, 413, 437, 439, 443, 450, 838, 986, 1031, 1032], "xu": [402, 405, 413, 437, 994, 1035, 1036], "portland": [402, 413, 437], "aaai": [402, 413, 437, 827, 982], "revisit": [402, 413, 437], "schubert": [402, 413, 437, 443, 1026, 1027, 1030, 1031, 1033, 1034, 1035, 1036], "tod": [402, 413, 437], "lj2017": 402, "d_c": 402, "x_p": [402, 976], "d_m": 402, "x_q": 402, "g_": 402, "varepsilon": [402, 994, 995], "cm2013": 402, "mst": 402, "minimum_cluster_s": 402, "campello": [402, 439], "moulavi": [402, 439], "pei": [402, 1029], "tseng": 402, "cao": 402, "motoda": 402, "pakdd": 402, "lectur": [402, 637, 972, 999], "7819": [402, 1029], "berlin": [402, 407, 528, 689, 718, 748, 980], "heidelberg": [402, 407, 528, 689, 718, 748, 980], "mcinn": [402, 1028, 1029, 1030, 1032, 1033, 1038], "heali": 402, "icdmw": 402, "max_ep": [402, 443, 448, 450], "nearbi": [402, 983], "cluster_hierarchy_": [402, 443], "planar": 402, "peripheri": 402, "wall": 402, "ankerst": [402, 443, 450], "mihael": [402, 443, 450], "marku": [402, 443, 450, 1030, 1032, 1033, 1034], "breunig": [402, 443, 450, 838, 986], "han": [402, 435, 443, 450, 1022, 1030, 1031, 1035], "j\u00f6rg": [402, 443, 450, 1030], "sigmod": [402, 443, 450, 838, 986], "cft": 402, "lossi": 402, "subclust": [402, 435], "till": [402, 435, 780, 980], "temporarili": [402, 1027], "farthest": 402, "brc": [402, 435], "tian": [402, 435, 1027, 1028, 1029], "raghu": [402, 435], "ramakrishnan": [402, 435], "maron": [402, 435], "livni": [402, 435], "sfu": [402, 435], "coursecentr": [402, 435], "459": [402, 435], "zhang96": [402, 435], "roberto": [402, 435], "perdisci": [402, 435], "jbirch": [402, 435], "java": [402, 435, 1000], "satisfi": [402, 643, 647, 692, 710, 728, 729, 832, 833], "labels_pr": [402, 697, 698, 707, 708, 710, 723, 728, 729, 747, 749, 778, 785], "unadjust": [402, 980, 1034], "swap": [402, 407, 709, 728, 959, 960, 1022], "ri": [402, 698, 778], "c_2": [402, 977], "unord": [402, 409, 990], "esp": [402, 1022], "hubert": [402, 698, 708, 778], "arabi": [402, 698, 708, 778], "steinlei": [402, 698], "psycholog": [402, 698, 709], "agreement": [402, 697, 709, 747, 749, 785, 980], "22504": 402, "10526": 402, "u_i": [402, 475, 476, 477, 747], "v_j": [402, 747, 985], "veb2009": 402, "a_i": 402, "b_j": 402, "yat2016": 402, "average_method": [402, 697, 749, 1030], "vinh": [402, 697], "veb2010": 402, "strehl": 402, "joydeep": 402, "583": [402, 1013], "1162": 402, "153244303321897735": 402, "epp": [402, 697], "bailei": [402, 697], "26th": [402, 718, 748, 980], "1553374": 402, "1553511": 402, "9781605585161": 402, "csail": [402, 659, 660, 669, 829], "volume11": 402, "vinh10a": 402, "algesheim": 402, "tesson": 402, "30750": 402, "1038": 402, "srep30750": 402, "rosenberg": [402, 710, 729, 785], "hirschberg": [402, 710, 729, 785], "b2011": 402, "homogeneity_completeness_v_measur": [402, 1031], "n_k": [402, 543], "n_c": [402, 652], "julia": [402, 710, 729, 785], "media": [402, 1004], "hila": 402, "becker": [402, 1004, 1025, 1034], "fowlkes_mallows_scor": [402, 980, 1028, 1030], "fmi": [402, 723], "fp": [402, 705, 711, 723, 774, 775, 776, 779, 980], "fn": [402, 705, 711, 723, 774, 775, 776, 779, 980, 981], "47140": 402, "fowkl": [402, 723], "1983": [402, 723, 872], "tandfonlin": 402, "01621459": 402, "10478008": 402, "kmeans_model": 402, "1987": [402, 600, 601, 782, 783], "calinski_harabasz_scor": [402, 1030], "dispers": [402, 703, 717, 976], "561": 402, "n_e": 402, "mathrm": [402, 404, 407, 411, 976, 996], "b_k": 402, "w_k": [402, 976], "c_q": 402, "n_q": 402, "c_e": 402, "cali\u0144ski": 402, "1974": [402, 410, 703], "dendrit": [402, 703], "davies_bouldin_scor": [402, 1030], "6619": 402, "bould": 402, "c_i": [402, 983], "c_j": [402, 985], "s_i": [402, 990], "diamet": 402, "nonneg": [402, 407, 446, 531, 533, 540, 869], "s_j": 402, "max_": [402, 980], "1979": [402, 717, 761], "halkidi": 402, "batistaki": 402, "yanni": 402, "vazirgianni": 402, "michali": 402, "contingency_matrix": [402, 747, 1030], "pair_confusion_matrix": [402, 1034], "permit": [403, 460, 581, 582, 584, 789, 792, 793, 803, 814, 853, 854, 980, 981, 982, 1028], "clf__c": 403, "pca1": [403, 418], "svm1": 403, "77484909e": 403, "07058917e": 403, "pca2": [403, 418], "svm2": 403, "raw_target_regr": 403, "bypass": [403, 592, 639, 645, 900, 901, 902, 903], "check_invers": [403, 458, 856, 990, 1030, 1036, 1037], "linear_pca": 403, "make_union": [403, 851, 1025, 1029], "unreli": 403, "citi": [403, 410, 459, 1015], "london": [403, 410, 459], "sallisaw": [403, 459], "bow": 403, "moveabl": 403, "feast": 403, "grape": 403, "wrath": 403, "expert_r": 403, "user_r": 403, "city_categori": 403, "title_bow": 403, "city_london": 403, "city_pari": 403, "city_sallisaw": 403, "301": [403, 994], "ignored_new_col": 403, "estimator_html_repr": [403, 1033, 1034, 1035, 1036], "shrunk_covari": 404, "sigma_": [404, 637, 638, 1035], "365": [404, 466], "wiesel": [404, 415, 468], "eldar": [404, 415, 468], "hero": [404, 415, 468], "5016": [404, 415, 468], "5029": [404, 415, 468], "_k": [404, 974, 976], "glasso": [404, 471], "biostatist": [404, 471], "uncommon": [404, 651, 892, 995], "downweight": [404, 529], "driessen": [404, 462, 467, 986], "fastmcd": [404, 462, 467], "raw_location_": [404, 462, 467], "raw_covariance_": [404, 462, 467], "multidimension": [405, 681, 683, 685, 687, 977, 983], "plsw2a": 405, "u_k": [405, 407], "v_k": [405, 407, 524, 530, 538, 539], "x_k": [405, 407, 974, 983], "y_k": [405, 990], "xi_k": 405, "omega_k": [405, 974], "gamma_k": 405, "delta_k": 405, "nipal": [405, 476, 477], "xp": [405, 867], "x_rotations_": [405, 475, 476, 477], "y_rotations_": [405, 475, 476, 477], "ty": 405, "x_weights_": [405, 475, 476, 477, 478], "y_weights_": [405, 475, 476, 477, 478], "yv": 405, "tx": 405, "pls1": [405, 477], "pls2": [405, 477], "tx_k": [405, 974], "ty_k": 405, "ja": [405, 1029], "wegelin": 405, "methodolog": [406, 1003], "academ": [406, 1004], "commerci": [406, 1004], "flowchart": [406, 1008], "f1_macro": [406, 980, 1026], "custom_cv_2fold": 406, "custom_cv": 406, "9333": 406, "scorer1_nam": 406, "scorer2_nam": 406, "return_indic": [406, 815, 1038], "precision_macro": [406, 1010], "recall_macro": [406, 980], "test_precision_macro": 406, "test_recall_macro": 406, "prec_macro": 406, "rec_macro": 406, "test_prec_macro": 406, "test_rec_macro": 406, "train_prec_macro": 406, "train_rec_macro": 406, "undistinguish": 406, "kf": [406, 794], "12883823": 406, "rkf": [406, 804], "weigh": [406, 1029], "caveat": [406, 412], "part3": 406, "spector": 406, "submodel": 406, "kohavi": 406, "jnt": 406, "bharat": [406, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "rao": [406, 1034, 1037], "fung": 406, "rosal": 406, "witten": 406, "leavepout": [406, 797, 1010], "ss": 406, "gkf": 406, "sgkf": [406, 807], "suboptim": [406, 693, 695, 774, 781, 983, 1030, 1038], "leavepgroupsout": [406, 791, 1010, 1028], "n_group": [406, 798, 1010, 1028], "lpgo": [406, 798], "gss": [406, 791], "withheld": 406, "predefinedsplit": [406, 1010, 1026], "test_fold": [406, 802], "train_indx": 406, "test_indx": 406, "autocorrel": 406, "superset": [406, 810, 980], "surplu": 406, "tscv": [406, 810], "inbuilt": 406, "some_integ": 406, "n_cv": [406, 430], "isotropi": 407, "alik": [407, 978], "halko": [407, 528, 534, 537, 928, 929], "szlam": [407, 928, 929], "disadvantag": [407, 412, 976, 977, 984, 994, 995, 996], "parsimoni": [407, 990], "jen09": 407, "mrl09": 407, "ell_1": [407, 976], "underset": [407, 976, 983, 996], "operatornam": [407, 733, 976, 980, 996], "fro": [407, 531, 533, 540, 686, 976], "gentli": 407, "spirit": 407, "mairal": [407, 524, 530], "bach": [407, 524, 529, 530, 531, 651, 976], "ponc": [407, 524, 530], "sapiro": [407, 524, 530], "jenatton": 407, "obozinski": 407, "scholkopf1997": 407, "bakir2003": 407, "smola": [407, 410, 528, 858, 990, 995], "klau": [407, 528, 858], "eigendecompos": 407, "eigensolv": [407, 445, 455, 528, 537, 688, 977], "eigsh": [407, 528, 1028, 1029], "lehoucq": 407, "sorensen": 407, "lsa": [407, 537, 1024], "synonymi": 407, "polysemi": 407, "lsi": 407, "sigma_k": [407, 974], "columnwis": 407, "sublinear": [407, 583, 584], "use_idf": [407, 410, 583, 584, 1015], "textual": [407, 996, 1031], "man": [407, 583, 761, 827, 831, 978, 980, 982], "prabhakar": 407, "raghavan": [407, 583, 827, 831, 978, 980, 982], "hinrich": 407, "sch\u00fctze": [407, 583, 978, 980, 982], "transform_method": 407, "split_cod": 407, "dictionarylearn": [407, 530, 532, 533, 535, 536, 537, 538, 539, 1023, 1027, 1029, 1032, 1035, 1036, 1037, 1038], "overcomplet": 407, "mammalian": 407, "cortex": 407, "inpaint": 407, "h_i": [407, 985], "psi": 407, "sim": [407, 1013], "wh_i": 407, "ww": 407, "superflu": 407, "psi_1": 407, "psi_2": 407, "psi_n": 407, "superimpos": 407, "plug": [407, 976, 1004, 1015], "wh": [407, 531, 533, 540], "hoyer": [407, 1025], "nndsvd": [407, 531, 533, 540, 1031, 1034], "nndsvdar": [407, 531, 533, 540, 1031], "elementwis": [407, 531, 533, 540], "_featur": [407, 531, 533, 540], "kl": [407, 977, 1030], "itakura": [407, 531, 533, 540, 1029], "saito": [407, 531, 533, 540, 1029], "w_new": 407, "forget_factor": [407, 531], "lee": [407, 1022, 1023, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1037], "seung": 407, "boutsidi": 407, "gallopoulo": 407, "cichocki": [407, 531, 533, 540], "phan": 407, "fevott": [407, 531, 533, 540], "idier": [407, 531, 533, 540], "lefevr": [407, 531], "corpora": 407, "hoffman": [407, 529, 1027, 1034], "unshad": 407, "beta_k": 407, "eta": [407, 529, 669, 670, 671, 984, 994, 1027], "topic_word_prior": [407, 529], "theta_d": 407, "doc_topic_prior": [407, 529], "z_": 407, "w_": [407, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 976, 980, 982, 985], "elbo": 407, "overset": [407, 987], "e_": 407, "blei": [407, 529, 787], "wang": [407, 529, 672, 682, 686, 718, 748, 976, 977, 980, 1025, 1027, 1028, 1029, 1030, 1034, 1037, 1038], "paislei": [407, 529], "kaiser": [407, 525], "talli": 408, "disproportion": 408, "41075698": 408, "41076071": 408, "rho_k": 408, "unsmooth": 408, "scott": [408, 837, 1022, 1023, 1028, 1030, 1031, 1032, 1037, 1038], "silvermann": 408, "propto": [408, 982], "2h": 408, "angular": [408, 685, 756], "contin": [408, 707, 990], "generaliz": 409, "semin": 409, "friedman2001": 409, "lightgbm": [409, 554, 555, 1000, 1031, 1038], "8965": 409, "absolute_error": [409, 551, 553, 555, 558, 664, 901, 903, 1035], "grower": [409, 554, 555], "missing": [409, 620, 621, 623, 1031], "fisher1958": 409, "loan": [409, 527, 976, 1004], "nevertheless": 409, "mayer2022": 409, "mayer": [409, 1034, 1036], "bourassa": 409, "hoesli": 409, "scognamiglio": 409, "valuat": 409, "tianqi": 409, "guestrin": 409, "ke": [409, 1033, 1034], "boostingdecis": 409, "913": [409, 552], "nr": 409, "f_m": 409, "h_m": 409, "f_": [409, 628, 980], "l_m": 409, "taylor": [409, 1030, 1032, 1033, 1036], "g_i": [409, 642], "sum_m": 409, "softmax": [409, 554, 651, 652, 976, 983, 984], "superior": 409, "ineffici": [409, 436, 567, 820, 821, 983, 985], "htf": 409, "r2007": 409, "friedman2002": 409, "1189": 409, "1232": 409, "b1998": 409, "decoupl": [409, 982], "cancel": [409, 410, 755], "b2001": 409, "bear": [409, 1000], "geurt": [409, 548, 549, 550, 551, 558, 559, 902, 903], "ernst": [409, 550, 551, 558, 559, 902, 903], "wehenkel": [409, 550, 551, 558, 559, 902, 903], "l2014": 409, "lieg": 409, "flavour": 409, "b1999": 409, "b1996": 409, "h1998": 409, "lg2012": 409, "bootstrap_featur": [409, 548, 549], "844": [409, 548, 549], "346": [409, 494, 548, 549], "w2": 409, "w3": 409, "lr__c": 409, "rf__n_estim": 409, "w1992": 409, "knr": 409, "stack_method": [409, 560], "286": 409, "126": 409, "164": 409, "stack_method_": [409, 560, 561], "final_layer_rfr": 409, "final_layer_gbr": 409, "final_lay": 409, "multi_layer_regressor": 409, "wolpert": [409, 560, 561], "241": [409, 560, 561], "freund": [409, 546, 547], "fs1995": 409, "w_1": [409, 976, 984], "w_2": [409, 976, 984], "w_n": 409, "w_i": [409, 971, 980], "reappli": 409, "zzrh2009": 409, "d1997": 409, "dubai": 410, "francisco": [410, 992], "movi": [410, 1007], "movie_entri": 410, "thriller": [410, 863], "drama": 410, "000e": 410, "003e": 410, "011e": 410, "974e": 410, "unseen_featur": [410, 574], "speech": [410, 980], "chunker": 410, "pos_window": 410, "pos_vector": 410, "1x6": 410, "part_of_speech": 410, "token_featur": 410, "isupp": 410, "uppercase_initi": 410, "all_uppercas": 410, "raw_x": [410, 575], "pos_tagg": 410, "comprehens": [410, 750, 751, 978, 1004, 1030], "murmurhash3": [410, 575, 582, 945], "weinberg": 410, "modulo": [410, 1033], "kilian": [410, 1037, 1038], "anirban": 410, "dasgupta": [410, 439, 886, 992], "langford": [410, 681, 977], "josh": [410, 1029], "attenberg": 410, "multitask": [410, 981], "punctuat": [410, 581, 582, 584], "diminish": 410, "4x9": 410, "build_analyz": [410, 581, 582, 584, 1032], "interrog": 410, "bigram_vector": 410, "cool": [410, 1022], "feature_index": 410, "him": 410, "constru": 410, "nqy18": 410, "smooth_idf": [410, 583, 584], "_n": [410, 980], "textbook": [410, 583], "6x3": 410, "81940995": 410, "57320793": 410, "47330339": 410, "88089948": 410, "58149261": 410, "81355169": 410, "term1": 410, "term2": 410, "term3": 410, "0986": [410, 856], "8473": 410, "8515": [410, 1029], "5243": 410, "85151335": 410, "52433293": 410, "55422893": 410, "83236428": 410, "63035731": 410, "77630514": 410, "idf_": [410, 583, 584, 1030], "western": 410, "europ": [410, 990], "koi8": 410, "russian": 410, "modern": [410, 461, 496, 583, 683, 687, 722, 890, 977, 1000, 1001, 1038], "unicodedecodeerror": [410, 581, 582, 584], "told": 410, "chardet": 410, "chardetect": 410, "damag": 410, "sloppili": 410, "ftfy": 410, "mish": 410, "mash": 410, "text1": 410, "sei": 410, "mir": 410, "gegr": 410, "xc3": 410, "xbc": 410, "x9ft": 410, "mein": 410, "sauerkraut": 410, "text2": 410, "holdselig": 410, "sind": 410, "dein": 410, "ger": 410, "xfcche": 410, "text3": 410, "xff": 410, "xfea": 410, "x00u": 410, "x00f": 410, "x00": 410, "x00l": 410, "xfc": 410, "x00g": 410, "x00e": 410, "x00n": 410, "x00d": 410, "x00a": 410, "x00h": 410, "x00r": 410, "x00z": 410, "x00i": 410, "x00b": 410, "x00c": 410, "x00t": 410, "x00o": 410, "spolski": 410, "nnmf": [410, 1016, 1017, 1022], "phrase": 410, "misspel": 410, "rescu": 410, "resili": 410, "wprd": 410, "ngram_vector": 410, "char_wb": [410, 581, 582, 584], "rd": 410, "wo": 410, "wp": [410, 650, 664], "char": [410, 581, 582, 584, 1022], "jumpi": 410, "fox": [410, 1038], "1x4": 410, "umpi": 410, "1x5": 410, "mpy": 410, "fo": 410, "paragraph": [410, 496, 1015], "barrier": 410, "hv": 410, "4x10": 410, "discrep": [410, 1015, 1026], "4x1048576": 410, "collid": 410, "ingest": 410, "spend": 410, "my_token": 410, "lowercas": [410, 418, 435, 436, 438, 440, 442, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 581, 582, 584, 632, 633, 634, 635, 681, 682, 685, 836, 841, 844, 848, 853, 858, 884, 885, 1035], "lucen": 410, "build_preprocessor": [410, 581, 582, 584, 1032], "whitespac": 410, "fanci": 410, "lemmat": 410, "nltk": [410, 999, 1000], "word_token": 410, "wordnetlemmat": 410, "lemmatoken": 410, "wnl": 410, "british": 410, "spell": 410, "to_british": 410, "1or": 410, "bt": 410, "1er": 410, "ing": 410, "ation": 410, "1z": 410, "ogu": 410, "og": 410, "customvector": 410, "asian": 410, "one_imag": [410, 577], "fake": 410, "assert_array_equ": 410, "patchextractor": [410, 1038], "five_imag": 410, "variancethreshold": [411, 857, 970, 1025, 1032, 1035, 1038], "selectfdr": [411, 585, 589, 591, 592, 593, 599, 1026, 1028, 1029, 1038], "selectfw": [411, 585, 588, 589, 592, 593, 599, 1038], "genericunivariateselect": [411, 588, 589, 591, 592, 593, 595, 1036, 1038], "r_regress": [411, 599, 1035, 1036], "nonparametr": [411, 600, 601], "bewar": 411, "importance_gett": [411, 586, 587, 590, 1034], "unimport": 411, "lsvc": 411, "baraniuk": 411, "isr": 411, "ist": 411, "utl": 411, "aguiar": 411, "cs_note": 411, "ferri": [411, 980], "versatil": [412, 995, 1004], "optima": 412, "markov": [412, 604, 985, 1000, 1022], "ppmv": 412, "197": 412, "0336": 412, "4ppm": 412, "27ppm": 412, "197ppm": 412, "nuisanc": 412, "one_vs_on": [412, 603, 981], "ingredi": 412, "duv2014": 412, "theta_l": 412, "x_bound": [412, 610], "operand": 412, "k1__": 412, "k2__": 412, "constant_valu": [412, 606, 610], "constant_value_bound": [412, 604, 606, 610], "k1__k1__constant_valu": 412, "value_typ": [412, 610], "n_element": [412, 610], "k2__length_scal": 412, "k1": [412, 614, 617], "k1__k1": 412, "k1__k1__constant_value_bound": 412, "k1__k2": 412, "k1__k2__length_scale_bound": 412, "k2": [412, 614, 617], "k2__length_scale_bound": 412, "69314718": [412, 605, 990], "30258509": 412, "interoper": [412, 998, 1001, 1017], "pairwisekernel": 412, "_valu": [412, 606], "_level": [412, 618], "k_1": [412, 614, 617], "k_2": [412, 614, 617], "__add__": [412, 617], "__mul___": 412, "__pow__": [412, 609], "2l": [412, 615], "bigg": [412, 612], "bessel": [412, 612], "rightarrow": [412, 612, 984], "quad": [412, 983, 994], "tfrac": 412, "3l": 412, "pp84": 412, "x_d": [412, 607], "inhomogen": [412, 607], "expon": [412, 609, 669, 670, 671, 801, 849, 850, 867, 969], "carl": [412, 603, 604, 607, 612, 615], "rasmussen": [412, 603, 604, 607, 612, 615], "duvenaud": [412, 615, 616], "cookbook": [412, 615, 616], "minkowski": [413, 437, 443, 450, 681, 692, 770, 771, 772, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 983, 1022, 1025, 1036, 1037, 1039], "metric_param": [413, 437, 439, 443, 450, 681, 685, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 1026, 1029, 1036], "leaf_siz": [413, 437, 439, 443, 450, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844], "kd_tree": [413, 437, 443, 450, 681, 682, 834, 835, 836, 837, 838, 840, 842, 843, 844, 983, 1035], "balltre": [413, 437, 439, 443, 450, 681, 682, 692, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 977, 1022, 1024, 1026, 1030, 1035, 1038], "ckdtree": [413, 437, 1024], "inhibit": [413, 437], "core_sampl": 413, "n_core_sampl": [413, 437], "attract": [413, 437, 974, 983, 1000], "fun": [414, 526, 1004], "logcosh": [414, 526], "fun_arg": [414, 526], "w_init": [414, 526], "whiten_solv": [414, 526, 1037], "return_x_mean": 414, "compute_sourc": 414, "return_n_it": [414, 447, 452, 471, 538, 539, 639, 640, 645, 646, 653, 654, 655, 656, 674, 675, 676, 677, 678, 679, 680, 687, 1036], "cube": [414, 526], "my_g": [414, 526], "x_mean": 414, "AS": 414, "fortran": [414, 534, 639, 640, 645, 646, 653, 654, 655, 656, 658, 674, 677, 678, 679, 912, 913, 1022, 1025, 1026, 1030], "hyvarinen": [414, 526], "oja": [414, 526], "430": [414, 526], "shrunk_cov": [415, 472, 474], "eq": [415, 468, 714, 715, 716], "subobject": [416, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 684, 685, 787, 788, 789, 792, 793, 803, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903], "row_ind": [417, 444, 446], "intp": [417, 444, 446], "col_ind": [417, 444, 446], "get_submatrix": [417, 444, 446], "pca0": 418, "_n_features_out": 418, "class_name0": [418, 435, 436, 438, 440, 442, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 632, 633, 634, 635, 681, 682, 685, 836, 841, 844, 848, 858, 884, 885], "class_name1": [418, 435, 436, 438, 440, 442, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 632, 633, 634, 635, 681, 682, 685, 836, 841, 844, 848, 858, 884, 885], "class_name2": [418, 435, 436, 438, 440, 442, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 632, 633, 634, 635, 681, 682, 685, 836, 841, 844, 848, 858, 884, 885], "feature_names_out": [418, 423, 435, 436, 438, 440, 442, 457, 475, 476, 477, 478, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 559, 560, 561, 562, 563, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 621, 622, 623, 628, 631, 632, 633, 634, 635, 681, 682, 685, 836, 841, 844, 848, 851, 852, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 884, 885, 1036], "harsh": [419, 430, 462, 542, 543, 544, 546, 548, 550, 552, 554, 557, 560, 562, 603, 651, 659, 661, 667, 668, 669, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 839, 842, 849, 887, 888, 892, 894, 897, 900, 902, 1032, 1034, 1037], "n_samples_fit": [425, 458, 475, 476, 477, 547, 549, 551, 553, 555, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 681, 825, 826, 834, 835, 836, 838, 840, 842, 843, 844, 850, 893, 895, 898, 901, 903], "uniform_averag": [425, 458, 475, 476, 477, 547, 549, 551, 553, 555, 558, 561, 563, 604, 628, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 672, 714, 715, 720, 737, 738, 740, 742, 743, 745, 777, 825, 826, 835, 843, 850, 893, 895, 898, 901, 903, 980, 1031], "n_features_new": [426, 435, 438, 525, 527, 529, 530, 532, 535, 536, 542, 560, 562, 563, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 621, 623, 628, 631, 632, 633, 634, 635, 841, 848, 855, 856, 857, 858, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 884, 885], "base_clf": 430, "calibrated_clf": 430, "072": [430, 641], "927": 430, "x_calib": 430, "y_calib": 430, "prob_tru": [431, 432], "prob_pr": [431, 432], "ref_lin": 431, "alexandru": 432, "22nd": 432, "convergence_it": [433, 447], "hardcod": [433, 447, 1030], "affinity_matrix_": [433, 445, 684], "cluster_center_indic": [433, 447], "compute_full_tre": [434, 438, 1026], "compute_dist": [434, 438, 1034], "inferior": [434, 438, 1033], "n_leaves_": [434, 438], "n_connected_components_": [434, 438, 1031], "branching_factor": 435, "compute_label": [435, 442], "promot": [435, 701, 1000, 1033, 1035], "redistribut": 435, "overwritten": [435, 525, 526, 527, 529, 534, 541, 600, 601, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 665, 667, 672, 674, 675, 676, 677, 679, 948, 950, 1035], "root_": 435, "_cfnode": 435, "cftree": 435, "dummy_leaf_": 435, "subcluster_labels_": 435, "centroids_": [435, 439, 839], "copy_x": [436, 440, 452, 528, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 665, 667, 672, 674, 675, 676, 677, 678, 1024, 1030, 1031], "k_init": [436, 452], "sse": 436, "bisect_mean": 436, "denser": 437, "pooling_func": [438, 1030], "xred": [438, 1038], "cluster_selection_epsilon": 439, "max_cluster_s": 439, "cluster_selection_method": 439, "eom": 439, "store_cent": 439, "kdtree": [439, 443, 450, 681, 682, 832, 834, 835, 836, 837, 838, 840, 842, 843, 844, 1024, 1026, 1030, 1034, 1035, 1038], "medoid": 439, "overwrit": [439, 489, 624, 1006, 1022, 1033, 1038], "medoids_": 439, "zimek": 439, "chaudhuri": 439, "jaskowiak": 439, "malzer": 439, "baum": 439, "hybrid": [439, 642, 1000], "dbscan_clust": 439, "border": [439, 1032], "unclust": 439, "socg2006": 440, "min_bin_freq": [441, 454], "cluster_al": [441, 454], "get_bin_se": 441, "orphan": [441, 454, 1022], "reassignment_ratio": 442, "eec": [442, 634], "tuft": 442, "dscullei": 442, "fastkmean": 442, "55102041": 442, "48979592": 442, "06896552": 442, "set_partial_fit_request": [442, 527, 531, 659, 661, 669, 670, 671, 820, 821, 824, 825, 827, 828, 829, 830, 831, 849, 872], "cluster_method": 443, "predecessor_correct": [443, 449], "unprocess": [443, 581, 582, 584], "heap": 443, "braycurti": [443, 450, 692, 770, 771, 772, 983], "canberra": [443, 450, 692, 770, 771, 772, 983], "chebyshev": [443, 450, 692, 770, 771, 772, 983], "dice": [443, 450, 692, 770, 771, 772, 983], "kulsinski": [443, 450, 692, 770, 771, 772], "rogerstanimoto": [443, 450, 692, 770, 771, 772, 983], "russellrao": [443, 450, 692, 770, 771, 772, 983], "seuclidean": [443, 450, 692, 770, 771, 772, 839, 983, 1030, 1033, 1034], "sokalmichen": [443, 450, 692, 770, 771, 772, 983], "sokalsneath": [443, 450, 692, 770, 771, 772, 983], "yule": [443, 450, 770, 771, 772], "manhattan_dist": [443, 450, 681, 754, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 1022, 1032, 1037, 1038], "minkowski_dist": [443, 450, 681, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846], "l_p": [443, 450, 681, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846], "upward": [443, 449], "successor": [443, 449, 996, 1000], "predecessor_": [443, 450], "erich": [443, 1026, 1027, 1030, 1031, 1033, 1034, 1035, 1036], "gertz": 443, "lernen": 443, "wissen": 443, "daten": [443, 1030, 1031], "analysen": 443, "lwda": 443, "318": 443, "329": 443, "n_best": 444, "n_svd_vec": [444, 446], "mini_batch": [444, 446], "n_row_clust": [444, 446, 506], "n_column_clust": [444, 446, 506], "ncv": [444, 446], "n_oversampl": [444, 446, 534, 537, 929, 1036], "kernel_param": [445, 528, 632, 636], "precomputed_nearest_neighbor": [445, 684], "eigen": [445, 542, 666, 684, 688, 974, 1028, 1031], "dist_matrix": 445, "541": [445, 455], "csc_matrix": [445, 550, 551, 556, 557, 558, 559, 869, 900, 901, 902, 903, 970, 990, 996, 1027], "best_n_it": 452, "n_local_tri": 453, "n_seed": 454, "multigrid": 455, "eigendecomposit": [455, 666, 684, 688, 858], "multiscal": 455, "preliminari": 455, "heapq": 456, "topolog": [456, 1000], "n_connected_compon": 456, "n_leav": [456, 900, 901, 902, 903], "untransform": [457, 460, 991], "transformers_": 457, "remaining_column": 457, "named_transformers_": 457, "sparse_output_": [457, 544], "output_indices_": [457, 1035], "datatyp": [457, 459, 1029, 1032], "norm1": 457, "norm2": 457, "text_preprocess": 457, "num_preprocess": 457, "x_t": [457, 620, 851], "sum_n_compon": [457, 851], "y_hat": 458, "90453403": 459, "50755672": 459, "30151134": 459, "print_changed_onli": [461, 890, 1031, 1033, 1034], "pairwise_dist_chunk_s": [461, 890], "enable_cython_pairwise_dist": [461, 890], "skip_parameter_valid": [461, 890, 1038], "cache_s": [461, 890, 894, 895, 896, 897, 898, 995], "get_config": [461, 773, 890, 947, 1037], "offset_": [462, 556, 670, 838, 896, 1030], "raw_support_": [462, 467], "dist_": [462, 467], "true_cov": [462, 464, 465], "7411": [462, 467, 1028], "2535": [462, 467], "3053": [462, 467], "0813": [462, 467], "0427": [462, 467], "correct_covari": [462, 467], "rvd": [462, 467], "covariance_correct": [462, 467], "comp_cov": [462, 463, 464, 465, 466, 467, 468, 469], "get_precis": [462, 463, 464, 465, 466, 467, 468, 469, 525, 527, 534], "is_inli": [462, 556, 838], "reweight_covari": [462, 467], "rvdriessen": [462, 467], "location_reweight": [462, 467], "covariance_reweight": [462, 467], "support_reweight": [462, 467], "negative_mahal_dist": 462, "7569": 463, "2818": 463, "3928": 463, "0622": [463, 469], "0193": [463, 469], "enet_tol": [464, 465, 471, 1027], "220446049250313e": [464, 465, 471, 643, 644, 647, 648, 649, 675, 676], "graphlasso": [464, 1027, 1030], "costs_": [464, 465, 1038], "dual_gap": [464, 465, 471, 639, 640, 645, 646, 653, 654, 655, 656, 674, 677], "return_cost": [464, 465, 471], "049": 464, "364": [464, 465, 1023], "034": 464, "038": [464, 465, 849], "n_refin": 465, "graphlassocv": [465, 1024, 1030], "dualiti": [465, 976], "051": 465, "block_siz": [466, 472, 473, 1026], "4406": 466, "1616": 466, "0595": 466, "0075": [466, 534], "rouseeuw1984": 467, "butlerdavi": 467, "butler": [467, 1025, 1033, 1034], "davi": [467, 717, 980, 1026], "jhun": 467, "1385": 467, "7533": [468, 1029], "2763": 468, "3964": 468, "7833": 468, "2431": 468, "3889": 468, "0195": 468, "7387": 469, "2536": 469, "4110": 469, "cov_init": [471, 1038], "graph_lasso": [471, 1030], "x_loadings_": [475, 476, 477], "y_loadings_": [475, 476, 477], "plssvd": [475, 476, 1002, 1017, 1034, 1036], "x_c": [475, 476, 478, 987], "y_c": [475, 476, 478], "y_reconstruct": [475, 476, 477], "x_scores_": [477, 1034], "y_scores_": [477, 1034], "y_transform": 478, "data_hom": [479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 1029], "sklearn_learn_data": [479, 492], "zero_bas": [480, 501, 502], "query_id": [480, 501, 502], "grok": 480, "qid": [480, 501, 502, 1023, 1028], "download_if_miss": [481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 1029], "stopword": [482, 1015], "target_column": [482, 483, 489], "494021": 485, "slice_": [486, 487, 1037], "unrestrict": 486, "2914": 487, "5748": 487, "n_retri": [489, 1036], "read_csv_kwarg": [489, 1038], "timeout": [489, 946, 1036], "ith": [489, 766, 770, 828, 849, 850, 865, 866], "1592": 491, "1212": 491, "1624": 491, "620": 491, "data_filenam": [494, 498], "target_filenam": [494, 498], "container_path": 496, "load_cont": 496, "allowed_extens": 496, "container_fold": 496, "category_1_fold": 496, "file_1": 496, "file_2": 496, "file_42": 496, "category_2_fold": 496, "file_43": 496, "file_44": 496, "image_nam": 499, "first_img_data": 500, "backup": [501, 1022], "instantan": 501, "mycach": 501, "get_data": 501, "mysvmlightfil": 501, "xn": 502, "yn": [502, 981, 982], "q1": 502, "qn": 502, "yi": [502, 982, 1026, 1030, 1031, 1034], "qi": [502, 1034], "triplet": 502, "minval": [504, 506], "maxval": [504, 506], "seventh": [504, 992], "274": 504, "return_cent": [505, 1033], "basri": 506, "gerstein": 506, "flip_i": 508, "interdepend": 508, "polytop": 508, "guyon": [508, 586, 587, 980], "madelon": 508, "1991": [509, 510, 511], "12000": 513, "effective_rank": [514, 517], "tail_strength": [514, 517], "bell": [514, 1030, 1032, 1034, 1035], "fat": [514, 517], "crawl": [514, 921], "return_ind": 516, "4967": 517, "1382": 517, "6476": 517, "523": 517, "2341": 517, "4694": 517, "5425": 517, "7674": [517, 1029], "4017": 517, "data_transpos": [519, 1036, 1038], "norm_diag": 520, "make_spd_matrix": 520, "celeux": 521, "el": [521, 1035, 1037, 1038], "anbari": 521, "marin": 521, "frequentist": 521, "n_dim": [522, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "marsland": 523, "vuw": 523, "nz": 523, "marslast": 523, "ch6": 523, "code_init": [524, 538], "dict_init": [524, 530, 538, 539], "callback": [524, 530, 532, 538, 539, 841, 946, 1001, 1038], "split_sign": [524, 530, 535], "transform_max_it": [524, 530, 531, 535, 1032], "_fro": [524, 530, 538, 539, 639, 640, 645, 653, 654, 655, 674], "lasso_cd": [524, 530, 535, 541], "invok": [524, 530, 532, 538, 539, 560, 562, 563, 813, 889, 1034], "error_": [524, 536], "minibatchsparsepca": [524, 526, 530, 533, 535, 536, 538, 539, 1022, 1023, 1033, 1035, 1036, 1037, 1038], "sierra": [524, 530], "icml09": [524, 530], "x_hat": [524, 530], "noise_variance_init": 525, "quartimax": [525, 1034], "loglike_": 525, "barber": 525, "bishop": [525, 527, 534, 733, 787, 976, 981, 995], "get_covari": [525, 527, 534], "unmixing_matrix": 526, "whitening_": 526, "kpca": [526, 527, 528, 1016, 1017, 1022], "set_inverse_transform_request": [526, 574, 859, 872], "unsaf": 527, "singular_values_": [527, 534, 537, 1029], "var_": [527, 830, 872, 1035], "miketip": [527, 534], "mppca": [527, 534], "n_samples_seen_": [527, 861, 862, 872, 1030], "batch_size_": 527, "ross": [527, 600, 601, 996, 1036, 1037], "vision": [527, 750, 751, 972, 976, 978, 996, 1000, 1004, 1023], "141": [527, 892, 981], "toronto": [527, 637, 848], "dross": 527, "ivt": 527, "rosslimlinyang_ijcv": 527, "karhunen": 527, "loev": 527, "levi": [527, 1029], "lindenbaum": 527, "1371": 527, "1374": 527, "abstain": 527, "holub": 527, "opportun": [527, 994], "golub": [527, 830, 872], "x_spars": [527, 951, 954], "sigma2": [527, 534], "x_origin": [527, 532, 534, 536, 537, 623, 884, 885], "check_input": [527, 541, 639, 640, 645, 653, 654, 655, 674, 680, 900, 901, 902, 903, 1030], "remove_zero_eig": [528, 1024, 1031], "x_fit_": [528, 636], "eigenvalues_": [528, 1035], "eigenvectors_": [528, 1035], "dual_coef_": [528, 636, 894, 895, 896, 897, 898, 995, 1026], "x_transformed_fit_": 528, "gamma_": [528, 1038], "nathan": [528, 1030, 1034, 1037], "gunnar": [528, 929], "tropp": [528, 534], "288": [528, 534], "vladimir": [528, 929, 976, 1032, 1036], "rokhlin": [528, 534, 929], "tygert": [528, 534, 929], "learning_decai": 529, "evaluate_everi": 529, "perp_tol": 529, "mean_change_tol": 529, "max_doc_update_it": 529, "kappa": [529, 709], "tau_0": 529, "pseudocount": [529, 1030], "exp_dirichlet_component_": 529, "n_batch_iter_": 529, "bound_": 529, "doc_topic_prior_": 529, "topic_word_prior_": 529, "franci": [529, 651, 976, 1028], "onlineldavb": 529, "chong": 529, "00360392": 529, "25499205": 529, "0036211": 529, "64236448": 529, "09541846": 529, "15297572": 529, "00362644": 529, "44412786": 529, "39568399": 529, "003586": 529, "vb": 529, "sub_sampl": 529, "doc_topic_distr": [529, 1029], "fresh_restart": 531, "fresh_restarts_max_it": 531, "_w": [531, 533, 540], "_ratio": [531, 533, 540], "_h": [531, 533, 540], "fresh": [531, 1001, 1032], "reconstruction_err_": [531, 533], "andrzej": [531, 533, 540], "anh": [531, 533, 540], "ieic": [531, 533, 540], "708": [531, 533, 540, 742], "721": [531, 533, 540], "waspa": 531, "ridge_alpha": [532, 536, 1029], "500x500": 534, "lu": [534, 537, 928, 929, 1028, 1029, 1030, 1031, 1038], "n_samples_": 534, "royal": [534, 620, 868, 880, 994], "methodologi": [534, 865, 970, 980, 1004], "9924": 534, "30061": 534, "54980": 534, "00755": 534, "99244": 534, "ascontiguousarrai": 534, "sparse_encod": [535, 643, 644, 645, 646, 647, 648, 649, 656, 657, 658, 675, 676, 677, 678, 679, 1022, 1029, 1030, 1032, 1036], "u_init": 536, "v_init": 536, "9666": 536, "oversampl": [537, 1022], "indeterminaci": 537, "x_dens": 537, "0157": 537, "0512": 537, "0499": 537, "0479": 537, "0453": 537, "2102": 537, "2410": 537, "5981": 537, "5420": 537, "4486": 537, "3288": 537, "method_max_it": [538, 539, 1032], "dict_learning_onlin": [538, 1023, 1032, 1035, 1036], "return_cod": 539, "iter_offset": [539, 1036], "return_inner_stat": [539, 1036], "inner_stat": [539, 1036], "update_h": 540, "_n_compon": 540, "hal": [540, 651, 750, 751, 978], "copy_cov": 541, "orthogonal_mp": [541, 657, 658, 679, 976], "sum_k": [542, 996], "prior_k": 542, "c_k": 542, "priors_": [542, 543], "scalings_": [542, 543], "xbar_": 542, "reg_param": 543, "scaling_": 543, "colinear": 543, "rotations_": 543, "n_classes_": [544, 546, 548, 550, 552, 557, 603, 820, 821, 900, 902, 1023, 1032, 1034], "class_prior_": [544, 830], "n_outputs_": [544, 545, 550, 551, 557, 558, 559, 849, 850, 900, 901, 902, 903], "constant_": 545, "dummy_regr": 545, "base_estimator_": [546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 603, 889, 1037], "983": [546, 720], "dok": [546, 547, 859, 1035], "staged_decision_funct": [546, 552, 554], "staged_scor": [546, 547], "7972": 547, "9771": 547, "estimators_samples_": [548, 549, 556, 1028, 1030, 1033], "estimators_features_": [548, 549, 556], "oob_decision_function_": [548, 550, 557], "oob_prediction_": [549, 551, 558], "8720": [549, 1030], "min_weight_fraction_leaf": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 996, 1025, 1028, 1029], "min_impurity_decreas": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903, 996, 1029], "shannon": [550, 557, 900, 902, 977, 996], "unlimit": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "n_t": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "n_t_r": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "right_impur": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "n_t_l": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "left_impur": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "balanced_subsampl": [550, 557, 1030], "subtre": [550, 551, 552, 553, 557, 558, 900, 901, 902, 903, 996], "extratreeclassifi": [550, 559, 903, 981, 1026, 1031, 1032, 1033, 1035, 1036, 1037, 1039], "unprun": [550, 551, 557, 558, 900, 901, 902, 903], "x_leav": [550, 551, 552, 553, 557, 558, 559, 900, 901, 902, 903], "n_nodes_ptr": [550, 551, 557, 558, 559], "friedman_ms": [551, 552, 553, 558, 901, 903, 996, 1038, 1039], "extratreeregressor": [551, 556, 559, 902, 986, 1031, 1032, 1033, 1035, 1036, 1037, 1039], "2727": 551, "dummyestim": [552, 553], "eras": [552, 553, 639, 645, 651, 653, 655, 659, 660, 661, 669, 670, 671, 849, 850], "oob_scores_": [552, 553, 1038], "init_": [552, 553], "init_estim": [552, 553], "max_features_": [552, 553, 590, 900, 901, 902, 903, 1036], "_fit_stag": [552, 553], "crossentropi": 554, "deepest": [554, 555, 1033], "no_interact": [554, 555, 1037], "do_early_stopping_": [554, 555], "n_trees_per_iteration_": [554, 555], "validation_score_": [554, 555], "is_categorical_": [554, 555], "n_trees_per_iter": 554, "max_samples_": 556, "fei": [556, 986], "ting": [556, 986, 1030, 1031], "ming": [556, 986, 1026, 1030, 1031, 1032, 1036], "zhou": [556, 632, 888, 986, 1030, 1038], "zhi": [556, 986], "hua": [556, 986], "icdm": [556, 986], "eighth": [556, 986], "tkdd": 556, "n_left": 556, "32987858": 558, "n_out": 559, "one_hot_encoder_": 559, "moosmann": 559, "trigg": 559, "juri": 559, "random_tre": 559, "x_sparse_embed": 559, "randomtreesembedding_": 559, "final_estimator_": [560, 561], "named_estimators_": [560, 561, 562, 563, 1030, 1032], "named_estim": [560, 561, 562, 563], "parameter_nam": [560, 561, 562, 563], "new_valu": [560, 561, 562, 563], "linearsvr": [561, 898, 995, 1026, 1028, 1033, 1038], "flatten_transform": [562, 1029], "le_": 562, "eclf1": 562, "array_equ": [562, 1029], "eclf2": 562, "eclf3": 562, "maj": 562, "probabilities_or_label": 562, "n_regressor": 563, "r1": 563, "r3": 563, "er": 563, "with_traceback": [564, 565, 566, 567, 568, 569, 570, 571], "__traceback__": [564, 565, 566, 567, 568, 569, 570, 571], "current_sklearn_vers": 569, "repr": [570, 1033, 1034, 1036], "linter": 572, "flake8": 572, "spam": [574, 702, 733, 827, 980, 982, 1004], "feature_names_": 574, "xa": 574, "dict_typ": 574, "conform": [574, 621, 820, 821, 980, 1000, 1001, 1029, 1035], "1048576": [575, 582], "non_neg": [575, 1029], "eleph": 575, "bird": [575, 711, 746, 980], "patch_height": [576, 577, 580], "patch_width": [576, 577, 580], "img_height": 576, "img_width": 576, "pe": 576, "pe_tran": 576, "263758": 576, "image_height": [576, 577, 580], "image_width": [576, 577, 580], "n_channel": [576, 577, 580], "n_patch": [576, 577, 580], "272214": 577, "215": 577, "244": 577, "n_z": 578, "return_a": [578, 579, 946, 1025], "_coo": [578, 579], "image_s": 580, "strip_acc": [581, 582, 584], "nfkd": [581, 582, 584, 1032], "unicodedata": [581, 582, 584], "regexp": [581, 582, 584], "min_n": [581, 582, 584, 1022], "max_n": [581, 582, 584, 1022], "fixed_vocabulary_": [581, 584], "stop_words_": [581, 584], "delattr": [581, 584, 1034], "vectorizer2": 581, "raw_docu": [581, 584], "get_stop_word": [581, 582, 584], "x_inv": [581, 584], "con": 582, "yates2011": 583, "baeza": [583, 722, 1025], "yate": [583, 722], "ribeiro": [583, 722, 1035], "neto": [583, 722], "addison": [583, 722], "weslei": [583, 722], "mrs2008": 583, "tfid": 583, "22314355": 583, "51082562": 583, "91629073": 583, "_check_stop_list": 584, "pvalu": [585, 588, 589, 591, 592, 593, 817], "k_best": [585, 889, 993], "fdr": 585, "fwe": 585, "iff": [585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 863], "retent": [585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "n_selected_featur": [585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "n_original_featur": [585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "attrgett": [586, 590], "barnhil": [586, 587], "vapnik": [586, 587], "389": [586, 587, 1015], "422": [586, 587, 718, 748, 980], "n_subsets_of_featur": 587, "narrai": 587, "benjamini": [588, 1028, 1029], "hochberg": [588, 1028, 1029], "false_discovery_r": 588, "norm_ord": [590, 1029], "threshold_": [590, 1029], "3252302": 590, "83462377": 590, "49750423": 590, "55245": 590, "half_cal": 590, "half_selector": 590, "unspecifi": [592, 593, 791, 977], "_get_support_mask": 594, "n_features_to_select_": 595, "variances_": 596, "weed": 597, "p_valu": [597, 598, 599], "f_statist": [598, 599], "force_finit": [599, 602, 720, 777, 980, 1036], "pearson": [599, 602, 1035], "discrete_featur": [600, 601], "essenc": [600, 601, 735, 977, 980], "kraskov": [600, 601], "stogbauer": [600, 601], "grassberg": [600, 601], "phy": [600, 601], "kozachenko": [600, 601], "leonenko": [600, 601], "probl": [600, 601], "peredachi": [600, 601], "correlation_coeffici": 602, "fmin_l_bfgs_b": [603, 604], "max_iter_predict": 603, "copy_x_train": [603, 604], "one_vs_rest": [603, 981], "compoundkernel": [603, 1036], "obj_func": [603, 604], "initial_theta": [603, 604], "theta_opt": [603, 604], "func_min": [603, 604], "_posterior_mod": 603, "log_marginal_likelihood_value_": [603, 604], "9866": [603, 612, 615], "83548752": 603, "03228706": 603, "13222543": 603, "79064206": 603, "06525643": 603, "14410151": 603, "clone_kernel": [603, 604, 1032], "n_kernel_param": [603, 604], "log_likelihood_gradi": [603, 604], "x_train_": 604, "y_train_": 604, "3680": [604, 607, 618], "592": [604, 607, 618, 987], "y_cov": 604, "n_samples_x": [604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773], "requires_vector_input": [605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "51292546": 605, "09861229": [605, 990], "n_samples_i": [605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773], "n_kernel": 605, "k_gradient": [605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618], "k_diag": [605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618], "hyperparameter_constant_valu": 606, "3696": 606, "hyperparameter_sigma_0": 607, "edward": [607, 612, 615, 1025, 1030, 1031, 1032, 1033, 1037], "hyperparameter_length_scal": [608, 612, 615, 616], "hyperparameter_period": 608, "0144": 608, "457": 608, "3894": 608, "3467": 608, "559": 609, "namedtupl": [610, 938, 1038], "maxsiz": 610, "mat\u00e9rn": 612, "appr": 612, "8513": 612, "0368": 612, "1117": 612, "8086": [612, 1029], "0693": 612, "1220": 612, "gamma_bound": 613, "pairwise_kernels_kwarg": 613, "additive_chi2": [613, 631, 757, 766], "pairwise_kernel_funct": [613, 636, 766], "hyperparameter_gamma": 613, "9733": [613, 616], "8880": 613, "05663": 613, "05532": 613, "8676": [613, 1029], "07073": 613, "06165": 613, "__mul__": 614, "8354": [615, 1029], "03228": 615, "1322": 615, "7906": [615, 642], "0652": 615, "1441": 615, "hyperparameter_alpha": 616, "8881": 616, "0566": 616, "05518": 616, "8678": 616, "0707": 616, "0614": 616, "hyperparameter_noise_level": 618, "initial_strategi": 620, "imputation_ord": [620, 1032], "skip_complet": 620, "min_valu": [620, 1033, 1034], "max_valu": [620, 1033, 1034], "keep_empty_featur": [620, 621, 623, 970, 1037], "nullabl": [620, 621, 622, 623, 1033, 1037], "na": [620, 621, 622, 623, 761, 770, 910, 912, 913, 1032, 1033, 1036, 1037, 1038], "known_val": 620, "Nearness": 620, "arab": 620, "broadcast": 620, "missingind": [620, 621, 623, 970, 1030, 1031, 1032, 1036, 1038], "initial_imputer_": 620, "imputation_sequence_": 620, "feat_idx": 620, "neighbor_feat_idx": 620, "n_features_with_missing_": 620, "indicator_": [620, 621, 623], "knp": 620, "stef": [620, 970], "buuren": [620, 970], "karin": [620, 970], "groothui": [620, 970], "oudshoorn": [620, 970], "buck": 620, "1960": [620, 709], "306": 620, "imp_mean": [620, 623], "9584": [620, 1029], "nan_euclidean": [621, 754, 770], "_pairwise_cal": 621, "kwd": [621, 763, 766, 770, 773, 782, 783], "olga": [621, 970], "troyanskaya": [621, 970], "cantor": [621, 970], "gavin": [621, 970], "sherlock": [621, 970], "pat": [621, 970], "botstein": [621, 970], "russ": [621, 970], "altman": [621, 970], "bioinformat": [621, 970], "n_output_featur": 621, "error_on_new": 622, "features_": [622, 970], "n_missing_featur": 622, "x2_tr": 622, "n_features_with_miss": 622, "statistics_": 623, "n_features_missing_ind": 623, "x_imput": 623, "n_features_out": 623, "quadcontourset": 624, "quadmesh": 624, "feature_1": [624, 905], "feature_2": 624, "nicer": 624, "pd_result": 625, "target_idx": 625, "decil": [625, 1033], "is_categor": 625, "pdp": [625, 987, 1036], "nonexist": 625, "deciles_vlines_": 625, "vlines_": 625, "deciles_hlines_": 625, "bars_": 625, "heatmaps_": 625, "pdp_lim": 625, "ice_lines_kw": 625, "pd_line_kw": 625, "contour_kw": 625, "disp1": 625, "disp2": 625, "pdp_line_kw": 625, "bar_kw": 625, "heatmap_kw": 625, "seq": 626, "n_values_feature_j": 626, "bre": [627, 996], "4666": 627, "2211": 627, "x_min_": 628, "x_max_": 628, "n_threshold": [628, 719, 774, 781], "stepwis": [628, 647, 648, 649, 675, 676, 976], "increasing_": 628, "isotonic_regress": [628, 1035], "secondari": [628, 1026], "leeuw": 628, "1977": 628, "nilotp": [628, 630], "chakravarti": [628, 630], "308": 628, "pava": 628, "hornik": 628, "mair": 628, "kruskal": [628, 683, 687, 977], "psychometrica": 628, "iso_reg": 628, "8628": 628, "7256": 628, "isotonicregression0": 628, "increasing_bool": 629, "fisher_transform": 629, "sample_step": 631, "sample_interv": 631, "sample_interval_": [631, 1038], "skewedchi2sampl": [631, 632, 633, 634, 972, 1029, 1036, 1037], "chi2_kernel": [631, 635, 750, 757, 978, 1023], "additive_chi2_kernel": [631, 751, 757, 972], "vedaldi": [631, 972], "zisserman": [631, 972, 980], "chi2sampl": 631, "9499": 631, "component_indices_": [632, 1035], "normalization_": 632, "additivechi2sampl": [632, 633, 634, 635, 750, 751, 972, 1036, 1038], "kernel_metr": [632, 633, 634, 635], "seeger": 632, "mahdavi": 632, "jin": [632, 1033, 1034], "data_transform": 632, "9987": 632, "fft": 633, "indexhash": 633, "bithash": 633, "indexhash_": 633, "bithash_": 633, "kitchen": [634, 972], "sink": [634, 972], "random_offset_": [634, 635], "random_weights_": [634, 635], "rahimi": [634, 972], "benjamin": [634, 1024, 1025, 1033, 1034, 1035, 1036, 1037, 1038], "recht": [634, 972], "berkelei": [634, 900, 901], "brecht": 634, "rah": 634, "rbf_featur": [634, 972], "skewed": [635, 1029], "secant": 635, "hyperbol": [635, 849, 850, 978, 984], "fuxin": 635, "catalin": 635, "ionescu": [635, 972, 1032], "cristian": 635, "sminchisescu": [635, 972], "chi2_featur": 635, "2c": [636, 645, 665, 666, 667, 668, 680, 972], "alpha_1": [637, 638, 976], "alpha_2": [637, 638, 976], "lambda_1": [637, 638, 976], "lambda_2": [637, 638, 976], "threshold_lambda": 637, "x_offset_": [637, 638, 1034], "x_scale_": [637, 638, 1034], "mackai": [637, 638, 976], "ashra": 637, "salakhutdinov": [637, 841, 983], "utstat": 637, "rsalakhu": 637, "sta4273": 637, "lecture2": 637, "computed_scor": 638, "appendix": [638, 669, 976, 990], "wipf": [638, 976], "nagarajan": [638, 976], "2_2": [639, 640, 645, 646, 647, 648, 649, 653, 654, 655, 656, 665, 674, 675, 676, 677], "glmnet": [639, 640, 1022], "sparse_coef_": [639, 645, 653, 655, 1022], "dual_gap_": [639, 640, 645, 646, 653, 654, 655, 656, 1035], "max_j": [639, 645], "w_j": [639, 645, 980, 994], "ext": 639, "83816048": 639, "55968825": 639, "451": 639, "coef_init": [639, 640, 645, 646, 653, 654, 655, 656, 659, 661, 669, 670, 671, 674, 677], "mono": [639, 640, 645, 646, 653, 654, 655, 656, 674, 677], "_21": [639, 640, 645, 646, 653, 654, 655, 656, 674, 677], "sum_j": [639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 976, 980, 985], "alpha_min": [639, 640, 643, 645, 646, 647, 649, 653, 654, 655, 656, 674, 675, 676, 677], "alpha_max": [639, 640, 645, 646, 653, 654, 655, 656, 674, 677], "ndim": [639, 640, 645, 646, 653, 654, 655, 656, 674, 677, 912, 913], "multitaskelasticnet": [639, 640, 645, 654, 655, 656, 674, 976, 1022, 1029, 1030, 1033, 1035], "multitaskelasticnetcv": [639, 640, 645, 653, 655, 656, 674, 976, 1025, 1032, 1033, 1035], "l1_ratio_": [640, 652, 654], "n_l1_ratio": [640, 652, 654, 1025], "unpen": [641, 662, 673, 976], "raphson": [641, 662, 673], "g_j": [641, 662, 673], "896": 641, "483": 641, "795": 641, "pg_i": 642, "scale_": [642, 861, 862, 870, 872, 882, 990, 1027], "outliers_": 642, "elvezio": [642, 976], "ronchetti": [642, 976], "concomit": [642, 976], "owen": [642, 1031, 1032], "statweb": [642, 675, 676], "hhu": [642, 1031], "284": 642, "806": 642, "7200": 642, "4923": 642, "1698": 642, "0106": 642, "9221": 642, "0226": 642, "fit_path": [643, 647, 648, 649, 675, 676], "coef_path_": [643, 644, 647, 648, 976], "active_": [643, 644, 647, 648], "larscv": [643, 658, 675, 676, 1029, 1035], "1111": [643, 649], "max_n_alpha": [644, 648], "n_cv_alpha": [644, 648], "cv_alpha": [644, 648], "lassolar": [644, 645, 646, 648, 649, 656, 657, 658, 675, 676, 677, 976, 1013, 1022, 1023, 1025, 1029, 1032, 1033, 1035], "9996": 644, "2961": 644, "3996": 644, "2_f": 645, "_11": 645, "4951": 646, "2_fro": [646, 655, 656, 677], "coef_path": [646, 656, 677], "46874778": [646, 656, 677], "2159048": [646, 656, 677], "4425765": [646, 656, 677], "23689075": [646, 656, 677], "coef_path_lar": [646, 656, 677], "coef_path_continu": [646, 656, 677], "interp1d": [646, 656, 677], "46915237": [646, 656, 677], "23668876": [646, 656, 677], "congruenc": [647, 648, 649, 675, 676], "fragil": 648, "3972": 648, "2222": 649, "rank_": 650, "singular_": 650, "maxent": [651, 652, 976], "primal": [651, 652, 670, 892, 893, 994, 995], "synthetic_feature_weight": [651, 652], "ciyou": 651, "byrd": 651, "jorg": [651, 1025, 1034, 1036], "noced": 651, "lui": [651, 1023, 1025, 1026, 1030], "iem": 651, "lbfgsb": 651, "schmidt": [651, 976, 1025], "le": [651, 860, 971, 976, 983, 991, 993, 1030, 1034, 1035], "roux": [651, 976, 993], "00860051": 651, "defazio": [651, 976], "lacost": [651, 976], "hsiang": [651, 1026], "fu": [651, 1026], "fang": [651, 1029, 1030], "lan": [651, 1037, 1038], "chih": [651, 1027], "jen": [651, 1030], "maxent_du": 651, "cs_": 652, "l1_ratios_": 652, "coefs_paths_": [652, 1032], "coefs_path": 652, "n_l1_ratios_": 652, "score_param": [652, 1039], "w_ij": 653, "eps_": [653, 655], "45663524": 653, "45612256": 653, "0872422": 653, "fro_2": [654, 656], "multitasklassocv": [654, 1025, 1032, 1033, 1035], "52875032": 654, "46958558": 654, "00166409": 654, "60809415": 655, "94592424": 655, "41888636": 655, "87382323": 655, "9994": 656, "5713": 656, "153": 656, "7971": 656, "9015": [656, 1030], "n_nonzero_coefs_": [657, 658], "orthogonal_mp_gram": [657, 658, 678, 1036], "mallat": [657, 678, 679, 976], "3397": [657, 678, 679], "3415": [657, 678, 679], "papier": [657, 678, 679], "mallatpursuit93": [657, 678, 679], "rubinstein": [657, 678, 679], "zibulevski": [657, 678, 679], "elad": [657, 678, 679], "technion": [657, 678, 679, 976], "ronrubin": [657, 678, 679, 976], "ksvd": [657, 678, 679, 976], "9991": [657, 658, 1030], "3854": [657, 658], "previous_loss": [659, 660, 661, 670], "pa": [659, 660, 889, 976, 980, 993], "preset": [659, 661, 669, 984], "t_": [659, 660, 661, 669, 670, 671, 849, 850, 994], "loss_function_": [659, 661, 669, 670], "volume7": [659, 660], "crammer06a": [659, 660], "crammer": [659, 660, 727, 976, 980, 995], "dekel": [659, 660, 976], "keshat": [659, 660, 976], "shalev": [659, 660, 976, 994], "shwartz": [659, 660, 976, 994], "singer": [659, 660, 727, 976, 980, 994, 995], "26642044": 659, "45070924": 659, "67251877": 659, "64185414": 659, "84127814": 659, "intercept_init": [659, 661, 669, 671], "y_all": [659, 661, 669, 820, 821, 849], "epsilon_insensit": [660, 669, 671, 893, 976, 994], "squared_epsilon_insensit": [660, 669, 671, 893, 976, 1028], "48736655": 660, "18818427": 660, "59122734": 660, "94731329": 660, "02306214": 660, "eta0": [661, 669, 670, 671, 994], "lossfunct": [661, 669, 670, 1031], "therein": 661, "939": [661, 1010], "088": [662, 988], "676": 662, "solver_opt": 663, "ipm": 663, "linprog": [663, 976], "is_data_valid": [664, 976], "is_model_valid": [664, 976], "max_trial": [664, 976], "max_skip": 664, "stop_n_inli": [664, 976], "stop_scor": [664, 976], "stop_prob": 664, "mad": [664, 1028], "costlier": 664, "n_trials_": 664, "n_skips_no_inliers_": 664, "n_skips_invalid_data_": 664, "n_skips_invalid_model_": 664, "sri": [664, 976, 1029, 1030], "bmva": 664, "bmvc": [664, 976], "paper355": 664, "9885": 664, "9417": 664, "15000": [665, 680, 849, 850], "btol": [665, 667], "gcv_mode": [666, 1024], "store_cv_valu": [666, 668, 1030, 1033], "alpha_per_target": [666, 1034], "cv_values_": [666, 668], "ridgeclassifiercv": [666, 667, 780, 980, 981, 1030, 1032, 1033, 1035, 1036], "5166": 666, "gcv": [666, 668], "9595": 667, "9630": 668, "power_t": [669, 670, 671, 849, 850, 994], "best_loss": [669, 671], "leon": [669, 670, 671, 1022], "bottou": [669, 670, 671, 984, 994], "pow": [669, 670, 671, 849, 850], "dl": 669, "775047": 669, "775151": 669, "justif": 669, "volume2": 669, "zhang02c": 669, "offset_init": 670, "unshifft": 670, "n_subsampl": [672, 918], "breakdown_": 672, "n_subpopulation_": 672, "xin": [672, 976, 1030], "dang": [672, 976], "hanxiang": [672, 976], "peng": [672, 976, 1028, 1029, 1030, 1032, 1034], "xueqin": [672, 976], "hepe": [672, 976], "olemiss": 672, "xdang": 672, "mtse": 672, "9884": 672, "5871": 672, "coeff": 673, "839": 673, "599": 673, "copy_gram": [675, 676, 679], "return_path": [675, 676, 678, 679], "lars_path_gram": [675, 976, 1031], "tib": [675, 676], "xgamma": 678, "norms_squar": 679, "copy_xi": 679, "return_intercept": [680, 1031], "linearoper": 680, "_preprocess_data": 680, "path_method": [681, 977], "neighbors_algorithm": [681, 682], "arnoldi": [681, 682, 686], "fw": 681, "warshal": [681, 977], "kernel_pca_": 681, "nbrs_": [681, 682], "dist_matrix_": 681, "tenenbaum": [681, 977], "reconstruction_error": 681, "frobenius_norm": 681, "d_fit": 681, "x_fit": 681, "n_queri": [681, 834, 835, 836, 838, 840, 842, 843, 844], "hessian_tol": [682, 686], "modified_tol": [682, 686], "reconstruction_error_": 682, "rowei": [682, 686, 841, 977, 983], "saul": [682, 686, 977, 1029, 1030, 1032], "2323": [682, 686, 977], "donoho": [682, 686, 977], "grime": [682, 686, 977], "natl": [682, 686, 977], "acad": [682, 686, 977], "5591": [682, 686, 977], "mlle": [682, 686, 977], "zha": [682, 686, 977], "shanghai": [682, 686, 977], "univ": [682, 686, 977], "406": [682, 686, 977], "immers": [683, 687], "nonmetr": [683, 687], "smacof": [683, 1037], "stress": [683, 687, 977, 1037], "stress_": 683, "dispar": [683, 687, 977], "dissimilarity_matrix_": 683, "psychometrika": [683, 687, 977], "1964": [683, 687, 868, 880, 977], "borg": [683, 687, 977], "groenen": [683, 687, 977], "affinity_matrix": 684, "n_neighbors_": [684, 838], "early_exagger": 685, "min_grad_norm": [685, 1028], "der": [685, 689, 977, 1025, 1026, 1030], "maaten": [685, 689, 977], "bhtsne": [685, 1029], "opentsn": 685, "abort": 685, "pdist": [685, 770, 773], "pairwise_distance_funct": [685, 689, 770, 773, 983], "barn": [685, 1027, 1029, 1032], "hut": [685, 1027, 1029, 1032], "nlogn": 685, "kl_divergence_": [685, 1029], "learning_rate_": [685, 850], "hinton": [685, 841, 848, 849, 850, 977, 983, 984, 985], "2579": 685, "2605": 685, "lvdmaaten": [685, 1029], "oct": [685, 761, 977, 983], "3221": [685, 977], "3245": [685, 977], "jmlr_2014": 685, "belkina": [685, 977], "ciccolella": [685, 977], "anno": [685, 977], "halpert": [685, 977], "spidlen": [685, 977], "snyder": [685, 977], "cappion": [685, 977], "kobak": [685, 1035], "beren": 685, "transcriptom": 685, "guttman": 687, "norm_laplacian": 688, "drop_first": 688, "nk": 689, "2n": [689, 972, 984], "3k": 689, "cosine_dist": [689, 754, 983, 1028], "jarkko": 689, "venna": 689, "samuel": [689, 1004, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039], "kaski": 689, "icann": 689, "verlag": 689, "491": 689, "twelfth": 689, "pmlr": 689, "384": [689, 893], "391": 689, "im_": 690, "axesimag": 690, "text_": 690, "include_valu": 690, "values_format": [690, 1032], "im_kw": [690, 1036], "text_kw": [690, 1037], "get_metr": 692, "euclideandist": 692, "manhattandist": 692, "chebyshevdist": 692, "minkowskidist": [692, 1035], "seuclideandist": 692, "mahalanobisdist": 692, "haversinedist": 692, "arcsin": [692, 756], "hammingdist": 692, "n_unequ": 692, "n_tot": 692, "canberradist": 692, "braycurtisdist": 692, "abbrevi": 692, "ntt": 692, "ntf": 692, "nft": 692, "nff": 692, "nneq": 692, "jaccarddist": 692, "matchingdist": 692, "dicedist": 692, "kulsinskidist": [692, 1038], "rogerstanimotodist": 692, "russellraodist": 692, "sokalmichenerdist": 692, "sokalsneathdist": 692, "pyfunc": [692, 983], "pyfuncdist": 692, "metric_obj": 692, "chance_level_": [693, 695, 1038], "drop_intermedi": [693, 695, 774, 781, 1038], "errors_lines_": 694, "with_error": 694, "scatter_": 694, "balanced_accuracy_scor": [696, 779, 980, 1030], "imperfectli": [696, 726, 980], "label_tru": [697, 710, 729, 747, 749, 785], "upperlimit": 697, "nat": [697, 747, 749, 1036], "expected_ri": 698, "discord": 698, "hubert1985": 698, "1007": 698, "2fbf01908075": 698, "steinley2004": 698, "wk": 698, "rand_index": 698, "adjusted_rand_index": 698, "chacon": 698, "chac\u00f3n": 698, "rastrojo": 698, "balanced_accuraci": [701, 980, 1030], "brodersen": 701, "ong": 701, "stephan": [701, 1025, 1031, 1032, 1034], "buhmann": 701, "20th": 701, "3121": 701, "kelleh": [701, 980], "aoif": [701, 980], "arci": [701, 980], "y_true_categor": [702, 980], "calinski": [703, 1028], "harabasz": 703, "allow_non": 704, "thrown": [704, 1031, 1032], "tn": [705, 711, 980], "negative_class": 705, "zebra": 705, "output_dict": [706, 1030, 1034], "zero_divis": [706, 721, 722, 730, 775, 776, 779, 1032, 1034, 1038], "precision_recall_fscore_support": [706, 721, 722, 776, 779, 980, 1026, 1030, 1032, 1038], "multilabel_confusion_matrix": [706, 721, 722, 730, 776, 779, 980, 1031], "conting": [707, 708, 723, 747, 1028], "n_classes_tru": [707, 747], "n_classes_pr": [707, 747], "cohen": [709, 1030], "p_o": 709, "p_e": 709, "artstein": 709, "poesio": 709, "linguist": [709, 889, 993], "555": 709, "596": 709, "label_pr": [710, 728, 729, 747, 749, 785], "ant": [711, 746, 980], "a_row": 712, "a_column": 712, "b_row": 712, "b_column": 712, "tsoumaka": [713, 726, 732, 980], "kataki": [713, 726, 732, 980], "vlahava": [713, 732, 980], "handbook": [713, 732, 980], "667": [713, 732, 980], "685": [713, 732, 980], "raw_valu": [714, 715, 720, 737, 738, 740, 742, 743, 745, 777, 980, 1030, 1033], "wainwright": [714, 715, 716], "su": [714, 715, 716], "statlearnspars": [714, 715, 716], "764": [714, 980], "8125": 714, "57142857": 714, "d2": 715, "d2_absolute_error_scor": [715, 980, 1036], "koenker": [715, 976], "roger": [715, 1029, 1030, 1034], "jos\u00e9": [715, 1025, 1035], "772": 715, "487": 716, "630": 716, "bouldin": 717, "farther": 717, "log_bas": 718, "ignore_ti": [718, 748], "ndcg": [718, 748, 980, 1029], "ndcg_score": [718, 980, 1029, 1032, 1037, 1038], "sharper": 718, "discounted_cumulative_gain": 718, "dcg": [718, 748, 980, 1029], "jarvelin": [718, 748, 980], "kekalainen": [718, 748, 980], "colt": [718, 748, 980], "mcsherri": [718, 748, 980], "najork": [718, 748, 980], "european": [718, 748, 980], "421": [718, 748, 980], "groud": [718, 748], "true_relev": [718, 748], "imperfect": [720, 777, 980, 1024], "variance_weight": [720, 777, 980], "n_unique_label": [721, 722, 730, 775, 776, 779, 944], "fbeta_scor": [721, 734, 775, 980, 1024, 1025, 1026, 1027, 1032, 1038], "undefinedmetricwarn": [721, 722, 775, 776, 779, 1031], "y_true_empti": 721, "y_pred_empti": [721, 722], "66666667": [721, 774, 842, 990], "fowlk": [723, 1028], "mallow": [723, 1028], "get_scorer_nam": [724, 980, 1036], "forgiv": 726, "upperbound": 726, "grigorio": 726, "ioanni": 726, "wareh": 726, "septemb": [726, 980, 1022, 1025, 1028, 1030, 1035], "pred_decis": [727, 980, 1035], "disagre": [727, 987], "kobi": 727, "yoram": 727, "265": [727, 827, 831, 982], "AND": 727, "denero": 727, "gluster": 728, "v_measur": [728, 785], "6666": [730, 980, 1028], "5833": [730, 980], "lrap": [731, 980], "21616": 733, "needs_proba": [734, 1031], "needs_threshold": [734, 980], "ftwo_scor": [734, 980], "mcc": [735, 980, 1036], "baldi": 735, "brunak": 735, "chauvin": 735, "andersen": [735, 1036], "nielsen": [735, 1030], "gorodkin": 735, "jurman": 735, "riccadonna": 735, "furlanello": 735, "cen": 735, "mape": [738, 980], "3273": 738, "5515": 738, "6198": 738, "112589990684262": 738, "0568": 739, "4260": [741, 744], "612": 742, "822": 742, "41666667": 742, "825": 742, "msle": [743, 980], "rmsle": 743, "00462428": 743, "08377444": 743, "samplewis": [746, 980], "mcm": [746, 980], "mcm_": 746, "multi_confus": 746, "normalized_discounted_cumulative_gain": 748, "dcg_score": [748, 980, 1029, 1032], "kernel_matrix": [750, 751, 758, 768], "marszalek": [750, 751, 978], "lazebnik": [750, 751, 978], "schmid": [750, 751, 978], "ouvert": [750, 751, 978], "00171412": [750, 751, 978], "cosine_similar": [752, 757, 978, 1027], "dense_output": [753, 759, 885, 930, 1030], "linear_kernel": [753, 757, 978, 1030], "haversine_dist": [754, 1031], "y_norm_squar": 755, "x_norm_squar": [755, 1027], "paired_dist": [755, 761, 770, 1026], "41421356": [755, 761, 983], "lon": 756, "ezeiza": 756, "airport": 756, "bueno": 756, "argentina": 756, "gaull": 756, "bsa": 756, "83333": 756, "5166646": 756, "0083899664": 756, "53844117956": 756, "bsas_in_radian": 756, "paris_in_radian": 756, "6371000": 756, "kilomet": 756, "11099": 756, "54035582": 756, "polynomial_kernel": [757, 978], "rbf_kernel": [757, 978, 1026], "laplacian_kernel": [757, 978, 1027], "sigmoid_kernel": [757, 978], "sum_over_featur": [760, 1022, 1037], "componentwis": 760, "sq": 761, "dixon": [761, 1032, 1033], "cybernet": 761, "ieeexplor": 761, "4310090": 761, "filter_param": 766, "jth": [766, 770], "tanh": [769, 849, 850, 978, 995], "force_all_finit": [770, 910, 912, 913, 1033, 1036], "distance_metr": [770, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846], "metric_kwarg": [771, 772], "reduce_func": [773, 1033], "d_chunk": 773, "sought": 773, "neigh": [773, 834, 835, 836, 838, 840, 842, 843, 844], "gen": 773, "probas_pr": 774, "warn_for": 775, "shantanu": 775, "godbol": 775, "sunita": 775, "sarawagi": 775, "pig": 775, "948": [777, 980], "max_fpr": [780, 980, 1030], "provost": [780, 980], "ceder": [780, 980], "stern": [780, 980], "fawcett": [780, 781, 980], "874": [780, 781, 980], "generalis": [780, 980, 1001], "multioutputclassifi": [780, 821, 823, 825, 980, 1029, 1031, 1032, 1033, 1034, 1038], "n_samples_a": [782, 783], "favour": [782, 977, 979, 1031], "mean_prior": 787, "degrees_of_freedom_prior": 787, "verbose_interv": [787, 788], "wishart": 787, "emipr": 787, "precisions_": [787, 788], "precisions_cholesky_": [787, 788, 1036], "converged_": [787, 788], "lower_bound_": [787, 788, 1030], "weight_concentration_prior_": 787, "weight_concentration_": 787, "mean_precision_prior_": 787, "mean_precision_": 787, "mean_prior_": 787, "degrees_of_freedom_prior_": 787, "degrees_of_freedom_": 787, "covariance_prior_": 787, "hagai": 787, "attia": 787, "bgm": 787, "n_dimens": [787, 788], "log_prob": [787, 788], "weights_init": 788, "precisions_init": [788, 1036, 1039], "gm": 788, "pre_dispatch": [789, 795, 803, 811, 813, 814, 815, 816, 819, 946, 1025], "error_scor": [789, 792, 793, 795, 803, 811, 814, 815, 816, 819, 969, 1026, 1030, 1034, 1037], "explos": [789, 803, 813, 814, 815], "fitfailedwarn": [789, 792, 793, 795, 803, 811, 814, 815, 816, 819], "param_kernel": [789, 803], "param_degre": 789, "split0_test_scor": [789, 803, 1028], "rank_t": 789, "split1_test_scor": [789, 803], "split0_train_scor": [789, 803, 1028], "split1_train_scor": [789, 803], "mean_train_scor": [789, 803, 1028], "std_train_scor": [789, 803, 1028], "split0_test_precis": [789, 803], "mean_train_precis": [789, 803], "best_estim": [789, 792, 793, 803], "scorer_": [789, 792, 793, 803], "n_splits_": [789, 792, 793, 803], "refit_time_": [789, 792, 793, 803, 1030], "multimetric_": [789, 792, 793, 803], "parametergrid": [789, 1024, 1030], "split2_test_scor": 789, "num_sampl": [789, 803, 1037], "stratif": [790, 791, 797, 798, 807, 808, 809, 951, 1031], "group_kfold": 790, "set_split_request": [790, 791, 796, 798, 807], "aggressive_elimin": [792, 793, 969], "r0": [792, 793], "replai": [792, 793], "n_remaining_candidates_": [792, 793], "n_candid": [792, 793, 969], "max_resources_": [792, 793], "min_resources_": [792, 793], "n_required_iterations_": [792, 793], "n_possible_iterations_": [792, 793], "exceed": [792, 793, 1028], "n_unique_tick": [795, 816], "n_tick": [795, 811, 816, 819], "neg_": [795, 811, 1028], "errorbar_": [795, 811], "errorbarcontain": [795, 811], "line2d": [795, 811], "fill_between_": [795, 811], "polycollect": [795, 811], "exploit_incremental_learn": [795, 816], "log_scal": [795, 1038], "fill_between_kw": [795, 811], "errorbar_kw": [795, 811], "predispatch": [795, 811, 816, 819], "negat": [795, 811, 980], "combinator": 799, "lpo": 799, "param_list": 801, "rounded_list": 801, "89856": 801, "923223": 801, "878964": 801, "038159": 801, "parametersampl": [803, 1024, 1030, 1034], "2652124": 804, "rskf": 805, "36851234": 805, "sizeabl": [806, 809], "sad": [807, 808], "sss": 809, "logistic_regress": 811, "n_valu": [811, 819, 1030], "checked_cv": 812, "3315057": [814, 815], "08022103": [814, 815], "03531816": [814, 815], "test_r2": 815, "test_auc": 815, "train_r2": 815, "train_auc": 815, "3635": 815, "3573": 815, "6114": 815, "28009951": 815, "3908844": 815, "22784907": 815, "train_sizes_ab": 816, "train_size_ab": 816, "cv_train_scor": 816, "cv_test_scor": 816, "permutation_scor": 817, "pairwise_indices_": 820, "outputcodeclassifi": [820, 821, 1029, 1034, 1038], "label_binarizer_": 821, "multilabel_": [821, 1027], "onevsoneclassifi": [821, 822, 1023, 1025, 1026, 1028, 1029, 1031, 1034, 1036], "code_s": [822, 981], "code_book_": 822, "bakiri": [822, 981], "pict": [822, 981], "order_": [823, 826], "regressorchain": [823, 825, 1030, 1033, 1037], "jess": [823, 981, 1035], "pfahring": [823, 981], "geoff": [823, 981], "holm": [823, 981], "eib": [823, 981], "8387": 823, "9431": 823, "4576": 823, "8878": 823, "3684": 823, "2640": 823, "0321": 823, "9935": 823, "0625": 823, "y_decis": 823, "partial_fit_param": [824, 825], "load_linnerud": [825, 1028, 1033], "force_alpha": [827, 828, 829, 831, 1037], "lidston": [827, 828, 829, 831, 982], "class_count_": [827, 828, 829, 830, 831], "class_log_prior_": [827, 828, 829, 831], "feature_count_": [827, 829, 831], "feature_log_prob_": [827, 828, 829, 831], "categoricalnb": [827, 829, 830, 831, 982, 1032, 1033, 1034, 1035, 1037], "renni": [827, 829, 982, 1030], "schuetz": [827, 831], "htmledit": [827, 831, 978], "mccallum": [827, 982], "nigam": [827, 982], "metsi": [827, 982], "androutsopoulo": [827, 982], "palioura": [827, 982], "cea": [827, 982], "predict_joint_log_proba": [827, 828, 829, 830, 831, 1037], "min_categori": [828, 1034], "category_count_": 828, "n_categories_": 828, "mirror": [829, 969], "mahout": 829, "weka": 829, "feature_all_": 829, "shih": [829, 982], "teevan": [829, 982], "karger": [829, 982], "616": [829, 982, 990], "623": [829, 982], "jrenni": 829, "icml03": 829, "var_smooth": [830, 1030], "stan": 830, "levequ": [830, 872], "cstr": 830, "epsilon_": 830, "theta_": [830, 982], "clf_pf": 830, "distancemetric64": [832, 833], "valid_metr": [832, 833, 983, 1038], "19662693": [832, 833], "29473397": [832, 833], "tree_copi": [832, 833], "query_radiu": [832, 833], "count_onli": [832, 833], "kernel_dens": [832, 833], "94114649": [832, 833], "83281226": [832, 833], "2071716": [832, 833], "two_point_correl": [832, 833], "580": [832, 833], "get_arrai": [832, 833], "get_n_cal": [832, 833], "n_call": [832, 833], "get_tree_stat": [832, 833], "tree_stat": [832, 833], "breadth_first": [832, 833, 837], "return_log": [832, 833], "k_true": [832, 833], "k_ret": [832, 833], "breadth": [832, 833, 837, 1004, 1024], "dualtre": [832, 833], "sort_result": [832, 833, 840, 842, 843, 844, 1034], "radii": [832, 833], "reset_n_cal": [832, 833], "effective_metric_": [834, 835, 836, 838, 840, 842, 843, 844, 983], "callbl": 834, "effective_metric_params_": [834, 835, 836, 838, 840, 842, 843, 844], "outputs_2d_": [834, 842, 1032], "nearest_neighbor_algorithm": [834, 842, 843], "n_index": [834, 835, 836, 838, 840, 842, 843], "neigh_dist": [834, 835, 836, 838, 840, 842, 843, 844], "neigh_ind": [834, 835, 836, 838, 840, 842, 843, 844], "nearest_neighbors_algorithm": [835, 840], "nearer": [836, 844, 983], "x_dist_graph": 836, "silverman": [837, 1037], "binarytre": [837, 1026, 1030, 1034], "bandwidth_": 837, "log_dens": 837, "52955942": 837, "51462041": 837, "60244657": 837, "logprob": 837, "negative_outlier_factor": 838, "9821": 838, "0370": 838, "3697": 838, "shifted_opposite_lof_scor": 838, "opposite_lof_scor": 838, "wminkowski": [839, 1034, 1036], "narasimhan": 839, "chu": [839, 1038], "shrunken": [839, 1022], "6567": 839, "6572": 839, "nbr": [840, 983], "neighborsclassifi": [840, 842, 843, 844, 1022], "n_features_a": 841, "n_features_b": 841, "goldberg": [841, 983], "neighbourhood": [841, 983], "513": [841, 983], "ncanip": 841, "neighbourhood_components_analysi": 841, "961904": 841, "outlier_label": [842, 1032], "outlier_label_": 842, "33333333": [842, 990], "x_cluster": 844, "warn_when_not_sort": 847, "efficiencywarn": [847, 1037], "sml": [848, 985], "pcd": [848, 985], "sweep": 848, "gibb": [848, 985, 1000], "intercept_hidden_": 848, "intercept_visible_": 848, "h_samples_": 848, "osindero": [848, 985], "teh": [848, 985], "1527": 848, "1554": 848, "absp": 848, "fastnc": 848, "tieleman": [848, 985], "v_new": 848, "pseudo_likelihood": 848, "relu": [849, 850], "beta_1": [849, 850], "beta_2": [849, 850], "max_fun": [849, 850, 1032], "n_layer": [849, 850], "neuron": [849, 850, 978, 984], "tan": [849, 850, 984, 1029], "rectifi": [849, 850], "kingma": [849, 850, 984], "diederik": [849, 850, 984, 1037], "jimmi": [849, 850, 984, 1028, 1030], "effective_learning_r": [849, 850], "best_loss_": [849, 850, 1037], "best_validation_score_": [849, 850, 1037], "validation_scores_": [849, 850, 1037], "intercepts_": [849, 850, 984], "n_layers_": [849, 850], "out_activation_": [849, 850], "geoffrei": [849, 850, 984, 1033, 1034, 1035, 1036, 1038], "connectionist": [849, 850], "glorot": [849, 850], "xavier": [849, 850, 1030, 1031, 1032, 1034, 1035], "yoshua": [849, 850, 993], "feedforward": [849, 850], "kaim": [849, 850], "delv": [849, 850], "imagenet": [849, 850], "961": 849, "log_y_prob": 849, "named_transform": [851, 1037], "transform_list": 851, "s__p": 852, "n_transformed_featur": 852, "y_log_proba": 852, "analyst": 855, "x_tr": [855, 861, 864, 865, 866, 870, 872, 875, 877, 878, 882, 883], "accept_spars": [856, 912, 913, 1029], "inv_kw_arg": 856, "pickleabl": [856, 1028], "6931": 856, "3862": 856, "n_bins_": 857, "int_": 857, "regener": 857, "xinv": 857, "tild": [858, 988, 990], "k_fit_rows_": 858, "k_fit_all_": 858, "1299": [858, 990], "1319": [858, 990], "n_samples1": 858, "n_samples2": 858, "k_new": 858, "neg_label": [859, 876], "y_type_": 859, "sparse_input_": 859, "tokyo": [860, 991], "amsterdam": [860, 991], "max_abs_": 861, "x_std": [862, 878, 990], "data_min_": [862, 1027], "data_max_": [862, 1027], "data_range_": [862, 1027], "unwieldi": 863, "fi": 863, "comedi": 863, "y_indic": 863, "yt": 863, "ands": 863, "feature_name_combin": [865, 1038], "categories_": [865, 866, 873, 990, 1030, 1037], "unregular": [865, 888, 1013, 1031], "intact": [865, 1015], "infrequ": [865, 866, 873, 980, 1022, 1036, 1037, 1038], "infrequent_if_exist": [865, 990], "x_6": 865, "x_7": 865, "drop_idx_": [865, 1033, 1037], "drop_idx": 865, "gender_femal": 865, "gender_mal": 865, "group_1": 865, "group_2": 865, "group_3": 865, "drop_enc": [865, 990], "drop_binary_enc": 865, "custom_combin": 865, "custom_fnames_enc": 865, "x0_str_femal": 865, "x0_str_male": 865, "x1_int_1": 865, "x1_int_2": 865, "x1_int_3": 865, "oh": [865, 1032], "infrequent_sklearn": [865, 990], "n_encoded_featur": [865, 866], "bpo": 866, "43475": 866, "lenient": [866, 1001], "min_degre": [867, 1035], "max_degre": [867, 1035], "powers_": 867, "n_output_features_": 867, "nystrom": [867, 1031, 1032], "featurewis": 868, "power_transform": [868, 881, 1030], "biometrika": [868, 880], "954": [868, 880], "959": [868, 880], "707": [868, 880], "ignore_implicit_zero": [869, 881], "landmark": [869, 881, 990], "n_quantiles_": 869, "quantiles_": [869, 990, 1032], "references_": 869, "robustscal": [869, 882, 970, 990, 1027, 1028, 1030, 1032, 1033, 1034, 1038], "with_cent": [870, 882], "with_scal": [870, 882], "unit_vari": [870, 882, 1034], "iqr": [870, 882], "interquartil": [870, 882], "quartil": 870, "75th": 870, "q_min": [870, 882], "q_max": [870, 882], "center_": 870, "robust_scal": [870, 881, 1030], "interquartile_rang": 870, "bspline": 871, "n_features_out_": 871, "with_std": [872, 883, 990, 1030], "n_samples_seen": 872, "5a": 872, "randal": [872, 1026, 1036], "242": [872, 1022], "247": 872, "mic": [873, 990], "target_mean_": [873, 990], "target_type_": 873, "micci": [873, 990], "barreca": [873, 990], "newsl": [873, 990], "enc_auto": 873, "enc_high_smooth": 873, "enc_low_smooth": 873, "ahead": 876, "return_norm": [879, 1029], "notimplementederror": [879, 1029], "compute_inverse_compon": [884, 885, 992], "inverse_components_": [884, 885, 992, 1036], "2759": [884, 885], "afor": [884, 885], "baserandomproject": [884, 885], "ping": [885, 992, 1028, 1029], "density_": 885, "gaussianrandomproject": [885, 992, 1023, 1036, 1038], "church": [885, 992], "kdd06_rp": 885, "cgi": 885, "uoa": 885, "gr": 885, "opta": 885, "0182": 885, "e2": [886, 976], "93lindenstrauss_lemma": 886, "sanjoi": [886, 992], "anupam": [886, 992, 1037], "gupta": [886, 992, 1029, 1030, 1033, 1034, 1035, 1036, 1038], "elementari": [886, 992], "663": [886, 988, 992], "11841": [886, 992], "1112658": [886, 992], "7894": [886, 992], "9868": [886, 992], "steadi": [887, 888], "xiaojin": 887, "zoubin": 887, "ghahramani": 887, "cmu": 887, "cald": 887, "carnegi": 887, "mellon": 887, "jerryzhu": 887, "label_prop_model": [887, 888], "clamp": [888, 993], "dengyong": 888, "bousquet": 888, "navin": 888, "lal": 888, "schoelkopf": 888, "termination_condition_": 889, "no_chang": 889, "all_label": 889, "33rd": [889, 993], "acl": [889, 993, 994], "stroudsburg": [889, 993], "crammer_sing": [892, 981, 995, 1022], "seldom": 892, "readonli": [892, 893, 1035, 1037, 1038], "raw_coef_": [892, 893], "smo": [892, 893], "526": 892, "1693": 892, "unsur": 893, "582": 893, "023": [893, 988], "522": 893, "class_weight_": [894, 895, 896, 897, 898, 1037], "n_sv": [894, 895, 896, 897, 898, 995, 1032], "fit_status_": [894, 895, 896, 897, 898], "n_support_": [894, 895, 896, 897, 898, 995, 1032], "proba_": [894, 897, 1033], "probb_": [894, 897, 1033], "shape_fit_": [894, 895, 896, 897, 898], "n_dimensions_of_x": [894, 895, 896, 897, 898], "7798": 896, "0547": 896, "0556": 896, "0561": 896, "7332": 896, "unshift": 896, "impract": 897, "tube": [898, 995], "_tree": [900, 901, 902, 903, 1023, 1025], "decision_tree_learn": [900, 901, 996], "olshen": [900, 901, 996], "wadsworth": [900, 901, 996], "belmont": [900, 901, 996], "cutler": [900, 901], "cc_home": [900, 901], "htm": [900, 901], "ccp_path": [900, 901, 902, 903], "get_depth": [900, 901, 902, 903, 1031], "get_n_leav": [900, 901, 902, 903, 1031], "set_predict_proba_request": [900, 902], "extra_tre": [902, 903], "8947": 902, "decision_tre": [904, 905, 906, 996], "out_fil": [904, 996], "leaves_parallel": 904, "special_charact": [904, 996], "fontnam": [904, 1035], "helvetica": [904, 906], "graphviz": [904, 996], "postscript": 904, "tpng": 904, "paint": [904, 906], "dot_data": [904, 996], "digraph": 904, "show_weight": 905, "feature_0": 905, "unrepresent": 907, "keyerror": [907, 1032], "popitem": 907, "lifo": 907, "input_nam": [911, 913, 943, 1036], "accept_large_spars": [912, 913, 1030], "ensure_2d": [912, 913], "allow_nd": [912, 913], "ensure_min_sampl": [912, 913], "ensure_min_featur": [912, 913], "y_numer": 912, "bsr": [912, 913, 1035], "x_convert": 912, "y_convert": 912, "array_convert": 913, "min_val": 916, "max_val": 916, "include_boundari": [916, 1036], "y_org": 917, "class_weight_vect": 917, "king": 917, "zen": 917, "sample_weight_vect": 918, "parenthes": 919, "type_filt": 921, "generate_onli": [923, 1032], "checks_gener": 923, "test_check_estim": 924, "check_estimators_fit_returns_self": 924, "array_lik": 927, "logdet": 927, "slogdet": 927, "6375861597263857": 927, "flip_sign": 929, "svd_lapack_driv": 929, "gesdd": 929, "p5": 929, "transposit": 929, "gesvd": 929, "conquer": 929, "unitari": 929, "vh": 929, "dot_product": 930, "deweight": 931, "min_batch_s": 932, "n_pack": [932, 933], "path_length": 934, "sliceabl": 935, "methodmetadatarequest": 936, "routemappingpair": 937, "routing_info": 937, "methodpair": 938, "_obj": 940, "_method": 940, "truthi": 941, "helloifeven": 941, "_x_is_even": 941, "say_hello": 941, "temp_fold": 946, "max_nbyt": 946, "1m": 946, "mmap_mod": 946, "dispatch_next": 946, "dispatch_one_batch": 946, "unprotect": 946, "prefetch": 946, "print_progress": 946, "inner_max_num_thread": 948, "backend_param": 948, "parallel_config": 948, "register_parallel_backend": [948, 1030], "dask": [948, 1001, 1030], "localclust": 948, "workload": [948, 1000], "register_rai": 948, "backend_nam": 948, "oversubscript": [948, 1036], "threadpool": 948, "effective_n_job": 948, "tracking_select": 949, "reservoir_sampl": 949, "reservoir": 949, "make_default": 950, "parallelbackendbas": 950, "resampled_arrai": 951, "3x2": [951, 954], "shuffled_arrai": 954, "last_mean": 955, "last_var": 955, "last_n": 955, "return_sum_weight": 961, "sum_weight": 961, "all_or_ani": [964, 1032], "is_fit": 964, "eg": 964, "substitut": [964, 1001, 1028], "raise_except": 966, "array_sym": 966, "is_paramet": 968, "enclos": 969, "set_stat": 969, "bergstra": [969, 1022, 1023], "tournament": 969, "dispos": [969, 1015], "n_resources_i": 969, "n_resources_0": 969, "n_candidates_i": 969, "n_candidates_0": 969, "r_0": 969, "n_resourc": 969, "983667": 969, "951958": 969, "947958": 969, "961009": 969, "955989": 969, "jamieson": 969, "talwalkar": 969, "desalvo": 969, "rostamizadeh": 969, "hyperband": 969, "bandit": 969, "multimetr": [969, 1032, 1037], "calibrated_forest": 969, "select__k": 969, "model__estimator__max_depth": 969, "imp": 970, "sophist": [970, 982], "14338": 970, "13286": 970, "15611": 970, "amelia": 970, "scientist": [970, 1004], "roderick": 970, "rubin": 970, "1986": [970, 996], "ol2001": 970, "mask_missing_values_onli": 970, "mask_al": 970, "rr2007": 972, "2x_iy_i": 972, "vz2010": 972, "vvz2010": 972, "prod_i": 972, "ls2010": 972, "c_0": [972, 978], "tensorsketch": 972, "pp2013": 972, "wikic": 972, "ccf2002": 972, "mercer": 972, "langl": [972, 980, 994, 995], "rangl": [972, 980, 994, 995], "y_j": [972, 980, 982, 995], "obviat": 972, "dagm": 972, "vempati": 972, "jawahar": 972, "charikar": 972, "farach": 972, "colton": 972, "m2012": 973, "mu_k": 974, "cst": 974, "omega_": 974, "k0": 974, "h_l": 974, "extrema": 974, "119": [974, 1025], "honei": 974, "stork": 974, "dilemma": 975, "valid_scor": 975, "w_0": 976, "w_p": 976, "34545455": 976, "13636": [976, 1031], "rifkin": 976, "lippert": 976, "2n_": 976, "softw": 976, "kim": [976, 1030, 1031, 1032, 1036], "koh": [976, 1004], "lustig": 976, "boyd": 976, "gorinevski": 976, "c_p": 976, "cherkasski": 976, "yunqian": 976, "1691": 976, "1714": 976, "ell_2": 976, "equiangular": 976, "weisberg": 976, "ell_0": [976, 980], "_coef": 976, "mp": 976, "ell_": 976, "posteriori": [976, 982], "radford": 976, "neal": [976, 1035], "50000013": 976, "49999993": 976, "lambda_i": [976, 990], "srikantan": 976, "tristan": 976, "fletcher": [976, 1022, 1026], "nomenclatur": [976, 1028], "deliber": 976, "overparameter": 976, "ldot": [976, 980, 982, 984, 994], "w_l": 976, "min_w": 976, "iverson": 976, "hood": [976, 995], "broyden": 976, "goldfarb": 976, "shanno": 976, "shortcom": 976, "statsmodel": [976, 1000], "aaron": [976, 1025, 1026, 1027, 1032], "simon": [976, 1004, 1025, 1026, 1035, 1036, 1037, 1038], "93fletcher": 976, "93goldfarb": 976, "93shanno_algorithm": 976, "noah": 976, "multirespons": 976, "edm": 976, "agricultur": 976, "rainfal": 976, "paid": 976, "bernouli": 976, "fraud": [976, 1004], "cash": 976, "fraudul": [976, 1004], "interrupt": 976, "drug": 976, "cure": 976, "entertain": 976, "mccullagh": 976, "nelder": 976, "boca": 976, "raton": 976, "chapman": 976, "hall": [976, 1029, 1033], "crc": 976, "31760": 976, "j\u00f8rgensen": 976, "monografia": 976, "matem\u00e1tica": 976, "2463": 976, "4337": 976, "7638": 976, "disappear": [976, 1022], "photogrammetr": 976, "hypothes": 976, "paradigm": 976, "cartographi": 976, "fischler": 976, "boll": 976, "sunglok": 976, "choi": 976, "taemin": 976, "wonpil": 976, "93sen_estim": 976, "binom": 976, "infeas": [976, 983, 985], "k\u00e4rkk\u00e4inen": 976, "\u00e4yr\u00e4m\u00f6": 976, "h_": 976, "oarc": 976, "dae": 976, "bassett": 976, "jr": 976, "econometrica": 976, "econometr": 976, "portnoi": 976, "hare": 976, "tortois": 976, "paraboloid": 976, "w_3": 976, "w_4": 976, "w_5": 976, "z_1": 976, "z_2": 976, "z_3": 976, "z_4": 976, "z_5": 976, "streamlin": 976, "gotten": [976, 990], "necess": [977, 983], "strife": 977, "mother": 977, "baloo": 977, "song": 977, "jungl": 977, "rubric": 977, "defici": [977, 994], "hlle": 977, "revolv": 977, "belkin": 977, "niyogi": 977, "1373": 977, "1396": 977, "molecul": 977, "jk": 977, "delta_": 977, "c_1": 977, "disentangl": 977, "legitim": 977, "die": 977, "noisier": 977, "5415": 977, "brief": 978, "num_featur": [978, 1037], "quantum": 978, "nutshel": 978, "36787944": 978, "89483932": 978, "58364548": 978, "51341712": 978, "83822343": 978, "7768366": 978, "facil": 979, "equi": 979, "agnost": [979, 988], "cue": 979, "came": 979, "quicker": 979, "unpract": 979, "analogi": [979, 980], "top_k_accuraci": 980, "top_k_accuracy_scor": [980, 1034, 1036], "neg_brier_scor": [980, 1032], "f1_micro": [980, 1026], "f1_weight": [980, 1026], "f1_sampl": 980, "neg_log_loss": 980, "roc_auc_ovr": [980, 1032], "roc_auc_ovo": [980, 1032], "roc_auc_ovr_weight": [980, 1032], "roc_auc_ovo_weight": [980, 1032], "explained_variance_scor": [980, 1025, 1029, 1036], "max_error": [980, 1031], "neg_mean_squared_log_error": 980, "mean_squared_log_error": [980, 1029, 1035], "neg_median_absolute_error": 980, "neg_mean_poisson_devi": 980, "neg_mean_gamma_devi": 980, "mean_gamma_devi": [980, 1032], "d2_pinball_scor": [980, 1036], "d2_tweedie_scor": [980, 1035], "invalidparametererror": 980, "_error": 980, "my_custom_loss_func": 980, "693": 980, "protocol": [980, 1025, 1038, 1039], "custom_scoring_funct": 980, "custom_scorer_modul": 980, "confusion_matrix_scor": 980, "test_tp": 980, "test_fn": 980, "untru": 980, "dividend": 980, "divisor": 980, "quotient": 980, "texttt": 980, "youden": 980, "informed": 980, "mosley2013": 980, "kelleher2015": 980, "guyon2015": 980, "urbanowicz2015": 980, "escalant": 980, "escalera": 980, "maci\u00e0": [980, 1035, 1037], "saeed": 980, "statnikov": 980, "viega": 980, "chalearn": 980, "automl": [980, 1000], "ijcnn": 980, "moslei": 980, "ijcv": 980, "urbanowicz": 980, "exstrac": 980, "evol": 980, "intel": [980, 1000], "cohen_kappa_scor": [980, 1027, 1029], "4285714285714286": 980, "manning2008": 980, "everingham2010": 980, "davis2006": 980, "flach2015": 980, "everingham": 980, "gool": 980, "winn": 980, "pascal": 980, "voc": 980, "goadrich": 980, "y_l": 980, "_l": 980, "emptyset": 980, "f_beta": 980, "hinge_loss": [980, 1026, 1034, 1035], "ne": [980, 983], "1738": 980, "matthews_corrcoef": [980, 1022, 1028, 1029, 1036], "t_k": [980, 996], "ik": 980, "ki": 980, "kk": 980, "auroc": 980, "ht2001": 980, "fc2009": 980, "pd2000": 980, "f2006": 980, "f2001": 980, "inner_clf": 980, "c\u00e8sar": 980, "hernandez": 980, "orallo": 980, "modroiu": 980, "wikipediadet2017": 980, "martin1997": 980, "navratil2007": 980, "consult": 980, "encyclopedia": 980, "utc": 980, "php": [980, 1000], "detection_error_tradeoff": 980, "oldid": 980, "798982054": 980, "doddington": 980, "kamm": 980, "ordowski": 980, "przybocki": 980, "navractil": 980, "klusacek": 980, "acoust": 980, "icassp": 980, "honolulu": 980, "229": 980, "232": 980, "brier1950": 980, "p_i": [980, 983], "bella2012": 980, "flach2008": 980, "bella": 980, "hern\u00e1ndez": 980, "ram\u00edrez": 980, "quintana": 980, "khosrow": 980, "pour": 980, "hershei": 980, "edson": [980, 1027], "matsubara": 980, "dagstuhl": 980, "seminar": 980, "schloss": 980, "leibniz": 980, "zentrum": 980, "lr_": 980, "brenner": 980, "gefel": 980, "coverage_error": [980, 1026, 1036], "label_ranking_average_precision_scor": [980, 1026, 1030, 1031, 1037], "label_ranking_loss": [980, 1027], "grade": 980, "unalt": 980, "epsilon_i": 980, "908": 980, "925": [980, 1010], "7083": 980, "log_": 980, "growth": [980, 1027, 1028], "commod": 980, "mapd": 980, "2e6": 980, "2666": 980, "y_n": [980, 984, 994], "elicit": 980, "2500": 980, "mean_pinball_loss_95p": 980, "skill": 980, "mcfadden": 980, "d2_tweedie_score_15": 980, "d2_pinball_score_08": 980, "heteroschedast": 980, "homoschedast": 980, "pear": 981, "y_dens": 981, "y_spars": 981, "advoc": 981, "elabor": 981, "financ": 981, "f3": 981, "y3": 981, "multi_target_forest": 981, "75474165": 981, "03498585": 981, "03812219": 981, "12165031": 981, "12914884": 981, "46081961": 981, "8948621": 981, "44373091": 981, "88978285": 981, "62745778": 981, "02891072": 981, "48204257": 981, "03260883": 981, "165": 981, "34867495": 981, "52003279": 981, "92529176": 981, "25719016": 981, "84253": 981, "25193977": 981, "16443186": 981, "12274212": 981, "170388": 981, "80956739": 981, "16979946": 981, "72667194": 981, "50941682": 981, "50447799": 981, "37967282": 981, "15699552": 981, "72850319": 981, "prod_": 982, "downarrow": 982, "spite": 982, "famous": 982, "serious": 982, "flair": 982, "2_y": 982, "mu_i": 982, "sigma_i": [982, 990], "theta_i": 982, "cnb": 982, "mnb": 982, "inventor": 982, "alpha_i": [982, 995], "cj": [982, 1025, 1026, 1027, 1028, 1029], "summat": [982, 984], "min_c": 982, "t_i": 982, "poorest": 982, "n_i": [982, 990], "satellit": 983, "kdt": 983, "farawai": 983, "invent": 983, "orthotrop": 983, "bentlei": 983, "1975": 983, "omohundro": 983, "characteris": 983, "unaffect": 983, "amort": 983, "cache_path": 983, "gettempdir": 983, "unsort": [983, 1023, 1026, 1030], "5807": 983, "nca_pip": 983, "96190476": 983, "limits_": 983, "lx": 983, "x_m": 984, "leftmost": 984, "w_1x_1": 984, "w_2x_2": 984, "w_mx_m": 984, "backpropag": 984, "b_1": 984, "b_2": 984, "z_l": 984, "dfrac": [984, 990], "nabla": 984, "deduct": 984, "rumelhart": 984, "jiquan": 984, "ngiam": 984, "chuan": 984, "yifan": 984, "carolin": 984, "suen": 984, "backprop": [984, 994], "lecun": [984, 994], "orr": [984, 994], "strai": 985, "v_ih_j": 985, "b_iv_i": 985, "c_jh_j": 985, "h_j": 985, "v_i": 985, "b_i": 985, "sum_h": 985, "fantasi": 985, "particl": 985, "thoroughli": 985, "hereund": 986, "1443": 986, "1471": 986, "outlying": 986, "h2009": 987, "g2015": 987, "absurd": 987, "m2019": 987, "bike": 987, "mc_clf": 987, "466": 987, "624": 987, "overlaid": 987, "obscur": [987, 1038], "cice": [987, 1036], "pd_": 987, "dx_c": 987, "footnot": [987, 1000], "opaqu": 988, "x_val": 988, "y_val": 988, "356": 988, "probe": 988, "050": 988, "048": 988, "033": 988, "056": 988, "r_multi": 988, "081": 988, "1013": 988, "445": 988, "i_j": 988, "min_max_scal": 990, "x_train_minmax": 990, "x_test_minmax": 990, "max_abs_scal": 990, "x_train_maxab": 990, "x_test_maxab": 990, "unintention": 990, "kernelcenter": [990, 1032, 1036], "semidefinit": [990, 995], "scholkopf1998": 990, "1_": 990, "x_train_tran": 990, "x_test_tran": 990, "8pt": 990, "x_normal": 990, "firefox": 990, "chrome": 990, "safari": 990, "africa": 990, "dragon": 990, "lexicon": 990, "par": 990, "tau": 990, "l_i": 990, "pargent": 990, "pfister": 990, "2671": 990, "2692": 990, "infant": 990, "kid": 990, "teen": 990, "adult": 990, "senior": [990, 1004], "citizen": 990, "retbin": 990, "x_1x_2": 990, "x_1x_3": 990, "x_2x_3": 990, "x_1x_2x_3": 990, "rung": 990, "eiler": 990, "marx": 990, "perperogl": 990, "sauerbrei": 990, "abrahamowicz": 990, "bmc": 990, "methodol": 990, "38629436": 990, "sixteenth": 992, "uai": 992, "craig": [992, 1025, 1030], "boutili": 992, "mois\u00e9": 992, "goldszmidt": 992, "morgan": [992, 996, 998], "kaufmann": [992, 996, 1034], "ella": 992, "bingham": 992, "heikki": 992, "mannila": 992, "explic": 992, "3947": 992, "687": 992, "kenneth": [992, 1022, 1023, 1028, 1029, 1036, 1037], "12th": 992, "296": 992, "x_new_invers": 992, "x_new_again": 992, "delalleau": 993, "aistat": 993, "gatsbi": 993, "ucl": 993, "uk": [993, 1015], "fullpap": 993, "xi_i": 994, "slack": 994, "t_0": 994, "l\u00e9on": [994, 1036, 1037, 1038], "_init_t": 994, "basesgd": 994, "eta_0": 994, "_t": 994, "svmsgd": 994, "pegaso": 994, "srebro": 994, "tsuruoka": 994, "tsujii": 994, "ananiad": 994, "afnlp": 994, "lin_clf": 995, "grasp": [995, 1001], "sv": 995, "builtin": 995, "qp": 995, "linear_svc": 995, "gram_train": 995, "gram_test": 995, "zeta": 995, "zeta_i": 995, "textrm": [995, 1013], "q_": 995, "equiv": 995, "reparameter": 995, "wu": [995, 1026, 1034], "weng": 995, "1005": 995, "rong": 995, "aug": 995, "1871": 995, "1874": 995, "ofmulticlass": 995, "fitter": 996, "pariti": 996, "multiplex": 996, "export_graphviz": [996, 1027, 1029, 1035, 1037, 1038], "export_text": [996, 1031, 1038], "dumont": 996, "subwindow": 996, "beforehand": 996, "dichotomis": 996, "quinlan": 996, "multiwai": 996, "proprietari": 996, "ruleset": 996, "q_m": 996, "n_m": 996, "t_m": 996, "setminu": 996, "mk": 996, "_m": 996, "ge0": 996, "widetild": 996, "tradition": 996, "t_t": 996, "eff": 996, "predictive_analyt": 996, "troubleshoot": 998, "artwork": 998, "fund": 998, "spotifi": 998, "betawork": 998, "evernot": 998, "aweb": 998, "yhat": 998, "rangespan": 998, "birchbox": 998, "bestofmedia": 998, "phimeca": 998, "howaboutw": 998, "peerindex": 998, "datarobot": 998, "okcupid": 998, "love": [998, 1015], "publica": 998, "machinali": 998, "solido": 998, "infonea": 998, "dataiku": 998, "otto": 998, "zopa": 998, "bnp": 998, "pariba": 998, "cardif": 998, "post1": [998, 1020], "foot": 999, "gear": 999, "neuroimag": [999, 1004], "astronom": 999, "pycon": 999, "thirti": 999, "nyc": [999, 1004], "sister": 1000, "sklearn_panda": 1000, "sklearn_xarrai": 1000, "xarrai": 1000, "autoviml": 1000, "tpot": 1000, "featuretool": 1000, "neuraxl": 1000, "neat": [1000, 1022], "checkpoint": 1000, "funki": 1000, "saver": 1000, "evalml": 1000, "mlflow": 1000, "lifecycl": [1000, 1001], "neptun": 1000, "mlop": 1000, "sacr": 1000, "dtreeviz": 1000, "eli5": 1000, "yellowbrick": 1000, "deap": 1000, "evolutionari": 1000, "interchang": [1000, 1039], "skop": [1000, 1017], "jpmml": 1000, "porter": 1000, "transpil": 1000, "javascript": 1000, "m2cgen": 1000, "dart": 1000, "haskel": 1000, "rust": 1000, "treelit": 1000, "arima": 1000, "sktime": 1000, "skforecast": 1000, "tslearn": 1000, "hmmlearn": 1000, "pomegran": 1000, "crfsuit": 1000, "skorch": 1000, "scikera": 1000, "scikit_learn": 1000, "feder": 1000, "mlxtend": 1000, "lego": 1000, "subsembl": 1000, "lightn": 1000, "sdca": 1000, "adagrad": 1000, "svrg": 1000, "gplearn": 1000, "genet": 1000, "multilearn": 1000, "seglearn": 1000, "fastfm": 1000, "kmode": 1000, "sphereclust": 1000, "mise": 1000, "giotto": 1000, "tda": 1000, "pymc": 1000, "censor": 1000, "lightfm": 1000, "openrec": 1000, "gensim": 1000, "nilearn": 1000, "neuro": 1000, "astroml": 1000, "astronomi": 1000, "dissemin": 1000, "chines": 1000, "persian": 1000, "spanish": 1000, "korean": 1000, "disclaim": 1000, "promis": 1001, "eleven": 1001, "incept": 1001, "scala": 1001, "reinforc": 1001, "era": 1001, "7242": 1001, "12147": 1001, "5523": 1001, "10733": 1001, "13902": [1001, 1032], "12800": 1001, "12866": 1001, "15550": 1001, "5853": 1001, "11805": 1001, "15319": 1001, "11977": 1001, "12852": [1001, 1032], "13911": [1001, 1032], "amput": 1001, "6284": 1001, "beginn": 1001, "priorit": [1001, 1029], "4497": 1001, "7646": 1001, "6425": 1001, "6424": 1001, "8480": 1001, "6231": 1001, "8100": 1001, "6599": 1001, "6715": 1001, "14582": 1001, "3855": 1001, "13227": 1001, "6323": 1001, "14180": [1001, 1033], "9173": 1001, "13146": [1001, 1032], "8614": 1001, "7608": 1001, "5082": 1001, "8243": 1001, "searchgrid": 1001, "6929": 1001, "__array_function__": [1001, 1032], "etl": [1001, 1004], "8370": 1001, "6451": 1001, "8157": 1001, "7382": 1001, "drift": 1001, "11047": [1001, 1032], "9326": 1001, "slep011": 1001, "1626": 1001, "10463": 1001, "id3": [1002, 1017], "cart": [1002, 1017], "touch": 1003, "savetxt": 1003, "cloneabl": 1003, "datafil": 1003, "printabl": 1003, "indispens": 1004, "stephen": [1004, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1035], "simmon": 1004, "vp": 1004, "athena": 1004, "music": 1004, "bernhardsson": 1004, "pariet": [1004, 1022], "lear": 1004, "visag": 1004, "fantast": 1004, "startup": 1004, "bitli": 1004, "chartbeat": 1004, "digg": [1004, 1029], "poncho": 1004, "gilad": 1004, "lotan": 1004, "chief": 1004, "chat": 1004, "bread": 1004, "butter": 1004, "chaumond": [1004, 1030], "offic": 1004, "ayzenshtat": [1004, 1030], "undergrad": 1004, "professor": 1004, "hotel": 1004, "destin": 1004, "agent": 1004, "melani": [1004, 1029, 1030], "awesom": 1004, "stuff": 1004, "randomizedpca": [1004, 1022, 1024, 1025, 1027, 1028, 1029], "boston": 1004, "mdbecker": 1004, "pydata_2013": 1004, "ninja": 1004, "thorough": 1004, "notch": 1004, "production": 1004, "greg": [1004, 1028, 1029, 1031, 1032], "lamp": 1004, "founder": 1004, "prototyp": 1004, "jurgen": 1004, "director": 1004, "commerc": 1004, "inventori": 1004, "bertin": 1004, "mahieux": 1004, "invalu": 1004, "vijai": [1004, 1025], "surrog": 1004, "traine": 1004, "impress": 1004, "traffic": 1004, "tenur": 1004, "matchmak": 1004, "weitzenfeld": 1004, "tweet": 1004, "ferenc": 1004, "huszar": 1004, "shop": 1004, "ourselv": 1004, "jeremi": [1004, 1027, 1028, 1029, 1030, 1033, 1034], "achin": 1004, "ceo": 1004, "marketplac": 1004, "frid": [1004, 1025], "radar": 1004, "partnership": 1004, "lebourgeoi": 1004, "charron": [1004, 1025, 1026, 1033, 1034, 1035], "cornerston": 1004, "sheep": 1004, "featureforg": 1004, "rafael": [1004, 1023, 1024, 1026, 1029], "carrascosa": [1004, 1026], "law": 1004, "semiconductor": 1004, "fab": [1004, 1032, 1033], "bleed": 1004, "chip": 1004, "smartphon": 1004, "automobil": 1004, "trent": [1004, 1028], "mcconaghi": 1004, "rapid": 1004, "immens": 1004, "thorsten": 1004, "kranz": 1004, "coma": 1004, "dss": 1004, "douetteau": 1004, "b2c": 1004, "retail": 1004, "palladium": 1004, "rammig": [1004, 1028], "peer": 1004, "lend": 1004, "billion": 1004, "gbp": 1004, "grate": 1004, "vlasio": [1004, 1029], "vasilei": [1004, 1029], "petfood": 1004, "cocoa": 1004, "worldwid": 1004, "toolset": 1004, "equip": 1004, "fitzk": 1004, "sr": 1004, "fondat": 1004, "s\u00e9bastien": [1004, 1028, 1030], "conort": 1004, "salmon": 1006, "nine": 1006, "sentiment": 1007, "cli": 1007, "doctest_mod": 1007, "hardest": 1008, "tightli": 1009, "knit": 1009, "x_fold": 1010, "array_split": 1010, "y_fold": 1010, "934": 1010, "train_indic": 1010, "test_indic": 1010, "963": 1010, "922": 1010, "930": 1010, "96388889": 1010, "92222222": 1010, "9637883": 1010, "93036212": 1010, "96578289": 1010, "92708922": 1010, "96681476": 1010, "96362897": 1010, "93192644": 1010, "0077": 1010, "00375": 1010, "lfw_": 1011, "_lfw": 1011, "gerhard_schroed": 1011, "donald_rumsfeld": 1011, "tony_blair": 1011, "colin_powel": 1011, "george_w_bush": 1011, "282": [1011, 1022], "estimated_param_": 1012, "iris_x": 1013, "iris_i": 1013, "iris_x_train": 1013, "iris_y_train": 1013, "iris_x_test": 1013, "iris_y_test": 1013, "pave": 1013, "paltri": 1013, "exabyt": 1013, "30349955": 1013, "63931533": 1013, "510": 1013, "53060544": 1013, "73698041": 1013, "13170937": 1013, "81458798": 1013, "84845219": 1013, "60648906": 1013, "51961675": 1013, "09517222": 1013, "585": 1013, "5854": 1013, "5855": 1013, "occam": 1013, "razor": 1013, "best_alpha": [1013, 1022], "025118864315095794": 1013, "313": 1013, "508": 1013, "knew": 1014, "taxonomist": 1014, "face_compress": 1014, "x_approx": 1014, "images_approx": 1014, "18565811e": 1014, "19346747e": 1014, "43026679e": 1014, "text_analyt": 1015, "skeleton": [1015, 1025], "sklearn_tut_workspac": 1015, "cp": 1015, "work_directori": 1015, "tutorial_hom": 1015, "fetch_data": 1015, "lang": 1015, "newsweed": 1015, "netnew": 1015, "bydat": 1015, "twenty_train": 1015, "holder": 1015, "2257": 1015, "sd345": 1015, "collier": 1015, "laserjet": 1015, "iii": [1015, 1036], "hampton": 1015, "4gb": 1015, "count_vect": 1015, "x_train_count": 1015, "35788": 1015, "4690": 1015, "downscal": 1015, "tf_transform": 1015, "x_train_tf": 1015, "tfidf_transform": 1015, "x_train_tfidf": 1015, "na\u00efv": 1015, "docs_new": 1015, "opengl": 1015, "x_new_count": 1015, "x_new_tfidf": 1015, "text_clf": 1015, "twenty_test": 1015, "docs_test": 1015, "8348": 1015, "9101": [1015, 1030], "1502": 1015, "353": 1015, "tfidf__use_idf": 1015, "searcher": 1015, "gs_clf": 1015, "workspac": 1015, "fear": 1015, "fire": 1015, "exercise_xx_script": 1015, "arg1": 1015, "arg2": 1015, "arg3": 1015, "mortem": 1015, "exercise_01_language_train_model": 1015, "exercise_02_senti": 1015, "movie_review": 1015, "txt_sentoken": 1015, "cpickl": 1015, "subtleti": 1017, "subscrib": 1020, "gzip": 1022, "bzip2": 1022, "decompress": 1022, "auc_scor": [1022, 1024], "kernc": [1022, 1036, 1037], "led": 1022, "probabilisticpca": [1022, 1025], "hmm": [1022, 1023, 1024, 1025, 1027], "gaussianhmm": 1022, "multinomialhmm": 1022, "n_gram_rang": 1022, "267": 1022, "alexi": [1022, 1025, 1026, 1029], "mignon": [1022, 1025, 1026, 1029], "subhodeep": [1022, 1023, 1024], "moitra": [1022, 1023, 1024], "yannick": [1022, 1024], "schwartz": [1022, 1024, 1036], "duckworth": 1022, "benediktsson": [1022, 1023, 1024], "marko": [1022, 1031, 1032, 1038], "burjek": 1022, "pinto": 1022, "abraham": [1022, 1023, 1028, 1032], "hoenig": 1022, "flyingimmidev": 1022, "francoi": [1022, 1035], "savard": 1022, "hann": 1022, "schulz": 1022, "welind": 1022, "companioni": 1022, "brandyn": 1022, "bussonni": [1022, 1034], "matthia": [1022, 1024, 1025, 1028, 1029, 1030, 1034, 1037], "pierr": [1022, 1030, 1031, 1033, 1035, 1037], "astolfi": 1022, "huiginn": 1022, "goodman": [1022, 1027], "ludwig": 1022, "schwardt": 1022, "hervieu": 1022, "sergio": [1022, 1024, 1025, 1034, 1037], "medina": [1022, 1024], "sheerman": 1022, "buguen": 1022, "seq_dataset": [1022, 1032], "weight_vector": [1022, 1032], "reuben": 1022, "costin": 1022, "_basehmm": 1022, "neighborsregressor": 1022, "gone": [1022, 1023], "vbgmm": [1022, 1026, 1028], "_pvalu": 1022, "charset": [1022, 1024], "test_fract": 1022, "train_fract": 1022, "marek": 1022, "fcostin": 1022, "adrien": 1022, "gaidon": 1022, "joona": 1022, "sillanp\u00e4\u00e4": 1022, "mccarthi": [1022, 1030], "roi": [1022, 1036], "hyunjin": 1022, "ibay": 1022, "scheidegg": 1022, "clair": 1022, "revillet": 1022, "conrad": [1022, 1023, 1037], "meng": [1022, 1023, 1026, 1028, 1029], "xinfan": [1022, 1023, 1026], "udi": 1022, "weinsberg": 1022, "janso": 1022, "palafox": 1022, "overwrite_": 1022, "copy_": 1022, "buffer_mb": 1022, "sparse_encode_parallel": 1022, "accident": [1022, 1026, 1031], "basedictionarylearn": 1022, "sparsecodingmixin": 1022, "fast_svd": 1022, "arnold": [1022, 1023], "bala": [1022, 1025], "subrahmanyam": [1022, 1025], "varanasi": [1022, 1025], "draxu": 1022, "eickenberg": [1022, 1024, 1025, 1026, 1027], "bogdan": 1022, "trach": 1022, "f\u00e9lix": [1022, 1024, 1025, 1026, 1030], "antoin": [1022, 1024, 1025, 1026, 1029], "fortin": [1022, 1024, 1025, 1026], "manuel": [1022, 1026, 1030, 1031, 1034, 1035], "caicedo": 1022, "carvaj": 1022, "tiziano": 1022, "zito": [1022, 1035], "jean": [1022, 1025, 1026, 1027, 1028, 1029, 1035], "kossaifi": [1022, 1026, 1027], "thumbnail": 1022, "mldata": [1022, 1030], "pietro": [1022, 1025], "berk": 1022, "macosx": 1022, "xarg": 1022, "bscikit": 1022, "cross_val": 1022, "bcross_val": 1022, "lurk": 1022, "l1_distanc": 1022, "387": 1022, "andi": [1022, 1029], "amit": [1022, 1036, 1037], "salvator": [1022, 1036, 1037], "masecchia": 1022, "schut": 1022, "metaireau": [1022, 1025], "bryan": [1022, 1025, 1031, 1032, 1035], "silverthorn": 1022, "minwoo": 1022, "luca": [1022, 1032, 1033, 1034, 1035], "wiman": 1022, "schl\u00fcter": [1022, 1030], "malet": 1022, "miott": [1022, 1025], "feth": 1022, "arezki": 1022, "yamin": 1022, "notes_neighbor": 1022, "netbsd": 1022, "kamel": 1022, "ibn": 1022, "hassen": 1022, "derouich": 1022, "virgilefritsch": 1022, "example_gaussian_process_plot_gp_regress": 1022, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1022, "tast": 1022, "2x": 1022, "10x": 1022, "200x": 1022, "ann": [1022, 1034, 1036], "laur": 1022, "fouqu": 1022, "ronan": [1022, 1025, 1030], "amicel": [1022, 1025], "osendorf": [1022, 1023], "gmmhmm": [1022, 1023], "latex": 1022, "mlcomp": 1022, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1022, "pybrain": 1022, "262": 1022, "116": 1022, "rokem": [1022, 1028], "100x": [1022, 1025], "obsolet": [1022, 1038], "attrselect": 1022, "unmaintain": 1022, "lite": 1022, "filo": [1022, 1025], "mailhot": 1022, "huard": 1022, "dave": [1022, 1029, 1030, 1036, 1038], "morril": 1022, "schofield": 1022, "travi": [1022, 1030], "oliph": 1022, "pearu": 1022, "peterson": [1022, 1024], "0d": 1023, "marchman": [1023, 1024], "hrishikesh": [1023, 1024], "huilgolkar": [1023, 1024], "bastiaan": [1023, 1024], "diego": [1023, 1024], "molla": [1023, 1024], "cunha": [1023, 1024], "almeida": [1023, 1024, 1035], "rolando": [1023, 1024], "espinoza": [1023, 1024], "fuent": [1023, 1024], "beauchamp": [1023, 1026], "longstand": [1023, 1029], "shaun": 1023, "jackman": 1023, "winterman": 1023, "seberg": 1023, "n_atom": 1023, "label_propag": 1023, "learn_rat": 1023, "basegradientboost": 1023, "mean_square_error": 1023, "gmm_": 1023, "eig_tol": 1023, "chunk_siz": 1023, "zero_one_scor": 1023, "117": 1023, "aymer": 1023, "masurel": 1023, "syhw": [1023, 1024], "corei": [1023, 1030, 1031], "lynch": [1023, 1029], "shu": [1023, 1026, 1030], "tadej": [1023, 1024], "jane\u017e": [1023, 1024], "caje": 1023, "tiago": [1023, 1027], "nune": 1023, "cow": 1023, "anz": 1023, "jauvin": 1023, "jacqu": [1023, 1025], "kvam": [1023, 1025], "doug": [1023, 1024, 1034], "coleman": [1023, 1024], "dickerson": 1023, "approximateident": 1023, "veronda": 1023, "matti": [1023, 1026, 1027], "lyra": [1023, 1026, 1027], "mikhail": [1023, 1024, 1025, 1028, 1029, 1037, 1038], "korobov": [1023, 1024, 1025, 1028, 1029], "alejandro": [1023, 1028], "weinstein": 1023, "deil": [1023, 1033, 1034], "nizhibitski": 1023, "coelho": [1023, 1025, 1026, 1030], "miroslav": [1023, 1024, 1027], "batchkarov": [1023, 1027], "pavel": [1023, 1031], "bob": [1023, 1029], "dengemann": 1023, "emanuel": 1023, "x006": 1023, "justin": [1024, 1030, 1034], "stochastic_gradi": [1024, 1025, 1031], "crombach": 1024, "sheet": 1024, "jaccard_similarity_scor": [1024, 1026, 1031], "jochen": 1024, "wersd\u00f6rfer": 1024, "sinayev": 1024, "unpleas": 1024, "novic": 1024, "tini": [1024, 1037], "hyperlink": 1024, "luessi": 1024, "philipp": [1024, 1025, 1028, 1037], "gervai": [1024, 1025], "cleverless": 1024, "nosetest": 1024, "compute_import": 1024, "return_model": [1024, 1026], "itergrid": 1024, "tacitli": 1024, "charset_error": 1024, "precompute_gram": 1024, "jim": 1024, "holmstr\u00f6m": 1024, "steven": [1024, 1025, 1027, 1029, 1030, 1035, 1037, 1038], "gryze": [1024, 1027], "sergeyf": 1024, "ben": [1024, 1025, 1026, 1029, 1030, 1031, 1034], "speer": 1024, "federico": [1024, 1025, 1030, 1031, 1036], "vaggi": [1024, 1025], "raul": [1024, 1025], "garreta": [1024, 1025], "gei": 1024, "flaxman": [1024, 1026], "denton": 1024, "cockburn": 1024, "dougal": [1024, 1026, 1027, 1029, 1030, 1031, 1032], "sutherland": [1024, 1026, 1027, 1029, 1030, 1031, 1032], "ian": [1024, 1026, 1031, 1032, 1034, 1037, 1038], "ozsvald": 1024, "johann": [1024, 1025, 1030, 1032, 1033, 1036], "sch\u00f6nberger": [1024, 1025], "szabo": [1024, 1025], "roland": [1024, 1025], "imran": [1024, 1025, 1026], "haqu": [1024, 1025, 1026], "karayev": 1024, "jamestwebb": [1024, 1025], "abhijeet": 1024, "kolh": 1024, "velkov": 1024, "fazlul": 1024, "shahriar": 1024, "felix": [1024, 1029, 1030, 1032, 1034, 1035, 1036], "brockherd": 1024, "harikrishnan": 1024, "jack": [1024, 1027, 1035, 1036, 1037, 1038], "hale": [1024, 1036], "jakemick": 1024, "mcdermott": 1024, "zwinck": 1024, "vredevoogd": [1024, 1025], "pati": 1024, "ekman": [1024, 1028], "shubernetskii": 1024, "naoki": [1024, 1034], "orii": 1024, "seamu": 1024, "absher": 1024, "feldman": [1024, 1029, 1030, 1031, 1032], "stefano": 1024, "lattarini": 1024, "steve": [1024, 1026, 1030, 1035, 1037], "koch": [1024, 1030, 1031, 1033, 1034], "sturla": 1024, "molden": 1024, "jarosch": 1024, "nikolai": [1025, 1026, 1027, 1028, 1030, 1031, 1036, 1038], "mayorov": [1025, 1026, 1027, 1028], "msvc": 1025, "mingw": 1025, "resourcewarn": 1025, "calvin": [1025, 1026], "gile": [1025, 1026], "billing": [1025, 1026, 1027], "safe_realloc": 1025, "bradshaw": [1025, 1026, 1029], "pico": [1025, 1026], "restor": [1025, 1030, 1031, 1032, 1033, 1037], "raff": 1025, "__array__": [1025, 1032], "jeffrei": [1025, 1028], "blackburn": [1025, 1028], "danni": [1025, 1026, 1027], "sullivan": [1025, 1026, 1027], "wignal": [1025, 1026, 1032, 1033], "grid_tograph": 1025, "gracefulli": [1025, 1026], "gaussianprocess": 1025, "novak": 1025, "tulloch": [1025, 1026], "wardagglomer": 1025, "wardclust": 1025, "mean_l1_ratio": 1025, "phlypo": 1025, "148": 1025, "bommarito": [1025, 1026], "brook": [1025, 1026, 1034], "osborn": [1025, 1026], "eltermann": 1025, "bwignal": 1025, "ankit": [1025, 1032, 1034, 1036], "agraw": [1025, 1030, 1036, 1037], "carei": [1025, 1026, 1027, 1028, 1029], "ugurthemast": [1025, 1026], "schumach": [1025, 1026, 1027], "baptist": [1025, 1033], "lagard": 1025, "rajat": [1025, 1032], "khanduja": 1025, "pascual": 1025, "ignacio": 1025, "rossi": 1025, "s\u00e4ger": [1025, 1028], "ilambharathi": [1025, 1026], "kanniah": [1025, 1026], "sdenton4": 1025, "alyssa": [1025, 1029], "amo": 1025, "waterland": 1025, "murad": 1025, "maud": 1025, "karol": 1025, "pysniak": 1025, "cgohlk": [1025, 1026], "jacobsen": 1025, "collin": 1025, "kaushik94": 1025, "erwin": 1025, "marsi": 1025, "csytraci": 1025, "lk": 1025, "laurent": [1025, 1026, 1029, 1030, 1037, 1038], "direr": [1025, 1026, 1029, 1030], "shilt": 1025, "yoshiki": [1025, 1028], "v\u00e1zquez": 1025, "yung": [1025, 1028], "siang": 1025, "liau": 1025, "abhishek": [1025, 1026, 1032, 1036, 1038], "thakur": [1025, 1026], "rohit": [1025, 1026, 1030, 1031], "sivaprasad": [1025, 1026], "amormachin": 1025, "oscar": [1025, 1029], "carlsson": 1025, "nanta": 1025, "nardelli": 1025, "jess010": 1025, "kowalski87": 1025, "clegg": 1025, "ralf": [1025, 1028, 1029, 1037, 1038], "gommer": [1025, 1028, 1029, 1037, 1038], "rupesh": 1025, "srivastava": [1025, 1037], "ryan": [1025, 1028, 1030, 1031], "skipper": [1025, 1027, 1028], "seabold": [1025, 1027, 1028], "stefan": [1025, 1026, 1030, 1032], "walt": [1025, 1026, 1030], "riddel": [1025, 1027, 1029], "valentin": [1025, 1027, 1037, 1038], "haenel": 1025, "myer": [1025, 1029], "yoni": 1025, "meshulam": 1025, "yuri": [1025, 1027], "zaytsev": 1025, "adrinjalali": [1025, 1034], "ai8rahim": 1025, "alemagnani": 1025, "chalmerlow": 1025, "dziki": 1025, "dro\u017cd\u017c": 1025, "matrixorz": 1025, "popo": 1025, "samuela": 1025, "fran\u00e7oi": 1025, "boulogn": 1025, "ethan": [1025, 1028], "guilherm": 1025, "trein": 1025, "heuer": 1025, "ivicajov": 1025, "rouli": 1025, "eduardo": [1025, 1027, 1035, 1036], "ari\u00f1o": 1025, "rubia": 1025, "jell": 1025, "zijlstra": 1025, "eddi": 1025, "jansson": [1025, 1037], "ca\u00f1ardo": 1025, "alastuei": 1025, "joseph": [1025, 1026, 1027, 1028, 1034, 1036, 1037], "perla": 1025, "ricardo": [1025, 1035, 1036], "kenta": 1025, "sato": 1025, "medri": 1025, "luce": 1025, "pierron": 1025, "danielweitzenfeld": 1025, "thompson": [1025, 1037, 1038], "brett": [1025, 1027, 1028, 1029, 1030, 1037], "feurer": [1025, 1030], "earl": 1025, "hank": 1025, "orr\u00f9": 1025, "lunt": 1025, "kearn": 1025, "pawe\u0142": [1025, 1029, 1034, 1035], "mandera": 1025, "zambelli": 1025, "staubda": 1025, "dedupl": 1026, "heilman": [1026, 1027], "precompute_dist": [1026, 1033], "lshforest": [1026, 1029], "qiang": 1026, "luo": 1026, "clemen": 1026, "brunner": 1026, "matteo": [1026, 1028, 1036], "visconti": 1026, "oleggio": 1026, "castello": 1026, "linkage_tre": 1026, "jatin": [1026, 1028], "shah": [1026, 1027, 1028, 1034], "saurabh": [1026, 1027, 1028, 1029, 1030, 1034], "jha": [1026, 1032, 1036], "blanchard": [1026, 1027], "michal": [1026, 1029, 1035, 1036], "romaniuk": 1026, "gilmor": 1026, "stapl": 1026, "hedyati": 1026, "antoni": [1026, 1028, 1034, 1037], "parel": 1026, "herv\u00e9": 1026, "bredin": 1026, "hasil": 1026, "sharma": [1026, 1028, 1030, 1031, 1033, 1034, 1036], "ducktyp": 1026, "download_20newsgroup": 1026, "friend": 1026, "cathi": [1026, 1032], "deng": [1026, 1027, 1028], "dawson": 1026, "garret": 1026, "hanna": [1026, 1027, 1033], "wallach": [1026, 1027], "yan": [1026, 1034], "artem": [1026, 1029], "sobolev": 1026, "fit_ovr": 1026, "predict_ovr": 1026, "predict_proba_ovr": 1026, "fit_ovo": 1026, "predict_ovo": 1026, "fit_ecoc": 1026, "predict_ecoc": 1026, "lamond": 1026, "outweigh": 1026, "thresh": 1026, "akshai": [1026, 1029, 1034], "akshayah3": 1026, "aldrian": 1026, "obaja": 1026, "ander": [1026, 1032], "aagaard": 1026, "cranenburgh": 1026, "walker": 1026, "banilo": [1026, 1027], "barmalei": [1026, 1027], "benedikt": 1026, "koehler": 1026, "bhsu": 1026, "bori": [1026, 1034, 1038], "feld": [1026, 1038], "borja": 1026, "ayerdi": 1026, "boyuan": [1026, 1027, 1028], "brent": [1026, 1030, 1031], "pedersen": [1026, 1038], "celeo": 1026, "chebee7i": 1026, "stade": 1026, "schuldt": 1026, "christof": [1026, 1027], "angermuel": [1026, 1027], "daiki": 1026, "aminaka": 1026, "danfrankj": 1026, "dmitrij": 1026, "milajev": 1026, "floydsoft": 1026, "garrett": 1026, "gpassino": 1026, "gwulf": [1026, 1027], "hampu": 1026, "bengtsson": 1026, "harri": [1026, 1028, 1034, 1035], "mavroforaki": [1026, 1028], "helder": [1026, 1035, 1036], "herv": 1026, "hugu": 1026, "salamin": 1026, "ism": 1026, "dlabal": 1026, "javier": 1026, "l\u00f3pez": [1026, 1030, 1031, 1034], "pe\u00f1a": 1026, "jdcaballero": 1026, "jeff": [1026, 1028, 1035, 1036], "hammerbach": 1026, "helmu": 1026, "kaicheng": 1026, "markham": [1026, 1033, 1034], "lagacheri": 1026, "leepei": 1026, "loic": [1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "estev": [1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "luka": [1026, 1033], "michelbach": 1026, "krell": [1026, 1028], "ku": [1026, 1027], "mateusz": [1026, 1033, 1034, 1039], "susik": 1026, "mehdi": [1026, 1035], "cherti": 1026, "mlg": 1026, "montecchio": 1026, "okal": 1026, "billi": 1026, "\u00f3scar": [1026, 1027, 1028, 1029], "n\u00e1jera": [1026, 1027, 1028, 1029], "puggioni": 1026, "pratap": [1026, 1029, 1036], "vardhan": 1026, "pvnguyen": 1026, "queqichao": 1026, "rahiel": 1026, "kasim": 1026, "mason": 1026, "saket": [1026, 1027, 1034], "choudhari": [1026, 1027, 1036, 1038], "sam": [1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037], "nichol": 1026, "sethdandridg": 1026, "sinhrk": [1026, 1027], "snuderl": 1026, "ott": 1026, "tjoa": 1026, "swu": 1026, "zimmer": [1026, 1036], "tejesh95": 1026, "terrycojon": 1026, "delteil": 1026, "toma": 1026, "kazmar": 1026, "trevorstephen": [1026, 1028], "tttthomasssss": 1026, "tzu": 1026, "kuo": 1026, "ugurcaliskan": 1026, "vinayak": [1026, 1027, 1028, 1030, 1031, 1037, 1038], "mehta": [1026, 1027, 1028, 1030, 1031, 1032, 1033, 1037, 1038], "vjacheslav": 1026, "murashkin": 1026, "wadawson": 1026, "x0l": 1026, "6147": 1027, "presort": [1027, 1032], "5857": 1027, "mcculloh": [1027, 1028], "6258": 1027, "giorgio": [1027, 1028, 1029], "patrini": [1027, 1028, 1029], "joe": 1027, "jevnik": 1027, "labelkfold": [1027, 1028], "labelshufflesplit": [1027, 1028], "mcfee": [1027, 1028], "3659": 1027, "4738": 1027, "projectedgradientnmf": 1027, "nls_max_it": 1027, "erick": 1027, "moodi": 1027, "4025": 1027, "mean_shift": [1027, 1030], "martino": 1027, "sorbaro": 1027, "cori": 1027, "konstantin": [1027, 1028, 1029], "shmelkov": 1027, "backlink": 1027, "jaidev": 1027, "deshpand": [1027, 1028], "dictlearn": 1027, "kashif": 1027, "rasul": [1027, 1029, 1030], "galvez": 1027, "sonni": 1027, "hu": [1027, 1030, 1032], "santi": [1027, 1029, 1030], "villalba": [1027, 1030, 1034], "5186": 1027, "stolbunov": 1027, "booster": 1027, "graham": [1027, 1028], "clenaghan": [1027, 1028], "clyde": 1027, "subproblem": 1027, "forestclassifi": 1027, "ankur": [1027, 1038], "ankan": 1027, "henri": [1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037], "5431": 1027, "buddha": 1027, "prakash": [1027, 1029, 1035], "5182": 1027, "lamb": [1027, 1035], "5282": 1027, "5355": 1027, "5360": 1027, "4478": 1027, "5337": 1027, "4362": 1027, "5495": 1027, "elvi": [1027, 1028, 1029], "dohmatob": [1027, 1028, 1029], "data_min": 1027, "data_max": 1027, "data_rang": 1027, "_learntselectormixin": 1027, "gradientboost": 1027, "metatransfom": 1027, "load_lfw_pair": 1027, "wardagglom": 1027, "residues_": 1027, "indicator_matrix_": 1027, "adithya": 1027, "ganesh": 1027, "akitti": 1027, "alexei": 1027, "grigorev": 1027, "ali": [1027, 1030, 1031, 1034, 1035, 1037, 1038], "baharev": 1027, "ando": 1027, "saaba": 1027, "anish": [1027, 1028], "anthoni": [1027, 1029, 1030], "erling": 1027, "rouvinen": 1027, "rachez": [1027, 1028], "benjaminirv": 1027, "naul": [1027, 1028], "gohlk": 1027, "bourguignat": 1027, "cindi": [1027, 1035], "sridharan": 1027, "kronovet": 1027, "data1010": 1027, "dotson": 1027, "djipei": [1027, 1028], "dmitri": [1027, 1029, 1030, 1031, 1035, 1038], "spikhalskii": 1027, "donn": 1027, "duart": [1027, 1035, 1037], "caro": 1027, "larson": [1027, 1031, 1032, 1034, 1036], "fernando": [1027, 1034], "carrillo": 1027, "eckert": 1027, "zalkow": 1027, "ganiev": [1027, 1028, 1029], "ibraim": [1027, 1028, 1029], "giorgiop": 1027, "gryllo": [1027, 1030], "prokopi": [1027, 1030], "hsuan": 1027, "tien": 1027, "ishank": [1027, 1028, 1029], "gulati": [1027, 1028, 1029], "jeffrey04": [1027, 1028], "jfraj": 1027, "jiali": 1027, "mei": [1027, 1032], "kirkham": [1027, 1028, 1030], "wittenau": 1027, "loyal": 1027, "jungkook": 1027, "park": [1027, 1032, 1034, 1037, 1038], "kamalakerdadi": [1027, 1028], "kyler": 1027, "lilian": [1027, 1028], "besson": [1027, 1028], "tiao": [1027, 1028], "marktab": 1027, "spacek": 1027, "martinbpr": [1027, 1028], "martinosorb": 1027, "maryanmorel": [1027, 1028], "masafumi": 1027, "oyamada": 1027, "krump": 1027, "kolganov": 1027, "mbilling": 1027, "mhg": 1027, "patterson": 1027, "omer": 1027, "katz": [1027, 1034, 1035], "pauli": 1027, "virtanen": 1027, "fischer": [1027, 1028], "pianomania": 1027, "preston": [1027, 1028, 1029], "parri": [1027, 1028, 1029], "rohan": [1027, 1028, 1030, 1031, 1035], "ramanath": 1027, "bansod": [1027, 1028, 1029], "scls19fr": 1027, "saeger": [1027, 1028, 1029], "shivan": 1027, "sornarajah": 1027, "simonpl": 1027, "sseg": 1027, "hoover": [1027, 1028, 1029, 1031], "seguin": 1027, "theodor": 1027, "vasiloudi": 1027, "freita": [1027, 1029, 1030], "pereira": [1027, 1030, 1031], "timothi": [1027, 1035], "hopper": 1027, "tokoroten": 1027, "vstolbunov": 1027, "wangz10": 1027, "yucheng": 1027, "zhauniarovich": 1027, "zac": 1027, "stewart": [1027, 1032, 1035, 1037], "zhai_pro": 1027, "zichen": 1027, "7946": 1028, "8355": 1028, "9010": 1028, "8040": 1028, "9149": 1028, "aman": [1028, 1029, 1030, 1036, 1037], "dalmia": [1028, 1029, 1030], "nate": [1028, 1029, 1035], "guerin": [1028, 1029], "lebedev": [1028, 1029], "utilis": 1028, "6497": 1028, "7724": 1028, "bing": [1028, 1029], "explained_variance_ratio": 1028, "7632": 1028, "jpfrancoia": [1028, 1029], "7676": 1028, "moham": [1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "affan": 1028, "7756": 1028, "7786": 1028, "srivatsan": [1028, 1029, 1032], "7799": 1028, "7490": [1028, 1029], "6282": 1028, "7301": 1028, "6178": 1028, "7680": 1028, "n_iters_": 1028, "7553": 1028, "ekaterina": [1028, 1029, 1030, 1031, 1033, 1038], "krivich": [1028, 1029, 1031], "5874": 1028, "7593": 1028, "7594": 1028, "7660": 1028, "7750": 1028, "7732": 1028, "artsion": 1028, "lieu": [1028, 1029], "grid_scores_": [1028, 1034, 1035], "leaveonelabelout": 1028, "leaveplabelout": 1028, "plural": 1028, "mean_tim": 1028, "std_time": 1028, "3204": 1028, "5291": 1028, "sounder": 1028, "7295": 1028, "5299": 1028, "bravi": 1028, "fouchet": 1028, "calinski_harabaz_scor": [1028, 1030], "harabaz": 1028, "6586": 1028, "4294": 1028, "6667": 1028, "6954": 1028, "unveil": 1028, "yelit": 1028, "basebag": [1028, 1030], "staub": 1028, "5805": 1028, "5251": 1028, "imacul": 1028, "1000x": 1028, "arfa": 1028, "6691": 1028, "6913": 1028, "5762": 1028, "utkarsh": [1028, 1029, 1030, 1031], "upadhyai": [1028, 1029, 1030, 1031], "6846": 1028, "5929": 1028, "podshumok": [1028, 1029], "6173": 1028, "ryad": 1028, "zenin": 1028, "devashish": 1028, "asish": [1028, 1029], "dowl": 1028, "6697": 1028, "ori": 1028, "ziv": 1028, "sear": 1028, "merritt": 1028, "7325": 1028, "7239": 1028, "hong": [1028, 1030, 1034, 1035, 1036, 1038], "guangguo": 1028, "jensen": [1028, 1034], "7419": 1028, "gregori": [1028, 1032, 1033, 1034, 1035], "stupp": [1028, 1029], "bernardo": 1028, "stein": 1028, "sparse_func": [1028, 1034], "incr_mean_variance_axi": [1028, 1034], "7049": 1028, "7152": 1028, "load_boston": [1028, 1030, 1035], "7154": 1028, "manvendra": [1028, 1029], "singh": [1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "5540": 1028, "7248": 1028, "6764": 1028, "wenhua": 1028, "6817": 1028, "6902": 1028, "leonieborn": 1028, "5141": 1028, "4995": 1028, "5012": 1028, "_transform_select": 1028, "7194": 1028, "caio": [1028, 1030, 1032], "oliveira": [1028, 1030, 1032, 1036], "6182": 1028, "6121": 1028, "6472": 1028, "7350": 1028, "russel": [1028, 1029], "smith": [1028, 1029, 1030, 1031, 1032, 1034], "7159": 1028, "yichuan": [1028, 1029], "5460": 1028, "document_clust": 1028, "7353": 1028, "_search": 1028, "_check_param_grid": 1028, "xrang": 1028, "7323": 1028, "viacheslav": 1028, "kovalevskyi": 1028, "7101": 1028, "residual_metr": 1028, "6651": 1028, "reorgan": 1028, "7187": 1028, "7260": 1028, "sebasti\u00e1n": 1028, "vanrel": 1028, "leaveplabelsout": 1028, "6660": 1028, "unprefix": 1028, "7261": 1028, "aditya": [1028, 1030, 1031, 1032, 1036, 1037], "joshi": [1028, 1030, 1036], "loginov": 1028, "minyushkin": 1028, "rudi": 1028, "abadi": [1028, 1029], "saint": 1028, "alexfield": 1028, "alvaro": [1028, 1030], "ulloa": 1028, "alyssaq": 1028, "amlan": 1028, "kar": 1028, "giessel": 1028, "jackson": [1028, 1029, 1031], "murrai": [1028, 1029], "arafat": 1028, "archit": 1028, "asnt": 1028, "b0noi": 1028, "behzad": 1028, "tabibian": 1028, "kratzwald": 1028, "bhargav": 1028, "mangipudi": 1028, "blakeflei": 1028, "brandon": [1028, 1029, 1036, 1037], "carter": [1028, 1029, 1037], "camilo": 1028, "lamu": 1028, "carol": [1028, 1029], "Willing": [1028, 1029], "cass": 1028, "ceshin": 1028, "truong": 1028, "codevig": 1028, "shiebler": 1028, "hnyk": [1028, 1029], "elli": [1028, 1031], "nicholson": [1028, 1029, 1030], "thaler": 1028, "warshaw": 1028, "lasagna": 1028, "deborah": [1028, 1029], "definitelyuncertain": 1028, "didi": [1028, 1029, 1030, 1031], "zev": [1028, 1029, 1030, 1031], "dsquareindia": 1028, "edwinensa": 1028, "elia": 1028, "kuth": 1028, "fabio": 1028, "ticconi": 1028, "fisach": 1028, "donovan": 1028, "ghg": 1028, "giovanni": [1028, 1030], "cherubin": 1028, "lanzani": 1028, "glenn": 1028, "qian": [1028, 1033], "mohr": 1028, "govin": 1028, "vatsan": 1028, "reda": 1028, "gustav": 1028, "m\u00f6rtberg": 1028, "halwai": 1028, "harizo": [1028, 1029], "rajaona": [1028, 1029], "hashcode55": 1028, "hdmetor": 1028, "hobson": 1028, "lane": 1028, "bown": 1028, "igor": [1028, 1029, 1035], "andriushchenko": [1028, 1029], "inki": 1028, "hwang": 1028, "isaac": [1028, 1029, 1031, 1032], "sijaranamu": 1028, "iver": 1028, "jordal": 1028, "jackmartin": 1028, "fiedler": 1028, "routlei": 1028, "zike": 1028, "janna": 1028, "brettingen": 1028, "jarfa": 1028, "laska": 1028, "jblackburn": 1028, "levesqu": 1028, "hintz": 1028, "jeremynixon": 1028, "jeroen": 1028, "jessica": 1028, "jill": 1028, "j\u00eann": 1028, "vie": 1028, "jia": 1028, "jiyuan": 1028, "johannah": 1028, "boersma": 1028, "moeller": 1028, "striebel": [1028, 1029], "joncral": 1028, "jordi": 1028, "munoz": [1028, 1034], "jrfiedler": 1028, "juliankahnert": 1028, "juliathebrav": 1028, "kaichogami": 1028, "lyon": [1028, 1029], "kingjr": 1028, "kjell": 1028, "krishna": [1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037], "kalyan": 1028, "krishnakalyan3": 1028, "kvle": 1028, "putnam": 1028, "ldavid": 1028, "leig": 1028, "leightonzhang": 1028, "leland": [1028, 1029, 1030, 1032, 1033, 1038], "liang": [1028, 1033, 1034], "hsieh": 1028, "lizsz": 1028, "l\u00e9oni": 1028, "born": 1028, "maniteja": [1028, 1029, 1030], "nandana": [1028, 1029, 1030], "marco": [1028, 1030, 1031, 1035, 1036, 1037], "bao": [1028, 1036], "szepieniec": 1028, "madsen": [1028, 1030], "massil": 1028, "matheu": 1028, "duboi": [1028, 1030], "moroz": 1028, "scherer": 1028, "michiaki": 1028, "ariga": 1028, "moussa": 1028, "taifi": 1028, "mrandrewandrad": 1028, "mridul": 1028, "seth": 1028, "nadya": 1028, "naoya": [1028, 1029, 1030, 1031], "kanai": [1028, 1029, 1030], "nickledav": 1028, "nico": [1028, 1035], "ningchi": 1028, "nlathia": 1028, "okbalefthand": 1028, "okhlopkov": [1028, 1029], "pano": 1028, "lourida": 1028, "strickland": 1028, "perrin": 1028, "letelli": 1028, "pestrickland": 1028, "practicalswift": 1028, "qimu": 1028, "zheng": [1028, 1029, 1034], "rachit": [1028, 1034, 1037], "kansal": 1028, "ramana": [1028, 1029], "randi": 1028, "olson": 1028, "lutz": [1028, 1032, 1035], "schucker": 1028, "jain": [1028, 1029, 1030, 1034, 1036, 1037], "ruifeng": [1028, 1029, 1034], "r\u00e9my": 1028, "l\u00e9one": 1028, "saihttam": 1028, "saiw": 1028, "yeung": 1028, "shleifer": [1028, 1029], "sartaj": 1028, "sasank": 1028, "chilamkurthi": 1028, "seal": 1028, "shagun": 1028, "sodhani": 1028, "shanmuga": 1028, "shashank": [1028, 1034], "shekhar": 1028, "shawpan": 1028, "shengxiduan": 1028, "shota": 1028, "shuckle16": 1028, "smedbergm": 1028, "srvanrel": 1028, "leriqu": [1028, 1030], "taranjeet": 1028, "themrmax": [1028, 1029], "hallock": 1028, "moreau": [1028, 1029, 1030, 1031, 1032], "tkammi": 1028, "toastedcornflak": [1028, 1029], "tomdlt": 1028, "toshihiro": [1028, 1029, 1035], "kamishima": [1028, 1029], "tracer0tong": 1028, "hauck": 1028, "vo": [1028, 1036], "varun": [1028, 1029, 1030, 1036, 1037], "jewalikar": 1028, "vikram": [1028, 1037, 1038], "villu": 1028, "ruusmann": 1028, "walter": 1028, "waterponei": [1028, 1029], "wenjian": 1028, "welch": 1028, "wyseguy7": 1028, "xyguo": [1028, 1030], "yanlend": 1028, "yen": [1028, 1029], "yenchenlin": 1028, "yoav": 1028, "zivori": 1028, "10723": [1029, 1030], "9623": 1029, "undocu": 1029, "deleteri": 1029, "9677": 1029, "ashutosh": [1029, 1030, 1032, 1034], "correlation_model": 1029, "regression_model": 1029, "belatedli": 1029, "9717": 1029, "9693": 1029, "steingold": [1029, 1030], "9711": 1029, "goncalo": [1029, 1030], "rodrigu": [1029, 1030, 1035], "9641": 1029, "bourbeau": [1029, 1030, 1031], "9865": 1029, "sachin": [1029, 1030, 1036], "kelkar": [1029, 1030, 1032], "9922": 1029, "charli": [1029, 1030, 1038], "brummitt": [1029, 1030], "9945": 1029, "9830": 1029, "9600": 1029, "kerimov": [1029, 1030], "9593": 1029, "reiichiro": [1029, 1030], "nakano": [1029, 1030], "9604": 1029, "interim": 1029, "9558": 1029, "9847": 1029, "joan": [1029, 1030, 1031, 1032], "massich": [1029, 1030, 1031, 1032], "oli": 1029, "blum": 1029, "9697": 1029, "9750": 1029, "9788": 1029, "9815": 1029, "9802": 1029, "vrishank": [1029, 1030], "bhardwaj": [1029, 1030], "nagarjuna": [1029, 1030], "nathaniel": [1029, 1030, 1032], "diegodlh": [1029, 1030], "jkleint": [1029, 1030], "oliblum90": [1029, 1030], "pasbi": [1029, 1030], "lawson": [1029, 1030, 1031], "nielsenmarkus11": [1029, 1030], "excit": 1029, "cautiou": 1029, "min_impurity_split": 1029, "7823": [1029, 1030], "8446": 1029, "5279": 1029, "8363": 1029, "5295": 1029, "7388": 1029, "userguid": 1029, "7655": 1029, "karan": [1029, 1030, 1031], "desai": [1029, 1031, 1034, 1035, 1037, 1038], "7739": 1029, "gasquez": 1029, "8120": 1029, "neeraj": 1029, "gangwar": 1029, "7548": 1029, "9206": 1029, "7441": 1029, "6101": 1029, "8698": 1029, "7794": 1029, "herilalaina": [1029, 1030, 1032], "rakotoarison": [1029, 1030, 1032], "5036": 1029, "4939": 1029, "esuli": [1029, 1034], "n_skips_": 1029, "7914": 1029, "horrel": 1029, "8591": 1029, "hadrien": [1029, 1032], "7838": 1029, "8835": 1029, "8061": 1029, "cordier": 1029, "6288": 1029, "9145": 1029, "reddi": [1029, 1030, 1031, 1036], "chinthala": 1029, "7721": 1029, "crall": [1029, 1035], "7685": 1029, "tommi": [1029, 1030, 1031], "l\u00f6fstedt": 1029, "9277": 1029, "hongkahjun": 1029, "7089": 1029, "randomized_svd_low_rank": 1029, "9067": 1029, "6181": 1029, "wendling": 1029, "8065": 1029, "lejeun": 1029, "7567": 1029, "jay": 1029, "doepk": 1029, "7573": 1029, "romain": [1029, 1034], "brault": 1029, "5229": 1029, "7990": 1029, "8586": 1029, "7723": 1029, "8028": 1029, "booth": 1029, "8005": 1029, "7863": 1029, "7506": 1029, "5991": 1029, "8845": 1029, "8053": 1029, "8282": 1029, "8117": 1029, "9259": 1029, "8094": 1029, "8335": 1029, "poughon": 1029, "7880": 1029, "karnofski": 1029, "935": 1029, "8931": 1029, "attractador": [1029, 1030], "8002": 1029, "8549": 1029, "zerodivisionerror": [1029, 1032, 1038], "7501": 1029, "dominik": [1029, 1038], "krzeminski": 1029, "7970": 1029, "8006": 1029, "p\u00f6lsterl": [1029, 1032, 1035], "8936": 1029, "8672": 1029, "mike": 1029, "benfield": 1029, "broke": 1029, "8068": 1029, "5732": 1029, "ytrue": 1029, "ypred": 1029, "8087": 1029, "7983": 1029, "8512": 1029, "8251": 1029, "aivision2020": 1029, "5814": 1029, "7849": 1029, "jair": 1029, "montoya": 1029, "martinez": 1029, "randomizedlasso": 1029, "5359": 1029, "9302": 1029, "8160": 1029, "8224": 1029, "gedeck": 1029, "vathsala": [1029, 1030, 1031, 1032], "achar": [1029, 1030, 1031, 1032], "9022": 1029, "mehmet": [1029, 1035], "basbug": 1029, "9024": 1029, "8973": 1029, "paulo": [1029, 1035, 1037], "haddad": 1029, "unmeaning": 1029, "6573": 1029, "quazi": [1029, 1030], "marufur": 1029, "rahman": [1029, 1030, 1034], "baselabelpropag": 1029, "9239": 1029, "andr": [1029, 1036], "ambrosio": 1029, "boechat": 1029, "early_exager": 1029, "assertionerror": 1029, "8992": 1029, "7954": 1029, "foreman": 1029, "9105": 1029, "9108": 1029, "8306": 1029, "7872": 1029, "_c_step": 1029, "3367": 1029, "steward": 1029, "8768": 1029, "detomaso": 1029, "6507": 1029, "jayzed82": 1029, "6126": 1029, "7814": 1029, "7702": 1029, "9219": 1029, "7771": 1029, "ang": 1029, "randomizedlogisticregress": 1029, "8259": 1029, "mandatorili": 1029, "7565": 1029, "8181": 1029, "basesearchcv": [1029, 1030], "8344": 1029, "eriksson": 1029, "7661": 1029, "8295": 1029, "batula": 1029, "dylan": [1029, 1032], "werner": [1029, 1034], "meier": 1029, "7365": 1029, "aleksandr": 1029, "sandrovskii": 1029, "5697": 1029, "stijn": 1029, "tonk": 1029, "6250": 1029, "8093": 1029, "bull": 1029, "9507": 1029, "7356": 1029, "dingwal": 1029, "_check_target": 1029, "8377": 1029, "5211": 1029, "rhinehart": 1029, "8159": 1029, "8198": 1029, "fetch_": 1029, "7944": 1029, "7825": 1029, "kathleen": 1029, "7376": 1029, "7331": 1029, "yangarbit": 1029, "__getstate__": [1029, 1037], "obstruct": 1029, "8316": 1029, "holger": 1029, "8010": 1029, "7986": 1029, "najera": 1029, "9289": 1029, "makedir": 1029, "9284": 1029, "sebastin": [1029, 1030], "alert": 1029, "lgtm": 1029, "9278": 1029, "heli": 1029, "8449": 1029, "9078": 1029, "purport": 1029, "sergul": [1029, 1030, 1033], "aydor": [1029, 1030, 1033], "8922": 1029, "8137": 1029, "8139": 1029, "8995": 1029, "2879": 1029, "7459": 1029, "7812": 1029, "9100": 1029, "8481": 1029, "8174": 1029, "tahar": 1029, "zanouda": 1029, "8854": 1029, "8874": 1029, "7998": 1029, "jiacheng": 1029, "argpartit": 1029, "frombuffer_empti": 1029, "rankdata": 1029, "safe_copi": 1029, "eig": 1029, "fast_dot": 1029, "pinvh": [1029, 1031], "graph_laplacian": 1029, "sparsetool": 1029, "connected_compon": 1029, "check_decision_proba_consist": 1029, "shubham": [1029, 1032], "9019": 1029, "baseensembl": [1029, 1032], "7464": 1029, "rishikesh": 1029, "taehoon": [1029, 1030], "aashil": 1029, "balakumaran": [1029, 1030], "manoharan": [1029, 1030], "petrov": [1029, 1030, 1038], "minghui": [1029, 1030], "jc": [1029, 1030], "alexandercbooth": 1029, "chkoar": 1029, "aarshai": [1029, 1030], "gilliam": 1029, "subramanyam": 1029, "clement": [1029, 1030, 1034], "joudet": [1029, 1030], "robl": 1029, "kati": 1029, "luangkot": 1029, "lacchia": 1029, "akshay0724": 1029, "omtcyfz": 1029, "rickiepark": 1029, "jbdelafoss": 1029, "vivek": [1029, 1030, 1031], "elliott": 1029, "ldirer": 1029, "sid": 1029, "kapur": 1029, "midina": 1029, "mikebenfield": 1029, "sourav": [1029, 1032], "aseem": 1029, "bansal": 1029, "aishwaryark": 1029, "howel": 1029, "dokato": 1029, "kathi": [1029, 1032], "ferria": 1029, "nikita": [1029, 1030, 1032, 1035, 1036, 1037], "basil": 1029, "beirouti": 1029, "possa": 1029, "bednar": 1029, "janin": 1029, "harper": 1029, "artsiom": 1029, "ligo": 1029, "rahn": [1029, 1032], "seanpwilliam": 1029, "julian": [1029, 1030], "kuhlmann": [1029, 1030], "aubert": 1029, "j\u00f6rn": 1029, "hee": [1029, 1032], "shivamgargsya": [1029, 1033, 1035], "kat": 1029, "hempstalk": 1029, "kaushik": [1029, 1036, 1037, 1038], "lakshmikanth": 1029, "kennedi": [1029, 1032], "yap": 1029, "kiril": [1029, 1030, 1032, 1034], "bobyrev": 1029, "imbert": [1029, 1031, 1034, 1036], "lera": 1029, "douillard": 1029, "mainak": 1029, "tobychees": [1029, 1030], "manraj": 1029, "marc": [1029, 1031, 1032, 1038], "meketon": 1029, "marcofalk": 1029, "gilch": 1029, "mehul": 1029, "ahuja": [1029, 1036, 1037], "goetz": [1029, 1030], "dezub": 1029, "baumgartn": 1029, "vibrantabhi19": 1029, "golubin": 1029, "milen": 1029, "paskov": 1029, "antonin": 1029, "carett": 1029, "morikko": 1029, "mrmjauh": 1029, "nalepa": 1029, "namiya": 1029, "narinek": [1029, 1030], "angu": [1029, 1030, 1036], "nicol": 1029, "vavrova": 1029, "nitish": 1029, "pandei": [1029, 1034], "daniil": 1029, "olegovich": 1029, "craze": 1029, "om": 1029, "parmind": 1029, "patrick": [1029, 1030, 1035, 1036, 1039], "carlson": 1029, "ganssl": 1029, "lorek": 1029, "pete": [1029, 1033, 1034], "bachant": 1029, "csizsek": 1029, "jong": 1029, "puneet": 1029, "mathur": [1029, 1031, 1032, 1037, 1038], "quentin": [1029, 1030, 1031, 1038], "hibon": 1029, "1kastner": 1029, "rameshwar": [1029, 1030], "bhaskaran": [1029, 1030], "rebecca": 1029, "bilbro": 1029, "remi": 1029, "rampin": 1029, "pratik": 1029, "agarw": [1029, 1030, 1032], "sailesh": [1029, 1030], "choyal": [1029, 1030], "samson": 1029, "samu\u00ebl": 1029, "weber": 1029, "sarah": [1029, 1031, 1034], "abhyudai": 1029, "sharan": [1029, 1030], "yalburgi": [1029, 1030], "willduan": 1029, "siddharth": [1029, 1033], "almer": 1029, "theofilo": 1029, "papapanagiot": 1029, "alison": 1029, "boucher": 1029, "folkman": 1029, "jung": [1029, 1033, 1037], "shenoi": 1029, "vilhelm": [1029, 1030], "ehrenheim": [1029, 1030], "alan": [1029, 1030, 1033, 1035, 1036], "yee": [1029, 1030], "warut": [1029, 1030], "vijitbenjaronk": [1029, 1030], "yuichi": 1029, "fujikawa": 1029, "affanv14": 1029, "andreh7": 1029, "bradi": 1029, "salz": 1029, "campustrampu": 1029, "agamemnon": [1029, 1030, 1031, 1032, 1034, 1035], "krasouli": [1029, 1030, 1031, 1032, 1034, 1035], "ditenberg": 1029, "elena": 1029, "sharova": 1029, "filipj8": [1029, 1030], "fukatani": 1029, "guiniol": 1029, "guoci": 1029, "hakaa1": [1029, 1030], "xhy": 1029, "jakirkham": [1029, 1030, 1031, 1037, 1038], "jaroslaw": 1029, "jeroko": 1029, "jmontoyam": 1029, "josephsalmon": [1029, 1030, 1031], "jschendel": [1029, 1030], "leereev": 1029, "hahn": [1029, 1030], "mathurinm": [1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038], "mehak": 1029, "sachdeva": 1029, "mlewis1729": 1029, "mlliou112": 1029, "mthorrel": [1029, 1032], "ndingwal": 1029, "nuff": 1029, "plagre": 1029, "pldtc325": 1029, "breno": [1029, 1030], "olsen": 1029, "alfano": 1029, "burn": [1029, 1030], "polmauri": 1029, "charlton": 1029, "austin": 1029, "chayant": 1029, "t15h": 1029, "chinmaya": 1029, "pancholi": 1029, "danielsen": 1029, "chung": [1029, 1030], "pravarmahajan": [1029, 1030], "dariu": [1029, 1030], "morawiec": [1029, 1030], "haberth\u00fcr": 1029, "heryanto": 1029, "kirkbi": [1029, 1030], "rashchedrin": 1029, "gertrud": 1029, "devansh": [1029, 1030], "dickson": 1029, "baxlei": 1029, "don86": 1029, "klarup": 1029, "elizabeth": [1029, 1031, 1034], "ferriss": 1029, "ellen": 1029, "egli": 1029, "chieh": [1029, 1030], "chou": [1029, 1030], "grzegorz": [1029, 1032], "szpak": [1029, 1032], "zxcvbniu": 1029, "icyblad": 1029, "ilya": 1029, "laughlin": 1029, "iv\u00e1n": [1029, 1035], "vall\u00e9": 1029, "aur\u00e9lien": [1029, 1030, 1031, 1035, 1036], "bellet": [1029, 1030, 1031], "mahapatra": 1029, "bundl": [1030, 1031], "indexerror": [1030, 1031], "11756": [1030, 1031], "14237": [1030, 1031], "schuder": [1030, 1031, 1032], "13903": [1030, 1031], "13124": [1030, 1031], "13772": [1030, 1031], "vya": [1030, 1031, 1032], "12949": 1030, "prabakaran": [1030, 1031, 1034, 1036, 1037], "kumaresshan": [1030, 1031, 1034], "12946": 1030, "tallott": 1030, "13276": 1030, "13005": 1030, "13312": 1030, "11295": 1030, "vacaliuc": [1030, 1031], "13046": 1030, "12360": 1030, "aakanksha": 1030, "13134": 1030, "sandro": [1030, 1037], "casagrand": [1030, 1031], "12881": 1030, "13165": 1030, "13221": 1030, "bertrandhaut": [1030, 1031], "raghunathan": [1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038], "dowon": [1030, 1031], "aria": [1030, 1031, 1037], "fibins": [1030, 1031], "finn": [1030, 1031], "shea": [1030, 1031], "joaak": [1030, 1031], "m\u00e9hault": [1030, 1031], "kms15": [1030, 1031], "kossori": [1030, 1031], "aruku": [1030, 1031], "lakshya": [1030, 1031, 1032], "ib\u00e1\u00f1ez": [1030, 1031, 1034], "gorelli": [1030, 1031, 1035, 1037], "marcogorelli": [1030, 1031], "mferrari3": [1030, 1031], "micka\u00ebl": [1030, 1031], "schoentgen": [1030, 1031], "pavlo": [1030, 1031], "kalli": [1030, 1031], "glaser": [1030, 1031], "pierretallott": [1030, 1031, 1032], "kapoor": [1030, 1031], "sandrocasagrand": [1030, 1031], "tashai": [1030, 1031], "vishaal": [1030, 1031], "zhuyi": [1030, 1031], "ziji": [1030, 1031], "zj": [1030, 1031], "poh": [1030, 1031], "12704": 1030, "12701": 1030, "12685": 1030, "12699": 1030, "adanhawth": [1030, 1031], "stine": [1030, 1031], "feda": [1030, 1031], "curic": [1030, 1031], "jeremiedbb": [1030, 1031, 1032], "katrin": [1030, 1031], "leinweb": [1030, 1031], "muhammad": [1030, 1031, 1035], "hassaan": [1030, 1031], "rafiqu": [1030, 1031], "paczuski": [1030, 1031], "waterburi": [1030, 1031], "shivam": [1030, 1031, 1032], "kotwalia": [1030, 1031], "12159": 1030, "12105": 1030, "11912": 1030, "12304": 1030, "12339": 1030, "12246": 1030, "10811": 1030, "feldbauer": [1030, 1031, 1032, 1033, 1036], "12441": 1030, "12517": 1030, "12234": 1030, "12165": 1030, "12388": 1030, "connor": [1030, 1035], "tann": [1030, 1035], "12393": 1030, "12122": 1030, "sharedmem": 1030, "12518": 1030, "12481": 1030, "12612": 1030, "12211": 1030, "lisa": [1030, 1031, 1033, 1034, 1036, 1037], "hannel": [1030, 1031], "melissa": 1030, "ferrari": 1030, "12451": 1030, "12171": 1030, "12365": 1030, "_encod": 1030, "12514": 1030, "12522": 1030, "12471": 1030, "marzinotto": [1030, 1031], "12317": 1030, "12338": 1030, "bauk": [1030, 1031], "12625": 1030, "sklearn_site_joblib": 1030, "12350": 1030, "12467": 1030, "unvendor": 1030, "12345": 1030, "navarret": [1030, 1031, 1032], "benjastudio": [1030, 1031], "cheuk": [1030, 1031], "connossor": [1030, 1031], "levinson": [1030, 1031], "kieker": [1030, 1031], "kataev": [1030, 1031], "dillon": [1030, 1031, 1032], "gardner": [1030, 1031], "vukolov": [1030, 1031], "caselli": [1030, 1031], "gauravahlawat": [1030, 1031], "gustavo": [1030, 1031, 1036], "haroldfox": [1030, 1031], "jacklangerman": [1030, 1031], "jacopo": [1030, 1031], "notarstefano": [1030, 1031], "janvanrijn": [1030, 1031], "jdethuren": [1030, 1031], "koen": [1030, 1031], "kushal": [1030, 1031], "chauhan": [1030, 1031, 1037, 1038], "jie": [1030, 1031, 1034], "lili": [1030, 1031], "xiong": [1030, 1031, 1036], "liam": [1030, 1031], "melsyt": [1030, 1031], "nichola": [1030, 1031, 1033], "shebanov": [1030, 1031], "oleksandr": [1030, 1031, 1032, 1033, 1036], "pavlyk": [1030, 1031, 1032, 1033], "hausamann": [1030, 1031], "pulkit": [1030, 1031, 1033], "maloo": [1030, 1031], "batista": [1030, 1031, 1035], "radostin": [1030, 1031], "stoyanov": [1030, 1031], "ramil": [1030, 1031], "nugmanov": [1030, 1031], "rebekah": [1030, 1031, 1032], "roopam": [1030, 1031], "tiernei": [1030, 1031, 1032], "sylvainlan": [1030, 1031, 1032, 1033, 1034], "takingitcasu": [1030, 1031], "tulio": [1030, 1031], "xing": [1030, 1031], "zach": [1030, 1031, 1036], "mountain": 1030, "sorri": 1030, "basemultilayerperceptron": [1030, 1032], "11924": 1030, "macbook": 1030, "9354": 1030, "9372": 1030, "astel": 1030, "10933": 1030, "hansen": 1030, "10471": 1030, "gaurav": [1030, 1031, 1032, 1033, 1034, 1036], "dhingra": [1030, 1031, 1034], "8003": 1030, "jo\u00ebl": 1030, "billaud": 1030, "10059": 1030, "braun": 1030, "9612": 1030, "jonatan": 1030, "samoocha": 1030, "8129": 1030, "margeta": 1030, "k_means_elkan": 1030, "11353": 1030, "11901": 1030, "9875": 1030, "9012": 1030, "11315": 1030, "9041": 1030, "9858": 1030, "artiem": 1030, "krinitsyn": 1030, "9908": 1030, "8617": 1030, "maskani": [1030, 1032, 1033, 1034], "filali": 1030, "konstantino": 1030, "katriopla": 1030, "10774": 1030, "catalfo": 1030, "10795": 1030, "takeshi": [1030, 1035, 1036, 1037], "yoshizawa": 1030, "11082": 1030, "sadhana": 1030, "srinivasan": [1030, 1033], "9731": 1030, "10045": 1030, "fetch_mldata": 1030, "11466": 1030, "6374": 1030, "normalize_compon": [1030, 1032], "11585": 1030, "ivan": [1030, 1031, 1034, 1037], "panico": [1030, 1034], "11420": 1030, "6452": 1030, "walli": 1030, "gauz": 1030, "9492": 1030, "8484": 1030, "9886": 1030, "underflow": [1030, 1035], "10142": 1030, "5956": 1030, "_class_mean": 1030, "_class_cov": 1030, "10898": 1030, "nanxin": 1030, "9832": 1030, "11951": 1030, "r\u00fcdiger": [1030, 1031, 1033], "busch": [1030, 1031, 1033], "9707": 1030, "wan": 1030, "7071": 1030, "9157": 1030, "11176": 1030, "forsyth": 1030, "11542": 1030, "anna": 1030, "9524": 1030, "9723": 1030, "10908": 1030, "10899": 1030, "melderi": 1030, "10101": 1030, "10\u2079": 1030, "9147": 1030, "clae": 1030, "fredrik": 1030, "mannbi": 1030, "10441": 1030, "mayur": 1030, "kulkarni": 1030, "6689": 1030, "nihar": 1030, "sheth": 1030, "11293": 1030, "9656": 1030, "greenhal": 1030, "n_features_to_comput": 1030, "9222": 1030, "hoh": 1030, "9234": 1030, "andrewww": 1030, "8075": 1030, "11211": 1030, "9484": 1030, "dalla": 1030, "card": 1030, "9043": 1030, "10112": 1030, "logistic_regression_path": [1030, 1031], "11724": 1030, "9939": 1030, "westov": 1030, "10998": 1030, "vazelh": [1030, 1031, 1032], "10071": 1030, "10153": 1030, "d\u00f6pfert": 1030, "10095": 1030, "cv_valu": 1030, "10297": 1030, "mabel": [1030, 1034], "10581": 1030, "yacin": 1030, "mazari": 1030, "10687": 1030, "10836": 1030, "aishwarya": 1030, "10397": 1030, "10992": 1030, "11327": 1030, "11905": 1030, "9837": 1030, "10593": 1030, "10610": 1030, "8554": 1030, "9775": 1030, "10827": 1030, "osa": 1030, "8066": 1030, "10587": 1030, "3840": 1030, "niederb\u00fchl": 1030, "9521": 1030, "11124": 1030, "arya": 1030, "11160": 1030, "barkhorn": 1030, "11679": 1030, "pacha": 1030, "10845": 1030, "perez": [1030, 1037], "parra": 1030, "toledano": 1030, "10999": 1030, "memoryerror": [1030, 1034], "11135": 1030, "10377": 1030, "9786": 1030, "10093": 1030, "alexryndin": 1030, "9772": 1030, "9515": 1030, "liddel": 1030, "manh": 1030, "dao": 1030, "9851": 1030, "10280": 1030, "10336": 1030, "haoran": 1030, "basemixtur": [1030, 1031], "10740": 1030, "10869": 1030, "g\u00e9ron": 1030, "9686": 1030, "11310": 1030, "_fit_and_scor": 1030, "11576": 1030, "ronsin": [1030, 1031, 1039], "_run_search": 1030, "9599": 1030, "11006": 1030, "11557": 1030, "boucaud": 1030, "iid": 1030, "9085": 1030, "10677": 1030, "zhdanovich": 1030, "10982": 1030, "juliet": 1030, "lawton": 1030, "10928": 1030, "solutu": 1030, "immensu": 1030, "9257": 1030, "8190": 1030, "alcorn": 1030, "9681": 1030, "mottl": [1030, 1031], "10005": 1030, "10346": 1030, "tobia": [1030, 1035, 1037], "10887": 1030, "11136": 1030, "4394": 1030, "9579": 1030, "kober": 1030, "9655": 1030, "bjerr": 1030, "11556": 1030, "11774": 1030, "9456": 1030, "unexpectedli": 1030, "9304": 1030, "11144": [1030, 1031], "9151": 1030, "10521": 1030, "7668": 1030, "9647": 1030, "10195": 1030, "10192": 1030, "11272": 1030, "11467": 1030, "11505": 1030, "giusepp": [1030, 1031], "costa": [1030, 1035], "10210": 1030, "11520": 1030, "11011": 1030, "11005": 1030, "11308": 1030, "11206": 1030, "11306": 1030, "10437": 1030, "lucija": 1030, "gregov": 1030, "10452": 1030, "10181": 1030, "nirvan": [1030, 1034], "anjirbag": 1030, "9399": 1030, "10913": 1030, "rodrigo": 1030, "agundez": 1030, "10458": 1030, "9816": 1030, "newei": 1030, "11042": 1030, "11235": 1030, "active_features_": 1030, "feature_indices_": 1030, "n_values_": 1030, "9726": 1030, "10829": 1030, "gilberto": 1030, "olimpio": 1030, "10655": 1030, "python2": 1030, "10412": 1030, "jiongyan": 1030, "9497": 1030, "8361": 1030, "neo": 1030, "_criterion": 1030, "classificationcriterion": 1030, "regressioncriterion": 1030, "10325": 1030, "camil": [1030, 1038], "stap": 1030, "basedecisiontre": [1030, 1031, 1034], "10536": 1030, "ohayon": [1030, 1031, 1038], "11464": 1030, "stott": 1030, "10663": 1030, "10229": 1030, "11553": 1030, "10881": 1030, "sevin": 1030, "ridge_regress": [1030, 1031, 1037], "10306": 1030, "siebert": 1030, "11741": 1030, "11166": 1030, "pypy3": 1030, "v5": 1030, "11010": 1030, "lami": 1030, "11596": 1030, "marcu": 1030, "voss": 1030, "9569": 1030, "12462": 1030, "zachariah": 1030, "10474": 1030, "10500": 1030, "9701": 1030, "9378": 1030, "check_set_param": 1030, "7738": 1030, "alvin": 1030, "chiang": 1030, "8102": 1030, "ankita": 1030, "sinha": 1030, "check_methods_subset_invari": [1030, 1036], "10428": 1030, "check_sample_weights_pandas_seri": 1030, "11558": 1030, "211217613": 1030, "absolutelynowarranti": 1030, "richi": 1030, "halford": [1030, 1037, 1038], "adelr": 1030, "adityadaflapurkar": 1030, "aidan": 1030, "fitzgerald": 1030, "aishgrt1": 1030, "akash": 1030, "shivram": 1030, "lenail": [1030, 1034], "egg": 1030, "diaz": 1030, "amanda": [1030, 1033, 1034, 1035, 1036], "aniruddha": 1030, "annaayzenshtat": 1030, "antonio": [1030, 1032], "quinonez": 1030, "anubhav": 1030, "marwaha": 1030, "arik": 1030, "pamnani": 1030, "ozga": 1030, "arunava": 1030, "geron": [1030, 1035, 1036], "ayush": [1030, 1035], "bangda": 1030, "bastian": 1030, "venthur": 1030, "benn": 1030, "koonc": 1030, "cclauss": 1030, "chadi": 1030, "kamar": 1030, "holdgraf": 1030, "hirsch": 1030, "hogan": 1030, "cnx": 1030, "cwitt": 1030, "ferreira": [1030, 1035, 1036], "gomez": [1030, 1037], "klevebr": 1030, "shwed": 1030, "mohn": [1030, 1034], "danil": 1030, "baibak": [1030, 1031], "beach": 1030, "pickup": 1030, "derek": 1030, "niederhut": [1030, 1032], "dilutedsauc": 1030, "dlovel": 1030, "dor": 1030, "dougla": 1030, "duhaim": 1030, "tuzova": 1030, "eunji": 1030, "farahsae": 1030, "raimundo": 1030, "fenx": 1030, "frankhui": 1030, "franz": 1030, "wompner": 1030, "freija": 1030, "descamp": 1030, "frsi": 1030, "calvo": [1030, 1031], "georgi": [1030, 1033], "peev": [1030, 1033], "gkevinyen5418": 1030, "vermeil": 1030, "hongh": 1030, "hossein": [1030, 1031, 1032], "pourbozorg": [1030, 1031, 1032], "hristo": [1030, 1037], "hunan": 1030, "rostomyan": 1030, "iampat": 1030, "jaewon": 1030, "malcolm": 1030, "jami": 1030, "wolosonovich": 1030, "jeb": 1030, "bearer": 1030, "jinkun": 1030, "jjabl": 1030, "johnstott": 1030, "jotasi": 1030, "julietcl": 1030, "shenk": 1030, "karl": 1030, "kasper": 1030, "primdal": 1030, "lauritzen": 1030, "ksemb": 1030, "kuai": [1030, 1031], "kyeongpil": 1030, "kang": [1030, 1032], "kye": 1030, "kyledrogo": 1030, "l\u00e9o": 1030, "liutong": 1030, "lizao": 1030, "lkjcalc": 1030, "louib": [1030, 1031], "luciano": [1030, 1037], "luke": 1030, "persola": 1030, "markiwanchyshyn": 1030, "marsgui": 1030, "gubri": [1030, 1031], "koko": [1030, 1036, 1037], "copeland": [1030, 1031], "meghann": [1030, 1032], "minh": 1030, "jamaoui": [1030, 1031, 1034], "mohammad": [1030, 1031], "shahebaz": 1030, "muayyad": 1030, "alsadi": 1030, "nabarun": 1030, "pal": [1030, 1036], "narendran": 1030, "santhanam": 1030, "suh": 1030, "eng": 1030, "av": 1030, "nicolau": 1030, "werneck": 1030, "titov": [1030, 1032, 1035, 1036], "nilesh": 1030, "kevlani": 1030, "notmatthancock": [1030, 1032], "nzw": 1030, "oren": 1030, "milman": 1030, "osaid": 1030, "rehman": 1030, "nasir": 1030, "fernand": [1030, 1036, 1037], "olden": 1030, "pierreablin": 1030, "pietruh": 1030, "pinaki": 1030, "nath": 1030, "chowdhuri": [1030, 1036], "piotr": [1030, 1031], "szyma\u0144ski": [1030, 1031], "pradeep": [1030, 1031], "raamana": [1030, 1031], "pravar": 1030, "mahajan": [1030, 1032], "qingi": 1030, "rajendra": 1030, "arora": [1030, 1037], "rankylau": 1030, "kosobrodov": 1030, "rragundez": 1030, "sagnik": 1030, "bhattacharya": 1030, "radhakrishnan": 1030, "saqib": 1030, "nizam": 1030, "shamsi": 1030, "satish": 1030, "gigant": [1030, 1032, 1037, 1038], "flennerhag": 1030, "sebastien": 1030, "shalil": 1030, "awalei": 1030, "shangwu": [1030, 1031], "sharad": 1030, "vijalapuram": 1030, "shenhanc78": 1030, "rastogi": 1030, "siftikha": 1030, "sinclert": 1030, "p\u00e9rez": 1030, "solutusimmensu": 1030, "somya": 1030, "anand": [1030, 1034], "srajan": 1030, "paliw": 1030, "sriharsha": [1030, 1031], "hatwar": [1030, 1031], "mcdowel": 1030, "syonekura": 1030, "takanori": 1030, "hayashi": 1030, "tarcusx": 1030, "theriley106": 1030, "heavei": 1030, "augspurg": [1030, 1032], "trishnendu": 1030, "ghorai": 1030, "twosigmajab": 1030, "umar": [1030, 1031], "farouk": [1030, 1031], "urvang": [1030, 1032], "patel": [1030, 1032, 1033, 1034, 1036], "vadim": [1030, 1034, 1035], "markovtsev": 1030, "vinit": 1030, "vinod": 1030, "viraj": 1030, "mavani": 1030, "navkal": 1030, "vqean3": [1030, 1031], "vufg": 1030, "wallygauz": 1030, "wdevazelh": 1030, "barnett": 1030, "rosenfeld": 1030, "yime": 1030, "ymazari": 1030, "yufeng": 1030, "griffith": [1030, 1031], "z\u00e9": 1030, "vin\u00edciu": 1030, "zhenq": 1030, "zhiqe": 1030, "xiao": [1030, 1032, 1035, 1036, 1037, 1038, 1039], "couldn": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "12955": 1031, "klopfer": 1031, "14197": 1031, "14024": 1031, "nicolashug": 1031, "13974": 1031, "hoang": [1031, 1032], "fhoang7": 1031, "14393": 1031, "guillem": [1031, 1032, 1037], "subi": [1031, 1032, 1037], "14087": 1031, "14067": 1031, "stalei": [1031, 1032], "14092": 1031, "14053": 1031, "13947": 1031, "instanci": 1031, "13910": 1031, "13894": 1031, "myatt": [1031, 1032], "min_max_axi": 1031, "13741": 1031, "roddi": [1031, 1032], "macsween": [1031, 1032], "14309": 1031, "13864": 1031, "paresh": [1031, 1032], "13877": 1031, "_sag": 1031, "sag_solv": 1031, "3591": 1031, "13317": 1031, "13157": 1031, "13086": 1031, "cole": 1031, "13485": 1031, "assia": 1031, "benbihi": 1031, "13651": 1031, "reloc": 1031, "13486": 1031, "13427": 1031, "couvreur": [1031, 1032], "9069": 1031, "13835": 1031, "10727": 1031, "wood": 1031, "13250": 1031, "13241": 1031, "12143": 1031, "11650": 1031, "non_negative_factor": [1031, 1033, 1034, 1035, 1039], "12988": 1031, "8769": 1031, "11000": 1031, "thibault": 1031, "sejourn": 1031, "changedbehaviourwarn": 1031, "11526": 1031, "6848": 1031, "glemaitr": [1031, 1032, 1034], "11727": 1031, "13266": 1031, "13545": 1031, "sorro": 1031, "12807": 1031, "12513": 1031, "12543": 1031, "storch": 1031, "13260": 1031, "13283": 1031, "13524": 1031, "13174": 1031, "13496": 1031, "13620": 1031, "12436": 1031, "12983": 1031, "13251": 1031, "joshuakennethjon": 1031, "12715": 1031, "13164": 1031, "12834": 1031, "leastsquareserror": 1031, "update_terminal_region": 1031, "6463": 1031, "movelikeriv": 1031, "13193": 1031, "12599": 1031, "13779": 1031, "13780": 1031, "12916": 1031, "13641": 1031, "8478": 1031, "12177": 1031, "12583": 1031, "13601": 1031, "danylo": 1031, "densif": 1031, "13240": 1031, "bartosz": 1031, "13562": 1031, "11646": 1031, "11699": 1031, "make_dataset": 1031, "13336": 1031, "toleranbc": 1031, "11754": 1031, "13397": 1031, "fagan": 1031, "12174": 1031, "12972": 1031, "lucio": 1031, "fernandez": 1031, "arjona": 1031, "coeffeci": 1031, "13279": 1031, "13328": 1031, "13389": 1031, "basesgdclassifi": 1031, "13422": 1031, "cl\u00e9ment": [1031, 1035, 1037], "doumouro": 1031, "unhandl": 1031, "13363": 1031, "12821": 1031, "13350": 1031, "j\u00e9r\u00f4me": [1031, 1032, 1033], "dock\u00e8": [1031, 1032, 1033], "9907": 1031, "12232": 1031, "sangeeth": 1031, "11179": 1031, "13151": 1031, "12568": 1031, "8216": 1031, "romuald": 1031, "menuet": 1031, "12732": 1031, "12334": 1031, "13607": 1031, "12855": 1031, "pawel": 1031, "sendyk": 1031, "13628": 1031, "13447": 1031, "10580": 1031, "sandra": [1031, 1037], "mitrov": 1031, "13554": 1031, "celelibi": 1031, "13142": 1031, "11354": 1031, "12613": 1031, "12669": 1031, "torrella": [1031, 1032, 1038], "12861": 1031, "8773": 1031, "13366": 1031, "fournier": 1031, "10440": 1031, "12222": 1031, "10058": 1031, "chiotelli": 1031, "12279": 1031, "12582": 1031, "my_pipelin": 1031, "2568": 1031, "make_": 1031, "11364": 1031, "baze": 1031, "petrushev": 1031, "__len__": 1031, "13439": 1031, "12908": 1031, "drew": 1031, "13253": 1031, "12116": 1031, "12197": 1031, "12251": 1031, "float16": 1031, "13007": 1031, "raffaello": 1031, "baluyot": 1031, "13333": 1031, "13459": 1031, "hunter": 1031, "mcgushion": 1031, "8508": 1031, "6261": 1031, "vettigli": 1031, "justglow": 1031, "12300": 1031, "11458": 1031, "mitar": 1031, "milutinov": 1031, "12344": 1031, "13549": 1031, "warn_on_dtyp": 1031, "check_pairwise_arrai": 1031, "13382": 1031, "prathmesh": 1031, "saval": 1031, "11705": 1031, "11973": 1031, "our_rand_r": 1031, "madhura": [1031, 1033, 1034, 1037, 1038], "parikh": [1031, 1036, 1037, 1038], "13531": 1031, "check_fit_idempot": 1031, "alberto": [1031, 1035, 1036], "torr": 1031, "amourav": 1031, "assiaben": 1031, "micha\u0142owski": 1031, "brentfagan": 1031, "chenal": [1031, 1032, 1034], "choe": 1031, "drewmjohnston": 1031, "dror": 1031, "atariah": 1031, "esvhd": 1031, "falak": 1031, "gandenberg": 1031, "luqi": 1031, "jf": 1031, "kulbear": 1031, "leandro": [1031, 1035], "hermida": [1031, 1035], "luk": 1031, "manimaran": [1031, 1033, 1034, 1035, 1036], "gaido": 1031, "marinelm": 1031, "masstran": 1031, "roeschk": 1031, "aftab": 1031, "abdela": 1031, "ibraheem": 1031, "mwestt": 1031, "iijima": 1031, "oresti": 1031, "osman": [1031, 1037], "flanagan": [1031, 1032], "soriano": 1031, "peai": 1031, "pim": 1031, "haan": 1031, "raf": 1031, "rajdeep": 1031, "dua": 1031, "ra\u00fal": 1031, "garc\u00eda": [1031, 1032, 1037], "lekhwani": 1031, "varma": 1031, "shiyu": 1031, "duan": [1031, 1033], "smari": [1031, 1032, 1033], "st\u00e9phane": [1031, 1032, 1036, 1037], "surgan12": 1031, "thibsej": 1031, "xhan": 1031, "xinyuliu12": 1031, "zayd": 1031, "hammoudeh": 1031, "16397": [1032, 1033], "16500": 1032, "16505": 1032, "16076": 1032, "shack": [1032, 1033, 1034], "15930": 1032, "inder128": 1032, "15810": 1032, "15898": 1032, "gargsya": 1032, "15933": 1032, "15760": 1032, "15888": 1032, "15936": 1032, "dizietasahi": 1032, "15879": 1032, "bibhash": [1032, 1033], "chandra": [1032, 1033, 1036], "mitra": [1032, 1033, 1037], "15937": 1032, "blyston": [1032, 1033], "15863": 1032, "abstractmethod": 1032, "_check_x": 1032, "basenb": 1032, "15996": 1032, "brigitta": [1032, 1033, 1034, 1038], "sip\u0151cz": [1032, 1033, 1034, 1038], "15751": 1032, "tirth": [1032, 1033], "15868": 1032, "nikla": [1032, 1033], "smedemark": 1032, "marguli": 1032, "15797": 1032, "15947": 1032, "revamp": 1032, "14849": 1032, "_name_estim": 1032, "_gb": 1032, "facto": 1032, "_birch": 1032, "9250": 1032, "12927": 1032, "deprecationwarn": 1032, "interfer": 1032, "hinder": 1032, "15080": 1032, "14464": 1032, "13575": 1032, "10482": 1032, "13726": 1032, "shuzh": 1032, "9288": 1032, "15057": 1032, "korolev": 1032, "15120": 1032, "7943": 1032, "12303": 1032, "14510": 1032, "14890": 1032, "miguel": 1032, "cabrera": 1032, "14544": 1032, "15304": 1032, "jaim": 1032, "ferrando": 1032, "huerta": 1032, "12068": 1032, "12145": 1032, "13609": 1032, "camila": 1032, "williamson": 1032, "15661": 1032, "15160": 1032, "14259": 1032, "14764": 1032, "14740": 1032, "st\u00e9phan": 1032, "tulken": 1032, "14623": 1032, "sarra": 1032, "habchi": 1032, "15257": 1032, "willocx": 1032, "12650": 1032, "13960": 1032, "multiouput": 1032, "14908": 1032, "martina": [1032, 1034], "vila": [1032, 1034], "15382": 1032, "14933": 1032, "15138": 1032, "cusick": 1032, "14406": 1032, "14012": 1032, "faouzi": [1032, 1033], "13769": 1032, "14194": 1032, "least_absolute_devi": [1032, 1034, 1035], "13896": 1032, "13933": 1032, "14710": 1032, "categorical_crossentropi": [1032, 1036], "14869": 1032, "14682": 1032, "hancock": 1032, "5963": 1032, "pablo": [1032, 1035, 1036], "dubou": 1032, "14287": 1032, "15375": 1032, "14305": 1032, "14114": 1032, "15084": 1032, "14294": 1032, "14907": 1032, "14602": 1032, "chawla": 1032, "vectorizermixin": 1032, "14430": 1032, "strip_accents_unicod": 1032, "15100": 1032, "gradi": 1032, "overflowerror": 1032, "15463": 1032, "norvan": 1032, "sahin": 1032, "14520": 1032, "11635": 1032, "alec": 1032, "13704": 1032, "15557": 1032, "14378": 1032, "masashi": [1032, 1034], "shibata": 1032, "ashim": 1032, "bhattarai": 1032, "15010": 1032, "skip_comput": 1032, "13773": 1032, "14356": 1032, "15393": 1032, "venkatachalam": [1032, 1033, 1034, 1035, 1036], "14646": 1032, "14028": 1032, "15429": 1032, "14706": 1032, "14108": 1032, "14170": 1032, "14296": 1032, "13618": 1032, "13995": 1032, "14458": 1032, "14591": 1032, "14864": 1032, "15044": 1032, "15086": 1032, "15038": 1032, "15082": 1032, "13213": 1032, "14647": 1032, "linalgerror": 1032, "13393": 1032, "13707": 1032, "training_data_": 1032, "14357": 1032, "14900": 1032, "socastro": [1032, 1038], "9951": 1032, "14936": 1032, "15083": 1032, "12789": 1032, "15274": 1032, "13938": 1032, "15049": 1032, "toccac": 1032, "ptocca": 1032, "13231": 1032, "dong": 1032, "13467": 1032, "14595": 1032, "14865": 1032, "l\u00e9onard": [1032, 1037], "binet": [1032, 1037], "14732": 1032, "14417": 1032, "15625": 1032, "12258": 1032, "14898": 1032, "matcovici": 1032, "14593": 1032, "reboul": 1032, "14549": 1032, "14704": 1032, "15096": 1032, "14629": 1032, "15488": 1032, "15490": 1032, "12569": 1032, "bicker": 1032, "9597": 1032, "wenbo": [1032, 1034], "zhao": [1032, 1034, 1035, 1036, 1037], "14336": 1032, "dexter": 1032, "9274": 1032, "perri": 1032, "13806": 1032, "ana\u00ebl": 1032, "beaugnon": 1032, "15119": 1032, "15053": 1032, "13290": 1032, "13987": 1032, "_pairwis": [1032, 1034], "13925": 1032, "robson": 1032, "15524": 1032, "xun": [1032, 1034], "12557": 1032, "14286": 1032, "15099": 1032, "baselibsvm": 1032, "_sparse_fit": 1032, "14894": 1032, "danna": 1032, "naser": 1032, "12887": 1032, "15028": 1032, "guan": 1032, "14381": 1032, "11232": 1032, "sievert": 1032, "10815": 1032, "14035": 1032, "14475": 1032, "14538": 1032, "14872": 1032, "upcast": [1032, 1036], "15094": 1032, "choose_check_classifiers_label": 1032, "enforce_estimator_tags_i": 1032, "mock": 1032, "mockdatafram": 1032, "checkingclassifi": 1032, "newton_cg": 1032, "random_choice_csc": 1032, "fast_dict": 1032, "parallel_help": 1032, "14902": 1032, "14971": 1032, "nep": 1032, "14702": 1032, "13013": 1032, "13875": 1032, "14680": 1032, "check_classifier_multioutput": 1032, "check_regressor_multioutput": 1032, "13392": 1032, "rok": 1032, "mihevc": 1032, "check_transformer_data_not_an_arrai": 1032, "mro": [1032, 1033], "14884": 1032, "alphonsu": 1032, "abbi": [1032, 1033], "popa": [1032, 1033], "abdur": 1032, "rahmaan": 1032, "janhang": 1032, "abenbihi": 1032, "abhinav": [1032, 1035], "sagar": 1032, "jana": 1032, "lagat": 1032, "alessandro": [1032, 1034, 1037], "surac": 1032, "siqueira": 1032, "alexgoryainov": 1032, "itk": [1032, 1033, 1034], "alexshack": [1032, 1033, 1034], "akinkunl": 1032, "kaseorg": 1032, "maldonado": [1032, 1035], "angela": [1032, 1033, 1037], "ambroz": [1032, 1033], "anisha": 1032, "keshavan": 1032, "gutierrez": 1032, "anuja": 1032, "archana": [1032, 1034], "alva": 1032, "arnaudstiegl": 1032, "arpanchowdhri": 1032, "ashimb9": 1032, "ayomid": 1032, "bamidel": 1032, "baran": 1032, "buluttekin": 1032, "barrycg": 1032, "bill": [1032, 1033], "mill": 1032, "biswadip": 1032, "mandal": 1032, "blackd0t": 1032, "barklei": 1032, "c56poni": 1032, "camilaagw": 1032, "cartman_nabana": 1032, "catajara": 1032, "cgsavard": [1032, 1033], "vesteghem": 1032, "dakota": 1032, "grusak": 1032, "datenbergwerk": 1032, "dormagen": 1032, "deeplook": 1032, "drgfreeman": 1032, "cashman": 1032, "edvardlindelof": 1032, "ndirangu": [1032, 1036], "eunseop": 1032, "jeong": 1032, "fanni": 1032, "federicopisanu": 1032, "divo": 1032, "flaviomorelli": 1032, "francidona": 1032, "franco": 1032, "luqu": 1032, "freder": 1032, "haas": 1032, "g0g0gadget": 1032, "altai": 1032, "vale": 1032, "rio": [1032, 1034, 1035, 1036], "ganevgv": 1032, "gdex1": 1032, "getgaurav2": 1032, "gideon": 1032, "sonoiya": 1032, "gpapadok": [1032, 1036], "mogavero": 1032, "h4dr1en": 1032, "hadshirt": 1032, "hailei": [1032, 1033], "nguyen": [1032, 1033, 1036, 1037], "hannah": [1032, 1034, 1036], "bruce": [1032, 1033], "macdonald": [1032, 1033], "honglu": 1032, "ingrid": 1032, "spielman": 1032, "a16": [1032, 1033], "jaehong": 1032, "jai": [1032, 1036], "jeromedock": 1032, "jesper": 1032, "dramsch": 1032, "joanna": 1032, "ortiz": [1032, 1038], "kanika": 1032, "sabharw": 1032, "katarina": [1032, 1034], "slama": [1032, 1034], "kellycarmodi": 1032, "eth": 1032, "kensuk": 1032, "arai": 1032, "kesshi": [1032, 1033], "kevad": 1032, "lofti": [1032, 1033], "winata": [1032, 1034], "sheng": 1032, "dolmatov": 1032, "kirthi": 1032, "shankar": 1032, "sivamani": 1032, "katyal": 1032, "lakshmi": 1032, "krishnan": 1032, "lalliacqua": [1032, 1035], "lbfin": 1032, "loopym": 1032, "lostcoast": 1032, "huynh": [1032, 1034], "lrjball": [1032, 1033], "roeder": 1032, "maggiecheg": [1032, 1036], "maithreyi": 1032, "venkatesh": 1032, "maltimor": 1032, "maocx": 1032, "douriez": [1032, 1033], "oywa": 1032, "aladago": 1032, "mbillingr": 1032, "clare": 1032, "micah": 1032, "miguelbarao": 1032, "mina": [1032, 1033], "naghshhnejad": [1032, 1033], "motmoti": 1032, "mschaffenroth": 1032, "natasha": 1032, "nezar": 1032, "nidhin": 1032, "pattaniyil": 1032, "nishan": 1032, "mann": 1032, "nitya": 1032, "mandyam": 1032, "novaya": [1032, 1035], "nxorabl": 1032, "oleg": 1032, "stikhin": 1032, "saleem": 1032, "panpiort8": [1032, 1034], "paula": [1032, 1033], "poorna": [1032, 1034], "pspachtholz": [1032, 1033, 1034], "qdeffens": [1032, 1035], "garg": [1032, 1033], "rapha\u00ebl": 1032, "bournhonesqu": 1032, "reza": 1032, "gharibi": 1032, "payn": 1032, "rlm": 1032, "juergen": [1032, 1037], "sanjabi": 1032, "ruchitagard": 1032, "ruth": 1032, "waithera": 1032, "sackei": 1032, "samesh": [1032, 1033], "lakhotia": [1032, 1033], "sewook": 1032, "dare": 1032, "shreya": 1032, "simoncw": 1032, "smujjiga": 1032, "s\u00f6nke": 1032, "behrend": 1032, "soumirai": 1032, "steinfurt": [1032, 1034], "cowlei": 1032, "th0rwa": [1032, 1033], "theoptip": [1032, 1033], "theotheo": 1032, "thierno": 1032, "ibrahima": 1032, "diop": 1032, "schmitt": [1032, 1033], "tilen": 1032, "kusterl": 1032, "timsaur": 1032, "tola": 1032, "topisan": 1032, "ttang131": 1032, "veerlosar": 1032, "luzgin": 1032, "jeanselm": 1032, "lostanlen": 1032, "vnherdeiro": 1032, "wendi": 1032, "willdarnel": 1032, "wolframalpha": 1032, "xcjason": 1032, "martian": 1032, "xsat": 1032, "yinglr": 1032, "yokasr": 1032, "maxin": [1032, 1033], "yulia": 1032, "zamrii": 1032, "feng": [1032, 1034, 1035, 1036], "17959": 1033, "17848": 1033, "17742": 1033, "17995": 1033, "thomaz": 1033, "santana": [1033, 1036], "dsouza": [1033, 1034, 1035, 1036], "17433": 1033, "17985": 1033, "multinomialdevi": 1033, "logloss": 1033, "17694": 1033, "rempfler": 1033, "tsutomu": 1033, "kusanagi": [1033, 1035], "17357": 1033, "18016": 1033, "x_copi": 1033, "17914": 1033, "15730": 1033, "forrest": [1033, 1034], "17309": 1033, "swier": [1033, 1034], "heer": 1033, "17812": 1033, "bruno": [1033, 1034, 1035], "idl": 1033, "17210": 1033, "17235": 1033, "17204": 1033, "changed_onli": 1033, "17205": 1033, "15005": [1033, 1035], "slep009": [1033, 1035, 1036], "estimator_samples_": 1033, "16149": 1033, "11950": 1033, "11514": 1033, "16075": 1033, "16484": 1033, "16257": 1033, "simona": [1033, 1034, 1035], "maggio": [1033, 1034, 1035], "16801": 1033, "rcwoolston": 1033, "16431": 1033, "14048": 1033, "15963": 1033, "16084": 1033, "15950": 1033, "stephani": 1033, "15980": 1033, "wconnel": 1033, "15709": 1033, "15707": 1033, "maciej": 1033, "mikulski": 1033, "16006": 1033, "rushabh": 1033, "vasani": 1033, "streamhandl": 1033, "logger": 1033, "handler": 1033, "16451": 1033, "16280": 1033, "16837": 1033, "wornbb": 1033, "15669": 1033, "chaitanya": 1033, "16224": 1033, "schwetlick": [1033, 1034], "gelavizh": 1033, "ahmadi": 1033, "marija": [1033, 1034], "vlajic": [1033, 1034], "wheeler": [1033, 1034], "16841": 1033, "16655": 1033, "16718": 1033, "miotto": 1033, "16981": 1033, "g\u00f3rski": [1033, 1034], "14696": 1033, "14516": 1033, "15582": 1033, "16069": 1033, "bail": 1033, "16183": 1033, "16182": 1033, "santhosh": 1033, "16437": 1033, "hwan": 1033, "cho": 1033, "16539": 1033, "deros": 1033, "16692": 1033, "16663": 1033, "15834": 1033, "santiago": 1033, "mola": 1033, "16103": 1033, "divyaprabha": 1033, "selectormixin": 1033, "16132": 1033, "trimeta": 1033, "15503": 1033, "15782": 1033, "plgreenliru": 1033, "16403": 1033, "narendra": 1033, "mukherje": 1033, "16508": 1033, "15864": 1033, "14300": 1033, "15436": 1033, "15652": 1033, "15179": 1033, "angelaambroz": 1033, "15773": 1033, "15655": 1033, "14848": 1033, "absgrad": 1033, "_newton_cg": 1033, "16266": 1033, "standard_coef_": 1033, "standard_intercept_": 1033, "average_coef_": 1033, "average_intercept_": 1033, "16261": 1033, "brandt": 1033, "16849": 1033, "14264": 1033, "17021": 1033, "16323": 1033, "16362": 1033, "16442": 1033, "parson": [1033, 1035], "rick": 1033, "mackenbach": 1033, "16993": 1033, "emit": 1033, "15622": 1033, "mors": 1033, "15918": 1033, "kubin": 1033, "fit_grid_point": 1033, "16401": 1033, "pratama": 1033, "sutiono": 1033, "15953": 1033, "15959": 1033, "16111": 1033, "16090": 1033, "jayaratn": [1033, 1034, 1037, 1038], "14075": 1033, "meyer89": 1033, "16117": 1033, "15785": 1033, "16245": 1033, "16585": 1033, "15762": 1033, "16466": 1033, "16632": 1033, "maura": 1033, "pintor": 1033, "battista": 1033, "biggio": 1033, "15946": 1033, "ngshya": 1033, "32767": 1033, "mersenn": 1033, "twister": 1033, "31bit": 1033, "63bit": 1033, "crude": 1033, "postprocessor": 1033, "lemir": 1033, "13511": 1033, "kennel": 1033, "11296": 1033, "15558": 1033, "15806": 1033, "16331": 1033, "batiss": 1033, "15926": 1033, "16021": 1033, "sparsearrai": 1033, "16728": 1033, "uint": 1033, "17032": 1033, "_safe_tag": 1033, "16950": 1033, "15380": 1033, "acitiv": 1033, "16726": 1033, "16112": 1033, "16622": 1033, "17061": 1033, "aleksandra": 1033, "kocot": 1033, "alonso": [1033, 1035], "allend": [1033, 1035], "ana": [1033, 1035], "casado": 1033, "ankit810": 1033, "arunav": 1033, "konwar": 1033, "maingret": 1033, "beier": 1033, "berni": 1033, "bharathi": 1033, "brigi": [1033, 1034], "castachick": 1033, "castor": 1033, "corri": 1033, "bartelheim": 1033, "dani\u00ebl": 1033, "gelder": 1033, "daphn": 1033, "breuer": 1033, "cort": [1033, 1034, 1037, 1038], "dbauer9": 1033, "borovikova": 1033, "eln": 1033, "emili": [1033, 1034], "leung": 1033, "evgeni": 1033, "chasnovski": 1033, "fabiana": 1033, "facundo": [1033, 1036], "ferr\u00edn": 1033, "franziska": 1033, "boenisch": 1033, "bolmier": [1033, 1034, 1038], "gholdman1": 1033, "gonthier": 1033, "hao": [1033, 1034, 1036, 1037], "chun": [1033, 1034, 1036, 1037, 1038], "haoyin": [1033, 1035, 1036], "h\u00e9lion": 1033, "bourboux": 1033, "himanshu": [1033, 1036], "hirofumi": [1033, 1034], "suzuki": [1033, 1034], "huangk10": 1033, "kemenad": 1033, "hye": 1033, "sung": 1033, "indecisiveus": [1033, 1034], "inderjeet": 1033, "jjmistri": 1033, "haitz": [1033, 1035, 1036], "legarreta": [1033, 1035, 1036], "gorro\u00f1o": [1033, 1035, 1036], "judithabk6": 1033, "jumon": 1033, "kathryn": 1033, "krishnachaitanya9": 1033, "gia": 1033, "thuan": 1033, "lkubin": 1033, "lopusz": 1033, "lucgiffon": 1033, "lucyleeow": 1033, "kemk": 1033, "magda": 1033, "zielinska": 1033, "mandi": [1033, 1036], "gu": [1033, 1034, 1036], "manish": 1033, "aradwad": 1033, "mariana": 1033, "meirel": 1033, "mariel": 1033, "mc4229": 1033, "shoemak": 1033, "micha\u0142": 1033, "s\u0142apek": 1033, "mojca": 1033, "bertoncelj": 1033, "narendramukherje": 1033, "nicolasservel": 1033, "nkish": 1033, "noa": 1033, "tamir": [1033, 1036], "olicairn": 1033, "ur": 1033, "lenz": [1033, 1037], "delanou": 1033, "qizhi": 1033, "quang": 1033, "rachelcjordan": 1033, "raduspaimoc": 1033, "riccardo": 1033, "folloni": 1033, "ritchi": 1033, "rori": 1033, "hartong": 1033, "redden": 1033, "sambhav": 1033, "kothari": 1033, "santhoshbala18": 1033, "sarat": 1033, "addep": 1033, "scibol": 1033, "kie\u00dfl": 1033, "sergiodsr": 1033, "shiki": 1033, "shubh": 1033, "chatterje": 1033, "simonamaggio": [1033, 1034, 1035], "snowhit": 1033, "stareh": 1033, "marsh": 1033, "sunmi": 1033, "yoon": 1033, "talgatomarov": 1033, "tamirlan1": 1033, "nonner": 1033, "vink": [1033, 1035], "tiphain": 1033, "viard": 1033, "titu": 1033, "vachan": 1033, "vandana": 1033, "iyer": 1033, "waelbenamara": 1033, "wderos": 1033, "wenliwyan": 1033, "windber": 1033, "19579": 1034, "19646": 1034, "stopiter": 1034, "19922": 1034, "19732": 1034, "ishikawa": [1034, 1035], "19407": 1034, "ushtanit": [1034, 1035], "19982": 1034, "19939": 1034, "halvic": 1034, "19703": 1034, "sobkevich": 1034, "villaz\u00f3n": 1034, "terraza": 1034, "fonari": [1034, 1035], "19182": 1034, "yosuk": [1034, 1035], "kobayashi": [1034, 1035], "19721": 1034, "19659": 1034, "19211": 1034, "19847": 1034, "xiaoyu": 1034, "chai": [1034, 1037, 1038], "19308": 1034, "19234": 1034, "19727": 1034, "delong": [1034, 1035], "19888": 1034, "19924": 1034, "19271": 1034, "zhaowei": 1034, "19580": 1034, "brice": [1034, 1035], "adamson": 1034, "wil": 1034, "yegelwel": 1034, "css": 1034, "19417": 1034, "19179": 1034, "19126": 1034, "17448": 1034, "17107": 1034, "17546": 1034, "17856": 1034, "17984": 1034, "riedmann": 1034, "francesco": [1034, 1037], "casalegno": 1034, "18052": 1034, "sean": [1034, 1035, 1037], "stallei": 1034, "17937": 1034, "counts_": 1034, "init_size_": 1034, "17864": 1034, "17616": 1034, "18167": 1034, "18256": 1034, "jayratn": 1034, "16392": 1034, "17095": 1034, "18746": 1034, "norm_y_weight": 1034, "x_mean_": 1034, "y_mean_": 1034, "x_std_": 1034, "y_std_": 1034, "18768": 1034, "18302": 1034, "md5": 1034, "checksum": 1034, "14800": 1034, "17396": 1034, "jiaxiang": 1034, "17491": 1034, "18280": 1034, "17499": 1034, "17610": 1034, "18525": 1034, "11064": 1034, "17414": 1034, "18149": 1034, "17679": 1034, "18528": 1034, "villanova": [1034, 1035], "14446": 1034, "18394": 1034, "16985": 1034, "garbag": 1034, "18334": 1034, "multicor": [1034, 1035], "18341": 1034, "egor": 1034, "smirnov": 1034, "18410": 1034, "17702": 1034, "18326": 1034, "changedbehaviorwarn": 1034, "nonblasdotwarn": 1034, "17804": 1034, "17367": 1034, "15427": 1034, "gangesh": 1034, "gudmalwar": 1034, "erin": 1034, "6545": 1034, "17159": 1034, "15361": 1034, "17878": 1034, "17090": 1034, "_check_bounds_param": 1034, "12638": 1034, "lannuzel": 1034, "17526": 1034, "ayako": 1034, "yagi": 1034, "17612": 1034, "srimukh": 1034, "sripada": 1034, "16493": 1034, "darshan": 1034, "15636": 1034, "18987": 1034, "16619": 1034, "16906": 1034, "roei": 1034, "kahni": 1034, "18293": 1034, "16289": 1034, "kishimoto": 1034, "18639": 1034, "13003": 1034, "s\u00e1nchez": 1034, "18545": 1034, "laurenz": 1034, "reitsam": 1034, "17578": 1034, "knox": 1034, "6624": 1034, "marijn": 1034, "vliet": 1034, "18121": 1034, "18607": 1034, "fhaselbeck": 1034, "18622": 1034, "haesun": [1034, 1037, 1038], "10493": 1034, "17997": 1034, "maisonneuv": 1034, "square_dist": 1034, "17662": 1034, "18278": 1034, "17412": 1034, "16625": 1034, "10591": 1034, "karnowski": 1034, "plot_det_curv": [1034, 1035], "18176": 1034, "10708": 1034, "15007": 1034, "hathidara": 1034, "10711": 1034, "17192": 1034, "avi": [1034, 1035], "17225": 1034, "17569": 1034, "17651": 1034, "mato": 1034, "17777": 1034, "shubhanshu": 1034, "mishra": [1034, 1035], "17826": 1034, "decal": 1034, "willard": 1034, "17935": 1034, "cari": 1034, "goltermann": 1034, "18114": 1034, "18405": 1034, "yakov": 1034, "pchelintsev": 1034, "13900": 1034, "17478": 1034, "teon": 1034, "13204": 1034, "kosic": 1034, "18527": 1034, "18343": 1034, "devi": 1034, "sandeep": 1034, "18595": 1034, "18222": 1034, "18266": 1034, "subrat": 1034, "sahu": 1034, "15126": 1034, "17987": 1034, "17233": 1034, "zolisa": 1034, "bleki": 1034, "histgradientboost": 1034, "18124": 1034, "brocchini": 1034, "armstrong": 1034, "17427": 1034, "17038": 1034, "neighborsbas": [1034, 1037], "17148": 1034, "18691": 1034, "18370": 1034, "18612": 1034, "17603": 1034, "17604": 1034, "17606": 1034, "17608": 1034, "17609": 1034, "17633": 1034, "17661": 1034, "17932": 1034, "16352": 1034, "17759": 1034, "18269": 1034, "17876": 1034, "18429": 1034, "biernat": 1034, "17317": 1034, "17406": 1034, "wick": 1034, "18406": 1034, "17833": 1034, "yashika": 1034, "18510": 1034, "18447": 1034, "16066": 1034, "18682": 1034, "16935": 1034, "17193": 1034, "16335": 1034, "14982": 1034, "11682": 1034, "patric": [1034, 1035], "15763": 1034, "16530": 1034, "shuhua": 1034, "17386": 1034, "17187": 1034, "x_idx_sort": 1034, "17614": 1034, "check_methods_sample_order_invari": [1034, 1036], "17598": 1034, "ngo": 1034, "17992": 1034, "endian": 1034, "17644": 1034, "18508": 1034, "abo7atm": 1034, "spannbauer": 1034, "deodhar": 1034, "alexandracraciun": 1034, "amy12xx": 1034, "tiwari": 1034, "choraria": 1034, "subramaniyan": 1034, "kushwaha": 1034, "atsushi": [1034, 1035], "nukariya": [1034, 1035], "aura": 1034, "autoviz": 1034, "auto_viml": 1034, "avinash": 1034, "anak": 1034, "barankaraku": 1034, "barberogaston": 1034, "beatrizsmg": 1034, "mainy": 1034, "bossan": [1034, 1036, 1037, 1038], "pedigo": [1034, 1035], "bhavika": 1034, "devnani": 1034, "biprateep": 1034, "dei": 1034, "bmaisonn": 1034, "byron": 1034, "ceethinwa": [1034, 1035], "chaitanyamog": 1034, "clmbst": 1034, "coelhudo": 1034, "crispinlogan": [1034, 1037, 1038], "cristina": 1034, "mula": 1034, "darioka": [1034, 1036, 1037], "declan": 1034, "neill": 1034, "deeksha": 1034, "madan": 1034, "fiegel": [1034, 1035, 1037], "khoo": 1034, "eschibli": 1034, "fran": [1034, 1035, 1036], "larsson": [1034, 1035, 1036], "sheni": 1034, "genvalen": [1034, 1035, 1036, 1037, 1038], "kiragu": 1034, "gesa": 1034, "stupperich": 1034, "ghislain": 1034, "vaillant": 1034, "gim": 1034, "seng": 1034, "chevali": 1034, "bohl": [1034, 1036], "schole": 1034, "hitesh": 1034, "somani": 1034, "hoda1394": 1034, "moin": 1034, "hugorichard": 1034, "isuru": 1034, "wiryadi": 1034, "j0rd1smit": 1034, "jaehyun": 1034, "ahn": 1034, "tae": 1034, "hoctor": 1034, "vese": 1034, "jeevan": 1034, "jeroenpeterbo": 1034, "jhay": 1034, "jigna": 1034, "panchal": 1034, "jim0421": 1034, "joaquin": 1034, "gorb": 1034, "moya": 1034, "kartik": 1034, "chugh": 1034, "kaylani2": 1034, "kendrick": 1034, "cetina": 1034, "kenni": 1034, "isakov": 1034, "koki": 1034, "nishihara": 1034, "krum": [1034, 1036], "arnaudov": [1034, 1036], "oldja": 1034, "guitton": 1034, "mariam": 1034, "l\u00f6ning": 1034, "scheubrein": 1034, "megasari": 1034, "mathschi": 1034, "giudic": 1034, "milan": 1034, "straka": 1034, "muoki": 1034, "caleb": 1034, "haiat": 1034, "nadia": 1034, "tahiri": 1034, "ph": 1034, "hamada": 1034, "neil": 1034, "botelho": 1034, "nil": 1034, "noelano": 1034, "oj_lappi": 1034, "oleh": [1034, 1036], "kozynet": [1034, 1036], "pankaj": 1034, "jindal": 1034, "pardeep": 1034, "parthiv": 1034, "chigurupati": 1034, "pgithub": 1034, "probinette4": 1034, "pwalchessen": 1034, "rachel": [1034, 1037], "fischoff": 1034, "toshniw": 1034, "rafei": 1034, "iqbal": 1034, "rahul": 1034, "jakhar": 1034, "rachum": 1034, "ramyanp": [1034, 1035], "rauwuckl": 1034, "ravi": [1034, 1037], "kiran": 1034, "boggavarapu": 1034, "rishi": 1034, "advani": 1034, "rithvik": 1034, "romijnd": 1034, "tavenard": 1034, "rubi": 1034, "werman": 1034, "ryotaro": 1034, "tsukada": 1034, "sadak": 1034, "khandelw": 1034, "ezebunandu": 1034, "kimbinyi": 1034, "shail": 1034, "keller": 1034, "shao": [1034, 1035, 1036], "shooter23": [1034, 1035], "soledad": 1034, "galli": 1034, "subrat93": 1034, "sunitha": 1034, "selvan": 1034, "kusanagi2": 1034, "terenc": [1034, 1035], "honl": [1034, 1035], "thij": [1034, 1037, 1038], "thomas9292": 1034, "thorben": 1034, "tijanajovanov": 1034, "timo": 1034, "tnwei": 1034, "ufmay": 1034, "umberto": 1034, "lupo": 1034, "vika": [1034, 1036], "viniciu": [1034, 1035], "fuck": [1034, 1035], "violeta": 1034, "watchtheblur": 1034, "willpeppo": 1034, "xethan": 1034, "qianm": 1034, "yue": 1034, "yutaro": 1034, "ikeda": 1034, "zacchari": 1034, "ramzi": 1034, "zoj613": 1034, "21271": 1035, "21833": 1035, "siavash": 1035, "rezazadeh": 1035, "19210": 1035, "21295": 1035, "22050": 1035, "21991": 1035, "19869": 1035, "21481": [1035, 1036], "andr\u00e9": [1035, 1036, 1038], "babino": [1035, 1036], "disconnect": 1035, "21915": 1035, "21694": 1035, "minknowski": 1035, "cdist": 1035, "21741": 1035, "21871": 1035, "21845": 1035, "21517": 1035, "21917": 1035, "21552": 1035, "escap": [1035, 1037], "21493": 1035, "21199": 1035, "20638": 1035, "bohn\u00e9": 1035, "21179": 1035, "21195": 1035, "21130": 1035, "20761": 1035, "21251": 1035, "min_idf": 1035, "max_idf": 1035, "20752": 1035, "alek": [1035, 1036], "lefebvr": [1035, 1036], "21340": 1035, "21093": 1035, "21351": 1035, "cve": 1035, "28975": 1035, "21336": 1035, "_check_sample_weight": 1035, "only_non_neg": 1035, "20880": 1035, "andr\u00e1": [1035, 1036, 1037, 1038], "if_delegate_has_method": [1035, 1036], "21145": 1035, "zahlii": 1035, "21389": 1035, "20002": 1035, "19310": 1035, "least_squar": 1035, "19733": 1035, "lad": 1035, "absolute_loss": 1035, "20165": 1035, "18444": 1035, "18010": 1035, "threadsaf": 1035, "18736": 1035, "17443": 1035, "19641": 1035, "20087": 1035, "fauchereau": 1035, "19002": 1035, "19052": 1035, "yusuk": 1035, "nagasaka": 1035, "17622": 1035, "19024": 1035, "franki": 1035, "robertson": 1035, "20117": 1035, "natchiappan": [1035, 1036], "19883": 1035, "20597": 1035, "20899": 1035, "20200": 1035, "fit_": 1035, "partial_fit_": 1035, "19297": 1035, "20560": 1035, "18393": 1035, "bittarello": 1035, "19263": 1035, "19244": 1035, "18459": 1035, "nd": 1035, "18898": 1035, "ora": 1035, "phongpanagnam": 1035, "21080": 1035, "ledoit_wolf_shrinkag": 1035, "20416": 1035, "defoi": 1035, "20583": 1035, "19365": 1035, "ateif": 1035, "sara": 1035, "19669": 1035, "importlib": 1035, "pyoxid": 1035, "20297": 1035, "20209": 1035, "19011": 1035, "20729": 1035, "12069": 1035, "19046": 1035, "surya": [1035, 1036], "18433": 1035, "19198": 1035, "19159": 1035, "beno\u00eet": 1035, "mal\u00e9zieux": 1035, "19908": 1035, "20512": 1035, "20960": 1035, "cgroup": [1035, 1036], "quota": [1035, 1036], "20477": 1035, "19799": 1035, "19564": 1035, "19836": 1035, "19162": 1035, "10096": 1035, "fenil": 1035, "suchak": 1035, "20159": 1035, "murata": [1035, 1036], "20534": 1035, "19296": 1035, "19035": 1035, "19520": 1035, "18964": 1035, "19401": 1035, "relova": 1035, "17169": 1035, "dmytro": 1035, "lituiev": 1035, "20380": 1035, "pulido": 1035, "felip": [1035, 1036, 1037, 1038], "bidu": [1035, 1036], "rutter": 1035, "20515": 1035, "carsten": 1035, "allefeld": 1035, "19568": 1035, "shyam": 1035, "20207": 1035, "tomohiro": 1035, "endo": 1035, "20161": 1035, "shuhei": 1035, "kayawari": 1035, "arka204": [1035, 1037], "20431": 1035, "pfaffel": 1035, "19428": 1035, "hamoumi": 1035, "19411": 1035, "20959": 1035, "20554": 1035, "xiangyin": 1035, "kong": 1035, "9978": 1035, "10027": 1035, "16449": 1035, "20231": 1035, "naka": 1035, "19571": 1035, "20155": 1035, "oura": [1035, 1036, 1037], "19004": 1035, "midvidi": 1035, "19055": 1035, "19172": 1035, "19426": 1035, "19499": 1035, "strubel": 1035, "19616": 1035, "19391": 1035, "19390": 1035, "linearmodel": 1035, "17743": 1035, "17772": 1035, "17746": 1035, "17785": 1035, "17750": 1035, "17769": 1035, "20683": 1035, "19491": 1035, "19472": 1035, "shortest_path": 1035, "20531": 1035, "19415": 1035, "17036": 1035, "20326": 1035, "uttam": 1035, "9843": 1035, "19643": 1035, "attard": 1035, "19784": 1035, "18328": 1035, "20312": 1035, "divyanshu": 1035, "deoli": 1035, "18543": 1035, "20552": 1035, "19278": 1035, "20030": 1035, "tingshan": 1035, "18649": 1035, "rodion": 1035, "martynov": 1035, "20619": 1035, "baseshufflesplit": 1035, "20056": 1035, "pabloduque0": 1035, "prematur": 1035, "20904": 1035, "tomasz": 1035, "jakubek": [1035, 1036], "18925": 1035, "poznik": [1035, 1036, 1037], "18842": 1035, "19473": 1035, "jiefangxuanyan": 1035, "20072": 1035, "20842": 1035, "mart\u00edn": [1035, 1036], "19631": 1035, "19790": 1035, "flynn": [1035, 1037], "18368": 1035, "19483": 1035, "20526": 1035, "19069": 1035, "19041": 1035, "20250": 1035, "20652": 1035, "19934": 1035, "gleb": [1035, 1037, 1038], "levitskii": 1035, "19734": 1035, "robinson": 1035, "19752": 1035, "zhehao": [1035, 1036, 1037, 1038], "19527": 1035, "19788": 1035, "19356": 1035, "makoeppel": 1035, "19879": 1035, "19906": 1035, "20727": 1035, "20961": 1035, "n_input_features_": 1035, "20240": 1035, "20843": 1035, "18959": 1035, "wstate": 1035, "20023": 1035, "19336": 1035, "20272": 1035, "19459": 1035, "bezuidenhout": 1035, "clifford": 1035, "akai": 1035, "nettei": 1035, "19948": 1035, "20657": 1035, "19766": 1035, "20385": 1035, "_weighted_percentil": 1035, "huberlossfunct": 1035, "20528": 1035, "_safe_index": 1035, "20673": 1035, "is_scalar_nan": 1035, "assert_warn": 1035, "assert_warns_messag": 1035, "20521": 1035, "abdulelah": 1035, "mesfer": 1035, "adrian": [1035, 1036, 1037], "garcia": 1035, "badaracco": 1035, "sad\u0142ocha": 1035, "rubial": 1035, "alessia": 1035, "marcolini": 1035, "alihan": 1035, "zihna": 1035, "alin": 1035, "amol": 1035, "deshmukh": 1035, "pessoa": 1035, "anavelyz": 1035, "ashish": [1035, 1038], "ashvith": 1035, "shetti": 1035, "baam": [1035, 1036], "baptbillard": 1035, "bmalezieux": 1035, "bumblebe": 1035, "caherrera": 1035, "meli": [1035, 1036, 1037], "chrissobel": 1035, "yeh": 1035, "chuliang": 1035, "cliffordemmanuel": 1035, "conner": 1035, "shen": 1035, "dimitri": [1035, 1036, 1037, 1038], "papadopoulo": [1035, 1036, 1037, 1038], "orfano": [1035, 1036, 1037, 1038], "dmallia17": 1035, "ds_ana": 1035, "jardim": 1035, "edwinwenink": 1035, "eleni": 1035, "markou": 1035, "ericellwang": [1035, 1036], "ezri": 1035, "mudd": 1035, "fato": 1035, "morina": 1035, "hafner": 1035, "flyingdutchman23": 1035, "uwha": [1035, 1036], "bereng": 1035, "frederick": 1035, "frellwan": 1035, "vicent": [1035, 1036, 1037], "geroldcsend": 1035, "glen": 1035, "gl\u00f2ria": [1035, 1037], "mu\u00f1oz": [1035, 1037], "gregorystrubel": 1035, "groceryheist": 1035, "guiweb": 1035, "haidar": [1035, 1036], "almubarak": [1035, 1036], "moritz": [1035, 1037], "g\u00fcnther": 1035, "mirza": 1035, "harutaka": 1035, "kawamura": 1035, "hassan": 1035, "alsawadi": 1035, "geovan": [1035, 1036], "gome": [1035, 1036], "lima": [1035, 1036], "ilic": 1035, "ikko": 1035, "ashimin": 1035, "isaack": 1035, "mungui": 1035, "ishaan": 1035, "bhat": [1035, 1037, 1038, 1039], "ishan": [1035, 1036], "iwhalv": 1035, "preiss": 1035, "budarz": 1035, "jannik": 1035, "jennif": 1035, "jianzhu": 1035, "guo": 1035, "jnboehm": 1035, "johanwork": 1035, "paton": 1035, "n\u00e1pole": 1035, "julio": 1035, "julyrashchenko": 1035, "jvm": 1035, "kadatatlu": 1035, "kishor": 1035, "karen": 1035, "palacio": 1035, "kmatt10": 1035, "kobaski": 1035, "kot271828": 1035, "kunj": 1035, "kurumeyuta": 1035, "kxytim": 1035, "lacrosse91": 1035, "laveen": 1035, "bagai": 1035, "leonardo": 1035, "rocco": [1035, 1036, 1037], "uieda": 1035, "leopoldo": 1035, "corona": 1035, "lsturtew": 1035, "lucca": 1035, "quadro": 1035, "ly648499246": 1035, "mabu": 1035, "manaileng": 1035, "mariangela": 1035, "marielaraj": 1035, "hirzel": 1035, "mateo": 1035, "nore\u00f1a": 1035, "mathi": 1035, "batoul": 1035, "calcot": 1035, "prieur": 1035, "\u00f6zer": 1035, "miao": 1035, "cai": 1035, "karbownik": 1035, "michalkrawczyk": [1035, 1036], "mitzi": [1035, 1036], "mlondschien": 1035, "haseeb": [1035, 1036], "khoual": 1035, "jarir": 1035, "kanji": 1035, "nadim": 1035, "kawwa": 1035, "nanshan": 1035, "naozin555": 1035, "fultz": 1035, "nic": 1035, "annau": 1035, "stefani": [1035, 1037, 1038], "nigel": 1035, "bosch": 1035, "nodar": 1035, "okroshiashvili": 1035, "ogbonna": 1035, "chibuik": 1035, "ogordon100": 1035, "phongpanangam": 1035, "duqu": 1035, "ibieta": 1035, "jimenez": [1035, 1036], "lacouth": 1035, "olszewski": 1035, "dye": 1035, "pierreattard": [1035, 1036], "yve": 1035, "borgn": 1035, "pranayanchuri": 1035, "princ": 1035, "canuma": 1035, "putschblo": 1035, "ranjanikrishnan": 1035, "rene": 1035, "corneil": 1035, "ricardojnf": 1035, "richardscottoz": 1035, "sandi": 1035, "khosasi": 1035, "benhur": 1035, "flore": 1035, "shinehid": 1035, "shinnar": 1035, "tootoonian": 1035, "solosil": 1035, "kolawol": 1035, "stagg": 1035, "swpeas": 1035, "tfifi": 1035, "caswel": [1035, 1038], "timotheemathieu": 1035, "wolodzko": 1035, "tliu68": 1035, "uhmann": 1035, "tom1092": 1035, "tom\u00e1": [1035, 1036], "moreyra": 1035, "tommaso": 1035, "noto": 1035, "tsuga": 1035, "vang": 1035, "gkiasta": 1035, "vil\u00e9m": 1035, "zouhar": 1035, "vlasovet": 1035, "waijean": 1035, "whidou": 1035, "xiaoyuchai": 1035, "yasmeen": 1035, "alsaedi": 1035, "yoch": 1035, "yusukenagasaka": 1035, "yzhenman": 1035, "zeyusun": 1035, "zhaoweiwang": 1035, "msvcp140": 1036, "dll": 1036, "24631": 1036, "24446": 1036, "10805": 1036, "mathia": 1036, "23471": 1036, "24015": 1036, "23990": 1036, "23833": 1036, "24017": 1036, "sorski": [1036, 1037], "23395": 1036, "23636": 1036, "22063": 1036, "22059": 1036, "kurz": [1036, 1037], "23608": 1036, "23548": 1036, "24087": 1036, "23273": 1036, "23194": 1036, "23198": 1036, "lise": 1036, "kleiber": 1036, "23358": 1036, "23264": 1036, "feature_names_in": 1036, "23299": 1036, "23214": 1036, "collot": [1036, 1037], "baak": 1036, "23370": 1036, "23410": 1036, "compute_sample_weight": 1036, "23115": 1036, "22868": 1036, "multiindex": 1036, "22410": 1036, "23271": 1036, "21987": 1036, "22064": 1036, "22065": 1036, "22288": 1036, "22320": 1036, "21219": 1036, "21542": 1036, "23098": 1036, "22318": 1036, "23036": 1036, "binary_crossentropi": 1036, "23040": 1036, "23046": 1036, "22856": 1036, "21032": 1036, "18170": 1036, "21038": 1036, "14975": 1036, "22526": 1036, "23095": 1036, "silk": 1036, "20031": 1036, "krawczyk": 1036, "21148": 1036, "22255": 1036, "21881": 1036, "vassard": 1036, "22217": 1036, "21735": 1036, "22154": 1036, "22537": 1036, "iofal": 1036, "arisa": [1036, 1037], "22775": 1036, "22913": 1036, "randomgeek78": 1036, "22493": 1036, "19680": 1036, "thibaut": 1036, "22119": 1036, "22016": 1036, "22015": 1036, "19747": 1036, "attalla": 1036, "22498": 1036, "21482": 1036, "pujalt": 1036, "22412": 1036, "16605": 1036, "21901": 1036, "rileran": 1036, "23113": 1036, "ilion": 1036, "beyst": 1036, "21425": 1036, "stefanini": 1036, "16948": 1036, "patricio": 1036, "cerda": 1036, "22002": 1036, "21109": 1036, "inner_stats_": 1036, "iter_offset_": 1036, "18975": 1036, "22111": 1036, "22181": 1036, "21334": 1036, "21705": 1036, "stanlei": [1036, 1037, 1038], "21432": 1036, "22806": 1036, "jihan": 1036, "benni": 1036, "21713": 1036, "haya": 1036, "21567": 1036, "maggi": 1036, "chege": 1036, "22300": 1036, "15948": 1036, "sysuresh": 1036, "22553": 1036, "19490": 1036, "ferrin": 1036, "22120": 1036, "15984": 1036, "okon": 1036, "22696": 1036, "22486": 1036, "21800": 1036, "20567": 1036, "22159": 1036, "20811": 1036, "21814": 1036, "16748": 1036, "siqi": 1036, "22215": 1036, "23047": 1036, "22695": 1036, "22697": 1036, "21762": 1036, "22106": 1036, "gijsber": 1036, "21632": 1036, "genesi": [1036, 1038], "valencia": [1036, 1038], "22566": 1036, "22908": 1036, "23097": 1036, "23079": 1036, "20803": 1036, "23023": 1036, "21573": 1036, "21832": 1036, "20145": 1036, "22356": 1036, "18482": 1036, "gameiro": 1036, "kharsa": 1036, "22370": 1036, "17819": 1036, "22235": 1036, "21837": 1036, "wagner": 1036, "22199": 1036, "aidar": 1036, "shakerimoff": 1036, "tenavi": 1036, "nakamura": 1036, "22223": 1036, "marcom": 1036, "21617": 1036, "ritter": [1036, 1037], "21114": 1036, "21078": 1036, "21448": 1036, "16061": 1036, "19438": 1036, "18310": 1036, "elfner": 1036, "22249": 1036, "22137": 1036, "22694": 1036, "22808": 1036, "22950": 1036, "21086": 1036, "22206": 1036, "21808": 1036, "22548": 1036, "22062": 1036, "trujillo": [1036, 1037], "22148": 1036, "22240": 1036, "9087": 1036, "22525": 1036, "19689": 1036, "21606": 1036, "21341": 1036, "preservs": 1036, "21767": 1036, "21724": 1036, "yar": 1036, "khine": 1036, "phyo": 1036, "21998": 1036, "22891": 1036, "22899": 1036, "23256": 1036, "19794": 1036, "21534": 1036, "22254": 1036, "21805": 1036, "jeann": 1036, "dionisi": 1036, "22685": 1036, "n_neighbour": 1036, "18832": 1036, "23033": 1036, "21565": 1036, "17266": 1036, "22118": 1036, "ohad": 1036, "22284": 1036, "19158": 1036, "nicki": 1036, "skaft": 1036, "20753": 1036, "22108": 1036, "22635": 1036, "19085": 1036, "22866": 1036, "21576": 1036, "emil": 1036, "dugnat": 1036, "21873": 1036, "21177": 1036, "20408": 1036, "ceballo": 1036, "22058": 1036, "23034": 1036, "22203": 1036, "21026": 1036, "21880": 1036, "mrinal": 1036, "tyagi": 1036, "22982": 1036, "22508": 1036, "comb": 1036, "22604": 1036, "22212": 1036, "21430": 1036, "desislava": 1036, "vasileva": 1036, "22687": 1036, "22150": 1036, "22248": 1036, "20860": 1036, "shubhraneel": 1036, "21888": 1036, "21954": 1036, "22953": 1036, "16018": 1036, "21445": 1036, "21988": 1036, "get_output_feature_nam": 1036, "21569": 1036, "21079": 1036, "20653": 1036, "21434": 1036, "19916": 1036, "22735": 1036, "compute_inverse_transform": 1036, "21701": 1036, "22114": 1036, "21330": 1036, "21408": 1036, "22149": 1036, "21436": 1036, "22191": 1036, "22476": 1036, "21278": 1036, "21316": 1036, "clickabl": 1036, "21298": 1036, "22237": 1036, "check_scalar": 1036, "22218": 1036, "validationerror": 1036, "check_requires_y_non": 1036, "22578": 1036, "arcidiacono": [1036, 1037], "22595": 1036, "21310": 1036, "22027": 1036, "lanterni": 1036, "23077": 1036, "22188": 1036, "22830": 1036, "2357juan": [1036, 1037, 1038], "adamgonzo": 1036, "adijohar": 1036, "kumawat": 1036, "raghuwanshi": 1036, "duron": 1036, "ahmadjubair33": 1036, "aj": 1036, "druck": 1036, "peixinho": 1036, "arroyo": 1036, "alexanmv": 1036, "almeidayoel": 1036, "amar": [1036, 1037, 1038], "amrcod": 1036, "griva": [1036, 1037], "andrii": 1036, "herrou": 1036, "ducout": 1036, "arth": 1036, "arthurmello": 1036, "arturoamor": 1036, "atharva": 1036, "patil": 1036, "aufarkari": 1036, "avm19": [1036, 1037], "ayan": 1036, "bardiya": [1036, 1037], "behrouz": 1036, "ben3940": 1036, "bijil": 1036, "subhash": 1036, "bmreinig": 1036, "brenden": 1036, "kadota": 1036, "cdrig": 1036, "chalmer": 1036, "chitteti": 1036, "srinath": [1036, 1037], "chloe": 1036, "agath": 1036, "azencott": 1036, "christopherlim98": 1036, "weidemann": 1036, "combsccod": 1036, "daniela": [1036, 1037], "darren": [1036, 1037], "eargl": 1036, "gilbertson": [1036, 1037], "dea": [1036, 1037, 1038], "mar\u00eda": [1036, 1037, 1038], "denni": 1036, "osei": 1036, "dessyvv": 1036, "dev514": 1036, "diwakar": 1036, "ries": 1036, "drskd": 1036, "emiko": 1036, "sano": 1036, "emmanouil": 1036, "gionanidi": 1036, "ermolaevpa": [1036, 1037], "estefania": 1036, "barreto": 1036, "ojeda": 1036, "eyast": 1036, "fatima": 1036, "gasmi": 1036, "luna": 1036, "glushchenkov": 1036, "fkaren27": 1036, "fpgawesom": 1036, "ftorres16": [1036, 1037], "gabor": 1036, "berei": 1036, "kertesz": 1036, "gauthier": 1036, "giancarlo": 1036, "glennfrutiz": 1036, "guillermo": 1036, "fern\u00e1ndez": 1036, "hansin": [1036, 1037], "henrymooresc": [1036, 1037], "hideaki": 1036, "imamura": 1036, "hind": 1036, "hmasdev": 1036, "hvassard": 1036, "aki": [1036, 1037, 1038], "iasoon": 1036, "ingela": 1036, "cowton": 1036, "jalexand3r": 1036, "jauhar": 1036, "jaya": 1036, "kommireddi": 1036, "je": 1036, "jelfner": 1036, "jenni": 1036, "jirka": 1036, "borovec": 1036, "cipri\u00e1n": 1036, "loayza": 1036, "chazalon": 1036, "mess": 1036, "jovan": [1036, 1037], "stojanov": [1036, 1037], "jschuerz": 1036, "katotten": 1036, "ken4git": 1036, "doucet": 1036, "kimayoung": 1036, "koushik": 1036, "kranthi": 1036, "sedamaki": 1036, "krumetoft": 1036, "lesne": 1036, "casino": [1036, 1037], "logan": [1036, 1037, 1038], "lucieclair": 1036, "luiz": 1036, "magali": 1036, "mandjev": 1036, "wurp": [1036, 1037], "boerner": 1036, "wimld": 1036, "martel": 1036, "corentin": 1036, "mat\u00eda": 1036, "matjansen": 1036, "francia": 1036, "megabyt": 1036, "mehrdad": 1036, "moradizadeh": 1036, "melemo2": 1036, "micky774": [1036, 1037], "milana2": 1036, "millawel": 1036, "miwojc": 1036, "mizuki": 1036, "mlant": 1036, "mohit": 1036, "moonkyung94": 1036, "mpoemsl": 1036, "mrinaltyagi": 1036, "leu": 1036, "msabati": 1036, "nadirhan": 1036, "\u015fahin": 1036, "naipawat": [1036, 1037], "poolsawat": [1036, 1037], "nartayxd": 1036, "nastegiano": 1036, "nathansquan": 1036, "detlefsen": 1036, "niket": 1036, "nikhil": 1036, "suresh": 1036, "kondratyev": 1036, "husak": 1036, "partev": [1036, 1037, 1038], "pelennor": 1036, "piet": [1036, 1037], "br\u00f6mmel": [1036, 1037], "pinki": 1036, "poloso": 1036, "pramod": 1036, "anantharam": 1036, "puhuk": [1036, 1037], "purna": 1036, "mansingh": 1036, "quadv": 1036, "rahil": [1036, 1037, 1038], "boy": 1036, "raz": 1036, "hoshia": 1036, "rishabh": 1036, "barnowski": [1036, 1037], "rsnegrin": 1036, "yadav": 1036, "sakinaouisrani": 1036, "sanjai": 1036, "marreddi": 1036, "seel": 1036, "sele": [1036, 1037], "seyedsaman": 1036, "emami": 1036, "shandeng123": 1036, "sharmadharmp": 1036, "shaymernaturalint": 1036, "shuangchi": [1036, 1037], "siavrez": 1036, "slishak": 1036, "spikebh": 1036, "sply88": 1036, "kailasa": [1036, 1037], "sultan": 1036, "orazbayev": 1036, "sumit": 1036, "saha": 1036, "sven": [1036, 1037], "eschlbeck": 1036, "stehl": [1036, 1037], "swapnil": 1036, "teunp": 1036, "ferr\u00e9": 1036, "hjortkj\u00e6r": 1036, "thiruvenkadam": 1036, "toastedyeast": [1036, 1037], "mctiernan": [1036, 1037], "udit": 1036, "ugo": 1036, "marchand": 1036, "vera": [1036, 1037], "komey": [1036, 1037], "victoireloui": 1036, "vishwakarma": 1036, "vikrant": 1036, "khedkar": 1036, "chernyi": 1036, "weijiadu": 1036, "yuan": [1036, 1037, 1038], "yiyangq": 1036, "yosshi999": 1036, "yuki": 1036, "koyama": 1036, "zeel": 1036, "zempleni": 1036, "zhenfish": 1036, "\u8d75\u4e30": 1036, "25747": 1037, "base_estimator__": 1037, "25477": 1037, "25563": 1037, "25570": 1037, "25664": 1037, "25774": 1037, "25500": 1037, "25589": 1037, "25704": 1037, "min_sample_split": 1037, "25744": 1037, "25619": 1037, "25638": 1037, "25354": 1037, "25174": 1037, "25089": 1037, "25129": 1037, "25363": 1037, "25188": 1037, "25295": 1037, "spec": [1037, 1038], "25312": 1037, "backslash": 1037, "25511": 1037, "25172": 1037, "25341": 1037, "25094": 1037, "25250": 1037, "25370": 1037, "23101": 1037, "24873": 1037, "25694": 1037, "25274": 1037, "25296": 1037, "25147": 1037, "23619": 1037, "24354": 1037, "safiuddin": 1037, "khaja": 1037, "gsiisg": 1037, "23935": 1037, "22527": 1037, "_sgd_fast": 1037, "_plain_sgd": 1037, "oversc": 1037, "23798": 1037, "24543": 1037, "24465": 1037, "23734": 1037, "24699": 1037, "23865": 1037, "simd": 1037, "primit": 1037, "23446": 1037, "23197": 1037, "23604": 1037, "23585": 1037, "24556": 1037, "maladi\u00e8r": [1037, 1038], "24617": 1037, "sim4n6": 1037, "24688": 1037, "22054": 1037, "roic": 1037, "24264": 1037, "maladier": 1037, "14736": 1037, "hunt": 1037, "zhan": 1037, "20802": 1037, "pokorni": 1037, "22965": 1037, "22968": 1037, "23038": 1037, "23210": 1037, "24258": 1037, "23470": 1037, "21938": 1037, "23127": 1037, "19075": 1037, "ramo": 1037, "carre\u00f1o": 1037, "24951": 1037, "22268": 1037, "mohamedbsh": 1037, "23905": 1037, "11860": 1037, "ablin": 1037, "24528": 1037, "23726": 1037, "24421": 1037, "kshitij": [1037, 1038], "22554": 1037, "24218": 1037, "molin": 1037, "21020": 1037, "24856": 1037, "22014": 1037, "23252": 1037, "24538": 1037, "24889": 1037, "24146": 1037, "peretti": 1037, "nestor": 1037, "navarro": 1037, "nati": 1037, "tomatti": 1037, "24855": 1037, "24849": 1037, "20415": 1037, "24283": 1037, "24894": 1037, "23819": [1037, 1038], "edoardo": 1037, "abati": 1037, "24747": 1037, "24245": 1037, "24405": 1037, "16695": 1037, "vitor": 1037, "rosa": 1037, "18298": 1037, "25077": 1037, "24317": 1037, "24350": 1037, "24755": 1037, "levitski": [1037, 1038], "24637": 1037, "24767": 1037, "23275": 1037, "maxwelllzh": 1037, "24433": 1037, "yogendrasingh": 1037, "23637": 1037, "23877": 1037, "10168": 1037, "\u0142ukasz": 1037, "borchmann": 1037, "12285": 1037, "miltenberg": 1037, "13042": 1037, "parizi": 1037, "18094": 1037, "22562": 1037, "24714": 1037, "23834": 1037, "24051": 1037, "22518": 1037, "18020": 1037, "24338": 1037, "23442": 1037, "atukorala": 1037, "22710": 1037, "conroi": 1037, "trinh": 1037, "23461": 1037, "24365": 1037, "24630": 1037, "rushil": [1037, 1038], "24084": 1037, "iinfo": 1037, "24141": 1037, "24539": 1037, "23977": 1037, "23683": 1037, "andrei": 1037, "melnik": 1037, "16747": 1037, "18805": 1037, "hongshaoyang": 1037, "22269": 1037, "23139": 1037, "24645": 1037, "10468": 1037, "ruben": 1037, "22993": 1037, "24750": 1037, "rudresh": 1037, "veerkhar": 1037, "23874": 1037, "24075": 1037, "22665": 1037, "24683": 1037, "24058": 1037, "perdok": 1037, "20331": 1037, "23993": 1037, "22629": 1037, "24412": 1037, "22898": 1037, "23480": 1037, "21469": 1037, "lapack_svd_driv": 1037, "20617": 1037, "25067": 1037, "14862": 1037, "24512": 1037, "24667": 1037, "25080": 1037, "24523": 1037, "mia": 1037, "bajic": 1037, "3llobo": 1037, "kania": [1037, 1038], "anulekh": 1037, "admir": [1037, 1038], "demiraj": [1037, 1038], "adoublet": [1037, 1038], "ahmedbgh": [1037, 1038], "aiko": 1037, "akshita": 1037, "prasanth": 1037, "ala": [1037, 1038], "miola": 1037, "lebel": 1037, "buzenet": [1037, 1038], "kassa": [1037, 1038], "bera": 1037, "maennel": 1037, "aniket": 1037, "shirsat": 1037, "anthony22": [1037, 1038], "apostolo": 1037, "tsetogl": 1037, "aravindh": 1037, "artur": [1037, 1038], "hermano": [1037, 1038], "ashah002": [1037, 1038], "ashwin": [1037, 1038], "azaria": [1037, 1038], "gebremichael": [1037, 1038], "b0rxington": 1037, "badr": 1037, "moufad": 1037, "bart\u0142omiej": 1037, "go\u0144da": 1037, "bdegraaff": 1037, "berkecanrizai": 1037, "bernd": 1037, "fritzk": 1037, "bhoomika": 1037, "biswaroop": 1037, "cannon": 1037, "bsh": 1037, "ceh": 1037, "chalulu": 1037, "changyao": [1037, 1038], "zablit": 1037, "veenhui": [1037, 1038], "christianwaldmann": 1037, "christin": [1037, 1038], "verrier": 1037, "dangonite57": [1037, 1038], "danielgaerb": 1037, "davidblnc": [1037, 1038], "dayn": [1037, 1038], "khant": 1037, "dhanshre": 1037, "diadochokinet": 1037, "diederikwp": 1037, "litsidi": [1037, 1038], "drewhogg": 1037, "oc": 1037, "dwight": 1037, "lindquist": 1037, "eden": 1037, "brekk": 1037, "edern": [1037, 1038], "eleanor": 1037, "eliaschiavon": 1037, "emir": [1037, 1038], "fabrizio": 1037, "damicelli": 1037, "fcharra": 1037, "siola": [1037, 1038], "tuveri": 1037, "franck": 1037, "charra": 1037, "geevarghes": 1037, "georgiamaydai": 1037, "gianr": 1037, "lazz": 1037, "guitar": 1037, "gunesbayir": [1037, 1038], "harshit5674": 1037, "hasan": 1037, "yaman": 1037, "vrigazov": 1037, "htsedebenham": 1037, "humahn": 1037, "ido": [1037, 1038], "iglesi": 1037, "iliya": 1037, "zhechev": 1037, "iren": [1037, 1038], "ivanllt": 1037, "sedykh": 1037, "mcivor": [1037, 1038], "janfidor": [1037, 1038], "jiten": 1037, "sidhpura": 1037, "jkarolczak": 1037, "jo\u00e3o": 1037, "johnathanpi": [1037, 1038], "koumenti": 1037, "panga": [1037, 1038], "johnthagen": 1037, "fleme": 1037, "choo": [1037, 1038], "yun": [1037, 1038], "keat": [1037, 1038], "juanfe88": 1037, "juliaschoepp": [1037, 1038], "jygerardi": [1037, 1038], "ka00ri": [1037, 1038], "kanishk": 1037, "sachdev": 1037, "kanissh": 1037, "kendal": 1037, "kento": [1037, 1038], "nozawa": [1037, 1038], "eliasi": [1037, 1038], "kluge": [1037, 1038], "lieret": 1037, "kirandevraj": 1037, "kraig": 1037, "vamsi": 1037, "kapadni": 1037, "lingyi1110": 1037, "mantovani": 1037, "maascha": 1037, "madinak": 1037, "maksym": 1037, "mansi": 1037, "kostelac": [1037, 1038], "marvin": [1037, 1038], "krawutschk": [1037, 1038], "masanori": [1037, 1038], "kanazu": [1037, 1038], "haberland": [1037, 1038], "mauroantonioserrano": 1037, "maxi": 1037, "marufo": 1037, "maximesaur": [1037, 1038], "smolskii": 1037, "bou": [1037, 1038], "mehgarg": 1037, "mehmetcanakbai": 1037, "baji\u0107": 1037, "flak": 1037, "hornstein": 1037, "ruiter": 1037, "paradi": 1037, "iljin": [1037, 1038], "misa": 1037, "ogura": 1037, "wilksch": 1037, "mrastgoo": 1037, "naois": 1037, "holohan": 1037, "nass": 1037, "jacobi": 1037, "nawazish": [1037, 1038], "alam": [1037, 1038], "nguy\u1ec5n": 1037, "v\u0103n": 1037, "di\u1ec5n": 1037, "fanelli": [1037, 1038], "nihal": 1037, "thukarama": 1037, "jare": 1037, "nima10khodaveisi": 1037, "nima": 1037, "sarajpoor": 1037, "nitinramvelraj": 1037, "nnlnr": [1037, 1038], "npach": [1037, 1038], "nwanna": 1037, "nymark": 1037, "kho": 1037, "holman": 1037, "oll": 1037, "lukowski": 1037, "hassoun": 1037, "tamer": 1037, "ouss1508": [1037, 1038], "oyindamola": 1037, "olatunji": 1037, "pab": [1037, 1038], "pandata": [1037, 1038], "soar": 1037, "petar": 1037, "mlinari\u0107": 1037, "pooja": [1037, 1038], "subramaniam": [1037, 1038], "priyam": 1037, "kakati": 1037, "freeland": 1037, "keerti": 1037, "rafal": [1037, 1038], "wojdyla": [1037, 1038], "raghuv": [1037, 1038], "makhija": 1037, "rehan": 1037, "guha": 1037, "klima": 1037, "crockett": 1037, "homm": 1037, "roman4oo": 1037, "rowan": 1037, "mankoo": 1037, "sabri": 1037, "monaf": 1037, "safikh": 1037, "salahuddin": 1037, "yojana": 1037, "menes": 1037, "ephrem": 1037, "sangam": 1037, "sangamswadik": 1037, "sanjai_3": [1037, 1038], "sarahremu": 1037, "sashka": [1037, 1038], "savkomax": 1037, "gustafson": [1037, 1038], "sec65": 1037, "seljak": 1037, "shadi": [1037, 1038], "gewili": [1037, 1038], "shellyfung": 1037, "shinsuk": 1037, "mori": 1037, "shiva": [1037, 1038], "shoaib": 1037, "khan": [1037, 1038], "shogo": [1037, 1038], "hida": [1037, 1038], "shrankhla": 1037, "sonniv": [1037, 1038], "sortofamudkip": [1037, 1038], "stanislav": [1037, 1038], "modrak": [1037, 1038], "stellalin7": 1037, "vaerenbergh": [1037, 1038], "schmerler": 1037, "tabea": [1037, 1038], "kossen": [1037, 1038], "thedevpanda": 1037, "syd": 1037, "sre": 1037, "weezel": [1037, 1038], "bonald": 1037, "germer": [1037, 1038], "ion": 1037, "timofei": 1037, "kornev": 1037, "pitter": 1037, "tomiock": [1037, 1038], "mathew": 1037, "tspeng": [1037, 1038], "egashira": 1037, "rey": 1037, "puerta": 1037, "vishal": 1037, "vyom": [1037, 1038], "pathak": [1037, 1038], "wattai": 1037, "wchathura": 1037, "wen": 1037, "x110": 1037, "xuniu": 1037, "yanhong": 1037, "ef": 1037, "yusuf": [1037, 1038], "raji": [1037, 1038], "adil": 1037, "khwaja": 1037, "zeeshan": [1037, 1038], "lone": [1037, 1038], "26772": 1038, "reintroduc": 1038, "26754": 1038, "26940": 1038, "26903": 1038, "roehr": 1038, "25196": 1038, "24871": 1038, "25752": 1038, "25438": 1038, "yotam": 1038, "avidar": 1038, "constantini": 1038, "26337": 1038, "25120": 1038, "25294": 1038, "25308": 1038, "25291": 1038, "25367": 1038, "25402": 1038, "25044": 1038, "smt": 1038, "26082": 1038, "24027": 1038, "25815": 1038, "24568": 1038, "26121": 1038, "25805": 1038, "26385": 1038, "26657": 1038, "binesh": 1038, "bannerje": 1038, "25251": 1038, "26503": 1038, "26286": 1038, "26323": 1038, "26033": 1038, "26108": 1038, "barth\u00e9lemi": 1038, "26433": 1038, "26386": 1038, "26551": 1038, "consistenli": 1038, "26579": 1038, "25784": 1038, "25490": 1038, "25956": 1038, "22409": 1038, "25177": 1038, "24882": 1038, "25186": 1038, "breve": 1038, "26318": 1038, "25506": 1038, "25601": 1038, "fidor": 1038, "25931": 1038, "25629": 1038, "26242": 1038, "toplak": 1038, "sckit": 1038, "25297": 1038, "24230": 1038, "25102": 1038, "25973": 1038, "25232": 1038, "26454": 1038, "25209": 1038, "26644": 1038, "lemo": 1038, "21809": 1038, "25732": 1038, "25190": 1038, "26207": 1038, "25587": 1038, "25697": 1038, "25214": 1038, "26653": 1038, "25531": 1038, "17388": 1038, "24769": 1038, "25713": 1038, "18723": 1038, "sahil": 1038, "24677": 1038, "24668": 1038, "dberenbaum": 1038, "25987": 1038, "26019": 1038, "25432": 1038, "25672": 1038, "lene": 1038, "preuss": 1038, "25299": 1038, "omarmanzoor": 1038, "26194": 1038, "26264": 1038, "barata": 1038, "onggo": 1038, "23099": 1038, "overriden": 1038, "25659": 1038, "26333": 1038, "24140": 1038, "24076": 1038, "25417": 1038, "24083": 1038, "25443": 1038, "feature_union": 1038, "25093": 1038, "25220": 1038, "26325": 1038, "25334": 1038, "25677": 1038, "20524": 1038, "niuk": 1038, "23731": 1038, "24145": 1038, "22506": 1038, "24935": 1038, "seladu": 1038, "25257": 1038, "26424": 1038, "correcli": 1038, "26400": 1038, "26566": 1038, "26093": 1038, "23595": 1038, "26376": 1038, "25387": 1038, "26289": 1038, "25813": 1038, "26106": 1038, "25814": 1038, "check_transformers_unfitted_stateless": 1038, "25733": 1038, "19664": 1038, "environmenterror": 1038, "ioerror": 1038, "windowserror": 1038, "26466": 1038, "kushwah": 1038, "handk": 1038, "adien": 1038, "mansouri": 1038, "alexl": 1038, "amai": 1038, "annegnx": 1038, "ansam": 1038, "zedan": 1038, "dutt": 1038, "aymericbasset": 1038, "tripramudya": 1038, "benedek": 1038, "harsanyi": 1038, "brevin": 1038, "kund": 1038, "troillard": 1038, "carla": 1038, "berenbaum": 1038, "proding": 1038, "butyugina": 1038, "elabonga": 1038, "atuo": 1038, "farhan": 1038, "hujiahong726": 1038, "ili": 1038, "jb": 1038, "mountford": 1038, "jessicakk0711": 1038, "jiawei": 1038, "joei": 1038, "hedlund": 1038, "linu": 1038, "fouquet": 1038, "harfouch": 1038, "mdarii": 1038, "murezzda": 1038, "nightwalkx": 1038, "nishu": 1038, "piontek": 1038, "pnucci": 1038, "sadra": 1038, "barikbin": 1038, "searchforpass": 1038, "seoeun": 1038, "shreesha": [1038, 1039], "senger": 1038, "th\u00e9ophil": 1038, "barang": 1038, "veghit": 1038, "vignesh": 1038, "vijeth": 1038, "moudgalya": 1038, "windiana42": 1038, "yuchen": 1038, "26416": 1039, "tao": 1039, "26464": 1039, "outliermixin": 1039, "26506": 1039, "correspondingli": 1039, "26831": 1039, "26786": 1039, "26909": 1039, "26602": 1039, "26634": 1039, "landeau": 1039, "vigni": 1039, "26315": 1039, "sok\u00f3\u0142": 1039, "26391": 1039, "13649": 1039, "reilli": 1039, "26748": 1039, "26525": 1039, "26789": 1039, "26760": 1039, "26931": 1039, "5x": 1039, "26765": 1039}, "objects": {"sklearn": [[401, 0, 0, "-", "base"], [401, 0, 0, "-", "calibration"], [401, 0, 0, "-", "cluster"], [401, 0, 0, "-", "compose"], [461, 4, 1, "", "config_context"], [401, 0, 0, "-", "covariance"], [401, 0, 0, "-", "cross_decomposition"], [401, 0, 0, "-", "datasets"], [401, 0, 0, "-", "decomposition"], [401, 0, 0, "-", "discriminant_analysis"], [401, 0, 0, "-", "dummy"], [401, 0, 0, "-", "ensemble"], [401, 0, 0, "-", "exceptions"], [401, 0, 0, "-", "experimental"], [401, 0, 0, "-", "feature_extraction"], [401, 0, 0, "-", "feature_selection"], [401, 0, 0, "-", "gaussian_process"], [619, 4, 1, "", "get_config"], [401, 0, 0, "-", "impute"], [401, 0, 0, "-", "inspection"], [401, 0, 0, "-", "isotonic"], [401, 0, 0, "-", "kernel_approximation"], [401, 0, 0, "-", "kernel_ridge"], [401, 0, 0, "-", "linear_model"], [401, 0, 0, "-", "manifold"], [401, 0, 0, "-", "metrics"], [401, 0, 0, "-", "mixture"], [401, 0, 0, "-", "model_selection"], [401, 0, 0, "-", "multiclass"], [401, 0, 0, "-", "multioutput"], [401, 0, 0, "-", "naive_bayes"], [401, 0, 0, "-", "neighbors"], [401, 0, 0, "-", "neural_network"], [401, 0, 0, "-", "pipeline"], [401, 0, 0, "-", "preprocessing"], [401, 0, 0, "-", "random_projection"], [401, 0, 0, "-", "semi_supervised"], [890, 4, 1, "", "set_config"], [891, 4, 1, "", "show_versions"], [401, 0, 0, "-", "svm"], [401, 0, 0, "-", "tree"], [401, 0, 0, "-", "utils"]], "sklearn.base": [[416, 1, 1, "", "BaseEstimator"], [417, 1, 1, "", "BiclusterMixin"], [418, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [419, 1, 1, "", "ClassifierMixin"], [420, 1, 1, "", "ClusterMixin"], [421, 1, 1, "", "DensityMixin"], [422, 1, 1, "", "MetaEstimatorMixin"], [423, 1, 1, "", "OneToOneFeatureMixin"], [424, 1, 1, "", "OutlierMixin"], [425, 1, 1, "", "RegressorMixin"], [426, 1, 1, "", "TransformerMixin"], [427, 4, 1, "", "clone"], [428, 4, 1, "", "is_classifier"], [429, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[416, 2, 1, "", "get_metadata_routing"], [416, 2, 1, "", "get_params"], [416, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[417, 3, 1, "", "biclusters_"], [417, 2, 1, "", "get_indices"], [417, 2, 1, "", "get_shape"], [417, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[418, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[419, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[420, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[421, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[423, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[424, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[425, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[426, 2, 1, "", "fit_transform"], [426, 2, 1, "", "set_output"]], "sklearn.calibration": [[430, 1, 1, "", "CalibratedClassifierCV"], [431, 1, 1, "", "CalibrationDisplay"], [432, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "get_metadata_routing"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "predict"], [430, 2, 1, "", "predict_proba"], [430, 2, 1, "", "score"], [430, 2, 1, "", "set_fit_request"], [430, 2, 1, "", "set_params"], [430, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[431, 2, 1, "", "from_estimator"], [431, 2, 1, "", "from_predictions"], [431, 2, 1, "", "plot"]], "sklearn.cluster": [[433, 1, 1, "", "AffinityPropagation"], [434, 1, 1, "", "AgglomerativeClustering"], [435, 1, 1, "", "Birch"], [436, 1, 1, "", "BisectingKMeans"], [437, 1, 1, "", "DBSCAN"], [438, 1, 1, "", "FeatureAgglomeration"], [439, 1, 1, "", "HDBSCAN"], [440, 1, 1, "", "KMeans"], [441, 1, 1, "", "MeanShift"], [442, 1, 1, "", "MiniBatchKMeans"], [443, 1, 1, "", "OPTICS"], [444, 1, 1, "", "SpectralBiclustering"], [445, 1, 1, "", "SpectralClustering"], [446, 1, 1, "", "SpectralCoclustering"], [447, 4, 1, "", "affinity_propagation"], [448, 4, 1, "", "cluster_optics_dbscan"], [449, 4, 1, "", "cluster_optics_xi"], [450, 4, 1, "", "compute_optics_graph"], [413, 4, 1, "", "dbscan"], [451, 4, 1, "", "estimate_bandwidth"], [452, 4, 1, "", "k_means"], [453, 4, 1, "", "kmeans_plusplus"], [454, 4, 1, "", "mean_shift"], [455, 4, 1, "", "spectral_clustering"], [456, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "get_metadata_routing"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_predict"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_predict"], [435, 2, 1, "", "fit_transform"], [435, 2, 1, "", "get_feature_names_out"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "partial_fit"], [435, 2, 1, "", "predict"], [435, 2, 1, "", "set_output"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "fit_predict"], [436, 2, 1, "", "fit_transform"], [436, 2, 1, "", "get_feature_names_out"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "predict"], [436, 2, 1, "", "score"], [436, 2, 1, "", "set_fit_request"], [436, 2, 1, "", "set_output"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "set_predict_request"], [436, 2, 1, "", "set_score_request"], [436, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "set_fit_request"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[438, 2, 1, "", "fit"], [438, 3, 1, "", "fit_predict"], [438, 2, 1, "", "fit_transform"], [438, 2, 1, "", "get_feature_names_out"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "inverse_transform"], [438, 2, 1, "", "set_output"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[439, 2, 1, "", "dbscan_clustering"], [439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "fit_transform"], [440, 2, 1, "", "get_feature_names_out"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_fit_request"], [440, 2, 1, "", "set_output"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "set_predict_request"], [440, 2, 1, "", "set_score_request"], [440, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "partial_fit"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "score"], [442, 2, 1, "", "set_fit_request"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "set_partial_fit_request"], [442, 2, 1, "", "set_predict_request"], [442, 2, 1, "", "set_score_request"], [442, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[444, 3, 1, "", "biclusters_"], [444, 2, 1, "", "fit"], [444, 2, 1, "", "get_indices"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "get_shape"], [444, 2, 1, "", "get_submatrix"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[446, 3, 1, "", "biclusters_"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "get_indices"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "get_shape"], [446, 2, 1, "", "get_submatrix"], [446, 2, 1, "", "set_params"]], "sklearn.compose": [[457, 1, 1, "", "ColumnTransformer"], [458, 1, 1, "", "TransformedTargetRegressor"], [459, 4, 1, "", "make_column_selector"], [460, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[457, 2, 1, "", "fit"], [457, 2, 1, "", "fit_transform"], [457, 2, 1, "", "get_feature_names_out"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 3, 1, "", "named_transformers_"], [457, 2, 1, "", "set_output"], [457, 2, 1, "", "set_params"], [457, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[458, 2, 1, "", "fit"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 3, 1, "", "n_features_in_"], [458, 2, 1, "", "predict"], [458, 2, 1, "", "score"], [458, 2, 1, "", "set_params"], [458, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[462, 1, 1, "", "EllipticEnvelope"], [463, 1, 1, "", "EmpiricalCovariance"], [464, 1, 1, "", "GraphicalLasso"], [465, 1, 1, "", "GraphicalLassoCV"], [466, 1, 1, "", "LedoitWolf"], [467, 1, 1, "", "MinCovDet"], [468, 1, 1, "", "OAS"], [469, 1, 1, "", "ShrunkCovariance"], [470, 4, 1, "", "empirical_covariance"], [471, 4, 1, "", "graphical_lasso"], [472, 4, 1, "", "ledoit_wolf"], [473, 4, 1, "", "ledoit_wolf_shrinkage"], [415, 4, 1, "", "oas"], [474, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[462, 2, 1, "", "correct_covariance"], [462, 2, 1, "", "decision_function"], [462, 2, 1, "", "error_norm"], [462, 2, 1, "", "fit"], [462, 2, 1, "", "fit_predict"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "get_precision"], [462, 2, 1, "", "mahalanobis"], [462, 2, 1, "", "predict"], [462, 2, 1, "", "reweight_covariance"], [462, 2, 1, "", "score"], [462, 2, 1, "", "score_samples"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[463, 2, 1, "", "error_norm"], [463, 2, 1, "", "fit"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "get_precision"], [463, 2, 1, "", "mahalanobis"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[464, 2, 1, "", "error_norm"], [464, 2, 1, "", "fit"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 2, 1, "", "get_precision"], [464, 2, 1, "", "mahalanobis"], [464, 2, 1, "", "score"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[465, 2, 1, "", "error_norm"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "get_precision"], [465, 2, 1, "", "mahalanobis"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[466, 2, 1, "", "error_norm"], [466, 2, 1, "", "fit"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "get_precision"], [466, 2, 1, "", "mahalanobis"], [466, 2, 1, "", "score"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[467, 2, 1, "", "correct_covariance"], [467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "reweight_covariance"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[475, 1, 1, "", "CCA"], [476, 1, 1, "", "PLSCanonical"], [477, 1, 1, "", "PLSRegression"], [478, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[475, 2, 1, "", "fit"], [475, 2, 1, "", "fit_transform"], [475, 2, 1, "", "get_feature_names_out"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "inverse_transform"], [475, 2, 1, "", "predict"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_output"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_predict_request"], [475, 2, 1, "", "set_score_request"], [475, 2, 1, "", "set_transform_request"], [475, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[476, 2, 1, "", "fit"], [476, 2, 1, "", "fit_transform"], [476, 2, 1, "", "get_feature_names_out"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "inverse_transform"], [476, 2, 1, "", "predict"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_output"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_predict_request"], [476, 2, 1, "", "set_score_request"], [476, 2, 1, "", "set_transform_request"], [476, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[477, 2, 1, "", "fit"], [477, 2, 1, "", "fit_transform"], [477, 2, 1, "", "get_feature_names_out"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "inverse_transform"], [477, 2, 1, "", "predict"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_output"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_predict_request"], [477, 2, 1, "", "set_score_request"], [477, 2, 1, "", "set_transform_request"], [477, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[478, 2, 1, "", "fit"], [478, 2, 1, "", "fit_transform"], [478, 2, 1, "", "get_feature_names_out"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "set_output"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "transform"]], "sklearn.datasets": [[479, 4, 1, "", "clear_data_home"], [480, 4, 1, "", "dump_svmlight_file"], [481, 4, 1, "", "fetch_20newsgroups"], [482, 4, 1, "", "fetch_20newsgroups_vectorized"], [483, 4, 1, "", "fetch_california_housing"], [484, 4, 1, "", "fetch_covtype"], [485, 4, 1, "", "fetch_kddcup99"], [486, 4, 1, "", "fetch_lfw_pairs"], [487, 4, 1, "", "fetch_lfw_people"], [488, 4, 1, "", "fetch_olivetti_faces"], [489, 4, 1, "", "fetch_openml"], [490, 4, 1, "", "fetch_rcv1"], [491, 4, 1, "", "fetch_species_distributions"], [492, 4, 1, "", "get_data_home"], [493, 4, 1, "", "load_breast_cancer"], [494, 4, 1, "", "load_diabetes"], [495, 4, 1, "", "load_digits"], [496, 4, 1, "", "load_files"], [497, 4, 1, "", "load_iris"], [498, 4, 1, "", "load_linnerud"], [499, 4, 1, "", "load_sample_image"], [500, 4, 1, "", "load_sample_images"], [501, 4, 1, "", "load_svmlight_file"], [502, 4, 1, "", "load_svmlight_files"], [503, 4, 1, "", "load_wine"], [504, 4, 1, "", "make_biclusters"], [505, 4, 1, "", "make_blobs"], [506, 4, 1, "", "make_checkerboard"], [507, 4, 1, "", "make_circles"], [508, 4, 1, "", "make_classification"], [509, 4, 1, "", "make_friedman1"], [510, 4, 1, "", "make_friedman2"], [511, 4, 1, "", "make_friedman3"], [512, 4, 1, "", "make_gaussian_quantiles"], [513, 4, 1, "", "make_hastie_10_2"], [514, 4, 1, "", "make_low_rank_matrix"], [515, 4, 1, "", "make_moons"], [516, 4, 1, "", "make_multilabel_classification"], [517, 4, 1, "", "make_regression"], [518, 4, 1, "", "make_s_curve"], [519, 4, 1, "", "make_sparse_coded_signal"], [520, 4, 1, "", "make_sparse_spd_matrix"], [521, 4, 1, "", "make_sparse_uncorrelated"], [522, 4, 1, "", "make_spd_matrix"], [523, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[524, 1, 1, "", "DictionaryLearning"], [525, 1, 1, "", "FactorAnalysis"], [526, 1, 1, "", "FastICA"], [527, 1, 1, "", "IncrementalPCA"], [528, 1, 1, "", "KernelPCA"], [529, 1, 1, "", "LatentDirichletAllocation"], [530, 1, 1, "", "MiniBatchDictionaryLearning"], [531, 1, 1, "", "MiniBatchNMF"], [532, 1, 1, "", "MiniBatchSparsePCA"], [533, 1, 1, "", "NMF"], [534, 1, 1, "", "PCA"], [535, 1, 1, "", "SparseCoder"], [536, 1, 1, "", "SparsePCA"], [537, 1, 1, "", "TruncatedSVD"], [538, 4, 1, "", "dict_learning"], [539, 4, 1, "", "dict_learning_online"], [414, 4, 1, "", "fastica"], [540, 4, 1, "", "non_negative_factorization"], [541, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_metadata_routing"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_covariance"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_metadata_routing"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "get_precision"], [525, 2, 1, "", "score"], [525, 2, 1, "", "score_samples"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_metadata_routing"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "inverse_transform"], [526, 2, 1, "", "set_inverse_transform_request"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "set_transform_request"], [526, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_covariance"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_metadata_routing"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "get_precision"], [527, 2, 1, "", "inverse_transform"], [527, 2, 1, "", "partial_fit"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "set_partial_fit_request"], [527, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "inverse_transform"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "partial_fit"], [529, 2, 1, "", "perplexity"], [529, 2, 1, "", "score"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "partial_fit"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "partial_fit"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "set_partial_fit_request"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_covariance"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "get_precision"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "score"], [534, 2, 1, "", "score_samples"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 3, 1, "", "n_components_"], [535, 3, 1, "", "n_features_in_"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[542, 1, 1, "", "LinearDiscriminantAnalysis"], [543, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[542, 2, 1, "", "decision_function"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_log_proba"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "set_score_request"], [542, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[543, 2, 1, "", "decision_function"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "predict_log_proba"], [543, 2, 1, "", "predict_proba"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[544, 1, 1, "", "DummyClassifier"], [545, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_log_proba"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_fit_request"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_fit_request"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "set_predict_request"], [545, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[546, 1, 1, "", "AdaBoostClassifier"], [547, 1, 1, "", "AdaBoostRegressor"], [548, 1, 1, "", "BaggingClassifier"], [549, 1, 1, "", "BaggingRegressor"], [550, 1, 1, "", "ExtraTreesClassifier"], [551, 1, 1, "", "ExtraTreesRegressor"], [552, 1, 1, "", "GradientBoostingClassifier"], [553, 1, 1, "", "GradientBoostingRegressor"], [554, 1, 1, "", "HistGradientBoostingClassifier"], [555, 1, 1, "", "HistGradientBoostingRegressor"], [556, 1, 1, "", "IsolationForest"], [557, 1, 1, "", "RandomForestClassifier"], [558, 1, 1, "", "RandomForestRegressor"], [559, 1, 1, "", "RandomTreesEmbedding"], [560, 1, 1, "", "StackingClassifier"], [561, 1, 1, "", "StackingRegressor"], [562, 1, 1, "", "VotingClassifier"], [563, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[546, 3, 1, "", "base_estimator_"], [546, 2, 1, "", "decision_function"], [546, 3, 1, "", "feature_importances_"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "predict_log_proba"], [546, 2, 1, "", "predict_proba"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_fit_request"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "set_score_request"], [546, 2, 1, "", "staged_decision_function"], [546, 2, 1, "", "staged_predict"], [546, 2, 1, "", "staged_predict_proba"], [546, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[547, 3, 1, "", "base_estimator_"], [547, 3, 1, "", "feature_importances_"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_fit_request"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"], [547, 2, 1, "", "staged_predict"], [547, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[548, 3, 1, "", "base_estimator_"], [548, 2, 1, "", "decision_function"], [548, 3, 1, "", "estimators_samples_"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_fit_request"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[549, 3, 1, "", "base_estimator_"], [549, 3, 1, "", "estimators_samples_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[550, 2, 1, "", "apply"], [550, 3, 1, "", "base_estimator_"], [550, 2, 1, "", "decision_path"], [550, 3, 1, "", "feature_importances_"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[551, 2, 1, "", "apply"], [551, 3, 1, "", "base_estimator_"], [551, 2, 1, "", "decision_path"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[552, 2, 1, "", "apply"], [552, 3, 1, "", "base_estimator_"], [552, 2, 1, "", "decision_function"], [552, 3, 1, "", "feature_importances_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"], [552, 2, 1, "", "staged_decision_function"], [552, 2, 1, "", "staged_predict"], [552, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[553, 2, 1, "", "apply"], [553, 3, 1, "", "base_estimator_"], [553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"], [553, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[554, 2, 1, "", "decision_function"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 3, 1, "", "n_iter_"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_decision_function"], [554, 2, 1, "", "staged_predict"], [554, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 3, 1, "", "n_iter_"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[556, 3, 1, "", "base_estimator_"], [556, 2, 1, "", "decision_function"], [556, 3, 1, "", "estimators_samples_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "fit_predict"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score_samples"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[557, 2, 1, "", "apply"], [557, 3, 1, "", "base_estimator_"], [557, 2, 1, "", "decision_path"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[558, 2, 1, "", "apply"], [558, 3, 1, "", "base_estimator_"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[559, 2, 1, "", "apply"], [559, 3, 1, "", "base_estimator_"], [559, 2, 1, "", "decision_path"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_transform"], [559, 2, 1, "", "get_feature_names_out"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_output"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[560, 2, 1, "", "decision_function"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "fit_transform"], [560, 2, 1, "", "get_feature_names_out"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 3, 1, "", "n_features_in_"], [560, 3, 1, "", "named_estimators"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_output"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_transform"], [561, 2, 1, "", "get_feature_names_out"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 3, 1, "", "n_features_in_"], [561, 3, 1, "", "named_estimators"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_output"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_transform"], [562, 2, 1, "", "get_feature_names_out"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_features_in_"], [562, 3, 1, "", "named_estimators"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_output"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_feature_names_out"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "n_features_in_"], [563, 3, 1, "", "named_estimators"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "transform"]], "sklearn.exceptions": [[564, 1, 1, "", "ConvergenceWarning"], [565, 1, 1, "", "DataConversionWarning"], [566, 1, 1, "", "DataDimensionalityWarning"], [567, 1, 1, "", "EfficiencyWarning"], [568, 1, 1, "", "FitFailedWarning"], [569, 1, 1, "", "InconsistentVersionWarning"], [570, 1, 1, "", "NotFittedError"], [571, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[564, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[565, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[566, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[567, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[568, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[569, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[570, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[572, 0, 0, "-", "enable_halving_search_cv"], [573, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[574, 1, 1, "", "DictVectorizer"], [575, 1, 1, "", "FeatureHasher"], [401, 0, 0, "-", "image"], [401, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "inverse_transform"], [574, 2, 1, "", "restrict"], [574, 2, 1, "", "set_inverse_transform_request"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_transform_request"], [575, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[576, 1, 1, "", "PatchExtractor"], [577, 4, 1, "", "extract_patches_2d"], [578, 4, 1, "", "grid_to_graph"], [579, 4, 1, "", "img_to_graph"], [580, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_metadata_routing"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[581, 1, 1, "", "CountVectorizer"], [582, 1, 1, "", "HashingVectorizer"], [583, 1, 1, "", "TfidfTransformer"], [584, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[581, 2, 1, "", "build_analyzer"], [581, 2, 1, "", "build_preprocessor"], [581, 2, 1, "", "build_tokenizer"], [581, 2, 1, "", "decode"], [581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_stop_words"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_fit_request"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "set_transform_request"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[582, 2, 1, "", "build_analyzer"], [582, 2, 1, "", "build_preprocessor"], [582, 2, 1, "", "build_tokenizer"], [582, 2, 1, "", "decode"], [582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "get_stop_words"], [582, 2, 1, "", "partial_fit"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 3, 1, "", "idf_"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "set_transform_request"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[584, 2, 1, "", "build_analyzer"], [584, 2, 1, "", "build_preprocessor"], [584, 2, 1, "", "build_tokenizer"], [584, 2, 1, "", "decode"], [584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_stop_words"], [584, 3, 1, "", "idf_"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_fit_request"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "set_transform_request"], [584, 2, 1, "", "transform"]], "sklearn.feature_selection": [[585, 1, 1, "", "GenericUnivariateSelect"], [586, 1, 1, "", "RFE"], [587, 1, 1, "", "RFECV"], [588, 1, 1, "", "SelectFdr"], [589, 1, 1, "", "SelectFpr"], [590, 1, 1, "", "SelectFromModel"], [591, 1, 1, "", "SelectFwe"], [592, 1, 1, "", "SelectKBest"], [593, 1, 1, "", "SelectPercentile"], [594, 1, 1, "", "SelectorMixin"], [595, 1, 1, "", "SequentialFeatureSelector"], [596, 1, 1, "", "VarianceThreshold"], [597, 4, 1, "", "chi2"], [598, 4, 1, "", "f_classif"], [599, 4, 1, "", "f_regression"], [600, 4, 1, "", "mutual_info_classif"], [601, 4, 1, "", "mutual_info_regression"], [602, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_support"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[586, 3, 1, "", "classes_"], [586, 2, 1, "", "decision_function"], [586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_support"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "predict"], [586, 2, 1, "", "predict_log_proba"], [586, 2, 1, "", "predict_proba"], [586, 2, 1, "", "score"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[587, 3, 1, "", "classes_"], [587, 2, 1, "", "decision_function"], [587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_support"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "predict"], [587, 2, 1, "", "predict_log_proba"], [587, 2, 1, "", "predict_proba"], [587, 2, 1, "", "score"], [587, 2, 1, "", "set_fit_request"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_support"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_support"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 3, 1, "", "n_features_in_"], [590, 2, 1, "", "partial_fit"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 3, 1, "", "threshold_"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[603, 1, 1, "", "GaussianProcessClassifier"], [604, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "kernel_"], [603, 2, 1, "", "log_marginal_likelihood"], [603, 2, 1, "", "predict"], [603, 2, 1, "", "predict_proba"], [603, 2, 1, "", "score"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "log_marginal_likelihood"], [604, 2, 1, "", "predict"], [604, 2, 1, "", "sample_y"], [604, 2, 1, "", "score"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "set_predict_request"], [604, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[605, 1, 1, "", "CompoundKernel"], [606, 1, 1, "", "ConstantKernel"], [607, 1, 1, "", "DotProduct"], [608, 1, 1, "", "ExpSineSquared"], [609, 1, 1, "", "Exponentiation"], [610, 1, 1, "", "Hyperparameter"], [611, 1, 1, "", "Kernel"], [612, 1, 1, "", "Matern"], [613, 1, 1, "", "PairwiseKernel"], [614, 1, 1, "", "Product"], [615, 1, 1, "", "RBF"], [616, 1, 1, "", "RationalQuadratic"], [617, 1, 1, "", "Sum"], [618, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[607, 2, 1, "", "__call__"], [607, 3, 1, "", "bounds"], [607, 2, 1, "", "clone_with_theta"], [607, 2, 1, "", "diag"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "hyperparameters"], [607, 2, 1, "", "is_stationary"], [607, 3, 1, "", "n_dims"], [607, 3, 1, "", "requires_vector_input"], [607, 2, 1, "", "set_params"], [607, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[608, 2, 1, "", "__call__"], [608, 3, 1, "", "bounds"], [608, 2, 1, "", "clone_with_theta"], [608, 2, 1, "", "diag"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "hyperparameter_length_scale"], [608, 3, 1, "", "hyperparameters"], [608, 2, 1, "", "is_stationary"], [608, 3, 1, "", "n_dims"], [608, 3, 1, "", "requires_vector_input"], [608, 2, 1, "", "set_params"], [608, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[610, 2, 1, "", "__call__"], [610, 5, 1, "", "bounds"], [610, 2, 1, "", "count"], [610, 5, 1, "", "fixed"], [610, 2, 1, "", "index"], [610, 5, 1, "", "n_elements"], [610, 5, 1, "", "name"], [610, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.impute": [[620, 1, 1, "", "IterativeImputer"], [621, 1, 1, "", "KNNImputer"], [622, 1, 1, "", "MissingIndicator"], [623, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "fit_transform"], [620, 2, 1, "", "get_feature_names_out"], [620, 2, 1, "", "get_metadata_routing"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "set_output"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "fit_transform"], [621, 2, 1, "", "get_feature_names_out"], [621, 2, 1, "", "get_metadata_routing"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "set_output"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "fit_transform"], [622, 2, 1, "", "get_feature_names_out"], [622, 2, 1, "", "get_metadata_routing"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "set_output"], [622, 2, 1, "", "set_params"], [622, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "fit_transform"], [623, 2, 1, "", "get_feature_names_out"], [623, 2, 1, "", "get_metadata_routing"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "inverse_transform"], [623, 2, 1, "", "set_output"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "transform"]], "sklearn.inspection": [[624, 1, 1, "", "DecisionBoundaryDisplay"], [625, 1, 1, "", "PartialDependenceDisplay"], [626, 4, 1, "", "partial_dependence"], [627, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[624, 2, 1, "", "from_estimator"], [624, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[625, 2, 1, "", "from_estimator"], [625, 2, 1, "", "plot"]], "sklearn.isotonic": [[628, 1, 1, "", "IsotonicRegression"], [629, 4, 1, "", "check_increasing"], [630, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_fit_request"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "set_predict_request"], [628, 2, 1, "", "set_score_request"], [628, 2, 1, "", "set_transform_request"], [628, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[631, 1, 1, "", "AdditiveChi2Sampler"], [632, 1, 1, "", "Nystroem"], [633, 1, 1, "", "PolynomialCountSketch"], [634, 1, 1, "", "RBFSampler"], [635, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[636, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_fit_request"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[637, 1, 1, "", "ARDRegression"], [638, 1, 1, "", "BayesianRidge"], [639, 1, 1, "", "ElasticNet"], [640, 1, 1, "", "ElasticNetCV"], [641, 1, 1, "", "GammaRegressor"], [642, 1, 1, "", "HuberRegressor"], [643, 1, 1, "", "Lars"], [644, 1, 1, "", "LarsCV"], [645, 1, 1, "", "Lasso"], [646, 1, 1, "", "LassoCV"], [647, 1, 1, "", "LassoLars"], [648, 1, 1, "", "LassoLarsCV"], [649, 1, 1, "", "LassoLarsIC"], [650, 1, 1, "", "LinearRegression"], [651, 1, 1, "", "LogisticRegression"], [652, 1, 1, "", "LogisticRegressionCV"], [653, 1, 1, "", "MultiTaskElasticNet"], [654, 1, 1, "", "MultiTaskElasticNetCV"], [655, 1, 1, "", "MultiTaskLasso"], [656, 1, 1, "", "MultiTaskLassoCV"], [657, 1, 1, "", "OrthogonalMatchingPursuit"], [658, 1, 1, "", "OrthogonalMatchingPursuitCV"], [659, 1, 1, "", "PassiveAggressiveClassifier"], [660, 4, 1, "", "PassiveAggressiveRegressor"], [661, 1, 1, "", "Perceptron"], [662, 1, 1, "", "PoissonRegressor"], [663, 1, 1, "", "QuantileRegressor"], [664, 1, 1, "", "RANSACRegressor"], [665, 1, 1, "", "Ridge"], [666, 1, 1, "", "RidgeCV"], [667, 1, 1, "", "RidgeClassifier"], [668, 1, 1, "", "RidgeClassifierCV"], [669, 1, 1, "", "SGDClassifier"], [670, 1, 1, "", "SGDOneClassSVM"], [671, 1, 1, "", "SGDRegressor"], [672, 1, 1, "", "TheilSenRegressor"], [673, 1, 1, "", "TweedieRegressor"], [674, 4, 1, "", "enet_path"], [675, 4, 1, "", "lars_path"], [676, 4, 1, "", "lars_path_gram"], [677, 4, 1, "", "lasso_path"], [678, 4, 1, "", "orthogonal_mp"], [679, 4, 1, "", "orthogonal_mp_gram"], [680, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "set_predict_request"], [637, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_fit_request"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_predict_request"], [638, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "path"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_score_request"], [639, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "path"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "path"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"], [645, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[651, 2, 1, "", "decision_function"], [651, 2, 1, "", "densify"], [651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "predict_log_proba"], [651, 2, 1, "", "predict_proba"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"], [651, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[652, 2, 1, "", "decision_function"], [652, 2, 1, "", "densify"], [652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "predict_log_proba"], [652, 2, 1, "", "predict_proba"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"], [652, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"], [653, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "path"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "path"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"], [655, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "partial_fit"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_partial_fit_request"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[661, 2, 1, "", "decision_function"], [661, 2, 1, "", "densify"], [661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "partial_fit"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_partial_fit_request"], [661, 2, 1, "", "set_score_request"], [661, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[667, 3, 1, "", "classes_"], [667, 2, 1, "", "decision_function"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[668, 3, 1, "", "classes_"], [668, 2, 1, "", "decision_function"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[669, 2, 1, "", "decision_function"], [669, 2, 1, "", "densify"], [669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "partial_fit"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "predict_log_proba"], [669, 2, 1, "", "predict_proba"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_partial_fit_request"], [669, 2, 1, "", "set_score_request"], [669, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[670, 2, 1, "", "decision_function"], [670, 2, 1, "", "densify"], [670, 2, 1, "", "fit"], [670, 2, 1, "", "fit_predict"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "partial_fit"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score_samples"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_partial_fit_request"], [670, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "set_score_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[681, 1, 1, "", "Isomap"], [682, 1, 1, "", "LocallyLinearEmbedding"], [683, 1, 1, "", "MDS"], [684, 1, 1, "", "SpectralEmbedding"], [685, 1, 1, "", "TSNE"], [686, 4, 1, "", "locally_linear_embedding"], [687, 4, 1, "", "smacof"], [688, 4, 1, "", "spectral_embedding"], [689, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[681, 2, 1, "", "fit"], [681, 2, 1, "", "fit_transform"], [681, 2, 1, "", "get_feature_names_out"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "reconstruction_error"], [681, 2, 1, "", "set_output"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[682, 2, 1, "", "fit"], [682, 2, 1, "", "fit_transform"], [682, 2, 1, "", "get_feature_names_out"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "set_output"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[683, 2, 1, "", "fit"], [683, 2, 1, "", "fit_transform"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[684, 2, 1, "", "fit"], [684, 2, 1, "", "fit_transform"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[685, 2, 1, "", "fit"], [685, 2, 1, "", "fit_transform"], [685, 2, 1, "", "get_feature_names_out"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "set_output"], [685, 2, 1, "", "set_params"]], "sklearn.metrics": [[690, 1, 1, "", "ConfusionMatrixDisplay"], [691, 1, 1, "", "DetCurveDisplay"], [692, 1, 1, "", "DistanceMetric"], [693, 1, 1, "", "PrecisionRecallDisplay"], [694, 1, 1, "", "PredictionErrorDisplay"], [695, 1, 1, "", "RocCurveDisplay"], [696, 4, 1, "", "accuracy_score"], [697, 4, 1, "", "adjusted_mutual_info_score"], [698, 4, 1, "", "adjusted_rand_score"], [699, 4, 1, "", "auc"], [700, 4, 1, "", "average_precision_score"], [701, 4, 1, "", "balanced_accuracy_score"], [702, 4, 1, "", "brier_score_loss"], [703, 4, 1, "", "calinski_harabasz_score"], [704, 4, 1, "", "check_scoring"], [705, 4, 1, "", "class_likelihood_ratios"], [706, 4, 1, "", "classification_report"], [401, 0, 0, "-", "cluster"], [709, 4, 1, "", "cohen_kappa_score"], [710, 4, 1, "", "completeness_score"], [711, 4, 1, "", "confusion_matrix"], [712, 4, 1, "", "consensus_score"], [713, 4, 1, "", "coverage_error"], [714, 4, 1, "", "d2_absolute_error_score"], [715, 4, 1, "", "d2_pinball_score"], [716, 4, 1, "", "d2_tweedie_score"], [717, 4, 1, "", "davies_bouldin_score"], [718, 4, 1, "", "dcg_score"], [719, 4, 1, "", "det_curve"], [720, 4, 1, "", "explained_variance_score"], [721, 4, 1, "", "f1_score"], [722, 4, 1, "", "fbeta_score"], [723, 4, 1, "", "fowlkes_mallows_score"], [724, 4, 1, "", "get_scorer"], [725, 4, 1, "", "get_scorer_names"], [726, 4, 1, "", "hamming_loss"], [727, 4, 1, "", "hinge_loss"], [728, 4, 1, "", "homogeneity_completeness_v_measure"], [729, 4, 1, "", "homogeneity_score"], [730, 4, 1, "", "jaccard_score"], [731, 4, 1, "", "label_ranking_average_precision_score"], [732, 4, 1, "", "label_ranking_loss"], [733, 4, 1, "", "log_loss"], [734, 4, 1, "", "make_scorer"], [735, 4, 1, "", "matthews_corrcoef"], [736, 4, 1, "", "max_error"], [737, 4, 1, "", "mean_absolute_error"], [738, 4, 1, "", "mean_absolute_percentage_error"], [739, 4, 1, "", "mean_gamma_deviance"], [740, 4, 1, "", "mean_pinball_loss"], [741, 4, 1, "", "mean_poisson_deviance"], [742, 4, 1, "", "mean_squared_error"], [743, 4, 1, "", "mean_squared_log_error"], [744, 4, 1, "", "mean_tweedie_deviance"], [745, 4, 1, "", "median_absolute_error"], [746, 4, 1, "", "multilabel_confusion_matrix"], [747, 4, 1, "", "mutual_info_score"], [748, 4, 1, "", "ndcg_score"], [749, 4, 1, "", "normalized_mutual_info_score"], [401, 0, 0, "-", "pairwise"], [770, 4, 1, "", "pairwise_distances"], [771, 4, 1, "", "pairwise_distances_argmin"], [772, 4, 1, "", "pairwise_distances_argmin_min"], [773, 4, 1, "", "pairwise_distances_chunked"], [774, 4, 1, "", "precision_recall_curve"], [775, 4, 1, "", "precision_recall_fscore_support"], [776, 4, 1, "", "precision_score"], [777, 4, 1, "", "r2_score"], [778, 4, 1, "", "rand_score"], [779, 4, 1, "", "recall_score"], [780, 4, 1, "", "roc_auc_score"], [781, 4, 1, "", "roc_curve"], [782, 4, 1, "", "silhouette_samples"], [783, 4, 1, "", "silhouette_score"], [784, 4, 1, "", "top_k_accuracy_score"], [785, 4, 1, "", "v_measure_score"], [786, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[690, 2, 1, "", "from_estimator"], [690, 2, 1, "", "from_predictions"], [690, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[691, 2, 1, "", "from_estimator"], [691, 2, 1, "", "from_predictions"], [691, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[692, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[693, 2, 1, "", "from_estimator"], [693, 2, 1, "", "from_predictions"], [693, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[694, 2, 1, "", "from_estimator"], [694, 2, 1, "", "from_predictions"], [694, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[695, 2, 1, "", "from_estimator"], [695, 2, 1, "", "from_predictions"], [695, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[707, 4, 1, "", "contingency_matrix"], [708, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[750, 4, 1, "", "additive_chi2_kernel"], [751, 4, 1, "", "chi2_kernel"], [752, 4, 1, "", "cosine_distances"], [753, 4, 1, "", "cosine_similarity"], [754, 4, 1, "", "distance_metrics"], [755, 4, 1, "", "euclidean_distances"], [756, 4, 1, "", "haversine_distances"], [757, 4, 1, "", "kernel_metrics"], [758, 4, 1, "", "laplacian_kernel"], [759, 4, 1, "", "linear_kernel"], [760, 4, 1, "", "manhattan_distances"], [761, 4, 1, "", "nan_euclidean_distances"], [762, 4, 1, "", "paired_cosine_distances"], [763, 4, 1, "", "paired_distances"], [764, 4, 1, "", "paired_euclidean_distances"], [765, 4, 1, "", "paired_manhattan_distances"], [766, 4, 1, "", "pairwise_kernels"], [767, 4, 1, "", "polynomial_kernel"], [768, 4, 1, "", "rbf_kernel"], [769, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[787, 1, 1, "", "BayesianGaussianMixture"], [788, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[787, 2, 1, "", "fit"], [787, 2, 1, "", "fit_predict"], [787, 2, 1, "", "get_metadata_routing"], [787, 2, 1, "", "get_params"], [787, 2, 1, "", "predict"], [787, 2, 1, "", "predict_proba"], [787, 2, 1, "", "sample"], [787, 2, 1, "", "score"], [787, 2, 1, "", "score_samples"], [787, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[788, 2, 1, "", "aic"], [788, 2, 1, "", "bic"], [788, 2, 1, "", "fit"], [788, 2, 1, "", "fit_predict"], [788, 2, 1, "", "get_metadata_routing"], [788, 2, 1, "", "get_params"], [788, 2, 1, "", "predict"], [788, 2, 1, "", "predict_proba"], [788, 2, 1, "", "sample"], [788, 2, 1, "", "score"], [788, 2, 1, "", "score_samples"], [788, 2, 1, "", "set_params"]], "sklearn.model_selection": [[789, 1, 1, "", "GridSearchCV"], [790, 1, 1, "", "GroupKFold"], [791, 1, 1, "", "GroupShuffleSplit"], [792, 1, 1, "", "HalvingGridSearchCV"], [793, 1, 1, "", "HalvingRandomSearchCV"], [794, 1, 1, "", "KFold"], [795, 1, 1, "", "LearningCurveDisplay"], [796, 1, 1, "", "LeaveOneGroupOut"], [797, 1, 1, "", "LeaveOneOut"], [798, 1, 1, "", "LeavePGroupsOut"], [799, 1, 1, "", "LeavePOut"], [800, 1, 1, "", "ParameterGrid"], [801, 1, 1, "", "ParameterSampler"], [802, 1, 1, "", "PredefinedSplit"], [803, 1, 1, "", "RandomizedSearchCV"], [804, 1, 1, "", "RepeatedKFold"], [805, 1, 1, "", "RepeatedStratifiedKFold"], [806, 1, 1, "", "ShuffleSplit"], [807, 1, 1, "", "StratifiedGroupKFold"], [808, 1, 1, "", "StratifiedKFold"], [809, 1, 1, "", "StratifiedShuffleSplit"], [810, 1, 1, "", "TimeSeriesSplit"], [811, 1, 1, "", "ValidationCurveDisplay"], [812, 4, 1, "", "check_cv"], [813, 4, 1, "", "cross_val_predict"], [814, 4, 1, "", "cross_val_score"], [815, 4, 1, "", "cross_validate"], [816, 4, 1, "", "learning_curve"], [817, 4, 1, "", "permutation_test_score"], [818, 4, 1, "", "train_test_split"], [819, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[789, 3, 1, "", "classes_"], [789, 2, 1, "", "decision_function"], [789, 2, 1, "", "fit"], [789, 2, 1, "", "get_metadata_routing"], [789, 2, 1, "", "get_params"], [789, 2, 1, "", "inverse_transform"], [789, 3, 1, "", "n_features_in_"], [789, 2, 1, "", "predict"], [789, 2, 1, "", "predict_log_proba"], [789, 2, 1, "", "predict_proba"], [789, 2, 1, "", "score"], [789, 2, 1, "", "score_samples"], [789, 2, 1, "", "set_fit_request"], [789, 2, 1, "", "set_params"], [789, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[790, 2, 1, "", "get_metadata_routing"], [790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "set_split_request"], [790, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[791, 2, 1, "", "get_metadata_routing"], [791, 2, 1, "", "get_n_splits"], [791, 2, 1, "", "set_split_request"], [791, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[792, 3, 1, "", "classes_"], [792, 2, 1, "", "decision_function"], [792, 2, 1, "", "fit"], [792, 2, 1, "", "get_metadata_routing"], [792, 2, 1, "", "get_params"], [792, 2, 1, "", "inverse_transform"], [792, 3, 1, "", "n_features_in_"], [792, 2, 1, "", "predict"], [792, 2, 1, "", "predict_log_proba"], [792, 2, 1, "", "predict_proba"], [792, 2, 1, "", "score"], [792, 2, 1, "", "score_samples"], [792, 2, 1, "", "set_fit_request"], [792, 2, 1, "", "set_params"], [792, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[793, 3, 1, "", "classes_"], [793, 2, 1, "", "decision_function"], [793, 2, 1, "", "fit"], [793, 2, 1, "", "get_metadata_routing"], [793, 2, 1, "", "get_params"], [793, 2, 1, "", "inverse_transform"], [793, 3, 1, "", "n_features_in_"], [793, 2, 1, "", "predict"], [793, 2, 1, "", "predict_log_proba"], [793, 2, 1, "", "predict_proba"], [793, 2, 1, "", "score"], [793, 2, 1, "", "score_samples"], [793, 2, 1, "", "set_fit_request"], [793, 2, 1, "", "set_params"], [793, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[795, 2, 1, "", "from_estimator"], [795, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "set_split_request"], [796, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "set_split_request"], [798, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "inverse_transform"], [803, 3, 1, "", "n_features_in_"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_fit_request"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "set_split_request"], [807, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[811, 2, 1, "", "from_estimator"], [811, 2, 1, "", "plot"]], "sklearn.multiclass": [[820, 1, 1, "", "OneVsOneClassifier"], [821, 1, 1, "", "OneVsRestClassifier"], [822, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[820, 2, 1, "", "decision_function"], [820, 2, 1, "", "fit"], [820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_params"], [820, 3, 1, "", "n_classes_"], [820, 2, 1, "", "partial_fit"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "score"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "set_partial_fit_request"], [820, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[821, 2, 1, "", "decision_function"], [821, 2, 1, "", "fit"], [821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_params"], [821, 3, 1, "", "multilabel_"], [821, 3, 1, "", "n_classes_"], [821, 2, 1, "", "partial_fit"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "set_partial_fit_request"], [821, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[823, 1, 1, "", "ClassifierChain"], [824, 1, 1, "", "MultiOutputClassifier"], [825, 1, 1, "", "MultiOutputRegressor"], [826, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[823, 2, 1, "", "decision_function"], [823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "partial_fit"], [824, 2, 1, "", "predict"], [824, 2, 1, "", "predict_proba"], [824, 2, 1, "", "score"], [824, 2, 1, "", "set_fit_request"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "partial_fit"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_fit_request"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_partial_fit_request"], [825, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[827, 1, 1, "", "BernoulliNB"], [828, 1, 1, "", "CategoricalNB"], [829, 1, 1, "", "ComplementNB"], [830, 1, 1, "", "GaussianNB"], [831, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "partial_fit"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "predict_joint_log_proba"], [827, 2, 1, "", "predict_log_proba"], [827, 2, 1, "", "predict_proba"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_fit_request"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_partial_fit_request"], [827, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_joint_log_proba"], [828, 2, 1, "", "predict_log_proba"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_fit_request"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_partial_fit_request"], [828, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_joint_log_proba"], [829, 2, 1, "", "predict_log_proba"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_fit_request"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_partial_fit_request"], [829, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "partial_fit"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_joint_log_proba"], [830, 2, 1, "", "predict_log_proba"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_fit_request"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_partial_fit_request"], [830, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "partial_fit"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_joint_log_proba"], [831, 2, 1, "", "predict_log_proba"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_fit_request"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_partial_fit_request"], [831, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[832, 1, 1, "", "BallTree"], [833, 1, 1, "", "KDTree"], [834, 1, 1, "", "KNeighborsClassifier"], [835, 1, 1, "", "KNeighborsRegressor"], [836, 1, 1, "", "KNeighborsTransformer"], [837, 1, 1, "", "KernelDensity"], [838, 1, 1, "", "LocalOutlierFactor"], [839, 1, 1, "", "NearestCentroid"], [840, 1, 1, "", "NearestNeighbors"], [841, 1, 1, "", "NeighborhoodComponentsAnalysis"], [842, 1, 1, "", "RadiusNeighborsClassifier"], [843, 1, 1, "", "RadiusNeighborsRegressor"], [844, 1, 1, "", "RadiusNeighborsTransformer"], [845, 4, 1, "", "kneighbors_graph"], [846, 4, 1, "", "radius_neighbors_graph"], [847, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[832, 2, 1, "", "get_arrays"], [832, 2, 1, "", "get_n_calls"], [832, 2, 1, "", "get_tree_stats"], [832, 2, 1, "", "kernel_density"], [832, 2, 1, "", "query"], [832, 2, 1, "", "query_radius"], [832, 2, 1, "", "reset_n_calls"], [832, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[833, 2, 1, "", "get_arrays"], [833, 2, 1, "", "get_n_calls"], [833, 2, 1, "", "get_tree_stats"], [833, 2, 1, "", "kernel_density"], [833, 2, 1, "", "query"], [833, 2, 1, "", "query_radius"], [833, 2, 1, "", "reset_n_calls"], [833, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "kneighbors"], [834, 2, 1, "", "kneighbors_graph"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "kneighbors"], [835, 2, 1, "", "kneighbors_graph"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_transform"], [836, 2, 1, "", "get_feature_names_out"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "kneighbors"], [836, 2, 1, "", "kneighbors_graph"], [836, 2, 1, "", "set_output"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "sample"], [837, 2, 1, "", "score"], [837, 2, 1, "", "score_samples"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[838, 2, 1, "", "decision_function"], [838, 2, 1, "", "fit"], [838, 2, 1, "", "fit_predict"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "kneighbors"], [838, 2, 1, "", "kneighbors_graph"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score_samples"], [838, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "kneighbors"], [840, 2, 1, "", "kneighbors_graph"], [840, 2, 1, "", "radius_neighbors"], [840, 2, 1, "", "radius_neighbors_graph"], [840, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "radius_neighbors"], [842, 2, 1, "", "radius_neighbors_graph"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "radius_neighbors"], [843, 2, 1, "", "radius_neighbors_graph"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "radius_neighbors"], [844, 2, 1, "", "radius_neighbors_graph"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.neural_network": [[848, 1, 1, "", "BernoulliRBM"], [849, 1, 1, "", "MLPClassifier"], [850, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "gibbs"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "score_samples"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_log_proba"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_partial_fit_request"], [849, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "partial_fit"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[851, 1, 1, "", "FeatureUnion"], [852, 1, 1, "", "Pipeline"], [853, 4, 1, "", "make_pipeline"], [854, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[851, 3, 1, "", "feature_names_in_"], [851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 3, 1, "", "n_features_in_"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[852, 3, 1, "", "classes_"], [852, 2, 1, "", "decision_function"], [852, 3, 1, "", "feature_names_in_"], [852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_predict"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "inverse_transform"], [852, 3, 1, "", "n_features_in_"], [852, 3, 1, "", "named_steps"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "predict_log_proba"], [852, 2, 1, "", "predict_proba"], [852, 2, 1, "", "score"], [852, 2, 1, "", "score_samples"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "set_score_request"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing": [[855, 1, 1, "", "Binarizer"], [856, 1, 1, "", "FunctionTransformer"], [857, 1, 1, "", "KBinsDiscretizer"], [858, 1, 1, "", "KernelCenterer"], [859, 1, 1, "", "LabelBinarizer"], [860, 1, 1, "", "LabelEncoder"], [861, 1, 1, "", "MaxAbsScaler"], [862, 1, 1, "", "MinMaxScaler"], [863, 1, 1, "", "MultiLabelBinarizer"], [864, 1, 1, "", "Normalizer"], [865, 1, 1, "", "OneHotEncoder"], [866, 1, 1, "", "OrdinalEncoder"], [867, 1, 1, "", "PolynomialFeatures"], [868, 1, 1, "", "PowerTransformer"], [869, 1, 1, "", "QuantileTransformer"], [870, 1, 1, "", "RobustScaler"], [871, 1, 1, "", "SplineTransformer"], [872, 1, 1, "", "StandardScaler"], [873, 1, 1, "", "TargetEncoder"], [874, 4, 1, "", "add_dummy_feature"], [875, 4, 1, "", "binarize"], [876, 4, 1, "", "label_binarize"], [877, 4, 1, "", "maxabs_scale"], [878, 4, 1, "", "minmax_scale"], [879, 4, 1, "", "normalize"], [880, 4, 1, "", "power_transform"], [881, 4, 1, "", "quantile_transform"], [882, 4, 1, "", "robust_scale"], [883, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_transform_request"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "inverse_transform"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_fit_request"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "set_fit_request"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_transform_request"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "set_inverse_transform_request"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "inverse_transform"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "partial_fit"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "inverse_transform"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_transform_request"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 3, 1, "", "infrequent_categories_"], [865, 2, 1, "", "inverse_transform"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 3, 1, "", "infrequent_categories_"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 3, 1, "", "powers_"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "set_fit_request"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "partial_fit"], [872, 2, 1, "", "set_fit_request"], [872, 2, 1, "", "set_inverse_transform_request"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "set_partial_fit_request"], [872, 2, 1, "", "set_transform_request"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 3, 1, "", "infrequent_categories_"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.random_projection": [[884, 1, 1, "", "GaussianRandomProjection"], [885, 1, 1, "", "SparseRandomProjection"], [886, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[887, 1, 1, "", "LabelPropagation"], [888, 1, 1, "", "LabelSpreading"], [889, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "predict"], [887, 2, 1, "", "predict_proba"], [887, 2, 1, "", "score"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "predict"], [888, 2, 1, "", "predict_proba"], [888, 2, 1, "", "score"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[889, 2, 1, "", "decision_function"], [889, 2, 1, "", "fit"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "predict_log_proba"], [889, 2, 1, "", "predict_proba"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_params"]], "sklearn.svm": [[892, 1, 1, "", "LinearSVC"], [893, 1, 1, "", "LinearSVR"], [894, 1, 1, "", "NuSVC"], [895, 1, 1, "", "NuSVR"], [896, 1, 1, "", "OneClassSVM"], [897, 1, 1, "", "SVC"], [898, 1, 1, "", "SVR"], [899, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[892, 2, 1, "", "decision_function"], [892, 2, 1, "", "densify"], [892, 2, 1, "", "fit"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "predict"], [892, 2, 1, "", "score"], [892, 2, 1, "", "set_fit_request"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "set_score_request"], [892, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[893, 2, 1, "", "fit"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_fit_request"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[894, 3, 1, "", "coef_"], [894, 2, 1, "", "decision_function"], [894, 2, 1, "", "fit"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 3, 1, "", "n_support_"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "predict_log_proba"], [894, 2, 1, "", "predict_proba"], [894, 3, 1, "", "probA_"], [894, 3, 1, "", "probB_"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_fit_request"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[895, 3, 1, "", "coef_"], [895, 2, 1, "", "fit"], [895, 2, 1, "", "get_metadata_routing"], [895, 2, 1, "", "get_params"], [895, 3, 1, "", "n_support_"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_fit_request"], [895, 2, 1, "", "set_params"], [895, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[896, 3, 1, "", "coef_"], [896, 2, 1, "", "decision_function"], [896, 2, 1, "", "fit"], [896, 2, 1, "", "fit_predict"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 3, 1, "", "n_support_"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "score_samples"], [896, 2, 1, "", "set_fit_request"], [896, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[897, 3, 1, "", "coef_"], [897, 2, 1, "", "decision_function"], [897, 2, 1, "", "fit"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 3, 1, "", "n_support_"], [897, 2, 1, "", "predict"], [897, 2, 1, "", "predict_log_proba"], [897, 2, 1, "", "predict_proba"], [897, 3, 1, "", "probA_"], [897, 3, 1, "", "probB_"], [897, 2, 1, "", "score"], [897, 2, 1, "", "set_fit_request"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[898, 3, 1, "", "coef_"], [898, 2, 1, "", "fit"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 3, 1, "", "n_support_"], [898, 2, 1, "", "predict"], [898, 2, 1, "", "score"], [898, 2, 1, "", "set_fit_request"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "set_score_request"]], "sklearn.tree": [[900, 1, 1, "", "DecisionTreeClassifier"], [901, 1, 1, "", "DecisionTreeRegressor"], [902, 1, 1, "", "ExtraTreeClassifier"], [903, 1, 1, "", "ExtraTreeRegressor"], [904, 4, 1, "", "export_graphviz"], [905, 4, 1, "", "export_text"], [906, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[900, 2, 1, "", "apply"], [900, 2, 1, "", "cost_complexity_pruning_path"], [900, 2, 1, "", "decision_path"], [900, 3, 1, "", "feature_importances_"], [900, 2, 1, "", "fit"], [900, 2, 1, "", "get_depth"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_n_leaves"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_log_proba"], [900, 2, 1, "", "predict_proba"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_fit_request"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_predict_proba_request"], [900, 2, 1, "", "set_predict_request"], [900, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[901, 2, 1, "", "apply"], [901, 2, 1, "", "cost_complexity_pruning_path"], [901, 2, 1, "", "decision_path"], [901, 3, 1, "", "feature_importances_"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_depth"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_n_leaves"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_predict_request"], [901, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[902, 2, 1, "", "apply"], [902, 2, 1, "", "cost_complexity_pruning_path"], [902, 2, 1, "", "decision_path"], [902, 3, 1, "", "feature_importances_"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_depth"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_n_leaves"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_log_proba"], [902, 2, 1, "", "predict_proba"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_predict_proba_request"], [902, 2, 1, "", "set_predict_request"], [902, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[903, 2, 1, "", "apply"], [903, 2, 1, "", "cost_complexity_pruning_path"], [903, 2, 1, "", "decision_path"], [903, 3, 1, "", "feature_importances_"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "get_depth"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_n_leaves"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_predict_request"], [903, 2, 1, "", "set_score_request"]], "sklearn.utils": [[907, 1, 1, "", "Bunch"], [908, 4, 1, "", "_safe_indexing"], [910, 4, 1, "", "as_float_array"], [911, 4, 1, "", "assert_all_finite"], [912, 4, 1, "", "check_X_y"], [913, 4, 1, "", "check_array"], [914, 4, 1, "", "check_consistent_length"], [915, 4, 1, "", "check_random_state"], [916, 4, 1, "", "check_scalar"], [919, 4, 1, "", "deprecated"], [925, 4, 1, "", "estimator_html_repr"], [932, 4, 1, "", "gen_batches"], [933, 4, 1, "", "gen_even_slices"], [935, 4, 1, "", "indexable"], [945, 4, 1, "", "murmurhash3_32"], [948, 4, 1, "", "parallel_backend"], [950, 4, 1, "", "register_parallel_backend"], [951, 4, 1, "", "resample"], [952, 4, 1, "", "safe_mask"], [953, 4, 1, "", "safe_sqr"], [954, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[907, 2, 1, "", "clear"], [907, 2, 1, "", "copy"], [907, 2, 1, "", "fromkeys"], [907, 2, 1, "", "get"], [907, 2, 1, "", "items"], [907, 2, 1, "", "keys"], [907, 2, 1, "", "pop"], [907, 2, 1, "", "popitem"], [907, 2, 1, "", "setdefault"], [907, 2, 1, "", "update"], [907, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[909, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[917, 4, 1, "", "compute_class_weight"], [918, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[920, 4, 1, "", "all_displays"], [921, 4, 1, "", "all_estimators"], [922, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[923, 4, 1, "", "check_estimator"], [924, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[926, 4, 1, "", "density"], [927, 4, 1, "", "fast_logdet"], [928, 4, 1, "", "randomized_range_finder"], [929, 4, 1, "", "randomized_svd"], [930, 4, 1, "", "safe_sparse_dot"], [931, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[934, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[936, 4, 1, "", "MetadataRequest"], [937, 4, 1, "", "MetadataRouter"], [938, 4, 1, "", "MethodMapping"], [939, 4, 1, "", "get_routing_for_object"], [940, 4, 1, "", "process_routing"]], "sklearn.utils.metaestimators": [[941, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[942, 4, 1, "", "is_multilabel"], [943, 4, 1, "", "type_of_target"], [944, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[946, 1, 1, "", "Parallel"], [947, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[946, 2, 1, "", "dispatch_next"], [946, 2, 1, "", "dispatch_one_batch"], [946, 2, 1, "", "format"], [946, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[949, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[955, 4, 1, "", "incr_mean_variance_axis"], [956, 4, 1, "", "inplace_column_scale"], [957, 4, 1, "", "inplace_csr_column_scale"], [958, 4, 1, "", "inplace_row_scale"], [959, 4, 1, "", "inplace_swap_column"], [960, 4, 1, "", "inplace_swap_row"], [961, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[962, 4, 1, "", "inplace_csr_row_normalize_l1"], [963, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[964, 4, 1, "", "check_is_fitted"], [965, 4, 1, "", "check_memory"], [966, 4, 1, "", "check_symmetric"], [967, 4, 1, "", "column_or_1d"], [968, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 387], "u": 0, "histori": [0, 1020], "govern": [0, 390], "author": [0, 1022], "contributor": [0, 375, 376, 390, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "experi": [0, 37, 375, 390], "team": [0, 375, 390], "commun": [0, 376, 390], "emeritu": 0, "core": [0, 8, 364, 375, 380, 382, 387, 390, 410, 982], "develop": [0, 108, 109, 167, 236, 374, 377, 378, 379, 380, 383, 384, 385, 969, 1017, 1038], "cite": 0, "scikit": [0, 236, 256, 313, 314, 315, 316, 317, 318, 319, 361, 362, 374, 377, 378, 380, 381, 387, 390, 392, 998, 1000, 1001, 1004, 1006, 1007, 1012, 1015, 1018], "learn": [0, 5, 12, 50, 95, 98, 151, 167, 169, 170, 171, 176, 220, 221, 222, 223, 235, 236, 256, 263, 291, 298, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 361, 362, 364, 372, 374, 376, 377, 378, 380, 381, 387, 390, 392, 401, 407, 409, 975, 977, 985, 993, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1018], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 86, 100, 104, 233, 376, 378, 387, 401, 992, 997, 1000], "infrastructur": 0, "support": [0, 25, 122, 167, 194, 309, 313, 314, 315, 316, 318, 319, 329, 332, 341, 387, 392, 398, 400, 401, 409, 995, 996, 1003, 1013, 1028], "exampl": [3, 6, 9, 53, 59, 75, 88, 102, 109, 128, 159, 167, 196, 197, 204, 339, 343, 364, 370, 371, 381, 387, 391, 393, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 422, 425, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 455, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 475, 476, 477, 480, 481, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 497, 499, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 574, 575, 577, 580, 581, 582, 583, 584, 586, 587, 590, 592, 593, 595, 597, 598, 599, 600, 601, 603, 604, 606, 607, 608, 610, 611, 612, 615, 616, 618, 620, 621, 623, 624, 625, 626, 627, 628, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 645, 646, 648, 649, 650, 651, 652, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 681, 682, 683, 684, 685, 686, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 705, 706, 710, 711, 712, 719, 721, 726, 729, 730, 733, 734, 737, 740, 741, 742, 744, 745, 747, 749, 770, 771, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 823, 825, 827, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 845, 848, 849, 850, 851, 852, 853, 856, 857, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 878, 881, 885, 886, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 906, 907, 915, 924, 926, 933, 937, 938, 939, 940, 941, 954, 964, 969, 972, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 1006, 1012, 1013, 1014, 1019, 1022], "base": [3, 4, 85, 119, 120, 149, 167, 184, 235, 313, 314, 316, 318, 319, 376, 401, 402, 406, 409, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 976, 988, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "real": [3, 9, 75, 111, 167, 371], "world": [3, 75, 167, 371], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 104, 112, 118, 121, 122, 132, 138, 139, 152, 154, 156, 157, 159, 161, 167, 169, 170, 171, 179, 182, 184, 189, 200, 202, 209, 218, 221, 222, 229, 234, 240, 259, 267, 268, 310, 326, 327, 331, 347, 353, 368, 369, 370, 371, 372, 373, 381, 387, 401, 412, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 1006, 1012, 1013, 1015, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "time": [4, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 118, 123, 136, 142, 150, 162, 166, 174, 177, 194, 219, 227, 234, 235, 244, 253, 277, 280, 295, 301, 311, 320, 328, 345, 347, 350, 357, 406], "relat": [4, 8, 370, 376, 988, 1000, 1029], "featur": [4, 51, 54, 74, 100, 117, 119, 120, 122, 126, 129, 130, 143, 145, 147, 148, 149, 167, 172, 173, 176, 179, 194, 197, 218, 234, 240, 262, 300, 304, 305, 308, 309, 313, 315, 316, 337, 347, 348, 362, 364, 376, 380, 393, 401, 403, 409, 410, 411, 970, 988, 990, 997, 1014, 1015, 1025, 1026, 1027, 1028, 1029], "engin": [4, 172, 1000, 1004], "data": [4, 7, 9, 12, 17, 20, 24, 26, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 103, 111, 113, 119, 120, 126, 128, 132, 145, 148, 149, 157, 158, 160, 165, 169, 172, 173, 176, 180, 186, 193, 194, 204, 230, 235, 239, 242, 251, 256, 258, 262, 267, 268, 270, 271, 274, 288, 293, 300, 303, 307, 308, 309, 322, 334, 337, 341, 348, 349, 358, 362, 364, 371, 381, 387, 389, 402, 403, 405, 406, 411, 412, 990, 994, 1004, 1006, 1009, 1012, 1014, 1015], "explor": 4, "bike": [4, 171], "share": [4, 171], "demand": 4, "cross": [4, 84, 85, 138, 139, 148, 167, 189, 256, 257, 259, 260, 264, 266, 271, 310, 337, 358, 401, 405, 406, 969, 976, 1010], "valid": [4, 138, 139, 148, 189, 233, 256, 257, 259, 260, 264, 266, 271, 276, 337, 358, 362, 378, 385, 401, 406, 964, 965, 966, 967, 968, 969, 975, 976, 983, 1010], "gradient": [4, 118, 122, 123, 124, 125, 126, 127, 171, 200, 208, 214, 313, 314, 316, 318, 319, 409, 976, 994], "boost": [4, 118, 122, 123, 124, 125, 126, 127, 171, 200, 313, 314, 316, 318, 319, 409], "naiv": [4, 24, 25, 401, 982], "linear": [4, 25, 33, 34, 125, 152, 167, 170, 178, 179, 196, 200, 203, 206, 221, 222, 234, 314, 333, 340, 341, 362, 385, 387, 401, 974, 976, 977, 978, 990, 1013], "regress": [4, 73, 75, 85, 86, 113, 125, 126, 135, 152, 157, 158, 159, 160, 179, 180, 183, 189, 191, 192, 193, 196, 198, 200, 202, 215, 217, 218, 232, 235, 293, 341, 354, 355, 372, 401, 403, 409, 412, 971, 973, 976, 980, 981, 983, 984, 994, 995, 996, 1013], "step": [4, 241, 388, 403], "categori": [4, 317, 319, 990], "trigonometr": 4, "period": [4, 201], "spline": [4, 201, 316, 990], "qualit": 4, "analysi": [4, 33, 34, 60, 95, 101, 103, 106, 112, 125, 171, 184, 246, 263, 264, 271, 289, 290, 291, 347, 401, 405, 407, 974, 983, 997, 1014, 1015], "impact": [4, 61, 1037, 1038, 1039], "model": [4, 7, 11, 57, 75, 85, 96, 103, 111, 118, 119, 120, 122, 126, 128, 148, 149, 152, 157, 167, 170, 171, 172, 176, 178, 179, 184, 188, 189, 194, 200, 203, 218, 230, 235, 240, 245, 247, 251, 252, 254, 260, 261, 263, 268, 288, 293, 300, 308, 314, 316, 341, 347, 362, 378, 387, 388, 390, 396, 397, 401, 406, 969, 975, 976, 979, 980, 982, 984, 985, 1006, 1010, 1013, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "predict": [4, 10, 24, 86, 113, 125, 135, 153, 169, 180, 200, 235, 239, 257, 268, 322, 362, 387, 388, 405, 406, 412, 980, 991, 1006, 1013], "pairwis": [4, 261, 401, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 978], "interact": [4, 171, 318, 409, 1013], "polynomi": [4, 176, 179, 180, 201, 972, 976, 978, 990, 1013], "non": [4, 14, 95, 125, 195, 200, 204, 221, 266, 333, 340, 341, 407, 976, 990], "kernel": [4, 5, 100, 152, 157, 158, 160, 161, 167, 175, 176, 234, 235, 285, 286, 294, 315, 330, 333, 338, 341, 401, 407, 408, 412, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 972, 973, 978, 990, 995, 1013], "conclud": [4, 111, 225], "remark": [4, 57, 111, 225, 233], "imag": [5, 47, 50, 53, 66, 98, 370, 401, 410, 576, 577, 578, 579, 580], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 129, 130, 132, 149, 187, 203, 214, 216, 261, 265, 270, 304, 341, 347, 348, 358, 364, 377, 381, 382, 384, 387, 406, 407, 409, 410, 411, 416, 419, 422, 425, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 455, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 475, 476, 477, 480, 481, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 497, 499, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 574, 575, 577, 580, 581, 582, 583, 584, 586, 587, 590, 592, 593, 595, 597, 598, 599, 600, 601, 603, 604, 606, 607, 608, 610, 611, 612, 615, 616, 618, 620, 621, 623, 624, 625, 626, 627, 628, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 645, 646, 648, 649, 650, 651, 652, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 681, 682, 683, 684, 685, 686, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 705, 706, 710, 711, 712, 719, 721, 726, 729, 730, 733, 734, 737, 740, 741, 742, 744, 745, 747, 749, 770, 771, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 823, 825, 827, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 845, 848, 849, 850, 851, 852, 853, 856, 857, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 878, 881, 885, 886, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 906, 907, 915, 924, 926, 933, 937, 938, 939, 940, 941, 954, 964, 974, 976, 977, 980, 984, 994, 995, 996, 1004, 1013, 1015, 1032], "pca": [5, 58, 73, 95, 96, 99, 100, 101, 102, 103, 104, 308, 407, 534, 997, 1014], "refer": [5, 11, 25, 27, 80, 81, 98, 112, 115, 172, 176, 184, 188, 261, 266, 267, 294, 370, 371, 373, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 969, 970, 972, 973, 974, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996], "load": [5, 7, 17, 50, 58, 118, 120, 122, 126, 138, 149, 172, 193, 218, 222, 230, 234, 242, 262, 270, 271, 308, 309, 334, 337, 347, 348, 349, 369, 370, 381, 387, 410, 1006, 1014, 1015], "via": [5, 53, 188, 189, 218, 409, 972], "openml": [5, 309, 313, 370], "basi": [5, 161, 412, 972, 976, 1013], "reconstruct": [5, 13, 98], "test": [5, 78, 144, 264, 267, 274, 347, 352, 374, 376, 378, 384, 385, 406, 1006, 1013, 1015], "face": [6, 50, 95, 238, 371, 1004, 1011], "recognit": [6, 371, 373, 1011], "eigenfac": [6, 95, 1011], "svm": [6, 141, 145, 146, 176, 214, 234, 316, 327, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 401, 892, 893, 894, 895, 896, 897, 898, 899, 976, 986, 994, 1013, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "complex": [7, 231, 241, 260, 263, 324, 352, 362, 402, 976, 977, 983, 984, 994, 995, 996], "influenc": [7, 10, 362], "benchmark": [7, 10, 58, 347], "choos": [7, 969, 1006, 1008, 1010], "paramet": [7, 78, 125, 259, 315, 334, 342, 376, 378, 388, 389, 401, 403, 409, 969, 976, 980, 995, 1006, 1010, 1015], "run": [7, 58, 265], "code": [7, 95, 105, 376, 378, 381, 382, 384, 407, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "plot": [7, 8, 10, 20, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 91, 92, 96, 97, 101, 111, 113, 118, 121, 126, 128, 132, 133, 134, 135, 138, 148, 165, 171, 179, 180, 184, 192, 193, 194, 204, 205, 209, 222, 230, 234, 239, 240, 242, 251, 257, 258, 263, 265, 268, 270, 274, 276, 288, 300, 309, 313, 315, 316, 322, 331, 332, 337, 347, 353, 383, 401, 975, 987, 1019], "result": [7, 8, 20, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 111, 113, 118, 132, 135, 165, 176, 184, 205, 235, 239, 265, 274, 288, 309, 341, 348, 358, 969], "conclus": [7, 152, 184, 189, 310], "out": [8, 124, 364, 384, 406, 410, 969, 976, 982], "classif": [8, 26, 29, 30, 32, 33, 70, 91, 140, 153, 154, 155, 156, 160, 167, 216, 237, 264, 267, 268, 271, 284, 292, 300, 313, 321, 326, 347, 372, 401, 409, 412, 976, 980, 981, 983, 984, 994, 995, 996, 1013, 1015], "text": [8, 167, 231, 262, 326, 346, 347, 348, 349, 371, 401, 410, 581, 582, 583, 584, 1015], "document": [8, 19, 167, 315, 316, 346, 347, 348, 376, 1000, 1001, 1003, 1018, 1022, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "reuter": 8, "routin": [8, 363, 385], "main": [8, 200], "outlier": [9, 182, 217, 229, 239, 287, 288, 303, 401, 976, 986, 990], "detect": [9, 229, 239, 258, 287, 288, 980, 986, 995], "set": [9, 75, 78, 102, 132, 165, 204, 268, 334, 352, 387, 406, 976, 1006, 1012, 1013, 1015], "first": [9, 37, 376], "second": [9, 37], "latenc": [10, 362], "helper": [10, 161, 222, 385], "function": [10, 34, 161, 190, 204, 205, 210, 222, 239, 256, 274, 315, 337, 349, 385, 401, 406, 409, 412, 972, 976, 980, 995, 1013], "bulk": [10, 362], "atom": [10, 362], "speed": [10, 382], "variou": [10, 52, 207, 226], "regressor": [10, 113, 125, 179, 204, 310, 313, 316, 401, 409], "n_featur": 10, "throughput": [10, 362], "speci": [11, 294], "distribut": [11, 218, 221, 294, 307, 392, 977, 990], "visual": [12, 58, 106, 230, 235, 242, 256, 299, 314, 334, 401, 402, 403, 980, 1019], "stock": [12, 1011], "market": [12, 1011], "structur": [12, 39, 47, 67, 160, 324, 356, 1011], "retriev": [12, 313], "from": [12, 98, 149, 172, 309, 313, 363, 370, 374, 387, 401, 410, 976, 980, 1006, 1013, 1014, 1015, 1032], "internet": 12, "graph": [12, 313, 385, 387, 402, 410, 934], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 167, 317, 319, 348, 372, 399, 401, 402, 407, 413, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 707, 708, 980, 1014, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "affin": [12, 38, 402, 978], "propag": [12, 38, 322, 323, 324, 402, 993], "embed": [12, 52, 221, 222, 233, 291, 409, 977], "2d": [12, 52, 97, 104, 171], "space": [12, 100, 403, 969, 977], "compress": [13, 53, 362, 411], "sens": [13, 411], "tomographi": 13, "l1": [13, 184, 191, 193, 216, 342, 411], "prior": [13, 161, 246], "lasso": [13, 184, 185, 186, 187, 188, 189, 194, 314, 645, 976], "topic": 14, "extract": [14, 74, 98, 218, 262, 348, 362, 364, 401, 410, 1015], "neg": [14, 95, 149, 195, 407, 976], "matrix": [14, 17, 160, 181, 255, 401, 402, 407, 980, 995], "factor": [14, 95, 103, 106, 287, 288, 407, 986], "latent": [14, 85, 407], "dirichlet": [14, 407, 979], "alloc": [14, 407], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 107, 118, 136, 142, 150, 162, 166, 174, 177, 193, 205, 219, 227, 244, 253, 274, 277, 280, 295, 301, 311, 320, 328, 345, 350, 357, 361, 362, 402, 403, 406, 987], "libsvm": [16, 370], "gui": 16, "wikipedia": 17, "princip": [17, 86, 101, 407, 997, 1014], "eigenvector": 17, "download": [17, 132, 165, 370], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 392, 410, 1015], "adjac": 17, "singular": [17, 407], "vector": [17, 25, 53, 167, 329, 332, 341, 347, 349, 371, 401, 410, 995, 1013, 1014], "random": [17, 95, 116, 118, 130, 131, 172, 173, 233, 242, 267, 269, 358, 378, 385, 401, 406, 407, 409, 949, 969, 976, 992, 997], "svd": [17, 95, 407], "central": 17, "score": [17, 85, 118, 123, 138, 148, 165, 179, 251, 260, 267, 268, 337, 393, 402, 406, 975, 980, 995, 1010], "biclust": [18, 19, 20, 167, 372, 399, 401], "spectral": [19, 20, 21, 66, 221, 399, 402, 977], "co": [19, 21, 399], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 221, 229, 382, 387, 974, 976, 979, 981, 983, 984, 988, 996, 1013], "A": [20, 21, 47, 58, 63, 200, 316, 375, 382, 396, 406, 1009, 1012], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "gener": [20, 24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 119, 128, 145, 148, 152, 158, 159, 161, 167, 178, 179, 180, 184, 194, 200, 202, 235, 251, 258, 274, 288, 293, 300, 314, 322, 341, 358, 372, 376, 389, 401, 407, 409, 976, 990, 1001, 1010], "sampl": [20, 38, 55, 63, 78, 96, 97, 145, 181, 213, 235, 262, 274, 293, 314, 341, 344, 370, 385, 389, 401, 402, 409, 976], "fit": [20, 26, 57, 96, 103, 119, 120, 123, 125, 126, 157, 179, 180, 181, 194, 197, 202, 206, 268, 288, 293, 310, 341, 358, 378, 388, 393, 409, 982, 986, 1006], "spectralbiclust": [20, 444], "calibr": [23, 24, 25, 26, 27, 125, 167, 200, 400, 401, 430, 431, 432, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "probabl": [24, 25, 26, 30, 134, 155, 400, 401, 409, 995], "classifi": [24, 25, 27, 31, 109, 135, 183, 241, 258, 279, 313, 327, 331, 334, 347, 356, 400, 401, 409, 974, 983, 1013, 1015], "synthet": [24, 75, 179, 184, 258, 310, 381], "gaussian": [24, 25, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 245, 246, 247, 250, 251, 252, 303, 401, 412, 979, 982, 990, 992], "bay": [24, 25, 401, 982], "curv": [25, 27, 180, 235, 242, 252, 258, 263, 268, 270, 276, 400, 975], "summari": [25, 189, 348, 349, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "3": [26, 183, 319, 1015, 1030, 1031, 1036, 1038], "class": [26, 37, 112, 114, 134, 183, 209, 214, 264, 268, 270, 316, 333, 336, 389, 401, 406, 409, 410, 979, 980, 983, 986, 994, 995, 1022, 1023], "compar": [26, 42, 44, 62, 78, 85, 118, 123, 131, 145, 176, 179, 186, 202, 207, 229, 235, 261, 269, 289, 298, 303, 309, 387], "comparison": [27, 31, 43, 64, 80, 104, 122, 144, 152, 221, 222, 235, 261, 272, 349, 402, 412, 976], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 58, 89, 139, 140, 222, 300, 322, 323, 373, 1012], "normal": [33, 176, 200, 303, 307, 401, 864, 879, 980, 990], "ledoit": [33, 79, 404], "wolf": [33, 79, 404], "oa": [33, 78, 79, 415, 468], "discrimin": [33, 34, 401, 974], "quadrat": [34, 412, 974], "covari": [34, 77, 78, 80, 81, 82, 167, 248, 401, 404, 415, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 974, 1030, 1034, 1035, 1036, 1038], "ellipsoid": [34, 247], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 264, 308, 315, 317, 322, 348, 362, 376, 377, 402, 406, 410, 1015], "evalu": [37, 58, 61, 81, 200, 239, 262, 265, 300, 309, 348, 388, 397, 399, 402, 406, 409, 969, 975, 980, 1015], "defin": [37, 47, 58, 67, 221, 239, 256, 258, 259, 349, 980], "list": [37, 1003], "metric": [37, 40, 125, 265, 401, 402, 406, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 969, 977, 978, 980, 983, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "fix": [37, 380, 1022, 1025, 1026, 1027, 1028, 1029, 1035], "ground": [37, 179], "truth": [37, 179], "label": [37, 268, 322, 323, 324, 371, 372, 402, 406, 409, 980, 991, 993], "grow": 37, "number": [37, 60, 122, 148, 273, 362, 378, 969, 970, 979], "vari": [37, 297, 325, 402], "agglom": [39, 40, 52, 1014], "without": [39, 123, 289, 347], "differ": [40, 44, 62, 78, 161, 171, 303, 306, 309, 331, 378, 387, 393, 402, 976, 1013], "hierarch": [41, 47, 62, 67, 319, 402, 1014], "dendrogram": 41, "birch": [42, 402, 435], "minibatchkmean": [42, 64, 95, 442], "bisect": [43, 402], "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 308, 348, 402, 406, 980, 983, 990, 1013, 1014], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 119, 120, 165, 172, 204, 348, 402, 980, 990, 1014], "regular": [43, 78, 127, 170, 193, 204, 205, 297, 342, 976, 984], "toi": [44, 62, 229, 373], "segment": [46, 66], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 261], "ward": [47, 67, 402, 1014], "an": [47, 59, 109, 165, 181, 189, 239, 291, 313, 317, 387, 410, 969, 986, 1006, 1012, 1013], "color": 48, "quantiz": [48, 53, 1014], "dbscan": [49, 402, 413, 437], "onlin": [50, 207, 316, 317, 994], "dictionari": [50, 95, 98, 105, 407], "part": [50, 411], "agglomer": [51, 54, 997, 1014], "origin": [53, 100, 267, 291, 303], "encod": [53, 122, 309, 310, 319, 990, 991], "strategi": [53, 259, 298, 306, 319, 364, 401, 402, 980], "memori": [53, 362, 382, 384, 402], "footprint": 53, "v": [54, 67, 78, 79, 81, 86, 100, 148, 171, 172, 182, 192, 218, 264, 270, 274, 275, 352, 402, 409, 970, 990, 1006], "univari": [54, 85, 145, 337, 411, 970], "select": [54, 60, 72, 103, 138, 143, 145, 148, 149, 167, 188, 189, 194, 251, 254, 337, 387, 393, 397, 401, 406, 411, 969, 976, 979, 1010, 1028], "hdbscan": [55, 319, 402, 439], "scale": [55, 170, 221, 224, 308, 342, 364, 410, 883, 977, 986, 990, 997], "invari": [55, 264], "multi": [55, 112, 131, 171, 194, 209, 224, 238, 265, 268, 297, 355, 382, 401, 976, 977, 980, 984, 995, 996], "hyperparamet": [55, 157, 158, 262, 269, 610], "robust": [55, 80, 81, 179, 203, 206, 358, 401, 404, 969, 976], "min_cluster_s": 55, "min_sampl": 55, "dbscan_clust": 55, "induct": 56, "demonstr": [57, 265, 306, 322], "assumpt": 57, "possibl": [57, 381], "solut": 57, "final": [57, 152], "handwritten": [58, 222, 373], "our": [58, 256, 259, 376], "reduc": [58, 362], "initi": [59, 61, 249, 979], "silhouett": [60, 402], "kmean": [60, 64, 314, 440], "empir": [61, 81, 233, 404], "linkag": [62, 402], "method": [62, 74, 85, 110, 152, 167, 221, 223, 249, 278, 389, 401, 402, 972, 979, 986, 987, 1014], "shift": [63, 402], "meanshift": [63, 441], "establish": [64, 176], "pariti": 64, "between": [64, 272], "optic": [65, 373, 402, 443], "four": 66, "circl": 66, "two": [66, 114, 186, 240, 261], "unstructur": 67, "we": 67, "ar": [67, 316, 387], "nearest": [67, 167, 281, 282, 283, 284, 289, 292, 293, 313, 401, 970, 983, 1013], "neighbor": [67, 167, 221, 281, 282, 283, 284, 289, 293, 308, 313, 401, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 970, 977, 983, 1013, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039], "10": [67, 1022], "pipelin": [69, 70, 72, 73, 132, 146, 167, 170, 231, 236, 241, 262, 309, 337, 378, 387, 388, 401, 403, 411, 851, 852, 853, 854, 997, 1011, 1015, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "composit": [69, 167, 401, 403, 969], "estim": [69, 77, 78, 79, 80, 81, 82, 108, 109, 115, 122, 124, 131, 158, 165, 167, 179, 203, 206, 231, 236, 238, 239, 250, 269, 285, 286, 294, 313, 314, 315, 318, 358, 378, 387, 388, 389, 398, 401, 403, 404, 406, 408, 409, 412, 969, 970, 974, 976, 979, 980, 995, 1000, 1008, 1010, 1012, 1023, 1030, 1031, 1032], "column": [70, 71, 241], "transform": [70, 71, 72, 75, 85, 117, 130, 241, 315, 316, 317, 368, 387, 388, 403, 405, 406, 983, 990, 991, 992, 1014], "heterogen": [70, 403], "sourc": [70, 96, 374], "20": [70, 347, 371, 1015, 1030], "newsgroup": [70, 347, 371, 1015], "creat": [70, 101, 103, 112, 204, 230, 268, 310, 337, 387], "mix": 71, "type": [71, 246, 378, 389, 402, 1006], "dimension": [72, 221, 224, 241, 290, 308, 348, 974, 977, 983, 997, 1013], "reduct": [72, 221, 225, 241, 290, 308, 348, 974, 983, 997], "gridsearchcv": [72, 138, 265, 409, 789], "illustr": [72, 156, 161, 291, 412], "cach": [72, 283, 403], "within": 72, "chain": [73, 241, 279, 388, 403], "logist": [73, 183, 190, 191, 192, 193, 215, 216, 976, 1013], "concaten": 74, "multipl": [74, 241, 265, 358, 383, 406, 969, 970, 980, 1030, 1031], "effect": [75, 169, 226, 303, 308, 325, 352, 983], "target": [75, 159, 218, 309, 310, 387, 389, 403, 405, 981, 990, 991], "shrinkag": [78, 404, 409, 974, 1013], "ledoitwolf": [78, 466], "max": [78, 980], "likelihood": [78, 179, 180, 264, 980, 985], "approach": [78, 189, 261], "mahalanobi": [80, 983], "distanc": [80, 401, 983], "relev": [80, 184, 976], "minimum": [81, 404], "determin": [81, 184, 404, 976, 980], "spars": [82, 95, 105, 170, 184, 186, 215, 313, 347, 348, 385, 404, 407, 411, 990, 992, 994], "invers": [82, 404, 992], "decomposit": [84, 85, 94, 95, 115, 167, 372, 401, 405, 407, 414, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 1014, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "variabl": [85, 169, 170, 363, 387, 401, 1013], "canon": [85, 405], "symmetr": 85, "pl": 85, "scatter": 85, "multivari": [85, 970], "respons": [85, 390], "pls2": 85, "pls1": 85, "cca": [85, 475], "mode": [85, 362, 374], "b": 85, "deflat": 85, "compon": [86, 95, 101, 289, 290, 291, 407, 979, 983, 997, 1014], "partial": [86, 169, 171, 240, 987], "least": [86, 125, 189, 195, 198, 976], "squar": [86, 125, 161, 195, 198, 204, 412, 972, 976, 978, 980], "The": [86, 89, 90, 169, 170, 200, 226, 233, 259, 268, 371, 380, 406, 410, 979, 980, 992, 1013, 1014], "one": [86, 122, 240, 976, 980], "power": [86, 200], "iri": [90, 102, 104, 121, 154, 209, 327, 331, 353, 373, 412, 1012], "randomli": [91, 92], "multilabel": [92, 237, 372, 385, 401, 980, 981, 1006], "prepar": [95, 111, 113, 176, 221, 270, 271, 308, 334, 380], "nmf": [95, 317, 407, 533], "independ": [95, 407, 1014], "fastica": [95, 96, 97, 414, 526], "minibatchsparsepca": [95, 407, 532], "center": [95, 990], "fa": [95, 103], "posit": [95, 316], "blind": 96, "separ": [96, 212, 335, 336], "ica": [96, 407, 1014], "point": [97, 291], "cloud": 97, "distort": 98, "displai": [98, 205, 230, 231, 241, 318, 319, 384, 1019, 1038], "patch": [98, 410], "noisi": [98, 159, 204], "them": [98, 375], "increment": [99, 364, 407], "kernelpca": [100, 528], "figur": 101, "probabilist": [103, 153, 407, 412], "lda": [104, 407, 974], "precomput": [105, 181, 313, 407], "rotat": 106, "pattern": 106, "__sklearn_is_fitted__": 109, "api": [109, 242, 243, 313, 316, 318, 363, 378, 383, 389, 393, 398, 401, 412, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032], "custom": [109, 259, 330, 410, 990], "implement": [109, 186, 387, 402, 410, 980, 983, 994, 995], "simpl": [109, 152, 236, 286, 382, 1012], "ensembl": [110, 117, 121, 167, 317, 401, 409, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "discret": [111, 128, 160, 304, 305, 990], "versu": [111, 115, 214, 266, 327, 362], "adaboost": [111, 112, 113, 114, 409], "baselin": [111, 176, 200], "samm": 111, "r": 111, "decis": [112, 113, 121, 128, 133, 167, 234, 319, 327, 351, 352, 353, 354, 355, 356, 387, 390, 401, 996], "tree": [112, 113, 117, 119, 120, 121, 130, 167, 172, 200, 313, 318, 319, 351, 352, 353, 354, 355, 356, 387, 401, 409, 411, 900, 901, 902, 903, 904, 905, 906, 983, 988, 996, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "train": [112, 113, 126, 128, 135, 148, 204, 230, 235, 240, 242, 251, 274, 300, 309, 310, 315, 325, 334, 347, 352, 353, 356, 371, 406, 983, 993, 1006, 1013, 1015], "adaboostclassifi": [112, 546], "converg": 112, "error": [112, 116, 125, 138, 179, 204, 258, 274, 384, 392, 976, 980], "weight": [112, 179, 181, 213, 299, 314, 344, 393, 409, 410], "weak": [112, 409], "learner": [112, 409], "decisiontre": 113, "singl": [115, 132, 218, 230, 372, 402, 970], "bag": [115, 124, 347, 409, 410, 969, 1015], "bia": 115, "varianc": [115, 198, 411, 980, 990], "oob": 116, "forest": [116, 118, 119, 120, 131, 172, 173, 242, 371, 409, 986], "histogram": [118, 314, 316, 318, 408, 409], "import": [119, 120, 126, 149, 172, 173, 234, 308, 313, 409, 988], "decreas": [119, 120, 172], "impur": [119, 120, 172, 352, 988], "permut": [119, 172, 173, 267, 313, 406, 988], "pixel": 120, "parallel": [120, 363, 374, 382, 402, 409, 946, 947, 969], "mdi": [120, 172], "surfac": [121, 234, 353], "categor": [122, 309, 315, 387, 409, 982, 990], "am": 122, "hous": [122, 371], "drop": 122, "hot": 122, "ordin": 122, "nativ": [122, 309, 313, 315], "limit": [122, 152, 362, 392, 396, 410], "split": [122, 315, 358, 406], "earli": [123, 208], "stop": [123, 208, 410, 994], "interv": 125, "quantil": [125, 202, 316, 317, 976], "confid": 125, "tune": [125, 259, 262, 315, 969, 1015], "hyper": [125, 259, 315, 401, 969], "preprocess": [126, 132, 167, 170, 171, 239, 241, 302, 319, 349, 358, 387, 401, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 990, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "devianc": [126, 980], "isolationforest": [128, 556], "boundari": [128, 133, 327], "path": [128, 187, 193, 205, 356, 392], "length": [128, 392], "monoton": [129, 409], "constraint": [129, 318, 402, 409], "name": [129, 316, 387], "specifi": [129, 387, 969], "hash": [130, 385, 410], "total": [130, 352, 409], "output": [131, 238, 303, 318, 355, 996, 1013], "meta": [131, 315, 409], "combin": [132, 230], "predictor": 132, "stack": [132, 313, 409], "make": [132, 135, 165, 376, 380, 390], "measur": [132, 264, 402, 980], "votingclassifi": [133, 134, 409, 562], "calcul": 134, "individu": [135, 171, 315, 987], "vote": [135, 409], "tutori": [137, 167, 999, 1007, 1009, 1015], "exercis": [137, 138, 139, 140, 141, 167, 1010, 1013, 1015], "diabet": [138, 240, 373, 1013], "appli": 138, "line": [138, 155], "show": [138, 270], "std": [138, 179], "bonu": 138, "how": [138, 358, 376, 382, 387], "much": 138, "can": [138, 387], "you": [138, 387], "trust": 138, "alpha": [138, 352], "f": [144, 980], "mutual": [144, 402], "inform": [144, 165, 188, 189, 380, 402, 969, 976], "anova": [146, 337], "recurs": [147, 148, 411], "elimin": [147, 148, 411, 969], "sequenti": [149, 411], "coeffici": [149, 170, 179, 204, 205, 402, 980], "toler": 149, "valu": [149, 163, 164, 165, 167, 226, 236, 313, 319, 376, 407, 409, 970, 980, 988, 990, 996], "process": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 170, 358, 390, 401, 412, 979, 1009], "machin": [151, 167, 169, 170, 171, 300, 329, 384, 401, 985, 995, 1006, 1013], "ridg": [152, 180, 182, 198, 204, 205, 235, 310, 401, 412, 665, 973, 976], "gpc": [153, 154, 155, 156, 412], "iso": [155, 268], "xor": [156, 412], "gpr": [157, 158, 412], "mauna": [157, 412], "loa": [157, 412], "co2": [157, 412], "build": [157, 165, 374, 376, 384, 1015], "design": 157, "proper": 157, "extrapol": 157, "interpret": [157, 170, 204, 239, 407, 409], "nois": [158, 159, 180, 412], "level": [158, 363, 402, 409, 412], "optimis": 158, "basic": [159, 218, 388, 404, 412], "introductori": 159, "free": 159, "sequenc": [160, 387], "similar": [160, 978, 980], "under": [160, 387, 1017, 1038], "posterior": 161, "cookbook": 161, "radial": [161, 412, 972, 1013], "ration": [161, 412], "quadradt": 161, "exp": [161, 412], "sine": [161, 252, 412], "dot": [161, 412], "product": [161, 218, 384, 387, 412, 614], "mat\u00e9rn": [161, 412], "miss": [163, 164, 165, 167, 313, 319, 409, 970, 990, 996], "imput": [163, 164, 165, 167, 313, 401, 620, 621, 622, 623, 970, 990, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "variant": 164, "iterativeimput": [164, 620, 970], "befor": [165, 380], "replac": 165, "0": [165, 313, 314, 315, 316, 996, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "knn": [165, 313], "iter": [165, 273, 406, 969], "releas": [167, 312, 313, 314, 315, 316, 317, 318, 319, 380, 392, 1020, 1028], "highlight": [167, 312, 313, 314, 315, 316, 317, 318, 319, 1022, 1025, 1026, 1029, 1030], "mixtur": [167, 245, 246, 247, 250, 251, 252, 401, 787, 788, 979, 1030, 1031, 1035, 1036], "inspect": [167, 168, 391, 401, 624, 625, 626, 627, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "approxim": [167, 175, 176, 234, 281, 315, 401, 404, 972], "manifold": [167, 220, 221, 222, 223, 372, 401, 681, 682, 683, 684, 685, 686, 687, 688, 689, 977, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "miscellan": [167, 228, 401, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "multioutput": [167, 278, 401, 823, 824, 825, 826, 981, 1030, 1031, 1032, 1033, 1034, 1037, 1038], "neural": [167, 171, 296, 401, 984, 985], "network": [167, 171, 296, 401, 984, 985], "semi": [167, 321, 322, 326, 327, 401, 993], "supervis": [167, 321, 322, 326, 327, 401, 984, 993, 1002, 1013], "work": [167, 346, 362, 375, 387, 1015], "failur": [169, 969], "infer": [169, 979], "causal": [169, 170], "simul": 169, "hourli": 169, "wage": [169, 170], "descript": 169, "incom": 169, "fulli": 169, "observ": [169, 1013, 1014], "lesson": [169, 170], "common": [170, 358, 389, 398, 410, 980], "pitfal": [170, 358], "matter": 170, "check": [170, 263, 313, 384, 398, 1030, 1031, 1032], "problem": [170, 407, 995, 996, 1006, 1011, 1013, 1014], "correl": [170, 173, 405, 980, 988], "numer": [170, 363, 378], "wrong": [170, 387], "depend": [171, 236, 240, 374, 987, 1022, 1035, 1036], "condit": [171, 315, 987], "expect": [171, 315, 979, 987], "preprocessor": 171, "1": [171, 197, 316, 317, 318, 319, 387, 1015, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "wai": [171, 376, 387], "layer": [171, 297, 984], "perceptron": [171, 297, 661, 976, 984], "ic": [171, 987], "pdp": 171, "3d": 171, "represent": [171, 231, 314, 362, 410, 1014], "accuraci": [172, 234, 347, 352, 980], "": [172, 308, 310, 379, 387, 409, 980], "multicollinear": 173, "breast": [173, 373], "cancer": [173, 373], "handl": [173, 970], "scalabl": [176, 263, 314], "partit": 176, "bayesian": [179, 180, 246, 261, 401, 976, 979], "recov": 179, "true": [179, 180], "margin": [179, 180, 212, 335, 339], "log": [179, 180, 980], "expans": 179, "sinusoid": 180, "cubic": 180, "l": 180, "elast": [181, 185, 976], "net": [181, 185, 976], "gram": [181, 995], "huberregressor": [182, 642], "strong": 182, "signal": [184, 407, 1014], "automat": [184, 388, 976], "ard": [184, 976], "elasticnet": [184, 314, 639], "dens": 186, "lar": [187, 643, 976], "criteria": [188, 387, 976, 996], "aic": 189, "bic": [189, 251], "criterion": [189, 315, 969, 994], "coordin": 189, "descent": [189, 208, 214, 976, 994], "angl": [189, 976], "penalti": [191, 211, 342], "sparsiti": [191, 197, 410, 1013], "multinomi": [192, 216, 976, 982], "One": [192, 214, 270, 316, 333, 406, 986, 994], "rest": [192, 270], "joint": 194, "task": [194, 401, 976, 1000], "seri": [194, 406], "onli": [197, 217, 1033, 1035], "2": [197, 318, 1015, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "ordinari": [198, 976], "orthogon": [199, 976], "match": [199, 976], "pursuit": [199, 976], "poisson": [200, 218, 314, 315, 980], "loss": [200, 210, 314, 317, 319, 409, 980], "french": 200, "motor": 200, "third": [200, 236, 392], "parti": [200, 236, 392], "liabil": 200, "claim": [200, 218], "constant": [200, 970], "rank": [200, 401, 980], "takeawai": 200, "interpol": 201, "quantileregressor": [202, 663], "linearregress": [202, 650], "ransac": [203, 976], "l2": [204, 342], "purpos": [204, 349, 1001], "thi": [204, 1001], "solver": [207, 407, 976], "stochast": [208, 214, 221, 298, 976, 977, 985, 994], "sgd": [209, 210, 211, 212, 213, 976, 994], "convex": 210, "maximum": [212, 335, 985], "hyperplan": [212, 335, 336], "multiclass": [215, 270, 313, 385, 400, 401, 820, 821, 822, 942, 943, 944, 980, 981, 1006, 1013, 1031, 1034, 1035, 1036], "20newgroup": 215, "mnist": [216, 299], "theil": [217, 976], "sen": [217, 976], "y": [217, 387, 405, 991, 993], "direct": 217, "x": 217, "tweedi": [218, 980], "insur": 218, "definit": [218, 300, 987, 1032], "frequenc": [218, 1015], "sever": [218, 223], "gamma": [218, 319, 980], "pure": 218, "premium": 218, "tweedieregressor": [218, 673], "local": [221, 222, 287, 288, 977, 986], "isomap": [221, 222, 681, 977], "multidimension": 221, "t": [221, 226, 977], "techniqu": 222, "sphere": 223, "swiss": 225, "roll": [225, 378], "And": [225, 390], "hole": 225, "sne": [226, 977], "perplex": 226, "shape": [226, 1006], "anomali": 229, "object": [230, 256, 378, 387, 969, 980, 1012, 1019], "confusionmatrixdisplai": [230, 690], "roccurvedisplai": [230, 695], "precisionrecalldisplai": [230, 693], "compact": 231, "rich": [231, 314], "html": 231, "isoton": [232, 400, 401, 628, 629, 630, 971, 1030, 1031, 1032, 1034, 1036, 1037], "johnson": [233, 992], "lindenstrauss": [233, 992], "bound": 233, "theoret": [233, 976], "explicit": 234, "map": [234, 307, 990], "rbf": [234, 333, 334, 412, 615, 978, 995, 1013], "python": [234, 363, 382, 396, 995, 999, 1000, 1028], "packag": [234, 1000, 1034], "svr": [235, 341, 898, 995], "construct": [235, 403], "look": [235, 341], "metadata": [236, 319, 347, 389, 393], "rout": [236, 319, 389, 393], "router": 236, "consum": 236, "deprec": [236, 376, 401, 919, 1032], "default": [236, 288, 376], "chang": [236, 376, 390, 1004, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "complet": [238, 402], "advanc": [240, 393], "With": [240, 1015], "togeth": [240, 270, 1011, 1014], "grid": [241, 259, 261, 269, 272, 969, 1010, 1015], "search": [241, 259, 261, 269, 272, 388, 969, 1010, 1015], "over": 241, "roc": [242, 258, 270, 271, 313, 980], "svc": [242, 342, 897, 995], "introduc": 243, "set_output": [243, 318, 378], "concentr": 246, "variat": [246, 979], "gmm": [248, 249], "densiti": [250, 285, 286, 294, 319, 408, 926, 995], "best": [251, 377, 387], "confus": [255, 402, 980], "behavior": 256, "indic": 256, "mani": [256, 318, 363, 387], "cv": [256, 358], "tradeoff": [258, 980], "det": [258, 980], "refit": [259, 1006], "balanc": [260, 980], "statist": [261, 1000, 1009, 1012], "frequentist": 261, "practic": [261, 358, 377, 381, 976, 977, 984, 994, 995, 996], "equival": 261, "all": [261, 270, 317, 392, 1011, 1037, 1038, 1039], "take": 261, "home": 261, "messag": 261, "ratio": [264, 980], "pre": [264, 358, 388], "post": [264, 352], "respect": 264, "preval": 264, "cross_val_scor": [265, 814], "nest": [266, 403, 1010], "see": [266, 403], "also": [266, 380, 403], "signific": 267, "precis": [268, 980], "recal": [268, 980], "In": 268, "binari": [268, 976, 980], "averag": [268, 270, 402, 409, 980], "micro": [268, 270], "each": [268, 273, 347, 969], "f1": 268, "receiv": [270, 271, 980], "oper": [270, 271, 375, 385, 412, 980], "characterist": [270, 271, 980], "specif": [270, 374, 378, 396, 969, 1000, 1001], "ovr": 270, "macro": 270, "ovo": 270, "success": [272, 273, 315, 969], "halv": [272, 273, 315, 969], "candid": [273, 969], "amount": [273, 969], "resourc": [273, 363, 376, 969, 999, 1003], "underfit": 275, "overfit": 275, "tsne": [281, 685], "1d": 286, "novelti": [287, 986, 995], "lof": [287, 288], "neighborhood": [289, 290, 291, 983], "centroid": [292, 983], "mlpclassifi": [298, 849], "mlp": 299, "restrict": [300, 985], "boltzmann": [300, 985], "scaler": 303, "standardscal": [303, 872], "minmaxscal": [303, 862], "maxabsscal": [303, 861], "robustscal": [303, 870], "powertransform": [303, 868], "quantiletransform": [303, 869], "uniform": [303, 990], "kbinsdiscret": [304, 306, 857], "continu": [304, 376], "rescal": 308, "other": [309, 370, 387, 409, 1000, 1022], "intern": 310, "22": [313, 1032], "new": [313, 315, 316, 318, 319, 376, 387, 999, 1022, 1023, 1025, 1026, 1027, 1028, 1029], "prune": [313, 352, 996], "datafram": [313, 387], "compat": [313, 376, 378, 398], "auc": [313, 699], "now": [313, 316, 1032], "23": [314, 1033], "stabil": 314, "improv": [314, 315, 316, 317, 318, 375, 376, 1025, 1026], "24": [315, 1034], "histgradientboost": 315, "self": [315, 325, 993], "sequentialfeatureselector": [315, 595], "polynomialcountsketch": [315, 633], "decisiontreeregressor": [315, 901], "keyword": [316, 1033, 1035], "argument": [316, 378, 1033, 1035], "more": [316, 371, 387, 396, 984], "flexibl": [316, 970], "stabl": 316, "histgradientboostingregressor": [317, 555], "get_feature_names_out": 317, "avail": [317, 969, 1018, 1019], "group": [317, 319, 406, 1004, 1014], "infrequ": [317, 319, 990], "onehotencod": [317, 865], "minibatchnmf": [317, 531], "version": [317, 370, 374, 380, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "bisectingkmean": [317, 436], "divid": 317, "panda": [318, 381, 387], "enhanc": [318, 390, 1000, 1025, 1026, 1027, 1028, 1029], "faster": [318, 409], "parser": [318, 370], "fetch_openml": [318, 489], "experiment": [318, 380, 398, 401, 572, 573, 1038], "arrai": [318, 385, 398, 1006], "lineardiscriminantanalysi": [318, 542], "effici": [318, 385], "targetencod": [319, 873], "model_select": [319, 401, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "validationcurvedisplai": [319, 811], "ordinalencod": [319, 866], "most": 322, "uncertain": 322, "activ": 323, "threshold": 325, "linearsvc": [332, 892], "unbalanc": [336, 995], "some": 337, "plai": 337, "percentil": 337, "case": [342, 976, 980], "tie": 343, "break": 343, "word": [347, 410, 1015], "strip": 347, "quantifi": [348, 980], "qualiti": [348, 980], "tfidfvector": [348, 349, 584], "lsa": 348, "top": [348, 980], "term": [348, 389, 410], "per": 348, "hashingvector": [348, 410, 582], "featurehash": [349, 575], "dictvector": [349, 574], "special": 349, "cost": [352, 996], "leav": [352, 406, 976], "understand": 356, "recommend": [358, 371, 1000], "inconsist": 358, "leakag": 358, "dure": 358, "avoid": [358, 403], "control": [358, 409, 984], "none": 358, "randomst": 358, "instanc": [358, 364], "repeat": [358, 403, 406], "call": [358, 375], "splitter": [358, 401], "subtleti": 358, "get": [358, 387, 388], "reproduc": [358, 381], "across": 358, "execut": [358, 387], "configur": [362, 363], "overhead": 362, "input": [362, 378, 398, 402, 990], "tip": [362, 377, 384, 969, 977, 984, 994, 995, 996], "trick": [362, 382, 384, 410], "algebra": [362, 385], "librari": [362, 363], "reshap": [362, 1012], "link": [362, 370, 980], "manag": [363, 392], "higher": 363, "joblib": [363, 382], "lower": 363, "openmp": [363, 377], "numpi": [363, 381], "scipi": 363, "oversubscript": 363, "spawn": 363, "too": 363, "thread": 363, "switch": 363, "environ": 363, "sklearn_assume_finit": 363, "sklearn_working_memori": 363, "sklearn_se": 363, "sklearn_tests_global_random_se": 363, "sklearn_skip_network_test": 363, "sklearn_run_float32_test": 363, "sklearn_enable_debug_cython_direct": 363, "sklearn_build_enable_debug_symbol": 363, "sklearn_pairwise_dist_chunk_s": 363, "computation": 364, "bigger": 364, "stream": 364, "note": [364, 403, 406, 976], "tabl": [365, 387], "Of": 365, "content": [365, 387, 1006], "util": [369, 381, 385, 401, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 1015, 1019, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "svmlight": 370, "format": [370, 381, 387, 396, 981], "org": [370, 380, 1004], "repositori": 370, "arff": 370, "extern": [370, 999, 1006, 1022, 1031], "olivetti": 371, "usag": [371, 382, 387, 393, 398, 400, 403, 409, 410, 976], "convert": 371, "filter": 371, "realist": 371, "consider": [371, 976], "wild": 371, "covertyp": 371, "rcv1": 371, "kddcup": 371, "99": 371, "california": 371, "plant": 373, "linnerrud": 373, "wine": 373, "wisconsin": 373, "diagnost": 373, "instal": [374, 392], "nightli": 374, "runtim": 374, "tag": [374, 376, 378], "edit": 374, "platform": [374, 384, 392], "instruct": 374, "window": [374, 392], "maco": 374, "compil": [374, 382], "conda": 374, "forg": 374, "homebrew": 374, "linux": [374, 387, 392], "system": 374, "freebsd": 374, "altern": [374, 969], "bug": [375, 376, 380, 1003, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "triag": 375, "issu": [375, 376], "curat": 375, "fruit": 375, "discuss": 375, "pr": [375, 380], "help": [375, 376, 387], "review": [375, 376, 384, 1015], "member": 375, "close": 375, "tough": 375, "typic": 375, "workflow": [375, 376], "contribut": [376, 387], "submit": 376, "report": [376, 381, 980], "request": [376, 380, 384, 387], "good": [376, 381], "video": [376, 999], "git": 376, "pull": [376, 380, 384, 387], "checklist": [376, 380], "integr": 376, "ci": 376, "stall": 376, "unclaim": 376, "easi": 376, "want": 376, "github": 376, "action": 376, "coverag": [376, 384, 980], "write": 376, "matplotlib": 376, "monitor": 376, "tracker": [376, 1003], "maintain": [376, 380, 390, 396], "backward": 376, "guidelin": [376, 378], "read": 376, "exist": 376, "cython": [377, 382, 384], "convent": [377, 1006], "knowledg": 377, "eas": 377, "instanti": 378, "attribut": [378, 389, 969], "option": 378, "univers": 378, "your": [378, 381, 980], "own": [378, 387, 980], "templat": 378, "baseestim": [378, 416], "mixin": 378, "get_param": 378, "set_param": 378, "init": 378, "clone": [378, 427], "check_is_fit": [378, 964], "assert": 378, "guid": [379, 1017], "major": [380, 409, 1030, 1031], "minor": 380, "known": [380, 1030, 1031], "merg": 380, "web": 380, "site": 380, "craft": 381, "minim": [381, 996, 1035, 1036], "provid": 381, "fail": 381, "comment": 381, "boil": 381, "down": 381, "script": 381, "someth": 381, "small": 381, "do": [381, 387], "NOT": 381, "unless": 381, "i": [381, 387, 406, 1004], "extrem": [381, 409], "necessari": 381, "markdown": 381, "make_regress": [381, 517], "make_classif": [381, 508], "make_blob": [381, 505], "optim": [382, 401, 969, 977], "c": 382, "profil": 382, "extens": [382, 392], "yep": 382, "gperftool": 382, "debugg": 382, "gdb": 382, "gprof": 382, "valgrind": [382, 384], "callgrind": 382, "kcachegrind": 382, "warm": 382, "restart": 382, "overview": [383, 402, 986], "ax": 383, "saniti": 384, "preserv": 384, "fold": [384, 406], "unfold": 384, "outdat": 384, "diff": 384, "remot": 384, "track": 384, "branch": 384, "pytest": 384, "alias": 384, "flag": 384, "standard": [384, 990], "repli": 384, "debug": 384, "arm64": 384, "x86_64": 384, "tool": [385, 387], "matric": [385, 990], "warn": [385, 401], "except": [385, 401, 564, 565, 566, 567, 568, 569, 570, 571, 1034, 1038], "dispatch": 386, "frequent": 387, "ask": 387, "question": [387, 1003], "what": 387, "lot": 387, "peopl": [387, 1022, 1023, 1024, 1025], "pronounc": 387, "why": [387, 409], "pypi": 387, "deep": 387, "reinforc": 387, "Will": 387, "add": 387, "graphic": [387, 985], "did": 387, "remov": [387, 411, 990, 1022], "hmm": 387, "gpu": 387, "need": 387, "doe": 387, "directli": 387, "plan": 387, "so": 387, "my": 387, "ani": 387, "attent": 387, "inclus": 387, "includ": 387, "should": 387, "save": 387, "export": 387, "deploi": 387, "bunch": [387, 907], "usabl": 387, "deal": 387, "string": 387, "sometim": 387, "crash": 387, "freez": 387, "n_job": 387, "osx": [387, 392], "job": 387, "than": 387, "random_st": 387, "entir": 387, "start": 388, "processor": 388, "next": 388, "glossari": 389, "element": 389, "concept": [389, 976], "properti": 389, "role": 390, "technic": 390, "committe": 390, "propos": 390, "slep": 390, "latest": 392, "appl": 392, "silicon": 392, "m1": 392, "hardwar": 392, "alpin": 392, "arch": 392, "debian": 392, "ubuntu": 392, "fedora": 392, "netbsd": 392, "macport": 392, "mac": 392, "anaconda": 392, "enthought": 392, "deploy": 392, "intel": 392, "winpython": 392, "troubleshoot": 392, "caus": 392, "unweight": 393, "interfac": [393, 401], "persist": 396, "serial": 396, "secur": 396, "skop": 396, "interoper": [396, 1000], "pytorch": 398, "mathemat": [399, 402, 409, 972, 974, 976, 983, 984, 987, 994, 995, 996], "formul": [399, 402, 409, 974, 976, 983, 984, 994, 995, 996], "sigmoid": [400, 978], "sklearn": [401, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "compos": [401, 457, 458, 459, 460, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "cross_decomposit": [401, 475, 476, 477, 478, 1032, 1034, 1036, 1039], "loader": 401, "discriminant_analysi": [401, 542, 543, 1030, 1031, 1034, 1036, 1037, 1038], "dummi": [401, 544, 545, 980, 1030, 1031, 1032, 1035, 1036], "feature_extract": [401, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "feature_select": [401, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "gaussian_process": [401, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "kernel_approxim": [401, 631, 632, 633, 634, 635, 1032, 1034, 1035, 1036, 1037, 1038], "kernel_ridg": [401, 636], "linear_model": [401, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "classic": [401, 979], "glm": 401, "naive_bay": [401, 827, 828, 829, 830, 831, 1030, 1032, 1033, 1034, 1035, 1037, 1038], "neural_network": [401, 848, 849, 850, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "random_project": [401, 884, 885, 886, 1036], "semi_supervis": [401, 887, 888, 889, 1032, 1033, 1034, 1038], "recent": 401, "low": [402, 409, 411], "mini": [402, 407], "batch": [402, 407], "assign": 402, "featureagglomer": [402, 438], "hierarchi": 402, "ad": 402, "connect": [402, 410, 1014], "consumpt": 402, "larg": [402, 410], "size": [402, 409], "reachabl": 402, "rand": 402, "index": [402, 935], "advantag": 402, "drawback": 402, "homogen": 402, "fowlk": 402, "mallow": 402, "calinski": 402, "harabasz": 402, "davi": 402, "bouldin": 402, "conting": 402, "pair": 402, "access": 403, "featureunion": [403, 851], "columntransform": [403, 457], "shrunk": 404, "oracl": 404, "plscanon": [405, 476], "plssvd": [405, 478], "plsregress": [405, 477], "held": 406, "cross_valid": [406, 815], "obtain": 406, "d": [406, 983], "loo": 406, "p": [406, 1004], "lpo": 406, "shuffl": [406, 954], "stratif": 406, "stratifi": 406, "stratifiedgroupkfold": [406, 807], "predefin": [406, 980], "decompos": 407, "exact": 407, "sparsepca": [407, 536], "kpca": 407, "choic": [407, 979, 983], "truncat": 407, "semant": 407, "nnmf": 407, "frobeniu": 407, "norm": 407, "beta": 407, "diverg": 407, "gradientboostingclassifi": [409, 552], "histgradientboostingclassifi": [409, 554], "gradientboostingregressor": [409, 553], "addit": [409, 972], "rate": 409, "subsampl": 409, "hard": 409, "soft": 409, "dict": 410, "detail": [410, 972, 976, 994, 995], "tf": 410, "idf": 410, "decod": 410, "applic": [410, 1014], "corpu": 410, "selectfrommodel": [411, 590], "recoveri": 411, "biclustermixin": 417, "classnameprefixfeaturesoutmixin": 418, "classifiermixin": 419, "clustermixin": 420, "densitymixin": 421, "metaestimatormixin": 422, "onetoonefeaturemixin": 423, "outliermixin": 424, "regressormixin": 425, "transformermixin": 426, "is_classifi": 428, "is_regressor": 429, "calibratedclassifiercv": 430, "calibrationdisplai": 431, "from_estim": [431, 624, 625, 690, 691, 693, 694, 695, 795, 811], "calibration_curv": 432, "affinitypropag": 433, "agglomerativeclust": 434, "spectralclust": 445, "spectralcoclust": 446, "affinity_propag": 447, "cluster_optics_dbscan": 448, "cluster_optics_xi": 449, "compute_optics_graph": 450, "estimate_bandwidth": 451, "k_mean": 452, "kmeans_plusplu": 453, "mean_shift": 454, "spectral_clust": 455, "ward_tre": 456, "transformedtargetregressor": 458, "make_column_selector": 459, "make_column_transform": 460, "config_context": 461, "ellipticenvelop": 462, "empiricalcovari": 463, "graphicallasso": 464, "graphicallassocv": 465, "mincovdet": 467, "shrunkcovari": 469, "empirical_covari": 470, "graphical_lasso": 471, "ledoit_wolf": 472, "ledoit_wolf_shrinkag": 473, "shrunk_covari": 474, "clear_data_hom": 479, "dump_svmlight_fil": 480, "fetch_20newsgroup": 481, "fetch_20newsgroups_vector": 482, "fetch_california_h": 483, "fetch_covtyp": 484, "fetch_kddcup99": 485, "fetch_lfw_pair": 486, "fetch_lfw_peopl": 487, "fetch_olivetti_fac": 488, "fetch_rcv1": 490, "fetch_species_distribut": 491, "get_data_hom": 492, "load_breast_canc": 493, "load_diabet": 494, "load_digit": 495, "load_fil": 496, "load_iri": 497, "load_linnerud": 498, "load_sample_imag": [499, 500], "load_svmlight_fil": [501, 502], "load_win": 503, "make_biclust": 504, "make_checkerboard": 506, "make_circl": 507, "make_friedman1": 509, "make_friedman2": 510, "make_friedman3": 511, "make_gaussian_quantil": 512, "make_hastie_10_2": 513, "make_low_rank_matrix": 514, "make_moon": 515, "make_multilabel_classif": 516, "make_s_curv": 518, "make_sparse_coded_sign": 519, "make_sparse_spd_matrix": 520, "make_sparse_uncorrel": 521, "make_spd_matrix": 522, "make_swiss_rol": 523, "dictionarylearn": 524, "factoranalysi": 525, "incrementalpca": 527, "latentdirichletalloc": 529, "minibatchdictionarylearn": 530, "sparsecod": 535, "truncatedsvd": 537, "dict_learn": 538, "dict_learning_onlin": 539, "non_negative_factor": 540, "sparse_encod": 541, "quadraticdiscriminantanalysi": 543, "dummyclassifi": 544, "dummyregressor": 545, "adaboostregressor": 547, "baggingclassifi": 548, "baggingregressor": 549, "extratreesclassifi": 550, "extratreesregressor": 551, "randomforestclassifi": 557, "randomforestregressor": 558, "randomtreesembed": 559, "stackingclassifi": 560, "stackingregressor": 561, "votingregressor": 563, "convergencewarn": 564, "dataconversionwarn": 565, "datadimensionalitywarn": 566, "efficiencywarn": 567, "fitfailedwarn": 568, "inconsistentversionwarn": 569, "notfittederror": 570, "undefinedmetricwarn": 571, "enable_halving_search_cv": 572, "enable_iterative_imput": 573, "patchextractor": 576, "extract_patches_2d": 577, "grid_to_graph": 578, "img_to_graph": 579, "reconstruct_from_patches_2d": 580, "countvector": 581, "tfidftransform": 583, "genericunivariateselect": 585, "rfe": 586, "rfecv": 587, "selectfdr": 588, "selectfpr": 589, "selectfw": 591, "selectkbest": 592, "selectpercentil": 593, "selectormixin": 594, "variancethreshold": 596, "chi2": 597, "f_classif": 598, "f_regress": 599, "mutual_info_classif": 600, "mutual_info_regress": 601, "r_regress": 602, "gaussianprocessclassifi": 603, "gaussianprocessregressor": 604, "compoundkernel": 605, "constantkernel": 606, "dotproduct": 607, "expsinesquar": 608, "exponenti": 609, "matern": 612, "pairwisekernel": 613, "rationalquadrat": 616, "sum": 617, "whitekernel": 618, "get_config": 619, "knnimput": 621, "missingind": 622, "simpleimput": 623, "decisionboundarydisplai": 624, "partialdependencedisplai": 625, "partial_depend": 626, "permutation_import": 627, "isotonicregress": 628, "check_increas": 629, "isotonic_regress": 630, "additivechi2sampl": 631, "nystroem": [632, 972], "rbfsampler": 634, "skewedchi2sampl": 635, "kernelridg": 636, "ardregress": 637, "bayesianridg": 638, "elasticnetcv": 640, "gammaregressor": 641, "larscv": 644, "lassocv": 646, "lassolar": 647, "lassolarscv": 648, "lassolars": 649, "logisticregress": 651, "logisticregressioncv": 652, "multitaskelasticnet": 653, "multitaskelasticnetcv": 654, "multitasklasso": 655, "multitasklassocv": 656, "orthogonalmatchingpursuit": 657, "orthogonalmatchingpursuitcv": 658, "passiveaggressiveclassifi": 659, "passiveaggressiveregressor": 660, "poissonregressor": 662, "ransacregressor": 664, "ridgecv": 666, "ridgeclassifi": 667, "ridgeclassifiercv": 668, "sgdclassifi": 669, "sgdoneclasssvm": 670, "sgdregressor": 671, "theilsenregressor": 672, "enet_path": 674, "lars_path": 675, "lars_path_gram": 676, "lasso_path": 677, "orthogonal_mp": 678, "orthogonal_mp_gram": 679, "ridge_regress": 680, "locallylinearembed": 682, "md": [683, 977], "spectralembed": 684, "locally_linear_embed": 686, "smacof": 687, "spectral_embed": 688, "trustworthi": 689, "from_predict": [690, 693, 694, 695], "detcurvedisplai": 691, "distancemetr": 692, "predictionerrordisplai": 694, "accuracy_scor": 696, "adjusted_mutual_info_scor": 697, "adjusted_rand_scor": 698, "average_precision_scor": 700, "balanced_accuracy_scor": 701, "brier_score_loss": 702, "calinski_harabasz_scor": 703, "check_scor": 704, "class_likelihood_ratio": 705, "classification_report": 706, "contingency_matrix": 707, "pair_confusion_matrix": 708, "cohen_kappa_scor": 709, "completeness_scor": 710, "confusion_matrix": 711, "consensus_scor": 712, "coverage_error": 713, "d2_absolute_error_scor": 714, "d2_pinball_scor": 715, "d2_tweedie_scor": 716, "davies_bouldin_scor": 717, "dcg_score": 718, "det_curv": 719, "explained_variance_scor": 720, "f1_score": 721, "fbeta_scor": 722, "fowlkes_mallows_scor": 723, "get_scor": 724, "get_scorer_nam": 725, "hamming_loss": 726, "hinge_loss": 727, "homogeneity_completeness_v_measur": 728, "homogeneity_scor": 729, "jaccard_scor": 730, "label_ranking_average_precision_scor": 731, "label_ranking_loss": 732, "log_loss": 733, "make_scor": 734, "matthews_corrcoef": 735, "max_error": 736, "mean_absolute_error": 737, "mean_absolute_percentage_error": 738, "mean_gamma_devi": 739, "mean_pinball_loss": 740, "mean_poisson_devi": 741, "mean_squared_error": 742, "mean_squared_log_error": 743, "mean_tweedie_devi": 744, "median_absolute_error": 745, "multilabel_confusion_matrix": 746, "mutual_info_scor": 747, "ndcg_score": 748, "normalized_mutual_info_scor": 749, "additive_chi2_kernel": 750, "chi2_kernel": 751, "cosine_dist": 752, "cosine_similar": 753, "distance_metr": 754, "euclidean_dist": 755, "haversine_dist": 756, "kernel_metr": 757, "laplacian_kernel": 758, "linear_kernel": 759, "manhattan_dist": 760, "nan_euclidean_dist": 761, "paired_cosine_dist": 762, "paired_dist": 763, "paired_euclidean_dist": 764, "paired_manhattan_dist": 765, "pairwise_kernel": 766, "polynomial_kernel": 767, "rbf_kernel": 768, "sigmoid_kernel": 769, "pairwise_dist": 770, "pairwise_distances_argmin": 771, "pairwise_distances_argmin_min": 772, "pairwise_distances_chunk": 773, "precision_recall_curv": 774, "precision_recall_fscore_support": 775, "precision_scor": 776, "r2_score": 777, "rand_scor": 778, "recall_scor": 779, "roc_auc_scor": 780, "roc_curv": 781, "silhouette_sampl": 782, "silhouette_scor": 783, "top_k_accuracy_scor": 784, "v_measure_scor": 785, "zero_one_loss": 786, "bayesiangaussianmixtur": [787, 979], "gaussianmixtur": [788, 979], "groupkfold": 790, "groupshufflesplit": 791, "halvinggridsearchcv": 792, "halvingrandomsearchcv": 793, "kfold": 794, "learningcurvedisplai": 795, "leaveonegroupout": 796, "leaveoneout": 797, "leavepgroupsout": 798, "leavepout": 799, "parametergrid": 800, "parametersampl": 801, "predefinedsplit": 802, "randomizedsearchcv": 803, "repeatedkfold": 804, "repeatedstratifiedkfold": 805, "shufflesplit": 806, "stratifiedkfold": 808, "stratifiedshufflesplit": 809, "timeseriessplit": 810, "check_cv": 812, "cross_val_predict": 813, "learning_curv": 816, "permutation_test_scor": 817, "train_test_split": 818, "validation_curv": 819, "onevsoneclassifi": [820, 981], "onevsrestclassifi": [821, 981], "outputcodeclassifi": [822, 981], "classifierchain": [823, 981], "multioutputclassifi": [824, 981], "multioutputregressor": [825, 981], "regressorchain": [826, 981], "bernoullinb": 827, "categoricalnb": 828, "complementnb": 829, "gaussiannb": 830, "multinomialnb": 831, "balltre": [832, 983], "kdtree": [833, 983], "kneighborsclassifi": 834, "kneighborsregressor": 835, "kneighborstransform": 836, "kerneldens": 837, "localoutlierfactor": 838, "nearestcentroid": 839, "nearestneighbor": 840, "neighborhoodcomponentsanalysi": 841, "radiusneighborsclassifi": 842, "radiusneighborsregressor": 843, "radiusneighborstransform": 844, "kneighbors_graph": 845, "radius_neighbors_graph": 846, "sort_graph_by_row_valu": 847, "bernoullirbm": 848, "mlpregressor": 850, "make_pipelin": 853, "make_union": 854, "binar": [855, 875, 990, 991], "functiontransform": 856, "kernelcenter": 858, "labelbinar": [859, 991], "labelencod": 860, "multilabelbinar": [863, 991], "polynomialfeatur": 867, "splinetransform": 871, "add_dummy_featur": 874, "label_binar": 876, "maxabs_scal": 877, "minmax_scal": 878, "power_transform": 880, "quantile_transform": 881, "robust_scal": 882, "gaussianrandomproject": 884, "sparserandomproject": 885, "johnson_lindenstrauss_min_dim": 886, "labelpropag": 887, "labelspread": 888, "selftrainingclassifi": 889, "set_config": 890, "show_vers": 891, "linearsvr": 893, "nusvc": 894, "nusvr": 895, "oneclasssvm": 896, "l1_min_c": 899, "decisiontreeclassifi": 900, "extratreeclassifi": 902, "extratreeregressor": 903, "export_graphviz": 904, "export_text": 905, "plot_tre": 906, "_safe_index": 908, "arrayfunc": 909, "min_po": 909, "as_float_arrai": 910, "assert_all_finit": 911, "check_x_i": 912, "check_arrai": 913, "check_consistent_length": 914, "check_random_st": 915, "check_scalar": 916, "class_weight": [917, 918], "compute_class_weight": 917, "compute_sample_weight": 918, "discoveri": [920, 921, 922], "all_displai": 920, "all_estim": 921, "all_funct": 922, "estimator_check": [923, 924], "check_estim": 923, "parametrize_with_check": 924, "estimator_html_repr": 925, "extmath": [926, 927, 928, 929, 930, 931], "fast_logdet": 927, "randomized_range_find": 928, "randomized_svd": 929, "safe_sparse_dot": 930, "weighted_mod": 931, "gen_batch": 932, "gen_even_slic": 933, "single_source_shortest_path_length": 934, "metadata_rout": [936, 937, 938, 939, 940], "metadatarequest": 936, "metadatarout": 937, "methodmap": 938, "get_routing_for_object": 939, "process_rout": 940, "metaestim": 941, "available_if": 941, "is_multilabel": 942, "type_of_target": 943, "unique_label": 944, "murmurhash3_32": 945, "delai": 947, "parallel_backend": 948, "sample_without_replac": 949, "register_parallel_backend": 950, "resampl": 951, "safe_mask": 952, "safe_sqr": 953, "sparsefunc": [955, 956, 957, 958, 959, 960, 961, 1031], "incr_mean_variance_axi": 955, "inplace_column_scal": 956, "inplace_csr_column_scal": 957, "inplace_row_scal": 958, "inplace_swap_column": 959, "inplace_swap_row": 960, "mean_variance_axi": 961, "sparsefuncs_fast": [962, 963], "inplace_csr_row_normalize_l1": 962, "inplace_csr_row_normalize_l2": 963, "check_memori": 965, "check_symmetr": 966, "column_or_1d": 967, "has_fit_paramet": 968, "exhaust": 969, "min_resourc": 969, "aggress": [969, 976], "analyz": 969, "cv_results_": 969, "brute": [969, 983], "forc": [969, 983], "keep": 970, "mark": 970, "nan": 970, "chi": [972, 978], "skew": 972, "tensor": 972, "sketch": 972, "qda": 974, "omp": 976, "liblinear": 976, "passiv": 976, "scenario": 976, "trade": 976, "off": 976, "which": 976, "consensu": 976, "median": [976, 980], "huber": 976, "extend": 976, "introduct": [977, 1006], "modifi": 977, "hessian": 977, "eigenmap": 977, "tangent": 977, "align": 977, "nonmetr": 977, "barn": 977, "hut": 977, "cosin": 978, "laplacian": 978, "pro": 979, "con": 979, "maxim": 979, "rule": 980, "cohen": 980, "kappa": 980, "ham": 980, "jaccard": 980, "hing": 980, "matthew": 980, "zero": 980, "brier": 980, "discount": 980, "cumul": 980, "gain": 980, "r\u00b2": 980, "absolut": 980, "logarithm": 980, "percentag": 980, "explain": 980, "pinbal": 980, "d\u00b2": 980, "complement": 982, "bernoulli": [982, 985], "unsupervis": [983, 985, 997, 1014, 1016], "find": 983, "ball": 983, "leaf_siz": 983, "shrunken": 983, "warm_start": 984, "parametr": 985, "up": 986, "ellipt": 986, "envelop": 986, "isol": 986, "outlin": 988, "mislead": 988, "strongli": 988, "rang": 990, "whiten": 990, "bin": 990, "lemma": 992, "unlabel": 993, "entri": 993, "id3": 996, "c4": 996, "5": [996, 1022], "c5": 996, "cart": 996, "welcom": 998, "talk": 999, "scientif": [999, 1009], "framework": 1000, "domain": 1000, "translat": 1000, "roadmap": 1001, "statement": 1001, "2018": 1001, "architectur": 1001, "goal": 1001, "subpackag": 1001, "mail": 1003, "user": [1003, 1017], "gitter": 1003, "who": 1004, "j": 1004, "morgan": 1004, "spotifi": 1004, "inria": 1004, "betawork": 1004, "hug": 1004, "evernot": 1004, "t\u00e9l\u00e9com": 1004, "paristech": 1004, "book": 1004, "com": 1004, "aweb": 1004, "yhat": 1004, "rangespan": 1004, "birchbox": 1004, "bestofmedia": 1004, "phimeca": 1004, "howaboutw": 1004, "peerindex": 1004, "datarobot": 1004, "okcupid": 1004, "love": 1004, "publica": 1004, "machinali": 1004, "solido": 1004, "infonea": 1004, "dataiku": 1004, "otto": 1004, "zopa": 1004, "mar": 1004, "bnp": 1004, "pariba": 1004, "cardif": 1004, "section": 1006, "cast": 1006, "updat": [1006, 1032], "right": 1008, "put": 1011, "open": 1011, "ship": 1012, "would": 1012, "high": 1013, "solv": [1013, 1014], "vocabulari": 1013, "curs": 1013, "iris": 1013, "same": 1013, "seek": 1014, "constrain": 1014, "inverse_transform": 1014, "setup": 1015, "token": 1015, "occurr": 1015, "languag": 1015, "identif": 1015, "sentiment": 1015, "movi": 1015, "cli": 1015, "where": 1015, "here": 1015, "12": 1022, "changelog": [1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "11": 1022, "9": 1022, "8": 1022, "7": 1022, "6": [1022, 1028], "modul": [1022, 1030, 1031, 1037, 1038, 1039], "misc": 1022, "4": [1022, 1030, 1039], "earlier": 1022, "13": 1023, "14": 1024, "15": 1025, "16": 1026, "17": 1027, "18": 1028, "last": 1028, "19": 1029, "21": 1031, "legend": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "post1": 1032, "websit": 1032, "clear": 1032, "public": 1032, "futurewarn": 1032, "enforc": [1033, 1035]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1022, "authors"], [1022, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [390, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [167, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [111, "concluding-remarks"], [225, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [115, "references"], [176, "references"], [184, "references"], [188, null], [261, null], [294, "references"], [371, null], [371, null], [371, null], [373, null], [373, null], [373, null], [373, null], [373, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [410, null], [412, "references"], [970, "references"], [970, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [987, null], [990, null], [990, null], [993, null], [993, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [126, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [189, "conclusion"], [310, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [118, "plot-results"], [288, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [362, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [334, "visualization"], [401, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [107, "computation-times"], [136, "computation-times"], [142, "computation-times"], [150, "computation-times"], [162, "computation-times"], [166, "computation-times"], [174, "computation-times"], [177, "computation-times"], [219, "computation-times"], [227, "computation-times"], [244, "computation-times"], [253, "computation-times"], [277, "computation-times"], [280, "computation-times"], [295, "computation-times"], [301, "computation-times"], [311, "computation-times"], [320, "computation-times"], [328, "computation-times"], [345, "computation-times"], [350, "computation-times"], [357, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [167, "biclustering"], [372, "biclustering"], [399, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[20, "generate-sample-data"], [38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [145, "generate-sample-data"], [235, "generate-sample-data"], [274, "generate-sample-data"], [293, "generate-sample-data"], [341, "generate-sample-data"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Plotting results": [[20, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [167, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [179, "generate-synthetic-dataset"], [179, "id1"], [184, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [189, "dataset"], [267, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [400, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [982, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [349, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [160, "classification"], [167, "classification"], [409, "classification"], [409, "id10"], [976, "classification"], [983, "id4"], [984, "classification"], [994, "classification"], [995, "classification"], [996, "classification"], [1013, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"]], "Clustering": [[36, "clustering"], [167, "clustering"], [402, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [194, "generate-data"], [300, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [57, "data-generation"], [128, "data-generation"], [148, "data-generation"], [158, "data-generation"], [251, "data-generation"], [322, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [135, "plot-the-results"], [165, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [997, "feature-agglomeration"], [1014, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[55, "scale-invariance"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Possible solutions": [[57, "possible-solutions"]], "Final remarks": [[57, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Plotting the results": [[64, "plotting-the-results"], [111, "plotting-the-results"], [113, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [167, "pipelines-and-composite-estimators"], [403, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Classification pipeline": [[70, "classification-pipeline"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[75, "synthetic-example"]], "Real-world data set": [[75, "real-world-data-set"]], "Covariance estimation": [[77, "covariance-estimation"], [167, "covariance-estimation"], [404, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[80, null], [112, null], [172, null], [266, null], [267, null], [370, null], [371, null], [399, null], [399, null], [399, null], [400, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [404, null], [404, null], [404, null], [404, null], [406, null], [406, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [410, null], [411, null], [969, null], [969, null], [972, null], [973, null], [974, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [977, null], [978, null], [978, null], [980, null], [980, null], [980, null], [980, null], [980, null], [980, null], [980, null], [980, null], [981, null], [981, null], [981, null], [982, null], [982, null], [982, null], [983, null], [983, null], [983, null], [984, null], [985, null], [986, null], [986, null], [986, null], [986, null], [988, null], [990, null], [990, null], [992, null], [992, null], [992, null], [994, null], [994, null], [995, null], [996, null], [996, null]], "Comparison of results": [[80, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Evaluation": [[81, "evaluation"], [300, "evaluation"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Cross decomposition": [[84, "cross-decomposition"], [167, "cross-decomposition"], [405, "cross-decomposition"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Transform data": [[85, "transform-data"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[86, "the-data"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[88, "dataset-examples"], [167, "dataset-examples"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [167, "decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [221, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[99, "incremental-pca"], [407, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [407, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[108, "developing-estimators"], [167, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[109, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[109, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[110, "ensemble-methods"], [167, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[111, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[111, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[111, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[112, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[112, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[112, "training-the-adaboostclassifier"]], "Analysis": [[112, "analysis"]], "Convergence of the AdaBoostClassifier": [[112, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[112, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[113, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[113, "preparing-the-data"], [176, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[113, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[114, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[115, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[116, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[117, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[118, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[118, "load-dataset"]], "Compute score and computation times": [[118, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[119, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[119, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[119, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[119, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[120, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[120, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[120, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[121, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[122, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[122, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[122, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[122, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[122, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[122, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[122, "model-comparison"]], "Limiting the number of splits": [[122, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[123, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[123, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[123, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[124, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[125, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[125, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[125, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[125, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[125, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[126, "gradient-boosting-regression"]], "Data preprocessing": [[126, "data-preprocessing"]], "Fit regression model": [[126, "fit-regression-model"], [293, "fit-regression-model"], [341, "fit-regression-model"]], "Plot training deviance": [[126, "plot-training-deviance"]], "Plot feature importance": [[126, "plot-feature-importance"]], "Gradient Boosting regularization": [[127, "gradient-boosting-regularization"]], "IsolationForest example": [[128, "isolationforest-example"]], "Training of the model": [[128, "training-of-the-model"]], "Plot discrete decision boundary": [[128, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[128, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[129, "monotonic-constraints"], [409, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[129, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[130, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[131, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[132, "combine-predictors-using-stacking"]], "Download the dataset": [[132, "download-the-dataset"]], "Make pipeline to preprocess the data": [[132, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[132, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[132, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[133, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[134, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[135, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[135, "training-classifiers"]], "Making predictions": [[135, "making-predictions"]], "Tutorial exercises": [[137, "tutorial-exercises"], [167, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[138, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[138, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[138, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[138, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[139, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[140, "digits-classification-exercise"]], "SVM Exercise": [[141, "svm-exercise"]], "Feature Selection": [[143, "feature-selection"], [167, "feature-selection"]], "Comparison of F-test and mutual information": [[144, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[145, "univariate-feature-selection"]], "Univariate feature selection": [[145, "id1"], [411, "univariate-feature-selection"]], "Compare with SVMs": [[145, "compare-with-svms"]], "Pipeline ANOVA SVM": [[146, "pipeline-anova-svm"]], "Recursive feature elimination": [[147, "recursive-feature-elimination"], [411, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[148, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[148, "model-training-and-selection"], [251, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[148, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[149, "model-based-and-sequential-feature-selection"]], "Loading the data": [[149, "loading-the-data"]], "Feature importance from coefficients": [[149, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[149, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[149, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[149, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[151, "gaussian-process-for-machine-learning"], [167, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[152, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[152, "generating-a-dataset"]], "Limitations of a simple linear model": [[152, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[152, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[152, "kernel-ridge"]], "Gaussian process regression": [[152, "gaussian-process-regression"]], "Final conclusion": [[152, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[153, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[154, "gaussian-process-classification-gpc-on-iris-dataset"], [412, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[155, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[156, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[157, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[157, "build-the-dataset"]], "Design the proper kernel": [[157, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[157, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[157, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[158, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[158, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[159, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[159, "dataset-generation"], [202, "dataset-generation"]], "Example with noise-free target": [[159, "example-with-noise-free-target"]], "Example with noisy targets": [[159, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[160, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[160, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[160, "regression"], [409, "regression"], [409, "id9"], [976, "regression"], [984, "regression"], [994, "regression"], [995, "regression"], [996, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[161, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[161, "helper-function"]], "Dataset and Gaussian process generation": [[161, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[161, "kernel-cookbook"]], "Radial Basis Function kernel": [[161, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[161, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[161, "exp-sine-squared-kernel"], [412, "exp-sine-squared-kernel"]], "Dot-product kernel": [[161, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[161, "matern-kernel"], [412, "matern-kernel"]], "Missing Value Imputation": [[163, "missing-value-imputation"], [167, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[164, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[165, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[165, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[165, "impute-the-missing-data-and-score"]], "Missing information": [[165, "missing-information"]], "Estimate the score": [[165, "estimate-the-score"]], "Replace missing values by 0": [[165, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[165, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[165, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[165, "iterative-imputation-of-the-missing-values"]], "Examples": [[167, "examples"], [364, "examples"], [371, null], [371, "examples"], [406, null], [406, null], [411, null], [411, null], [993, null], [993, null], [997, null], [997, null], [997, null], [1022, "examples"]], "Release Highlights": [[167, "release-highlights"], [312, "release-highlights"]], "Decision Trees": [[167, "decision-trees"], [351, "decision-trees"], [996, "decision-trees"]], "Gaussian Mixture Models": [[167, "gaussian-mixture-models"], [245, "gaussian-mixture-models"]], "Generalized Linear Models": [[167, "generalized-linear-models"], [178, "generalized-linear-models"], [976, "generalized-linear-models"]], "Inspection": [[167, "inspection"], [168, "inspection"], [391, "inspection"]], "Kernel Approximation": [[167, "kernel-approximation"], [175, "kernel-approximation"], [972, "kernel-approximation"]], "Manifold learning": [[167, "manifold-learning"], [220, "manifold-learning"], [977, "manifold-learning"]], "Miscellaneous": [[167, "miscellaneous"], [228, "miscellaneous"], [401, "miscellaneous"], [1030, "miscellaneous"], [1030, "id40"], [1031, "miscellaneous"], [1032, "miscellaneous"], [1033, "miscellaneous"], [1033, "id13"], [1034, "miscellaneous"], [1035, "miscellaneous"], [1038, "miscellaneous"]], "Model Selection": [[167, "model-selection"], [254, "model-selection"]], "Multioutput methods": [[167, "multioutput-methods"], [278, "multioutput-methods"]], "Nearest Neighbors": [[167, "nearest-neighbors"], [282, "nearest-neighbors"], [983, "nearest-neighbors"]], "Neural Networks": [[167, "neural-networks"], [296, "neural-networks"]], "Preprocessing": [[167, "preprocessing"], [302, "preprocessing"]], "Semi Supervised Classification": [[167, "semi-supervised-classification"], [321, "semi-supervised-classification"]], "Support Vector Machines": [[167, "support-vector-machines"], [329, "support-vector-machines"], [995, "support-vector-machines"]], "Working with text documents": [[167, "working-with-text-documents"], [346, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[169, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[169, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[169, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[169, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[169, "income-prediction-with-partial-observations"]], "Lessons learned": [[169, "lessons-learned"], [170, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[170, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[170, "the-dataset-wages"]], "The machine-learning pipeline": [[170, "the-machine-learning-pipeline"]], "Processing the dataset": [[170, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[170, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[170, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[170, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[170, "preprocessing-numerical-variables"]], "Linear models with regularization": [[170, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[170, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[170, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[171, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[171, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[171, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[171, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[171, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[171, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[171, "multi-layer-perceptron"]], "Gradient boosting": [[171, "gradient-boosting"]], "Analysis of the plots": [[171, "analysis-of-the-plots"]], "ICE vs. PDP": [[171, "ice-vs-pdp"]], "2D interaction plots": [[171, "d-interaction-plots"]], "3D representation": [[171, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[172, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[172, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[172, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[172, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[173, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[173, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[173, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[176, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[176, "partitioning-the-data"]], "Feature normalization": [[176, "feature-normalization"]], "Establishing a baseline model": [[176, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[176, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[176, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[176, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[179, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[179, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[179, "fit-the-regressors"], [179, "id2"]], "Plot the true and estimated coefficients": [[179, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[179, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[179, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[179, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[180, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[180, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[180, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[180, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[181, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[182, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[183, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[184, "l1-based-models-for-sparse-signals"]], "Lasso": [[184, "lasso"], [976, "lasso"]], "Automatic Relevance Determination (ARD)": [[184, "automatic-relevance-determination-ard"]], "ElasticNet": [[184, "elasticnet"]], "Plot and analysis of the results": [[184, "plot-and-analysis-of-the-results"]], "Conclusions": [[184, "conclusions"]], "Lasso and Elastic Net": [[185, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[186, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[186, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[186, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[187, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[188, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[189, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[189, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[189, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[189, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[189, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[189, "summary-of-cross-validation-approach"]], "Logistic function": [[190, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[191, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[192, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[193, "regularization-path-of-l1-logistic-regression"]], "Load data": [[193, "load-data"]], "Compute regularization path": [[193, "compute-regularization-path"]], "Plot regularization path": [[193, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[194, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[194, "fit-models"]], "Plot support and time series": [[194, "plot-support-and-time-series"]], "Non-negative least squares": [[195, "non-negative-least-squares"]], "Linear Regression Example": [[196, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[197, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[198, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[199, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[200, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[200, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[200, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[200, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[200, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[200, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[200, "evaluation-of-the-ranking-power"]], "Main takeaways": [[200, "main-takeaways"]], "Polynomial and Spline interpolation": [[201, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[201, "periodic-splines"]], "Quantile regression": [[202, "quantile-regression"]], "Fitting a QuantileRegressor": [[202, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[202, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[203, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[204, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[204, "purpose-of-this-example"]], "Creating a non-noisy data set": [[204, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[204, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[204, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[204, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[205, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[205, "compute-paths"]], "Display results": [[205, "display-results"]], "Robust linear estimator fitting": [[206, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[207, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[208, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[209, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[210, "sgd-convex-loss-functions"]], "SGD: Penalties": [[211, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[212, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[213, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[214, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[215, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[216, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[217, "theil-sen-regression"]], "Outliers only in the y direction": [[217, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[217, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[218, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[218, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[218, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[218, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[218, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[221, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[221, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[221, "locally-linear-embeddings"]], "Isomap Embedding": [[221, "isomap-embedding"]], "Multidimensional scaling": [[221, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[221, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[221, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[222, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[222, "load-digits-dataset"]], "Helper function to plot embedding": [[222, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[222, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[223, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[224, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[225, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[225, "swiss-roll"]], "Swiss-Hole": [[225, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[226, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[229, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[230, "visualizations-with-display-objects"]], "Load Data and train model": [[230, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[230, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[230, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[230, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[230, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[231, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[231, "compact-text-representation"]], "Rich HTML representation": [[231, "rich-html-representation"]], "Isotonic Regression": [[232, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[233, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[233, "theoretical-bounds"]], "Empirical validation": [[233, "empirical-validation"]], "Remarks": [[233, "remarks"]], "Explicit feature map approximation for RBF kernels": [[234, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[234, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[234, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[234, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[235, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[235, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[235, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[235, "look-at-the-results"], [341, "look-at-the-results"]], "Visualize training and prediction times": [[235, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[235, "visualize-the-learning-curves"]], "Metadata Routing": [[236, "metadata-routing"], [319, "metadata-routing"], [389, "metadata-routing"], [393, "id1"]], "Estimators": [[236, "estimators"], [358, "estimators"], [358, "id2"], [378, "estimators"], [401, "estimators"]], "Router and Consumer": [[236, "router-and-consumer"]], "Simple Pipeline": [[236, "simple-pipeline"]], "Deprecation / Default Value Change": [[236, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[236, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[237, "multilabel-classification"], [981, "multilabel-classification"]], "Face completion with a multi-output estimators": [[238, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[239, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[239, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[239, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[239, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[240, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[240, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[240, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[240, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[240, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[241, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[241, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[241, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[241, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[241, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[241, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[242, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[242, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[242, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[242, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[243, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[246, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[247, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[248, "gmm-covariances"]], "GMM Initialization Methods": [[249, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[250, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[251, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[251, "plot-the-bic-scores"]], "Plot the best model": [[251, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[252, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[255, "confusion-matrix"], [980, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[256, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[256, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[256, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[256, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[257, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[258, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[258, "generate-synthetic-data"]], "Define the classifiers": [[258, "define-the-classifiers"]], "Plot ROC and DET curves": [[258, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[259, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[259, "the-dataset"]], "Define our grid-search strategy": [[259, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[259, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[260, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[261, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[261, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[261, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[261, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[261, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[261, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[261, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[262, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[262, "data-loading"]], "Pipeline with hyperparameter tuning": [[262, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[263, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[263, "learning-curve"]], "Complexity analysis": [[263, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[264, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[264, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[264, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[264, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[265, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[265, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[265, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[266, "nested-versus-non-nested-cross-validation"]], "See Also:": [[266, null], [403, null]], "Test with permutations the significance of a classification score": [[267, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[267, "permutation-test-score"], [406, "permutation-test-score"]], "Original data": [[267, "original-data"], [303, "original-data"]], "Random data": [[267, "random-data"]], "Precision-Recall": [[268, "precision-recall"]], "In binary classification settings": [[268, "in-binary-classification-settings"]], "Dataset and model": [[268, "dataset-and-model"]], "Plot the Precision-Recall curve": [[268, "plot-the-precision-recall-curve"]], "In multi-label settings": [[268, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[268, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[268, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[268, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[268, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[269, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[270, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[270, "load-and-prepare-data"], [271, "load-and-prepare-data"], [308, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[270, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[270, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[270, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[270, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[270, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[270, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[270, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[270, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[271, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[271, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[272, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[273, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[273, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[274, "train-error-vs-test-error"]], "Compute train and test errors": [[274, "compute-train-and-test-errors"]], "Plot results functions": [[274, "plot-results-functions"]], "Underfitting vs. Overfitting": [[275, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[276, "plotting-validation-curves"]], "Classifier Chain": [[279, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[281, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[283, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[284, "nearest-neighbors-classification"], [983, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[285, "kernel-density-estimation"], [408, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[286, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[287, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[288, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[288, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[288, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[289, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[290, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[291, "neighborhood-components-analysis-illustration"]], "Original points": [[291, "original-points"]], "Learning an embedding": [[291, "learning-an-embedding"]], "Nearest Centroid Classification": [[292, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[293, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[294, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[297, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[298, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[299, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[300, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[300, "models-definition"]], "Training": [[300, "training"], [983, "training"]], "Plotting": [[300, "plotting"], [401, "plotting"], [401, "id7"], [401, "id9"]], "Compare the effect of different scalers on data with outliers": [[303, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[303, "standardscaler"]], "MinMaxScaler": [[303, "minmaxscaler"]], "MaxAbsScaler": [[303, "maxabsscaler"]], "RobustScaler": [[303, "robustscaler"]], "PowerTransformer": [[303, "powertransformer"]], "QuantileTransformer (uniform output)": [[303, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[303, "quantiletransformer-gaussian-output"]], "Normalizer": [[303, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[304, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[305, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[306, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[307, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[308, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[308, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[308, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[308, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[309, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[309, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[309, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[309, "native-categorical-feature-support"]], "Plotting the Results": [[309, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[310, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[310, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[310, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[313, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[313, "new-plotting-api"]], "Stacking Classifier and Regressor": [[313, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[313, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[313, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[313, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[313, "knn-based-imputation"]], "Tree pruning": [[313, "tree-pruning"]], "Retrieve dataframes from OpenML": [[313, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[313, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[313, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[314, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[314, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[314, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[314, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[314, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[314, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[315, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[315, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[315, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[315, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[315, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[315, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[315, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[315, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[315, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[315, "new-documentation-improvements"], [316, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[316, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[316, "keyword-and-positional-arguments"]], "Spline Transformers": [[316, "spline-transformers"]], "Quantile Regressor": [[316, "quantile-regressor"]], "Feature Names Support": [[316, "feature-names-support"]], "A more flexible plotting API": [[316, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[316, "online-one-class-svm"], [994, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[316, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[317, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[317, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[317, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[317, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[317, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[317, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[317, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[318, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[318, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[318, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[318, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[318, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[318, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[318, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[319, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[319, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[319, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[319, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[319, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[319, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[319, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Label Propagation digits: Demonstrating performance": [[322, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[322, "semi-supervised-learning"], [993, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[322, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[323, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[324, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[325, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[326, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[327, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[330, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[331, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[332, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[333, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[334, "rbf-svm-parameters"]], "Load and prepare data set": [[334, "load-and-prepare-data-set"]], "Train classifiers": [[334, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[335, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[336, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[337, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[337, "load-some-data-to-play-with"]], "Create the pipeline": [[337, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[337, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[338, "svm-kernels"]], "SVM Margins Example": [[339, "svm-margins-example"]], "Non-linear SVM": [[340, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[341, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[342, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[342, "l1-penalty-case"]], "L2-penalty case": [[342, "l2-penalty-case"]], "SVM Tie Breaking Example": [[343, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[344, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[347, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[347, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[347, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[347, "model-without-metadata-stripping"]], "Model with metadata stripping": [[347, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[347, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[347, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[348, "clustering-text-documents-using-k-means"]], "Loading text data": [[348, "loading-text-data"]], "Quantifying the quality of clustering results": [[348, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[348, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[348, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[348, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[348, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[348, "top-terms-per-cluster"]], "HashingVectorizer": [[348, "hashingvectorizer"]], "Clustering evaluation summary": [[348, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[349, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[349, "load-data"]], "Define preprocessing functions": [[349, "define-preprocessing-functions"]], "DictVectorizer": [[349, "dictvectorizer"]], "FeatureHasher": [[349, "featurehasher"]], "Comparison with special purpose text vectorizers": [[349, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[349, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[352, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[352, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[352, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[353, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[354, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[355, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[356, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[356, "train-tree-classifier"]], "Tree structure": [[356, "tree-structure"]], "Decision path": [[356, "decision-path"]], "Common pitfalls and recommended practices": [[358, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[358, "inconsistent-preprocessing"]], "Data leakage": [[358, "data-leakage"]], "Data leakage during pre-processing": [[358, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[358, "how-to-avoid-data-leakage"]], "Controlling randomness": [[358, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[358, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[358, "cv-splitters"], [358, "id3"]], "Common pitfalls and subtleties": [[358, "common-pitfalls-and-subtleties"]], "General recommendations": [[358, "general-recommendations"]], "Getting reproducible results across multiple executions": [[358, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[358, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[361, "computing-with-scikit-learn"]], "Computational Performance": [[362, "computational-performance"]], "Bulk versus Atomic mode": [[362, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[362, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[362, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[362, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[362, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[362, "feature-extraction-latency"]], "Prediction Throughput": [[362, "prediction-throughput"]], "Tips and Tricks": [[362, "tips-and-tricks"]], "Linear algebra libraries": [[362, "linear-algebra-libraries"]], "Limiting Working Memory": [[362, "limiting-working-memory"]], "Model Compression": [[362, "model-compression"]], "Model Reshaping": [[362, "model-reshaping"]], "Links": [[362, "links"]], "Parallelism, resource management, and configuration": [[363, "parallelism-resource-management-and-configuration"]], "Parallelism": [[363, "parallelism"], [969, "parallelism"]], "Higher-level parallelism with joblib": [[363, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[363, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[363, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[363, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[363, "configuration-switches"]], "Python API": [[363, "python-api"]], "Environment variables": [[363, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[363, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[363, "sklearn-working-memory"]], "SKLEARN_SEED": [[363, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[363, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[363, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[363, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[363, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[363, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[363, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[364, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[364, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[364, "streaming-instances"]], "Extracting features": [[364, "extracting-features"]], "Incremental learning": [[364, "incremental-learning"]], "Notes": [[364, "notes"], [403, "notes"], [976, "notes"]], "Table Of Contents": [[365, "table-of-contents"]], "Dataset transformations": [[368, "dataset-transformations"]], "Dataset loading utilities": [[369, "dataset-loading-utilities"], [381, "dataset-loading-utilities"]], "Loading other datasets": [[370, "loading-other-datasets"]], "Sample images": [[370, "sample-images"]], "Examples:": [[370, null], [391, null], [399, null], [399, null], [400, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [403, null], [403, null], [403, null], [403, null], [403, null], [404, null], [404, null], [404, null], [404, null], [404, null], [404, null], [405, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [408, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [411, null], [411, null], [411, null], [411, null], [969, null], [969, null], [969, null], [972, null], [972, null], [974, null], [974, null], [974, null], [975, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [976, null], [977, null], [979, null], [979, null], [979, null], [979, null], [980, null], [980, null], [980, null], [980, null], [980, null], [981, null], [983, null], [983, null], [983, null], [983, null], [983, null], [984, null], [984, null], [985, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [987, null], [988, null], [990, null], [990, null], [990, null], [994, null], [994, null], [995, null], [995, null], [995, null], [995, null], [995, null], [995, null], [996, null], [996, null], [996, null], [996, null], [1019, null]], "Datasets in svmlight / libsvm format": [[370, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[370, null]], "Downloading datasets from the openml.org repository": [[370, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[370, "dataset-versions"]], "ARFF parser": [[370, "arff-parser"]], "Loading from external datasets": [[370, "loading-from-external-datasets"], [1006, null]], "Real world datasets": [[371, "real-world-datasets"]], "The Olivetti faces dataset": [[371, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[371, "the-20-newsgroups-text-dataset"]], "Usage": [[371, "usage"], [371, "id2"], [400, "usage"], [403, "usage"], [403, "id1"], [409, "usage"], [409, "id24"], [409, "id25"], [409, "id27"], [409, "id35"], [976, "usage"]], "Converting text to vectors": [[371, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[371, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[371, null]], "Recommendation": [[371, null]], "The Labeled Faces in the Wild face recognition dataset": [[371, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[371, "forest-covertypes"]], "RCV1 dataset": [[371, "rcv1-dataset"]], "Kddcup 99 dataset": [[371, "kddcup-99-dataset"]], "California Housing dataset": [[371, "california-housing-dataset"]], "Generated datasets": [[372, "generated-datasets"]], "Generators for classification and clustering": [[372, "generators-for-classification-and-clustering"]], "Single label": [[372, "single-label"]], "Multilabel": [[372, "multilabel"]], "Generators for regression": [[372, "generators-for-regression"]], "Generators for manifold learning": [[372, "generators-for-manifold-learning"]], "Generators for decomposition": [[372, "generators-for-decomposition"]], "Toy datasets": [[373, "toy-datasets"]], "Iris plants dataset": [[373, "iris-plants-dataset"]], "Diabetes dataset": [[373, "diabetes-dataset"], [1013, null]], "Optical recognition of handwritten digits dataset": [[373, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[373, "linnerrud-dataset"]], "Wine recognition dataset": [[373, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[373, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[374, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[374, "installing-nightly-builds"]], "Building from source": [[374, "building-from-source"]], "Dependencies": [[374, "dependencies"]], "Runtime dependencies": [[374, "runtime-dependencies"]], "Build dependencies": [[374, "build-dependencies"]], "Test dependencies": [[374, "test-dependencies"]], "Building a specific version from a tag": [[374, "building-a-specific-version-from-a-tag"]], "Editable mode": [[374, "editable-mode"]], "Platform-specific instructions": [[374, "platform-specific-instructions"]], "Windows": [[374, "windows"]], "macOS": [[374, "macos"]], "macOS compilers from conda-forge": [[374, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[374, "macos-compilers-from-homebrew"]], "Linux": [[374, "linux"]], "Linux compilers from the system": [[374, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[374, "linux-compilers-from-conda-forge"]], "FreeBSD": [[374, "freebsd"]], "Alternative compilers": [[374, "alternative-compilers"]], "Parallel builds": [[374, "parallel-builds"]], "Bug triaging and issue curation": [[375, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[375, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[375, null]], "Working on PRs to help review": [[375, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[375, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[375, null]], "A typical workflow for triaging issues": [[375, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[376, "contributing"], [387, "contributing"]], "Our community, our values": [[376, null]], "Ways to contribute": [[376, "ways-to-contribute"]], "Contributing to related projects": [[376, null]], "Submitting a bug report or a feature request": [[376, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[376, "how-to-make-a-good-bug-report"]], "Contributing code": [[376, "contributing-code"]], "Video resources": [[376, "video-resources"]], "How to contribute": [[376, "how-to-contribute"]], "Learning git:": [[376, null]], "Pull request checklist": [[376, "pull-request-checklist"]], "Continuous Integration (CI)": [[376, "continuous-integration-ci"]], "Stalled pull requests": [[376, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[376, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[376, "issues-for-new-contributors"]], "good first issue tag": [[376, null]], "Easy tag": [[376, null]], "help wanted tag": [[376, null]], "Documentation": [[376, "documentation"], [1022, "documentation"]], "Building the documentation": [[376, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[376, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[376, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[376, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[376, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[376, "monitoring-performance"]], "Issue Tracker Tags": [[376, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[376, "maintaining-backwards-compatibility"]], "Deprecation": [[376, "deprecation"]], "Change the default value of a parameter": [[376, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[376, "code-review-guidelines"]], "Communication Guidelines": [[376, "communication-guidelines"]], "Reading the existing code base": [[376, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[377, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[377, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[377, "tips-to-ease-development"]], "Tips for performance": [[377, "tips-for-performance"]], "Using OpenMP": [[377, "using-openmp"]], "Developing scikit-learn estimators": [[378, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[378, "apis-of-scikit-learn-objects"]], "Different objects": [[378, "different-objects"]], "Instantiation": [[378, "instantiation"]], "Fitting": [[378, "fitting"]], "Estimated Attributes": [[378, "estimated-attributes"]], "Optional Arguments": [[378, "optional-arguments"]], "Universal attributes": [[378, "universal-attributes"]], "Rolling your own estimator": [[378, "rolling-your-own-estimator"]], "Project template:": [[378, null]], "BaseEstimator and mixins:": [[378, null]], "get_params and set_params": [[378, "get-params-and-set-params"]], "Parameters and init": [[378, "parameters-and-init"]], "Cloning": [[378, "cloning"]], "Pipeline compatibility": [[378, "pipeline-compatibility"]], "Estimator types": [[378, "estimator-types"]], "Specific models": [[378, "specific-models"]], "Estimator Tags": [[378, "estimator-tags"]], "Developer API for set_output": [[378, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[378, "developer-api-for-check-is-fitted"]], "Coding guidelines": [[378, "coding-guidelines"]], "Input validation": [[378, "input-validation"]], "Random Numbers": [[378, "random-numbers"]], "Numerical assertions in tests": [[378, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[379, "developer-s-guide"]], "Maintainer / core-developer information": [[380, "maintainer-core-developer-information"]], "Releasing": [[380, "releasing"]], "Before a release": [[380, "before-a-release"]], "Preparing a release PR": [[380, "preparing-a-release-pr"]], "Major version release": [[380, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[380, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[380, "making-a-release"]], "Release checklist": [[380, "release-checklist"]], "Merging Pull Requests": [[380, "merging-pull-requests"]], "The scikit-learn.org web site": [[380, "the-scikit-learn-org-web-site"]], "Experimental features": [[380, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[381, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[381, "good-practices"]], "Provide a failing code example with minimal comments": [[381, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[381, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[381, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[381, "use-markdown-formatting"]], "Synthetic dataset": [[381, "synthetic-dataset"]], "NumPy": [[381, "numpy"]], "Pandas": [[381, "pandas"]], "make_regression": [[381, "make-regression"]], "make_classification": [[381, "make-classification"]], "make_blobs": [[381, "make-blobs"]], "How to optimize for speed": [[382, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[382, "python-cython-or-c-c"]], "Profiling Python code": [[382, "profiling-python-code"]], "Memory usage profiling": [[382, "memory-usage-profiling"]], "Using Cython": [[382, "using-cython"]], "Profiling compiled extensions": [[382, "profiling-compiled-extensions"]], "Using yep and gperftools": [[382, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[382, "using-a-debugger-gdb"]], "Using gprof": [[382, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[382, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[382, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[382, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[382, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[383, "developing-with-the-plotting-api"]], "Plotting API Overview": [[383, "plotting-api-overview"]], "Plotting with Multiple Axes": [[383, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[384, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[384, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[384, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[384, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[384, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[384, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[384, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[384, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[384, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[385, "utilities-for-developers"]], "Validation Tools": [[385, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[385, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[385, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[385, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[385, "graph-routines"]], "Testing Functions": [[385, "testing-functions"]], "Multiclass and multilabel utility function": [[385, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[385, "helper-functions"]], "Hash Functions": [[385, "hash-functions"]], "Warnings and Exceptions": [[385, "warnings-and-exceptions"]], "Dispatching": [[386, "dispatching"]], "Frequently Asked Questions": [[387, "frequently-asked-questions"]], "Table of Contents": [[387, "table-of-contents"]], "About the project": [[387, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[387, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[387, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[387, "why-scikit"]], "Do you support PyPy?": [[387, "do-you-support-pypy"]], "Implementation decisions": [[387, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[387, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[387, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[387, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[387, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[387, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[387, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[387, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[387, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[387, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[387, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[387, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[387, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[387, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[387, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[387, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[387, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[387, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[387, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[387, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[387, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[387, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[388, "getting-started"]], "Fitting and predicting: estimator basics": [[388, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[388, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[388, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[388, "model-evaluation"]], "Automatic parameter searches": [[388, "automatic-parameter-searches"]], "Next steps": [[388, "next-steps"]], "Glossary of Common Terms and API Elements": [[389, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[389, "general-concepts"]], "Class APIs and Estimator Types": [[389, "class-apis-and-estimator-types"]], "Target Types": [[389, "target-types"]], "Methods": [[389, "methods"]], "Parameters": [[389, "parameters"], [409, "parameters"]], "Attributes": [[389, "attributes"]], "Data and sample properties": [[389, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[390, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[390, "roles-and-responsibilities"]], "Contributors": [[390, "contributors"]], "Core Contributors": [[390, "core-contributors"]], "Communication team": [[390, "communication-team"]], "Maintainers": [[390, "maintainers"]], "Technical Committee": [[390, "technical-committee"]], "Decision Making Process": [[390, "decision-making-process"]], "Governance Model Changes": [[390, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[390, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[392, "installing-scikit-learn"]], "Installing the latest release": [[392, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[392, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[392, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[392, "alpine-linux"]], "Arch Linux": [[392, "arch-linux"]], "Debian/Ubuntu": [[392, "debian-ubuntu"]], "Fedora": [[392, "fedora"]], "NetBSD": [[392, "netbsd"]], "MacPorts for Mac OSX": [[392, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[392, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[392, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[392, "winpython-for-windows"]], "Troubleshooting": [[392, "troubleshooting"]], "Error caused by file path length limit on Windows": [[392, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[393, "usage-examples"]], "Weighted scoring and fitting": [[393, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[393, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[393, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[393, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[393, "api-interface"]], "Model persistence": [[396, "model-persistence"]], "Python specific serialization": [[396, "python-specific-serialization"]], "Security & maintainability limitations": [[396, "security-maintainability-limitations"]], "A more secure format: skops": [[396, "a-more-secure-format-skops"]], "Interoperable formats": [[396, "interoperable-formats"]], "Model selection and evaluation": [[397, "model-selection-and-evaluation"]], "Array API support (experimental)": [[398, "array-api-support-experimental"]], "Example usage": [[398, "example-usage"]], "PyTorch Support": [[398, "pytorch-support"]], "Estimators with support for Array API-compatible inputs": [[398, "estimators-with-support-for-array-api-compatible-inputs"]], "Common estimator checks": [[398, "common-estimator-checks"]], "Spectral Co-Clustering": [[399, "spectral-co-clustering"]], "Mathematical formulation": [[399, "mathematical-formulation"], [399, "id3"], [402, "mathematical-formulation"], [402, "id16"], [402, "id23"], [402, "id33"], [402, "id37"], [409, "mathematical-formulation"], [976, "mathematical-formulation"], [983, "mathematical-formulation"], [984, "mathematical-formulation"], [994, "mathematical-formulation"], [995, "mathematical-formulation"], [996, "mathematical-formulation"]], "Spectral Biclustering": [[399, "spectral-biclustering"]], "Biclustering evaluation": [[399, "biclustering-evaluation"]], "Probability calibration": [[400, "probability-calibration"]], "Calibrating a classifier": [[400, "calibrating-a-classifier"]], "Sigmoid": [[400, "sigmoid"]], "Isotonic": [[400, "isotonic"]], "Multiclass support": [[400, "multiclass-support"]], "API Reference": [[401, "api-reference"]], "sklearn.base: Base classes and utility functions": [[401, "module-sklearn.base"]], "Base classes": [[401, "base-classes"]], "Functions": [[401, "functions"], [401, "id1"]], "sklearn.calibration: Probability Calibration": [[401, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[401, "module-sklearn.cluster"]], "Classes": [[401, "classes"]], "sklearn.compose: Composite Estimators": [[401, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[401, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[401, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[401, "module-sklearn.datasets"]], "Loaders": [[401, "loaders"]], "Samples generator": [[401, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[401, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[401, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[401, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[401, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[401, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[401, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[401, "module-sklearn.feature_extraction"]], "From images": [[401, "module-sklearn.feature_extraction.image"]], "From text": [[401, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[401, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[401, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[401, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[401, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[401, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[401, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[401, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[401, "module-sklearn.linear_model"]], "Linear classifiers": [[401, "linear-classifiers"]], "Classical linear regressors": [[401, "classical-linear-regressors"]], "Regressors with variable selection": [[401, "regressors-with-variable-selection"]], "Bayesian regressors": [[401, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[401, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[401, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[401, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[401, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[401, "sklearn-metrics-metrics"]], "Model Selection Interface": [[401, "model-selection-interface"]], "Classification metrics": [[401, "classification-metrics"], [980, "classification-metrics"]], "Regression metrics": [[401, "regression-metrics"], [980, "regression-metrics"]], "Multilabel ranking metrics": [[401, "multilabel-ranking-metrics"], [980, "multilabel-ranking-metrics"]], "Clustering metrics": [[401, "clustering-metrics"], [980, "clustering-metrics"]], "Biclustering metrics": [[401, "biclustering-metrics"]], "Distance metrics": [[401, "distance-metrics"]], "Pairwise metrics": [[401, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[401, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[401, "module-sklearn.model_selection"]], "Splitter Classes": [[401, "splitter-classes"]], "Splitter Functions": [[401, "splitter-functions"]], "Hyper-parameter optimizers": [[401, "hyper-parameter-optimizers"]], "Model validation": [[401, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[401, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[401, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[401, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[401, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[401, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[401, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[401, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[401, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[401, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[401, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[401, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[401, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[401, "module-sklearn.utils"]], "Recently deprecated": [[401, "recently-deprecated"]], "Input data": [[402, null]], "Overview of clustering methods": [[402, "overview-of-clustering-methods"]], "K-means": [[402, "k-means"]], "Low-level parallelism": [[402, "low-level-parallelism"], [409, "low-level-parallelism"]], "Mini Batch K-Means": [[402, "mini-batch-k-means"]], "Affinity Propagation": [[402, "affinity-propagation"]], "Mean Shift": [[402, "mean-shift"]], "Spectral clustering": [[402, "spectral-clustering"]], "Different label assignment strategies": [[402, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[402, "spectral-clustering-graphs"]], "Hierarchical clustering": [[402, "hierarchical-clustering"]], "FeatureAgglomeration": [[402, null]], "Different linkage type: Ward, complete, average, and single linkage": [[402, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[402, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[402, "adding-connectivity-constraints"]], "Varying the metric": [[402, "varying-the-metric"]], "Bisecting K-Means": [[402, "bisecting-k-means"]], "DBSCAN": [[402, "dbscan"]], "Implementation": [[402, null], [983, "implementation"]], "Memory consumption for large sample sizes": [[402, null]], "HDBSCAN": [[402, "hdbscan"]], "Mutual Reachability Graph": [[402, "mutual-reachability-graph"]], "Hierarchical Clustering": [[402, "id11"]], "OPTICS": [[402, "optics"]], "Comparison with DBSCAN": [[402, null]], "Computational Complexity": [[402, null]], "BIRCH": [[402, "birch"]], "Clustering performance evaluation": [[402, "clustering-performance-evaluation"]], "Rand index": [[402, "rand-index"]], "Advantages": [[402, "advantages"], [402, "id14"], [402, "id21"], [402, "id25"], [402, "id28"], [402, "id31"], [402, "id35"], [402, "id39"]], "Drawbacks": [[402, "drawbacks"], [402, "id15"], [402, "id22"], [402, "id26"], [402, "id29"], [402, "id32"], [402, "id36"], [402, "id40"]], "Mutual Information based scores": [[402, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[402, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[402, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[402, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[402, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[402, "davies-bouldin-index"]], "Contingency Matrix": [[402, "contingency-matrix"]], "Pair Confusion Matrix": [[402, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[403, "pipeline-chaining-estimators"]], "Construction": [[403, "construction"]], "Accessing steps": [[403, "accessing-steps"]], "Nested parameters": [[403, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[403, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[403, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[403, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[403, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[403, "visualizing-composite-estimators"]], "Empirical covariance": [[404, "empirical-covariance"]], "Shrunk Covariance": [[404, "shrunk-covariance"]], "Basic shrinkage": [[404, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[404, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[404, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[404, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[404, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[404, "minimum-covariance-determinant"]], "PLSCanonical": [[405, "plscanonical"]], "Transforming data": [[405, "transforming-data"]], "Predicting the targets Y": [[405, "predicting-the-targets-y"]], "PLSSVD": [[405, "plssvd"]], "PLSRegression": [[405, "plsregression"]], "Canonical Correlation Analysis": [[405, "canonical-correlation-analysis"]], "Reference:": [[405, null]], "Cross-validation: evaluating estimator performance": [[406, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[406, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[406, null]], "The cross_validate function and multiple metric evaluation": [[406, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[406, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[406, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[406, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[406, "k-fold"]], "Repeated K-Fold": [[406, "repeated-k-fold"]], "Leave One Out (LOO)": [[406, "leave-one-out-loo"]], "Leave P Out (LPO)": [[406, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[406, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[406, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[406, "stratified-k-fold"]], "Stratified Shuffle Split": [[406, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[406, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[406, "group-k-fold"]], "StratifiedGroupKFold": [[406, "stratifiedgroupkfold"]], "Leave One Group Out": [[406, "leave-one-group-out"]], "Leave P Groups Out": [[406, "leave-p-groups-out"]], "Group Shuffle Split": [[406, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[406, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[406, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[406, "cross-validation-of-time-series-data"]], "Time Series Split": [[406, "time-series-split"]], "A note on shuffling": [[406, "a-note-on-shuffling"]], "Cross validation and model selection": [[406, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[407, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[407, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[407, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[407, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[407, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[407, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[407, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[407, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[407, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[407, "dictionary-learning"]], "Generic dictionary learning": [[407, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[407, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[407, null]], "Factor Analysis": [[407, "factor-analysis"]], "Independent component analysis (ICA)": [[407, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[407, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[407, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[407, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[407, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[407, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[408, "density-estimation"]], "Density Estimation: Histograms": [[408, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[409, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[409, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[409, null]], "Histogram-Based Gradient Boosting": [[409, "histogram-based-gradient-boosting"]], "Missing values support": [[409, "missing-values-support"]], "Sample weight support": [[409, "sample-weight-support"]], "Categorical Features Support": [[409, "categorical-features-support"]], "Interaction constraints": [[409, "interaction-constraints"]], "Why it\u2019s faster": [[409, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[409, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[409, "fitting-additional-weak-learners"]], "Controlling the tree size": [[409, "controlling-the-tree-size"]], "Loss Functions": [[409, "loss-functions"]], "Shrinkage via learning rate": [[409, "shrinkage-via-learning-rate"]], "Subsampling": [[409, "subsampling"]], "Interpretation with feature importance": [[409, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[409, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[409, "random-forests"]], "Extremely Randomized Trees": [[409, "extremely-randomized-trees"]], "Parallelization": [[409, "parallelization"]], "Feature importance evaluation": [[409, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[409, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[409, "bagging-meta-estimator"]], "Voting Classifier": [[409, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[409, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[409, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[409, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[409, "voting-regressor"]], "Stacked generalization": [[409, "stacked-generalization"]], "AdaBoost": [[409, "adaboost"]], "Feature extraction": [[410, "feature-extraction"]], "Loading features from dicts": [[410, "loading-features-from-dicts"]], "Feature hashing": [[410, "feature-hashing"]], "Implementation details": [[410, "implementation-details"], [994, "implementation-details"], [995, "implementation-details"]], "Text feature extraction": [[410, "text-feature-extraction"]], "The Bag of Words representation": [[410, "the-bag-of-words-representation"]], "Sparsity": [[410, "sparsity"], [1013, "sparsity"]], "Common Vectorizer usage": [[410, "common-vectorizer-usage"]], "Using stop words": [[410, "using-stop-words"]], "Tf\u2013idf term weighting": [[410, "tfidf-term-weighting"]], "Decoding text files": [[410, "decoding-text-files"]], "Applications and examples": [[410, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[410, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[410, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[410, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[410, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[410, "image-feature-extraction"]], "Patch extraction": [[410, "patch-extraction"]], "Connectivity graph of an image": [[410, "connectivity-graph-of-an-image"]], "Feature selection": [[411, "feature-selection"]], "Removing features with low variance": [[411, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[411, null]], "Feature selection using SelectFromModel": [[411, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[411, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[411, "compressive-sensing"]], "Tree-based feature selection": [[411, "tree-based-feature-selection"]], "Sequential Feature Selection": [[411, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[411, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[412, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[412, "gaussian-process-regression-gpr"]], "GPR examples": [[412, "gpr-examples"]], "GPR with noise-level estimation": [[412, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[412, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[412, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[412, "gaussian-process-classification-gpc"]], "GPC examples": [[412, "gpc-examples"]], "Probabilistic predictions with GPC": [[412, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[412, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[412, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[412, "gaussian-process-kernel-api"]], "Basic kernels": [[412, "basic-kernels"]], "Kernel operators": [[412, "kernel-operators"]], "Radial basis function (RBF) kernel": [[412, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[412, "rational-quadratic-kernel"]], "Dot-Product kernel": [[412, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[413, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[414, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[415, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[416, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[416, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[417, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[418, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[419, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[419, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[420, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[421, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[422, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[422, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[423, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[424, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[425, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[425, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[426, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[426, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[427, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[428, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[429, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[430, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[430, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[431, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[431, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[432, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[433, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[433, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[434, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[434, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[435, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[435, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[436, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[436, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[437, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[437, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[438, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[438, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[439, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[439, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[440, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[440, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[441, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[441, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[442, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[442, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[443, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[443, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[444, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[444, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[445, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[445, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[446, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[446, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[447, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[447, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[448, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[448, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[449, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[450, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[451, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[451, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[452, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[453, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[453, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[454, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[455, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[455, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[456, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[457, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[457, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[458, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[458, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[459, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[459, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[460, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[460, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[461, "sklearn-config-context"]], "Examples using sklearn.config_context": [[461, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[462, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[462, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[463, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[463, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[464, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[465, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[465, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[466, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[466, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[467, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[467, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[468, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[468, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[469, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[469, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[470, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[470, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[471, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[472, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[472, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[473, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[474, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[475, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[475, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[476, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[476, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[477, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[477, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[478, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[479, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[480, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[480, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[481, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[481, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[482, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[482, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[483, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[483, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[484, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[484, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[485, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[485, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[486, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[487, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[487, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[488, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[488, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[489, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[489, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[490, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[491, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[491, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[492, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[492, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[493, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[493, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[494, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[494, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[495, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[495, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[496, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[497, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[497, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[498, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[499, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[499, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[500, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[501, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[502, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[503, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[503, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[504, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[504, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[505, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[505, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[506, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[506, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[507, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[507, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[508, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[508, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[509, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[510, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[511, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[512, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[512, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[513, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[513, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[514, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[514, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[515, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[515, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[516, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[516, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[517, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[517, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[518, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[518, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[519, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[519, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[520, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[520, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[521, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[522, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[523, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[523, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[524, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[525, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[525, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[526, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[526, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[527, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[527, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[528, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[528, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[529, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[529, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[530, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[530, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[531, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[531, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[532, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[532, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[533, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[533, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[534, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[534, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[535, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[535, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[536, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[536, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[537, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[537, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[538, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[539, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[540, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[541, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[542, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[542, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[543, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[543, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[544, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[544, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[545, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[545, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[546, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[546, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[547, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[547, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[548, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[549, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[549, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[550, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[550, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[551, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[551, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[552, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[552, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[553, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[553, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[554, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[554, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[555, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[555, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[556, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[556, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[557, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[557, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[558, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[558, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[559, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[559, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[560, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[560, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[561, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[561, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[562, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[562, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[563, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[563, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[564, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[564, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[565, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[566, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[567, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[568, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[569, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[570, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[571, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[572, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[573, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[574, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[574, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[575, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[575, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[576, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[577, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[577, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[578, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[579, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[580, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[580, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[581, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[581, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[582, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[582, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[583, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[583, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[584, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[584, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[585, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[586, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[586, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[587, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[587, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[588, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[589, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[590, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[590, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[591, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[592, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[592, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[593, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[593, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[594, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[595, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[595, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[596, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[597, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[597, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[598, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[598, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[599, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[599, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[600, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[600, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[601, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[601, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[602, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[603, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[603, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[604, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[604, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[605, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[606, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[606, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[607, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[607, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[608, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[608, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[609, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[610, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[610, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[611, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[611, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[612, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[612, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[613, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[614, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[615, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[615, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[616, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[616, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[617, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[618, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[618, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[619, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[620, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[620, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[621, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[621, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[622, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[623, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[623, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[624, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[624, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[624, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[625, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[625, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[625, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[626, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[626, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[627, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[627, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[628, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[628, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[629, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[630, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[631, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[632, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[632, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[633, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[633, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[634, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[634, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[635, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[636, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[636, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[637, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[637, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[638, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[638, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[639, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[639, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[640, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[640, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[641, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[641, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[642, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[642, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[643, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[644, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[645, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[645, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[646, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[646, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[647, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[648, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[648, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[649, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[649, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[650, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[650, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[651, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[651, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[652, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[652, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[653, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[654, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[655, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[655, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[656, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[657, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[657, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[658, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[658, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[659, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[659, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[660, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[661, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[661, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[662, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[662, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[663, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[663, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[664, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[664, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[665, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[665, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[666, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[666, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[667, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[667, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[668, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[669, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[669, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[670, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[670, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[671, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[671, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[672, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[672, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[673, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[673, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[674, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[674, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[675, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[675, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[676, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[677, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[677, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[678, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[679, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[680, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[681, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[681, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[682, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[682, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[683, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[683, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[684, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[684, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[685, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[685, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[686, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[686, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[687, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[688, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[689, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[690, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[690, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[690, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[690, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[691, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[691, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[692, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[693, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[693, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[693, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[693, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[694, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[694, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[694, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[694, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[695, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[695, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[695, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[695, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[696, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[696, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[697, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[697, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[698, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[698, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[699, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[699, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[700, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[700, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[701, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[702, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[702, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[703, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[704, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[705, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[705, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[706, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[706, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[707, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[708, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[709, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[710, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[710, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[711, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[711, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[712, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[712, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[713, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[714, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[715, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[716, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[717, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[718, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[719, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[719, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[720, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[721, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[721, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[722, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[723, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[724, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[725, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[726, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[726, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[727, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[728, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[729, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[729, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[730, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[730, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[731, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[732, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[733, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[733, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[734, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[734, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[735, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[736, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[737, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[737, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[738, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[739, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[740, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[740, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[741, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[741, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[742, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[742, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[743, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[744, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[744, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[745, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[745, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[746, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[747, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[747, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[748, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[749, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[749, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[750, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[751, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[752, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[753, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[754, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[755, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[756, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[757, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[758, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[759, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[760, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[761, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[762, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[763, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[764, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[765, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[766, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[767, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[768, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[769, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[770, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[770, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[771, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[771, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[772, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[773, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[774, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[774, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[775, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[776, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[776, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[777, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[777, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[778, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[778, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[779, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[779, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[780, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[780, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[781, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[781, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[782, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[782, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[783, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[783, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[784, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[785, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[785, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[786, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[786, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[787, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[787, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[788, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[788, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[789, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[789, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[790, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[790, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[791, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[791, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[792, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[792, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[793, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[793, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[794, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[794, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[795, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[795, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[795, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[796, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[797, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[798, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[799, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[800, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[801, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[802, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[803, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[803, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[804, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[804, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[805, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[805, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[806, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[806, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[807, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[807, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[808, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[808, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[809, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[809, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[810, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[810, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[811, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[811, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[812, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[813, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[813, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[814, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[814, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[815, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[815, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[816, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[816, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[817, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[817, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[818, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[818, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[819, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[819, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[820, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[821, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[821, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[822, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[823, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[823, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[824, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[825, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[825, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[826, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[827, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[827, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[828, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[829, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[829, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[830, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[830, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[831, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[831, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[832, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[833, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[834, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[834, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[835, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[835, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[836, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[836, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[837, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[837, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[838, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[838, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[839, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[839, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[840, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[840, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[841, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[841, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[842, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[843, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[844, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[845, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[845, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[846, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[847, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[848, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[848, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[849, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[849, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[850, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[850, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[851, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[851, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[852, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[852, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[853, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[853, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[854, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[855, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[856, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[856, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[857, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[857, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[858, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[859, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[859, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[860, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[861, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[861, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[862, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[862, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[863, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[864, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[864, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[865, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[865, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[866, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[866, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[867, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[867, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[868, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[868, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[869, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[869, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[870, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[870, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[871, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[871, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[872, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[872, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[873, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[873, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[874, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[875, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[876, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[876, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[877, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[878, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[878, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[879, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[880, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[881, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[881, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[882, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[883, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[884, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[885, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[885, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[886, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[886, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[887, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[888, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[888, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[889, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[889, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[890, "sklearn-set-config"]], "Examples using sklearn.set_config": [[890, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[891, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[892, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[892, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[893, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[894, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[894, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[895, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[895, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[896, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[896, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[897, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[897, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[898, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[898, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[899, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[899, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[900, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[900, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[901, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[901, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[902, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[903, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[904, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[905, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[906, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[906, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[907, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[907, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[908, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[909, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[910, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[911, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[912, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[913, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[914, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[915, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[915, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[916, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[917, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[918, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[919, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[920, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[921, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[922, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[923, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[924, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[924, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[925, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[926, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[926, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[927, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[928, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[929, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[930, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[931, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[932, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[933, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[933, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[934, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[935, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[936, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[937, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[937, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[938, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[938, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[939, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[939, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[940, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[940, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[941, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[941, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[942, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[943, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[944, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[945, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[946, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[947, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[948, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[949, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[950, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[951, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[952, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[953, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[954, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[954, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[955, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[956, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[957, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[958, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[959, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[960, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[961, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[962, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[963, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[964, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[964, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[965, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[966, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[967, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[968, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[969, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[969, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[969, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[969, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[969, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[969, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[969, "choosing-a-resource"]], "Exhausting the available resources": [[969, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[969, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[969, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[969, "tips-for-parameter-search"]], "Specifying an objective metric": [[969, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[969, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[969, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[969, "model-selection-development-and-evaluation"]], "Robustness to failure": [[969, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[969, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[969, "model-specific-cross-validation"]], "Information Criterion": [[969, "information-criterion"]], "Out of Bag Estimates": [[969, "out-of-bag-estimates"]], "Imputation of missing values": [[970, "imputation-of-missing-values"], [990, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[970, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[970, "univariate-feature-imputation"]], "Multivariate feature imputation": [[970, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[970, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[970, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[970, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[970, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[970, "marking-imputed-values"]], "Estimators that handle NaN values": [[970, "estimators-that-handle-nan-values"]], "Isotonic regression": [[971, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[972, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[972, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[972, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[972, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[972, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[972, "mathematical-details"]], "Kernel ridge regression": [[973, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[974, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[974, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[974, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[974, "qda"]], "LDA": [[974, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[974, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[974, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[974, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[975, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[975, "validation-curve"]], "Learning curve": [[975, "learning-curve"]], "Linear Models": [[976, "linear-models"]], "Ordinary Least Squares": [[976, "ordinary-least-squares"]], "Non-Negative Least Squares": [[976, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[976, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[976, "ridge-regression-and-classification"]], "Ridge Complexity": [[976, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[976, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[976, "setting-regularization-parameter"]], "Using cross-validation": [[976, "using-cross-validation"]], "Information-criteria based model selection": [[976, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[976, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[976, "multi-task-lasso"]], "Elastic-Net": [[976, "elastic-net"]], "Multi-task Elastic-Net": [[976, "multi-task-elastic-net"]], "Least Angle Regression": [[976, "least-angle-regression"]], "LARS Lasso": [[976, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[976, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[976, "bayesian-regression"]], "Bayesian Ridge Regression": [[976, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[976, "automatic-relevance-determination-ard"]], "Logistic regression": [[976, "logistic-regression"]], "Binary Case": [[976, "binary-case"]], "Multinomial Case": [[976, "multinomial-case"]], "Solvers": [[976, "solvers"]], "Differences from liblinear:": [[976, "liblinear-differences"]], "Practical considerations": [[976, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[976, "stochastic-gradient-descent-sgd"]], "Perceptron": [[976, "perceptron"]], "Passive Aggressive Algorithms": [[976, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[976, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[976, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[976, null]], "RANSAC: RANdom SAmple Consensus": [[976, "ransac-random-sample-consensus"]], "Details of the algorithm": [[976, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[976, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[976, "theoretical-considerations"]], "Huber Regression": [[976, "huber-regression"]], "Quantile Regression": [[976, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[976, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[977, "introduction"]], "Isomap": [[977, "isomap"]], "Complexity": [[977, "complexity"], [977, "id3"], [977, "id4"], [977, "id5"], [977, "id7"], [977, "id8"], [983, "complexity"], [984, "complexity"], [994, "complexity"], [995, "complexity"], [996, "complexity"]], "Locally Linear Embedding": [[977, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[977, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[977, "hessian-eigenmapping"]], "Spectral Embedding": [[977, "spectral-embedding"]], "Local Tangent Space Alignment": [[977, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[977, "multi-dimensional-scaling-mds"]], "Metric MDS": [[977, "metric-mds"]], "Nonmetric MDS": [[977, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[977, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[977, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[977, "barnes-hut-t-sne"]], "Tips on practical use": [[977, "tips-on-practical-use"], [996, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[978, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[978, "cosine-similarity"]], "Linear kernel": [[978, "linear-kernel"], [1013, "linear-kernel"]], "Polynomial kernel": [[978, "polynomial-kernel"], [1013, "polynomial-kernel"]], "Sigmoid kernel": [[978, "sigmoid-kernel"]], "RBF kernel": [[978, "rbf-kernel"]], "Laplacian kernel": [[978, "laplacian-kernel"]], "Chi-squared kernel": [[978, "chi-squared-kernel"]], "Gaussian mixture models": [[979, "gaussian-mixture-models"]], "Gaussian Mixture": [[979, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[979, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[979, "pros"], [979, "id2"]], "Cons": [[979, "cons"], [979, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[979, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[979, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[979, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[979, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[979, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[979, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[979, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[980, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[980, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[980, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[980, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[980, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[980, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[980, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[980, "accuracy-score"]], "Example:": [[980, null], [980, null], [980, null], [980, null], [980, null], [980, null], [980, null], [980, null], [992, null], [1013, null]], "Top-k accuracy score": [[980, "top-k-accuracy-score"]], "Balanced accuracy score": [[980, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[980, "cohen-s-kappa"]], "Classification report": [[980, "classification-report"]], "Hamming loss": [[980, "hamming-loss"]], "Precision, recall and F-measures": [[980, "precision-recall-and-f-measures"]], "Binary classification": [[980, "binary-classification"]], "Multiclass and multilabel classification": [[980, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[980, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[980, "hinge-loss"]], "Log loss": [[980, "log-loss"]], "Matthews correlation coefficient": [[980, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[980, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[980, "receiver-operating-characteristic-roc"]], "Binary case": [[980, "binary-case"]], "Multi-class case": [[980, "multi-class-case"]], "Multi-label case": [[980, "multi-label-case"]], "Detection error tradeoff (DET)": [[980, "detection-error-tradeoff-det"]], "Zero one loss": [[980, "zero-one-loss"]], "Brier score loss": [[980, "brier-score-loss"]], "Class likelihood ratios": [[980, "class-likelihood-ratios"]], "Coverage error": [[980, "coverage-error"]], "Label ranking average precision": [[980, "label-ranking-average-precision"]], "Ranking loss": [[980, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[980, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[980, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[980, "mean-absolute-error"]], "Mean squared error": [[980, "mean-squared-error"]], "Mean squared logarithmic error": [[980, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[980, "mean-absolute-percentage-error"]], "Median absolute error": [[980, "median-absolute-error"]], "Max error": [[980, "max-error"]], "Explained variance score": [[980, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[980, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[980, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[980, "pinball-loss"]], "D\u00b2 score": [[980, "d2-score"]], "D\u00b2 Tweedie score": [[980, "d2-tweedie-score"]], "D\u00b2 pinball score": [[980, "d2-pinball-score"]], "D\u00b2 absolute error score": [[980, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[980, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[980, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[981, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[981, "multiclass-classification"], [1013, null]], "Target format": [[981, "target-format"], [981, "id5"], [981, "id8"], [981, "id10"]], "OneVsRestClassifier": [[981, "onevsrestclassifier"]], "OneVsOneClassifier": [[981, "onevsoneclassifier"]], "OutputCodeClassifier": [[981, "outputcodeclassifier"]], "MultiOutputClassifier": [[981, "multioutputclassifier"]], "ClassifierChain": [[981, "classifierchain"]], "Multiclass-multioutput classification": [[981, "multiclass-multioutput-classification"]], "Multioutput regression": [[981, "multioutput-regression"]], "MultiOutputRegressor": [[981, "multioutputregressor"]], "RegressorChain": [[981, "regressorchain"]], "Naive Bayes": [[982, "naive-bayes"]], "Multinomial Naive Bayes": [[982, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[982, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[982, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[982, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[982, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[983, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[983, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[983, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[983, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[983, "nearest-neighbor-algorithms"]], "Brute Force": [[983, "brute-force"]], "K-D Tree": [[983, "k-d-tree"]], "Ball Tree": [[983, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[983, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[983, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[983, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[983, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[983, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[983, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[983, "neighborhood-components-analysis"]], "Dimensionality reduction": [[983, "dimensionality-reduction"]], "Mahalanobis distance": [[983, "mahalanobis-distance"]], "Transform": [[983, "transform"]], "Neural network models (supervised)": [[984, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[984, "multi-layer-perceptron"]], "Regularization": [[984, "regularization"]], "Algorithms": [[984, "algorithms"]], "Tips on Practical Use": [[984, "tips-on-practical-use"], [994, "tips-on-practical-use"], [995, "tips-on-practical-use"]], "More control with warm_start": [[984, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[985, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[985, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[985, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[985, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[985, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[986, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[986, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[986, "novelty-detection"]], "Scaling up the One-Class SVM": [[986, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[986, "id1"]], "Fitting an elliptic envelope": [[986, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[986, "isolation-forest"]], "Local Outlier Factor": [[986, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[986, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[987, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[987, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[987, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[987, "mathematical-definition"]], "Computation methods": [[987, "computation-methods"]], "Permutation feature importance": [[988, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[988, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[988, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[988, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[990, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[990, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[990, "scaling-features-to-a-range"]], "Scaling sparse data": [[990, "scaling-sparse-data"]], "Scaling data with outliers": [[990, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[990, null]], "Centering kernel matrices": [[990, "centering-kernel-matrices"]], "Non-linear transformation": [[990, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[990, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[990, "mapping-to-a-gaussian-distribution"]], "Normalization": [[990, "normalization"]], "Sparse input": [[990, null], [990, null]], "Encoding categorical features": [[990, "encoding-categorical-features"]], "Infrequent categories": [[990, "infrequent-categories"]], "Target Encoder": [[990, "target-encoder"]], "Discretization": [[990, "discretization"]], "K-bins discretization": [[990, "k-bins-discretization"]], "Feature binarization": [[990, "feature-binarization"]], "Generating polynomial features": [[990, "generating-polynomial-features"]], "Polynomial features": [[990, "polynomial-features"]], "Spline transformer": [[990, "spline-transformer"]], "Custom transformers": [[990, "custom-transformers"]], "Transforming the prediction target (y)": [[991, "transforming-the-prediction-target-y"]], "Label binarization": [[991, "label-binarization"]], "LabelBinarizer": [[991, "labelbinarizer"]], "MultiLabelBinarizer": [[991, "multilabelbinarizer"]], "Label encoding": [[991, "label-encoding"]], "Random Projection": [[992, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[992, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[992, "gaussian-random-projection"]], "Sparse random projection": [[992, "sparse-random-projection"]], "Inverse Transform": [[992, "inverse-transform"]], "Unlabeled entries in y": [[993, null]], "Self Training": [[993, "self-training"]], "Label Propagation": [[993, "label-propagation"]], "Stochastic Gradient Descent": [[994, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[994, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[994, "stopping-criterion"]], "SGD": [[994, "id5"]], "Multi-class classification": [[995, "multi-class-classification"]], "Scores and probabilities": [[995, "scores-and-probabilities"]], "Unbalanced problems": [[995, "unbalanced-problems"]], "Density estimation, novelty detection": [[995, "density-estimation-novelty-detection"]], "Kernel functions": [[995, "kernel-functions"]], "Parameters of the RBF Kernel": [[995, "parameters-of-the-rbf-kernel"]], "Using Python functions as kernels": [[995, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[995, "using-the-gram-matrix"]], "SVC": [[995, "svc"]], "SVR": [[995, "svr"]], "Multi-output problems": [[996, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[996, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[996, "classification-criteria"]], "Regression criteria": [[996, "regression-criteria"]], "Missing Values Support": [[996, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[996, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[997, "unsupervised-dimensionality-reduction"]], "Pipelining": [[997, null], [1011, "pipelining"]], "PCA: principal component analysis": [[997, "pca-principal-component-analysis"]], "Random projections": [[997, "random-projections"]], "Feature scaling": [[997, null]], "Welcome to scikit-learn": [[998, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[999, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[999, "new-to-scientific-python"]], "External Tutorials": [[999, "external-tutorials"]], "Videos": [[999, "videos"]], "Related Projects": [[1000, "related-projects"]], "Interoperability and framework enhancements": [[1000, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1000, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1000, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1000, "recommendation-engine-packages"]], "Domain specific packages": [[1000, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1000, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1001, "id1"]], "Purpose of this document": [[1001, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1001, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1001, "architectural-general-goals"]], "Subpackage-specific goals": [[1001, "subpackage-specific-goals"]], "Supervised learning": [[1002, "supervised-learning"]], "Support": [[1003, "support"]], "Mailing List": [[1003, "mailing-list"]], "User questions": [[1003, "user-questions"]], "Bug tracker": [[1003, "bug-tracker"]], "Gitter": [[1003, "gitter"]], "Documentation resources": [[1003, "documentation-resources"]], "Who is using scikit-learn?": [[1004, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1004, "id1"]], "Spotify": [[1004, "id2"]], "Inria": [[1004, "id3"]], "betaworks": [[1004, "id4"]], "Hugging Face": [[1004, "id5"]], "Evernote": [[1004, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1004, "id7"]], "Booking.com": [[1004, "id8"]], "AWeber": [[1004, "id9"]], "Yhat": [[1004, "id10"]], "Rangespan": [[1004, "id11"]], "Birchbox": [[1004, "id12"]], "Bestofmedia Group": [[1004, "id13"]], "Change.org": [[1004, "id14"]], "PHIMECA Engineering": [[1004, "id15"]], "HowAboutWe": [[1004, "id16"]], "PeerIndex": [[1004, "id17"]], "DataRobot": [[1004, "id18"]], "OkCupid": [[1004, "id19"]], "Lovely": [[1004, "id20"]], "Data Publica": [[1004, "id21"]], "Machinalis": [[1004, "id22"]], "solido": [[1004, "id23"]], "INFONEA": [[1004, "id24"]], "Dataiku": [[1004, "id25"]], "Otto Group": [[1004, "id26"]], "Zopa": [[1004, "id27"]], "MARS": [[1004, "id28"]], "BNP Paribas Cardif": [[1004, "id29"]], "An introduction to machine learning with scikit-learn": [[1006, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1006, null]], "Machine learning: the problem setting": [[1006, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1006, null], [1013, null]], "Loading an example dataset": [[1006, "loading-an-example-dataset"]], "Shape of the data arrays": [[1006, null]], "Learning and predicting": [[1006, "learning-and-predicting"]], "Choosing the parameters of the model": [[1006, null]], "Conventions": [[1006, "conventions"]], "Type casting": [[1006, "type-casting"]], "Refitting and updating parameters": [[1006, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1006, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1007, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1008, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1009, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1009, null]], "Model selection: choosing estimators and their parameters": [[1010, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1010, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1010, "cross-validation-generators"]], "Exercise": [[1010, null], [1010, null], [1013, null], [1013, null]], "Grid-search and cross-validated estimators": [[1010, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1010, "grid-search"]], "Nested cross-validation": [[1010, null]], "Cross-validated estimators": [[1010, "cross-validated-estimators"]], "Putting it all together": [[1011, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1011, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1011, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1012, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1012, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1012, null]], "An example of reshaping data would be the digits dataset": [[1012, null]], "Estimators objects": [[1012, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1013, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1013, null]], "Vocabulary: classification and regression": [[1013, null]], "Nearest neighbor and the curse of dimensionality": [[1013, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1013, null]], "k-Nearest neighbors classifier": [[1013, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1013, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1013, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1013, "linear-regression"]], "Shrinkage": [[1013, "shrinkage"]], "Different algorithms for the same problem": [[1013, null]], "Shrinkage and sparsity with logistic regression": [[1013, null]], "Support vector machines (SVMs)": [[1013, "support-vector-machines-svms"]], "Linear SVMs": [[1013, "linear-svms"]], "Using kernels": [[1013, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1013, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1013, null]], "Unsupervised learning: seeking representations of the data": [[1014, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1014, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1014, null]], "K-means clustering": [[1014, "k-means-clustering"]], "Application example: vector quantization": [[1014, null]], "Hierarchical agglomerative clustering: Ward": [[1014, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1014, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1014, null]], "Decompositions: from a signal to components and loadings": [[1014, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1014, null]], "Principal component analysis: PCA": [[1014, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1014, "independent-component-analysis-ica"]], "Working With Text Data": [[1015, "working-with-text-data"]], "Tutorial setup": [[1015, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1015, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1015, "extracting-features-from-text-files"]], "Bags of words": [[1015, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1015, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1015, "from-occurrences-to-frequencies"]], "Training a classifier": [[1015, "training-a-classifier"]], "Building a pipeline": [[1015, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1015, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1015, "parameter-tuning-using-grid-search"]], "Exercises": [[1015, "exercises"]], "Exercise 1: Language identification": [[1015, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1015, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1015, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1015, "where-to-from-here"]], "Unsupervised learning": [[1016, "unsupervised-learning"]], "User Guide": [[1017, "user-guide"]], "Under Development": [[1017, "under-development"]], "Available documentation for Scikit-learn": [[1018, "available-documentation-for-scikit-learn"]], "Visualizations": [[1019, "visualizations"]], "Available Plotting Utilities": [[1019, "available-plotting-utilities"]], "Display Objects": [[1019, "display-objects"]], "Release History": [[1020, "release-history"]], "Version 0.12.1": [[1022, "version-0-12-1"]], "Changelog": [[1022, "changelog"], [1022, "id1"], [1022, "id3"], [1022, "id6"], [1022, "id9"], [1022, "id12"], [1022, "id14"], [1022, "id16"], [1022, "id18"], [1022, "id19"], [1023, "changelog"], [1023, "id1"], [1024, "changelog"], [1025, "changelog"], [1026, "changelog"], [1026, "id1"], [1027, "changelog"], [1027, "id1"], [1028, "changelog"], [1028, "id1"], [1028, "id2"], [1029, "changelog"], [1029, "id1"], [1030, "changelog"], [1030, "id1"], [1030, "id5"], [1030, "id10"], [1030, "id23"], [1031, "changelog"], [1031, "id1"], [1031, "id2"], [1031, "id7"], [1032, "changelog"], [1032, "id1"], [1032, "id4"], [1033, "changelog"], [1033, "id1"], [1033, "id4"], [1034, "changelog"], [1034, "id1"], [1034, "id4"], [1035, "changelog"], [1035, "id1"], [1035, "id7"], [1036, "changelog"], [1036, "id1"], [1036, "id7"], [1037, "changelog"], [1037, "id1"], [1037, "id9"], [1038, "changelog"], [1038, "id1"], [1039, "changelog"]], "People": [[1022, "people"], [1022, "id2"], [1022, "id5"], [1022, "id8"], [1022, "id11"], [1022, "id13"], [1022, "id15"], [1022, "id17"], [1023, "people"], [1023, "id2"], [1024, "people"], [1025, "people"]], "Version 0.12": [[1022, "version-0-12"]], "API changes summary": [[1022, "api-changes-summary"], [1022, "id4"], [1022, "id7"], [1022, "id10"], [1023, "api-changes-summary"], [1024, "api-changes-summary"], [1025, "api-changes-summary"], [1026, "api-changes-summary"], [1027, "api-changes-summary"], [1028, "api-changes-summary"], [1028, "id5"], [1029, "api-changes-summary"]], "Version 0.11": [[1022, "version-0-11"]], "Highlights": [[1022, "highlights"], [1025, "highlights"], [1026, "highlights"], [1029, "highlights"], [1030, "highlights"]], "Other changes": [[1022, "other-changes"]], "Version 0.10": [[1022, "version-0-10"]], "Version 0.9": [[1022, "version-0-9"]], "Version 0.8": [[1022, "version-0-8"]], "Version 0.7": [[1022, "version-0-7"]], "Version 0.6": [[1022, "version-0-6"]], "Version 0.5": [[1022, "version-0-5"]], "New classes": [[1022, "new-classes"]], "Fixes": [[1022, "fixes"]], "External dependencies": [[1022, "external-dependencies"]], "Removed modules": [[1022, "removed-modules"]], "Misc": [[1022, "misc"]], "Version 0.4": [[1022, "version-0-4"]], "Earlier versions": [[1022, "earlier-versions"]], "Version 0.13.1": [[1023, "version-0-13-1"]], "Version 0.13": [[1023, "version-0-13"]], "New Estimator Classes": [[1023, "new-estimator-classes"]], "Version 0.14": [[1024, "version-0-14"]], "Version 0.15.2": [[1025, "version-0-15-2"]], "Bug fixes": [[1025, "bug-fixes"], [1025, "id1"], [1025, "id2"], [1026, "bug-fixes"], [1026, "id2"], [1027, "bug-fixes"], [1027, "id2"], [1028, "bug-fixes"], [1028, "id4"], [1029, "bug-fixes"], [1029, "id3"]], "Version 0.15.1": [[1025, "version-0-15-1"]], "Version 0.15": [[1025, "version-0-15"]], "New features": [[1025, "new-features"], [1026, "new-features"], [1027, "new-features"], [1028, "new-features"], [1029, "new-features"]], "Enhancements": [[1025, "enhancements"], [1026, "enhancements"], [1027, "enhancements"], [1028, "enhancements"], [1028, "id3"], [1029, "enhancements"], [1029, "id2"]], "Documentation improvements": [[1025, "documentation-improvements"], [1026, "documentation-improvements"]], "Version 0.16.1": [[1026, "version-0-16-1"]], "Version 0.16": [[1026, "version-0-16"]], "Code Contributors": [[1026, "code-contributors"], [1027, "code-contributors"], [1028, "code-contributors"], [1028, "id6"]], "Version 0.17.1": [[1027, "version-0-17-1"]], "Version 0.17": [[1027, "version-0-17"]], "Version 0.18.2": [[1028, "version-0-18-2"]], "Last release with Python 2.6 support": [[1028, null], [1028, null]], "Version 0.18.1": [[1028, "version-0-18-1"]], "Version 0.18": [[1028, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1028, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1029, "version-0-19-2"]], "Related changes": [[1029, "related-changes"]], "Version 0.19.1": [[1029, "version-0-19-1"]], "API changes": [[1029, "api-changes"]], "Code and Documentation Contributors": [[1029, "code-and-documentation-contributors"], [1029, "id9"], [1030, "code-and-documentation-contributors"], [1030, "id8"], [1030, "id21"], [1030, "id41"], [1031, "code-and-documentation-contributors"], [1032, "code-and-documentation-contributors"], [1033, "code-and-documentation-contributors"], [1034, "code-and-documentation-contributors"], [1035, "code-and-documentation-contributors"], [1036, "code-and-documentation-contributors"], [1037, "code-and-documentation-contributors"], [1038, "code-and-documentation-contributors"], [1039, "code-and-documentation-contributors"]], "Version 0.19": [[1029, "version-0-19"]], "Changed models": [[1029, "changed-models"], [1030, "changed-models"], [1030, "id9"], [1030, "id22"], [1031, "changed-models"], [1031, "id6"], [1032, "changed-models"], [1033, "changed-models"], [1033, "id3"], [1034, "changed-models"], [1035, "changed-models"], [1036, "changed-models"], [1036, "id6"], [1037, "changed-models"], [1037, "id7"], [1038, "changed-models"], [1039, "changed-models"]], "Version 0.20.4": [[1030, "version-0-20-4"]], "sklearn.cluster": [[1030, "sklearn-cluster"], [1030, "id2"], [1030, "id11"], [1030, "id24"], [1031, "sklearn-cluster"], [1031, "id8"], [1032, "sklearn-cluster"], [1032, "id5"], [1033, "sklearn-cluster"], [1033, "id2"], [1033, "id5"], [1034, "sklearn-cluster"], [1035, "sklearn-cluster"], [1035, "id2"], [1035, "id9"], [1036, "sklearn-cluster"], [1036, "id8"], [1037, "sklearn-cluster"], [1037, "id12"], [1038, "sklearn-cluster"]], "sklearn.compose": [[1030, "sklearn-compose"], [1030, "id3"], [1030, "id6"], [1030, "id12"], [1030, "id25"], [1031, "sklearn-compose"], [1031, "id9"], [1032, "sklearn-compose"], [1033, "sklearn-compose"], [1034, "sklearn-compose"], [1034, "id5"], [1035, "sklearn-compose"], [1036, "sklearn-compose"], [1037, "sklearn-compose"], [1038, "sklearn-compose"]], "sklearn.decomposition": [[1030, "sklearn-decomposition"], [1030, "id4"], [1030, "id14"], [1030, "id28"], [1031, "sklearn-decomposition"], [1031, "id11"], [1032, "sklearn-decomposition"], [1033, "sklearn-decomposition"], [1033, "id6"], [1034, "sklearn-decomposition"], [1034, "id7"], [1035, "sklearn-decomposition"], [1035, "id11"], [1036, "sklearn-decomposition"], [1036, "id10"], [1037, "sklearn-decomposition"], [1037, "id14"], [1038, "sklearn-decomposition"], [1039, "sklearn-decomposition"]], "sklearn.model_selection": [[1030, "sklearn-model-selection"], [1030, "id35"], [1031, "sklearn-model-selection"], [1032, "sklearn-model-selection"], [1032, "id9"], [1032, "id13"], [1033, "sklearn-model-selection"], [1034, "sklearn-model-selection"], [1034, "id13"], [1035, "sklearn-model-selection"], [1036, "sklearn-model-selection"], [1037, "sklearn-model-selection"], [1037, "id20"], [1038, "sklearn-model-selection"], [1039, "sklearn-model-selection"]], "sklearn.neighbors": [[1030, "sklearn-neighbors"], [1030, "id7"], [1030, "id18"], [1030, "id36"], [1031, "sklearn-neighbors"], [1031, "id5"], [1031, "id17"], [1032, "sklearn-neighbors"], [1032, "id11"], [1034, "sklearn-neighbors"], [1035, "sklearn-neighbors"], [1035, "id5"], [1035, "id18"], [1036, "sklearn-neighbors"], [1037, "sklearn-neighbors"], [1038, "sklearn-neighbors"], [1038, "id2"], [1039, "sklearn-neighbors"]], "Version 0.20.3": [[1030, "version-0-20-3"]], "sklearn.covariance": [[1030, "sklearn-covariance"], [1030, "id26"], [1034, "sklearn-covariance"], [1035, "sklearn-covariance"], [1036, "sklearn-covariance"], [1038, "sklearn-covariance"]], "sklearn.datasets": [[1030, "sklearn-datasets"], [1030, "id13"], [1030, "id27"], [1031, "sklearn-datasets"], [1031, "id10"], [1032, "sklearn-datasets"], [1033, "sklearn-datasets"], [1034, "sklearn-datasets"], [1035, "sklearn-datasets"], [1035, "id10"], [1036, "sklearn-datasets"], [1036, "id9"], [1037, "sklearn-datasets"], [1037, "id13"], [1038, "sklearn-datasets"]], "sklearn.feature_extraction": [[1030, "sklearn-feature-extraction"], [1030, "id15"], [1030, "id30"], [1031, "sklearn-feature-extraction"], [1032, "sklearn-feature-extraction"], [1033, "sklearn-feature-extraction"], [1033, "id8"], [1034, "sklearn-feature-extraction"], [1034, "id9"], [1035, "sklearn-feature-extraction"], [1035, "id13"], [1036, "sklearn-feature-extraction"], [1037, "sklearn-feature-extraction"], [1038, "sklearn-feature-extraction"]], "sklearn.impute": [[1030, "sklearn-impute"], [1030, "id31"], [1031, "sklearn-impute"], [1031, "id13"], [1032, "sklearn-impute"], [1032, "id6"], [1033, "sklearn-impute"], [1034, "sklearn-impute"], [1035, "sklearn-impute"], [1036, "sklearn-impute"], [1036, "id12"], [1037, "sklearn-impute"], [1038, "sklearn-impute"]], "sklearn.linear_model": [[1030, "sklearn-linear-model"], [1030, "id16"], [1030, "id32"], [1031, "sklearn-linear-model"], [1031, "id15"], [1032, "sklearn-linear-model"], [1033, "sklearn-linear-model"], [1033, "id9"], [1034, "sklearn-linear-model"], [1034, "id11"], [1035, "sklearn-linear-model"], [1035, "id4"], [1035, "id15"], [1036, "sklearn-linear-model"], [1036, "id13"], [1037, "sklearn-linear-model"], [1037, "id18"], [1038, "sklearn-linear-model"], [1039, "sklearn-linear-model"]], "sklearn.preprocessing": [[1030, "sklearn-preprocessing"], [1030, "id19"], [1030, "id37"], [1031, "sklearn-preprocessing"], [1031, "id18"], [1032, "sklearn-preprocessing"], [1032, "id12"], [1033, "sklearn-preprocessing"], [1034, "sklearn-preprocessing"], [1034, "id15"], [1035, "sklearn-preprocessing"], [1035, "id20"], [1036, "sklearn-preprocessing"], [1036, "id4"], [1036, "id16"], [1037, "sklearn-preprocessing"], [1037, "id4"], [1037, "id22"], [1038, "sklearn-preprocessing"], [1038, "id3"], [1039, "sklearn-preprocessing"]], "sklearn.svm": [[1030, "sklearn-svm"], [1030, "id38"], [1031, "sklearn-svm"], [1032, "sklearn-svm"], [1033, "sklearn-svm"], [1034, "sklearn-svm"], [1035, "sklearn-svm"], [1035, "id21"], [1036, "sklearn-svm"], [1037, "sklearn-svm"], [1038, "sklearn-svm"]], "Version 0.20.2": [[1030, "version-0-20-2"]], "sklearn.metrics": [[1030, "sklearn-metrics"], [1030, "id17"], [1030, "id33"], [1031, "sklearn-metrics"], [1031, "id4"], [1031, "id16"], [1032, "sklearn-metrics"], [1032, "id2"], [1032, "id8"], [1033, "sklearn-metrics"], [1033, "id10"], [1034, "sklearn-metrics"], [1034, "id2"], [1034, "id12"], [1035, "sklearn-metrics"], [1035, "id17"], [1036, "sklearn-metrics"], [1036, "id3"], [1036, "id15"], [1037, "sklearn-metrics"], [1038, "sklearn-metrics"], [1039, "sklearn-metrics"]], "sklearn.utils": [[1030, "sklearn-utils"], [1030, "id20"], [1030, "id39"], [1031, "sklearn-utils"], [1032, "sklearn-utils"], [1032, "id14"], [1033, "sklearn-utils"], [1033, "id12"], [1034, "sklearn-utils"], [1034, "id18"], [1035, "sklearn-utils"], [1035, "id6"], [1035, "id23"], [1036, "sklearn-utils"], [1036, "id18"], [1037, "sklearn-utils"], [1037, "id6"], [1037, "id24"], [1038, "sklearn-utils"], [1039, "sklearn-utils"]], "Version 0.20.1": [[1030, "version-0-20-1"]], "sklearn.ensemble": [[1030, "sklearn-ensemble"], [1030, "id29"], [1031, "sklearn-ensemble"], [1031, "id12"], [1032, "sklearn-ensemble"], [1033, "sklearn-ensemble"], [1033, "id7"], [1034, "sklearn-ensemble"], [1034, "id8"], [1035, "sklearn-ensemble"], [1035, "id3"], [1035, "id12"], [1036, "sklearn-ensemble"], [1037, "sklearn-ensemble"], [1037, "id3"], [1037, "id15"], [1038, "sklearn-ensemble"], [1039, "sklearn-ensemble"]], "sklearn.mixture": [[1030, "sklearn-mixture"], [1030, "id34"], [1031, "sklearn-mixture"], [1035, "sklearn-mixture"], [1036, "sklearn-mixture"]], "Version 0.20.0": [[1030, "version-0-20-0"]], "Known Major Bugs": [[1030, "known-major-bugs"], [1031, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1030, "sklearn-discriminant-analysis"], [1031, "sklearn-discriminant-analysis"], [1034, "sklearn-discriminant-analysis"], [1036, "sklearn-discriminant-analysis"], [1037, "sklearn-discriminant-analysis"], [1038, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1030, "sklearn-dummy"], [1031, "sklearn-dummy"], [1032, "sklearn-dummy"], [1035, "sklearn-dummy"], [1036, "sklearn-dummy"]], "sklearn.feature_selection": [[1030, "sklearn-feature-selection"], [1032, "sklearn-feature-selection"], [1033, "sklearn-feature-selection"], [1034, "sklearn-feature-selection"], [1035, "sklearn-feature-selection"], [1035, "id14"], [1036, "sklearn-feature-selection"], [1036, "id2"], [1036, "id11"], [1037, "sklearn-feature-selection"], [1037, "id16"], [1038, "sklearn-feature-selection"], [1039, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1030, "sklearn-gaussian-process"], [1032, "sklearn-gaussian-process"], [1033, "sklearn-gaussian-process"], [1034, "sklearn-gaussian-process"], [1034, "id10"], [1035, "sklearn-gaussian-process"], [1036, "sklearn-gaussian-process"], [1037, "sklearn-gaussian-process"], [1038, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1030, "sklearn-isotonic"], [1031, "sklearn-isotonic"], [1032, "sklearn-isotonic"], [1034, "sklearn-isotonic"], [1036, "sklearn-isotonic"], [1037, "sklearn-isotonic"]], "sklearn.manifold": [[1030, "sklearn-manifold"], [1031, "sklearn-manifold"], [1032, "sklearn-manifold"], [1033, "sklearn-manifold"], [1034, "sklearn-manifold"], [1035, "sklearn-manifold"], [1035, "id16"], [1036, "sklearn-manifold"], [1036, "id14"], [1037, "sklearn-manifold"], [1037, "id19"], [1038, "sklearn-manifold"]], "sklearn.multioutput": [[1030, "sklearn-multioutput"], [1031, "sklearn-multioutput"], [1032, "sklearn-multioutput"], [1033, "sklearn-multioutput"], [1034, "sklearn-multioutput"], [1034, "id14"], [1037, "sklearn-multioutput"], [1038, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1030, "sklearn-naive-bayes"], [1032, "sklearn-naive-bayes"], [1032, "id10"], [1033, "sklearn-naive-bayes"], [1034, "sklearn-naive-bayes"], [1035, "sklearn-naive-bayes"], [1037, "sklearn-naive-bayes"], [1038, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1030, "sklearn-neural-network"], [1031, "sklearn-neural-network"], [1032, "sklearn-neural-network"], [1033, "sklearn-neural-network"], [1034, "sklearn-neural-network"], [1035, "sklearn-neural-network"], [1036, "sklearn-neural-network"], [1037, "sklearn-neural-network"], [1037, "id21"], [1038, "sklearn-neural-network"]], "sklearn.pipeline": [[1030, "sklearn-pipeline"], [1031, "sklearn-pipeline"], [1032, "sklearn-pipeline"], [1033, "sklearn-pipeline"], [1034, "sklearn-pipeline"], [1035, "sklearn-pipeline"], [1035, "id19"], [1036, "sklearn-pipeline"], [1037, "sklearn-pipeline"], [1038, "sklearn-pipeline"], [1039, "sklearn-pipeline"]], "sklearn.tree": [[1030, "sklearn-tree"], [1031, "sklearn-tree"], [1031, "id19"], [1032, "sklearn-tree"], [1033, "sklearn-tree"], [1034, "sklearn-tree"], [1034, "id17"], [1035, "sklearn-tree"], [1035, "id22"], [1036, "sklearn-tree"], [1036, "id5"], [1036, "id17"], [1037, "sklearn-tree"], [1037, "id5"], [1037, "id23"], [1038, "sklearn-tree"], [1038, "id4"], [1039, "sklearn-tree"]], "Multiple modules": [[1030, "multiple-modules"], [1031, "multiple-modules"]], "Changes to estimator checks": [[1030, "changes-to-estimator-checks"], [1031, "changes-to-estimator-checks"], [1032, "changes-to-estimator-checks"]], "Version 0.21.3": [[1031, "version-0-21-3"]], "Legend for changelogs": [[1031, "legend-for-changelogs"], [1032, "legend-for-changelogs"], [1033, "legend-for-changelogs"], [1034, "legend-for-changelogs"], [1035, "legend-for-changelogs"], [1036, "legend-for-changelogs"], [1037, "legend-for-changelogs"], [1038, "legend-for-changelogs"], [1039, "legend-for-changelogs"]], "sklearn.inspection": [[1031, "sklearn-inspection"], [1031, "id3"], [1031, "id14"], [1032, "sklearn-inspection"], [1032, "id7"], [1033, "sklearn-inspection"], [1033, "id11"], [1034, "sklearn-inspection"], [1035, "sklearn-inspection"], [1036, "sklearn-inspection"], [1037, "sklearn-inspection"], [1037, "id17"], [1038, "sklearn-inspection"]], "Version 0.21.2": [[1031, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1031, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1031, "version-0-21-1"]], "Version 0.21.0": [[1031, "version-0-21-0"]], "sklearn.base": [[1031, "sklearn-base"], [1032, "sklearn-base"], [1034, "sklearn-base"], [1035, "sklearn-base"], [1036, "sklearn-base"], [1037, "sklearn-base"], [1037, "id2"], [1037, "id10"], [1038, "sklearn-base"], [1039, "sklearn-base"]], "sklearn.calibration": [[1031, "sklearn-calibration"], [1032, "sklearn-calibration"], [1034, "sklearn-calibration"], [1035, "sklearn-calibration"], [1035, "id8"], [1036, "sklearn-calibration"], [1037, "sklearn-calibration"], [1037, "id11"], [1038, "sklearn-calibration"]], "sklearn.externals": [[1031, "sklearn-externals"]], "sklearn.multiclass": [[1031, "sklearn-multiclass"], [1034, "sklearn-multiclass"], [1035, "sklearn-multiclass"], [1036, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1032, "version-0-22-2-post1"]], "Version 0.22.1": [[1032, "version-0-22-1"]], "sklearn.semi_supervised": [[1032, "sklearn-semi-supervised"], [1033, "sklearn-semi-supervised"], [1034, "sklearn-semi-supervised"], [1034, "id3"], [1034, "id16"], [1038, "sklearn-semi-supervised"]], "Version 0.22.0": [[1032, "version-0-22-0"]], "Website update": [[1032, "website-update"]], "Clear definition of the public API": [[1032, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1032, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1032, "sklearn-cross-decomposition"], [1034, "sklearn-cross-decomposition"], [1034, "id6"], [1036, "sklearn-cross-decomposition"], [1039, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1032, "sklearn-kernel-approximation"], [1034, "sklearn-kernel-approximation"], [1035, "sklearn-kernel-approximation"], [1036, "sklearn-kernel-approximation"], [1037, "sklearn-kernel-approximation"], [1038, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1033, "version-0-23-2"]], "Version 0.23.1": [[1033, "version-0-23-1"]], "Version 0.23.0": [[1033, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1033, "enforcing-keyword-only-arguments"], [1035, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1034, "version-0-24-2"]], "Version 0.24.1": [[1034, "version-0-24-1"]], "Packaging": [[1034, "packaging"]], "Version 0.24.0": [[1034, "version-0-24-0"]], "sklearn.exceptions": [[1034, "sklearn-exceptions"], [1038, "sklearn-exceptions"]], "Version 1.0.2": [[1035, "version-1-0-2"]], "Version 1.0.1": [[1035, "version-1-0-1"]], "Fixed models": [[1035, "fixed-models"]], "Version 1.0.0": [[1035, "version-1-0-0"]], "Minimal dependencies": [[1035, "minimal-dependencies"], [1036, "minimal-dependencies"]], "Version 1.1.3": [[1036, "version-1-1-3"]], "Version 1.1.2": [[1036, "version-1-1-2"]], "Version 1.1.1": [[1036, "version-1-1-1"]], "Version 1.1.0": [[1036, "version-1-1-0"]], "sklearn.random_projection": [[1036, "sklearn-random-projection"]], "Version 1.2.2": [[1037, "version-1-2-2"]], "Version 1.2.1": [[1037, "version-1-2-1"]], "Changes impacting all modules": [[1037, "changes-impacting-all-modules"], [1037, "id8"], [1038, "changes-impacting-all-modules"], [1039, "changes-impacting-all-modules"]], "Version 1.2.0": [[1037, "version-1-2-0"]], "Version 1.3.1": [[1038, "version-1-3-1"]], "Version 1.3.0": [[1038, "version-1-3-0"]], "Changed displays": [[1038, "changed-displays"]], "Experimental / Under Development": [[1038, "experimental-under-development"]], "sklearn": [[1038, "sklearn"]], "Version 1.4.0": [[1039, "version-1-4-0"]]}, "indexentries": {"1d": [[389, "term-1d"]], "1d array": [[389, "term-1d-array"]], "2d": [[389, "term-2d"]], "2d array": [[389, "term-2d-array"]], "api": [[389, "term-API"]], "cv splitter": [[389, "term-CV-splitter"]], "slep": [[389, "term-SLEP"]], "sleps": [[389, "term-SLEPs"]], "x": [[389, "term-X"]], "xt": [[389, "term-Xt"]], "y": [[389, "term-Y"], [389, "term-y"]], "_estimator_type": [[389, "term-_estimator_type"]], "array-like": [[389, "term-array-like"]], "attribute": [[389, "term-attribute"]], "attributes": [[389, "term-attributes"]], "backwards compatibility": [[389, "term-backwards-compatibility"]], "binary": [[389, "term-binary"]], "callable": [[389, "term-callable"]], "categorical feature": [[389, "term-categorical-feature"]], "class_weight": [[389, "term-class_weight"]], "classes_": [[389, "term-classes_"]], "classifier": [[389, "term-classifier"]], "classifiers": [[389, "term-classifiers"]], "clone": [[389, "term-clone"]], "cloned": [[389, "term-cloned"]], "clusterer": [[389, "term-clusterer"]], "clusterers": [[389, "term-clusterers"]], "coef_": [[389, "term-coef_"]], "common tests": [[389, "term-common-tests"]], "components_": [[389, "term-components_"]], "consumer": [[389, "term-consumer"]], "continuous": [[389, "term-continuous"]], "continuous multi-output": [[389, "term-continuous-multi-output"]], "continuous multioutput": [[389, "term-continuous-multioutput"]], "cross fitting": [[389, "term-0"]], "cross validation": [[389, "term-1"]], "cross-fitting": [[389, "term-cross-fitting"]], "cross-validation": [[389, "term-cross-validation"]], "cross-validation estimator": [[389, "term-cross-validation-estimator"]], "cross-validation generator": [[389, "term-cross-validation-generator"]], "cross-validation splitter": [[389, "term-cross-validation-splitter"]], "cv": [[389, "term-cv"]], "data leakage": [[389, "term-data-leakage"]], "data type": [[389, "term-data-type"]], "decision_function": [[389, "term-decision_function"]], "density estimator": [[389, "term-density-estimator"]], "deprecation": [[389, "term-deprecation"]], "dimensionality": [[389, "term-dimensionality"]], "docstring": [[389, "term-docstring"]], "double underscore": [[389, "term-double-underscore"]], "double underscore notation": [[389, "term-double-underscore-notation"]], "dtype": [[389, "term-dtype"]], "duck typing": [[389, "term-duck-typing"]], "early stopping": [[389, "term-early-stopping"]], "embedding_": [[389, "term-embedding_"]], "estimator": [[389, "term-estimator"]], "estimator instance": [[389, "term-estimator-instance"]], "estimator tags": [[389, "term-estimator-tags"]], "estimators": [[389, "term-estimators"]], "evaluation metric": [[389, "term-evaluation-metric"]], "evaluation metrics": [[389, "term-evaluation-metrics"]], "examples": [[389, "term-examples"]], "experimental": [[389, "term-experimental"]], "feature": [[389, "term-feature"]], "feature extractor": [[389, "term-feature-extractor"]], "feature extractors": [[389, "term-feature-extractors"]], "feature vector": [[389, "term-feature-vector"]], "feature_importances_": [[389, "term-feature_importances_"]], "features": [[389, "term-features"]], "fit": [[389, "term-fit"]], "fit_predict": [[389, "term-fit_predict"]], "fit_transform": [[389, "term-fit_transform"]], "fitted": [[389, "term-fitted"]], "fitting": [[389, "term-fitting"]], "function": [[389, "term-function"]], "gallery": [[389, "term-gallery"]], "get_feature_names_out": [[389, "term-get_feature_names_out"]], "get_n_splits": [[389, "term-get_n_splits"]], "get_params": [[389, "term-get_params"]], "groups": [[389, "term-groups"]], "hyper-parameter": [[389, "term-hyper-parameter"]], "hyperparameter": [[389, "term-hyperparameter"]], "imputation": [[389, "term-imputation"]], "impute": [[389, "term-impute"]], "indexable": [[389, "term-indexable"]], "induction": [[389, "term-induction"]], "inductive": [[389, "term-inductive"]], "joblib": [[389, "term-joblib"]], "kernel": [[389, "term-kernel"]], "label indicator matrix": [[389, "term-label-indicator-matrix"]], "labels_": [[389, "term-labels_"]], "leakage": [[389, "term-leakage"]], "max_iter": [[389, "term-max_iter"]], "memmapping": [[389, "term-memmapping"]], "memory": [[389, "term-memory"]], "memory map": [[389, "term-memory-map"]], "memory mapping": [[389, "term-memory-mapping"]], "meta-estimator": [[389, "term-meta-estimator"]], "meta-estimators": [[389, "term-meta-estimators"]], "metadata": [[389, "term-metadata"]], "metaestimator": [[389, "term-metaestimator"]], "metaestimators": [[389, "term-metaestimators"]], "metric": [[389, "term-metric"]], "missing values": [[389, "term-missing-values"]], "multi-class": [[389, "term-multi-class"]], "multi-class multi-output": [[389, "term-multi-class-multi-output"]], "multi-label": [[389, "term-multi-label"]], "multi-output": [[389, "term-multi-output"]], "multi-output continuous": [[389, "term-multi-output-continuous"]], "multi-output multi-class": [[389, "term-multi-output-multi-class"]], "multiclass": [[389, "term-multiclass"]], "multiclass multioutput": [[389, "term-multiclass-multioutput"]], "multilabel": [[389, "term-multilabel"]], "multilabel indicator matrices": [[389, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[389, "term-multilabel-indicator-matrix"]], "multioutput": [[389, "term-multioutput"]], "multioutput continuous": [[389, "term-multioutput-continuous"]], "multioutput multiclass": [[389, "term-multioutput-multiclass"]], "n_components": [[389, "term-n_components"]], "n_features": [[389, "term-n_features"]], "n_iter_": [[389, "term-n_iter_"]], "n_iter_no_change": [[389, "term-n_iter_no_change"]], "n_jobs": [[389, "term-n_jobs"]], "n_outputs": [[389, "term-n_outputs"]], "n_samples": [[389, "term-n_samples"]], "n_targets": [[389, "term-n_targets"]], "narrative docs": [[389, "term-narrative-docs"]], "narrative documentation": [[389, "term-narrative-documentation"]], "np": [[389, "term-np"]], "online learning": [[389, "term-online-learning"]], "out-of-core": [[389, "term-out-of-core"]], "outlier detector": [[389, "term-outlier-detector"]], "outlier detectors": [[389, "term-outlier-detectors"]], "outputs": [[389, "term-outputs"]], "pair": [[389, "term-pair"]], "pairwise metric": [[389, "term-pairwise-metric"]], "pairwise metrics": [[389, "term-pairwise-metrics"]], "param": [[389, "term-param"]], "parameter": [[389, "term-parameter"]], "parameters": [[389, "term-parameters"]], "params": [[389, "term-params"]], "partial_fit": [[389, "term-partial_fit"]], "pd": [[389, "term-pd"]], "pos_label": [[389, "term-pos_label"]], "precomputed": [[389, "term-precomputed"]], "predict": [[389, "term-predict"]], "predict_log_proba": [[389, "term-predict_log_proba"]], "predict_proba": [[389, "term-predict_proba"]], "predictor": [[389, "term-predictor"]], "predictors": [[389, "term-predictors"]], "random_state": [[389, "term-random_state"]], "rectangular": [[389, "term-rectangular"]], "regressor": [[389, "term-regressor"]], "regressors": [[389, "term-regressors"]], "router": [[389, "term-router"]], "sample": [[389, "term-sample"]], "sample properties": [[389, "term-sample-properties"]], "sample property": [[389, "term-sample-property"]], "sample_weight": [[389, "term-sample_weight"]], "samples": [[389, "term-samples"]], "scikit-learn enhancement proposals": [[389, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[389, "term-scikit-learn-contrib"]], "score": [[389, "term-score"]], "score_samples": [[389, "term-score_samples"]], "scorer": [[389, "term-scorer"]], "scoring": [[389, "term-scoring"]], "semi-supervised": [[389, "term-semi-supervised"]], "semi-supervised learning": [[389, "term-semi-supervised-learning"]], "semisupervised": [[389, "term-semisupervised"]], "set_params": [[389, "term-set_params"]], "sparse graph": [[389, "term-sparse-graph"]], "sparse matrix": [[389, "term-sparse-matrix"]], "split": [[389, "term-split"]], "stateless": [[389, "term-stateless"]], "supervised": [[389, "term-supervised"]], "supervised learning": [[389, "term-supervised-learning"]], "target": [[389, "term-target"]], "targets": [[389, "term-targets"]], "transduction": [[389, "term-transduction"]], "transductive": [[389, "term-transductive"]], "transform": [[389, "term-transform"]], "transformer": [[389, "term-transformer"]], "transformers": [[389, "term-transformers"]], "unlabeled": [[389, "term-unlabeled"]], "unlabeled data": [[389, "term-unlabeled-data"]], "unsupervised": [[389, "term-unsupervised"]], "unsupervised learning": [[389, "term-unsupervised-learning"]], "vectorizer": [[389, "term-vectorizer"]], "vectorizers": [[389, "term-vectorizers"]], "verbose": [[389, "term-verbose"]], "warm_start": [[389, "term-warm_start"]], "module": [[401, "module-sklearn.base"], [401, "module-sklearn.calibration"], [401, "module-sklearn.cluster"], [401, "module-sklearn.compose"], [401, "module-sklearn.covariance"], [401, "module-sklearn.cross_decomposition"], [401, "module-sklearn.datasets"], [401, "module-sklearn.decomposition"], [401, "module-sklearn.discriminant_analysis"], [401, "module-sklearn.dummy"], [401, "module-sklearn.ensemble"], [401, "module-sklearn.exceptions"], [401, "module-sklearn.experimental"], [401, "module-sklearn.feature_extraction"], [401, "module-sklearn.feature_extraction.image"], [401, "module-sklearn.feature_extraction.text"], [401, "module-sklearn.feature_selection"], [401, "module-sklearn.gaussian_process"], [401, "module-sklearn.impute"], [401, "module-sklearn.inspection"], [401, "module-sklearn.isotonic"], [401, "module-sklearn.kernel_approximation"], [401, "module-sklearn.kernel_ridge"], [401, "module-sklearn.linear_model"], [401, "module-sklearn.manifold"], [401, "module-sklearn.metrics"], [401, "module-sklearn.metrics.cluster"], [401, "module-sklearn.metrics.pairwise"], [401, "module-sklearn.mixture"], [401, "module-sklearn.model_selection"], [401, "module-sklearn.multiclass"], [401, "module-sklearn.multioutput"], [401, "module-sklearn.naive_bayes"], [401, "module-sklearn.neighbors"], [401, "module-sklearn.neural_network"], [401, "module-sklearn.pipeline"], [401, "module-sklearn.preprocessing"], [401, "module-sklearn.random_projection"], [401, "module-sklearn.semi_supervised"], [401, "module-sklearn.svm"], [401, "module-sklearn.tree"], [401, "module-sklearn.utils"], [572, "module-sklearn.experimental.enable_halving_search_cv"], [573, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[401, "module-sklearn.base"]], "sklearn.calibration": [[401, "module-sklearn.calibration"]], "sklearn.cluster": [[401, "module-sklearn.cluster"]], "sklearn.compose": [[401, "module-sklearn.compose"]], "sklearn.covariance": [[401, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[401, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[401, "module-sklearn.datasets"]], "sklearn.decomposition": [[401, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[401, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[401, "module-sklearn.dummy"]], "sklearn.ensemble": [[401, "module-sklearn.ensemble"]], "sklearn.exceptions": [[401, "module-sklearn.exceptions"]], "sklearn.experimental": [[401, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[401, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[401, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[401, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[401, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[401, "module-sklearn.gaussian_process"]], "sklearn.impute": [[401, "module-sklearn.impute"]], "sklearn.inspection": [[401, "module-sklearn.inspection"]], "sklearn.isotonic": [[401, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[401, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[401, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[401, "module-sklearn.linear_model"]], "sklearn.manifold": [[401, "module-sklearn.manifold"]], "sklearn.metrics": [[401, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[401, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[401, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[401, "module-sklearn.mixture"]], "sklearn.model_selection": [[401, "module-sklearn.model_selection"]], "sklearn.multiclass": [[401, "module-sklearn.multiclass"]], "sklearn.multioutput": [[401, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[401, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[401, "module-sklearn.neighbors"]], "sklearn.neural_network": [[401, "module-sklearn.neural_network"]], "sklearn.pipeline": [[401, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[401, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[401, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[401, "module-sklearn.semi_supervised"]], "sklearn.svm": [[401, "module-sklearn.svm"]], "sklearn.tree": [[401, "module-sklearn.tree"]], "sklearn.utils": [[401, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[413, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[414, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[415, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[416, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[416, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[416, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[416, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[417, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[417, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[417, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[417, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[417, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[418, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[418, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[419, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[419, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[420, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[420, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[421, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[421, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[422, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[423, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[423, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[424, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[424, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[425, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[425, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[426, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[426, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[426, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[427, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[428, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[429, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[430, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[430, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[431, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[431, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[431, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[431, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[432, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[433, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[433, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[433, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[433, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[433, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[433, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[433, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[434, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[434, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[434, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[434, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[434, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[434, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[435, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[435, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[436, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[436, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[437, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[437, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[437, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[437, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[437, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[437, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[437, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[438, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[438, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[438, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[439, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[439, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[439, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[439, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[439, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[439, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[439, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[440, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[440, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[441, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[441, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[441, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[441, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[441, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[441, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[441, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[442, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[442, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[443, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[443, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[443, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[443, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[443, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[443, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[444, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[444, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[444, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[444, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[444, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[444, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[444, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[444, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[444, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[445, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[445, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[445, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[445, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[445, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[445, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[446, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[446, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[446, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[446, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[446, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[446, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[446, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[446, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[446, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[447, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[448, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[449, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[450, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[451, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[452, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[453, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[454, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[455, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[456, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[457, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[457, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[457, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[458, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[458, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[458, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[458, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[458, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[458, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[458, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[458, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[458, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[459, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[460, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[461, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[462, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[462, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[463, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[463, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[464, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[464, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[465, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[465, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[466, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[466, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[467, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[467, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[468, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[468, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[469, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[469, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[470, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[471, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[472, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[473, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[474, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[475, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[475, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[476, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[476, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[477, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[477, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[478, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[478, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[479, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[480, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[481, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[482, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[483, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[484, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[485, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[492, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[493, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[494, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[495, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[496, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[497, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[524, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[524, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[525, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[525, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[526, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[526, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[527, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[527, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[528, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[528, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[529, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[529, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[530, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[531, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[531, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[532, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[532, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[533, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[533, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[534, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[534, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[535, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[535, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[535, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[535, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[536, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[536, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[537, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[537, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[538, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[539, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[540, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[541, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[542, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[543, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[544, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[544, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[545, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[545, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[546, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[546, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[546, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[546, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[547, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[547, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[547, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[547, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[548, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[548, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[548, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[548, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[549, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[549, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[549, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[549, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[550, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[550, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[550, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[550, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[551, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[551, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[551, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[551, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[552, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[552, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[552, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[552, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[553, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[553, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[553, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[553, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[554, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[555, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[556, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[556, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[556, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[556, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[557, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[557, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[557, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[558, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[558, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[558, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[559, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[559, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[559, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[559, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[560, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[560, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[560, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[561, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[561, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[561, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[562, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[562, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[562, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[563, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[563, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[563, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[564, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[564, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[565, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[565, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[566, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[566, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[567, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[567, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[568, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[568, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[569, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[569, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[570, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[570, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[571, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[572, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[573, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[574, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[574, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[575, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[575, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[576, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[576, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[576, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[576, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[576, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[576, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[576, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[576, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[577, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[578, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[579, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[580, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[581, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[581, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[582, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[582, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[583, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[583, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[584, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[585, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[585, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[586, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[586, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[586, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[587, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[587, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[587, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[588, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[588, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[589, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[589, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[590, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[590, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[590, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[591, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[592, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[593, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[594, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[594, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[594, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[594, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[594, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[594, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[595, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[596, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[597, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[598, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[599, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[600, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[601, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[602, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[603, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[604, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[605, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[606, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[607, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[607, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[607, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[607, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[607, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[607, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[607, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[607, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[607, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[607, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[607, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[607, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[608, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[609, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[610, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[611, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[611, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[611, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[611, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[611, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[611, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[611, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[611, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[611, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[611, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[611, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[612, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[612, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[612, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[612, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[612, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[612, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[612, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[612, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[612, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[612, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[612, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[613, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[614, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[614, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[614, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[614, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[614, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[614, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[614, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[614, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[614, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[614, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[614, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[615, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[615, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[615, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[615, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[615, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[615, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[615, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[615, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[615, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[615, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[615, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[616, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[617, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[617, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[617, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[617, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[617, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[617, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[617, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[617, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[617, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[617, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[617, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[618, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[619, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[620, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[620, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[621, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[621, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[622, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[622, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[623, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[623, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[624, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[624, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[624, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[625, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[625, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[625, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[626, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[627, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[628, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[628, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[629, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[630, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[631, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[632, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[632, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[633, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[634, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[634, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[635, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[636, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[636, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[637, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[637, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[638, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[638, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[639, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[639, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[639, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[639, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[640, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[640, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[641, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[641, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[642, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[642, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[643, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[643, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[644, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[645, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[645, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[645, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[645, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[646, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[646, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[646, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[647, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[647, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[648, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[649, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[649, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[650, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[650, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[651, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[652, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[653, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[653, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[653, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[654, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[655, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[655, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[655, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[655, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[656, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[657, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[658, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[659, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[660, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[661, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[661, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[662, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[662, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[663, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[663, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[664, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[664, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[664, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[664, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[664, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[664, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[664, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[664, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[665, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[665, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[666, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[667, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[667, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[667, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[668, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[668, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[668, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[669, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[669, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[670, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[670, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[671, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[672, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[672, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[672, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[672, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[672, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[672, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[672, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[673, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[673, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[674, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[675, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[676, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[677, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[678, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[679, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[680, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[681, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[681, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[682, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[682, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[683, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[683, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[683, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[683, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[683, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[683, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[683, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[684, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[684, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[684, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[684, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[684, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[684, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[685, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[685, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[685, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[685, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[685, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[685, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[685, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[685, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[686, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[687, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[688, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[689, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[690, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[690, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[690, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[690, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[691, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[691, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[691, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[691, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[692, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric method)": [[692, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[693, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[693, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[693, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[693, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[694, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[694, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[694, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[694, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[695, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[695, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[695, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[695, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[696, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[698, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[699, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[702, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[704, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[705, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[706, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[707, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[708, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[711, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[713, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[719, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[724, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[725, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[726, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[727, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[728, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[732, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[733, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[734, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[735, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[736, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[737, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[738, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[739, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[740, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[741, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[742, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[743, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[746, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[747, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[748, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[749, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[770, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[771, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[772, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[773, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[774, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[775, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[776, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[777, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[778, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[779, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[780, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[781, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[782, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[786, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[787, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[787, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[788, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[788, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[789, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[789, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[789, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[789, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[790, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[790, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[790, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[790, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[790, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[791, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[791, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[791, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[791, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[791, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[792, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[792, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[792, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[792, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[793, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[793, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[794, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[794, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[794, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[794, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[795, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[795, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[795, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[796, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[796, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[796, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[796, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[796, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[797, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[797, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[797, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[797, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[798, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[798, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[798, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[798, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[798, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[799, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[799, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[799, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[799, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[800, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[801, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[802, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[802, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[802, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[802, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[803, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[803, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[803, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_fit_request() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.set_fit_request"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[803, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[804, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[804, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[804, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[804, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[805, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[805, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[805, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[805, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[806, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[806, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[806, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[806, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[807, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[807, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[807, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[807, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[807, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[808, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[808, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[808, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[808, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[809, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[809, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[809, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[809, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[810, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[810, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[810, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[810, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[811, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[811, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[811, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[812, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[813, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[814, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[815, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[816, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[817, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[818, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[819, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[820, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[820, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[820, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[821, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[821, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[821, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[821, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[822, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[822, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[822, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[822, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[822, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[822, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[822, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[822, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[823, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[823, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[824, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[824, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[825, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[825, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[826, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[826, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[826, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[826, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[826, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[826, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[826, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[826, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[827, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[827, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[828, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[828, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[829, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[829, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[830, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[830, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[831, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[831, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[832, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[832, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[833, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[833, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[834, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[834, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[835, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[835, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[836, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[836, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[837, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[837, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[838, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[838, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[839, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[839, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[839, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[839, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[839, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[839, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[839, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[839, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[840, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[840, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[841, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[842, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[843, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[844, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[845, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[846, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[847, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[848, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[848, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[849, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[849, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[850, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[850, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[851, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[851, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[851, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[851, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[852, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[852, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[852, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[852, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[852, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[852, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[853, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[854, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[855, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[856, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[857, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[858, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[859, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[860, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[861, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[862, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[863, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[864, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[865, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[865, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[866, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[866, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[867, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[867, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[868, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[869, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[870, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[871, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[872, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[873, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[873, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[874, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[875, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[876, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[877, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[878, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[879, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[880, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[881, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[882, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[884, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[884, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[885, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[885, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[886, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[887, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[887, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[888, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[888, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[889, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[890, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[891, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[892, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[892, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[893, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[893, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[894, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[894, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[894, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[894, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[894, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[894, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[895, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[895, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[895, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[895, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[896, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[896, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[896, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[896, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[897, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[897, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[897, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[897, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[897, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[897, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[898, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[898, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[898, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[898, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[899, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[900, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[900, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[900, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[901, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[901, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[901, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[902, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[902, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[902, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[903, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[903, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[903, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[904, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[905, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[906, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[907, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[907, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[908, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[909, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[910, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[911, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[912, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[913, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[914, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[915, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[916, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[917, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[918, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[919, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[920, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[921, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[922, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[923, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[924, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[925, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[926, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[927, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[928, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[929, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[930, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[931, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[932, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[933, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[934, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[935, "sklearn.utils.indexable"]], "metadatarequest() (in module sklearn.utils.metadata_routing)": [[936, "sklearn.utils.metadata_routing.MetadataRequest"]], "metadatarouter() (in module sklearn.utils.metadata_routing)": [[937, "sklearn.utils.metadata_routing.MetadataRouter"]], "methodmapping() (in module sklearn.utils.metadata_routing)": [[938, "sklearn.utils.metadata_routing.MethodMapping"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[939, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[940, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[941, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[942, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[943, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[944, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[945, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[946, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[946, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[946, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[946, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[946, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[947, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[948, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[949, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[950, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[951, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[952, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[953, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[954, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[955, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[956, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[957, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[958, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[959, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[960, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[961, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[962, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[963, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[964, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[965, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[966, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[967, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[968, "sklearn.utils.validation.has_fit_parameter"]]}})